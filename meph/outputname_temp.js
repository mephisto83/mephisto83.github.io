(function loadTests() {

    mephFrameWork('MEPH', '../src');

    MEPH.ready().then(function () {
        /**
         * Custom Matchers
         */
        var jasmineDescribe = describe;
        jasmine.getEnv().defaultTimeoutInterval = 15000;
        jasmine.DEFAULT_TIMEOUT_INTERVAL = 15000;
        window.describe = function () {
            var args = MEPH.util.Array.convert(arguments);
            var name = args.first();
            var funcIndex = args.indexWhere(function (x) { return typeof x === 'function'; }).first();
            if (funcIndex === 1) {
                jasmineDescribe(name, args[funcIndex]);
            }
            else {
                MEPH.requires.apply(this, args.subset(1, funcIndex)).then(function () {
                    jasmineDescribe(name, args[funcIndex]);
                })
            }
        }
        MEPH.render = function (type, tagname, injections) {
            var app;
            return MEPH.requires(type, 'MEPHTests.helper.Application').then(function () {
                app = new MEPHTests.helper.Application();
                dom = app.createAppSpace(), div = document.createElement('div');
                div.innerHTML = '<' + tagname + '></' + tagname + '>';
                return app.create(type, div.firstElementChild, injections);
            }).then(function (results) {
                return app.loadViewObject([results], dom);
            }).then(function (results) {
                return {
                    res: results,
                    app: app
                };
            })
        }
        MEPH.customMatchers = {
            caught: function (util, customEqualityTesters) {
                return {
                    compare: function (actual, expected) {
                        if (expected === 'undefined') {
                            expected = '';
                        }

                        var result = {};
                        result.pass = actual.stack ? false : true;
                        if (!result.pass) {
                            result.message = 'Caught an expection : \n ' + actual.stack;
                            console.log(actual.stack);
                        }
                        else {
                            result.message = '';
                        }
                        return result;
                    }
                }
            },
            theTruth: function (util, customEqualityTesters) {
                return {
                    compare: function (actual, reason) {
                        if (reason === undefined) {
                            reason = '';
                        }
                        var result = { message: '' };
                        result.pass = actual;
                        if (!result.pass) {
                            result.message = reason;
                        }
                        return result;
                    }
                };
            }
        };
    }).then(function () {
        MEPH.setPath('../src', 'MEPH');
        MEPH.setPath('../specs', 'MEPHTests');
        MEPH.setPath('../specs/data', 'dataviews');
        MEPH.namespace('MEPHTests');
        MEPH.setInterval = function () { }
        MEPHTests.loadTests = function () {
            function loadScriptFiles() {
                var promise,
                    i,
                    tests = [
                        'MEPH.spec.js',
                        'audio/Audio.spec.js',
                        'audio/AudioResources.spec.js',
                        'audio/Recorder.spec.js',
                        'audio/Scheduler.spec.js',
                        'audio/Sequence.spec.js',
                        'audio/effects/AAFilter.spec.js',
                        'audio/effects/FIRFilter.spec.js',
                        'audio/graph/AudioGraph.spec.js',
                        'audio/graph/node/controls/Control.spec.js',
                        'audio/graph/node/AudioBufferSourceNode.spec.js',
                        'audio/graph/node/BiquadFilter.spec.js',
                        'audio/graph/node/ChannelMergerNode.spec.js',
                        'audio/graph/node/ChannelSplitterNode.spec.js',
                        'audio/graph/node/Convolver.spec.js',
                        'audio/graph/node/DelayNode.spec.js',
                        'audio/graph/node/DynamicsCompressorNode.spec.js',
                        'audio/graph/node/GainNode.spec.js',
                        'audio/graph/node/GeneratedNode.spec.js',
                        'audio/graph/node/InputNode.spec.js',
                        'audio/graph/node/Node.spec.js',
                        'audio/graph/node/OscillatorNode.spec.js',
                        'audio/graph/node/PannerNode.spec.js',
                        'audio/graph/node/SequenceNode.spec.js',
                        'audio/graph/node/WaveShaperNode.spec.js',
                        'audio/graph/AudioGraphReader.spec.js',
                        'audio/processor/FIFOSampleBuffer.spec.js',
                        'audio/processor/RateTransposer.spec.js',
                        'audio/processor/TDStretch.spec.js',
                        'audio/processor/SoundProcessor.spec.js',
                        'audio/music/instrument/Instrument.spec.js',
                        'audio/music/instrument/piano/GrandPiano.spec.js',
                        'audio/music/instrument/trumpet/Trumpet.spec.js',
                        'audio/music/instrument/SoundFontInstrument.spec.js',
                        'audio/music/theory/Notes.spec.js',
                        'audio/music/theory/Scales.spec.js',
                        'audio/sbsms/TrackPoint.spec.js',
                        'audio/sbsms/Slice.spec.js',
                        'audio/sbsms/SMS.spec.js',
                        'audio/sbsms/SynthRenderer.spec.js',
                        'audio/sbsms/Subband.spec.js',
                        'audio/sbsms/Track.spec.js',
                        'audio/sbsms/Util.spec.js',
                        'audio/soundfont/SFObject.spec.js',
                        'audio/soundfont/ZoneContainer.spec.js',
                        'audio/soundfont/chunks/Subchunk.spec.js',
                        'audio/soundfont/chunks/data/GeneratorRecord.spec.js',
                        'audio/soundfont/chunks/data/GeneratorsSubchunk.spec.js',
                        'audio/soundfont/chunks/data/ZoneRecord.spec.js',
                        'audio/soundfont/chunks/data/operators/Operator.spec.js',
                        'audio/soundfont/chunks/data/operators/KeyRange.spec.js',
                        'audio/soundfont/chunks/data/operators/OperatorFactory.spec.js',
                        'audio/soundfont/chunks/data/operators/RangeOperator.spec.js',
                        'audio/soundfont/chunks/data/operators/SampleOperator.spec.js',
                        'audio/soundfont/chunks/data/operators/StartAddressOffset.spec.js',
                        'audio/soundfont/utils/SFByteArray.spec.js',
                        'audio/view/AudioResourceManager.spec.js',
                        'audio/view/AudioSequencer.spec.js',
                        'audio/view/Visualizer.spec.js',
                        'audio/view/VisualSelector.spec.js',
                        'application/Application.spec.js',
                        'bind/Binder.spec.js',
                        'build/MinificationBatchCreate.spec.js',
                        'button/Button.spec.js',
                        'button/IconButton.spec.js',
                        'control/Control.spec.js',
                        'controller/Controller.spec.js',
                        'dom/ControlLoader.spec.js',
                        'dom/ControlReader.spec.js',
                        'field/FormField.spec.js',
                        'file/Dropbox.spec.js',
                        'gpu/Context.spec.js',
                        'graph/ActiveZone.spec.js',
                        'graph/ConnectionHandler.spec.js',
                        'graph/Graph.spec.js',
                        'graph/GraphControl.spec.js',
                        'graph/GraphRenderer.spec.js',
                        'graph/GraphViewPort.spec.js',
                        'graph/SVGGraphRenderer.spec.js',
                        'graph/renderer/BlenderNode.spec.js',
                        'graph/renderer/ConnectionRenderer.spec.js',
                        'graph/renderer/SquareBoxRenderer.spec.js',
                        'graph/renderer/svg/BlenderNodeRenderer.spec.js',
                        'graph/Node.spec.js',
                        'graph/Connection.spec.js',
                        'identity/IdentityProvider.spec.js',
                        'input/Input.spec.js',
                        'ioc/Container.spec.js',
                        'pad/DrawingSurface.spec.js',
                        'list/List.spec.js',
                        'math/jax/MathJax.spec.js',
                        'math/expression/Evaluator.spec.js',
                        'math/expression/Factor.spec.js',
                        'math/Expression.spec.js',
                        'math/Expression_2.spec.js',
                        'math/Expression_3.spec.js',
                        'math/Expression_4.spec.js',
                        'math/Expression_5.spec.js',
                        'math/FFT.spec.js',
                        'math/Hamilton.spec.js',
                        'math/Matrix.spec.js',
                        'math/Set.spec.js',
                        'math/Quaternion.spec.js',
                        'math/Util.spec.js',
                        'math/Vector.spec.js',
                        'mixins/Observable.spec.js',
                        'mobile/activity/ActivityController.spec.js',
                        'mobile/activity/container/Container.spec.js',
                        'mobile/application/container/MobileApplicationContainer.spec.js',
                        'mobile/application/controller/MobileApplicationController.spec.js',
                        'mobile/application/menu/ActivityMenuProvider.spec.js',
                        'mobile/application/menu/ApplicationMenu.spec.js',
                        'mobile/application/menu/ApplicationMenuProvider.spec.js',
                        'mobile/application/menuview/ApplicationMenuView.spec.js',
                        'mobile/application/menuview/ApplicationMenuCategories.spec.js',
                        'mobile/mixins/Activity.spec.js',
                        'mobile/Application.spec.js',
                        'mobile/providers/identity/FacebookProvider.spec.js',
                        'mobile/providers/identity/IdentityProvider.spec.js',
                        'mobile/providers/menuprovider/MenuProvider.spec.js',
                        'mobile/providers/viewprovider/ViewProvider.spec.js',
                        'mobile/services/MobileServices.spec.js',
                        'panel/flyout/FlyoutPanel.spec.js',
                        'panel/Panel.spec.js',
                        'qrcode/Qrcode.spec.js',
                        'remoting/RemotingController.spec.js',
                        'scrollbar/Scrollbar.spec.js',
                        'service/rtc/Connection.spec.js',
                        'service/ServiceCaller.spec.js',
                        'service/SignalRService.spec.js',
                        'session/SessionManager.spec.js',
                        'signalprocessing/SignalProcessor.spec.js',
                        'signalprocessing/Spectrogram.spec.js',
                        'synchronization/SyncArray.spec.js',
                        'synchronization/SyncConflictNegotiator.spec.js',
                        'synchronization/SyncMembrane.spec.js',
                        'synchronization/SyncObject.spec.js',
                        'table/Sequencer.spec.js',
                        'table/SpreadSheet.spec.js',
                        'tree/Tree.spec.js',
                        'tween/Calculator.spec.js',
                        'tween/TweenEditor.spec.js',
                        'util/DataModel.spec.js',
                        'util/Dom.spec.js',
                        'util/Manifest.spec.js',
                        'util/Observable.spec.js',
                        'util/Queryable.spec.js',
                        'util/Renderer.spec.js',
                        'util/SVG.spec.js',
                        'util/Validatable.spec.js',
                        'util/Template.spec.js',
                        'query/QueryableWorker.spec.js',
                        'webgl/Context.spec.js'
                    ];

                promise = Promise.resolve();
                for (i = 0 ; i < tests.length ; i++) {
                    promise = promise.then(function () {
                        return MEPH.Loader.loadScript(tests[this]);
                    }.bind(i));
                }
                promise.then(function () {
                    //jasmine.getEnv().execute();
                });
            }
            loadScriptFiles();

        };
        MEPHTests.loadTests();
    });
})();
﻿describe("MEPH/webgl/Context.spec.js", function () {
    var createContext = function (initialize) {
        var context = new MEPH.webgl.Context();
        if (initialize) {
            var canvas = document.createElement('canvas');
            context.init(canvas);
        }
        return context;
    }
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create a context.', function (done) {
        MEPH.create('MEPH.webgl.Context').then(function ($class) {
            var context = new $class();
            expect(context).theTruth('The context can not be created');
        }).catch(function (error) {
            if (error) {
                expect(error).caught();
            }
        }).then(function () {
            done();
        });
    });


    it('can initialize a canvas and set it to the context', function (done) {

        MEPH.create('MEPH.webgl.Context').then(function ($class) {
            var canvas;
            canvas = document.createElement('canvas');
            var context = new $class();
            context.init(canvas);
            expect(context.context).theTruth('The context is not set');
        }).catch(function (error) {
            if (error) {
                expect(error).caught();
            }
        }).then(function () {
            done();
        });
    });

    it('can clear context', function (done) {

        MEPH.requires('MEPH.webgl.Context').then(function ($class) {
            var context = createContext(true), colorcleared;
            context.context = {
                clearColor: function () {
                    colorcleared = true;
                },
                clear: function () {
                }
            }
            context.clear();
            expect(colorcleared).theTruth('The color was not cleared.');
        }).catch(function (error) {
            if (error) {
                expect(error).caught();
            }
        }).then(function () {
            done();
        });
    });

    it('can set params when getting context', function (done) {
        var parms = {
            alpha: true,
            stencil: false,
            antialias: true,
        }
        MEPH.requires('MEPH.webgl.Context').then(function ($class) {
            var context = new MEPH.webgl.Context();
            var canvas = document.createElement('canvas');
            context.init(canvas, parms);
            expect(context.context).theTruth('The color was not cleared.');
        }).catch(function (error) {
            if (error) {
                expect(error).caught();
            }
        }).then(function () {
            done();
        });
    });

    it('allocate a texture of 400 x 400', function (done) {

        MEPH.requires('MEPH.webgl.Context').then(function ($class) {
            var context = new MEPH.webgl.Context();
            var canvas = document.createElement('canvas');
            context.init(canvas);
            var height = 256;
            var width = 256;

            var length = context.getSizeNeeded(height, width, 4);
            //Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 4;//
            var data = new Float32Array(length);
            var texture = context.createTexture({ height: height, width: width, type: 'float', textureData: data });
            expect(texture).toBeTruthy();
        }).catch(function (error) {
            if (error) {
                expect(error).caught();
            }
        }).then(function () {
            done();
        });
    });

    it('create float texture short cut ', function (done) {
        MEPH.requires('MEPH.webgl.Context').then(function ($class) {
            var context = new MEPH.webgl.Context();
            var canvas = document.createElement('canvas');
            context.init(canvas);
            var height = 256;
            var width = 256;
            var data = new Float32Array(context.getSizeNeeded(width, height, 4));
            var texture = context.createFloatTexture({ height: height, width: width, textureData: data });
            expect(texture).toBeTruthy();
        }).catch(function (error) {
            if (error) {
                expect(error).caught();
            }
        }).then(function () {
            done();
        });
    });

    it('can set view port size ', function (done) {
        MEPH.requires('MEPH.webgl.Context').then(function ($class) {
            var context = new MEPH.webgl.Context();
            var canvas = document.createElement('canvas');
            context.init(canvas);
            var viewport = context.viewport(0, 0, 256, 255);
            expect(viewport.x === 0).toBeTruthy()
            expect(viewport.y === 0).toBeTruthy();
            expect(viewport.width === 256).toBeTruthy();
            expect(viewport.height === 255).toBeTruthy();
        }).catch(function (error) {
            if (error) {
                expect(error).caught();
            }
        }).then(function () {
            done();
        });
    });

    it('create create a shaderProgram', function (done) {
        var shaderfs;
        
        var shadervs;
        MEPH.getSource('MEPHTests.data.shader.fs.shader-fs', '.html').then(function (result) {
            shaderfs = (result);
        }).then(function () {
            return MEPH.getSource('MEPHTests.data.shader.vs.shader-vs', '.html').then(function (result) {
                shadervs = result;
            });
        }).then(function () {
            return MEPH.create('MEPH.webgl.Context').then(function ($class) {
                var context = new $class();
                var canvas = document.createElement('canvas');
                context.init(canvas);
                var program = context.createShaderProgram(shaderfs, shadervs);
                expect(program).toBeTruthy();
            })
        }).catch(function (er) {
            expect(er).caught();
        }).then(function () {
            done();
        });
    })

    it('create render buffer context with float  ', function (done) {

        MEPH.create('MEPH.webgl.Context').then(function ($class) {
            var context = new $class();
            var canvas = document.createElement('canvas');
            context.init(canvas);
            var height = 256;
            var width = 256;
            var texture = context.createRenderBuffer({ height: height, width: width, type: 'float' });
            expect(texture).toBeTruthy();
        }).catch(function (error) {
            if (error) {
                expect(error).caught();
            }
        }).then(function () {
            done();
        });
    });

    it('create frame buffer', function (done) {

        MEPH.create('MEPH.webgl.Context').then(function ($class) {
            var context = new $class();
            var canvas = document.createElement('canvas');
            context.init(canvas);
            var height = 256;
            var width = 256;
            var texture = context.createFloatTexture({ height: height, width: width });
            var framebuffer = context.createFrameBuffer(texture);
            expect(texture).toBeTruthy();
            expect(framebuffer).toBeTruthy();
        }).catch(function (error) {
            if (error) {
                expect(error).caught();
            }
        }).then(function () {
            done();
        });
    });

    it('Can detect if I can render to floating point textures?', function (done) {
        MEPH.create('MEPH.webgl.Context').then(function ($class) {
            var context = new $class();
            var canvas = document.createElement('canvas');
            context.init(canvas);
            var canrender = context.can('renderfloatingpointtextures');
            expect(canrender).toBeTruthy();
        }).catch(function (error) {
            if (error) {
                expect(error).caught();
            }
        }).then(function () {
            done();
        });
    });
});﻿describe("MEPH/query/QueryableWorker.spec.js", function () {

    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create a Remoting COntroller.', function (done) {

        MEPH.create('MEPH.query.QueryableWorker').then(function ($class) {
            var queryable = new $class();
            expect(queryable).theTruth('no queryable worker was created was created');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it('a queryable worker has an internal worker', function (done) {

        MEPH.create('MEPH.query.QueryableWorker').then(function ($class) {
            var queryable = new $class();
            expect(queryable.$worker).toBeTruthy();
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it('a queryable work can initializes ', function (done) {
        MEPH.create('MEPH.query.QueryableWorker').then(function ($class) {
            var queryable = new $class();
            return queryable.ready().then(function (result) {

                expect(result).toBeTruthy();
            })
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it('a queryable work can load code ', function (done) {
        MEPH.create('MEPH.query.QueryableWorker').then(function ($class) {
            var queryable = new $class();
            return queryable.ready().then(function (q) {
                return q.load('MEPH.query.QueryableWorker')
            }).then(function (result) {
                expect(result.success).toBeTruthy();
            }).catch(function () {
                expect(false).toBeTruthy();
            });
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it(' can execute a static function from a class', function (done) {
        MEPH.create('MEPH.query.QueryableWorker').then(function ($class) {
            var queryable = new $class();
            return queryable.ready().then(function (q) {
                return q.load('MEPH.query.QueryableWorker')
            }).then(function (result) {
                return queryable.execute(function () {
                    var code = 1;
                    return code;
                }).then(function (result) {
                    expect(result === 1).toBeTruthy();
                });
            }).catch(function () {
                expect(false).toBeTruthy();
            });
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it(' can execute an array function on', function (done) {
        MEPH.create('MEPH.query.QueryableWorker').then(function ($class) {
            var queryable = new $class();
            return queryable.ready().then(function (q) {
                return q.load('MEPH.query.QueryableWorker')
            }).then(function (result) {
                return queryable.execute(function () {
                    return [].interpolate(0, 1000, function (x) { return { x: x } });
                }).then(function (result) {
                    expect(result.length === 1000).toBeTruthy();
                });
            }).catch(function () {
                expect(false).toBeTruthy();
            });
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

});﻿describe('MEPH/util/Template.spec.js', function () {

    //it('', [''], function (done) {
    //    //Arrange
    //    MEPH.create('MEPH.input.Input').then(function ($class) {
    //        var input = new $class(),
    //            templates;
    //        templates = input.getTemplates();
    //    });
    //});
});﻿describe("MEPH/util/Validatable.spec.js", function () {

    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('will make an array observable', function (done) {
        MEPH.requires('MEPH.util.Validatable', 'MEPH.util.Observable').then(function () {
            var object = {
            };

            MEPH.util.Validatable.validatable(object);

            expect(MEPH.util.Observable.isObservable(object)).theTruth('The objec has to be an observable');
        }).catch(function (error) {
            if (error) {
                expect(error).caught();
            }
        }).then(function () {
            done();
        });
    });

    it('will return true when object is validatable', function (done) {
        MEPH.requires('MEPH.util.Validatable').then(function () {
            var object = {
            };

            MEPH.util.Validatable.validatable(object);

            expect(MEPH.util.Validatable.isValidatable(object)).theTruth('The objec has to be an validatable');
        }).catch(function (error) {
            if (error) {
                expect(error).caught();
            }
        }).then(function () {
            done();
        });
    });

    it('can add a validation rule to a specific property', function (done) {
        MEPH.requires('MEPH.util.Validatable').then(function () {
            var object = {
                property: null
            };

            MEPH.util.Validatable.validatable(object);

            MEPH.util.Validatable.addValidationRule(object, 'property', function () {
            });

            expect(object[MEPH.isValidatablePropertyKey][' rules'].first(function (x) {
                return x.paths.some(function (y) { return y === 'property'; });
            })).theTruth('no rule found for property');
        }).catch(function (error) {
            if (error) {
                expect(error).caught();
            }
        }).then(function () {
            done();
        });
    });

    it('validation will get the list of validation rules that will be executed on a path', function (done) {
        MEPH.requires('MEPH.util.Validatable').then(function () {
            var object = {
                property: null
            }, rules;

            MEPH.util.Validatable.validatable(object);

            MEPH.util.Validatable.addValidationRule(object, 'property', function () {
                validated = true;
            });
            rules = MEPH.util.Validatable.getRulesOnPath(object, 'property');

            expect(rules.length).theTruth('no rules were found.');
        }).catch(function (error) {
            if (error) {
                expect(error).caught();
            }
        }).then(function () {
            done();
        });
    });

    it('validation will be executed when an object is altered', function (done) {
        MEPH.requires('MEPH.util.Validatable').then(function () {
            var object = {
                property: null
            }, validated = false;

            MEPH.util.Validatable.validatable(object);

            MEPH.util.Validatable.addValidationRule(object, 'property', function () {
                validated = true;
            });
            object.property = 'newvalue';

            expect(validated).theTruth('the object was no validated.');
        }).catch(function (error) {
            if (error) {
                expect(error).caught();
            }
        }).then(function () {
            done();
        });
    });

    it('when a property fails validation, will raise an altered events on the propertys.', function (done) {
        MEPH.requires('MEPH.util.Validatable').then(function () {
            var object = {
                property: null
            }, validated = false;

            MEPH.util.Validatable.validatable(object);

            MEPH.util.Validatable.addValidationRule(object, 'property', function () {
                return false;
            });

            object.on('altered', function (type, params) {
                if (params.path === MEPH.isValidatablePropertyKey + '.property') {
                    validated = true;
                }
            });
            object.property = 'newvalue';

            expect(validated).theTruth('the object didnt throw a validation error with the correct path.');
        }).catch(function (error) {
            if (error) {
                expect(error).caught();
            }
        }).then(function () {
            done();
        });
    });


    it('when a property changes, but the validation is wrong it wont fire altered..', function (done) {
        MEPH.requires('MEPH.util.Validatable').then(function () {
            var object = {
                property: null
            }, validated = false;

            MEPH.util.Validatable.validatable(object);

            MEPH.util.Validatable.addValidationRule(object, 'property', function () {
                return false;
            });

            object.on('altered', function (type, params) {
                if (params.path === MEPH.isValidatablePropertyKey + '.property') {
                    validated++;
                }
            });

            
            object.property = 'newvalue';
            object.property = 'newvalue2';

            expect(validated === 2).theTruth('the validation changed more than once, and it should have change 2 times.');
        }).catch(function (error) {
            if (error) {
                expect(error).caught();
            }
        }).then(function () {
            done();
        });
    });



    it('when a property changes, but the validation wont fire.', function (done) {
        MEPH.requires('MEPH.util.Validatable').then(function () {
            var object = {
                subobject: {
                    property: null
                },
                property: null
            }, validated = 0;

            MEPH.util.Validatable.validatable(object);

            MEPH.util.Validatable.addValidationRule(object, 'property', function () {
                return false;
            });

            object.on('altered', function (type, params) {
                if (params.path === MEPH.isValidatablePropertyKey + '.property') {
                    validated++;
                }
            });

            object.subobject.property = 'newvalue';

            expect(validated === 0).theTruth('the validation changed more than once, and it should have change 1 time.');
        }).catch(function (error) {
            if (error) {
                expect(error).caught();
            }
        }).then(function () {
            done();
        });
    });


    it('when a property changes, but the validation wont fire.', function (done) {
        MEPH.requires('MEPH.util.Validatable').then(function () {
            var object = {
                subobject: {
                    property: null
                },
                property: null
            }, validated = 0;

            MEPH.util.Validatable.validatable(object);

            MEPH.util.Validatable.addValidationRule(object, 'subobject.property', function (obj, path, params) {
                if (path === 'subobject.property') {
                    validated++;
                }
            });


            object.subobject.property = 'newvalue';

            expect(validated === 1).theTruth('the validation changed more than once, and it should have change 1 time.');
        }).catch(function (error) {
            if (error) {
                expect(error).caught();
            }
        }).then(function () {
            done();
        });
    });


    it('multiple validation rules..', function (done) {
        MEPH.requires('MEPH.util.Validatable').then(function () {
            var object = {
                subobject: {
                    property: null
                },
                property: null
            }, validated = 0, propertyvalidated = 0;

            MEPH.util.Validatable.validatable(object);

            MEPH.util.Validatable.addValidationRule(object, 'subobject.property', function (obj, path, params) {
                if (path === 'subobject.property') {
                    validated++;
                }
            });

            MEPH.util.Validatable.addValidationRule(object, 'property', function (obj, path, params) {
                if (path === 'property') {
                    propertyvalidated++;
                }
            });

            object.subobject.property = 'newvalue';

            expect(validated === 1).theTruth('the validation didnt not occur, and it should have.');
            expect(propertyvalidated === 0).theTruth('the property should not have been validated.');
        }).catch(function (error) {
            if (error) {
                expect(error).caught();
            }
        }).then(function () {
            done();
        });
    });


    it('can get rules ', function (done) {
        MEPH.requires('MEPH.util.Validatable').then(function () {

            var object = {
                subobject: {
                    property: null
                },
                property: null
            }, validated = 0, propertyvalidated = 0;

            MEPH.util.Validatable.validatable(object);

            MEPH.util.Validatable.addValidationRule(object, 'subobject.property', function (obj, path, params) {
                if (path === 'subobject.property') {
                    validated++;
                }
            });

            expect(MEPH.util.Validatable.getRules(object).length === 1).theTruth('not the right number of rules on the object');
        }).catch(function (error) {
            if (error) {
                expect(error).caught();
            }
        }).then(function () {
            done();
        });
    });
});﻿describe("MEPH/util/SVG.spec.js", 'MEPH.util.SVG', function () {

    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create a svg', function (done) {
        MEPH.create('MEPH.util.SVG').then(function ($class) {
            var renderer = new $class();
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });;
    });

    it('can draw a line', function () {
        var renderer = new MEPH.util.SVG();
        var svgns = "http://www.w3.org/2000/svg";
        var svg = document.createElementNS(svgns, "svg");
        svg.setAttributeNS(null, "height", 300);
        svg.setAttributeNS(null, "width", 300);
        document.body.appendChild(svg);
        renderer.setCanvas(svg);
        var res = renderer.draw([{ shape: 'line', end: { x: 100, y: 100 }, start: { x: 100, y: 200 } }]);
        expect(res.length).toBe(1);
        svg.parentElement.removeChild(svg);
    })


    it('can draw a bezier', function () {
        var renderer = new MEPH.util.SVG();
        var svgns = "http://www.w3.org/2000/svg";
        var svg = document.createElementNS(svgns, "svg");
        svg.setAttributeNS(null, "height", 300);
        svg.setAttributeNS(null, "width", 300);
        document.body.appendChild(svg);
        renderer.setCanvas(svg);
        var res = renderer.draw([{
            shape: 'bezier',
            end: { x: 100, y: 100 },
            bezier1: { x: 150, y: 130 },
            bezier2: { x: 170, y: 170 },
            start: { x: 100, y: 200 }
        }]);
        expect(res.length).toBe(1);
        svg.parentElement.removeChild(svg);
    })

    it('can draw a circle', function () {
        var renderer = new MEPH.util.SVG();
        var svgns = "http://www.w3.org/2000/svg";
        var svg = document.createElementNS(svgns, "svg");
        svg.setAttributeNS(null, "height", 300);
        svg.setAttributeNS(null, "width", 300);
        document.body.appendChild(svg);
        renderer.setCanvas(svg);
        // cx="50" cy="50" r="40" stroke="black" stroke-width="3" fill="red"
        var res = renderer.draw([{
            shape: 'circle',
            x: 100,
            y: 100,
            radius: 40,
            stroke: 'black',
            fill: 'white'
        }]);

        expect(res.length).toBe(1);
        svg.parentElement.removeChild(svg);
    })

    it('can clear by object', function () {

        var renderer = new MEPH.util.SVG();
        var svgns = "http://www.w3.org/2000/svg";
        var svg = document.createElementNS(svgns, "svg");
        svg.setAttributeNS(null, "height", 300);
        svg.setAttributeNS(null, "width", 300);
        document.body.appendChild(svg);
        renderer.setCanvas(svg);
        var res = renderer.draw([{ shape: 'line', end: { x: 100, y: 100 }, start: { x: 100, y: 200 } }]);


        renderer.remove(res.first());

        expect(renderer.parts.length).toBe(0);

        svg.parentElement.removeChild(svg);

    });
});﻿describe("MEPH/util/Renderer.spec.js", function () {

    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create a renderer', function (done) {
        MEPH.create('MEPH.util.Renderer').then(function ($class) {
            var renderer = new $class();
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });;
    })
    it('assign a canvas', function (done) {
        MEPH.create('MEPH.util.Renderer').then(function ($class) {
            //Arrange
            var renderer = new MEPH.util.Renderer();
            var canvas = document.createElement('canvas');
            canvas.height = 300;
            canvas.width = 300;

            //Act
            renderer.setCanvas(canvas);

            //Assert
            expect(renderer.getCanvas()).toBeTruthy();
            expect(renderer.getCanvas(), canvas).toBeTruthy();
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });;
    })

    it('can set a canvas to be the render target ', function (done) {
        MEPH.create('MEPH.util.Renderer').then(function ($class) {
            var renderer = new $class(), canvas;
            canvas = document.createElement('canvas');
            renderer.setCanvas(canvas);
            expect(renderer.getCanvas() === canvas).theTruth('the incorrect canvas was found');
            expect(renderer.getContext()).theTruth('No context was found');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });


    it('can draw ', function (done) {
        MEPH.create('MEPH.util.Renderer').then(function ($class) {
            var renderer = new $class(), canvas, success, div;
            canvas = document.createElement('canvas');
            canvas.setAttribute('width', 400);
            canvas.setAttribute('height', 300);
            div = document.createElement('div');
            div.style.position = 'absolute';
            div.style.top = '0px';
            div.style.zIndex = 1000;
            div.appendChild(canvas);
            document.body.appendChild(div);

            renderer.setCanvas(canvas);

            success = renderer.draw([{ x: 40, y: 40, radius: 100, shape: MEPH.util.Renderer.shapes.circle }]);
            div.parentNode.removeChild(div);
            expect(success).theTruth('Didnt draw successfully');
        }).catch(function (error) {
            expect(new Error(error)).caught();
        }).then(function () {
            done();
        });;
    });

    it('get context from canvas ', function (done) {
        MEPH.create('MEPH.util.Renderer').then(function ($class) {

            //Arrange
            var renderer = new $class();
            var canvas = document.createElement('canvas');
            canvas.height = 300;
            canvas.width = 400;
            renderer.setCanvas(canvas);

            //Act
            var context = renderer.getContext();

            //Assert
            expect(context).toBeTruthy();
            if (canvas.parentNode) {
                canvas.parentNode.removeChild(canvas);
            }
        }).catch(function (error) {
            expect(new Error(error)).caught();
        }).then(function () {
            done();
        });;
    });

    it('clear canvas ', function (done) {
        MEPH.create('MEPH.util.Renderer').then(function ($class) {
            //Arrange
            var renderer = new $class();
            var canvas = document.createElement('canvas');
            document.body.appendChild(canvas);
            canvas.height = 300;
            canvas.width = 400;
            renderer.setCanvas(canvas);

            //Act

            renderer.clear();

            //Assert

            canvas.parentNode.removeChild(canvas);

        }).catch(function (error) {
            expect(new Error(error)).caught();
        }).then(function () {
            done();
        });;
    });

    it('draw rectangle ', function (done) {
        MEPH.create('MEPH.util.Renderer').then(function ($class) {
            //Arrange
            var renderer = new $class();
            var canvas = document.createElement('canvas');
            document.body.appendChild(canvas);
            canvas.height = 300;
            canvas.width = 400;
            renderer.setCanvas(canvas);

            //Act
            var result = renderer.draw({ shape: 'rectangle' });
            //Assert
            expect(result).toBeTruthy();

            canvas.parentNode.removeChild(canvas);
        }).catch(function (error) {
            expect(new Error(error)).caught();
        }).then(function () {
            done();
        });;
    });

    it('draw rectangle yellow ', function (done) {
        MEPH.create('MEPH.util.Renderer').then(function ($class) {
            //Assert  //Arrange
            var renderer = new $class();
            var canvas = document.createElement('canvas');
            document.body.appendChild(canvas);
            canvas.height = 300;
            canvas.width = 400;
            renderer.setCanvas(canvas);

            //Act
            var result = renderer.draw({ shape: 'rectangle', fillStyle: 'yellow' });

            canvas.parentNode.removeChild(canvas);
            expect(result).toBeTruthy();

        }).catch(function (error) {
            expect(new Error(error)).caught();
        }).then(function () {
            done();
        });;
    });
    it('draw circle yellow ', function (done) {
        MEPH.create('MEPH.util.Renderer').then(function ($class) {
            //Assert  //Arrange
            //Arrange
            var renderer = new $class();
            var canvas = document.createElement('canvas');
            document.body.appendChild(canvas);
            canvas.height = 300;
            canvas.width = 400;
            renderer.setCanvas(canvas);

            //Act
            var result = renderer.draw({ shape: 'circle', fillStyle: 'yellow', radius: 30, x: 100, y: 100 });
            //Assert
            canvas.parentNode.removeChild(canvas);

            expect(result).toBeTruthy();

        }).catch(function (error) {
            expect(new Error(error)).caught();
        }).then(function () {
            done();
        });;
    });

    it('draw blue text ', function (done) {
        MEPH.create('MEPH.util.Renderer').then(function ($class) {
            //Assert  //Arrange
            //Arrange
            var renderer = new $class();
            var canvas = document.createElement('canvas');
            document.body.appendChild(canvas);
            canvas.height = 300;
            canvas.width = 400;
            renderer.setCanvas(canvas);

            //Act
            var result = renderer.draw({
                text: 'Text',
                shape: 'text',
                fillStyle: 'blue',
                radius: 30,
                x: 100,
                y: 100
            });
            //Assert
            canvas.parentNode.removeChild(canvas);

            expect(result).toBeTruthy();

        }).catch(function (error) {
            expect(new Error(error)).caught();
        }).then(function () {
            done();
        });;
    });

    it('draw multiple things ', function (done) {
        MEPH.create('MEPH.util.Renderer').then(function ($class) {

            var renderer = new $class();
            var canvas = document.createElement('canvas');
            document.body.appendChild(canvas);
            canvas.height = 300;
            canvas.width = 400;
            renderer.setCanvas(canvas);

            //Act
            var result = renderer.draw([{
                shape: 'rectangle',
                fillStyle: 'grey',
                x: 10,
                y: 10,
                width: 100,
                height: 200,
                radius: 4
            }, {
                text: 'Text',
                shape: 'text',
                fillStyle: 'blue',
                radius: 30,
                x: 14,
                y: 14
            }, { shape: 'circle', fillStyle: 'yellow', radius: 3, x: 90, y: 70 }, {
                text: 'Text',
                shape: 'text',
                fillStyle: 'blue',
                radius: 30,
                x: 14,
                y: 14
            }]);
            //Assert
            canvas.parentNode.removeChild(canvas);


            expect(result).toBeTruthy();

        }).catch(function (error) {
            expect(new Error(error)).caught();
        }).then(function () {
            done();
        });;

    });

    it('Draw line ', function (done) {
        MEPH.create('MEPH.util.Renderer').then(function ($class) {

            //Arrange
            var renderer = new $class();
            var canvas = document.createElement('canvas');
            document.body.appendChild(canvas);
            canvas.height = 300;
            canvas.width = 400;
            renderer.setCanvas(canvas);

            //Act
            var result = renderer.draw({
                shape: 'line',
                fillStyle: 'yellow',
                start: {
                    x: 0,
                    y: 0
                },
                end: {
                    x: 300,
                    y: 300
                }
            });
            //Assert
            expect(result).toBeTruthy();
            canvas.parentNode.removeChild(canvas);
        }).catch(function (error) {
            expect(new Error(error)).caught();
        }).then(function () {
            done();
        });;
    });

    
    it('Draw line ', function (done) {
        MEPH.create('MEPH.util.Renderer').then(function ($class) {
            //Arrange
            var renderer = new $class();
            var canvas = document.createElement('canvas');
            document.body.appendChild(canvas);
            canvas.height = 300;
            canvas.width = 400;
            renderer.setCanvas(canvas);

            //Act
            var result = renderer.draw({
                shape: 'line',
                strokeStyle: 'yellow',
                start: {
                    x: 100,
                    y: 0
                },
                end: {
                    x: 300,
                    y: 300
                }
            });
            //Assert
            expect(result).toBeTruthy();
            canvas.parentNode.removeChild(canvas);
        }).catch(function (error) {
            expect(new Error(error)).caught();
        }).then(function () {
            done();
        });;
    });
});﻿describe("MEPH/util/Queryable.spec.js", function () {

    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('will make an array queryable', function (done) {
        MEPH.requires('MEPH.util.Queryable').then(function () {
            var array = [];
            MEPH.Queryable.queryable(array);
            expect(array.isQueryable).toBeTruthy();

        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });


    it(' a queryable array can execute on a select look on multiple threads', function (done) {
        MEPH.requires('MEPH.util.Queryable').then(function () {
            var array = [].interpolate(0, 1000, function (x) { return { x: x }; });
            MEPH.Queryable.queryable(array);
            expect(array.isQueryable).toBeTruthy();
            return array.query.select(function (x) { return x.x; }, 4).then(function (result) {
                expect(result).toBeTruthy();
                expect(result.length === 1000).toBeTruthy();
            });
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });



    it(' a queryable array can execute on a where look on multiple threads', function (done) {
        MEPH.requires('MEPH.util.Queryable').then(function () {
            var array = [].interpolate(0, 1000, function (x) { return { x: x }; });
            MEPH.Queryable.queryable(array);
            expect(array.isQueryable).toBeTruthy();
            return array.query.where(function (x) { return x.x % 2; }, 4).then(function (result) {

                expect(result).toBeTruthy();
                expect(result.length === 500).toBeTruthy();
            });
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    }, 100000);

    it(' a queryable array can execute on a where look on multiple threads', function (done) {
        MEPH.requires('MEPH.util.Queryable').then(function () {
            var array = [].interpolate(0, Math.pow(11, 2), function (x) { return { x: x }; });
            MEPH.Queryable.queryable(array);
            expect(array.isQueryable).toBeTruthy();
            var start = Date.now()
            return array.query.where(function (x) {
                return x.x % 2;
            }, 4).then(function (result) {

                var end = Date.now()
                var time = end - start;
                MEPH.Log('Multiple threads(4) , Execution time : ' + time);
            });
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    }, 100000);
    it(' a queryable array can execute on a where look on multiple threads', function (done) {
        MEPH.requires('MEPH.util.Queryable').then(function () {
            var array = [].interpolate(0, Math.pow(11, 2), function (x) { return { x: x }; });
            MEPH.Queryable.queryable(array);
            expect(array.isQueryable).toBeTruthy();
            var start = Date.now()
            return array.query.where(function (x) {
                var promise = new Promise(function (r, s) {
                    setTimeout(function () {
                        r(x.x % 2);
                    }, 4);
                });
                return promise;
            }, 4).then(function (result) {

                var end = Date.now()
                var time = end - start;
                MEPH.Log('Multiple threads(4) , Execution time : ' + time);
            });
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    }, 100000);
    it(' a queryable array can execute on a where look on multiple threads', function (done) {
        MEPH.requires('MEPH.util.Queryable').then(function () {
            var array = [].interpolate(0, Math.pow(11, 2), function (x) { return { x: x }; });
            var start = Date.now()
            return Promise.all(array.select(function (x) {
                var promise = new Promise(function (r) {
                    setTimeout(function () {
                        r(x.x % 2);
                    }, 4);
                });
                return promise;
            })).then(function (result) {

                var end = Date.now()
                var time = end - start;
                MEPH.Log('Single thread , Execution time : ' + time);
            });


        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    }, 100000);

    it(' Queryable can give available threads ', function (done) {
        MEPH.requires('MEPH.util.Queryable').then(function () {
            return MEPH.Queryable.requestWorkers(4).then(function (x) {
                var workers = x;
                expect(workers.length === 4).toBeTruthy();
            });
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it(' Queryable can divide work in to sections of an arbitrary size ', function (done) {
        MEPH.requires('MEPH.util.Queryable').then(function () {
            return MEPH.Queryable.divideWork([].interpolate(0, 1000, function (x) {
                return x;
            }), 4).then(function (x) {
                var workers = x;
                expect(workers.length === 4).toBeTruthy();
                expect(workers[0].length === 250).toBeTruthy();
            });
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

});﻿describe("MEPH/util/Observable.spec.js", function () {

    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('will make an array observable', function (done) {
        MEPH.requires('MEPH.util.Observable').then(function () {
            var array = [];
            MEPH.Observable.observable(array);
            expect(array.isObservable).toBeTruthy();

        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it('arrays will fire changed event on push.', function (done) {
        MEPH.requires('MEPH.util.Observable').then(function () {
            var array = [],
               changed = 0;
            MEPH.Observable.observable(array);
            array.on('changed', function () {
                changed++;
            });
            array.push('value');
            expect(changed).toBeTruthy();

        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });


    it('arrays will fire changed event on pushed.', function (done) {
        MEPH.requires('MEPH.util.Observable').then(function () {
            var array = [],
               changed = 0;
            MEPH.util.Observable.observable(array);
            array.on('changed', function () {
                changed++;
            });

            array.push('value');
            expect(changed).toBeTruthy();

        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it('arrays will fire changed event on shift.', function (done) {
        MEPH.requires('MEPH.util.Observable').then(function () {
            var array = [],
               added,
               removed,
               changed = 0;
            array.push('value');
            MEPH.Observable.observable(array);
            array.on('changed', function (type, options) {
                changed++;
                added = options.added[0];
                removed = options.removed[0];
            });
            array.shift();
            expect(removed === 'value').theTruth('the removed value was incorrect');
            expect(changed).toBeTruthy();

        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });


    it('arrays will fire changed event on unshift.', function (done) {
        MEPH.requires('MEPH.util.Observable').then(function () {
            var array = [],
                added,
                removed,
                changed = 0;
            MEPH.Observable.observable(array);
            array.on('changed', function (type, options) {
                changed++;
                added = options.added[0];
                removed = options.removed[0];
            });
            array.unshift('value');
            expect(added === 'value').theTruth('the added value was incorrect');
            expect(changed).toBeTruthy();
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it('arrays will fire changed event on pop.', function (done) {
        MEPH.requires('MEPH.util.Observable').then(function () {
            var array = [],
                added,
                removed,
                changed = 0;
            MEPH.Observable.observable(array);
            array.push('value');
            array.on('changed', function (type, options) {
                changed++;
                added = options.added[0];
                removed = options.removed[0];
            });
            array.pop();
            expect(removed === 'value').theTruth('the popped value was incorrect');
            expect(changed).toBeTruthy();

        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });;
    });


    it('arrays will fire changed event on splice.', function (done) {
        MEPH.requires('MEPH.util.Observable').then(function () {
            var array = [],
                added,
                removed,
                changed = 0;
            MEPH.Observable.observable(array);
            array.push('value');
            array.on('changed', function (type, options) {
                changed++;
                added = options.added[0];
                removed = options.removed[0];
            });

            array.splice(0, 1, 'newvalue');
            expect(removed === 'value').theTruth('the spliced removed value was incorrect');
            expect(added === 'newvalue').theTruth('the spliced added value was incorrect');
            expect(changed).toBeTruthy();

        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });


    it('will make an object observable', function (done) {
        MEPH.requires('MEPH.util.Observable').then(function () {
            var object = {};
            MEPH.Observable.observable(object);
            expect(object[MEPH.nonEnumerablePropertyPrefix + 'isObservable']).toBeTruthy();
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it('an empty oberservable object will have 0 enumerable properties', function (done) {
        MEPH.requires('MEPH.util.Observable').then(function () {
            var object = {},
               i,
               count = 0;
            MEPH.Observable.observable(object);
            for (i in object) {
                if (object.hasOwnProperty(i)) {
                    count++;
                }
            }
            expect(count === 0).toBeTruthy();
            expect(object[MEPH.nonEnumerablePropertyPrefix + 'isObservable']).toBeTruthy();

        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it('objects that are observable have to have events applied. so i can listen to changes', function (done) {
        MEPH.requires('MEPH.util.Observable').then(function () {
            var object = { prop: null },
               i,
               count = 0;
            MEPH.Observable.observable(object);
            object.on('changed', function () { count++; });
            object.prop = 'newvalue';
            expect(object[MEPH.nonEnumerablePropertyPrefix + 'isObservable']).toBeTruthy();
            expect(count).toBeTruthy();

        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });
    it('can create properties which depend on others', function (done) {
        MEPH.requires('MEPH.util.Observable').then(function () {
            var object = {
                propCls: null,
                prop2Cls: null
            };
            MEPH.util.Observable.observable(object);

            MEPH.util.Observable.defineDependentProperty('finalProperty', object, ['propCls', 'prop2Cls'], function () {
                var me = this;
                return MEPH.Array([object.prop2Cls, object.propCls]).where(function (x) { return x; }).join(' ');
            });
            object.prop2Cls = 'NEWVALUE';
            expect(object.finalProperty === 'NEWVALUE').theTruth('The new cls was not correct.');

        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it(' when a property changes the dependent property will also throw an altered and changed event', function (done) {
        MEPH.requires('MEPH.util.Observable').then(function () {
            var object = {
                prop1: null,
                prop2: null
            }, newpropertychanged, changedproperty;
            MEPH.util.Observable.observable(object);
            MEPH.util.Observable.defineDependentProperty('newproperty', object, ['prop1', 'prop2'], function () {
                return true;
            });
            object.on('altered', function (type, args) {
                if (args.path === 'newproperty') {
                    newpropertychanged = true;
                }
            });
            object.on('changed', function (type, args) {
                if (args.new === true) {
                    changedproperty = true;
                }
            });
            object.prop1 = 'asdf';
            expect(changedproperty).theTruth('changed was not fired');
            expect(newpropertychanged).theTruth('altered was not fired');

        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });
    it('when a reference object is added to an observable object, it will become observable also', function (done) {
        MEPH.requires('MEPH.util.Observable').then(function () {
            var object = { prop: null, obj: null },
               count = 0;
            MEPH.Observable.observable(object);
            object.obj = {
                newobject: null
            };
            object.obj.on('changed', function () {
                count++;
            });
            object.obj.newobject = 'new';
            expect(count === 1).theTruth('referece object didnt report coutn === 1 changed.');

        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });
    it('when an object is set observable, the entire tree is set observable', function (done) {
        MEPH.requires('MEPH.util.Observable').then(function () {
            var object = { prop: { subobj: { value: null } } },
               count = 0;
            MEPH.Observable.observable(object);

            object.prop.subobj.on('changed', function () { count++; });
            object.prop.subobj.value = 'new';
            expect(count === 1).theTruth('the sub object did not raise a changed event');

        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });
    it('when an object changes, the path to the property changed is propogated up the tree', function (done) {
        MEPH.requires('MEPH.util.Observable').then(function () {
            var object = { prop: { subobj: { value: null } } },
                               path, path2,
                               count = 0;
            MEPH.Observable.observable(object);

            object.on('altered', function (type, options) {
                path = options.path;
            });
            object.prop.on('altered', function (type, options) {
                path2 = options.path;
            });
            object.prop.subobj.value = 'new';

            expect(path === 'prop.subobj.value').theTruth('the altered path was not correct. path: ' + path);

        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it('when an object chain has a circular path, it will stop propogating altered', function (done) {
        MEPH.requires('MEPH.util.Observable').then(function () {
            var object = { prop: { subobj: { value: null, value2: null } } },
                path, path2,
          count = 0;
            object.prop.subobj.value = object;
            MEPH.Observable.observable(object);

            object.on('altered', function (type, options) {
                path = options.path;
            });

            object.prop.subobj.value2 = 'new';

            expect(path === 'prop.subobj.value2').theTruth('the altered path was not correct. path: ' + path);

        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it('when an object chain has a circular path, it will stop setting observable', function (done) {
        MEPH.requires('MEPH.util.Observable').then(function () {
            var object = {
                prop: {
                    subobj: {
                        value: null,
                        value2: null
                    }
                }
            },
          path, path2,
          count = 0;
            object.prop.subobj.value = object;
            MEPH.Observable.observable(object);
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });


});﻿describe("MEPH/util/Manifest.spec.js", function () {

    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });
    it("can create manifest instance.", function (done) {
        MEPH.create('MEPH.util.Manifest').then(function ($class) {
            var manifest = new $class();

            expect(manifest).theTruth('the manifest was not created.');

        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });

    it(' can get a list of all the views in the application', function (done) {
        MEPH.create('MEPH.util.Manifest').then(function ($class) {
            var manifest = new $class();

            expect(manifest).theTruth('the manifest was not created.');
            return manifest.getViews();
        }).then(function (viewsconfigs) {
            
            expect(viewsconfigs.length > 1).toBeTruthy();
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });

    it(' can load all the required classes of the views', function (done) {

        MEPH.create('MEPH.util.Manifest').then(function ($class) {
            var manifest = new $class();

            expect(manifest).theTruth('the manifest was not created.');
            return manifest.loadViews();
        }).then(function (viewsconfigs) {
            expect(viewsconfigs.classes.length > 1).toBeTruthy();
            expect(viewsconfigs.templates.length > 1).toBeTruthy();
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });
});﻿describe("MEPH/util/Dom.spec.js", function () {

    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });
    it("Comment nodes can be found within html dom.", function () {
        //Arrange
        var dom = '<div><!-- comment --></div>';
        var element = document.createElement('div');
        element.innerHTML = dom;

        //Act
        var comments = MEPH.util.Dom.getComments(element);

        //Assert
        expect(comments).toBeTruthy();
        expect(comments.length === 1).toBeTruthy();
    });
});﻿describe("MEPH/util/DataModel.spec.js", function () {

    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('will add validation rules to an object.', function (done) {
        MEPH.requires('MEPH.util.DataModel').then(function () {
            var called, obj = MEPH.util.DataModel.model({ prop: 'prop' }, [{
                path: 'prop',
                rule: function (obj, path, params) {
                    called = true;
                    return true;
                }
            }]);
            obj.prop = 'newvalue';
            expect(called).theTruth('the validatoin rule wasnt called');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });;
    });

    it('will not add the same rule more that once ', function (done) {
        MEPH.requires('MEPH.util.DataModel').then(function () {
            var therule = function (obj, path, params) {
                called = true;
                return true;
            },
            called,
            obj = MEPH.util.DataModel.model({ prop: 'prop' }, [{
                path: 'prop',
                rule: therule
            }]);
            MEPH.util.DataModel.model(obj, [{
                path: 'prop',
                rule: therule
            }])
            expect(MEPH.util.Validatable.getRules(obj).length === 1).theTruth('there were not the correct number of validations.');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });;
    });

    it('when passed an array, the items will have the rules applied to each', function (done) {
        MEPH.requires('MEPH.util.DataModel').then(function () {
            var therule = function (obj, path, params) {
                called = true;
                return true;
            }, array,
            called;
            array = [].interpolate(0, 10, function (index) {
                return { prop: 'prop', index: index };
            });
            MEPH.util.DataModel.model(array, [{
                path: 'prop',
                rule: therule
            }]);
            expect(MEPH.util.Validatable.getRules(array.first()).length === 1).theTruth('there were not the correct number of validations.');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });;
    });
});﻿describe("MEPH/tween/TweenEditor.spec.js", 'MEPH.tween.TweenEditor', function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create a tween editor.', function (done) {
        MEPH.create('MEPH.tween.TweenEditor').then(function ($class) {
            var tree = new $class();
            expect(tree).theTruth('The tween editor can not be created');
        }).catch(function (error) {
            if (error) {
                expect(error).caught();
            }
        }).then(function () {
            done();
        });
    });


    it('can render a tween editor', function (done) {
        MEPH.render('MEPH.tween.TweenEditor', 'tweeneditor').then(function (r) {
            var results = r.res;
            var app = r.app;

            var dom,
                tweeneditor = results.first().classInstance;
            ///Assert
            dom = tweeneditor.getDomTemplate().first()
            expect(dom).toBeTruthy();
            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        })
    });
    var TweenEditor = MEPH.tween.TweenEditor;
    it('can add tween points', function () {
        var editor = new TweenEditor();
        editor.source = [];
        editor.addPoint({ x: 0, y: 1 });
        expect(editor.source.length).toBeTruthy();
    });

    it('tween points have to have values for x between 0 and 1', function () {
        var editor = new TweenEditor();
        editor.source = [];
        editor.addPoint({ x: -20, y: 1 });
        expect(editor.source.length).toBeTruthy();
        expect(editor.source.first().x === 0).toBeTruthy();
    });

    it('tween points have to have values for x between 0 and 1', function () {
        var editor = new TweenEditor();
        editor.source = [];
        editor.addPoint({ x: 20, y: 1 });
        expect(editor.source.length).toBeTruthy();
        expect(editor.source.first().x === 1).toBeTruthy();
    });


    it('tween points have to have values for y between -1 and 1', function () {
        var editor = new TweenEditor();
        editor.source = [];
        editor.addPoint({ x: 0, y: -11 });
        expect(editor.source.length).toBeTruthy();
        expect(editor.source.first().y).toBe(-1);
    });

    it('tween points have to have values for y between 0 and 1', function () {
        var editor = new TweenEditor();
        editor.source = [];
        editor.addPoint({ x: 0, y: 11 });
        expect(editor.source.length).toBeTruthy();
        expect(editor.source.first().y).toBe(1);
    });

    it('redraws the stage on resize ', function (done) {
        MEPH.render('MEPH.tween.TweenEditor', 'tweeneditor').then(function (r) {
            var results = r.res;
            var app = r.app, called;

            var dom,
                tweeneditor = results.first().classInstance;
            tweeneditor.render = function () {
                called = true;
            }

            dom = tweeneditor.getDomTemplate().first()
            dom.dispatchEvent(MEPH.createEvent('resize', {}));
            expect(called).toBeTruthy();

            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        })
    });

    it('redraws the stage on resize ', function (done) {
        MEPH.render('MEPH.tween.TweenEditor', 'tweeneditor').then(function (r) {
            var results = r.res;
            var app = r.app, called;

            var dom,
                tweeneditor = results.first().classInstance;

            tweeneditor.render();
            expect(tweeneditor.$structureElements).toBeTruthy();

            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        })
    });

    it('when a point is added the page is re rendered ', function (done) {
        MEPH.render('MEPH.tween.TweenEditor', 'tweeneditor').then(function (r) {
            var results = r.res;
            var app = r.app, called;

            var dom,
                tweeneditor = results.first().classInstance;
            tweeneditor.render = function () {
                called = true;
            }

            tweeneditor.onAddPoint();
            expect(called).toBeTruthy();

            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        })
    });

    it('when a point is added it is added to the current path, with a mark', function (done) {
        MEPH.render('MEPH.tween.TweenEditor', 'tweeneditor').then(function (r) {
            var results = r.res;
            var app = r.app, called;

            var dom,
                tweeneditor = results.first().classInstance;
            tweeneditor.render = function () {
                called = true;
            }
            tweeneditor.mark = 'A';
            tweeneditor.onAddPoint();
            expect(called).toBeTruthy();
            expect(tweeneditor.source.first().mark).toBe('A');

            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        })
    });

    it('tween points can be rendered.', function (done) {
        MEPH.render('MEPH.tween.TweenEditor', 'tweeneditor').then(function (r) {
            var results = r.res;
            var app = r.app, called;

            var dom,
                tweeneditor = results.first().classInstance;

            tweeneditor.onAddPoint();
            tweeneditor.onAddPoint();
            expect(tweeneditor.$tweenpoints).toBeTruthy();

            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        })
    });

    it('on mousedown on a tween point, a tweendown even will fire', function (done) {
        MEPH.render('MEPH.tween.TweenEditor', 'tweeneditor').then(function (r) {
            var results = r.res;
            var app = r.app, called;

            var dom,
                tweeneditor = results.first().classInstance;

            tweeneditor.onAddPoint();
            var circle = tweeneditor.$tweenpoints.first().shape;
            tweeneditor.getDomTemplate().first().addEventListener('tweendown', function () {
                called = true;
            })
            circle.dispatchEvent(MEPH.createEvent('mousedown', {}));

            expect(called).toBeTruthy();

            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });

    it('on mouse over the target is set if the state is not dragging', function (done) {
        MEPH.render('MEPH.tween.TweenEditor', 'tweeneditor').then(function (r) {
            var results = r.res;
            var app = r.app, called;

            var dom,
                tweeneditor = results.first().classInstance;

            tweeneditor.onAddPoint();
            var circle = tweeneditor.$tweenpoints.first().shape;

            circle.dispatchEvent(MEPH.createEvent('mouseover', {
                tweenpoint: tweeneditor.$tweenpoints.first(),
                position: {
                    x: 10,
                    y: 20
                }
            }));

            expect(tweeneditor.target).toBeTruthy();

            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });

    it('on tweendown the state goes to dragging', function (done) {
        MEPH.render('MEPH.tween.TweenEditor', 'tweeneditor').then(function (r) {
            var results = r.res;
            var app = r.app, called;

            var dom,
                tweeneditor = results.first().classInstance;

            tweeneditor.onAddPoint();
            var circle = tweeneditor.$tweenpoints.first().shape;
            tweeneditor.getDomTemplate().first().addEventListener('tweendown', function () {
                called = true;
            });
            circle.dispatchEvent(MEPH.createEvent('tweendown', {
                tweenpoint: tweeneditor.$tweenpoints.first(),
                position: {
                    x: 10,
                    y: 20
                }
            }));

            expect(tweeneditor.startposition).toBeTruthy();
            expect(tweeneditor.state).toBe(MEPH.tween.TweenEditor.states.dragging);
            expect(tweeneditor.target).toBeTruthy();

            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });

    it('on mousemove tween move is fired.', function (done) {
        MEPH.render('MEPH.tween.TweenEditor', 'tweeneditor').then(function (r) {
            var results = r.res;
            var app = r.app, called;

            var dom,
                tweeneditor = results.first().classInstance;

            tweeneditor.onAddPoint();
            var circle = tweeneditor.$tweenpoints.first().shape;
            tweeneditor.getDomTemplate().first().addEventListener('tweenmove', function () {
                called = true;
            });

            circle.dispatchEvent(MEPH.createEvent('tweendown', { tweenpoint: tweeneditor.$tweenpoints.first() }));
            tweeneditor.svg.dispatchEvent(MEPH.createEvent('mousemove', { pageX: 10, pageY: 10 }));

            expect(called).toBeTruthy();
            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });


    it('on mousemove tween move is not fired, when not dragging.', function (done) {
        MEPH.render('MEPH.tween.TweenEditor', 'tweeneditor').then(function (r) {
            var results = r.res;
            var app = r.app, called;

            var dom,
                tweeneditor = results.first().classInstance;

            tweeneditor.onAddPoint();
            var circle = tweeneditor.$tweenpoints.first().shape;
            tweeneditor.getDomTemplate().first().addEventListener('tweenmove', function () {
                called = true;
            })

            tweeneditor.svg.dispatchEvent(MEPH.createEvent('mousemove', { pageX: 10, pageY: 10 }));

            expect(!called).toBeTruthy();

            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });


    it('on tweenmove tween move is not fired, when not dragging.', function (done) {
        MEPH.render('MEPH.tween.TweenEditor', 'tweeneditor').then(function (r) {
            var results = r.res;
            var app = r.app, called;

            var dom,
                tweeneditor = results.first().classInstance;

            tweeneditor.onAddPoint();
            var circle = tweeneditor.$tweenpoints.first().shape;
            var point = tweeneditor.$tweenpoints.first();
            point = tweeneditor.source.first(function (x) { return x.guid === point.options.guid; });
            tweeneditor.getDomTemplate().first().addEventListener('tweenmove', function () {
                called = true;
            });

            circle.dispatchEvent(MEPH.createEvent('tweendown', { tweenpoint: tweeneditor.$tweenpoints.first() }));

            tweeneditor.svg.dispatchEvent(MEPH.createEvent('mousemove', {
                pageX: 10, pageY: 10
            }));


            expect(called).toBeTruthy();
            expect(point.x !== .5).toBeTruthy();
            expect(point.y !== 0).toBeTruthy();

            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });

    it('on mouseup tweenup is fired ', function (done) {
        MEPH.render('MEPH.tween.TweenEditor', 'tweeneditor').then(function (r) {
            var results = r.res;
            var app = r.app, called,
                dom,
                tweeneditor = results.first().classInstance;

            tweeneditor.onAddPoint();
            var circle = tweeneditor.$tweenpoints.first().shape;
            var point = tweeneditor.$tweenpoints.first();
            point = tweeneditor.source.first(function (x) { return x.guid === point.options.guid; });

            circle.dispatchEvent(MEPH.createEvent('tweendown', {
                tweenpoint: tweeneditor.$tweenpoints.first(),
                position: {
                    x: 10,
                    y: 20
                }
            }));

            tweeneditor.svg.dispatchEvent(MEPH.createEvent('mousemove', {
                pageX: 10, pageY: 10
            }));

            tweeneditor.svg.addEventListener('tweenup', function () {
                called = true;
            })
            tweeneditor.svg.dispatchEvent(MEPH.createEvent('mouseup', {
            }));

            expect(called).toBeTruthy();

            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });

    it('on mouseup tweenup is fired ', function (done) {
        MEPH.render('MEPH.tween.TweenEditor', 'tweeneditor').then(function (r) {
            var results = r.res;
            var app = r.app, called,
                dom,
                tweeneditor = results.first().classInstance;

            tweeneditor.onAddPoint();
            var circle = tweeneditor.$tweenpoints.first().shape;
            var point = tweeneditor.$tweenpoints.first();
            point = tweeneditor.source.first(function (x) { return x.guid === point.options.guid; });

            circle.dispatchEvent(MEPH.createEvent('tweendown', {
                tweenpoint: tweeneditor.$tweenpoints.first(),
                position: {
                    x: 10,
                    y: 20
                }
            }));

            tweeneditor.svg.dispatchEvent(MEPH.createEvent('mousemove', {
                pageX: 10, pageY: 10
            }));

            expect(tweeneditor.state).toBe(MEPH.tween.TweenEditor.states.dragging);

            tweeneditor.svg.addEventListener('tweenup', function () {
                called = true;
            })
            tweeneditor.svg.dispatchEvent(MEPH.createEvent('mouseup', {
            }));

            expect(called).toBeTruthy();
            expect(tweeneditor.state).toBe(null);

            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });

    it('tween editor can add a mark with anchors', function (done) {
        MEPH.render('MEPH.tween.TweenEditor', 'tweeneditor').then(function (r) {
            var results = r.res;
            var app = r.app, called,
                dom,
                editor = results.first().classInstance;

            editor.addPath({ x: 0, y: 0 }, { x: 1, y: 0 });
            expect(editor.source.length).toBe(2);

            expect(editor.source.all(function (x) {
                return x.anchor;
            })).toBeTruthy();

            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });

    it('tween point cant move if its an anchor ', function (done) {
        MEPH.render('MEPH.tween.TweenEditor', 'tweeneditor').then(function (r) {
            var results = r.res;
            var app = r.app, called;

            var dom,
                tweeneditor = results.first().classInstance;

            tweeneditor.addPath({ x: 0, y: 0 }, { x: 1, y: 0 });
            var circle = tweeneditor.$tweenpoints.first().shape;
            tweeneditor.getDomTemplate().first().addEventListener('tweendown', function () {
                called = true;
            });
            circle.dispatchEvent(MEPH.createEvent('tweendown', {
                tweenpoint: tweeneditor.$tweenpoints.first(),
                position: {
                    x: 10,
                    y: 20
                }
            }));

            expect(tweeneditor.state).toBe(null);

            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });

    it('when there is a path, a line is draw between all points', function (done) {
        MEPH.render('MEPH.tween.TweenEditor', 'tweeneditor').then(function (r) {
            var results = r.res;
            var app = r.app, called,
                dom,
                editor = results.first().classInstance;
            editor.renderPaths = function () { called = true; };
            editor.onAddPath();
            expect(called).toBeTruthy()

            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });


    it('when there is a path, a line is draw between all points', function (done) {
        MEPH.render('MEPH.tween.TweenEditor', 'tweeneditor').then(function (r) {
            var results = r.res;
            var app = r.app, called,
                dom,
                editor = results.first().classInstance;

            editor.onAddPath();
            expect(editor.renderedPaths).toBeTruthy()
            for (var i in editor.renderedPaths) {
                expect(editor.renderedPaths[i]).toBeTruthy();
                expect(editor.renderedPaths[i].lines.length).toBeTruthy();
            }

            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });

    it('line state: clicking on a line will select it.', function (done) {
        MEPH.render('MEPH.tween.TweenEditor', 'tweeneditor').then(function (r) {
            var results = r.res;
            var app = r.app, called,
                dom,
                editor = results.first().classInstance;

            editor.onAddPointAndPath();

            expect(editor.renderedPaths).toBeTruthy()

            var lines = editor.getPathLines(editor.paths.first());


            editor.handleLineState(lines.first(), 'click');

            expect(editor.$selectedLine).toBeTruthy();
            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });

    it('can add a control point ', function () {
        var editor = new TweenEditor();
        editor.controlpoints = [];
        editor.source = [];
        editor.onAddPoint();
        var p = editor.source.first()

        editor.addControlPoint(p.guid);
        expect(editor.controlpoints.length).toBeTruthy()
    });


    it('can render control points.', function (done) {
        MEPH.render('MEPH.tween.TweenEditor', 'tweeneditor').then(function (r) {
            var results = r.res;
            var app = r.app, called,
                dom,
                editor = results.first().classInstance;

            editor.onAddPointAndPath();
            var p = editor.source.first();
            editor.renderControlPoints = function () {
                called = true;
            };

            editor.addControlPoint(p.guid);

            expect(called).toBeTruthy();
            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });


    it('can add controls to selected lines.', function (done) {
        MEPH.render('MEPH.tween.TweenEditor', 'tweeneditor').then(function (r) {
            var results = r.res;
            var app = r.app, called,
                dom,
                editor = results.first().classInstance;

            editor.onAddPointAndPath();
            var p = editor.source.first();

            var lines = editor.renderedPaths[Object.keys(editor.renderedPaths)[0]].lines;

            editor.$selectedLine = lines.first();

            editor.addControlsToSelectedLine();

            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });

    it('can not add more than a single control point per tweenpoint.', function (done) {
        MEPH.render('MEPH.tween.TweenEditor', 'tweeneditor').then(function (r) {
            var results = r.res;
            var app = r.app, called,
                dom,
                editor = results.first().classInstance;

            editor.onAddPointAndPath();
            var p = editor.source.first();

            var lines = editor.renderedPaths[Object.keys(editor.renderedPaths)[0]].lines;

            editor.$selectedLine = lines.first();

            editor.addControlsToSelectedLine();
            editor.$selectedLine = lines.first();

            editor.addControlsToSelectedLine();
            expect(editor.renderedControlPoints.length).toBe(2);
            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });


    it('can render a previously rendered control point .', function (done) {
        MEPH.render('MEPH.tween.TweenEditor', 'tweeneditor').then(function (r) {
            var results = r.res;
            var app = r.app, called,
                dom,
                editor = results.first().classInstance;

            editor.onAddPointAndPath();
            var p = editor.source.first();

            var lines = editor.renderedPaths[Object.keys(editor.renderedPaths)[0]].lines;

            editor.$selectedLine = lines.first();

            editor.addControlsToSelectedLine();

            editor.update();

            expect(editor.renderedControlPoints.length).toBe(2);
            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });

    it('can remove a control point ', function () {
        var editor = new TweenEditor();
        editor.controlpoints = [];
        editor.source = [];
        editor.onAddPoint();
        var p = editor.source.first()

        editor.addControlPoint(p.guid, 0, MEPH.tween.TweenEditor.StartControlPoint);
        editor.removeControlPoint(editor.controlpoints.first());
        expect(editor.controlpoints.length).toBe(0)
    });

    it('a previously removed control point will no longer be rendered .', function (done) {
        MEPH.render('MEPH.tween.TweenEditor', 'tweeneditor').then(function (r) {
            var results = r.res;
            var app = r.app, called,
                dom,
                editor = results.first().classInstance;

            editor.onAddPointAndPath();
            var p = editor.source.first();

            var lines = editor.renderedPaths[Object.keys(editor.renderedPaths)[0]].lines;

            editor.$selectedLine = lines.first();

            editor.addControlsToSelectedLine();

            editor.removeControlPoint(editor.controlpoints.first());
            editor.update();

            expect(editor.renderedControlPoints.length).toBe(1);
            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });

    it('when a control point has mousedown , controldown is fired.', function (done) {
        MEPH.render('MEPH.tween.TweenEditor', 'tweeneditor').then(function (r) {
            var results = r.res;
            var app = r.app, called,
                dom,
                editor = results.first().classInstance;

            editor.onAddPointAndPath();
            var p = editor.source.first();

            var lines = editor.renderedPaths[Object.keys(editor.renderedPaths)[0]].lines;

            editor.$selectedLine = lines.first();

            editor.addControlsToSelectedLine();

            editor.update();

            var controlpoint = editor.renderedControlPoints.first();

            var circle = controlpoint.point.parts.first(function (x) {
                return x.options.name === 'circle';
            });

            editor.svg.addEventListener('controldown', function () {
                called = true;
            })
            circle.shape.dispatchEvent(MEPH.createEvent('mousedown', {}));

            expect(called).toBeTruthy();

            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });

    it('when a control point has mouseup , controlup is fired.', function (done) {
        MEPH.render('MEPH.tween.TweenEditor', 'tweeneditor').then(function (r) {
            var results = r.res;
            var app = r.app, called,
                dom,
                editor = results.first().classInstance;

            editor.onAddPointAndPath();
            var p = editor.source.first();

            var lines = editor.renderedPaths[Object.keys(editor.renderedPaths)[0]].lines;

            editor.$selectedLine = lines.first();

            editor.addControlsToSelectedLine();

            editor.update();

            var controlpoint = editor.renderedControlPoints.first();

            var circle = controlpoint.point.parts.first(function (x) {
                return x.options.name === 'circle';
            });
            circle.shape.dispatchEvent(MEPH.createEvent('mousedown', {}));

            editor.svg.addEventListener('controlup', function () {
                called = true;
            });
            editor.svg.dispatchEvent(MEPH.createEvent('mouseup', {}));

            expect(called).toBeTruthy();

            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });

    it('on control down,  state is set to controldragging.', function (done) {
        MEPH.render('MEPH.tween.TweenEditor', 'tweeneditor').then(function (r) {
            var results = r.res;
            var app = r.app, called,
                dom,
                editor = results.first().classInstance;

            editor.onAddPointAndPath();
            var p = editor.source.first();

            var lines = editor.renderedPaths[Object.keys(editor.renderedPaths)[0]].lines;

            editor.$selectedLine = lines.first();

            editor.addControlsToSelectedLine();

            editor.update();

            var controlpoint = editor.renderedControlPoints.first();

            var circle = controlpoint.point.parts.first(function (x) {
                return x.options.name === 'circle';
            });

            circle.shape.dispatchEvent(MEPH.createEvent('mousedown', {}));

            expect(editor.state).toBe(MEPH.tween.TweenEditor.states.controldragging);
            expect(editor.target).toBeTruthy();

            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });


    it('on control up,  state is set to null if controldragging.', function (done) {
        MEPH.render('MEPH.tween.TweenEditor', 'tweeneditor').then(function (r) {
            var results = r.res;
            var app = r.app, called,
                dom,
                editor = results.first().classInstance;

            editor.onAddPointAndPath();
            var p = editor.source.first();

            var lines = editor.renderedPaths[Object.keys(editor.renderedPaths)[0]].lines;

            editor.$selectedLine = lines.first();

            editor.addControlsToSelectedLine();

            editor.update();

            var controlpoint = editor.renderedControlPoints.first();

            var circle = controlpoint.point.parts.first(function (x) {
                return x.options.name === 'circle';
            });
            circle.shape.dispatchEvent(MEPH.createEvent('mousedown', {}));

            circle.shape.dispatchEvent(MEPH.createEvent('mouseup', {}));

            expect(editor.state).toBe(null);
            expect(editor.target).toBe(null);

            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });


    it('on mousemove with control dragging ,  controlmove is fired.', function (done) {
        MEPH.render('MEPH.tween.TweenEditor', 'tweeneditor').then(function (r) {
            var results = r.res;
            var app = r.app, called,
                dom,
                editor = results.first().classInstance;

            editor.onAddPointAndPath();
            var p = editor.source.first();

            var lines = editor.renderedPaths[Object.keys(editor.renderedPaths)[0]].lines;

            editor.$selectedLine = lines.first();

            editor.addControlsToSelectedLine();

            editor.update();

            var controlpoint = editor.renderedControlPoints.first();

            var circle = controlpoint.point.parts.first(function (x) {
                return x.options.name === 'circle';
            });
            circle.shape.dispatchEvent(MEPH.createEvent('mousedown', {}));

            editor.svg.addEventListener('controlmove', function () {
                called = true;
            });

            circle.shape.dispatchEvent(MEPH.createEvent('mousemove', { pageX: 10, pageY: 10 }));

            expect(called).toBeTruthy(called)
            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });


    it('on controlmove the control point is moved to a new location.', function (done) {
        MEPH.render('MEPH.tween.TweenEditor', 'tweeneditor').then(function (r) {
            var results = r.res;
            var app = r.app, called,
                dom,
                editor = results.first().classInstance;

            editor.onAddPointAndPath();
            var p = editor.source.first();

            var lines = editor.renderedPaths[Object.keys(editor.renderedPaths)[0]].lines;

            editor.$selectedLine = lines.first();

            editor.addControlsToSelectedLine();

            editor.update();

            var controlpoint = editor.renderedControlPoints.first();
            var lastposition = MEPH.clone(editor.getControlPointPosition(controlpoint));
            var circle = controlpoint.point.parts.first(function (x) {
                return x.options.name === 'circle';
            });
            circle.shape.dispatchEvent(MEPH.createEvent('mousedown', {}));

            editor.svg.addEventListener('controlmove', function () {
                called = true;
            });

            circle.shape.dispatchEvent(MEPH.createEvent('mousemove', { pageX: 10, pageY: 10 }));
            var currentposition = (editor.getControlPointPosition(controlpoint));

            expect(currentposition.x !== lastposition.x).toBeTruthy()
            expect(currentposition.y !== lastposition.y).toBeTruthy()
            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });


    it('can get control points for a segment.', function (done) {
        MEPH.render('MEPH.tween.TweenEditor', 'tweeneditor').then(function (r) {
            var results = r.res;
            var app = r.app, called,
                dom,
                editor = results.first().classInstance;

            editor.onAddPointAndPath();
            var p = editor.source.first();

            var lines = editor.renderedPaths[Object.keys(editor.renderedPaths)[0]].lines;

            editor.$selectedLine = lines.first();

            editor.addControlsToSelectedLine();

            editor.update();
            editor.$selectedLine = lines.first();

            var cps = editor.getControlPoints(editor.$selectedLine.path, 0);

            expect(cps.point.start).toBeTruthy();
            expect(cps.point.end).toBeTruthy();

            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });

    it('can output values in some kind of format', function () {
        var editor = new TweenEditor();
        editor.source = [];
        editor.paths = [];
        editor.controlpoints = [];

        editor.onAddPointAndPath();
        editor.updateData();

        expect(editor.tween).toBeTruthy();
    });

    it('can get control points for a segment.', function (done) {
        MEPH.render('MEPH.tween.TweenEditor', 'tweeneditor').then(function (r) {
            var results = r.res;
            var app = r.app, called,
                dom,
                editor = results.first().classInstance;

            editor.onAddPointAndPath();

            var lines = editor.renderedPaths[Object.keys(editor.renderedPaths)[0]].lines;

            editor.$selectedLine = lines.first();

            editor.addControlsToSelectedLine();

            editor.update();

            editor.$selectedLine = lines.first();

            var points = editor.getControlPoints(editor.$selectedLine.path, 0);

            points.point.start.position.x = .1;
            points.point.end.position.x = .45;
            
            editor.svg.addEventListener('dataupdated', function () {
                called = true;
            });

            editor.updateData();

            expect(called).toBeTruthy();

            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });
});﻿/**
 * @class MEPH.table.SpreadSheet
 * @extends MEPH.control.Control
 * A infinitely scrolling SpreadSheet.
 **/
MEPH.define('MEPH.tween.TweenEditor', {
    alias: 'tweeneditor',
    templates: true,
    requires: ['MEPH.util.Observable', 'MEPH.button.Button', 'MEPH.util.Style', 'MEPH.util.SVG', 'MEPH.util.Dom'],
    extend: 'MEPH.control.Control',
    statics: {
        states: {
            controldragging: 'controldragging',
            dragging: 'dragging'
        },
        tweenTypes: {
            bezier: 'bezier'
        },
        StartControlPoint: 'StartControlPoint',
        EndControlPoint: 'EndControlPoint'
    },
    properties: {
        source: null,
        /**
         * @property {String} mark Marks the tween point with a group id.
         **/
        mark: null,
        target: null,
        /**
         * @property {Number} controlpointoffset 
         * Intial control point offset
         **/
        controlpointoffset: .1,

        /**
         * @property {Number} controlpointstrokewidth
         * Control point stroke width
         **/
        controlpointstrokewidth: 3,
        paths: null,
        state: null,
        controlpoints: null,
        pointradius: 8,
        tweenoverradius: 10,
        linestroke: '#000000',
        linestrokeselected: '#f2f51a',
        controlpointfill: 'transparent',
        controlpointstroke: '#ff0021',
        linestrokewidth: '4px',
        linestrokeoverwidth: '7px',
        $selectedLine: null,
        tweenrad: 8,
        $tweenpoints: null,
        margin: 2,
        $structureElements: null,
        animate: false
    },
    initialize: function () {
        var me = this;
        me.callParent.apply(me, arguments);
        me.source = MEPH.util.Observable.observable([]);
        me.paths = MEPH.util.Observable.observable([]);
        me.controlpoints = MEPH.util.Observable.observable([]);
        me.source.on('changed', me.update.bind(me));
        me.controlpoints.on('changed', me.update.bind(me));
    },
    onLoaded: function () {
        var me = this;
        me.great()
        me.renderer = new MEPH.util.SVG();
        me.renderer.setCanvas(me.svg);
        me.appendEvents();
        me.render();
    },
    appendEvents: function () {
        var me = this;
        me.don('tweendown', me.svg, me.onTweenDown.bind(me));
        me.don('resize', window, me.update.bind(me));
        me.don('mousemove', me.svg, me.onMouseMove.bind(me));
        me.don('mouseup', me.svg, me.onMouseUp.bind(me));
        me.don('tweenup', me.svg, me.onTweenUp.bind(me));
        me.don('tweenmove', me.svg, me.onTweenMove.bind(me));
        me.don('controldown', me.svg, me.onControlDown.bind(me));
        me.don('controlup', me.svg, me.onControlUp.bind(me));
        me.don('controlmove', me.svg, me.onControlMove.bind(me));
    },
    onControlMove: function (evt) {
        var me = this;
        if (me.state === MEPH.tween.TweenEditor.states.controldragging) {
            var tweenspaceposition = me.convertToTweenSpace(evt.position);
            me.setControlPointPosition(me.target, tweenspaceposition);
            me.update();
        }
    },
    onControlUp: function (evt) {
        var me = this;
        if (me.state === MEPH.tween.TweenEditor.states.controldragging) {
            me.state = null;
            me.target = null;
        }
    },
    onControlDown: function (evt) {
        var me = this;
        if (me.state === null) {
            me.state = MEPH.tween.TweenEditor.states.controldragging;
            me.target = evt.controlpoint;
            me.startPosition = me.getControlPointPosition(evt.controlpoint);
        }
    },
    onMouseUp: function (evt) {
        var me = this;
        if (me.state === MEPH.tween.TweenEditor.states.dragging) {
            var pos = MEPH.util.Dom.getEventPositions(evt, me.svg);
            me.svg.dispatchEvent(MEPH.createEvent('tweenup', {
                tweentarget: me.target,
                position: pos
            }));
        }
        else if (me.state === MEPH.tween.TweenEditor.states.controldragging) {
            me.svg.dispatchEvent(MEPH.createEvent('controlup', {
            }));
        }
    },
    onMouseMove: function (evt) {
        var me = this;

        if (me.state === MEPH.tween.TweenEditor.states.dragging) {
            var pos = MEPH.util.Dom.getEventPositions(evt, me.svg);
            me.svg.dispatchEvent(MEPH.createEvent('tweenmove', {
                tweentarget: me.target,
                position: pos
            }));
        }
        else if (me.state === MEPH.tween.TweenEditor.states.controldragging) {
            var pos = MEPH.util.Dom.getEventPositions(evt, me.svg);
            me.svg.dispatchEvent(MEPH.createEvent('controlmove', {
                target: me.target,
                position: pos.first()
            }));
        }
    },
    onTweenUp: function () {
        var me = this;
        if (me.state === MEPH.tween.TweenEditor.states.dragging) {
            me.state = null;
            me.target = null;
        }
    },
    onTweenMove: function (evt) {
        var me = this,
            point,
            pos;

        if (me.state === MEPH.tween.TweenEditor.states.dragging) {
            pos = me.convertToTweenSpace(evt.position.first());
            point = me.getPoint(evt.tweentarget);
            point.x = pos.x;
            point.y = pos.y;
            me.source.fire('changed', { removed: [], added: [] });
        }
    },
    /**
     * Get points position.
     * @param {Object} point
     * @return {Object}
     **/
    getPosition: function (point) {
        var me = this;
        return {
            x: me.getX(point.x),
            y: me.getY(point.y)
        }
    },
    getX: function (t) {
        var me = this, size = Style.size(me.svg);
        return (t * (size.width - me.margin)) + me.margin;
    },
    getY: function (t) {
        var me = this, size = Style.size(me.svg),
            theight = size.height - me.margin;
        return (t * (theight / 2)) + (theight / 2) + me.margin;
    },
    convertToTweenSpace: function (pos) {
        var me = this,
            size = Style.size(me.svg),
            width = size.width - me.margin,
            height = size.height - me.margin;

        return {
            x: (pos.x / width),
            y: ((pos.y / height) * 2) - 1
        }
    },
    getPathPoints: function (mark) {
        var me = this;
        return me.source.where(function (t) { return t.mark === mark; });
    },
    getPoint: function (guid) {
        var me = this,
            point = me.source.first(function (x) {
                return x.guid === guid;
            });
        return point;
    },
    onTweenDown: function (evt) {
        var me = this;
        if (!me.state && evt.tweenpoint) {
            var point = me.getPoint(evt.tweenpoint.options.guid);

            if (!point || point.anchor) {
                return;
            }
            me.target = evt.tweenpoint.options.guid;
            me.state = MEPH.tween.TweenEditor.states.dragging;
            me.startposition = me.getPoint(me.target);
        }
    },
    update: function () {
        var me = this;
        if (me.animate) {
            if (me.animateRequest) {
                cancelAnimationFrame(me.animateRequest);
            }
            me.animateRequest = requestAnimationFrame(function () {
                me.render();
                me.animateRequest = null;
            });
        }
        else {
            me.render();
        }
    },
    updateData: function () {
        var me = this;
        var data = me.paths.select(function (path) {
            var points = me.getOrderedPathPoints(path);
            var xs = points.select(function (x, index) {
                return x.x;
            });
            var ys = points.select(function (x, index) {
                return x.y;
            });
            var segments = points.select(function (p, t) {
                var cpoints = me.getControlPoints(path, t);
                if (cpoints) {
                    var startpos = me.getControlPointPosition(cpoints.point.start);
                    var endpos = me.getControlPointPosition(cpoints.point.end);
                    return {
                        segment: t,
                        startpos: MEPH.clone(startpos),
                        endpos: MEPH.clone(endpos)
                    }
                }
            }).where();
            return {
                path: path,
                x: xs,
                y: ys,
                segments: segments
            }
        });
        me.tween = data;
        if (me.svg) {
            me.svg.dispatchEvent(MEPH.createEvent('dataupdated', { data: data }))
        }
    },
    render: function () {
        var me = this;
        me.renderPaths();
        me.renderControlPoints();
        me.renderTweenPoints();
        me.renderStructureElements();
    },
    selectPoint: function (x, t) {
        return t.point.path === x.path &&
                t.point.segment === x.segment &&
                t.point.type === x.type;

    },
    renderControlPoints: function () {
        var me = this,
            cpoint, unrenderedPoints;
        if (!me.renderedControlPoints) {
            me.renderedControlPoints = [];
        }


        unrenderedPoints = me.controlpoints.where(function (x) {
            return !me.renderedControlPoints.some(me.selectPoint.bind(me, x));
        });

        renderedPoints = me.controlpoints.where(function (x) {
            return me.renderedControlPoints.some(me.selectPoint.bind(me, x));
        });

        renderedPoints.foreach(function (x) {
            var t = me.convertToControlPoint(false, x);
            x.parts.foreach(function (y) {
                var tpart = t.parts.first(function (w) { return w.name === y.options.name; });
                y.options = tpart;
            }).foreach(function (g) {
                if (g.options.shape === MEPH.util.SVG.shapes.line) {
                    me.renderer.drawLine(g.options, g);
                }
                else if (g.options.shape === MEPH.util.SVG.shapes.circle) {
                    me.renderer.drawCircle(g.options, g);
                }
            });
        });

        newpoints = unrenderedPoints.select();

        newpoints.select(me.convertToControlPoint.bind(me, true)).foreach(function (t) {
            var result = me.renderer.draw(t.parts);
            t.point.parts = result;
            return t.point;
        }).foreach(function (x) {
            me.addControlPointEvents(x);
            me.renderedControlPoints.push(x);
        });

        me.renderedControlPoints.removeWhere(function (x) {
            return !me.controlpoints.some(function (t) {
                return me.selectPoint(t, x);
            });
        }).foreach(function (x) {
            x.parts.foreach(function (t) {
                me.renderer.remove(t.shape);
            });
            me.dun(x);
        });

    },
    /**
     * Converts a point in to a point and line representing a control arm.
     * @param {Object} point
     * @param {Boolean} initial
     **/
    convertToControlPoint: function (initial, controlpoint) {
        var me = this,
            target,
            cpoint;

        points = me.getLineSegment(controlpoint.path, controlpoint.segment);
        cpoint = MEPH.tween.TweenEditor.EndControlPoint === controlpoint.type ? points.second() : points.first();
        if (initial) {
            target = me.getInitialControlPointPosition(cpoint);
            controlpoint.position = target;
        }
        else {
            target = controlpoint.position;
        }
        return {
            parts: me.createControlPointInstructions(cpoint, target),
            point: controlpoint
        };
    },
    /**
     * Gets the control points position.
     * @param {Object} controlpoint
     * @return {Object}
     ***/
    getControlPointPosition: function (controlpoint) {
        var me = this;
        if (controlpoint.point)
            return controlpoint.point.position;
        return controlpoint.position;
    },
    /**
     * Sets the control points position.
     * @param {Object} controlpoint
     * @param {Object} position
     ****/
    setControlPointPosition: function (controlpoint, position) {
        controlpoint.point.position = position;
    },
    /**
     * Add control points events.
     **/
    addControlPointEvents: function (cp) {
        var me = this;
        var circle = cp.point.parts.first(function (x) {
            return x.options.shape === 'circle';
        });

        me.don('mousedown', circle.shape, function (shape, circle, evt) {
            me.handleControlPointEvents(shape, circle, 'mousedown');
        }.bind(me, cp, circle.shape), cp);

        //me.don('mouseup', circle.shape, function (shape, circle, evt) {
        //    me.handleControlPointEvents(shape, circle, 'mouseup');
        //}.bind(me, cp, circle.shape), cp);
    },
    handleControlPointEvents: function (cp, shape, evt) {
        var me = this;
        switch (evt) {
            case 'mousedown':
                shape.dispatchEvent(MEPH.createEvent('controldown', {
                    controlpoint: cp,
                    shape: shape
                }));
                break;
        }
    },
    /**
     * Creates control point instructions
     * @param {Object} point  control point
     * @param {Object} target target point
     * @returns {Array}
     **/
    createControlPointInstructions: function (point, target) {
        var me = this;
        var $point = {
            name: 'circle',
            shape: MEPH.util.SVG.shapes.circle,
            x: me.getX(target.x),
            y: me.getY(target.y),
            stroke: me.controlpointstroke,
            fill: me.controlpointfill,
            radius: me.pointradius
        };

        var line = {
            name: 'line',
            shape: MEPH.util.SVG.shapes.line,
            end: me.getPosition(point),
            start: me.getPosition(target),
            stroke: me.controlpointstroke,
            fill: me.controlpointfill,
            strokeWidth: me.controlpointstrokewidth,
            'stroke-dasharray': '5,5'
        };
        return [$point, line];
    },
    /**
     * @private
     * Gets the intial control point position.
     * @param {Object} cpoint
     * @return {Object}
     **/
    getInitialControlPointPosition: function (cpoint) {
        var me = this;
        return {
            x: cpoint.x,
            y: cpoint.y + me.controlpointoffset > 1 ? Math.max(0, cpoint.y - me.controlpointoffset) : cpoint.y + me.controlpointoffset
        }
    },
    /**
     * @private 
     * Renders path to the svg.
     ***/
    renderPaths: function () {
        var me = this,
            points,
            unrenderedPaths,
            renderedPaths,
            lines, lineshapes,
            p1,
            p2;

        if (!me.renderedPaths) {
            me.renderedPaths = {};
        }

        unrenderedPaths = me.paths.where(function (x) { return !me.renderedPaths[x]; });
        renderedPaths = me.paths.where(function (x) { return me.renderedPaths[x]; });

        unrenderedPaths.foreach(function (x) {
            lines = me.getLineInstructions(x);
            me.renderedPaths[x] = {
                lines: me.renderer.draw(lines),
                linetypes: []
            };
            me.renderedPaths[x].lines.foreach(function (t, index) {
                me.addEventsToLine(t, index);
                t.path = x;
            });
        });

        renderedPaths.foreach(function (x) {
            lines = me.getLineInstructions(x);
            lineshapes = me.renderedPaths[x].lines;
            if (lineshapes.length > lines.length) {
                //remove
                var toremove = lineshapes.length - lines.length;
                lineshapes.subset(0, toremove).where(function (x) {
                    me.renderer.remove(x);
                });
                lineshapes.removeWhere(function (x, i) {
                    return i < toremove;
                });

                lineshapes.foreach(function (t, index) {
                    me.renderer.drawLine(lines[index], lineshapes[index]);
                    lineshapes[index].path = x;
                    me.addEventsToLine(lineshapes[index], index)
                });
            }
            else if (lineshapes.length < lines.length) {
                //add
                var toadd = lines.length - lineshapes.length;
                var newlines = me.renderer.draw(lines.subset(0, toadd));
                newlines.foreach(function (tg, index) {
                    me.addEventsToLine(tg, index + lineshapes.length);
                    tg.path = x;
                })

                lineshapes.push.apply(lineshapes, newlines);

                lines.subset(toadd).foreach(function (x, index) {
                    me.renderer.drawLine(x, lineshapes[index]);
                    me.addEventsToLine(lineshapes[index], index)
                });
            }
            else {
                lineshapes.foreach(function (x, index) {
                    me.renderer.drawLine(lines[index], lineshapes[index]);
                    me.addEventsToLine(lineshapes[index], index)
                });
            }
        });
    },
    /**
     * Sets the selected lines type to bezier
     **/
    setSelectedLineToBezier: function () {
        var me = this;
        if (me.$selectedLine) {
            var path = me.getPath(me.$selectedLine.path);

            var lineInfo = path.linetypes.first(function (x) { return x.lineIndex === me.$selectedLine.lineIndex; });
            if (lineInfo) {
                lineInfo.type = MEPH.tween.TweenEditor.tweenTypes.bezier;
            }
            else {
                path.linetypes.push({ type: MEPH.tween.TweenEditor.tweenTypes.bezier, lineIndex: me.$selectedLine.lineIndex });
            }
        }
    },
    /**
     * Gets the lines for a path.
     * @param {String} guid
     * @return {Array}
     **/
    getPathLines: function (guid) {
        var me = this, path = me.getPath(guid);
        if (path) {
            return path.lines || [];
        }
        return [];
    },
    /**
     * Gets the paths by id.
     * @param {String} guid
     * @returns {Object}
     ***/
    getPath: function (guid) {
        var me = this;
        if (me.renderedPaths && me.renderedPaths[guid]) {
            return me.renderedPaths[guid];
        }
        return null;
    },
    /**
     * Adds events to lines.
     **/
    addEventsToLine: function (line, index) {
        var me = this;
        me.dun(line);
        line.lineIndex = index;
        me.don('mouseout', line.shape, function (shape, evt) {
            me.handleLineState(shape, 'mouseout');
        }.bind(me, line), line);
        me.don('mouseover', line.shape, function (shape, evt) {
            me.handleLineState(shape, 'mouseover');
        }.bind(me, line), line);
        me.don('click', line.shape, function (shape, evt) {
            me.handleLineState(shape, 'click');
        }.bind(me, line), line);
        me.handleLineState(line);
    },
    /**
     * Handles lines state
     * @param {Object} shape
     * @param {String} evt
     **/
    handleLineState: function (shape, evt) {
        var me = this;
        switch (evt) {
            case 'click':
                if (me.$selectedLine) {
                    me.$selectedLine.shape.style.stroke = me.linestroke;
                }
                shape.shape.style.stroke = me.linestrokeselected;
                me.$selectedLine = shape;
                break;
            case 'mouseover':
                //shape.shape.style.stroke = me.linestrokeover;
                shape.shape.style.strokeWidth = me.linestrokeoverwidth;
                break;
            case 'mouseout':
                //shape.shape.style.stroke = me.linestroke;
                shape.shape.style.strokeWidth = me.linestrokewidth;
                break;
            default:
                if (shape && shape.shape) {
                    shape.shape.style.stroke = me.linestroke;
                    shape.shape.style.strokeWidth = me.linestrokewidth;
                }
                me.$selectedLine = null;
                break;
        }
    },
    /**
     * @private
     * Gets instructions for line.
     * @param {String} x
     * @return {Array}
     **/
    getLineInstructions: function (x) {
        var me = this,
            points,
            p1, lines,
            controlpoints, p2;

        points = me.getOrderedPathPoints(x);

        lines = points.select(function (p, index) {
            if (index) {
                controlpoints = me.getControlPoints(x, index - 1);
                p2 = me.getPosition(points[index]);
                p1 = me.getPosition(points[index - 1]);
                if (!controlpoints ||
                    !controlpoints.point ||
                    !controlpoints.point.start ||
                    !controlpoints.point.end) {
                    var line = {
                        shape: MEPH.util.SVG.shapes.line,
                        start: p1,
                        strokeWidth: me.linestrokewidth,
                        end: p2
                    };
                    return line;
                }
                else {

                    var bezier = {
                        shape: MEPH.util.SVG.shapes.bezier,
                        start: p1,
                        fill: 'transparent',
                        bezier1: me.getPosition(me.getControlPointPosition(controlpoints.point.start)),
                        bezier2: me.getPosition(me.getControlPointPosition(controlpoints.point.end)),
                        strokeWidth: me.linestrokewidth,
                        end: p2
                    };
                    return bezier;
                }
            }
        }).where(function (t) {
            return t;
        });

        return lines;
    },
    getOrderedPathPoints: function (x) {
        var me = this;
        return me.getPathPoints(x).orderBy(function (y, x) {
            return y.x - x.x;
        });
    },
    /**
     * Renders tween points.
     ***/
    renderTweenPoints: function () {
        var me = this, toshape = function (x) {
            return {
                shape: MEPH.util.SVG.shapes.circle,
                x: me.getX(x.x),
                guid: x.guid,
                y: me.getY(x.y),
                radius: me.pointradius
            }
        };

        if (me.$tweenpoints === null) {
            var select = me.source.select(toshape);
            me.$tweenpoints = me.renderer.draw(select);
        }
        else {
            var newshapes = me.source.select(toshape).where(function (x, index) {
                var r = me.$tweenpoints[index];
                if (r) {
                    var t = me.renderer.drawCircle(x, r);
                    me.dun(r);
                    r.options.guid = t.options.guid;
                    me.addEventsToTweenPoints([r]);
                    return false;
                }
                else {
                    return true;
                }
            });
            if (newshapes.length) {
                var p = me.renderer.draw(newshapes);
                me.$tweenpoints.push.apply(me.$tweenpoints, p);
                me.addEventsToTweenPoints(p);
            }
            else if (me.source.length < me.$tweenpoints) {
                var t = me.$tweenpoints.subset(me.source.length).select(function (x) {
                    me.renderer.remove(x);
                    return x;
                })
                me.$tweenpoints.removeWhere(function (y) {
                    return t.some(function (x) { return x === y; })
                }).foreach(function (removed) {
                    me.dun(removed);
                });
            }
        }
    },
    /**
     * Adds events to tween points
     * @param {Array} array an array of tween points.
     **/
    addEventsToTweenPoints: function (array) {
        var me = this;
        array.foreach(function (x) {
            me.don('mousedown', x.shape, function (shape, evt) {
                var pos = MEPH.util.Dom.getEventPositions(evt, me.svg);
                me.svg.dispatchEvent(MEPH.createEvent('tweendown', { tweenpoint: shape, position: pos }));
            }.bind(me, x), x);
            me.don('mouseout', x.shape, function (shape) {
                shape.shape.setAttribute('r', me.tweenrad);
            }.bind(me, x), x);
            me.don('mouseover', x.shape, function (shape, evt) {
                var pos = MEPH.util.Dom.getEventPositions(evt, me.svg);
                if (!me.state) {
                    me.target = shape.options.guid;
                }
                shape.shape.setAttribute('r', me.tweenoverradius)
                me.svg.dispatchEvent(MEPH.createEvent('tweenover', { tweenpoint: shape, position: pos }));
            }.bind(me, x), x);

        });
    },
    /**
     * Renders the structure of the tween editor.
     ***/
    renderStructureElements: function () {
        var me = this, size = Style.size(me.svg);
        var structure = [{
            name: 'left',
            shape: MEPH.util.SVG.shapes.line,
            start: {
                x: 0 + me.margin,
                y: 0 + me.margin
            },
            end: {
                x: me.margin,
                y: size.height - me.margin
            }
        }, {
            name: 'right',
            shape: MEPH.util.SVG.shapes.line,
            start: {
                x: size.width - me.margin,
                y: me.margin
            },
            end: {
                x: size.width - me.margin,
                y: size.height - me.margin
            }
        }, {
            name: 'top',
            shape: MEPH.util.SVG.shapes.line,
            start: {
                x: me.margin,
                y: me.margin
            },
            end: {
                x: size.width - me.margin,
                y: me.margin
            }
        }, {
            name: 'bottom',
            shape: MEPH.util.SVG.shapes.line,
            start: {
                x: me.margin,
                y: size.height - me.margin
            },
            end: {
                x: size.width - me.margin,
                y: size.height - me.margin
            }
        }]
        if (me.$structureElements === null) {
            me.$structureElements = me.renderer.draw(structure);
        }
        else {
            me.$structureElements.foreach(function (t) {
                var shapeObj = structure.first(function (m) { return m.name === t.options.name; });
                me.renderer.drawLine(shapeObj, t);
            })
        }
    },
    /**
     * Adds a point an a path.
     ***/
    onAddPointAndPath: function () {
        var me = this;
        me.onAddPath();
        me.onAddPoint();
    },
    /**
     * Adds a point to the center of the tween editor.
     **/
    onAddPoint: function () {
        var me = this;
        me.addPoint({ x: .5, y: 0 });
    },
    /**
     * Adds a point the the tween editor.
     * @param {Object} point
     ***/
    addPoint: function (point) {
        var me = this;

        point.x = Math.max(0, Math.min(point.x, 1));
        point.guid = MEPH.GUID();
        point.y = Math.max(-1, Math.min(point.y, 1));
        point.mark = me.mark;
        me.source.push(point);
    },
    /**
     * Add a path from (0,0) to (1,0)
     **/
    onAddPath: function () {
        var me = this;
        me.addPath({ x: 0, y: 0 }, { x: 1, y: 0 })
    },
    /**
     * Adds a path 
     * @param {Object} p1
     * @param {Object} p2
     ***/
    addPath: function (p1, p2) {
        var me = this, guid = MEPH.GUID();
        me.paths.push(guid);
        me.mark = guid;
        p1.anchor = true;
        p2.anchor = true;
        me.addPoint(p1);
        me.addPoint(p2);
    },
    /**
     * Adds a control point to a specific point
     **/
    addControlPoint: function (path, lineSegment, type) {
        var me = this;

        if (!me.controlpoints.some(function (t) { return t.path === path && t.segment === lineSegment && t.type === type; })) {
            me.controlpoints.push({
                path: path,
                segment: lineSegment,
                type: type
            });
        }
    },
    /**
     * Removes a control point.
     * @param {Object} point
     ***/
    removeControlPoint: function (point) {
        var me = this;

        return me.controlpoints.removeWhere(function (t) { return t === point; }).first();
    },
    /**
     * Gets the control points for a path and segment.
     * @param {String} path
     * @param {Number} lineSegment
     * @return {Object}
     **/
    getControlPoints: function (path, lineSegment) {
        var me = this, start, end;
        start = me.controlpoints.first(function (t) {
            return t.path === path && t.segment === lineSegment && t.type === MEPH.tween.TweenEditor.StartControlPoint;
        });
        end = me.controlpoints.first(function (t) {
            return t.path === path && t.segment === lineSegment && t.type === MEPH.tween.TweenEditor.EndControlPoint;
        });
        if (start && start.position && end && end.position) {
            return {
                point: {
                    start: start,
                    end: end
                }
            }
        }
        return null;
    },

    getLineSegment: function (pathguid, segment) {
        var me = this,
            points = me.getOrderedPathPoints(pathguid);

        return points = points.subset(segment, segment + 2);
    },
    /**
     * Add controlls to selected line.
     **/
    addControlsToSelectedLine: function () {
        var me = this,
            selectedline = me.$selectedLine,
            points;

        if (selectedline) {
            me.addControlPoint(selectedline.path, selectedline.lineIndex, MEPH.tween.TweenEditor.StartControlPoint);
            me.addControlPoint(selectedline.path, selectedline.lineIndex, MEPH.tween.TweenEditor.EndControlPoint);
        }
    }
});﻿describe("MEPH/tween/Calculator.spec.js", 'MEPH.tween.Calculator', 'MEPH.tween.TweenEditor', function () {
    var TweenEditor = MEPH.tween.TweenEditor;
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create a tween calculator.', function (done) {
        MEPH.create('MEPH.tween.Calculator').then(function ($class) {
            var calculator = new $class();
            expect(calculator).theTruth('The calculator can not be created');
        }).catch(function (error) {
            if (error) {
                expect(error).caught();
            }
        }).then(function () {
            done();
        });
    });

    it('can calculator a bezier cubic curve', function () {
        var p1 = MEPH.math.Vector.Create([0, 0]);
        var p2 = MEPH.math.Vector.Create([0.2, 0.2]);
        var p3 = MEPH.math.Vector.Create([0.4, 0.4]);
        var p4 = MEPH.math.Vector.Create([0.6, 0.6]);

        var res = MEPH.tween.Calculator.BezierCubic(p1, p2, p3, p4, 0);

        expect(res.equals(MEPH.math.Vector.ZeroVector(2))).toBeTruthy();
    });

    it('can calculator a bezier cubic curve', function () {
        var p1 = MEPH.math.Vector.Create([0, 0]);
        var p2 = MEPH.math.Vector.Create([0.2, 0.2]);
        var p3 = MEPH.math.Vector.Create([0.4, 0.4]);
        var p4 = MEPH.math.Vector.Create([1, 1]);

        var res = MEPH.tween.Calculator.BezierCubic(p1, p2, p3, p4, 1);

        expect(res.equals(new MEPH.math.Vector([1, 1]))).toBeTruthy();
    });

    it('can calculate a linear set', function () {
        var p1 = MEPH.math.Vector.Create([0, 0]);
        var p2 = MEPH.math.Vector.Create([1, 1]);

        var res = MEPH.tween.Calculator.Linear(p1, p2, 1);

        expect(res.equals(new MEPH.math.Vector([1, 1]))).toBeTruthy();
    });

    it('can calculate a linear set', function () {
        var p1 = MEPH.math.Vector.Create([0, 0]);
        var p2 = MEPH.math.Vector.Create([1, 1]);

        var res = MEPH.tween.Calculator.Linear(p1, p2, 0);

        expect(res.equals(new MEPH.math.Vector([0, 0]))).toBeTruthy();
    });

    it('can calculate a linear set', function () {
        var p1 = MEPH.math.Vector.Create([0, 0]);
        var p2 = MEPH.math.Vector.Create([1, 1]);

        var res = MEPH.tween.Calculator.Linear(p1, p2, .5);

        expect(res.equals(new MEPH.math.Vector([0.5, 0.5]))).toBeTruthy();
    });

    it('can set the tween data', function () {
        var calculator = new MEPH.tween.Calculator();

        calculator.setData('tweendata');

        expect(calculator.tweendata).toBe('tweendata');
    });

    it('can calculate value from tween data', function () {
        var editor = new TweenEditor();
        editor.source = [];
        editor.paths = [];
        editor.controlpoints = [];

        editor.onAddPointAndPath();
        editor.updateData();
        expect(editor.tween).toBeTruthy();

        var calculator = new MEPH.tween.Calculator();

        calculator.setData(editor.tween);

        var result = calculator.get(0);
        expect(result).toBe(0);
    });

    it('can calculate value from tween data', function () {
        var editor = new TweenEditor();
        editor.source = [];
        editor.paths = [];
        editor.controlpoints = [];

        editor.onAddPointAndPath();
        editor.updateData();
        expect(editor.tween).toBeTruthy();

        var calculator = new MEPH.tween.Calculator();

        calculator.setData(editor.tween);

        var result = calculator.get(1);
        expect(result).toBe(0);
    });


    it('can get control points for a segment.', function (done) {
        MEPH.render('MEPH.tween.TweenEditor', 'tweeneditor').then(function (r) {
            var results = r.res;
            var app = r.app, called,
                dom,
                editor = results.first().classInstance;

            editor.onAddPointAndPath();

            var lines = editor.renderedPaths[Object.keys(editor.renderedPaths)[0]].lines;

            editor.$selectedLine = lines.first();

            editor.addControlsToSelectedLine();

            editor.update();

            editor.$selectedLine = lines.first();

            var points = editor.getControlPoints(editor.$selectedLine.path, 0);

            points.point.start.position.x = .1;
            points.point.end.position.x = .45;

            editor.svg.addEventListener('dataupdated', function () {
                called = true;
            });

            editor.updateData();

            var calculator = new MEPH.tween.Calculator();

            calculator.setData(editor.tween);

            var result = calculator.get(0);
            expect(result).toBe(0);
            expect(called).toBeTruthy();

            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });

    it('can get control points for a segment.', function (done) {
        MEPH.render('MEPH.tween.TweenEditor', 'tweeneditor').then(function (r) {
            var results = r.res;
            var app = r.app, called,
                dom,
                editor = results.first().classInstance;

            editor.onAddPointAndPath();

            var lines = editor.renderedPaths[Object.keys(editor.renderedPaths)[0]].lines;

            editor.$selectedLine = lines.first();

            editor.addControlsToSelectedLine();

            editor.update();

            editor.$selectedLine = lines.first();

            var points = editor.getControlPoints(editor.$selectedLine.path, 0);

            points.point.start.position.x = .1;
            points.point.end.position.x = .45;

            editor.svg.addEventListener('dataupdated', function () {
                called = true;
            });

            editor.updateData();

            var calculator = new MEPH.tween.Calculator();

            calculator.setData(editor.tween);

            var result = calculator.get(1);
            expect(result).toBe(0);
            expect(called).toBeTruthy();

            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });
})﻿describe("MEPH/tree/Tree.spec.js", function () {
    var createTreeObject = function createTreeObject() {
        var object = {
            data: 1,
            children: [{
                data: 2,
                children: [{
                    data: 3,
                    children: []
                }]
            }]
        };
        return object;
    }
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create a tree.', function (done) {
        MEPH.create('MEPH.tree.Tree').then(function ($class) {
            var tree = new $class();
            expect(tree).theTruth('The tree can not be created');
        }).catch(function (error) {
            if (error) {
                expect(error).caught();
            }
        }).then(function () {
            done();
        });
    });

    it(' a tree be rendered.', function (done) {
        //Arrange
        var app, div,
            source = [].interpolate(0, 10, function (index) {
                var obj = { prop: 1 };
                MEPH.util.Observable.observable(obj);
                return obj;
            }),
            dom;

        MEPH.requires('MEPH.tree.Tree', 'MEPHTests.helper.Application').then(function () {
            app = new MEPHTests.helper.Application();
            dom = app.createAppSpace(), div = document.createElement('div');
            div.innerHTML = '<tree><template name="standard"><div data-bind=\'"innerHTML" : "c$.name"\'></div></template></tree>';
            return app.create('MEPH.tree.Tree', div.firstElementChild);
        }).then(function (results) {
            return app.loadViewObject([results], dom);
        }).then(function (results) {
            var tree = results.first().classInstance,
                promise;
            ///Assert
            tree.on('render', function (type, options) {
                promise = options.renderComplete.then(function () {
                    if (app) {
                        app.removeSpace();
                    }
                });
            });
            tree.source = source;
            return promise;
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        })
    });

    it('a tree can decipher a tree source into an array', function (done) {
        MEPH.create('MEPH.tree.Tree').then(function ($class) {
            var tree = new $class(),
                treeObject = createTreeObject(),
                result;

            result = tree.convertObject(treeObject, function (root) {
                return root.children || [];
            });
            expect(result).theTruth('No result was returned');
            expect(result.length === 3).theTruth('the length wasnt 3');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it('a tree can decipher a tree source into an array, and the results will have ferences to it parent and children nodes.', function (done) {
        MEPH.create('MEPH.tree.Tree').then(function ($class) {
            var tree = new $class(),
                treeObject = createTreeObject(),
                result;

            result = tree.convertObject(treeObject, function (root) {
                return root.children || [];
            });
            expect(result).theTruth('No result was returned');
            expect(result.length === 3).theTruth('the length wasnt 3');
            expect(result[1].parent === result[0]).theTruth('The parent was not set');
            expect(result[2].depth === 2).theTruth('The depth was not correctly set');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it('a tree can get the depth of the instance by data.', function (done) {
        MEPH.create('MEPH.tree.Tree').then(function ($class) {
            var tree = new $class(),
                sourceInfo,
                treeObject = createTreeObject(),
                result;

            result = tree.convertObject(treeObject, function (root) {
                return root.children || [];
            });
            tree.treeSource = treeObject;

            sourceInfo = tree.getSourceInfo(treeObject);
            expect(sourceInfo.depth === 0).theTruth('the wrong source info was found');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it(' when a treesource is set , the source will be the result of the converted object', function (done) {
        MEPH.create('MEPH.tree.Tree').then(function ($class) {
            var tree = new $class(),
                treeObject = createTreeObject(),
                results;
            tree.treeSource = treeObject;
            expect(tree.source.length === 3).theTruth('The treesource was not converted correctly.');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });


    it(' a tree be rendered.', function (done) {
        //Arrange
        var app, div,
            source = createTreeObject(),
            dom;

        MEPH.requires('MEPH.tree.Tree', 'MEPHTests.helper.Application').then(function () {
            app = new MEPHTests.helper.Application();
            dom = app.createAppSpace(), div = document.createElement('div');
            div.innerHTML = '<tree><template name="standard"><div data-bind=\'"innerHTML" : "c$.name"\'></div></template></tree>';
            return app.create('MEPH.tree.Tree', div.firstElementChild);
        }).then(function (results) {
            return app.loadViewObject([results], dom);
        }).then(function (results) {
            var tree = results.first().classInstance,
                promise;
            ///Assert
            tree.on('render', function (type, options) {
                promise = options.renderComplete.then(function () {
                    var temp = tree;
                    if (app) {
                        app.removeSpace();
                    }
                });
            });
            tree.treeSource = source;
            return promise;
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        })
    });


    it(' a tree be rendered, and depth classes will be applied', function (done) {
        //Arrange
        var app, div,
            source = createTreeObject(),
            dom;

        MEPH.requires('MEPH.tree.Tree', 'MEPHTests.helper.Application').then(function () {
            app = new MEPHTests.helper.Application();
            dom = app.createAppSpace(), div = document.createElement('div');
            div.innerHTML = '<tree><template name="standard"><div data-bind=\'"innerHTML" : "c$.name"\'></div></template></tree>';
            return app.create('MEPH.tree.Tree', div.firstElementChild);
        }).then(function (results) {
            return app.loadViewObject([results], dom);
        }).then(function (results) {
            var tree = results.first().classInstance,
                promise;
            ///Assert
            tree.on('render', function (type, options) {
                promise = options.renderComplete.then(function () {
                    var temp = tree,
                        items;

                    items = tree.querySelectorAll('.' + tree.$depthPathPrefixCls + 1);
                    
                    expect(items.length === 1).theTruth('The wrong number of items were found in the tree ' + items.length);
                    if (app) {
                        app.removeSpace();
                    }
                });
            });
            //Act
            tree.treeSource = source;
            return promise;
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        })
    });
});﻿describe("MEPH/table/SpreadSheet.spec.js", 'MEPH.table.SpreadSheet', function () {
    var ScrollingTable = MEPH.table.ScrollingTable;

    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it("can create a SpreadSheet", function () {
        //Arrange

        //Assert
        var input = new MEPH.table.SpreadSheet();

        expect(input).toBeTruthy();

    });

    it('can render a SpreadSheet', function (done) {
        MEPH.render('MEPH.table.SpreadSheet', 'scrollingtable').then(function (r) {
            var results = r.res;
            var app = r.app;

            var dom,
                scrollingtable = results.first().classInstance;
            ///Assert
            dom = scrollingtable.getDomTemplate()[0]
            expect(dom).toBeTruthy();
            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        })
    });

    it('can detect a click on a specific cell', function (done) {

        MEPH.render('MEPH.table.SpreadSheet', 'scrollingtable').then(function (r) {
            var results = r.res;
            var app = r.app;

            var dom,
                scrollingtable = results.first().classInstance;
            scrollingtable.rowheaders = "1";
            scrollingtable.columnheaders = "1";
            scrollingtable.columns = "26";
            scrollingtable.rows = "1000";
            var cells;
            scrollingtable.body.addEventListener('cellclicked', function (e) {
                cells = e.cells;
            })
            scrollingtable.canvas.dispatchEvent(MEPH.createEvent('click', { pageX: 10, pageY: 10 }));

            ///Assert
            return new Promise(function (r) {
                setTimeout(function () {
                    expect(cells).toBeTruthy();
                    if (app) {
                        app.removeSpace();
                    }
                    r();
                }, 150);
            })
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });

    it('can detect a click on a specific top header cell', function (done) {

        MEPH.render('MEPH.table.SpreadSheet', 'scrollingtable').then(function (r) {
            var results = r.res;
            var app = r.app;

            var dom,
                scrollingtable = results.first().classInstance;
            scrollingtable.rowheaders = "3";
            scrollingtable.columnheaders = "3";
            scrollingtable.columns = "3";
            scrollingtable.rows = "3";
            var cells;
            scrollingtable.body.addEventListener('topheadercellclicked', function (e) {
                cells = e.cells;
            })
            scrollingtable.topheader.dispatchEvent(MEPH.createEvent('click', { pageX: 10, pageY: 10 }));

            ///Assert
            return new Promise(function (r) {
                setTimeout(function () {
                    expect(cells).toBeTruthy();
                    if (app) {
                        app.removeSpace();
                    }
                    r();
                }, 150);
            })
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });

    it('can detect a click on a specific left header cell', function (done) {

        MEPH.render('MEPH.table.SpreadSheet', 'scrollingtable').then(function (r) {
            var results = r.res;
            var app = r.app;

            var dom,
                scrollingtable = results.first().classInstance;
            scrollingtable.rowheaders = "3";
            scrollingtable.columnheaders = "3";
            scrollingtable.columns = "3";
            scrollingtable.rows = "3";
            var cells;
            scrollingtable.body.addEventListener('leftheadercellclicked', function (e) {
                cells = e.cells;
            })
            scrollingtable.leftheader.dispatchEvent(MEPH.createEvent('click', { pageX: 10, pageY: 10 }));

            ///Assert
            return new Promise(function (r) {
                setTimeout(function () {
                    expect(cells).toBeTruthy();
                    if (app) {
                        app.removeSpace();
                    }
                    r();
                }, 150);
            })
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });

    it('can detect a mouse move on a specific cell', function (done) {

        MEPH.render('MEPH.table.SpreadSheet', 'scrollingtable').then(function (r) {
            var results = r.res;
            var app = r.app;

            var dom,
                scrollingtable = results.first().classInstance;
            scrollingtable.rowheaders = "1";
            scrollingtable.columnheaders = "1";
            scrollingtable.columns = "26";
            scrollingtable.rows = "1000";
            var cells;
            scrollingtable.body.addEventListener('mousemovecell', function (e) {
                cells = e.cells;
            })
            scrollingtable.canvas.dispatchEvent(MEPH.createEvent('mousemove', { pageX: 10, pageY: 10 }));

            ///Assert
            return new Promise(function (r) {
                setTimeout(function () {
                    expect(scrollingtable.hovercells).toBeTruthy();
                    expect(cells).toBeTruthy();
                    if (app) {
                        app.removeSpace();
                    }
                    r();
                }, 150);
            })
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });


    it('can detect a mouse over on a specific cell', function (done) {

        MEPH.render('MEPH.table.SpreadSheet', 'scrollingtable').then(function (r) {
            var results = r.res;
            var app = r.app;

            var dom,
                scrollingtable = results.first().classInstance;
            scrollingtable.rowheaders = "1";
            scrollingtable.columnheaders = "1";
            scrollingtable.columns = "26";
            scrollingtable.rows = "1000";
            var cells;
            scrollingtable.body.addEventListener('mouseovercell', function (e) {
                cells = e.cells;
            })
            scrollingtable.canvas.dispatchEvent(MEPH.createEvent('mousemove', { pageX: 10, pageY: 10 }));

            ///Assert
            return new Promise(function (r) {
                setTimeout(function () {
                    expect(cells).toBeTruthy();
                    if (app) {
                        app.removeSpace();
                    }
                    r();
                }, 150);
            })
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });

    it('can detect a mouse move on a specific top header cell', function (done) {

        MEPH.render('MEPH.table.SpreadSheet', 'scrollingtable').then(function (r) {
            var results = r.res;
            var app = r.app;

            var dom,
                scrollingtable = results.first().classInstance;
            scrollingtable.rowheaders = "3";
            scrollingtable.columnheaders = "3";
            scrollingtable.columns = "3";
            scrollingtable.rows = "3";
            var cells;

            scrollingtable.body.addEventListener('mousemovetopheader', function (e) {
                cells = e.cells;
            })
            scrollingtable.topheader.dispatchEvent(MEPH.createEvent('mousemove', { pageX: 10, pageY: 10 }));

            ///Assert
            return new Promise(function (r) {
                setTimeout(function () {
                    expect(cells).toBeTruthy();
                    if (app) {
                        app.removeSpace();
                    }
                    r();
                }, 150);
            })
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });
    it('can detect a mouse over on a specific top header cell', function (done) {

        MEPH.render('MEPH.table.SpreadSheet', 'spreadsheet').then(function (r) {
            var results = r.res;
            var app = r.app;

            var dom,
                scrollingtable = results.first().classInstance;
            scrollingtable.rowheaders = "3";
            scrollingtable.columnheaders = "3";
            scrollingtable.columns = "3";
            scrollingtable.rows = "3";
            var cells;

            scrollingtable.body.addEventListener('mouseoverheadertop', function (e) {
                cells = e.cells;
            })
            scrollingtable.topheader.dispatchEvent(MEPH.createEvent('mouseover', { pageX: 10, pageY: 10 }));

            ///Assert
            return new Promise(function (r) {
                setTimeout(function () {
                    expect(cells).toBeTruthy();
                    if (app) {
                        app.removeSpace();
                    }
                    r();
                }, 150);
            })
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });
    it('can detect a mouse over on a specific left header cell', function (done) {

        MEPH.render('MEPH.table.SpreadSheet', 'spreadsheet').then(function (r) {
            var results = r.res;
            var app = r.app;

            var dom,
                scrollingtable = results.first().classInstance;
            scrollingtable.rowheaders = "3";
            scrollingtable.columnheaders = "3";
            scrollingtable.columns = "3";
            scrollingtable.rows = "3";
            var cells;

            scrollingtable.body.addEventListener('mouseoverheaderleft', function (e) {
                cells = e.cells;
            })
            scrollingtable.leftheader.dispatchEvent(MEPH.createEvent('mouseover', { pageX: 10, pageY: 10 }));

            ///Assert
            return new Promise(function (r) {
                setTimeout(function () {
                    expect(cells).toBeTruthy();
                    if (app) {
                        app.removeSpace();
                    }
                    r();
                }, 150);
            })
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });

    it('can detect a mouse move on a specific left header cell', function (done) {

        MEPH.render('MEPH.table.SpreadSheet', 'scrollingtable').then(function (r) {
            var results = r.res;
            var app = r.app;

            var dom,
                scrollingtable = results.first().classInstance;
            scrollingtable.rowheaders = "3";
            scrollingtable.columnheaders = "3";
            scrollingtable.columns = "3";
            scrollingtable.rows = "3";
            var cells;

            scrollingtable.body.addEventListener('mousemoveleftheader', function (e) {
                cells = e.cells;
            })
            scrollingtable.leftheader.dispatchEvent(MEPH.createEvent('mousemove', { pageX: 10, pageY: 10 }));

            ///Assert
            return new Promise(function (r) {
                setTimeout(function () {
                    expect(cells).toBeTruthy();
                    if (app) {
                        app.removeSpace();
                    }
                    r();
                }, 150);
            })
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });
    it('can detect a mouse move on a specific top header cell', function (done) {

        MEPH.render('MEPH.table.SpreadSheet', 'scrollingtable').then(function (r) {
            var results = r.res;
            var app = r.app;

            var dom,
                scrollingtable = results.first().classInstance;
            scrollingtable.rowheaders = "3";
            scrollingtable.columnheaders = "3";
            scrollingtable.columns = "3";
            scrollingtable.rows = "3";
            var cells;

            scrollingtable.body.addEventListener('mousemovetopheader', function (e) {
                cells = e.cells;
            })
            scrollingtable.topheader.dispatchEvent(MEPH.createEvent('mousemove', { pageX: 10, pageY: 10 }));

            ///Assert
            return new Promise(function (r) {
                setTimeout(function () {
                    expect(cells).toBeTruthy();
                    if (app) {
                        app.removeSpace();
                    }
                    r();
                }, 150);
            })
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });

    it('when move is detected a select div is moved and sized appropriateley', function (done) {

        MEPH.render('MEPH.table.SpreadSheet', 'scrollingtable').then(function (r) {
            var results = r.res;
            var app = r.app;

            var dom,
                scrollingtable = results.first().classInstance;
            scrollingtable.rowheaders = "1";
            scrollingtable.columnheaders = "1";
            scrollingtable.columns = "26";
            scrollingtable.rows = "1000";
            var cells;
            scrollingtable.canvas.dispatchEvent(MEPH.createEvent('mousemove', { pageX: 10, pageY: 10 }));

            ///Assert
            return new Promise(function (r) {
                setTimeout(function () {
                    expect(scrollingtable.activearea).toBeTruthy();
                    if (app) {
                        app.removeSpace();
                    }
                    r();
                }, 150);
            })
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });

    it('when move is detected a select div is moved and sized appropriateley', function (done) {

        MEPH.render('MEPH.table.SpreadSheet', 'scrollingtable').then(function (r) {
            var results = r.res;
            var app = r.app;

            var dom,
                scrollingtable = results.first().classInstance;
            scrollingtable.rowheaders = "1";
            scrollingtable.columnheaders = "1";
            scrollingtable.columns = "26";
            scrollingtable.rows = "1000";
            var cells;
            scrollingtable.topheader.dispatchEvent(MEPH.createEvent('mousemove', { pageX: 10, pageY: 10 }));

            ///Assert
            return new Promise(function (r) {
                setTimeout(function () {
                    expect(scrollingtable.activeareatop).toBeTruthy();
                    if (app) {
                        app.removeSpace();
                    }
                    r();
                }, 150);
            })
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });
    it('can set up a keypress to a command, for executing a command', function (done) {
        MEPH.render('MEPH.table.SpreadSheet', 'scrollingtable').then(function (r) {
            var results = r.res;
            var app = r.app;

            var dom,
                scrollingtable = results.first().classInstance;
            scrollingtable.rowheaders = "1";
            scrollingtable.columnheaders = "1";
            scrollingtable.columns = "26";
            scrollingtable.rows = "1000";
            scrollingtable.commands = [{ key: 'S', command: 'select' }]
            var selectingstarted;
            scrollingtable.canvas.addEventListener('selectstart', function () {
                selectingstarted = true;
            });
            scrollingtable.canvas.dispatchEvent(MEPH.createEvent('mousemove', { pageX: 10, pageY: 10 }));
            scrollingtable.canvas.dispatchEvent(MEPH.createEvent('keypress', { which: 'S'.charCodeAt(0) }));

            ///Assert
            return new Promise(function (r) {
                setTimeout(function () {
                    expect(scrollingtable.selecting).toBeTruthy();
                    expect(scrollingtable.state === MEPH.table.SpreadSheet.states.Selecting).toBeTruthy();
                    expect(selectingstarted).toBeTruthy();
                    if (app) {
                        app.removeSpace();
                    }
                    r();
                }, 150);
            })
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });

    it('when the mouse is pressed down will start to select, by setting the select state to selecting', function (done) {
        MEPH.render('MEPH.table.SpreadSheet', 'scrollingtable').then(function (r) {
            var results = r.res;
            var app = r.app;

            var dom,
                scrollingtable = results.first().classInstance;
            scrollingtable.rowheaders = "1";
            scrollingtable.columnheaders = "1";
            scrollingtable.columns = "26";
            scrollingtable.rows = "1000";
            var selectingstarted;
            scrollingtable.canvas.addEventListener('selectstart', function () {
                selectingstarted = true;
            });
            scrollingtable.canvas.dispatchEvent(MEPH.createEvent('mousedown', { pageX: 10, pageY: 10 }));

            ///Assert
            return new Promise(function (r) {
                setTimeout(function () {
                    expect(scrollingtable.selecting).toBeTruthy();
                    expect(scrollingtable.state === MEPH.table.SpreadSheet.states.Selecting).toBeTruthy();
                    expect(selectingstarted).toBeTruthy();
                    if (app) {
                        app.removeSpace();
                    }
                    r();
                }, 150);
            })
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });

    it('if the select command is defined by keypress, the mousedown and mouseup will not do anything select related.', function (done) {
        MEPH.render('MEPH.table.SpreadSheet', 'scrollingtable').then(function (r) {
            var results = r.res;
            var app = r.app;

            var dom,
                scrollingtable = results.first().classInstance;
            scrollingtable.rowheaders = "1";
            scrollingtable.columnheaders = "1";
            scrollingtable.columns = "26";
            scrollingtable.rows = "1000";
            scrollingtable.commands = [{ key: 'S', command: 'select' }];
            var selectingstarted;
            scrollingtable.canvas.addEventListener('selectstart', function () {
                selectingstarted = true;
            });
            scrollingtable.canvas.dispatchEvent(MEPH.createEvent('mousedown', { pageX: 10, pageY: 10 }));

            ///Assert
            return new Promise(function (r) {
                setTimeout(function () {
                    expect(scrollingtable.selecting).toBeFalsy();
                    expect(scrollingtable.state === null).toBeTruthy();
                    expect(!selectingstarted).toBeTruthy();
                    if (app) {
                        app.removeSpace();
                    }
                    r();
                }, 150);
            })
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });
    it('when the mouse is pressed down will start to select, by setting the select state to selecting, headers', function (done) {
        MEPH.render('MEPH.table.SpreadSheet', 'scrollingtable').then(function (r) {
            var results = r.res;
            var app = r.app;

            var dom,
                scrollingtable = results.first().classInstance;
            scrollingtable.rowheaders = "3";
            scrollingtable.columnheaders = "3";
            scrollingtable.columns = "26";
            scrollingtable.rows = "1000";
            var selectingstarted;
            scrollingtable.leftheader.addEventListener('leftselectstart', function () {
                selectingstarted = true;
            });

            scrollingtable.leftheader.dispatchEvent(MEPH.createEvent('mousedown', { pageX: 10, pageY: 10 }));

            ///Assert
            return new Promise(function (r) {
                setTimeout(function () {
                    expect(scrollingtable.selecting).toBeTruthy();
                    expect(scrollingtable.state === MEPH.table.SpreadSheet.states.Selectingleft).toBeTruthy();
                    expect(selectingstarted).toBeTruthy();
                    if (app) {
                        app.removeSpace();
                    }
                    r();
                }, 150);
            })
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });


    it('when a mouse is selecting and moves to another cell it will add the second cell to the selcting items.', function (done) {
        MEPH.render('MEPH.table.SpreadSheet', 'scrollingtable').then(function (r) {
            var results = r.res;
            var app = r.app;

            var dom,
                scrollingtable = results.first().classInstance;
            scrollingtable.rowheaders = "1";
            scrollingtable.columnheaders = "1";
            scrollingtable.columns = "26";
            scrollingtable.rows = "1000";
            scrollingtable.canvas.dispatchEvent(MEPH.createEvent('mousedown', { pageX: 10, pageY: 10 }));
            scrollingtable.canvas.dispatchEvent(MEPH.createEvent('mousemove', { pageX: 100, pageY: 100 }));

            ///Assert
            return new Promise(function (r) {
                setTimeout(function () {
                    expect(scrollingtable.selecting).toBeTruthy();
                    expect(scrollingtable.selecting.start).toBeTruthy();
                    expect(scrollingtable.selecting.end).toBeTruthy();
                    expect(scrollingtable.state === MEPH.table.SpreadSheet.states.Selecting).toBeTruthy();
                    if (app) {
                        app.removeSpace();
                    }
                    r();
                }, 150);
            })
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });


    it('when a mouse is selecting and mouseup happens, the selecting is over, and the selected cells are add to a selected array.', function (done) {
        MEPH.render('MEPH.table.SpreadSheet', 'scrollingtable').then(function (r) {
            var results = r.res;
            var app = r.app;

            var dom,
                scrollingtable = results.first().classInstance;
            scrollingtable.rowheaders = "1";
            scrollingtable.columnheaders = "1";
            scrollingtable.columns = "26";
            scrollingtable.rows = "1000";
            scrollingtable.selected = [];
            scrollingtable.canvas.dispatchEvent(MEPH.createEvent('mousedown', { pageX: 10, pageY: 10 }));
            scrollingtable.canvas.dispatchEvent(MEPH.createEvent('mousemove', { pageX: 100, pageY: 100 }));
            scrollingtable.canvas.dispatchEvent(MEPH.createEvent('mouseup', {}));

            ///Assert
            return new Promise(function (r) {
                setTimeout(function () {
                    expect(scrollingtable.selecting).toBeFalsy();
                    expect(scrollingtable.selectedrange).toBeTruthy();
                    expect(scrollingtable.selected.length > 1).toBeTruthy();
                    expect(scrollingtable.state).toBeFalsy();
                    if (app) {
                        app.removeSpace();
                    }
                    r();
                }, 150);
            })
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });

    it('can get the most visible column', function () {
        var spreadsheet = new MEPH.table.SpreadSheet();

        var t = spreadsheet.qvisible(300, 0, [].interpolate(0, 10000, function (x) {
            return x * 100;
        }), null, 100);
        expect(t === 3).toBeTruthy();
    });

    it('can use an svg to draw content instead of a canvas ', function () {
        var spreadsheet = new MEPH.table.SpreadSheet();
        spreadsheet.enablesvg = true;
        expect(spreadsheet.svgrenderer).toBeTruthy();
    });

    it('calls the svg renderer when in svg mode for content.', function (done) {
        MEPH.render('MEPH.table.SpreadSheet', 'scrollingtable').then(function (r) {
            var results = r.res;
            var app = r.app;

            var dom,
                scrollingtable = results.first().classInstance;
            scrollingtable.rowheaders = "1";
            scrollingtable.enablesvg = true;
            scrollingtable.columnheaders = "1";
            scrollingtable.columns = "26";
            scrollingtable.rows = "1000";
            var called;
            scrollingtable.getMainContentInstructions = function () { return []; };
            scrollingtable.svgrenderer = {
                clear: function () {
                },
                draw: function () {
                    called = true;
                }
            }
            
            scrollingtable.updateCells();
            ///Assert
            return new Promise(function (r) {
                setTimeout(function () {
                    expect(called).toBeTruthy();
                    if (app) {
                        app.removeSpace();
                    }
                    r();
                }, 550);
            })
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });

});﻿describe("MEPH/table/Sequencer.spec.js", 'MEPH.table.Sequencer', function () {
    var Sequencer = MEPH.table.Sequencer;

    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it("can create a Sequencer", function () {
        //Arrange

        //Assert
        var input = new Sequencer();

        expect(input).toBeTruthy();

    });

    it('can render a Sequencer', function (done) {
        MEPH.render('MEPH.table.Sequencer', 'sequencer').then(function (r) {
            var results = r.res;
            var app = r.app;

            var dom,
                scrollingtable = results.first().classInstance;
            ///Assert
            dom = scrollingtable.getDomTemplate()[0]
            expect(dom).toBeTruthy();
            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        })
    });

    it('a sequencer requires data, that have certain properties, e.g. length, time, accessing them will be in the inheriting class', function () {
        var sequencer = new Sequencer();
        sequencer.time = {
            'function': function (x) {
                return x.time;
            }
        }
        sequencer.length = {
            'function': function (x) {
                return x.length;
            }
        }
        var called;
        sequencer.on('altered', function (type, args) {
            if (args.property === 'source') {
                called = true;
            }
        })
        sequencer.source = MEPH.Observable.observable([{ time: 0, length: 1 }]);
        expect(called).toBeTruthy();
    });

    it('when the source is altered the sequencer will update the screen', function () {
        var sequencer = new Sequencer();
        sequencer.time = {
            'function': function (x) {
                return x.time;
            }
        }
        sequencer.length = {
            'function': function (x) {
                return x.length;
            }
        }
        var called;
        sequencer.updateCells = function () {
            called = true;
        };
        sequencer.source = MEPH.Observable.observable([{ time: 0, length: 1 }]);
        expect(called).toBeTruthy();
    });

    it('the sequencer must have a time, length and lane function to get enough information for sequencing', function () {
        var sequence = new Sequencer();
        var result = sequence.getMainContentInstructions({});
        sequence.time = { 'function': function () { } }
        sequence.length = { 'function': function () { } }
        sequence.lane = { 'function': function () { } }
        result = sequence.getMainContentInstructions({});
        expect(result).toBeTruthy();
    });


    it('when an update occurs, visilble cells and rows are passed as arguments, so the sequencer must return a list o instructions' +
        'to render the source based on the visiblle cells', function () {
            var sequence = new Sequencer();
            sequence.time = { 'function': function (x) { return 1; } }
            sequence.length = { 'function': function (x) { return 1; } }
            sequence.lane = { 'function': function (x) { return 0; } }
            result = sequence.getMainContentInstructions({});
            expect(result).toBeTruthy();

            expect(result.length === 0).toBeTruthy();
        });


    it('when an update occurs, visilble cells and rows are passed as arguments, so the sequencer must return a list o instructions' +
        'to render the source based on the visiblle cells, returns 1 instruction', function () {
            var sequence = new Sequencer();
            sequence.time = { 'function': function (x) { return 0; } }
            sequence.length = { 'function': function (x) { return 1; } };
            sequence.lane = { 'function': function (x) { return 0; } };
            sequence.columnOffsets = [].interpolate(0, 10, function (x) { return 12; });
            sequence.rowOffsets = [].interpolate(0, 10, function (x) { return 12; });
            sequence.getCellPosition = function () {
                return { x: 0, y: 0 };
            }
            sequence.source = [{}];
            result = sequence.getMainContentInstructions({
                visibleRows: 1,
                visibleColumns: 1,
                row: 0,
                column: 0
            });

            expect(result).toBeTruthy();
            expect(result.length === 1).toBeTruthy();
        });

    it('adding to the source will cause an update', function (done) {
        var sequence = new Sequencer(),
            called;
        sequence.source = MEPH.Observable.observable([]);
        sequence.updateCells = function () {
            called = true;
        }


        sequence.source.push({});
        setTimeout(function (x) {
            expect(called).toBeTruthy();
            done();
        }, 10)
    });


    it('removing an item will cause an update', function (done) {
        var sequence = new Sequencer(),
            called;
        sequence.source = MEPH.Observable.observable([{}]);
        sequence.updateCells = function () {
            called = true;
        }

        sequence.source.pop();

        setTimeout(function (x) {
            expect(called).toBeTruthy();
            done();
        }, 10)
    });


    it('replacing the source with a new source , will strip event references from the first.', function () {
        var sequence = new Sequencer(),
            called;
        var source1 = MEPH.Observable.observable([{}]);

        sequence.source = source1;
        sequence.source = null;
        sequence.updateCells = function () {
            called = true;
        }

        expect(source1.hasOn(null, sequence)).toBeFalsy();

    });

    it('items in the source will be monitored for changes', function (done) {
        var sequence = new Sequencer(),

            called = 0;

        sequence.updateCells = function () {
            called++;
        }
        sequence.setActiveCell = function () { };;
        sequence.time = { 'function': function (x) { return 0; } }
        sequence.length = { 'function': function (x) { return 1; } };
        sequence.lane = { 'function': function (x) { return 0; } };
        sequence.columnOffsets = [].interpolate(0, 10, function (x) { return 12; });
        sequence.rowOffsets = [].interpolate(0, 10, function (x) { return 12; });
        sequence.getCellPosition = function () {
            return { x: 0, y: 0 };
        }
        var item = { prop: 'p' };
        MEPH.Observable.observable(item);
        var source1 = MEPH.Observable.observable([item]);
        sequence.source = source1;


        item.prop = '2';

        setTimeout(function (x) {
            expect(called).toBe(2);
            done();
        }, 130)

    });

    it('when the source changes the listeners will be removed from the items.', function (done) {
        var sequence = new Sequencer(),

            called = 0;

        sequence.updateCells = function () {
            called++;
        }
        sequence.setActiveCell = function () { };;

        var item = { prop: 'p' };
        MEPH.Observable.observable(item);
        var source1 = MEPH.Observable.observable([item]);
        sequence.source = source1;

        item.prop = '2';

        sequence.source = null;
        item.prop = '3';
        setTimeout(function (x) {
            expect(called).toBe(3);
            done();
        }, 1);
    });

    it('can get the item which the mouse is over', function () {
        var sequence = new Sequencer();
        sequence.time = { 'function': function (x) { return 0; } }
        sequence.length = { 'function': function (x) { return 1; } };
        sequence.lane = { 'function': function (x) { return 0; } };
        sequence.columnOffsets = [].interpolate(0, 10, function (x) { return 12; });
        sequence.rowOffsets = [].interpolate(0, 10, function (x) { return 12; });
        sequence.getCellPosition = function () {
            return { x: 0, y: 0 };
        }
        sequence.setActiveCell = function () { };;
        sequence.updateCells = function () { };
        var item = { prop: 'p' };
        MEPH.Observable.observable(item);
        var source1 = MEPH.Observable.observable([item]);
        sequence.source = source1;
        var type;
        var args;
        sequence.dispatchEvent = function (t, a) {
            type = t;
            args = a;
        }
        sequence.onMouseOverCell({}, {
            cells: [{ row: 0, column: 0 }],
            position: { x: 1, y: 1 }
        });

        expect(type).toBe('mouseoveritem');
        expect(args.items.contains(item)).toBeTruthy();
    });



    it('listens for a mouseovercell call.', function (done) {
        MEPH.render('MEPH.table.Sequencer', 'sequencer').then(function (r) {
            var results = r.res;
            var called, app = r.app;

            var dom,
                sequencer = results.first().classInstance;
            sequencer.updateCells = function () {
            };
            sequencer.setActiveCell = function () { };;
            sequencer.onMouseOverCell = function () {
                called = true
            }
            ///Assert
            sequencer.canvas.dispatchEvent(MEPH.createEvent('mouseovercell', {}))
            expect(called).toBeTruthy();
            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        })
    });

    it('listens for a mouseovercell header call.', function (done) {
        MEPH.render('MEPH.table.Sequencer', 'sequencer').then(function (r) {
            var results = r.res;
            var called, app = r.app;

            var dom,
                sequencer = results.first().classInstance;
            sequencer.updateCells = function () {
            };
            sequencer.setActiveCell = function () { };;
            sequencer.onMouseOverCell = function () {
                called = true
            }
            ///Assert
            sequencer.topheader.dispatchEvent(MEPH.createEvent('mouseovercelltop', {}))
            expect(called).toBeTruthy();
            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });


    it('listens for a mouseovercell header call.', function (done) {
        MEPH.render('MEPH.table.Sequencer', 'sequencer').then(function (r) {
            var results = r.res;
            var called, app = r.app;

            var dom,
                sequencer = results.first().classInstance;
            sequencer.updateCells = function () {
            };
            sequencer.setActiveCell = function () { };;
            sequencer.onMouseOverCell = function () {
                called = true
            }
            ///Assert
            sequencer.leftheader.dispatchEvent(MEPH.createEvent('mouseovercellleft', {}))
            expect(called).toBeTruthy();
            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        })
    });

    it('to grab an item in the sequence, it must have a settime function', function () {
        var sequence = new Sequencer();

        sequence.updateCells = function () { }
        sequence.setActiveCell = function () { };;
        var item = { prop: 'p' };
        MEPH.Observable.observable(item);
        var source1 = MEPH.Observable.observable([item]);
        sequence.source = source1;

        var result = sequence.grab(item);

        expect(sequence.state).toBeFalsy();
        expect(result).toBeFalsy();
    });

    it('when grabbing an item the state is set to grabbing, and the grabbed item is set on the me.grabbeditem property', function () {
        var sequence = new Sequencer();
        sequence.setActiveCell = function () { };;
        sequence.settime = { 'function': function () { } }
        sequence.updateCells = function () { }
        var item = { prop: 'p' };
        MEPH.Observable.observable(item);
        var source1 = MEPH.Observable.observable([item]);
        sequence.source = source1;

        var result = sequence.grab(item);

        expect(sequence.grabbeditem === item).toBeTruthy();
        expect(sequence.state).toBeTruthy();
        expect(result).toBeTruthy();

    });

    it('when the state is grabbing, the grabrep will be moved, and follow the mouse but only in its lane on mousemovecell', function (done) {
        MEPH.render('MEPH.table.Sequencer', 'sequencer').then(function (r) {
            var results = r.res;
            var called, app = r.app;

            var dom,
                called,
                sequencer = results.first().classInstance;
            sequencer.updateCells = function () { };
            sequencer.time = {
                'function': function (x) { return 0; }
            };
            sequencer.setttime = {
                'function': function () {
                }
            };
            sequencer.setActiveCell = function () { };;
            sequencer.length = { 'function': function (x) { return 1; } };
            sequencer.lane = { 'function': function (x) { return 0; } };
            sequencer.columnOffsets = [].interpolate(0, 10, function (x) { return 12; });
            sequencer.rowOffsets = [].interpolate(0, 10, function (x) { return 12; });
            sequencer.getCellPosition = function () {
                return { x: 0, y: 0 };
            }
            sequencer.onMouseOverCell = function () { }
            ///Assert
            sequencer.state = MEPH.table.Sequencer.grabbing;
            sequencer.positionGrabRep = function () {
                called = true;
            }
            var evt = MEPH.createEvent('mousemovecell', {
                cells: [{
                    row: 1,
                    column: 1
                }],
                position: {
                    x: 10,
                    y: 10
                }
            });

            sequencer.canvas.dispatchEvent(evt);
            expect(sequencer.lastgrabposition).toBeTruthy();
            expect(called).toBeTruthy();
            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });


    it('can set the grabreps position and size. ', function (done) {
        MEPH.render('MEPH.table.Sequencer', 'sequencer').then(function (r) {
            var results = r.res;
            var called, app = r.app;

            var dom,
                called,
                sequencer = results.first().classInstance;

            sequencer.positionGrabRep({ x: 1, y: 2, width: 10, height: 10 });

            expect(sequencer.grabrep.clientWidth == 10).toBeTruthy();
            expect(sequencer.grabrep.clientHeight == 10).toBeTruthy();
            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });

    it('can ungrab an item', function () {

        MEPH.render('MEPH.table.Sequencer', 'sequencer').then(function (r) {
            var results = r.res;
            var called, app = r.app;

            var dom,
                called,
                sequence = results.first().classInstance;
            sequence.setActiveCell = function () { };;
            sequence.settime = { 'function': function () { called = true; } }
            sequence.columnOffsets = [].interpolate(0, 10, function (x) { return 12; });
            sequence.rowOffsets = [].interpolate(0, 10, function (x) { return 12; });
            sequence.getCellPosition = function () {
                return { x: 0, y: 0 };
            }
            sequence.updateCells = function () { }
            var item = { prop: 'p' };
            MEPH.Observable.observable(item);
            var source1 = MEPH.Observable.observable([item]);
            sequence.source = source1;
            sequence.getRelativeColum = function () {
                return 0;
            }
            sequence.getCellColumnPosition = function () {
                return 0;
            }
            var result = sequence.grab(item);
            sequence.lastgrabposition = { x: 1, y: 1 };
            expect(sequence.grabbeditem === item).toBeTruthy();
            expect(sequence.state).toBeTruthy();
            expect(result).toBeTruthy();


            sequence.ungrab(item);
            expect(called).toBeTruthy();
            expect(sequence.grabbeditem).toBe(null);
            expect(sequence.state).toBe(null);
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });

    });

    it('on mouse over item, an item is cached as the last hovered item', function (done) {
        MEPH.render('MEPH.table.Sequencer', 'sequencer').then(function (r) {
            var results = r.res;
            var called, app = r.app;

            var dom,
                called,
                sequence = results.first().classInstance;

            sequence.setActiveCell = function () { };;
            sequence.settime = { 'function': function () { called = true; } }
            sequence.columnOffsets = [].interpolate(0, 10, function (x) { return 12; });
            sequence.rowOffsets = [].interpolate(0, 10, function (x) { return 12; });
            sequence.getCellPosition = function () {
                return { x: 0, y: 0 };
            }
            sequence.updateCells = function () { }
            var item = { prop: 'p' };
            MEPH.Observable.observable(item);
            var source1 = MEPH.Observable.observable([item]);
            sequence.source = source1;


            sequence.dispatchEvent('mouseoveritem', {
                items: [item], header: null
            }, sequence.canvas);

            expect(sequence.lastitem).toBe(item);

        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });

    it('can set a key to use for grabbing an item.', function (done) {
        MEPH.render('MEPH.table.Sequencer', 'sequencer').then(function (r) {
            var results = r.res;
            var called, app = r.app;

            var dom,
                called,
                sequence = results.first().classInstance;

            sequence.setActiveCell = function () { };;
            sequence.settime = { 'function': function () { called = true; } }
            sequence.columnOffsets = [].interpolate(0, 10, function (x) { return 12; });
            sequence.rowOffsets = [].interpolate(0, 10, function (x) { return 12; });
            sequence.getCellPosition = function () {
                return { x: 0, y: 0 };
            }
            sequence.updateCells = function () { }
            var item = { prop: 'p' };
            MEPH.Observable.observable(item);
            var source1 = MEPH.Observable.observable([item]);
            sequence.source = source1;


            sequence.dispatchEvent('mouseoveritem', {
                items: [item], header: null
            }, sequence.canvas);

            expect(sequence.lastitem).toBe(item);

            sequence.canvas.dispatchEvent(MEPH.createEvent('keypress', { which: 71 }));

            expect(sequence.grabbeditem).toBeTruthy();

        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });

});﻿describe("MEPH/synchronization/SyncObject.spec.js", function () {

    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create a synchobject.', function (done) {
        MEPH.create('MEPH.synchronization.SyncObject').then(function ($class) {
            var syncobject = new $class();
            expect(syncobject).theTruth('no synchobject was created');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });


    it('can create a synchobject object.', function (done) {
        MEPH.create('MEPH.synchronization.SyncObject').then(function ($class) {
            var syncobject = new $class();

            //Act
            var result = syncobject.createObj({
                properties: {
                    prop1: [],
                    prop2: null
                }
            });

            //Assert
            expect(result).theTruth('no result was created');
            expect(Array.isArray(result.prop1)).theTruth('was not an array, as expected');
            expect(result.prop2 === null).theTruth('prop2 was not null');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });


    it('can create an object with properties ', function (done) {
        MEPH.create('MEPH.synchronization.SyncObject').then(function ($class) {
            var syncobject = new $class();

            //Act
            var result = syncobject.createObj({ properties: { prop1: null, prop2: null } });

            //Assert
            expect(result).toBeTruthy();
            expect(result.prop1 === null).theTruth('the property should be null');
            expect(result.prop2 === null).theTruth('the property should be null');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it('create an object with properties and set arrays to observable ', function (done) {
        MEPH.create('MEPH.synchronization.SyncObject').then(function ($class) {
            var syncobject = new $class();

            //Act
            var result = syncobject.createObj({ properties: { arrayprop: null } });

            result.arrayprop = [];
            //Assert
            expect(result.arrayprop.isObservableCollection).theTruth('the arrayprop was not an observable collection.');;
            expect(Array.isArray(result.arrayprop)).theTruth('the arrayprop was not an array');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it('can create an object, and the initial values are set', function (done) {
        MEPH.create('MEPH.synchronization.SyncObject').then(function ($class) {

            //Arrange
            var syncobject = new $class();


            //Act
            var result = syncobject.createObj({
                properties: {
                    name: 'name'
                }
            });

            //Assert
            expect(result.name === 'name').theTruth('the name was not as expected');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });;
    });

    it('objects notify when properties are set', function (done) {
        MEPH.create('MEPH.synchronization.SyncObject').then(function ($class) {
            //Arrange
            var syncobject = new $class();
            var result = syncobject.createObj({
                properties: {
                    name: 'name'
                }
            });
            var old, neww;
            //Act
            result.on('setname', function (type, options) {
                old = options.old;
                neww = options.new;
            })
            result.name = 'changed';

            //Assert
            expect(result.name == 'changed').theTruth('the name was not as expected');
            expect(old == 'name').theTruth('the old name was not as expected');
            expect(neww == 'changed').theTruth('the new name was not as expected');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });;
    });

    it('when setting an object, observable is applied', function (done) {
        MEPH.create('MEPH.synchronization.SyncObject').then(function ($class) {
            //Arrange
            var syncobject = new $class();

            //Act
            var result = syncobject.createObj({
                properties: {
                    name: 'name',
                    obj: null
                }
            });
            result.obj = { newobject: null };

            //Assert
            expect(MEPH.util.Observable.isObservable(result.obj)).theTruth('the object was not observable');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });;
    });

    it('multi levels deep will throw set events', function (done) {
        MEPH.create('MEPH.synchronization.SyncObject').then(function ($class) {
            //Arrange
            var syncobject = new $class();
            var result = syncobject.createObj({
                properties: {
                    name: 'name',
                    obj: null
                }
            });

            result.on('altered', function (type, options) {
                path = options.path;
            });

            result.obj = {
                object: {
                    level1: {
                        level2: {
                            name: ''
                        }
                    }
                }
            };
            var path;
            //Act
            result.obj.object.level1.level2.name = 'name';

            //Assert
            expect(path === 'obj.object.level1.level2.name').theTruth('the path wasnt as expected');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });;
    });

    it('get path of jobject change with old and new args', function (done) {
        MEPH.create('MEPH.synchronization.SyncObject').then(function ($class) {
            //Arrange
            var syncobject = new $class();
            var result = syncobject.createObj({
                properties: {
                    name: 'name',
                    obj: null
                }
            });
            result.obj = {
                object: {
                    level1: {
                        level2: {
                            name: null
                        }
                    }
                }
            };

            //Act
            var path;
            var old;
            var value;
            result.on('altered', function (type, options) {
                path = options.path;
                value = options.value;
                old = options.old;
            });
            result.obj.object.level1.level2.name = 'name';
            //Assert
            expect(value == 'name').theTruth('the value was not as expected');
            expect(old == null).theTruth('old was not as expected');
            expect(path === 'obj.object.level1.level2.name').theTruth('the path was not as expected');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });;
    });


    it('get path of jobject change with old and new args', function (done) {
        MEPH.create('MEPH.synchronization.SyncObject').then(function ($class) {
            //Arrange
            var syncobject = new $class();
            var result = syncobject.createObj({
                properties: {
                    name: 'name',
                    obj: null
                }
            });
            result.obj = {
                object: {
                    level1: {
                        level2: {
                            name: null
                        }
                    }
                }
            };

            //Act
            var path;
            var old;
            var value;
            result.on('altered', function (type, options) {
                path = options.path;
                value = options.value;
                old = options.old;
            });
            result.obj.object.level1.level2.name = {
                value: 'name'
            };
            //Assert
            expect(value.value == 'name').theTruth('value is not equal to name');
            expect(old == null).theTruth('old was not null');
            expect(path === 'obj.object.level1.level2.name').theTruth('the path was not correct');

            result.obj.object.level1.level2.name.value = 'newname';

            expect(value == 'newname').theTruth('value was not equal to newname');
            expect(old == 'name').theTruth('old was not equal to name');
            expect(path === 'obj.object.level1.level2.name.value').theTruth('the path was not correct.');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });;
    });
    it('get path of jobject change with old and new args', function (done) {
        MEPH.create('MEPH.synchronization.SyncObject').then(function ($class) {
            //Arrange
            var syncobject = new $class();
            var result = syncobject.createObj({
                properties: {
                    name: 'name',
                    obj: null
                }
            });


            //Act
            var moves = [];
            result.on('altered', function (type, options) {
                moves.push({
                    path: options.path,
                    value: options.value,
                    old: options.old
                });
            });

            result.obj = { level: null, level2: null };
            result.obj.level = {};
            result.obj.level2 = {};

            //Assert
            expect(moves.length == 3).theTruth('the number of moves was incorrect');

        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });;
    });
    it('jsync object has id', function (done) {
        MEPH.create('MEPH.synchronization.SyncObject').then(function ($class) {
            //Arrange
            var syncobject = new $class();
            var result = syncobject.createObj({
                properties: {
                    name: 'name',
                    obj: null
                }
            });

            //Act

            //Assert
            expect(result.jsyncId()).theTruth('there was a problem with the jsyncId');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });;
    });
    it('can Create jsync object', function (done) {
        MEPH.create('MEPH.synchronization.SyncObject').then(function ($class) {
            //Arrange
            var syncobject = new $class();

            //Act
            var obj = syncobject.createObj();

            //Assert
            expect(obj).toBeTruthy();
            expect(obj.jsyncId()).toBeTruthy();

        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });;
    });
    it('can Create jsync object and add property', function (done) {
        MEPH.create('MEPH.synchronization.SyncObject').then(function ($class) {
            //Arrange
            var syncobject = new $class();
            var obj = syncobject.createObj();

            //Act
            var moves = [];
            obj.on('altered', function (type, options) {
                moves.push({
                    path: options.path,
                    value: options.new,
                    old: options.old
                });
            });
            obj.property = 'property';
            obj[MEPH.jsync].sweep();
            obj.property = 'newprop';
            //Assert
            expect(obj.jsyncId()).toBeTruthy();
            expect(moves.length == 1).toBeTruthy();
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });;
    });
    it('check that when adding a complex object, multiple creation steps are fired', function (done) {
        MEPH.create('MEPH.synchronization.SyncObject').then(function ($class) {
            //Arrange
            var syncobject = new $class();
            var result = syncobject.createObj({
                properties: {
                    name: 'name',
                    obj: null
                }
            });
            var moves = [];
            result.on('created', function (type, options) {
                moves.push(options);
            });
            result.on('altered', function (type, options) {
                moves.push(options);
            });
            result.obj = {
                object: {
                    level1: {
                        level2: {
                            name: null
                        }
                    }
                }
            };

            //Act
            result.obj.object.level1.level2.name = 'name';
            //Assert
            expect(moves.length === 6).theTruth('the number of moves was incorrect');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });;
    });
    it('add created objects to a new object.', function (done) {
        MEPH.create('MEPH.synchronization.SyncObject').then(function ($class) {
            ///Arrange
            var syncobject = new $class();
            var result = syncobject.createObj();
            var moves = [];
            result.on('created', function (type, options) {
                moves.push(options);
            })
            result.on('altered', function (type, options) {
                moves.push(options);
            });
            result.property = null;
            var second = syncobject.createObj();
            second.prop2 = 'two';
            result[MEPH.jsync].sweep();
            second[MEPH.jsync].sweep();

            //Act
            result.property = second;

            //Assert

            expect(moves.length == 1).theTruth('wrong number of moves ');

        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });;
    });
    it('undo move.', function (done) {
        MEPH.create('MEPH.synchronization.SyncObject').then(function ($class) {
            //Arrange
            var syncobject = new $class();
            var result = syncobject.createObj();
            var moves = [];
            result.on('created', function (type, options) {
                moves.push(options);
            });
            result.on('altered', function (type, options) { moves.push(options); });
            result.property = 'prop1';
            result[MEPH.jsync].sweep();
            result.property = 'prop2';
            result.property = 'prop3';
            result.property = 'prop4';

            //Act

            var movereuslt = result[MEPH.jsync].undo(moves.last());

            //Assert
            expect(movereuslt).toBeTruthy();
            expect(result.property === 'prop3').theTruth('the property was not correct set ');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });;
    });
    it('return false if moves current value doesnt equal the value.', function (done) {
        MEPH.create('MEPH.synchronization.SyncObject').then(function ($class) {
            //Arrange
            var syncobject = new $class();
            var result = syncobject.createObj();
            var moves = [];
            result.on('created', function (type, options) { moves.push(options); });
            result.on('altered', function (type, options) { moves.push(options); });
            result.property = 'prop1';
            result[MEPH.jsync].sweep();
            result.property = 'prop2';
            result.property = 'prop3';
            result.property = 'prop4';
            //Act
            var failed = result[MEPH.jsync].undo(moves[0]);
            //Assert
            expect(!failed).toBeTruthy();
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });;
    });
    it('objects of type object are considered the same value if their ids match.', function (done) {
        MEPH.create('MEPH.synchronization.SyncObject').then(function ($class) {
            //Arrange
            var syncobject = new $class();
            var result = syncobject.createObj();
            var otherobject = syncobject.createObj();
            var moves = [];
            result.on('created', function (type, options) { moves.push(options); });
            result.on('altered', function (type, options) { moves.push(options); });
            result.property = 'prop1';
            result[MEPH.jsync].sweep();
            result.property = otherobject;
            var lastmove = moves.last();
            lastmove.new = MEPH.clone(otherobject);
            //Act
            var move_result = result[MEPH.jsync].undo(lastmove);

            //Assert
            expect(move_result).theTruth('move results was not true');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });;
    });
    it('undo a few moves.', function (done) {
        MEPH.create('MEPH.synchronization.SyncObject').then(function ($class) {
            //Arrange
            var syncobject = new $class();
            var result = syncobject.createObj();
            var moves = [];
            result.on('created', function (type, options) { moves.push(options); });
            result.on('altered', function (type, options) { moves.push(options); });
            result.property = 'prop1';
            result[MEPH.jsync].sweep();
            result.property = 'prop2';
            result.property = 'prop3';
            result.property = 'prop4';
            //Act
            var failed = moves.reverse().all(function (move) {
                return result[MEPH.jsync].undo(move);
            });

            //Assert
            expect(!failed).toBeTruthy();
            expect(result.property === 'prop1').theTruth('property was not equal to prop1');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });;
    });
    it('jsync objects will fire created-object event.', function (done) {
        MEPH.create('MEPH.synchronization.SyncObject').then(function ($class) {
            //Arrange
            var syncobject = new $class();
            var objectadded;
            syncobject.on('created-object', function () { objectadded = true; });
            //Act
            syncobject.createObj();
            //Assert
            expect(objectadded).toBeTruthy();
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });;
    });
});
﻿describe("MEPH/synchronization/SyncMembrane.spec.js", function () {
    var createSyncGroup,
        createSyncGroupWithSendControl;
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create a syncmembrane.', function (done) {
        MEPH.create('MEPH.synchronization.SyncMembrane').then(function ($class) {
            var syncmembrane = new $class();
            expect(syncmembrane).theTruth('no syncmembrane was created');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it('can listen to events from jobjects.', function (done) {
        MEPH.create('MEPH.synchronization.SyncMembrane').then(function ($class) {
            var syncmembrane = new $class();
            //Arrange 
            var jobject = new MEPH.synchronization.SyncObject();
            var result = jobject.createObj();
            result.property = 'prop1';
            result[MEPH.jsync].sweep();

            //Act
            syncmembrane.monitor(result);

            //Assert
            expect(syncmembrane.monitoredObject.length === 1);
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });
    it('event manager has an Id.', function (done) {
        MEPH.create('MEPH.synchronization.SyncMembrane').then(function ($class) {
            //Arrange 
            var syncmembrane = new $class();

            //Act

            //Assert
            expect(syncmembrane.Id).theTruth('syncmembrane has no id');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });
    it('add listeners to monitored objects.', function (done) {
        MEPH.create('MEPH.synchronization.SyncMembrane').then(function ($class) {
            //Arrange
            var jem = new $class();
            var jobject = new MEPH.synchronization.SyncObject();
            var result = jobject.createObj();
            result.property = 'prop1';
            result[MEPH.jsync].sweep();

            //Act
            jem.monitor(result);
            result.property = 'changed';

            //Assert

            expect(jem.getEvents()).theTruth('no events');
            expect(jem.getEvents().length === 1).theTruth('wrong number of events');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });
    it('add event dependency.', function (done) {
        MEPH.create('MEPH.synchronization.SyncMembrane').then(function ($class) {
            //Arrange
            var jem = new $class();
            var jobject = new MEPH.synchronization.SyncObject();
            var result = jobject.createObj();
            result.property = 'prop';
            result[MEPH.jsync].sweep();
            jem.monitor(result);
            result.property = "prop1"
            result.property = "prop2"

            //Act
            var events = jem.getEvents();
            var event0 = events[0];
            var event1 = events[1];
            //Assert
            expect(event0.id === event1.parentEventId).theTruth(' the id didnt make the parent id');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });
    it('jsynceventmanagers send messages through a communications channel.', function (done) {
        MEPH.create('MEPH.synchronization.SyncMembrane').then(function ($class) {
            //Arrange
            var jem = new $class();

            //Act
            var receivemessage;
            jem.channel = function (message) { receivemessage = message; }
            jem.heartBeat();

            //Assert
            expect(receivemessage).theTruth('no heartbeat received');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });
    it('jsynceventmanagers will communicate their presence to each other.', function (done) {
        MEPH.create('MEPH.synchronization.SyncMembrane').then(function ($class) {
            var jem1 = new $class();
            var jem2 = new $class();

            //Arrange
            var channel = {
                send2: function (message) {
                    jem1.receive(message);
                },
                send1: function (message) {
                    jem2.receive(message);
                }
            };
            //Act
            jem1.channel = channel.send1;
            jem2.channel = channel.send2;

            jem1.heartBeat();

            //Assert
            expect(jem1.eventManagers).toBeTruthy();
            expect(jem1.eventManagers.length === 1).theTruth('incorrect number of eventmanagers');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });
    it('when a syncmanager is added to the list, it will be contacted with a heartbeat', function (done) {
        MEPH.create('MEPH.synchronization.SyncMembrane').then(function ($class) {
            var jem1 = new $class();
            var jem2 = new $class();
            //Arrange
            var channel = {
                send2: function (message) {
                    jem1.receive(message);
                },
                send1: function (message) {
                    jem2.receive(message);
                }
            };
            //Act
            jem1.channel = channel.send1;
            jem2.channel = channel.send2;

            jem1.heartBeat();

            //Assert
            expect(jem1.eventManagers);
            expect(jem1.eventManagers.length === 1);
            expect(jem2.eventManagers);
            expect(jem2.eventManagers.length === 1);
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });
    it('on manager death, it is removed from eventManagers.', function (done) {
        MEPH.create('MEPH.synchronization.SyncMembrane').then(function ($class) {
            var jem1 = new $class();
            //Arrange
            var id = MEPH.GUID();
            jem1.manageHeartBeats({ EventManagerId: id });

            //Act
            jem1.fire('manager-death', { id: id });

            //Assert
            expect(jem1.eventManagers).toBeTruthy();
            expect(jem1.eventManagers.length === 0).theTruth('there shouldnt be any eventmanagers in the list ');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });
    it('managers can create sync objects and automatically monitor all create objects.', function (done) {
        MEPH.create('MEPH.synchronization.SyncMembrane').then(function ($class) {
            var manager = new $class();
            //Arrange
            var syncobject = manager.createSyncObject();
            var object = syncobject.createObj();
            //Act

            //Assert
            expect(manager.monitoredEvents.length === 1).theTruth('the number of events is incorrect');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });
    it('managers can create sync objects and automatically monitor all create objects and see changes.', function (done) {
        MEPH.create('MEPH.synchronization.SyncMembrane').then(function ($class) {
            //Arrange
            var manager = new $class();
            var syncobject = manager.createSyncObject();
            //Act
            var object = syncobject.createObj();
            object.property = 'asdf';
            object[MEPH.jsync].sweep();
            object.property = "property";
            //Assert
            expect(manager.monitoredEvents.length === 2).theTruth('the number of events was incorrect');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    createSyncGroup = function () {
        var jem1 = new MEPH.synchronization.SyncMembrane();
        var jem2 = new MEPH.synchronization.SyncMembrane();
        var channel = {
            send2: function (message) {
                var reult = JSON.stringify(message);
                var finalmessage = JSON.parse(reult);
                jem1.receive(finalmessage);
            },
            send1: function (message) {
                var reult = JSON.stringify(message);
                var finalmessage = JSON.parse(reult);
                jem2.receive(finalmessage);
            }
        };
        //Act
        jem1.channel = channel.send1;
        jem2.channel = channel.send2;

        jem1.heartBeat();
        return {
            managers: [jem1, jem2]
        }
    };
    it('when managers get events they are sent to all known managers.', function (done) {
        MEPH.create('MEPH.synchronization.SyncMembrane').then(function ($class) {
            //Arrange
            var setup = createSyncGroup();
            var manager1 = setup.managers[0];
            var manager2 = setup.managers[1];
            var jobject = manager1.createSyncObject();
            var result = jobject.createObj();

            //Act

            result.property = 'asdfasd';
            result[MEPH.jsync].sweep();
            result.property = 'asdfa';

            //Assert
            expect(manager2.monitoredEvents.length == 2).theTruth('The monitored events are the incorrect length');

        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });
    it('a lot of events will be sent .', function (done) {
        MEPH.create('MEPH.synchronization.SyncMembrane').then(function ($class) {
            //Arrange
            var setup = createSyncGroup();
            var manager1 = setup.managers[0];
            var manager2 = setup.managers[1];
            var jobject = manager1.createSyncObject();
            var result = jobject.createObj();

            //Act
            result.property = 'asdfasd';
            result[MEPH.jsync].sweep();
            var count = 10;
            [].interpolate(0, count, function (i) {
                result.property = 'asd' + i;
            });
            
            //Assert
            expect(manager2.monitoredEvents.length == (count + 1)).theTruth('didnt get the expected number of events');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });
    it('events are applied after they are received.', function (done) {
        MEPH.create('MEPH.synchronization.SyncMembrane').then(function ($class) {
            //Arrange
            var setup = createSyncGroup();
            var manager1 = setup.managers[0];
            var manager2 = setup.managers[1];
            var jobject = manager1.createSyncObject();
            var result = jobject.createObj();

            //Act
            result.property = 'asdfasd';
            result[MEPH.jsync].sweep();
            var count = 1;
            result.property = 'asd' + 0;
            var object_id = manager2.monitoredEvents[0].objId;
            var object = manager2.getMonitoredObject(object_id);
            //Assert
            expect(object.property === result.property).theTruth('the property was not equal');
            expect(manager2.monitoredEvents.length == (count + 1)).theTruth(' the number of events was wrong');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });
    it('when new instances are added they are sent to the second manager.', function (done) {
        MEPH.create('MEPH.synchronization.SyncMembrane').then(function ($class) {
            //Arrange
            var setup = createSyncGroup();
            var manager1 = setup.managers[0];
            var manager2 = setup.managers[1];
            var jobject = manager1.createSyncObject();
            var result = jobject.createObj();

            //Act
            result.property = 'asdfasd';
            result[MEPH.jsync].sweep();
            var count = 1;
            result.property = { obj: 'asd' + 0 };
            var object_id = manager2.monitoredEvents[0].objId;
            var object = manager2.getMonitoredObject(object_id);

            //Assert
            expect(manager2.monitoredEvents.length == ((4 * count))).toBeTruthy();
            expect(manager2.monitoredObject.length == (count + 1)).toBeTruthy();
            expect(manager2.monitoredObject[0].property.obj === manager2.monitoredObject[count].obj).toBeTruthy();
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });
    it('events should go both ways.', function (done) {
        MEPH.create('MEPH.synchronization.SyncMembrane').then(function ($class) {
            //Arrange
            var setup = createSyncGroup();
            var manager1 = setup.managers[0];
            var manager2 = setup.managers[1];
            var jobject = manager1.createSyncObject();
            var result = jobject.createObj();

            //Act
            result.property = 'dafsd';
            result[MEPH.jsync].sweep();
            result.property = { did: 'asdfasd' };
            var count = 20;
            var object_id = manager2.monitoredEvents[0].objId;
            var object = manager2.getMonitoredObject(object_id);

            result.property.did = 'asd';
            object.property.did = 'reassigned';

            //Assert
            expect(object.property.did === result.property.did).toBeTruthy();
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });
    it('events should o both ways and be able to set new objects freely.', function (done) {
        MEPH.create('MEPH.synchronization.SyncMembrane').then(function ($class) {
            //Arrange
            var setup = createSyncGroup();
            var manager1 = setup.managers[0];
            var manager2 = setup.managers[1];
            var jobject = manager1.createSyncObject();
            var result = jobject.createObj();

            //Act
            result.property = 'dafsd';
            result[MEPH.jsync].sweep();
            result.property = { did: 'asdfasd' };
            var count = 20;
            var object_id = manager2.monitoredEvents[0].objId;
            var object = manager2.getMonitoredObject(object_id);

            result.property.did = 'asd';
            expect(result.property.did === object.property.did).toBeTruthy();
            object.property.did = 'reassigned';
            expect(result.property.did === object.property.did).toBeTruthy();
            object.property.did = 'reassig3ned';
            expect(result.property.did === object.property.did).toBeTruthy();
            object.property.did = { OASD: 'reassig3ned' };
            expect(result.property.did.OASD === object.property.did.OASD).toBeTruthy();
            object.property.did.asdf = 'reassig3ned';
            object.property.did[MEPH.jsync].sweep();
            object.property.did.asdf = 'resassig3ned';
            expect(result.property.did.asdf === object.property.did.asdf).toBeTruthy();
            //Assert
            expect(object.property.did.jsyncId() === result.property.did.jsyncId()).toBeTruthy();
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });
    it('should have equal values on creation.', function (done) {
        MEPH.create('MEPH.synchronization.SyncMembrane').then(function ($class) {
            //Arrange
            var setup = createSyncGroup();
            var manager1 = setup.managers[0];
            var manager2 = setup.managers[1];
            //result.property = "prop1";
            //Act
            var jobject = manager1.createSyncObject();
            var result = jobject.createObj({ properties: { property: 'property' } });
            var object_id = manager2.monitoredEvents[0].objId;
            var object = manager2.getMonitoredObject(object_id);
            //Assert
            expect(object.property == result.property).toBeTruthy();
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    createSyncGroupWithSendControl = function () {
        var jem1 = new MEPH.synchronization.SyncMembrane();
        var jem2 = new MEPH.synchronization.SyncMembrane();
        var jem1messages = [];
        var jem2messages = [];
        var channel = {
            jem1Messages: jem1messages,
            jem2Messages: jem2messages,
            send2: function (message) {
                var reult = JSON.stringify(message);
                var finalmessage = JSON.parse(reult);
                jem1messages.push(finalmessage);
            },
            send1: function (message) {
                var reult = JSON.stringify(message);
                var finalmessage = JSON.parse(reult);
                jem2messages.push(finalmessage);
            },
            pump1: function () {
                var message = jem1messages.shift();
                if (message)
                    jem2.receive(message);
            },
            pump2: function () {
                var message = jem2messages.shift();
                if (message)
                    jem1.receive(message);
            }
        }
        jem1.channel = channel.send2;
        jem2.channel = channel.send1;

        return {
            managers: [jem1, jem2],
            channel: channel
        }
    };
    it('should detect conflicts.', function (done) {
        MEPH.create('MEPH.synchronization.SyncMembrane').then(function ($class) {
            //Arrange
            var setup = createSyncGroupWithSendControl();
            var manager1 = setup.managers[0];
            var manager2 = setup.managers[1];
            var jobject = manager1.createSyncObject();
            var result = jobject.createObj({ properties: { property: 'property' } });
            var manager1_conflicts = 0;
            manager1.on('conflict-detected', function () {
                manager1_conflicts++;
            });
            var manager2_conflicts = 0;
            manager2.on('conflict-detected', function () {
                manager2_conflicts++;
            });


            setup.channel.pump1();
            //setup.channel.pump2();
            var object_id = manager2.monitoredEvents[0].objId;
            var object = manager2.getMonitoredObject(object_id);
            //Act
            object.property = "aahs";
            result.property = "afasd";
            object.property = "asdf2";
            setup.channel.pump1();
            setup.channel.pump2();
            object.property = "asdf";
            result.property = "afasd4";
            setup.channel.pump1();
            setup.channel.pump2();

            //Assert
            expect(manager1_conflicts).toBeTruthy();
            expect(manager2_conflicts).toBeTruthy();
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });
    it('simple setup for conflict detection.', function (done) {
        MEPH.create('MEPH.synchronization.SyncMembrane').then(function ($class) {
            //Arrange
            var evnt = {
                "evnt": {
                    "value": {
                        "$_$_$-$$$$$$$$$$id": "1170066d-55ba-4897-9a47-e304b9ef7aff",
                        "property": "afasd4"
                    },
                    "type": "created-object"
                },
                "local": false,
                "executed": true,
                "objId": "1170066d-55ba-4897-9a47-e304b9ef7aff",
                "id": "42589c76-fe87-4d5b-a6b3-ce5a466d4fc8",
                "parentEventId": null
            }
            var evnt2 = MEPH.clone(evnt);
            evnt2.id = MEPH.GUID();
            var manager1_conflicts = 0;
            var jem2 = new MEPH.synchronization.SyncMembrane();


            //Act
            jem2.monitoredEvents.push(evnt);
            jem2.monitoredEvents.push(evnt2);
            manager1_conflicts = jem2.causesConflict();

            //Assert
            expect(manager1_conflicts.length === 1).toBeTruthy();
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it('setting a conflict negotiator.', function (done) {
        MEPH.create('MEPH.synchronization.SyncMembrane').then(function ($class) {
            //Arrange
            var jem = new MEPH.synchronization.SyncMembrane();
            var nego = new MEPH.synchronization.SyncConflictNegotiator();

            //Act
            jem.setNegotiator(nego);

            //Assert
            expect(nego.getManager() === jem).theTruth('they are not equal.');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

});﻿describe("MEPH/synchronization/SyncConflictNegotiator.spec.js", function () {
    var createSyncGroup, createConflictReport,
        createConflictingEvents, createSyncGroupWithSendControl;
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create a syncmembrane.', function (done) {
        MEPH.create('MEPH.synchronization.SyncConflictNegotiator').then(function ($class) {
            var negotiator = new $class();
            //Arrange

            //Assert
            expect(negotiator);
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it('sets event manager and listens to roll call.', function (done) {
        MEPH.requires('MEPH.synchronization.SyncMembrane').then(function () {
            return MEPH.create('MEPH.synchronization.SyncConflictNegotiator').then(function ($class) {
                var negotiator = new $class();
                //Arrange 
                var jem1 = new MEPH.synchronization.SyncMembrane();

                //Act
                negotiator.setManager(jem1);

                //Assert
                expect(negotiator.getManager() === jem1);
                expect(negotiator.getManager().eventManagers.hasOn('change'));
            }).catch(function (error) {
                expect(error).caught();
            }).then(function () {
                done();
            });
        });
    });

    createSyncGroupWithSendControl = function () {
        var jem1 = new MEPH.synchronization.SyncMembrane();
        var jem2 = new MEPH.synchronization.SyncMembrane();

        var negotiator1 = new MEPH.synchronization.SyncConflictNegotiator();
        var negotiator2 = new MEPH.synchronization.SyncConflictNegotiator();

        jem1.setNegotiator(negotiator1);
        jem2.setNegotiator(negotiator2);

        var jem1messages = [];
        var jem2messages = [];
        var channel = {
            jem1Messages: jem1messages,
            jem2Messages: jem2messages,
            send2: function (message) {
                var reult = JSON.stringify(message);
                var finalmessage = JSON.parse(reult);
                jem1messages.push(finalmessage);
            },
            send1: function (message) {
                var reult = JSON.stringify(message);
                var finalmessage = JSON.parse(reult);
                jem2messages.push(finalmessage);
            },
            pump1: function (random) {
                if (random) {
                    jem1messages = jem1messages.random();
                }
                var message = jem1messages.shift();
                if (message)
                    jem2.receive(message);
                return jem1messages.length;
            },
            pump2: function (random) {
                if (random) {
                    jem2messages = jem2messages.random();
                }
                var message = jem2messages.shift();
                if (message)
                    jem1.receive(message);
                return jem2messages.length;
            }
        }
        jem1.channel = channel.send2;
        jem2.channel = channel.send1;

        return {
            managers: [jem1, jem2],
            negotiators: [negotiator1, negotiator2],
            channel: channel
        }
    },

    it('negotiators are notified when event managers come on the seen..', function (done) {
        MEPH.requires('MEPH.synchronization.SyncMembrane').then(function () {
            return MEPH.create('MEPH.synchronization.SyncConflictNegotiator').then(function ($class) {
                //Arrange
                var setup = createSyncGroupWithSendControl();
                var manager1 = setup.managers[0];
                var manager2 = setup.managers[1];
                var negotiator1 = setup.negotiators[0];
                var negotiator2 = setup.negotiators[1];

                //Act
                manager1.heartBeat();
                manager2.heartBeat();

                setup.channel.pump1();
                setup.channel.pump2();

                //Assert
                expect(negotiator1.currentRollCall.length === 1).toBeTruthy();
                expect(negotiator2.currentRollCall.length === 1).toBeTruthy();
            }).catch(function (error) {
                expect(error).caught();
            }).then(function () {
                done();
            });
        });
    });
    it('negotiators are in an idle state when no conflicts are present.', function (done) {
        MEPH.requires('MEPH.synchronization.SyncMembrane').then(function () {
            return MEPH.create('MEPH.synchronization.SyncConflictNegotiator').then(function ($class) {
                var negotiator = new $class();

                //Arrange
                var setup = createSyncGroupWithSendControl();

                //Act
                var nogotiator = setup.negotiators[0];

                //Assert
                expect(nogotiator.state == 'idle').theTruth('the state is not idle');
            }).catch(function (error) {
                expect(error).caught();
            }).then(function () {
                done();
            });
        });
    });

    createConflictingEvents = function (count) {
        var result = [];
        var evnt = {
            "evnt": {
                "value": {
                    "$_$_$-$$$$$$$$$$id": "1170066d-55ba-4897-9a47-e304b9ef7aff",
                    "property": "afasd4"
                },
                "type": "created-object"
            },
            "local": false,
            "executed": true,
            "objId": "1170066d-55ba-4897-9a47-e304b9ef7aff",
            "id": "42589c76-fe87-4d5b-a6b3-ce5a466d4fc8",
            "parentEventId": null
        }
        var evnt2 = MEPH.clone(evnt);
        evnt2.id = MEPH.GUID();

        return result.interpolate(0, count + 1, function (x) {
            var temp = MEPH.clone(evnt);
            temp.id = MEPH.GUID();
            return temp;
        });
    };

    it('negotiators change state on receiving a conflict report.', function (done) {
        MEPH.requires('MEPH.synchronization.SyncMembrane').then(function () {
            return MEPH.create('MEPH.synchronization.SyncConflictNegotiator').then(function ($class) {
                //Arrange
                var setup = createSyncGroupWithSendControl();
                var evnts = createConflictingEvents(2);
                var manager1 = setup.managers[0];
                var manager2 = setup.managers[1];
                var negotiator1 = setup.negotiators[0];
                var negotiator2 = setup.negotiators[1];
                negotiator1.on('setstate', function (x) {
                    switch (negotiator1.state) {
                        case MEPH.synchronization.SyncConflictNegotiator.states.conflictAquired:
                            wasconflicaquired = true;
                    }
                });
                manager1.heartBeat();
                manager2.heartBeat();
                setup.channel.pump1();
                setup.channel.pump2();
                var wasconflicaquired;
                //Act
                evnts.foreach(function (x) {
                    manager1.monitoredEvents.push(x);
                });

                //Assert
                expect(wasconflicaquired).theTruth('no conflict aquired');;
            }).catch(function (error) {
                expect(error).caught();
            }).then(function () {
                done();
            });
        });
    });
    it('negotiators should create a conflict report when the state becomes conflictAquired.', function (done) {
        MEPH.requires('MEPH.synchronization.SyncMembrane').then(function () {
            return MEPH.create('MEPH.synchronization.SyncConflictNegotiator').then(function ($class) {
                var negotiator = new $class();
                //Arrange
                var setup = createSyncGroupWithSendControl();
                var evnts = createConflictingEvents(2);
                var manager1 = setup.managers[0];
                var manager2 = setup.managers[1];
                var negotiator1 = setup.negotiators[0];
                var negotiator2 = setup.negotiators[1];
                manager1.heartBeat();
                manager2.heartBeat();
                setup.channel.pump1();
                setup.channel.pump2();

                //Act
                evnts.foreach(function (x) {
                    manager1.monitoredEvents.push(x);
                });


                //Assert
                expect(negotiator1.currentReport).theTruth('negotiators report is not truthy.');

            }).catch(function (error) {
                expect(error).caught();
            }).then(function () {
                done();
            });
        });
    });
    it('conflict reports should contain a list of managers that are to start negotiations.', function (done) {
        MEPH.requires('MEPH.synchronization.SyncMembrane').then(function () {
            return MEPH.create('MEPH.synchronization.SyncConflictNegotiator').then(function ($class) {
                //Arrange
                var setup = createSyncGroupWithSendControl();
                var evnts = createConflictingEvents(2);
                var manager1 = setup.managers[0];
                var manager2 = setup.managers[1];
                var negotiator1 = setup.negotiators[0];
                var negotiator2 = setup.negotiators[1];
                manager1.heartBeat();
                manager2.heartBeat();
                setup.channel.pump1();
                setup.channel.pump2();

                //Act
                evnts.foreach(function (x) {
                    manager1.monitoredEvents.push(x);
                });


                //Assert
                expect(negotiator1.currentReport.managers.length === 2).toBeTruthy();
            }).catch(function (error) {
                expect(error).caught();
            }).then(function () {
                done();
            });
        });
    });
    it('conflict reports should contain a list of managers that are to start negotiation.', function (done) {
        MEPH.requires('MEPH.synchronization.SyncMembrane').then(function () {
            return MEPH.create('MEPH.synchronization.SyncConflictNegotiator').then(function ($class) {
                //Arrange
                var setup = createSyncGroupWithSendControl();
                var evnts = createConflictingEvents(2);
                var manager1 = setup.managers[0];
                var manager2 = setup.managers[1];
                var negotiator1 = setup.negotiators[0];
                var negotiator2 = setup.negotiators[1];
                manager1.heartBeat();
                manager2.heartBeat();
                setup.channel.pump1();
                setup.channel.pump2();

                //Act
                evnts.foreach(function (x) {
                    manager1.monitoredEvents.push(x);
                });


                //Assert
                expect(negotiator1.currentReport.managers.length === 2).toBeTruthy();
            }).catch(function (error) {
                expect(error).caught();
            }).then(function () {
                done();
            });
        });
    });
    it('conflict reports should contain a suggested conflict target.', function (done) {
        MEPH.requires('MEPH.synchronization.SyncMembrane').then(function () {
            return MEPH.create('MEPH.synchronization.SyncConflictNegotiator').then(function ($class) {
                //Arrange
                var setup = createSyncGroupWithSendControl();
                var evnts = createConflictingEvents(2);
                var manager1 = setup.managers[0];
                var manager2 = setup.managers[1];
                var negotiator1 = setup.negotiators[0];
                var negotiator2 = setup.negotiators[1];
                manager1.heartBeat();
                manager2.heartBeat();
                setup.channel.pump1();
                setup.channel.pump2();

                //Act
                evnts.foreach(function (x) {
                    manager1.monitoredEvents.push(x);
                });


                //Assert
                expect(negotiator1.currentReport.conflictTarget).toBeTruthy();
            }).catch(function (error) {
                expect(error).caught();
            }).then(function () {
                done();
            });
        });
    });
    it('when a conflict report is made it should go to the wait for reply from conflict assesment and agreement state.', function (done) {
        MEPH.requires('MEPH.synchronization.SyncMembrane').then(function () {
            return MEPH.create('MEPH.synchronization.SyncConflictNegotiator').then(function ($class) {
                //Arrange
                var setup = createSyncGroupWithSendControl();
                var evnts = createConflictingEvents(2);
                var manager1 = setup.managers[0];
                var manager2 = setup.managers[1];
                var negotiator1 = setup.negotiators[0];
                var negotiator2 = setup.negotiators[1];
                manager1.heartBeat();
                manager2.heartBeat();
                setup.channel.pump1();
                setup.channel.pump2();
                var conflictAssesmentAndAgreementState;
                negotiator1.on('setstate', function (x) {
                    switch (negotiator1.state) {
                        case MEPH.synchronization.SyncConflictNegotiator.states.conflictAssesmentAndAgreementState:
                            conflictAssesmentAndAgreementState = true;
                    }
                });
                //Act
                evnts.foreach(function (x) {
                    manager1.monitoredEvents.push(x);
                });


                //Assert
                expect(conflictAssesmentAndAgreementState).toBeTruthy();
            }).catch(function (error) {
                expect(error).caught();
            }).then(function () {
                done();
            });
        });
    });
    createConflictReport = function () {
        var conflictreportmessage = {
            "id": "aec60d63-7f05-477c-87bb-2b3c70ce6049",
            "EventManagerId": "b3e1358c-d536-4c68-87aa-8ebaa4d42f21",
            "type": "conflict",
            "message": {
                type: 'report',
                "conflicts": [{
                    "evntId": "conflictingParent",
                    "events": [{
                        "evnt": {
                            "value": {
                                "$_$_$-$$$$$$$$$$id": "1170066d-55ba-4897-9a47-e304b9ef7aff",
                                "property": "afasd4"
                            },
                            "type": "created-object"
                        },
                        "local": false,
                        "executed": true,
                        "objId": "1170066d-55ba-4897-9a47-e304b9ef7aff",
                        "id": "18e84a12-f4c4-494a-880c-c11dfe90fffa",
                        "parentEventId": "conflictingParent"
                    }, {
                        "evnt": {
                            "value": {
                                "$_$_$-$$$$$$$$$$id": "1170066d-55ba-4897-9a47-e304b9ef7aff",
                                "property": "afasd4"
                            },
                            "type": "created-object"
                        },
                        "local": false,
                        "executed": true,
                        "objId": "1170066d-55ba-4897-9a47-e304b9ef7aff",
                        "id": "a802fddf-d856-4301-82b0-9a43ab874e58",
                        "parentEventId": "conflictingParent"
                    }]
                }],
                "managers": ["16f9b603-15a3-4368-9c97-4f1818e8bfcc", "b3e1358c-d536-4c68-87aa-8ebaa4d42f21"],
                "conflictTarget": "conflictingParent"
            }
        };
        return conflictreportmessage;
    };
    it('when receiving a conflict report, without knowledge of the all the events in question will return acceptance of ' +
                'all actions to be taken, basically releasing all responsibility for the children of the parent event chain.', function (done) {
                    MEPH.requires('MEPH.synchronization.SyncMembrane').then(function () {
                        return MEPH.create('MEPH.synchronization.SyncConflictNegotiator').then(function ($class) {
                            //Arrange
                            var setup = createSyncGroupWithSendControl();
                            var manager1 = setup.managers[0];
                            var manager2 = setup.managers[1];
                            var negotiator1 = setup.negotiators[0];
                            var negotiator2 = setup.negotiators[1];
                            manager1.heartBeat();
                            manager2.heartBeat();
                            setup.channel.pump1();
                            setup.channel.pump2();
                            var report = createConflictReport();
                            report.EventManagerId = manager2.Id;
                            var statewasInActiveNegotiation;
                            expect(negotiator1.state === 'idle').toBeTruthy();
                            negotiator1.on('setstate', function (x) {
                                switch (negotiator1.state) {
                                    case MEPH.synchronization.SyncConflictNegotiator.states.InActiveNegotiation:
                                        statewasInActiveNegotiation = true;
                                }
                            });
                            //Act
                            negotiator1.receive(report);

                            //Assert
                            expect(statewasInActiveNegotiation).toBeTruthy();
                        }).catch(function (error) {
                            expect(error).caught();
                        }).then(function () {
                            done();
                        });
                    });
                });
    it('get report name from.', function (done) {
        MEPH.requires('MEPH.synchronization.SyncMembrane').then(function () {
            return MEPH.create('MEPH.synchronization.SyncConflictNegotiator').then(function ($class) {

                //Arrange
                var setup = createSyncGroupWithSendControl();
                var manager1 = setup.managers[0];
                var manager2 = setup.managers[1];
                var negotiator1 = setup.negotiators[0];
                var negotiator2 = setup.negotiators[1];
                manager1.heartBeat();
                manager2.heartBeat();
                setup.channel.pump1();
                setup.channel.pump2();
                var report = createConflictReport();
                report.EventManagerId = manager2.Id;

                //Act
                var name = negotiator1.reportName(report.message.conflicts[0]);

                //Assert
                expect(name).toBeTruthy();
            }).catch(function (error) {
                expect(error).caught();
            }).then(function () {
                done();
            });
        });
    });

    it('when receiving an request acknowledgement, and ack is sent back and the state goes to InActiveNegotiation.', function (done) {
        MEPH.requires('MEPH.synchronization.SyncMembrane').then(function () {
            return MEPH.create('MEPH.synchronization.SyncConflictNegotiator').then(function ($class) {
                //Arrange
                var setup = createSyncGroupWithSendControl();
                var manager1 = setup.managers[0];
                var manager2 = setup.managers[1];
                var negotiator1 = setup.negotiators[0];
                var negotiator2 = setup.negotiators[1];
                manager1.heartBeat();
                manager2.heartBeat();
                setup.channel.pump1();
                setup.channel.pump2();
                var report = createConflictReport();
                report.EventManagerId = manager2.Id;

                //Act

                var receivedMessage;
                manager1.sendConflictMessage = function (message) {
                    receivedMessage = message;
                }
                negotiator1.receive({
                    message: {
                        type: MEPH.synchronization.SyncConflictNegotiator.states.RequestAcknowledged
                    }
                });

                //Assert
                expect(receivedMessage).toBeTruthy();
            }).catch(function (error) {
                expect(error).caught();
            }).then(function () {
                done();
            });
        });
    });

    it('when receiving a request ack, and the state is not idle then nothing is sent.', function (done) {
        MEPH.requires('MEPH.synchronization.SyncMembrane').then(function () {
            return MEPH.create('MEPH.synchronization.SyncConflictNegotiator').then(function ($class) {
                //Arrange
                var setup = createSyncGroupWithSendControl();
                var manager1 = setup.managers[0];
                var manager2 = setup.managers[1];
                var negotiator1 = setup.negotiators[0];
                var negotiator2 = setup.negotiators[1];
                manager1.heartBeat();
                manager2.heartBeat();
                setup.channel.pump1();
                setup.channel.pump2();
                var report = createConflictReport();
                report.EventManagerId = manager2.Id;

                //Act
                var receivedMessage;
                negotiator1.state = 'not idle';
                manager1.sendConflictMessage = function (message) {
                    receivedMessage = message;
                }
                negotiator1.receive({
                    message: {
                        type: MEPH.synchronization.SyncConflictNegotiator.states.RequestAcknowledged
                    }
                });

                //Assert
                expect(receivedMessage).toBeTruthy();
                expect(receivedMessage.type === MEPH.synchronization.SyncConflictNegotiator.states.InvalidState).toBeTruthy();
            }).catch(function (error) {
                expect(error).caught();
            }).then(function () {
                done();
            });
        });
    });


    it('If negotiators recieve ackrequest, it will set its state to coordinateleadership.', function (done) {
        MEPH.requires('MEPH.synchronization.SyncMembrane').then(function () {
            return MEPH.create('MEPH.synchronization.SyncConflictNegotiator').then(function ($class) {

                var setup = createSyncGroupWithSendControl();
                var manager1 = setup.managers[0];
                var manager2 = setup.managers[1];
                var negotiator1 = setup.negotiators[0];
                var negotiator2 = setup.negotiators[1];
                var stateCoordinateLeaderShip1;
                negotiator1.on('setstate', function (x) {
                    switch (negotiator1.state) {
                        case MEPH.synchronization.SyncConflictNegotiator.states.WaitingForAcknowledgement:
                            stateCoordinateLeaderShip1 = true;
                    }
                });

                manager1.heartBeat();
                manager2.heartBeat();
                setup.channel.pump1();
                setup.channel.pump2();
                var report = createConflictReport();
                report.EventManagerId = manager2.Id;


                //Act
                negotiator1.waitingNote = true;
                negotiator1.acknowledgements = [manager2.Id];
                negotiator1.state = MEPH.synchronization.SyncConflictNegotiator.states.WaitingForAcknowledgement;
                negotiator1.receive({
                    EventManagerId: manager2.Id,
                    message: {
                        type: MEPH.synchronization.SyncConflictNegotiator.states.AckRequest
                    }
                });

                //Assert
                expect(stateCoordinateLeaderShip1).toBeTruthy();
            }).catch(function (error) {
                expect(error).caught();
            }).then(function () {
                done();
            });
        });
    });


    it('should reach coordinate leadership.', function (done) {
        MEPH.requires('MEPH.synchronization.SyncMembrane').then(function () {
            return MEPH.create('MEPH.synchronization.SyncConflictNegotiator').then(function ($class) {
                //Arrange
                var setup = createSyncGroupWithSendControl();
                var manager1 = setup.managers[0];
                var manager2 = setup.managers[1];

                var negotiator1 = setup.negotiators[0];
                var negotiator2 = setup.negotiators[1];
                var jobject = manager1.createSyncObject();
                var stateCoordinateLeaderShip1;
                var leadershipsReceived1;
                var leadershipsReceived2;
                var conflictsReceived;
                var confirmedLeaderShip;
                var confirmedFollower;
                var conflictResolved;
                var waitingforesolutationAck;
                var stateCoordinateLeaderShip2;
                var result = jobject.createObj({ properties: { property: 'property' } });

                var stateset = function (negotiator, x) {
                    switch (negotiator.state) {
                        case MEPH.synchronization.SyncConflictNegotiator.states.CoordinateLeaderShip:
                            stateCoordinateLeaderShip2 = true;
                            break;
                        case MEPH.synchronization.SyncConflictNegotiator.states.LeaderShipValuesReceived:
                            leadershipsReceived2 = true;
                            break;
                        case MEPH.synchronization.SyncConflictNegotiator.states.ConfirmedLeaderShip:
                            confirmedLeaderShip = true;
                            break;
                        case MEPH.synchronization.SyncConflictNegotiator.states.ConfirmedFollower:
                            confirmedFollower = true;
                            break;
                        case MEPH.synchronization.SyncConflictNegotiator.states.ConflictsReceived:
                            conflictsReceived = true;
                            break;
                        case MEPH.synchronization.SyncConflictNegotiator.states.ConflictResolved:
                            conflictResolved = true;
                            break;
                        case MEPH.synchronization.SyncConflictNegotiator.states.WaitingForResolutionAcknowledgements:
                            waitingforesolutationAck = true;
                            break;
                    }
                }
                negotiator1.on('setstate', stateset.bind(this, negotiator1));
                negotiator2.on('setstate', stateset.bind(this, negotiator2));

                setup.channel.pump1();
                //setup.channel.pump2();
                var object_id = manager2.monitoredEvents[0].objId;
                var object = manager2.getMonitoredObject(object_id);
                //Act
                object.property = "aahs";
                result.property = "afasd";
                manager1.heartBeat();
                manager2.heartBeat();
                object.property = "asdf2";
                setup.channel.pump1();
                setup.channel.pump2();
                object.property = "asdf";
                result.property = "afasd4";
                while (setup.channel.jem1Messages.length || setup.channel.jem2Messages.length) {

                    setup.channel.pump1();
                    setup.channel.pump2();
                }

                //Assert
                expect(stateCoordinateLeaderShip2).toBeTruthy();
                expect(leadershipsReceived2).toBeTruthy();
                expect(confirmedFollower).toBeTruthy();
                expect(confirmedLeaderShip).toBeTruthy();
                expect(conflictsReceived).toBeTruthy();
                expect(conflictResolved).toBeTruthy();
                expect(waitingforesolutationAck).toBeTruthy();
                expect(negotiator1.state === MEPH.synchronization.SyncConflictNegotiator.states.idle).toBeTruthy();
                expect(negotiator2.state === MEPH.synchronization.SyncConflictNegotiator.states.idle).toBeTruthy();

            }).catch(function (error) {
                expect(error).caught();
            }).then(function () {
                done();
            });
        });
    });


    it('when a evnt is not received, it should be requested.', function (done) {
        MEPH.requires('MEPH.synchronization.SyncMembrane').then(function () {
            return MEPH.create('MEPH.synchronization.SyncConflictNegotiator').then(function ($class) {
                //Arrange
                var setup = createSyncGroupWithSendControl();
                var manager1 = setup.managers[0];
                var manager2 = setup.managers[1];
                var jobject = manager1.createSyncObject();
                var result = jobject.createObj({ properties: { property: 'property' } });


                result.property = "afasd";
                manager1.heartBeat();
                manager2.heartBeat();
                var evntmissed;
                manager2.on('missing-event', function () {
                    evntmissed = true;
                });
                result.property = "afasd4";
                result.property = "afasd2";
                var removed;
                setup.channel.jem1Messages.removeWhere(function (x) {
                    if (removed) {
                        return false;
                    }
                    if (x.type == 'events') {
                        removed = true;
                    }

                    return x.type == 'events';
                });

                var left1 = 0,
                    left2 = 0;
                result.property = "afasd5";
                result.property = "afasd6";
                do {
                    left1 = setup.channel.pump1(true);
                    left2 = setup.channel.pump2(true);
                } while (left2 || left1)
                expect(evntmissed).toBeTruthy();

            }).catch(function (error) {
                expect(error).caught();
            }).then(function () {
                done();
            });
        });
    });

    it('events receieved in a random order.', function (done) {
        MEPH.requires('MEPH.synchronization.SyncMembrane').then(function () {
            return MEPH.create('MEPH.synchronization.SyncConflictNegotiator').then(function ($class) {
                //Arrange
                var setup = createSyncGroupWithSendControl();
                var manager1 = setup.managers[0];
                var manager2 = setup.managers[1];
                var jobject = manager1.createSyncObject();
                var result = jobject.createObj({ properties: { property: 'property' } });


                result.property = "afasd";
                manager1.heartBeat();
                manager2.heartBeat();


                [].interpolate(0, 10, function (x) {
                    result.property = 'a' + x;
                });
                var max = 0;
                setup.channel.jem1Messages = setup.channel.jem1Messages.random();
                setup.channel.jem2Messages = setup.channel.jem2Messages.random();

                var left1 = 0,
                    left2 = 0;
                result.property = "afasd5";
                result.property = "afasd6";
                do{
                    left1 = setup.channel.pump1(true);
                    left2 = setup.channel.pump2(true);
                } while (left2 || left1)

                //setup.channel.pump2();
                var object_id = manager2.monitoredEvents[0].objId;
                var object = manager2.getMonitoredObject(object_id);

                expect(result.property === object.property).toBeTruthy();
            }).catch(function (error) {
                expect(error).caught();
            }).then(function () {
                done();
            });
        });
    });

    it('dates are treated like value objects.', function (done) {
        MEPH.requires('MEPH.synchronization.SyncMembrane').then(function () {
            return MEPH.create('MEPH.synchronization.SyncConflictNegotiator').then(function ($class) {
                //Arrange
                var setup = createSyncGroupWithSendControl();
                var manager1 = setup.managers[0];
                var manager2 = setup.managers[1];
                var jobject = manager1.createSyncObject();
                var result = jobject.createObj({ properties: { property: 'property' } });


                result.property = "afasd";
                manager1.heartBeat();
                manager2.heartBeat();
                result.property = (Date.now());
                do {
                    left1 = setup.channel.pump1(true);
                    left2 = setup.channel.pump2(true);
                } while (left2 || left1)

                //setup.channel.pump2();
                var object_id = manager2.monitoredEvents[0].objId;
                var object = manager2.getMonitoredObject(object_id);

                expect(result.property === object.property).toBeTruthy();
            }).catch(function (error) {
                expect(error).caught();
            }).then(function () {
                done();
            });
        });
    });
});﻿describe("MEPH/synchronization/SyncArray.spec.js", function () {
    var createSyncGroup,
        createSyncGroupWithSendControl;
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('create an object, and assign an array property.', function (done) {
        MEPH.create('MEPH.synchronization.SyncObject').then(function ($class) {
            //Arrange
            var jobject = new $class();

            //Act
            var result = jobject.createObj({
                properties: {
                    prop1: [],
                    prop2: null
                }
            });

            //Assert
            expect(result).toBeTruthy();
            expect(result.prop1).theTruth('prop1 was not an array');
            expect(result.prop2 === null).toBeTruthy();

        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it('create an object with and an array, and be sure it creates a new object with the correct path.', function (done) {
        MEPH.create('MEPH.synchronization.SyncObject').then(function ($class) {
            //Arrange
            var jobject = new $class();
            var result = jobject.createObj({
                properties: {
                    property: []
                }
            });

            //Act
            var altered = 0;
            var created = 0;
            jobject.on('created-object', function () { created++; });
            result.property.on('array_altered', function () { altered++; });
            result.property.push({ value: 'value' });

            //Assert
            expect(created === 1).theTruth('created was not 1');
            expect(altered === 1).theTruth('altered was not 1');
            expect(result.property[0].jsyncId()).theTruth('no sync id');

        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });


    it('adds multiple objects.', function (done) {
        MEPH.create('MEPH.synchronization.SyncObject').then(function ($class) {
            //Arrange
            var jobject = new $class();
            var result = jobject.createObj({
                properties: {
                    property: []
                }
            });
            var altered = 0;
            var created = 0;
            jobject.on('created-object', function () { created++; });
            result.property.on('array_altered', function () {
                altered++;
            });

            //Act
            result.property.push.apply(result.property, [].interpolate(0, 10, function (x) {
                return { x: x };
            }));


            //Assert
            expect(result.property.length).toBeTruthy();
            expect(altered == 1).toBeTruthy();
            expect(created == 10).toBeTruthy();
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });



    it('detects removal of object.', function (done) {
        MEPH.create('MEPH.synchronization.SyncObject').then(function ($class) {
            //Arrange
            var jobject = new $class();
            var altered = 0;
            var result = jobject.createObj({ properties: { property: [] } });
            result.property.push({ value: 'value' });
            result.property.on('array_altered', function () { altered++; });

            //Act
            var value = result.property.pop();
            //Assert
            expect(altered).toBeTruthy();
            expect(value.value === 'value').toBeTruthy();
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });


    it('detects splice removal of object.', function (done) {
        MEPH.create('MEPH.synchronization.SyncObject').then(function ($class) {
            //Arrange
            var jobject = new $class();
            var altered = 0;
            var result = jobject.createObj({ properties: { property: [] } });
            result.property.push({ value: 'value' });
            result.property.on('array_altered', function () { altered++; });

            //Act
            var value = result.property.splice(0, 1);

            //Assert
            expect(altered).toBeTruthy();
            expect(value[0].value === 'value').theTruth('value wasnt right.');

        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });


    it('detect splice , addition of object.', function (done) {
        MEPH.create('MEPH.synchronization.SyncObject').then(function ($class) {
            //Arrange
            var jobject = new $class();
            var altered = 0;
            var result = jobject.createObj({ properties: { property: [] } });
            result.property.push({ value: 'value' });
            result.property.on('array_altered', function () { altered++; });

            //Act
            var value = result.property.splice(1, 0, { value: 2 });

            //Assert
            expect(altered).toBeTruthy();
            expect(result.property[1].value === 2).theTruth('property[1].value was not 2');

        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });



    it('detect splice, addition and removal.', function (done) {
        MEPH.create('MEPH.synchronization.SyncObject').then(function ($class) {
            //Arrange
            var jobject = new $class();
            var altered = 0;
            var result = jobject.createObj({ properties: { property: [] } });
            result.property.push({ value: 'value' });
            result.property.on('array_altered', function () { altered++; });

            //Act
            var value = result.property.splice(0, 1, { value: 2 });

            //Assert
            expect(altered).toBeTruthy();
            expect(result.property[0].value === 2).theTruth('property[1].value was not 2');
            expect(value[0].value === 'value').theTruth('value[0].value was not value');;

        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });


    it('detects unshift.', function (done) {
        MEPH.create('MEPH.synchronization.SyncObject').then(function ($class) {
            //Arrange
            var jobject = new $class();
            var altered = 0;
            var created = 0;
            var result = jobject.createObj({ properties: { property: [] } });
            jobject.on('created-object', function () { created++; });
            result.property.on('array_altered', function () { altered++; });

            //Act
            result.property.unshift.apply(result.property, [].interpolate(0, 4, function (x) { return { x: x } }));

            //Assert
            expect(altered).toBeTruthy();
            expect(created === 4).toBeTruthy();

        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });




    it('dectects shift.', function (done) {
        MEPH.create('MEPH.synchronization.SyncObject').then(function ($class) {
            //Arrange
            var jobject = new $class();
            var altered = 0;
            var created = 0;
            var result = jobject.createObj({ properties: { property: [] } });
            result.property.unshift.apply(result.property, [].interpolate(0, 4, function (x) { return { x: x } }));
            jobject.on('created-object', function () { created++; });
            result.property.on('array_altered', function () { altered++; });

            //Act
            result.property.shift();

            //Assert
            expect(altered === 1).toBeTruthy();
            expect(created === 0).toBeTruthy();
            expect(result.property.length === 3).toBeTruthy();
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });
    it('dectects concat.', function (done) {
        MEPH.create('MEPH.synchronization.SyncObject').then(function ($class) {
            //Arrange
            var jobject = new $class();
            var altered = 0;
            var created = 0;
            var result = jobject.createObj({ properties: { property: [] } });
            result.property.unshift.apply(result.property, [].interpolate(0, 4, function (x) { return { x: x } }));
            jobject.on('created-object', function () { created++; });
            result.on('altered', function () { altered++; });

            //Act
            result.property.concat.apply(result.property, [].interpolate(0, 4, function (x) { return [{ x: x }]; }));

            //Assert
            expect(altered === 0).toBeTruthy();
            expect(created === 4).toBeTruthy();

        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    createSyncGroup = function () {
        var jem1 = new MEPH.synchronization.SyncMembrane();
        var jem2 = new MEPH.synchronization.SyncMembrane();
        var channel = {
            send2: function (message) {
                var reult = JSON.stringify(message);
                var finalmessage = JSON.parse(reult);
                jem1.receive(finalmessage);
            },
            send1: function (message) {
                var reult = JSON.stringify(message);
                var finalmessage = JSON.parse(reult);
                jem2.receive(finalmessage);
            }
        };
        //Act
        jem1.channel = channel.send1;
        jem2.channel = channel.send2;

        jem1.heartBeat();
        return {
            managers: [jem1, jem2]
        }
    };

    it('events should go both ways.', function (done) {
        MEPH.requires('MEPH.synchronization.SyncMembrane').then(function () {
            return MEPH.create('MEPH.synchronization.SyncObject').then(function ($class) {
                //Arrange
                var setup = createSyncGroup();
                var manager1 = setup.managers[0];
                var manager2 = setup.managers[1];
                var jobject = manager1.createSyncObject();
                var result = jobject.createObj();

                //Act

                result.property = 'dafsd';
                result[MEPH.jsync].sweep();
                result.property = [];
                var object = manager2.monitoredObject[0];

                //Assert
                expect(Array.isArray(object.property)).toBeTruthy();

            })
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });


    it('add arrays with values.', function (done) {
        MEPH.requires('MEPH.synchronization.SyncMembrane').then(function () {
            return MEPH.create('MEPH.synchronization.SyncObject').then(function ($class) {
                //Arrange
                var setup = createSyncGroup();
                var manager1 = setup.managers[0];
                var manager2 = setup.managers[1];
                var jobject = manager1.createSyncObject();
                var result = jobject.createObj();

                //Act

                result.property = 'dafsd';
                result[MEPH.jsync].sweep();
                result.property = ['a', 'b'];
                var object = manager2.monitoredObject[0];

                //Assert
                expect(Array.isArray(object.property)).toBeTruthy();
                expect((object.property[0] === 'a')).toBeTruthy();
                expect((object.property[1] === 'b')).toBeTruthy();

            })
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it('add arrays with objects.', function (done) {
        MEPH.requires('MEPH.synchronization.SyncMembrane').then(function () {
            return MEPH.create('MEPH.synchronization.SyncObject').then(function ($class) {
                //Arrange
                var setup = createSyncGroup();
                var manager1 = setup.managers[0];
                var manager2 = setup.managers[1];
                var jobject = manager1.createSyncObject();
                var result = jobject.createObj();

                //Act
                result.property = 'dafsd';
                result[MEPH.jsync].sweep();
                result.property = ['a', { value: 'b' }];
                result.property.push({ value: 'c' });
                var object = manager2.monitoredObject[0];

                //Assert
                expect(Array.isArray(object.property)).toBeTruthy();
                expect((object.property[0] === 'a')).toBeTruthy();
                expect((object.property[1].value === 'b')).toBeTruthy();
                expect((object.property[2].value === 'c')).toBeTruthy();

            })
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });


    it('add arrays with objects.', function (done) {
        MEPH.requires('MEPH.synchronization.SyncMembrane').then(function () {
            return MEPH.create('MEPH.synchronization.SyncObject').then(function ($class) { //Arrange
                var setup = createSyncGroup();
                var manager1 = setup.managers[0];
                var manager2 = setup.managers[1];
                var jobject = manager1.createSyncObject();
                var result = jobject.createObj();

                //Act
                result.property = 'dafsd';
                result[MEPH.jsync].sweep();
                result.property = ['a', { value: 'b' }];
                result.property.push({ value: 'c' });
                result.property.pop();
                var object = manager2.monitoredObject[0];

                //Assert
                expect(Array.isArray(object.property)).toBeTruthy();
                expect((object.property[0] === 'a')).toBeTruthy();
                expect((object.property[1].value === 'b')).toBeTruthy();
                expect(object.property.length === 2).toBeTruthy();

            })
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });


    it('pop object from array.', function (done) {
        MEPH.requires('MEPH.synchronization.SyncMembrane').then(function () {
            return MEPH.create('MEPH.synchronization.SyncObject').then(function ($class) {

                var setup = createSyncGroup();
                var manager1 = setup.managers[0];
                var manager2 = setup.managers[1];
                var jobject = manager1.createSyncObject();
                var result = jobject.createObj();

                //Act
                result.property = 'dafsd';
                result[MEPH.jsync].sweep();
                result.property = ['a', { value: 'b' }];
                result.property.push({ value: 'c' });
                result.property.pop();
                var object = manager2.monitoredObject[0];

                //Assert
                expect(Array.isArray(object.property)).toBeTruthy();
                expect((object.property[0] === 'a')).toBeTruthy();
                expect((object.property[1].value === 'b')).toBeTruthy();
                expect(object.property.length === 2).toBeTruthy();

            })
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    createSyncGroupWithSendControl = function () {
        var jem1 = new MEPH.synchronization.SyncMembrane();
        var jem2 = new MEPH.synchronization.SyncMembrane();

        var negotiator1 = new MEPH.synchronization.SyncConflictNegotiator();
        var negotiator2 = new MEPH.synchronization.SyncConflictNegotiator();

        jem1.setNegotiator(negotiator1);
        jem2.setNegotiator(negotiator2);

        var jem1messages = [];
        var jem2messages = [];
        var channel = {
            jem1Messages: jem1messages,
            jem2Messages: jem2messages,
            send2: function (message) {
                var reult = JSON.stringify(message);
                var finalmessage = JSON.parse(reult);
                jem1messages.push(finalmessage);
            },
            send1: function (message) {
                var reult = JSON.stringify(message);
                var finalmessage = JSON.parse(reult);
                jem2messages.push(finalmessage);
            },
            pump1: function (random) {
                if (random) {
                    jem1messages = jem1messages.random();
                }
                var message = jem1messages.shift();
                if (message)
                    jem2.receive(message);
                return jem1messages.length;
            },
            pump2: function (random) {
                if (random) {
                    jem2messages = jem2messages.random();
                }
                var message = jem2messages.shift();
                if (message)
                    jem1.receive(message);
                return jem2messages.length;
            }
        }
        jem1.channel = channel.send2;
        jem2.channel = channel.send1;

        return {
            managers: [jem1, jem2],
            negotiators: [negotiator1, negotiator2],
            channel: channel
        }
    };
    it('should handle creating arrays in objects.', function (done) {
        MEPH.requires('MEPH.synchronization.SyncMembrane', 'MEPH.synchronization.SyncConflictNegotiator').then(function () {
            return MEPH.create('MEPH.synchronization.SyncObject').then(function ($class) {
                //Arrange
                var setup = createSyncGroupWithSendControl();
                var manager1 = setup.managers[0];
                var manager2 = setup.managers[1];

                var negotiator1 = setup.negotiators[0];
                var negotiator2 = setup.negotiators[1];
                var jobject = manager1.createSyncObject();
                var result = jobject.createObj({ properties: { property: [] } });


                setup.channel.pump1();
                //setup.channel.pump2();
                //Act
                manager1.heartBeat();
                manager2.heartBeat();
                setup.channel.pump1();
                setup.channel.pump2();
                setup.channel.pump1();
                setup.channel.pump2();
                setup.channel.pump1();
                setup.channel.pump2();
                var object = manager2.monitoredObject[2];

                //Assert
                expect(negotiator1.state === MEPH.synchronization.SyncConflictNegotiator.states.idle).toBeTruthy();
                expect(negotiator2.state === MEPH.synchronization.SyncConflictNegotiator.states.idle).toBeTruthy();

            })
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });
    it('should handle creating arrays in objects.', function (done) {
        MEPH.requires('MEPH.synchronization.SyncMembrane', 'MEPH.synchronization.SyncConflictNegotiator').then(function () {
            return MEPH.create('MEPH.synchronization.SyncObject').then(function ($class) {
                //Arrange
                var setup = createSyncGroupWithSendControl();
                var manager1 = setup.managers[0];
                var manager2 = setup.managers[1];

                var negotiator1 = setup.negotiators[0];
                var negotiator2 = setup.negotiators[1];
                var jobject = manager1.createSyncObject();
                var result = jobject.createObj({ properties: { property: [] } });


                setup.channel.pump1();
                //setup.channel.pump2();
                //Act
                manager1.heartBeat();
                manager2.heartBeat();
                setup.channel.pump1();
                setup.channel.pump2();
                setup.channel.pump1();
                setup.channel.pump2();
                setup.channel.pump1();
                setup.channel.pump2();
                var object = manager2.monitoredObject[1];
                object.property.push("aahs");
                result.property.push("jajsd");
                object.property.push('vava');
                object.property.push('vava3');
                result.property.push('vava432');
                while (setup.channel.jem1Messages.length || setup.channel.jem2Messages.length) {

                    setup.channel.pump1();
                    setup.channel.pump2();
                }
                
                //Assert
                expect(negotiator1.state === MEPH.synchronization.SyncConflictNegotiator.states.idle).toBeTruthy();
                expect(negotiator2.state === MEPH.synchronization.SyncConflictNegotiator.states.idle).toBeTruthy();
                expect(result.property.length === 5).toBeTruthy();
                expect(object.property.length === 5).toBeTruthy();
                expect(result.property.relativeCompliment(object.property).length === 0).toBeTruthy();

            })
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it('value types create index references in a sub array.', function (done) {
        MEPH.requires('MEPH.synchronization.SyncMembrane', 'MEPH.synchronization.SyncConflictNegotiator').then(function () {
            return MEPH.create('MEPH.synchronization.SyncObject').then(function ($class) {
                //Arrange
                var setup = createSyncGroupWithSendControl();
                var manager1 = setup.managers[0];
                var manager2 = setup.managers[1];

                var negotiator1 = setup.negotiators[0];
                var negotiator2 = setup.negotiators[1];
                var jobject = manager1.createSyncObject();
                var result = jobject.createObj({ properties: { property: [] } });

                //Act
                result.property.push('value');

                //Assert
                var valueObjs = result.property[MEPH.jsync].valueObjs();
                expect(valueObjs);
                expect(valueObjs.first().index === 0);
                expect(valueObjs.first().instanceId);

            })
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it('value types will remove themselves when removed.', function (done) {
        MEPH.requires('MEPH.synchronization.SyncMembrane', 'MEPH.synchronization.SyncConflictNegotiator').then(function () {
            return MEPH.create('MEPH.synchronization.SyncObject').then(function ($class) {
                //Arrange
                var setup = createSyncGroupWithSendControl();
                var manager1 = setup.managers[0];
                var manager2 = setup.managers[1];

                var negotiator1 = setup.negotiators[0];
                var negotiator2 = setup.negotiators[1];
                var jobject = manager1.createSyncObject();
                var result = jobject.createObj({ properties: { property: [] } });
                result.property.push('value');

                //Act
                result.property.pop();

                //Assert
                var valueObjs = result.property[MEPH.jsync].valueObjs();
                expect(valueObjs).toBeTruthy();
                expect(valueObjs.length === 0).toBeTruthy();

            })
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });


    it('push a bunch of different types and pop them off.', function (done) {
        MEPH.requires('MEPH.synchronization.SyncMembrane', 'MEPH.synchronization.SyncConflictNegotiator').then(function () {
            return MEPH.create('MEPH.synchronization.SyncObject').then(function ($class) {
                //Arrange
                var setup = createSyncGroupWithSendControl();
                var manager1 = setup.managers[0];
                var manager2 = setup.managers[1];

                var negotiator1 = setup.negotiators[0];
                var negotiator2 = setup.negotiators[1];
                var jobject = manager1.createSyncObject();
                var result = jobject.createObj({ properties: { property: [] } });
                result.property.push('value');
                result.property.push({ a: 'value' });
                result.property.push('value3');
                result.property.push('value4');
                result.property.push('value2');

                //Act
                result.property.pop();
                result.property.pop();
                result.property.pop();
                result.property.pop();
                result.property.pop();

                //Assert
                var valueObjs = result.property[MEPH.jsync].valueObjs();
                expect(valueObjs).toBeTruthy();
                expect(valueObjs.length === 0).toBeTruthy();

            })
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it('events on arrays involving value type need to be handled special' +
                ': values with require their instanceId and value to be sent as an object', function (done) {
                    MEPH.requires('MEPH.synchronization.SyncMembrane', 'MEPH.synchronization.SyncConflictNegotiator').then(function () {
                        return MEPH.create('MEPH.synchronization.SyncObject').then(function ($class) {
                            //Arrange
                            var setup = createSyncGroupWithSendControl();
                            var manager1 = setup.managers[0];
                            var manager2 = setup.managers[1];

                            var negotiator1 = setup.negotiators[0];
                            var negotiator2 = setup.negotiators[1];
                            var jobject = manager1.createSyncObject();
                            var result = jobject.createObj({ properties: { property: [] } });
                            result.property.push('value');
                            result.property.push({ a: 'value' });
                            result.property.push('value3');
                            result.property.push('value4');
                            result.property.push('value2');
                            result.property.pop();
                            result.property.pop();
                            result.property.pop();
                            result.property.pop();
                            result.property.pop();

                            //Act
                            while (setup.channel.jem1Messages.length || setup.channel.jem2Messages.length) {

                                setup.channel.pump1();
                                setup.channel.pump2();
                            }
                            var object = manager2.monitoredObject[1];


                            //Assert
                            var valueObjs = result.property[MEPH.jsync].valueObjs();
                            expect(valueObjs).toBeTruthy();
                            expect(valueObjs.length === 0).toBeTruthy();
                            expect(object[MEPH.jsync].valueObjs().length === 0).toBeTruthy();

                        })
                    }).catch(function (error) {
                        expect(error).caught();
                    }).then(function () {
                        done();
                    });
                });

    it('can unshift values to the array, and update the value reference array', function (done) {
        MEPH.requires('MEPH.synchronization.SyncMembrane', 'MEPH.synchronization.SyncConflictNegotiator').then(function () {
            return MEPH.create('MEPH.synchronization.SyncObject').then(function ($class) {
                //Arrange
                var setup = createSyncGroupWithSendControl();
                var manager1 = setup.managers[0];
                var manager2 = setup.managers[1];

                var negotiator1 = setup.negotiators[0];
                var negotiator2 = setup.negotiators[1];
                var jobject = manager1.createSyncObject();
                var result = jobject.createObj({ properties: { property: [] } });

                //Act
                result.property.unshift('value', 'value2');

                //Assert
                var valueObjs = result.property[MEPH.jsync].valueObjs();
                expect(valueObjs).toBeTruthy();
                expect(valueObjs.length === 2).toBeTruthy();

            })
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });


    it('can shift value from an array, and update the value reference array', function (done) {
        MEPH.requires('MEPH.synchronization.SyncMembrane', 'MEPH.synchronization.SyncConflictNegotiator').then(function () {
            return MEPH.create('MEPH.synchronization.SyncObject').then(function ($class) {
                //Arrange
                var setup = createSyncGroupWithSendControl();
                var manager1 = setup.managers[0];
                var manager2 = setup.managers[1];

                var negotiator1 = setup.negotiators[0];
                var negotiator2 = setup.negotiators[1];
                var jobject = manager1.createSyncObject();
                var result = jobject.createObj({ properties: { property: [] } });
                result.property.unshift('vlue', 'value');

                //Act
                result.property.shift()

                //Assert
                var valueObjs = result.property[MEPH.jsync].valueObjs();
                expect(valueObjs).toBeTruthy();
                expect(valueObjs.length === 1).toBeTruthy();

            })
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });


    it('can shift value from an array, and update the value reference array', function (done) {
        MEPH.requires('MEPH.synchronization.SyncMembrane', 'MEPH.synchronization.SyncConflictNegotiator').then(function () {
            return MEPH.create('MEPH.synchronization.SyncObject').then(function ($class) {
                //Arrange
                var setup = createSyncGroupWithSendControl();
                var manager1 = setup.managers[0];
                var manager2 = setup.managers[1];

                var jobject = manager1.createSyncObject();
                var result = jobject.createObj({ properties: { property: [] } });
                result.property.unshift('vlue', 'value');
                result.property.shift();

                //Act
                while (setup.channel.jem1Messages.length || setup.channel.jem2Messages.length) {

                    setup.channel.pump1();
                    setup.channel.pump2();
                }
                var object = manager2.getMonitoredObject(result.instanceObj());
                //Assert
                var valueObjs = result.property[MEPH.jsync].valueObjs();
                expect(valueObjs).toBeTruthy();
                expect(valueObjs.length === 1).toBeTruthy();
                expect(object.property[0] === 'value').toBeTruthy();

            })
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it('can splice values in an array, and update the value reference array', function (done) {
        MEPH.requires('MEPH.synchronization.SyncMembrane', 'MEPH.synchronization.SyncConflictNegotiator').then(function () {
            return MEPH.create('MEPH.synchronization.SyncObject').then(function ($class) {
                var setup = createSyncGroupWithSendControl();
                var manager1 = setup.managers[0];
                var manager2 = setup.managers[1];

                var jobject = manager1.createSyncObject();
                var result = jobject.createObj({ properties: { property: [] } });
                result.property.push('sdf', 'fa', 'fsd');
                //Act
                result.property.splice(0, 1, 'value', 'value');
                while (setup.channel.jem1Messages.length || setup.channel.jem2Messages.length) {

                    setup.channel.pump1();
                    setup.channel.pump2();
                }
                var object = manager2.getMonitoredObject(result.instanceObj());
                //Assert
                var valueObjs = result.property[MEPH.jsync].valueObjs();
                expect(valueObjs).toBeTruthy();
                expect(valueObjs.length === 4).toBeTruthy();
                expect(object.property.length === 4).toBeTruthy();
                expect(result.property.length === 4).toBeTruthy();
                expect(result.property.relativeCompliment(object.property, function (x) { return x; }).length === 0).toBeTruthy();

            })
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });


    it('reference can splice values in an array, and update the value reference array', function (done) {
        MEPH.requires('MEPH.synchronization.SyncMembrane', 'MEPH.synchronization.SyncConflictNegotiator').then(function () {
            return MEPH.create('MEPH.synchronization.SyncObject').then(function ($class) {
                var setup = createSyncGroupWithSendControl();
                var manager1 = setup.managers[0];
                var manager2 = setup.managers[1];

                var jobject = manager1.createSyncObject();
                var result = jobject.createObj({ properties: { property: [] } });
                result.property.push({ x: 'sdf' }, { x: 'sdf' }, { x: 'sdf' });
                //Act
                result.property.splice(0, 1, { x: 'sdf' }, { x: 'sdf' });
                while (setup.channel.jem1Messages.length || setup.channel.jem2Messages.length) {

                    setup.channel.pump1();
                    setup.channel.pump2();
                }
                var object = manager2.getMonitoredObject(result.instanceObj());
                //Assert
                var valueObjs = result.property[MEPH.jsync].valueObjs();

                expect(object.property.length === 4).toBeTruthy();
                expect(result.property.length === 4).toBeTruthy();
                expect(result.property.select(function (x) {
                    return x.instanceObj();
                }).relativeCompliment(object.property.select(function (x) {
                    return x.instanceObj();
                }))).toBeTruthy();

            })
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });
});﻿/**
 * @class MEPH.signalprocessing.Spectrogram
 * @extends MEPH.control.Control
 * A spectrogram is a visual representation of the spectrum of frequencies in a sound or other signal as 
 * they vary with time or some other variable. Spectrograms are sometimes called spectral waterfalls, voiceprints, or voicegrams.
 * Spectrograms can be used to identify spoken words phonetically, and to analyse the various calls of animals. 
 * They are used extensively in the development of the fields of music, sonar, radar, and speech processing,[1] seismology, etc.
 **/
MEPH.define('MEPH.signalprocessing.Spectrogram', {
    alias: 'spectrogram',
    templates: true,
    requires: ['MEPH.signalprocessing.SignalProcessor',
        'MEPH.math.FFT',
        'MEPH.util.Style',
        'MEPH.math.Util',
        'MEPH.util.Vector',
        'MEPH.util.Renderer'],
    extend: 'MEPH.control.Control',
    statics: {
    },
    properties: {
        window: null,
        source: null,
        step: 256,
        autoprocess: false,
        data: null,
        processor: null
    },
    initialize: function () {
        var me = this;
        me.callParent.apply(me, arguments);
        me.renderer = new MEPH.util.Renderer();
        me.on('altered', function (type, args) {
            var rowheaders = parseFloat(me.rowheaders);
            var cols = parseFloat(me.columns);
            var rows = parseFloat(me.rows);
            var colheaders = parseFloat(me.columnheaders);
            if (args.property === "data") {
                if (me.autoprocess) {
                    var source = me.process(me.data);
                }
                if (me.loaded)
                    me.render(source);
            }
        })
    },

    getprocessor: function () {
        var me = this;
        me.processor = me.processor || new MEPH.signalprocessing.SignalProcessor(true);
        return me.processor;
    },
    /**
     * Process the signal into a spectrum.
     * @param {Array} signal
     **/
    process: function (signal) {
        var me = this;

        var c = [].interpolate(0, Math.floor(signal.length / me.step), function (t) {
            return me.getprocessor().fft(signal.subset(t * me.step, (t + 1) * me.step))
        }).select(function (x) {
            return x.skipEvery(2, function (t) { return t; })
        });
        var res = new Float32Array(signal.length);
        c.foreach(function (t, i) {
            t.foreach(function (x, j) {
                res[i * me.step + j] = x;
            });
        })
        var max = res.max(function (x) {
            return x;
        });
        var min = res.min(function (x) {
            return x;
        });

        return {
            res: res,
            max: max,
            min: min
        };
    },
    positionCanvas: function (canvas, width, height) {
        Style.width(canvas, width);
        Style.height(canvas, height);
    },
    convertSourceToRGB: function (source) {
        var me = this,
            source = source.res;
        source = source.select(function (t) { return Math.pow(t, 1); });
        var max = source.max(function (x) {
            return x;
        });
        var min = source.min(function (x) {
            return x;
        });
        return source.select(function (t) {
            return ((t - min) / max) * 255;
        });
    },
    /**
     * Renders a spectrogram
     * @param {Array} source 
     **/
    render: function (source) {
        var me = this;

        if (me.animFrame !== null) {
            cancelAnimationFrame(me.animFrame);
        }
        me.animFrame = requestAnimationFrame(function () {
            var rows,
                columns,
                headers;

            me.animFrame = null;

            if (!me.rendered) {
                me.renderer.setCanvas(me.canvas);
            }

            me.renderer.clear();
            var res = me.convertSourceToRGB(source);
            var ctx = me.renderer.getContext();
            var imgData = ctx.createImageData(Math.floor(res.length / me.step), me.step);
            var i;

            for (i = 0; i < imgData.data.length; i = i + 4) {
                //     var val = parseFloat((res[i] || 0).toString());
                imgData.data[i] = res[i];
                imgData.data[i + 1] = res[i + 1];
                imgData.data[i + 2] = 155;
                imgData.data[i + 3] = 255;

            }

            //for (var i = 0; i < imgData.data.length; i++) {
            //    //   imgData.data[i] = Math.round(255 * Math.random());
            //}

            var canvasheight = me.body.clientHeight;
            var canvaswidth = me.body.clientWidth;

            me.positionCanvas(me.canvas, canvaswidth, canvasheight);
            me.renderer.draw({
                simple: true,
                shape: MEPH.util.Renderer.shapes.canvas,
                canvas: imgData
            })
        });
    }
})﻿describe("MEPH/signalprocessing/Spectrogram.spec.js", 'MEPH.signalprocessing.Spectrogram', function () {
    var SignalProcessor = MEPH.signalprocessing.SignalProcessor;

    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });
    var createSin = function (length) {
        var input = new Float32Array(length);
        input.foreach(function (x, index) {
            input[index] = Math.cos(Math.PI * index / 16);
        });
        return input;
    }

    it("can create a Spectrogram", function () {
        //Arrange

        //Assert
        var spectrogram = new MEPH.signalprocessing.Spectrogram();

        expect(spectrogram).toBeTruthy();
    });

    it('a signal can be processed', function () {
        var spectrogram = new MEPH.signalprocessing.Spectrogram();
        spectrogram.source = createSin(10000);
        var res = spectrogram.process(spectrogram.source);
        expect(res).toBeTruthy();
    });

    it('can render a spectrogram', function (done) {
        MEPH.render('MEPH.signalprocessing.Spectrogram', 'spectrogram').then(function (r) {
            var called,
                results = r.res;
            var app = r.app;

            var dom,
                spectrogram = results.first().classInstance;
            ///Assert
            dom = spectrogram.getDomTemplate().first()
            var data = spectrogram.process(createSin(10000));
            spectrogram.render = function () {
                called = true;
            }
            spectrogram.data = data;
            expect(called).toBeTruthy();
            expect(dom).toBeTruthy();
            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        })
    });
});﻿describe("MEPH/signalprocessing/SignalProcessor.spec.js", 'MEPH.signalprocessing.SignalProcessor', function () {
    var SignalProcessor = MEPH.signalprocessing.SignalProcessor;

    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });
    var createSin = function (length) {
        var input = new Float32Array(length);
        input.foreach(function (x, index) {
            input[index] = Math.cos(Math.PI * index / 16);
        });
        return input;
    }

    it("can create a SignalProcessor", function () {
        //Arrange

        //Assert
        var input = new SignalProcessor();

        expect(input).toBeTruthy();

    });

    it('can take the fft of an array32', function () {

        var sp = new SignalProcessor();
        var input = createSin(32);

        var res = sp.fft(input);

        expect(res.length).toBe(64);
    });

    it('can take the fft and find the most common frequency', function () {

        var sp = new SignalProcessor();
        var length = 22100;
        var sampleRate = 44100;
        var input = new Float32Array(length);
        input.foreach(function (x, index) {
            input[index] = Math.sin(index / sampleRate * 261.626 * Math.PI);// * Math.sin(index / sampleRate * 698.5 * Math.PI);
        });

        // This kinda works, but only for a single frequency.
        var freq1 = sp.frequency(input, sampleRate, 2048);

        var input = new Float32Array(length);
        input.foreach(function (x, index) {
            input[index] = Math.sin(index / sampleRate * 461.626 * Math.PI);// * Math.sin(index / sampleRate * 698.5 * Math.PI);
        });

        var freq2 = sp.frequency(input, sampleRate, 2048);
    })

    xit('can take a guess at the frequency', function () {

        var sp = new SignalProcessor();
        var length = 22100;
        var sampleRate = 44100;
        var input = new Float32Array(length);
        input.foreach(function (x, index) {
            input[index] = Math.sin(index / sampleRate * 261.626 * Math.PI * 2);// * Math.sin(index / sampleRate * 698.5 * Math.PI);
        });
        // This kinda works, but only for a single frequency.
        var freq1 = sp.guessfrequency(input, sampleRate, 2048);

        var freq2 = sp.guessfrequency(input, sampleRate, 1024);

        var freq3 = sp.guessfrequency(input, sampleRate, 512);

        var freq4 = sp.guessfrequency(input, sampleRate, 4096);

        var freq5 = sp.guessfrequency(input, sampleRate, 4096 * 2);

        var freq6 = sp.guessfrequency(input, sampleRate, 4096 * 2 * 2);

        var freq7 = sp.guessfrequency(input, sampleRate, 4096 * 2 * 2 * 2);
    });

    it('can guess frequencies over time ', function () {
        var sp = new SignalProcessor();
        var length = 50000;
        var sampleRate = 44100;
        var input = new Float32Array(length);
        input.foreach(function (x, index) {
            if (index > length / 2)
                input[index] = Math.sin(index / sampleRate * 261.626 * Math.PI);// * Math.sin(index / sampleRate * 698.5 * Math.PI);
            else
                input[index] = Math.sin(index / sampleRate * 698.5 * Math.PI);
        });

        var frequencies = sp.guessfrequencies(input, sampleRate, 8000, 4096, 256);
    })


    it('can guess notes over time ', function () {
        var sp = new SignalProcessor();
        var length = 50000;
        var sampleRate = 44100;
        var input = new Float32Array(length);
        input.foreach(function (x, index) {
            if (index > length / 2)
                input[index] = Math.sin(index / sampleRate * 261.626 * Math.PI);// * Math.sin(index / sampleRate * 698.5 * Math.PI);
            else
                input[index] = Math.sin(index / sampleRate * 698.46 * Math.PI);
        });

        var frequencies = sp.getNotes(input, sampleRate, 8000, 4096, 256);
    })

    it('can guess notes over time ', function () {
        var sp = new SignalProcessor();
        var length = 50000;
        var sampleRate = 44100;
        var input = new Float32Array(length);
        input.foreach(function (x, index) {
            if (index > length / 2)
                input[index] = Math.sin(index / sampleRate * 311.13 * Math.PI);// * Math.sin(index / sampleRate * 698.5 * Math.PI);
            else
                input[index] = Math.sin(index / sampleRate * 659.25 * Math.PI);
        });

        var frequencies = sp.getNotes(input, sampleRate, 8000, 4096, 256);
    })



    it('can calculate the amplitude and phase from a FFT result.', function () {

        var sp = new SignalProcessor();
        var input = createSin(32);
        var res = sp.fft(input);

        var amplitudes = sp.amplitude(res);
        var phases = sp.phase(res);

        expect(amplitudes).toBeTruthy();
        expect(amplitudes.length).toBe(32);
        expect(phases.length).toBe(32);
        expect(phases).toBeTruthy();
    });

    it('can calculate the amplitude peaks of an array of numbers', function () {
        var sp = new SignalProcessor();
        var input = createSin(64);

        var peeks = sp.detectMaxima(input);

        expect(peeks.length).toBe(3);
        expect(peeks.first()).toBe(0);
        expect(peeks.second()).toBe(32);
        expect(peeks.nth(3)).toBe(63);
    });

    it('can calculate the amplitude peaks of an array of numbers within a certain area', function () {
        var sp = new SignalProcessor();
        var input = createSin(64);

        var peeks = sp.detectMaxima(input, 14);

        expect(peeks.length).toBe(3);
        expect(peeks.first()).toBe(0);
    });


    it('can calculate the amplitude valleys of an array of numbers', function () {
        var sp = new SignalProcessor();
        var input = createSin(64);

        var valleys = sp.detectMinima(input);

        expect(valleys.length).toBe(2);
        expect(valleys.first()).toBe(16);
        expect(valleys.second()).toBe(48);
    });


    it('can calculate the amplitude valleys of an array of numbers with in a certain area', function () {
        var sp = new SignalProcessor();
        var input = createSin(64);

        var valleys = sp.detectMinima(input, 14);

        expect(valleys.length).toBe(2);
        expect(valleys.first()).toBe(16);
    });

    it('can unwrap a series of phase theta values to limit the discontinuity', function () {
        var sp = new SignalProcessor();
        var input = [0.0, 0.78539816, 1.57079633, 5.49778714, 6.28318531];

        var result = sp.unwrap(input);
        var answ = [0.0, 0.78539816, 1.57079633, -0.78539816, 0.0];
        expect(result.all(function (x, i) { return Math.abs(answ[i]) - Math.abs(x) < .0001; })).toBeTruthy();
    });

    it('can unwrap a series of phase theta values to limit the discontinuity(FloatArray32)', function () {
        var sp = new SignalProcessor();
        var input = new Float32Array([0.0, 0.78539816, 1.57079633, 5.49778714, 6.28318531]);

        var result = sp.unwrap(input);
        var answ = new Float32Array([0.0, 0.78539816, 1.57079633, -0.78539816, 0.0]);
        expect(result.all(function (x, i) { return Math.abs(answ[i]) - Math.abs(x) < .0001; })).toBeTruthy();
    });

    it('can calculate the diff', function () {
        var sp = new SignalProcessor();
        var res = sp.diff([1, 2, 4, 7, 0]);

        expect(res[0]).toBe(1);
        expect(res[1]).toBe(2);
        expect(res[2]).toBe(3);
    });

    it('can stretch a signal of x(n) to a signal of xs(n)', function () {
        var sp = new SignalProcessor(), len = Math.pow(2, 8);

        var input = (new Float32Array(len)).select(function (x, i) {
            return Math.cos(i * Math.PI / 8 + i * Math.PI / 3);
        });

        sp.windowing(MEPH.math.Util.window.Rectangle);

        var result = sp.stretch(input, 2, 0).skipEvery(2);

        expect(result.length).toBe(len * 2);

    });

    it('can stretch a signal  by a float of x(n) to a signal of xs(n)', function () {
        var sp = new SignalProcessor(), len = Math.pow(2, 8);
        var stretch = 2.5;
        var input = (new Float32Array(len)).select(function (x, i) {
            return Math.cos(i * Math.PI / 8 + i * Math.PI / 3);
        });

        sp.windowing(MEPH.math.Util.window.Rectangle);

        var result = sp.stretch(input, stretch, 0).skipEvery(2);

        expect(result.length).toBe(len * stretch);

    });
    var createBuffer = function (t, sampleRate) {
        var resource = {
            buffer: {
                buffer: {
                    getChannelData: function () {
                        return t;
                    },
                    sampleRate: sampleRate
                },
                channelCount: 1
            }
        }
        return resource;
    }

    it('test: play , normally silent', function (done) {
        var sp = new SignalProcessor(),
            len = Math.pow(2, 15),
            sampleRate = 44100,
            stretch = 2.5,
            input = (new Float32Array(len)).select(function (x, i) {
                return Math.sin(x / sampleRate * 261.626 * Math.PI);
            });

        sp.windowing(MEPH.math.Util.window.Hamming);


        var result = sp.stretch(input, stretch, 0.5).skipEvery(2);
        var resource = {
            buffer: {
                buffer: {
                    getChannelData: function () {
                        return result;
                    },
                    sampleRate: sampleRate
                },
                channelCount: 1
            }
        };

        var audio = new MEPH.audio.Audio();

        var audioresult = audio.copyToBuffer(resource, 0, len / sampleRate);

        audio.buffer(audioresult.buffer, { name: 'buffer' }).complete();

        audio.get({ name: 'buffer' }).first().buffer.start();
        // start the source playing
        //audioresult.buffer.start();
        setTimeout(function () {
            audio.disconnect();
            done();
        }, 1000)
    })

    it('can slice a signal into windowed chunks and return an array of ffts.', function () {
        var sp = new SignalProcessor(),
            len = 1024;

        var input = (new Float32Array(len)).select(function (x, i) {
            return Math.cos(i / len * 3 * Math.PI);
        });

        sp.windowing(MEPH.math.Util.window.Triangle.bind(null, -1));

        var result = sp.fftwindows(input, 32);

        expect(result.length).toBe(len / 32);

    });


    it('can generate a seriers of Xs[K] windows ', function () {
        var sp = new SignalProcessor();
        var windows = sp.generateWindows(32, 64);
        expect(windows.length).toBe(64);
    });

    it('throws an error if the windowing isnt set.', function () {
        var sp = new SignalProcessor(),
            len = 1024;

        var input = (new Float32Array(len)).select(function (x, i) {
            return Math.cos(i / len * 3 * Math.PI);
        });
        var caught;

        try {
            var result = sp.fftwindows(input, 32);
        }
        catch (e) {
            caught = true;
        }
        expect(caught).toBeTruthy();
    });

    it('can select the window width based on the signal length ', function () {
        var sp = new SignalProcessor();

        var width = sp.windowWidth(1024);

        expect(width).toBe(32)
    });

    it('can set the windowing function for a signal processor', function () {
        var sp = new SignalProcessor();

        sp.windowing(MEPH.math.Util.window.Triangle);

        expect(sp.windowing()).toBe(MEPH.math.Util.window.Triangle)
    });

    it('can set the window joining function for a signal processor', function () {
        var sp = new SignalProcessor();

        sp.joining(MEPH.math.Util.window.Triangle);

        expect(sp.joining()).toBe(MEPH.math.Util.window.Triangle);
    });

    it('can set frame size of a signal processor', function () {
        var sp = new SignalProcessor();
        sp.frameSize(1024);

        expect(sp.frameSize()).toBe(1024);
    })

    it('can window and interleave a signal', function () {
        var sp = new SignalProcessor();
        sp.frameSize(1024);
        var input = [].interpolate(0, 4000, function (x) { return Math.cos(x / 100); });

        var res = sp.interleaveInput(input);
        expect(res.length).toBe(1024 * 2)
    });

    it('can do a fft on  the output of the interleave function', function () {
        var sp = new SignalProcessor();
        sp.frameSize(1024);
        var input = [].interpolate(0, 4000, function (x) { return Math.cos(x / 100); });

        var res = sp.interleaveInput(input);


        var output = sp.fft(res, 'complex');
        expect(output.all(function (t) { return !isNaN(t); })).toBeTruthy();
    });
    it('keeps the fftFrameSize/2 stored away', function () {
        var sp = new SignalProcessor();
        sp.frameSize(1024);

        expect(sp.framesize2).toBe(512)
    });
    it('can set the over sampling rate.', function () {
        var sp = new SignalProcessor();
        sp.oversampling(4);

        expect(sp.oversampling()).toBe(4)
    });

    it('can do an analysis of the frame', function () {
        var sp = new SignalProcessor();
        sp.frameSize(1024);
        sp.samplingRate(44100);
        var input = [].interpolate(0, 4000, function (x) { return Math.cos(x / 100); });
        var res = sp.interleaveInput(input);
        var analysisRes = sp.analysis(res);
        expect(analysisRes.mag.length).toBe(sp.framesize2);
        expect(analysisRes.freq.length).toBe(sp.framesize2);
    });

    it('can pitch shift the analysis result', function () {
        var sp = new SignalProcessor();
        sp.frameSize(1024);
        sp.samplingRate(44100);
        var input = [].interpolate(0, 4000, function (x) { return Math.cos(x / 100); });
        var res = sp.interleaveInput(input);
        var analysisRes = sp.analysis(res);
        var p = sp.pitch(analysisRes, .5);
        expect(p).toBeTruthy();
    });

    it('can synthesize the new synth frame', function () {
        var sp = new SignalProcessor();
        sp.frameSize(1024);
        sp.samplingRate(44100);
        sp.oversampling(4);
        var input = [].interpolate(0, 4000, function (x) { return Math.cos(x / 100); });
        var res = sp.interleaveInput(input);
        var analysisRes = sp.analysis(res);
        var p = sp.pitch(analysisRes, .5);
        var s = sp.synthesis(p);
        expect(s).toBeTruthy();
    });

    it('can do the inverse fft on the synthesized frame', function () {
        var sp = new SignalProcessor();
        sp.frameSize(32);
        sp.samplingRate(44100);
        sp.oversampling(1);
        var input = [].interpolate(0, 4000, function (x) { return Math.cos(x / 2) });// ;
        var res = sp.interleaveInput(input);
        var output = sp.fft(res, 'complex');
        var analysisRes = sp.analysis(output);
        var p = sp.pitch(analysisRes, 1);
        var s = sp.synthesis(p);

        var ifft = sp.ifft(s);

        expect(ifft.all(function (x) { return !isNaN(x); })).toBeTruthy();
    });
    it('can join the output of the ifft to the previously processed part', function () {
        var sp = new SignalProcessor();
        sp.frameSize(1024);
        sp.oversampling(1);
        sp.samplingRate(44100);
        var input = [].interpolate(0, 4000, function (x) { return Math.cos(Math.PI * x / 3); });
        var res = sp.interleaveInput(input);
        var output = sp.fft(res, 'complex');
        var analysisRes = sp.analysis(output);
        var p = sp.pitch(analysisRes, 1);
        var s = sp.synthesis(p);
        var ifft = sp.ifft(s);
        var newsignal = sp.unwindow(ifft, new Float32Array(ifft.length));

        expect(newsignal.length).toBe(ifft.length);
        expect(newsignal.all(function (x) { return !isNaN(x); })).toBeTruthy();
    });

    it('straight up pitch shift', function () {
        var input = [].interpolate(0, 8000, function (x) { return Math.cos(Math.PI * x / 3); });
        var sp = new SignalProcessor();
        sp.pitchShift(1, 1024, 1024, 4, 44100, input);

    });
    it('audio file pitch shifting', function (done) {


        var audio = new MEPH.audio.Audio();
        var audiofile = '../specs/data/Parasail.mp3', audiofiletyp = 'mp3';

        audio.load(audiofile, audiofiletyp).then(function (resource) {
            var sp = new SignalProcessor();

            var audioresult = audio.copyToBuffer(resource, 1, 10);
            var inbucket;
            var outbucket;
            audio.buffer(audioresult.buffer)
                .processor({
                    name: 'proce',
                    process: function (audioProcessingEvent) {
                        var inputBuffer = audioProcessingEvent.inputBuffer;
                        var inputData = audioProcessingEvent.inputBuffer.getChannelData(0);
                        var d = audioProcessingEvent.outputBuffer.getChannelData(0);
                        var hasoutput = sp.pitchShift(.95, inputData.length, inputData.length, 4, 44100, inputData, d);
                    }
                })
                .complete();

            // start the source playing
            audio.playbuffer()

            setTimeout(function () {
                audio.disconnect();
            }, 8000)
            done();
        }).catch(function (e) {
            expect(e).caught();
            done();
        });;

    });
    var getResource = function (result, sampleRate) {
        sampleRate = sampleRate || 44100
        var resource = {
            buffer: {
                buffer: {
                    getChannelData: function () {
                        return result;
                    },
                    sampleRate: sampleRate
                },
                channelCount: 1
            }
        };
        return resource;
    }

    it('it can do fft to ifft ', function (done) {
        var sp = new SignalProcessor(),
            len = 2048 * 2 * 2 * 2 * 2,
            sampleRate = 44100;

        var input = (new Float32Array(len)).select(function (i, x) {
            return .4 * Math.cos((x / sampleRate) * 2 * 311.13 * Math.PI);
        });

        var res = sp.fft(input);

        var shouldbelikeoriginal = sp.ifft(res);

        var audio = new MEPH.audio.Audio();

        var audioresult = audio.copyToBuffer(getResource(input, sampleRate), 0, len / sampleRate);

        audio.buffer(audioresult.buffer, { name: 'buffer' }).complete();
        audio.playbuffer();
        setTimeout(function () {
            var audio = new MEPH.audio.Audio();

            var audioresult = audio.copyToBuffer(getResource(shouldbelikeoriginal.skipEvery(2), sampleRate), 0, len / sampleRate);

            audio.buffer(audioresult.buffer, { name: 'buffer' }).complete();
            //audioresult.buffer.start();
            audio.playbuffer();

        }, 5000)
        setTimeout(function () {
            done();
        }, 10000);

    });

    it('if H is less than zero an error is thrown', function () {
        var thrown, sp = new SignalProcessor();
        try {
            sp.sfft(null, null, null, null, 0)
        } catch (e) {
            thrown = true;
        }
        expect(thrown).toBeTruthy();
    })

    it('can do a sfft ', function () {
        var len = 2048 * 2 * 2 * 2 * 2 * 2 * 2 * 2,
            w = 512,
            sampleRate = 44100;

        var input = (new Float32Array(len)).select(function (i, x) {
            return .4 * Math.cos((x / sampleRate) * 2 * 311.13 * Math.PI);
        });

        var sp = new SignalProcessor();

        var res = sp.sfft(input, [].interpolate(0, w, function (x) {
            return MEPH.math.Util.window.Hamming(x, w);
        }), 1024, w / 2);

        expect(res).toBeTruthy();;
        expect(res.length).toBeTruthy();
    });


    it('can do a isfft', function (done) {
        var len = 2048 * 2 * 2 * 2 * 2 * 2,
           w = 512,
           sampleRate = 44100;

        var input = (new Float32Array(len)).select(function (i, x) {
            return .4 * Math.cos((x / sampleRate) * 2 * 311.13 * Math.PI);
        });

        var audio = new MEPH.audio.Audio();

        var audioresult = audio.copyToBuffer(getResource(input, sampleRate), 0, len / sampleRate);

        audio.buffer(audioresult.buffer, { name: 'buffer' }).complete();
        audio.playbuffer();

        var sp = new SignalProcessor();


        var res = sp.sfft(input, [].interpolate(0, w, function (x) {
            return MEPH.math.Util.window.Hamming(x, w);
        }), 1024, w / 2);

        var shouldbelikeoriginal = sp.isfft(res, 1024, w / 2);
        setTimeout(function () {
            var audio = new MEPH.audio.Audio();

            var audioresult = audio.copyToBuffer(getResource(shouldbelikeoriginal, sampleRate), 0, len / sampleRate);

            audio.buffer(audioresult.buffer, { name: 'buffer' }).complete();

            audio.playbuffer();

        }, 5000)
        setTimeout(function () {
            done()
        }, 10000)
        expect(res).toBeTruthy();;
        expect(res.length).toBeTruthy();
    });

    it('can do peak detection ', function () {
        var signal = [].interpolate(0, 10, function (x) {
            if (x === 3) {
                return .4;
            }
            return .1;
        });
        var sp = new SignalProcessor();

        var locs = sp.peakDetection(signal, 0);

        expect(locs).toBeTruthy();
        expect(locs.length).toBe(1);
    });

    it('can do peak interpolation ', function () {
        var signal = [].interpolate(0, 10, function (x) { if (x === 3) { return .4; } return .1; });
        var sp = new SignalProcessor();
        var res = sp.peakInterp(signal, signal, [3]);

        expect(res).toBeTruthy();
        expect(res.locations).toBeTruthy();
        expect(res.phases).toBeTruthy();
        expect(res.magnitudes.length).toBe(1);
    });

    it(' can take a dft of a signal', function () {
        var len = 2048,
        w = 501,
        N = 1024,
        sampleRate = 44100;

        var input = (new Float32Array(len)).select(function (i, x) {
            return .99 * Math.cos((x / sampleRate) * 2 * 311.13 * Math.PI);
        });
        var aw = [].interpolate(0, w, function (x) {
            return MEPH.math.Util.window.Hamming(x, w);
        });
        var sp = new SignalProcessor();

        var res = sp.dftAnal(input, aw, N);

        expect(res).toBeTruthy();

        expect(res.pX).toBeTruthy();
        expect(res.mX).toBeTruthy();

        expect(res.pX.length).toBe(N / 2 + 1);
        expect(res.mX.length).toBe(N / 2 + 1);
    });

    it('can take the idft of a signal ', function () {
        var len = 2048,
       w = 1024,
       N = 1024,
       sampleRate = 44100;

        var input = (new Float32Array(len)).select(function (i, x) {
            return .99 * Math.cos((x / sampleRate) * 2 * 311.13 * Math.PI);
        });
        var aw = [].interpolate(0, w, function (x) {
            return MEPH.math.Util.window.Hamming(x, w);
        });
        var sp = new SignalProcessor();

        var res = sp.dftAnal(input, aw, N);

        var synthed = sp.dftSynth(res, w);

        var normed = aw.normalize();
        var likeorged = synthed.select(function (x, i) { return x / normed[i]; });

        expect(input).toBeTruthy();
    });

    it('can do sineTracking', function () {
        var sp = new SignalProcessor();
        var ipfreq = [].interpolate(0, 10, function (x) { return x; });
        var ipmag = [].interpolate(0, 10, function (x) { return x; });
        var ipphase = [].interpolate(0, 10, function (x) { return x; });
        var tfreq = [];
        var freqDevOffset;
        var freqDevSlope;

        var obj = sp.sineTracking(ipfreq, ipmag, ipphase, tfreq, freqDevOffset, freqDevSlope);
        obj = sp.sineTracking(ipfreq, ipmag, ipphase, obj.tfreq, freqDevOffset, freqDevSlope);
        expect(obj).toBeTruthy();
        expect(obj.tfreq).toBeTruthy();
        expect(obj.tmag).toBeTruthy();
        expect(obj.tphase).toBeTruthy();
    });

    xit('can do a sinusoidal model analysis', function () {

        var sampleRate = 44100;
        var len = 2032;
        var w = 256;
        var N = 1024;
        var H = 256;
        var t = 30;
        var aw = [].interpolate(0, w, function (x) {
            return MEPH.math.Util.window.Hamming(x, w);
        });
        var signal = (new Float32Array(len)).select(function (i, x) {
            return .4 * Math.cos((x / sampleRate) * 2 * 311.13 * Math.PI);
        });
        var sp = new SignalProcessor();

        var res = sp.sineModelAnal(signal, sampleRate, aw, N, H, t);

        expect(res).toBeTruthy();
        expect(res.tfreq).toBeTruthy();
        expect(res.tmag).toBeTruthy();
        expect(res.tphase).toBeTruthy();

    });

    xit('can do a sinusoidal model synthesis', function () {

        var sampleRate = 44100;
        var len = sampleRate * 2;
        var N = 4096;
        var Ns = 4096;
        var M = 2048;
        var H = Math.floor(Ns / 4);
        var t = -45;
        var fs = sampleRate;
        var w = [].interpolate(0, M, function (x) {
            return MEPH.math.Util.window.Blackman(x, M);
        });
        var signal = (new Float32Array(len)).select(function (i, x) {
            return .9 * Math.cos((x / fs) * 2 * 440 * Math.PI);
        });
        var sp = new SignalProcessor();

        var res = sp.sineModelAnal(signal, fs, w, N, H, t);

        var Y = sp.sineModelSynth(res.tfreq, res.tmag, res.tphase, Ns, H, fs);

        setTimeout(function () {
            var audio = new MEPH.audio.Audio();

            var audioresult = audio.copyToBuffer(getResource(signal, sampleRate), 0, len / sampleRate);

            audio.buffer(audioresult.buffer).complete();

            audio.playbuffer();

        }, 10)

        setTimeout(function () {
            var audio = new MEPH.audio.Audio();

            var audioresult = audio.copyToBuffer(getResource(Y, sampleRate), 0, len / sampleRate);

            audio.buffer(audioresult.buffer).complete();

            audio.playbuffer();

        }, 2000)

    });

    xit('can do sinusoidal time scaling ', function () {

        var sampleRate = 44100;
        var len = sampleRate;
        var N = 4096;
        var Ns = 4096;
        var M = 2048;
        var H = Math.floor(Ns / 4);
        var t = -45;
        var fs = sampleRate;
        var w = [].interpolate(0, M, function (x) {
            return MEPH.math.Util.window.Blackman(x, M);
        });
        var signal = (new Float32Array(len)).select(function (i, x) {
            return .9 * Math.cos((x / fs) * 2 * 440 * Math.PI);
        });
        var sp = new SignalProcessor();

        var sres = sp.sineTimeScaling([].interpolate(0, 39, function () { return [] }),
            [].interpolate(0, 39, function () { return [] }), [{
                start: 0, scale: 0
            }, {
                start: .3, scale: 1
            }, {
                start: 1, scale: 2
            }]);
    });

    xit('can do a sinusoidal scaled model synthesis', function () {

        var sampleRate = 44100;
        var len = sampleRate * 2;
        var N = 4096;
        var Ns = 4096;
        var M = 2048;
        var H = Math.floor(Ns / 4);
        var t = -45;
        var fs = sampleRate;
        var w = [].interpolate(0, M, function (x) {
            return MEPH.math.Util.window.Blackman(x, M);
        });
        var signal = (new Float32Array(len)).select(function (i, x) {
            return .9 * Math.cos((x / fs) * 2 * 440 * Math.PI);
        });
        var sp = new SignalProcessor();

        var res = sp.sineModelAnal(signal, fs, w, N, H, t);
        var sres = sp.sineTimeScaling(res.tfreq,
           res.tmag, [{
               start: 0, scale: 0
           }, {
               start: .3, scale: 1
           }, {
               start: 1, scale: 2
           }]);
        var Y = sp.sineModelSynth(sres.tfreq, sres.tmag, [], Ns, H, fs);

        setTimeout(function () {
            var audio = new MEPH.audio.Audio();

            var audioresult = audio.copyToBuffer(getResource(signal, sampleRate), 0, len / sampleRate);

            audio.buffer(audioresult.buffer).complete();

            audio.playbuffer();

        }, 10)

        setTimeout(function () {
            var audio = new MEPH.audio.Audio();

            var audioresult = audio.copyToBuffer(getResource(Y, sampleRate), 0, Y.length / sampleRate);

            audio.buffer(audioresult.buffer).complete();

            audio.playbuffer();

        }, 2000)

    });

    xit('can do a sinusoidal scaled model synthesis of a song', function (done) {

        var audio = new MEPH.audio.Audio();
        var audiofile = '../specs/data/Parasail.mp3', audiofiletyp = 'mp3';

        audio.load(audiofile, audiofiletyp).then(function (resource) {

            var sp = new SignalProcessor();
            var sampleRate = 44100;
            var len = sampleRate * 2;
            var N = 4096 * 2;
            var Ns = N;
            var M = 2048 * 2;
            var H = Math.floor(Ns / 4);
            var t = -90;
            var fs = sampleRate;
            var w = [].interpolate(0, M, function (x) {
                return MEPH.math.Util.window.Blackman(x, M);
            });
            var signal = MEPH.audio.Audio.clipBuffer(resource, sampleRate, sampleRate + len);
            signal = signal.buffer.buffer.getChannelData(0);
            //signal = (new Float32Array(len)).select(function (i, x) {
            //    return .9 * Math.cos((x / fs) * 2 * 440 * Math.PI);
            //});
            var sp = new SignalProcessor();

            var res = sp.sineModelAnal(signal, fs, w, N, H, t);
            //var sres = sp.sineTimeScaling(res.tfreq,
            //   res.tmag, [{
            //       start: 0, scale: 0
            //   }, {
            //       start: 1, scale: 2
            //   }]); 
            var Y = sp.sineModelSynth(res.tfreq, res.tmag, res.tphase, Ns, H, fs);

            setTimeout(function () {
                var audio = new MEPH.audio.Audio();

                var audioresult = audio.copyToBuffer(getResource(Y, sampleRate), 0, len / sampleRate);

                audio.buffer(audioresult.buffer).complete();

                audio.playbuffer();

            }, 10)

            setTimeout(function () {
                audio.disconnect();
                done();

            }, 4000)
        }).catch(function (e) {
            expect(e).caught();
            done();
        });;

    });

    it('can do a sinusoidal freq shift model synthesis', function () {

        var sampleRate = 44100;
        var len = sampleRate * 2;
        var N = 4096;
        var Ns = 4096;
        var M = 2048;
        var H = Math.floor(Ns / 4);
        var t = -45;
        var fs = sampleRate;
        var w = [].interpolate(0, M, function (x) {
            return MEPH.math.Util.window.Blackman(x, M);
        });
        var signal = (new Float32Array(len)).select(function (i, x) {
            return .9 * Math.cos((x / fs) * 2 * 440 * Math.PI);
        });
        var sp = new SignalProcessor();

        var res = sp.sineModelAnal(signal, fs, w, N, H, t);
        var tfreq = sp.sineFreqScaling(res.tfreq, [{
            start: 0, scale: 0
        }, {
            start: .5, scale: -.5
        }, {
            start: 1, scale: 1
        }]);
        var Y = sp.sineModelSynth(tfreq, res.tmag, [], Ns, H, fs);

        setTimeout(function () {
            var audio = new MEPH.audio.Audio();

            var audioresult = audio.copyToBuffer(getResource(signal, sampleRate), 0, len / sampleRate);

            audio.buffer(audioresult.buffer).complete();

            audio.playbuffer();

        }, 10)

        setTimeout(function () {
            var audio = new MEPH.audio.Audio();

            var audioresult = audio.copyToBuffer(getResource(Y, sampleRate), 0, Y.length / sampleRate);

            audio.buffer(audioresult.buffer).complete();

            audio.playbuffer();

        }, 2000)

    });

    it('sychronous audio file pitch shifting', function (done) {


        var audio = new MEPH.audio.Audio();
        var pitchaudio = new MEPH.audio.Audio();
        var audiofile = '../specs/data/Parasail.mp3', audiofiletyp = 'mp3';

        audio.load(audiofile, audiofiletyp).then(function (resource) {
            var sp = new SignalProcessor();

            var audioresult = audio.copyToBuffer(resource, 1, 10);
            var inbucket;
            var outbucket;

            var buffer = audioresult.buffer.buffer.getChannelData(0);
            var len = buffer.length;
            var size = 2048;
            var steps = Math.ceil(len / size);
            var cstep = 0;
            var signalres = new Float32Array(buffer.length);

            [].interpolate(0, steps, function (x) {
                var inputData = buffer.subset(x * size, (x + 1) * size);
                // var inputBuffer = audioProcessingEvent.inputBuffer;
                // var inputData = audioProcessingEvent.inputBuffer.getChannelData(0);
                var d = new Float32Array(size);
                var hasoutput = sp.pitchShift(2, inputData.length, inputData.length, 4, 44100, inputData, d);
                //var hasoutput = sp.pitchShift(.95, inputData.length, inputData.length, 4, 44100, inputData, d);
                if (hasoutput) {
                    [].interpolate(cstep * size, (cstep + 1) * size, function (t, i) {
                        signalres[t] = d[i];
                    })
                    cstep++;
                }
            });
            var sampleRate = resource.buffer.buffer.sampleRate;
            var audioresult = audio.copyToBuffer(getResource(signalres, sampleRate), 0, len / sampleRate);

            pitchaudio.buffer(audioresult.buffer).complete();

            // start the source playing
            pitchaudio.playbuffer();

            setTimeout(function () {
                pitchaudio.disconnect();

            }, 10000)
            done();
        }).catch(function (e) {
            expect(e).caught();
            done();
        });;

    });

    it('sychronous audio file pitch shifting and timestretch', function (done) {


        var audio = new MEPH.audio.Audio();
        var pitchaudio = new MEPH.audio.Audio();
        var audiofile = '../specs/data/Parasail.mp3', audiofiletyp = 'mp3';

        audio.load(audiofile, audiofiletyp).then(function (resource) {
            var sp = new SignalProcessor();

            var audioresult = audio.copyToBuffer(resource, 1, 10);
            var inbucket;
            var outbucket;

            var buffer = audioresult.buffer.buffer.getChannelData(0);
            var len = buffer.length;
            var size = 2048;
            var steps = Math.ceil(len / size);
            var cstep = 0;
            var signalres = new Float32Array(buffer.length);

            [].interpolate(0, steps, function (x) {
                var inputData = buffer.subset(x * size, (x + 1) * size);
                // var inputBuffer = audioProcessingEvent.inputBuffer;
                // var inputData = audioProcessingEvent.inputBuffer.getChannelData(0);
                var d = new Float32Array(size);
                var hasoutput = sp.timeStretch(2, 1, inputData.length, inputData.length, 4, 44100, inputData, d);
                //var hasoutput = sp.pitchShift(.95, inputData.length, inputData.length, 4, 44100, inputData, d);
                if (hasoutput) {
                    [].interpolate(cstep * size, (cstep + 1) * size, function (t, i) {
                        signalres[t] = d[i];
                    })
                    cstep++;
                }
            });
            var sampleRate = resource.buffer.buffer.sampleRate;
            var audioresult = audio.copyToBuffer(getResource(signalres, sampleRate), 0, len / sampleRate);

            pitchaudio.buffer(audioresult.buffer).complete();

            // start the source playing
            pitchaudio.playbuffer();

            setTimeout(function () {
                pitchaudio.disconnect();

            }, 10000)
            done();
        }).catch(function (e) {
            expect(e).caught();
            done();
        });;

    });

    it('can do signalanalysis ', function (done) {
        var audio = new MEPH.audio.Audio();
        var pitchaudio = new MEPH.audio.Audio();
        var audiofile = '../specs/data/Parasail.mp3', audiofiletyp = 'mp3';

        audio.load(audiofile, audiofiletyp).then(function (resource) {
            var sp = new SignalProcessor();

            var audioresult = audio.copyToBuffer(resource, 1, 10);
            var inbucket;
            var outbucket;

            var buffer = audioresult.buffer.buffer.getChannelData(0);
            var len = buffer.length;
            var size = 2048;
            var steps = Math.ceil(len / size);
            var cstep = 0;
            var signalres = new Float32Array(buffer.length);
            var res = sp.signalAnalysis(2048, 4, 44100, buffer);
            expect(res).toBeTruthy();


            done();
        }).catch(function (e) {
            expect(e).caught();
            done();
        });;
    });

    it('can do signalanalysis and the timestretch ', function (done) {
        var audio = new MEPH.audio.Audio();
        var pitchaudio = new MEPH.audio.Audio();
        var audiofile = '../specs/data/Parasail.mp3', audiofiletyp = 'mp3';

        audio.load(audiofile, audiofiletyp).then(function (resource) {
            var sp = new SignalProcessor();

            var audioresult = audio.copyToBuffer(resource, 1, 10);
            var inbucket;
            var outbucket;

            var buffer = audioresult.buffer.buffer.getChannelData(0);
            var len = buffer.length;
            var size = 2048;
            var steps = Math.ceil(len / size);
            var cstep = 0;
            var signalres = new Float32Array(buffer.length);
            var res = sp.signalAnalysis(2048, 4, 44100, buffer);
            expect(res).toBeTruthy();


            var sres = sp.timeScaling(res, [{
                start: 0, scale: 0
            }, {
                start: .3, scale: 1
            }, {
                start: 1, scale: 2
            }]);

            expect(sres).toBeTruthy();

            done();
        }).catch(function (e) {
            expect(e).caught();
            done();
        });;
    });


    it('can do signalanalysis and the pitchshift ', function (done) {
        var audio = new MEPH.audio.Audio();
        var pitchaudio = new MEPH.audio.Audio();
        var audiofile = '../specs/data/Parasail.mp3', audiofiletyp = 'mp3';

        audio.load(audiofile, audiofiletyp).then(function (resource) {
            var sp = new SignalProcessor();

            var audioresult = audio.copyToBuffer(resource, 1, 10);
            var inbucket;
            var outbucket;

            var buffer = audioresult.buffer.buffer.getChannelData(0);
            var len = buffer.length;
            var size = 2048;
            var steps = Math.ceil(len / size);
            var cstep = 0;
            var signalres = new Float32Array(buffer.length);
            var res = sp.signalAnalysis(2048, 4, 44100, buffer);
            expect(res).toBeTruthy();


            var psres = sp.signalPitchShift(res, 2, 2048, 4, 44100);
            expect(psres).toBeTruthy();

            done();
        }).catch(function (e) {
            expect(e).caught();
            done();
        });;
    });
    it('can do signalanalysis and the signalsynthesis ', function (done) {
        var audio = new MEPH.audio.Audio();
        var pitchaudio = new MEPH.audio.Audio();
        var audiofile = '../specs/data/Parasail.mp3', audiofiletyp = 'mp3';

        audio.load(audiofile, audiofiletyp).then(function (resource) {
            var sp = new SignalProcessor();
            var sampleRate = resource.buffer.buffer.sampleRate;

            var audioresult = audio.copyToBuffer(resource, 1, 10);
            var inbucket;
            var outbucket;

            var buffer = audioresult.buffer.buffer.getChannelData(0);
            var len = buffer.length;
            var size = 2048;
            var steps = Math.ceil(len / size);
            var cstep = 0;
            var signalres = new Float32Array(buffer.length);
            var res = sp.signalAnalysis(2048, 4, 44100, buffer);
            expect(res).toBeTruthy();


            var psres = sp.signalSynthesis(res, 2048, 4, 44100);

            expect(psres).toBeTruthy();

            done();
        }).catch(function (e) {
            expect(e).caught();
            done();
        });;
    });
    it('can do signalanalysis and pitchshift and the signalsynthesis ', function (done) {
        var audio = new MEPH.audio.Audio();
        var pitchaudio = new MEPH.audio.Audio();
        var audiofile = '../specs/data/Parasail.mp3', audiofiletyp = 'mp3';

        audio.load(audiofile, audiofiletyp).then(function (resource) {
            var sp = new SignalProcessor();
            var sampleRate = resource.buffer.buffer.sampleRate;

            var audioresult = audio.copyToBuffer(resource, 1, 10);
            var inbucket;
            var outbucket;

            var buffer = audioresult.buffer.buffer.getChannelData(0);
            var len = buffer.length;
            var size = 2048;
            var steps = Math.ceil(len / size);
            var cstep = 0;
            var signalres = new Float32Array(buffer.length);
            var res = sp.signalAnalysis(2048, 4, 44100, buffer);
            expect(res).toBeTruthy();

            var psres = sp.signalPitchShift(res, 1.1, 2048, 4, 44100);

            var sres = sp.signalSynthesis(psres, 2048, 4, 44100);

            var audioresult = audio.copyToBuffer(getResource(sres, sampleRate), 0, len / sampleRate);

            pitchaudio.buffer(audioresult.buffer).complete();

            // start the source playing
            pitchaudio.playbuffer();


            expect(psres).toBeTruthy();

            done();
        }).catch(function (e) {
            expect(e).caught();
            done();
        });;
    });

    it('can do signalanalysis and timescaling and the signalsynthesis ', function (done) {
        var audio = new MEPH.audio.Audio();
        var pitchaudio = new MEPH.audio.Audio();
        var audiofile = '../specs/data/Parasail.mp3', audiofiletyp = 'mp3';

        audio.load(audiofile, audiofiletyp).then(function (resource) {
            var sp = new SignalProcessor();
            var sampleRate = resource.buffer.buffer.sampleRate;

            var audioresult = audio.copyToBuffer(resource, 1, 10);
            var inbucket;
            var outbucket;

            var buffer = audioresult.buffer.buffer.getChannelData(0);
            var len = buffer.length;
            var size = 2048;
            var steps = Math.ceil(len / size);
            var cstep = 0;
            var signalres = new Float32Array(buffer.length);
            var res = sp.signalAnalysis(2048, 4, 44100, buffer);
            expect(res).toBeTruthy();


            var psres = sp.timeScaling(res, [{
                start: 0, scale: 0
            }, {
                start: .3, scale: 1
            }, {
                start: 1, scale: 2
            }]);

            var sres = sp.signalSynthesis(psres, 2048, 4, 44100);

            var audioresult = audio.copyToBuffer(getResource(sres, sampleRate), 0, len / sampleRate);

            pitchaudio.buffer(audioresult.buffer).complete();

            // start the source playing
            pitchaudio.playbuffer();


            expect(psres).toBeTruthy();

            done();
        }).catch(function (e) {
            expect(e).caught();
            done();
        });;
    });


    it('can do time and pitch adjustments', function (done) {
        var audio = new MEPH.audio.Audio();
        var pitchaudio = new MEPH.audio.Audio();
        var audiofile = '../specs/data/Parasail.mp3', audiofiletyp = 'mp3';

        audio.load(audiofile, audiofiletyp).then(function (resource) {
            var sp = new SignalProcessor();
            var sampleRate = resource.buffer.buffer.sampleRate;

            var audioresult = audio.copyToBuffer(resource, 1, 10);
            var inbucket;
            var outbucket;

            var buffer = audioresult.buffer.buffer.getChannelData(0);
            var len = buffer.length;
            var size = 2048;
            var steps = Math.ceil(len / size);
            var cstep = 0;
            var signalres = new Float32Array(buffer.length);
            var sres = sp.modifySignal(1, [{ start: 0, scale: 0 }, { start: 1, scale: 2 }], 4096, 8, 44100, buffer)

            var audioresult = audio.copyToBuffer(getResource(sres, sampleRate), 0, len / sampleRate);

            pitchaudio.buffer(audioresult.buffer).complete();

            // start the source playing
            pitchaudio.playbuffer();


            expect(sres).toBeTruthy();

            done();
        }).catch(function (e) {
            expect(e).caught();
            done();
        });;
    });

    it('can do time scaling properly ', function () {
        var sp = new SignalProcessor();
        
        var res = sp.timeScaling([].interpolate(0, 100), [{ start: 0, scale: 0 }, { start: 1, scale: 2 }]);
        var tres = sp.timeScaling([].interpolate(0, 100), [{ start: 0, scale: 0 }, { start: 1, scale: .5 }]);

        expect(res.length).toBe(200);
        expect(tres.length).toBe(50);
    })
});﻿describe("MEPH/session/SessionManager.spec.js", function () {

    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create a SessionManager.', function (done) {
        MEPH.create('MEPH.session.SessionManager').then(function ($class) {
            var sessionmanager = new $class();
            expect(sessionmanager).theTruth('a session manager was not created');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it('can detect if the client is logged in', function (done) {
        MEPH.create('MEPH.session.SessionManager').then(function ($class) {
            var sessionmanager = new $class();
            expect(sessionmanager.isLoggedIn() === false).theTruth('the session manager should return false, cause it shouldnt be logged in');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it('authorization path is passed in the constructor.', function (done) {
        MEPH.create('MEPH.session.SessionManager').then(function ($class) {
            var sessionmanager = new $class({ authorizationPath: 'path' });
            expect(sessionmanager.getAuthorizationPath() === 'path').theTruth('the authorization path wasnt as expected');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it('clientId path is passed in the constructor.', function (done) {
        MEPH.create('MEPH.session.SessionManager').then(function ($class) {
            var sessionmanager = new $class({ clientId: 'clientId' });
            expect(sessionmanager.getClientId() === 'clientId').theTruth('the clientId wasnt as expected');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });


    it('returnUri path is passed in the constructor.', function (done) {
        MEPH.create('MEPH.session.SessionManager').then(function ($class) {
            var sessionmanager = new $class({ returnUri: 'returnUri' });
            expect(sessionmanager.getReturnUri() === 'returnUri').theTruth('the returnUri wasnt as expected');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });


    it('scope is passed in the constructor.', function (done) {
        MEPH.create('MEPH.session.SessionManager').then(function ($class) {
            var sessionmanager = new $class({ scope: 'scope' });
            expect(sessionmanager.getScope() === 'scope').theTruth('the scope wasnt as expected');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it('token path is passed in the constructor.', function (done) {
        MEPH.create('MEPH.session.SessionManager').then(function ($class) {
            var sessionmanager = new $class({ token: 'token' });
            expect(sessionmanager.getToken() === 'token').theTruth('the token wasnt as expected');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it('state is passed in the constructor.', function (done) {
        MEPH.create('MEPH.session.SessionManager').then(function ($class) {
            var sessionmanager = new $class({ state: 'state' });
            expect(sessionmanager.getState() === 'state').theTruth('the state wasnt as expected');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it('state is passed in the constructor.', function (done) {
        MEPH.create('MEPH.session.SessionManager').then(function ($class) {
            var sessionmanager = new $class({ client_secret: 'client_secret' });
            expect(sessionmanager.getClientSecret() === 'client_secret').theTruth('the client_secret wasnt as expected');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });


    it('state is passed in the constructor.', function (done) {
        MEPH.create('MEPH.session.SessionManager').then(function ($class) {
            var sessionmanager = new $class({ loginRequired: true });
            expect(sessionmanager.requiresLogin()).theTruth('the session manager should rquire a login.');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    //clientId, returnUri, scope, token, state, client_secret
    it('a client can log in when the access_token becomes available.', function (done) {

        MEPH.create('MEPH.session.SessionManager').then(function ($class) {
            var sessionmanager = new $class({
                'authorizationPath': MEPH.getPath('dataviews') + '/blank.html?#access_token=token',
                'clientId': null,
                'returnUri': null,
                'state': null,
                'scope': null,
                'client_secret': null,
                'response_type': null
            });
            return sessionmanager.beginLogin().then(function (result) {
                expect(result.access_token === 'token');
            });

        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it(' can set user online name ', function (done) {
        MEPH.create('MEPH.session.SessionManager').then(function ($class) {
            var sessionmanager = new $class();
            sessionmanager.setOnlineName('ASDFA');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it(' can get user data', function (done) {
        MEPH.create('MEPH.session.SessionManager').then(function ($class) {
            var sessionmanager = new $class();
            expect(sessionmanager.getUserData('ASDFA')).toBeTruthy();
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    //clientId, returnUri, scope, token, state, client_secret
    it('will set the authorization token when received.', function (done) {

        MEPH.create('MEPH.session.SessionManager').then(function ($class) {
            var sessionmanager = new $class({
                'authorizationPath': MEPH.getPath('dataviews') + '/blank.html?#access_token=atoken',
                'clientId': null,
                'returnUri': null,
                'state': null,
                'scope': null,
                'client_secret': null,
                'response_type': null
            });
            return sessionmanager.beginLogin().then(function (result) {
                expect(MEPH.getAuthorizationToken() === 'atoken').theTruth('The authorization was not the one which was expected');
            });

        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });
});﻿describe("MEPH/session/SignalRService.spec.js", function () {

    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create a SignalRService.', function (done) {
        MEPH.create('MEPH.service.SignalRService').then(function ($class) {
            var servicecaller = new $class();

            expect(servicecaller).theTruth('there should be a service caller instance ');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });
    var setuphub = function () {
        MEPH.namespace('$.hub.server');
        MEPH.namespace('$.connection.hub');
        $.hub.server.sendAll = function () {
        };
        $.hub.client = {
            broadcastMessage: null
        };

        $.connection.hub.start = function () {
            return {
                done: function (callback) {
                    Promise.resolve().then(callback);
                    return {
                        fail: function () {

                        }
                    }
                }
            }
        };
    }
    setuphub();
    it('can start the signalrservice ', function (done) {
        var servicecaller;
        MEPH.create('MEPH.service.SignalRService').then(function ($class) {
            servicecaller = new $class({ hubPath: '$.hub' });
            return servicecaller.start();
        }).then(function () {
            expect(servicecaller.state === MEPH.service.SignalRService.state.started).theTruth('the expected state wasnt found');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it('if signalrservice isnt running yet, messages get stored in the queue', function (done) {
        var servicecaller;
        MEPH.create('MEPH.service.SignalRService').then(function ($class) {
            servicecaller = new $class({ hubPath: '$.hub' });
            return servicecaller.sendMessage({ message: true }, 'id');
        }).then(function () {
            expect(servicecaller.messages.length === 1).theTruth('message length wasnt as expected');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });


    it('if signalrservice is running , messages are removed when sent.', function (done) {
        var servicecaller;
        MEPH.create('MEPH.service.SignalRService').then(function ($class) {
            servicecaller = new $class({ hubPath: '$.hub' });
            return servicecaller.start();
        }).then(function () {
            return servicecaller.sendMessage({ message: true }, 'id');
        }).then(function () {
            expect(servicecaller.messages.length === 0).theTruth('message length wasnt as expected');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it(' when the signalrservice is running, messages in the queue are sent ', function (done) {
        var servicecaller;
        MEPH.create('MEPH.service.SignalRService').then(function ($class) {
            servicecaller = new $class({ hubPath: '$.hub' });
        }).then(function () {
            return servicecaller.sendMessage({ message: true }, 'id');
        }).then(function () {
            return servicecaller.start();
        }).then(function () {
            expect(servicecaller.messages.length === 0).theTruth('message length wasnt as expected');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it('when a message is received, it is routed to a specific channe', function (done) {
        var servicecaller;
        MEPH.create('MEPH.service.SignalRService').then(function ($class) {
            servicecaller = new $class({ hubPath: '$.hub' });
        }).then(function () {
            return servicecaller.start();
        }).then(function () {
            var promise = new Promise(function (resolve, fail) {
                servicecaller.channel('id', function (message) {
                    resolve();
                });
                $.hub.client.broadcastMessage(JSON.stringify({ channelId: 'id', id: 'id', message: {} }));
            });
            return promise;
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

});﻿describe("MEPH/session/ServiceCaller.spec.js", function () {

    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create a ServiceCaller.', function (done) {
        MEPH.create('MEPH.service.ServiceCaller').then(function ($class) {
            var servicecaller = new $class();

            expect(servicecaller).theTruth('there should be a service caller instance ');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it('can set the default resource service endpoint', function (done) {

        MEPH.create('MEPH.service.ServiceCaller').then(function ($class) {
            var servicecaller = new $class();

            servicecaller.setDefaultResourceEndpoint('defaultendpoint');

            expect(servicecaller.getDefaultResourceEndpoint() === 'defaultendpoint').theTruth('the default end point wasnt as expected');

        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it(' a defaultServiceEndpoint can be set in initialization of the serviceCaller instance ', function (done) {
        MEPH.create('MEPH.service.ServiceCaller').then(function ($class) {
            var servicecaller = new $class({
                defaultResourceEndpoint: 'defaultendpoint'
            });



            expect(servicecaller.getDefaultResourceEndpoint() === 'defaultendpoint').theTruth('the default end point wasnt as expected');

        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it('can set the api path', function (done) {
        MEPH.create('MEPH.service.ServiceCaller').then(function ($class) {
            var servicecaller = new $class();
            servicecaller.setApiPath('api');

            expect(servicecaller.getApiPath() === 'api').theTruth('The api was not as expected');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it('the api path can be set during initlization', function (done) {
        MEPH.create('MEPH.service.ServiceCaller').then(function ($class) {
            var servicecaller = new $class({ apiPath: 'api' });

            expect(servicecaller.getApiPath() === 'api').theTruth('The api was not as expected');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it(' will call service', function (done) {
        var ajax = MEPH.ajax;
        MEPH.create('MEPH.service.ServiceCaller').then(function ($class) {
            var servicecaller = new $class({ apiPath: 'api/', defaultResourceEndpoint: 'http://localhost/' });
            MEPH.ajax = function (path) {
                return Promise.resolve().then(function () {
                    return 'http://localhost/api/fieldforce/mobile/serviceorders/en' === path ? 'called' : false;
                });
            }
            return servicecaller.call('fieldforce/mobile/serviceorders/en').then(function (x) {
                expect(x === 'called').theTruth('the service caller didnt get the value expected');
            });
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            MEPH.ajax = ajax;
            done();
        });
    });


})﻿describe("MEPH/service/rtc/Connection.spec.js", function () {

    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create a webrtcconnection.', function (done) {
        MEPH.create('MEPH.service.rtc.Connection').then(function ($class) {
            var servicecaller = new $class();

            expect(servicecaller).theTruth('there should be a service caller instance ');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it('can set an id for the connection', function (done) {
        MEPH.create('MEPH.service.rtc.Connection').then(function ($class) {
            var connection = new $class({
                partyId: 'newguy', id: 'id'
            });

            expect(connection.id === 'id').theTruth('the connection id was incorrect');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });
    var webrtcDetectedBrowser = navigator.mozGetUserMedia ? 'firefox' : false,
        peerConnectionConstraints = {
            'optional': [
              { 'DtlsSrtpKeyAgreement': true },
              { 'RtpDataChannels': true }
            ]
        },
        createDefaultConnection = function () {
            var signalprovider = createSignalProvider();
            return new MEPH.service.rtc.Connection({
                id: 'id',
                to: 'to',
                partyId: 'newguy1',
                data: true,
                dataConnectionId: 'dataid',
                signalProvider: signalprovider,
                peerConnectionConfiguration: peerConnectionConfiguration,
                peerConnectionConstraints: peerConnectionConstraints
            });
        },
        localDescription = {
            'sdp': 'v=0\r\no=- 2807601466716631599 2 IN IP4 127.0.0.1\r\ns=-\r\nt=0 0\r\na=group:BUNDLE' +
                ' audio data\r\na=msid-semantic: WMS\r\nm=audio 1 RTP/SAVPF 111 103 104 0 8 106 105 13 126\r\nc=IN' +
                ' IP4 0.0.0.0\r\na=rtcp:1 IN IP4 0.0.0.0\r\na=ice-ufrag:M94M6u9C9QavOo35\r\na=ice-pwd:2p5JpLeL3r5Z14E2hxdzLH1u' +
                '\r\na=ice-options:google-ice\r\na=fingerprint:sha-256 90:6F:89:FF:BC:10:AA:E6:A3:9A:1D:05:0C:EF:D3:AF:ED:34:6B:1' +
                '4:6A:03:B5:BB:15:D2:8F:B8:D2:EA:8A:19\r\na=setup:actpass\r\na=mid:audio\r\na=extmap:1 urn:ietf:params:rtp-hdrext:' +
                'ssrc-audio-level\r\na=recvonly\r\na=rtcp-mux\r\na=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:ei0CXWCdW0H/4fjakJEGlMPsfOg' +
                'QNxVAwfDKznYW\r\na=rtpmap:111 opus/48000/2\r\na=fmtp:111 minptime=10\r\na=rtpmap:103 ISAC/16000\r\na=rtpmap:104 ISAC/' +
                '32000\r\na=rtpmap:0 PCMU/8000\r\na=rtpmap:8 PCMA/8000\r\na=rtpmap:106 CN/32000\r\na=rtpmap:105 CN/16000\r\na=rtpmap:13' +
                ' CN/8000\r\na=rtpmap:126 telephone-event/8000\r\na=maxptime:60\r\nm=application 1 RTP/SAVPF 101\r\nc=IN IP4 0.0.0.0\r\na=' +
                'rtcp:1 IN IP4 0.0.0.0\r\na=ice-ufrag:M94M6u9C9QavOo35\r\na=ice-pwd:2p5JpLeL3r5Z14E2hxdzLH1u\r\na=ice-options:google-ice\r\n' +
                'a=fingerprint:sha-256 90:6F:89:FF:BC:10:AA:E6:A3:9A:1D:05:0C:EF:D3:AF:ED:34:6B:14:6A:03:B5:BB:15:D2:8F:B8:D2' +
                ':EA:8A:19\r\na=setup:actpass\r\na=mid:data\r\na=sendrecv\r\nb=AS:30\r\na=rtcp-mux\r\na=crypto:1 AES_CM_128_HMAC_SHA1_8' +
                '0 inline:ei0CXWCdW0H/4fjakJEGlMPsfOgQNxVAwfDKznYW\r\na=rtpmap:101 google-data/90000\r\na=ssrc:725184016 cname:HXtttMTOAbI' +
                '0/q7d\r\na=ssrc:725184016 msid:dataid dataid\r\na=ssrc:725184016 mslabel:dataid\r\na=ssrc:725184016 label:dataid\r\n',
            'type': 'offer'
        },
        peerConnectionConfiguration = webrtcDetectedBrowser === 'firefox' ? {
            'iceServers': [{ 'url': 'stun:23.21.150.121' }]
        } : {
            'iceServers': [{ 'url': 'stun:stun.l.google.com:19302' }]
        },
        createSignalProvider = function () {
            var listeners = [];
            var messages = [];
            var ng1 = [];
            var ng2 = [];
            return {
                listeners: listeners,
                messages: messages,
                sendMessage: function (message, to, channel) {
                    messages.push({ message: message, to: to, channel: channel });
                    if (to === 'newguy1') {
                        if (listeners.nth(1)) {
                            ng1.foreach(function (message) {
                                listeners.nth(2).callback({ message: message });
                            });
                            ng1.removeWhere(function (x) { return true; });
                            listeners.nth(1).callback({ message: message });
                        }
                        else {
                            ng1.push(message);
                        }
                    }
                    else if (to === 'newguy2') {
                        if (listeners.nth(2)) {
                            ng2.foreach(function (message) {
                                listeners.nth(2).callback({ message: message });
                            });
                            ng2.removeWhere(function (x) { return true; });
                            listeners.nth(2).callback({ message: message });
                        }
                        else {
                            ng2.push(message);
                        }
                    }
                },
                channel: function (channel, callback) {
                    listeners.push({ channel: channel, callback: callback });
                }
            }
        };
    it('can set a signalProvider ', function (done) {
        MEPH.create('MEPH.service.rtc.Connection').then(function ($class) {
            var connection = new $class({
                id: 'id',
                partyId: 'newguy', signalProvider: createSignalProvider()
            });

            expect(connection.signalProvider).theTruth('the connection signalprovider was not set');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it('can listen on a channel for the signal provider', function (done) {
        MEPH.create('MEPH.service.rtc.Connection').then(function ($class) {
            var connection = new $class({ id: 'id', signalProvider: createSignalProvider() });

            expect(connection.signalProvider).theTruth('the connection signalprovider was not set');
            expect(connection.signalProvider.listeners.length === 1).theTruth('the signal provider was not listening.');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it('default constraints should be set', function (done) {
        MEPH.create('MEPH.service.rtc.Connection').then(function ($class) {
            var connection = new $class({ id: 'id', signalProvider: createSignalProvider() });

            expect(connection.constraints).toBeTruthy();
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it('create peer connection', function (done) {
        MEPH.create('MEPH.service.rtc.Connection').then(function ($class) {
            var connection = new $class({
                id: 'id',
                partyId: 'newguy',
                dataConnectionId: 'dataid',
                signalProvider: createSignalProvider(),
                peerConnectionConfiguration: peerConnectionConfiguration,
                peerConnectionConstraints: peerConnectionConstraints
            });
            connection.createPeerConnection();
            expect(connection.peerConnection).toBeTruthy();
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it('set datachannel to true ,if desired', function (done) {
        MEPH.create('MEPH.service.rtc.Connection').then(function ($class) {
            var connection = new $class({
                id: 'id',
                data: true,
                partyId: 'newguy',
                dataConnectionId: 'dataid',
                signalProvider: createSignalProvider(),
                peerConnectionConfiguration: peerConnectionConfiguration,
                peerConnectionConstraints: peerConnectionConstraints
            });
            connection.createPeerConnection();
            expect(connection.dataChannel).toBeTruthy();
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it('can create an offer', function (done) {
        MEPH.create('MEPH.service.rtc.Connection').then(function ($class) {
            var connection = new $class({
                id: 'id',
                data: true,
                dataConnectionId: 'dataid',
                signalProvider: createSignalProvider(),
                peerConnectionConfiguration: peerConnectionConfiguration,
                peerConnectionConstraints: peerConnectionConstraints
            });
            connection.createPeerConnection();
            return connection.createOffer().then(function (options) {
                expect(options.connection).toBeTruthy();

                expect(options.description).toBeTruthy();
            });
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });
    it(' can set the prefered opus description on the local description', function (done) {

        //localDescription

        MEPH.create('MEPH.service.rtc.Connection').then(function ($class) {
            var connection = new $class({
                id: 'id',
                data: true,
                partyId: 'newguy',
                dataConnectionId: 'dataid',
                signalProvider: createSignalProvider(),
                peerConnectionConfiguration: peerConnectionConfiguration,
                peerConnectionConstraints: peerConnectionConstraints
            });
            connection.createPeerConnection();
            return connection.setOpusDescription({
                connection: connection.peerConnection,
                description: (localDescription)
            }).then(function (options) {
                expect(options.connection).toBeTruthy();
                expect(options.description).toBeTruthy();
            });
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it(' will send a message through the channel, with the description, id, type', function (done) {
        MEPH.create('MEPH.service.rtc.Connection').then(function ($class) {
            var promise, signalprovider = createSignalProvider(),
                connection = new $class({
                    id: 'id',
                    to: 'to',
                    partyId: 'newguy',
                    data: true,
                    dataConnectionId: 'dataid',
                    signalProvider: signalprovider,
                    peerConnectionConfiguration: peerConnectionConfiguration,
                    peerConnectionConstraints: peerConnectionConstraints
                });
            connection.createPeerConnection();
            connection.connectionType = MEPH.service.rtc.Connection.Answering;
            promise = connection.sendLocalDescription(MEPH.service.rtc.Connection.Calling, {
                connection: connection.peerConnection,
                description: (localDescription)
            }).then(function (message) {
                expect(message.description).toBeTruthy();
                expect(message.type === MEPH.service.rtc.Connection.Answering).theTruth('Didnt receive an answer');
                expect(connection.promises.Answer === null).toBeTruthy();
                expect(message.connectionid = connection.id).toBeTruthy();
            });

            signalprovider.listeners.first().callback({
                to: 'newguy',
                message: {
                    description: true,
                    type: MEPH.service.rtc.Connection.Answering,
                    connectionType: MEPH.service.rtc.Connection.Answering,
                    connectionid: connection.id
                }
            });
            return promise;
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it('if the signal provider isnt expecting an answer it will throw an error', function (done) {
        MEPH.create('MEPH.service.rtc.Connection').then(function ($class) {
            var error, signalprovider = createSignalProvider(),
                connection = new $class({
                    id: 'id',
                    partyId: 'newguy',
                    to: 'to',
                    data: true,
                    dataConnectionId: 'dataid',
                    signalProvider: signalprovider,
                    peerConnectionConfiguration: peerConnectionConfiguration,
                    peerConnectionConstraints: peerConnectionConstraints
                });
            connection.createPeerConnection();
            connection.connectionType = MEPH.service.rtc.Connection.Answering;
            try {
                signalprovider.listeners.first().callback({
                    to: 'newguy',
                    message: {
                        description: true,
                        connectionType: MEPH.service.rtc.Connection.Answering,
                        type: MEPH.service.rtc.Connection.Answering,
                        connectionid: connection.id
                    }
                });
            }
            catch (err) {
                error = err;
            }
            expect(error).toBeTruthy();
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it(' when a connection received a call, it will answer', function (done) {
        MEPH.create('MEPH.service.rtc.Connection').then(function ($class) {
            var error, signalprovider = createSignalProvider(),
                connection = new $class({
                    id: 'id',
                    to: 'to',
                    data: true,
                    dataConnectionId: 'dataid',
                    signalProvider: signalprovider,
                    peerConnectionConfiguration: peerConnectionConfiguration,
                    peerConnectionConstraints: peerConnectionConstraints
                });
            return connection.receiveCall(localDescription).then(function () {
                expect(connection.peerConnection).toBeTruthy();
            });


        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it(' can set the local description ', function (done) {
        MEPH.create('MEPH.service.rtc.Connection').then(function ($class) {
            var error, signalprovider = createSignalProvider(),
                connection = new $class({
                    id: 'id',
                    to: 'to',
                    data: true,
                    dataConnectionId: 'dataid',
                    signalProvider: signalprovider,
                    peerConnectionConfiguration: peerConnectionConfiguration,
                    peerConnectionConstraints: peerConnectionConstraints
                });
            connection.createPeerConnection();
            return connection.createOffer().then(connection.setLocalDescription).then(function () {
                expect(connection.peerConnection).toBeTruthy();
            });


        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    //it(' a static function to create a remote connection', function (done) {
    //    MEPH.create('MEPH.service.rtc.Connection').then(function ($class) {
    //        var defaultConnection = createDefaultConnection(), signalprovider,
    //            message;
    //        defaultConnection.createPeerConnection();
    //        return defaultConnection.createOffer()
    //            .then(defaultConnection.setLocalDescription)
    //            .then(function (options) {
    //                message = {
    //                    message: options.description,
    //                    connectionid: defaultConnection.id,
    //                    from: 'newguy1',
    //                    type: MEPH.service.rtc.Connection.Calling
    //                };

    //                return MEPH.service.rtc.Connection.ReceiveCall(message, {
    //                    signalProvider: defaultConnection.signalProvider,
    //                    partyId: 'newguy2',
    //                    peerConnectionConfiguration: peerConnectionConfiguration,
    //                    peerConnectionConstraints: peerConnectionConstraints
    //                }).then(function (connection) {
    //                    expect(connection).toBeTruthy();
    //                });
    //            });
    //    }).catch(function (error) {
    //        expect(error).caught();
    //    }).then(function () {
    //        done();
    //    });
    //});

    //it(' complete a call', function (done) {
    //    MEPH.create('MEPH.service.rtc.Connection').then(function ($class) {
    //        var defaultConnection = createDefaultConnection(), signalprovider,
    //            message;
    //        debugger
    //        defaultConnection.createPeerConnection();
    //        return Promise.resolve().then(function () {
    //            return defaultConnection.createOffer()
    //                    .then(defaultConnection.setLocalDescription)
    //        }).then(function (option) {
    //            debugger
    //            var promise = defaultConnection.sendLocalDescription(MEPH.service.rtc.Connection.Calling, option);
    //            message = defaultConnection.signalProvider.messages.first(function (x) { return x.message.from === 'newguy1'; });
    //            return Promise.all([promise.then(function () {
    //                debugger
    //            }), MEPH.service.rtc.Connection.ReceiveCall(message.message, {
    //                partyId: 'newguy2',
    //                signalProvider: defaultConnection.signalProvider,
    //                peerConnectionConfiguration: peerConnectionConfiguration,
    //                peerConnectionConstraints: peerConnectionConstraints
    //            }).then(function (connection) {
    //                debugger
    //                expect(connection).toBeTruthy();
    //            })]);
    //        });
    //    }).catch(function (error) {
    //        expect(error).caught();
    //    }).then(function () {
    //        done();
    //    });
    //});

});﻿describe("MEPH/scrollbar/Scrollbar.spec.js", 'MEPH.scrollbar.Scrollbar', function () {
    var Scrollbar = MEPH.scrollbar.Scrollbar;

    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it("can create a scrollbar", function () {
        //Arrange

        //Assert
        var scrollbar = new MEPH.scrollbar.Scrollbar();

        expect(scrollbar).toBeTruthy();

    });

    it('can render a scrollbar', function (done) {
        MEPH.render('MEPH.scrollbar.Scrollbar', 'scrollbar').then(function (r) {
            var results = r.res;
            var app = r.app;

            var dom,
                scrollbar = results.first().classInstance;
            ///Assert
            dom = scrollbar.getDomTemplate()[0]
            expect(dom).toBeTruthy();
            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        })
    });

    it('on mouse down the state goes to dragging.', function (done) {
        MEPH.render('MEPH.scrollbar.Scrollbar', 'scrollbar').then(function (r) {
            var results = r.res;
            var app = r.app;

            var dom,
                scrollbar = results.first().classInstance;
            ///Assert
            dom = scrollbar.getDomTemplate()[0];

            scrollbar.handle.dispatchEvent(MEPH.createEvent('mousedown', { offsetX: 4, offsetY: 4 }));
            expect(scrollbar.state).toBe('dragging')
            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });

    it('on dragging 4px the bar is move , and the location is changed', function (done) {
        MEPH.render('MEPH.scrollbar.Scrollbar', 'scrollbar').then(function (r) {
            var results = r.res;
            var app = r.app;

            var dom,
                scrollbar = results.first().classInstance;

            ///Assert
            scrollbar.horizontal = true;
            scrollbar.handle.dispatchEvent(MEPH.createEvent('mousedown', { screenX: 4, screenY: 4 }));

            expect(scrollbar.start_position).toBe(4);
            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });

    it('on mouse up the state goes to nothing.', function (done) {
        MEPH.render('MEPH.scrollbar.Scrollbar', 'scrollbar').then(function (r) {
            var results = r.res;
            var app = r.app;

            var dom,
                scrollbar = results.first().classInstance;
            ///Assert
            dom = scrollbar.getDomTemplate()[0];

            scrollbar.handle.dispatchEvent(MEPH.createEvent('mousedown', { offsetX: 4, offsetY: 4 }));
            expect(scrollbar.state).toBe('dragging')
            document.body.dispatchEvent(MEPH.createEvent('mouseup', { offsetX: 4, offsetY: 4 }));
            expect(scrollbar.state).toBe(null)
            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });

    it('on mouse click on the bar , the position will shift in that direction half', function (done) {
        MEPH.render('MEPH.scrollbar.Scrollbar', 'scrollbar').then(function (r) {
            var results = r.res;
            var app = r.app;

            var dom, called,
                scrollbar = results.first().classInstance;
            ///Assert
            dom = scrollbar.getDomTemplate()[0];
            scrollbar.setBarPosition = function () {
                called = true;
            }
            scrollbar.bar.dispatchEvent(MEPH.createEvent('click', { offsetX: 4, offsetY: 4 }));
            expect(called).toBe(true)
            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });

    it('bar doesnt react to clicks on the handle', function (done) {
        MEPH.render('MEPH.scrollbar.Scrollbar', 'scrollbar').then(function (r) {
            var results = r.res;
            var app = r.app;

            var dom, called,
                scrollbar = results.first().classInstance;
            ///Assert
            dom = scrollbar.getDomTemplate()[0];
            scrollbar.setBarPosition = function () {
                called = true;
            }
            scrollbar.handle.dispatchEvent(MEPH.createEvent('click', { offsetX: 4, offsetY: 4 }));
            expect(called).toBe(undefined)
            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });

    it('horizontal scrollbar will have a height, .', function (done) {
        MEPH.render('MEPH.scrollbar.Scrollbar', 'scrollbar').then(function (r) {
            var results = r.res;
            var app = r.app;

            var dom,
                scrollbar = results.first().classInstance;
            scrollbar.horizontal = true;

            ///Assert

            expect(scrollbar.bar.clientHeight).toBeTruthy();
            expect(scrollbar.bar.clientWidth).toBeTruthy();

            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });

    it('setting the virtual width will control the scrollbar handle, .', function (done) {
        MEPH.render('MEPH.scrollbar.Scrollbar', 'scrollbar').then(function (r) {
            var results = r.res;
            var app = r.app;

            var dom, minimum = 30,
                scrollbar = results.first().classInstance;
            Style.width(scrollbar.bar, 1000);
            scrollbar.minhandlesize = minimum;
            scrollbar.virtualsize = 2000;
            scrollbar.horizontal = true;

            ///Assert
            return new Promise(function (r) {
                setTimeout(function () {

                    expect(scrollbar.handle.clientWidth).toBe(500);

                    if (app) {
                        app.removeSpace();
                    }
                    r();
                }, 100);
            });
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });
});﻿describe("MEPH/remoting/RemotingController.spec.js", function () {

    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create a Remoting COntroller.', function (done) {
        MEPH.define('MEPH.remoting.RemotingController').then(function ($class) {
            var remotingcontroller = new $class();
            expect(remotingcontroller).theTruth('no remoting controller was created');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });


});﻿describe("MEPH/qrcode/Qrcode.spec.js", function () {

    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create a qrcode.', function (done) {
        MEPH.create('MEPH.qrcode.Qrcode').then(function ($class) {
            var qrcode = new $class();
            expect(qrcode).theTruth(' no qrcode was created');
        }).catch(function (error) {
            if (error && !error.stack) {
                expect(new Error(error)).caught();
            }
            else if (error) {
                expect(error).caught();
            }
        }).then(function () {
            done();
        });;
    });
    it('can decode image ', function (done) {

        var imagepath = MEPH.getPath('dataviews');
        MEPH.create('MEPH.qrcode.Qrcode').then(function ($class) {
            var qrcode = new $class(), toresolve, tofail,
                promise = new Promise(function (resolve, fail) {
                    toresolve = resolve;
                    tofail = fail;
                });
            qrcode.callback = function (str) {
                toresolve(str);
            }
            
            qrcode.decode(imagepath + '/qrcode.png');
            return promise;
        }).then(function (result) {
            expect(result === "http://wiki.developerforce.com/page/Mobile_SDK").theTruth('the incorrect value was found');
        }).catch(function (error) {
            if (error && !error.stack) {
                expect(new Error(error)).caught();
            }
            else if (error) {
                expect(error).caught();
            }
        }).then(function () {
            done();
        });;
    });
});﻿describe("MEPH/panel/Panel.spec.js", function () {

    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create a panel.', function (done) {
        MEPH.create('MEPH.panel.Panel').then(function ($class) {
            var panel = new $class();
            expect(panel).theTruth('the panel was no created');
        }).catch(function (error) {
            if (error) {
                expect(error).caught()
            }
        }).then(function () {
            done();
        });;
    });

})﻿/**
 * @class MEPH.mobile.providers.identity.IdentityProvider
 * A base class for identity providers.
 */
MEPH.define('MEPH.mobile.providers.identity.IdentityProvider', {
    'statics': {
        maxWaitTime: 10000
    },
    properties: {
        isReady: false,
        $providerpromise: null,
        $response: null
    },
    initialize: function (args) {
        var me = this;
        me.args = args;
        me.$providerpromise = Promise.resolve();
    },
    contacts: function () {
        throw new Error('Not implemented.')
    },
    property: function () {
        throw new Error('Not implemented');
    },
    contact: function () {
        throw new Error('Not implemented');
    },
    online: function () {

        throw new Error('Not implemented');
    },
    login: function () {

        throw new Error('Not implemented');
    },
    $online: function () {

        throw new Error('Not implemented');
    },
    ready: function () {

        throw new Error('Not implemented');
    }
});﻿describe("MEPH/panel/flyout/FlyoutPanel.spec.js", function () {

    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create a mobile application.', function (done) {
        MEPH.create('MEPH.panel.flyout.FlyoutPanel').then(function ($class) {
            var panel = new $class();
            expect(panel).theTruth('the flyoutpanel was no created');
        }).catch(function (error) {
            if (error) {
                expect(error).caught()
            }
        }).then(function () {
            done();
        });;
    });

    it('a flyout panel can be pinned left/right/top/bottom.', function (done) {
        var app, div,
            dom;
        MEPH.requires('MEPH.panel.flyout.FlyoutPanel', 'MEPHTests.helper.Application').then(function () {
            app = new MEPHTests.helper.Application();
            dom = app.createAppSpace(), div = document.createElement('div');
            div.innerHTML = '<flyoutpanel></flyoutpanel>';
            return app.create('MEPH.panel.flyout.FlyoutPanel', div.firstElementChild);
        }).then(function (results) {
            return app.loadViewObject([results], dom);
        }).then(function (results) {
            var flyoutPanel = results.first().classInstance,
                toresolve, tofail,
                clicked,
                flyoutPanelDom;


            flyoutPanelDom = flyoutPanel.getDomTemplate().first(function (x) { return x.nodeType === 1; });
            flyoutPanel.position = 'left';

            setTimeout(function () {
                var correct = flyoutPanelDom.classList.toString().indexOf(flyoutPanel.positionLeft) !== -1;
                expect(correct).theTruth('The flyout panel didnt position correctly');

                if (app) {
                    app.removeSpace();
                }

                if (correct) {
                    toresolve();
                }
                else {
                    tofail(new Error('Flyout panel didnt position correctly'));
                }
            }, 300);
            return new Promise(function (resolve, fail) {
                toresolve = resolve;
                tofail = fail;
            });
        }).catch(function (error) {

            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });

    it(' when position is set on flyoutpanel node, the property will be transferred to the classInstance', function (done) {
        var app, div,
           dom;
        MEPH.requires('MEPH.panel.flyout.FlyoutPanel', 'MEPHTests.helper.Application').then(function () {
            app = new MEPHTests.helper.Application();
            dom = app.createAppSpace(), div = document.createElement('div');
            div.innerHTML = '<flyoutpanel position="left"></flyoutpanel>';
            return app.create('MEPH.panel.flyout.FlyoutPanel', div.firstElementChild);
        }).then(function (results) {
            return app.loadViewObject([results], dom);
        }).then(function (results) {
            var flyoutPanel = results.first().classInstance,
                toresolve, tofail,
                clicked,
                flyoutPanelDom;


            flyoutPanelDom = flyoutPanel.getDomTemplate().first(function (x) { return x.nodeType === 1; });

            setTimeout(function () {
                var correct = flyoutPanelDom.classList.toString().indexOf(flyoutPanel.positionLeft) !== -1;
                expect(correct).theTruth('The flyout panel didnt position correctly');

                if (app) {
                    app.removeSpace();
                }

                if (correct) {
                    toresolve();
                }
                else {
                    tofail(new Error('Flyout panel didnt position correctly'));
                }
            }, 300);
            return new Promise(function (resolve, fail) {
                toresolve = resolve;
                tofail = fail;
            });
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });

    it(' when cls is set on flyoutpanel node, the property will be transferred to the classInstance', function (done) {
        var app, div,
           dom;
        MEPH.requires('MEPH.panel.flyout.FlyoutPanel', 'MEPHTests.helper.Application').then(function () {
            app = new MEPHTests.helper.Application();
            dom = app.createAppSpace(), div = document.createElement('div');
            div.innerHTML = '<flyoutpanel cls="transferred-cls"></flyoutpanel>';
            return app.create('MEPH.panel.flyout.FlyoutPanel', div.firstElementChild);
        }).then(function (results) {
            return app.loadViewObject([results], dom);
        }).then(function (results) {
            var flyoutPanel = results.first().classInstance,
                toresolve, tofail,
                clicked,
                flyoutPanelDom;


            flyoutPanelDom = flyoutPanel.getDomTemplate().first(function (x) { return x.nodeType === 1; });

            setTimeout(function () {
                var correct = flyoutPanelDom.classList.toString().indexOf('transferred-cls') !== -1;
                expect(correct).theTruth('The flyout panel didnt add the css class');

                if (app) {
                    app.removeSpace();
                }

                if (correct) {
                    toresolve();
                }
                else {
                    tofail(new Error('The flyout panel didnt add the css class'));
                }
            }, 300);
            return new Promise(function (resolve, fail) {
                toresolve = resolve;
                tofail = fail;
            });
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });

    it('a flyout panel can be "opened"', function (done) {
        var app, div,
          dom;
        MEPH.requires('MEPH.panel.flyout.FlyoutPanel', 'MEPHTests.helper.Application').then(function () {
            app = new MEPHTests.helper.Application();
            dom = app.createAppSpace(), div = document.createElement('div');
            div.innerHTML = '<flyoutpanel position="left"></flyoutpanel>';
            return app.create('MEPH.panel.flyout.FlyoutPanel', div.firstElementChild);
        }).then(function (results) {
            return app.loadViewObject([results], dom);
        }).then(function (results) {
            var flyoutPanel = results.first().classInstance,
                toresolve, tofail,
                clicked,
                flyoutPanelDom;

            flyoutPanelDom = flyoutPanel.getDomTemplate().first(function (x) { return x.nodeType === 1; });
            flyoutPanel.$maxTransitionTime = 10;
            return flyoutPanel.open().then(function () {
                var correct = flyoutPanelDom.classList.toString().indexOf(flyoutPanel.openLeft) !== -1;
                expect(correct).theTruth('The flyout panel didnt position correctly');

                if (app) {
                    app.removeSpace();
                }
            });
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });

    it('a flyout panel can be "closed" ', function (done) {
        var app, div,
           dom;
        MEPH.requires('MEPH.panel.flyout.FlyoutPanel', 'MEPHTests.helper.Application').then(function () {
            app = new MEPHTests.helper.Application();
            dom = app.createAppSpace(), div = document.createElement('div');
            div.innerHTML = '<flyoutpanel position="left"></flyoutpanel>';
            return app.create('MEPH.panel.flyout.FlyoutPanel', div.firstElementChild);
        }).then(function (results) {
            return app.loadViewObject([results], dom);
        }).then(function (results) {
            var flyoutPanel = results.first().classInstance,
                toresolve, tofail,
                clicked,
                flyoutPanelDom;

            flyoutPanelDom = flyoutPanel.getDomTemplate().first(function (x) { return x.nodeType === 1; });
            flyoutPanel.$maxTransitionTime = 10;
            return flyoutPanel.open().then(function () { return flyoutPanel.close(); }).then(function () {
                var correct = flyoutPanelDom.classList.toString().indexOf(flyoutPanel.openLeft) === -1;
                expect(correct).theTruth('The flyout panel didnt position correctly');

                if (app) {
                    app.removeSpace();
                }
            });
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });

    it(' a flyout panel cal be "opened"  then "closed" and then "opened"', function (done) {
        var app, div,
           dom;
        MEPH.requires('MEPH.panel.flyout.FlyoutPanel', 'MEPHTests.helper.Application').then(function () {
            app = new MEPHTests.helper.Application();
            dom = app.createAppSpace(), div = document.createElement('div');
            div.innerHTML = '<flyoutpanel position="left"></flyoutpanel>';
            return app.create('MEPH.panel.flyout.FlyoutPanel', div.firstElementChild);
        }).then(function (results) {
            return app.loadViewObject([results], dom);
        }).then(function (results) {
            var flyoutPanel = results.first().classInstance,
                toresolve, tofail,
                clicked,
                flyoutPanelDom;

            flyoutPanelDom = flyoutPanel.getDomTemplate().first(function (x) { return x.nodeType === 1; });
            flyoutPanel.$maxTransitionTime = 10;
            return flyoutPanel.open().then(function () { return flyoutPanel.close(); })
                .then(function () { return flyoutPanel.open(); }).then(function () {
                    var correct = flyoutPanelDom.classList.toString().indexOf(flyoutPanel.openLeft) !== -1;
                    expect(correct).theTruth('The flyout panel didnt position correctly');

                    if (app) {
                        app.removeSpace();
                    }
                });
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });

    it('a flyout menu can have items within', function (done) {
        //Arrange
        var app, div,
          dom;
        MEPH.requires('MEPH.panel.flyout.FlyoutPanel', 'MEPHTests.helper.Application').then(function () {
            app = new MEPHTests.helper.Application();
            dom = app.createAppSpace(), div = document.createElement('div');
            div.innerHTML = '<flyoutpanel position="left"><div class="internalstuff"></div></flyoutpanel>';
            return app.create('MEPH.panel.flyout.FlyoutPanel', div.firstElementChild);
        }).then(function (results) {
            return app.loadViewObject([results], dom);
        }).then(function (results) {
            var flyoutPanel = results.first().classInstance;
            ///Assert
            expect(flyoutPanel.querySelector('.internalstuff')).theTruth('No internal stuff found.');
            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        })
    });

    it(' setting opened to true will open the flyoutmenu ', function (done) {
        //Arrange
        var app, div,
          dom;
        MEPH.requires('MEPH.panel.flyout.FlyoutPanel', 'MEPHTests.helper.Application').then(function () {
            app = new MEPHTests.helper.Application();
            dom = app.createAppSpace(), div = document.createElement('div');
            div.innerHTML = '<flyoutpanel position="left"><div class="internalstuff"></div></flyoutpanel>';
            return app.create('MEPH.panel.flyout.FlyoutPanel', div.firstElementChild);
        }).then(function (results) {
            return app.loadViewObject([results], dom);
        }).then(function (results) {
            var flyoutPanel = results.first().classInstance;
            ///Assert
            flyoutPanel.opened = true;
            return flyoutPanel.$flyoutPanelPromise.then(function () {
                expect(flyoutPanel.isOpen() === true).theTruth('the flyout panel was not opend');
            });
            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        })
    });
});﻿describe("MEPH/mobile/services/MobileServices.spec.js", function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create mobile services.', function (done) {
        //Arrange
        MEPH.create('MEPH.mobile.services.MobileServices').then(function () {
            try {
                //Act
                expect(MEPH.mobile.services.MobileServices).theTruth('Mobiles services do not exist');
                //Assert
            }
            catch (error) {
                if (error) {
                    expect(error).caught();
                }
            }
            finally {
                done();
            }
        });
    })


    it('a mobile service can return a service instance', function (done) {
        var called;
        MEPH.requires('MEPH.mobile.services.MobileServices').then(function () {
            return MEPH.define('Fake.Service', {})
        }).then(function () {

            return MEPH.IOC.register({
                name: 'serviceName',
                type: 'Fake.Service',
                config: {}
            });
        }).then(function () {
            return MEPH.MobileServices.get('serviceName');
        }).then(function (instance) {
            expect(instance instanceof Fake.Service).theTruth('The instance was not an instanceof Fake.Service');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            MEPH.undefine('Fake.Service');
            done();
        });
    });


    it('if there is no definition , null is returned.', function (done) {
        var called;
        MEPH.requires('MEPH.mobile.services.MobileServices').then(function () {
            return MEPH.define('Fake.Service', {})
        }).then(function () {
            return MEPH.MobileServices.get('fserviceName');
        }).then(function (instance) {
            expect(instance === null).theTruth('a service should not have been found.');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            MEPH.undefine('Fake.Service');
            done();
        });
    });

});﻿describe("MEPH/mobile/providers/viewprovider/ViewProvider.spec.js", function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create mobile view provider.', function (done) {
        //Arrange
        MEPH.create('MEPH.mobile.providers.viewprovider.ViewProvider').then(function ($class) {

            //Act
            var instance = new $class();

            //Assert
            expect(instance).theTruth('a mobileviewprovider couldnt be created');

        }).catch(function (error) {
            if (error) {
                expect(error).caught();
            }
        }).then(function () {
            done();
        });
    });

    it('can retrieve a set of view data ', function (done) {
        //Arrange
        MEPH.create('MEPH.mobile.providers.viewprovider.ViewProvider').then(function ($class) {
            var viewprovider = new $class({
                viewsResource: {
                    uri: 'Views.json',
                    path: 'dataviews',
                    preload: false
                }
            });
            //Act
            return viewprovider.load().then(function (rawdata) {
                expect(rawdata).theTruth('the mobileviewprovider is not loading the data');
            });

        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it('can get view from provider', function (done) {
        //Arrange
        MEPH.create('MEPH.mobile.providers.viewprovider.ViewProvider').then(function ($class) {
            var viewprovider = new $class({
                viewsResource: {
                    uri: 'Views.json',
                    path: 'dataviews',
                    preload: false
                }
            });
            //Act
            return viewprovider.getView({ viewId: '4UHP001' }).then(function (viewconfig) {
                expect(viewconfig).theTruth('The view config was not retrieved');
            });

        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });

    it('can get all views from provider', function (done) {
        //Arrange
        MEPH.create('MEPH.mobile.providers.viewprovider.ViewProvider').then(function ($class) {

            var viewprovider = new $class({
                viewsResource: {
                    uri: 'Views.json',
                    path: 'dataviews',
                    preload: false
                }
            });
            //Act
            return viewprovider.getViews().then(function (views) {
                expect(views.length > 0).theTruth('The view config was not retrieved');
            });

        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });

    it('if there is not configuration , the load promise will fail', function (done) {
        //Arrange
        MEPH.create('MEPH.mobile.providers.viewprovider.ViewProvider').then(function ($class) {
            var viewprovider = new $class();
            //Act
            return viewprovider.load().then(function () {
                expect(false).theTruth('the view provider should have failed the load');
            });

        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });
});﻿describe("MEPH/mobile/providers/menuprovider/MenuProvider.spec.js", function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create mobile view provider.', function (done) {
        //Arrange
        MEPH.create('MEPH.mobile.providers.menuprovider.MenuProvider').then(function ($class) {
            //Act
            var instance = new $class();

            //Assert
            expect(instance).theTruth('a mobileviewprovider couldnt be created');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });

    it('can retrieve a set of menu data ', function (done) {
        //Arrange
        MEPH.create('MEPH.mobile.providers.menuprovider.MenuProvider').then(function ($class) {
            var viewprovider = new $class({
                viewsResource: {
                    uri: 'Menu.json',
                    path: 'dataviews',
                    preload: false
                }
            });
            //Act
            return viewprovider.load().then(function (rawdata) {
                expect(rawdata).theTruth('the mobileviewprovider is not loading the data');
            });
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });

    it('can get menu from provider', function (done) {
        //Arrange
        MEPH.create('MEPH.mobile.providers.menuprovider.MenuProvider').then(function ($class) {
            var viewprovider = new $class({
                viewsResource: {
                    uri: 'Menu.json',
                    path: 'dataviews',
                    preload: false
                }
            });
            //Act
            return viewprovider.getMenu().then(function (menu) {
                expect(menu).theTruth('The view config was not retrieved');
            });

        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });

    it('if there is not configuration , the load promise will fail', function (done) {
        //Arrange
        MEPH.create('MEPH.mobile.providers.menuprovider.MenuProvider').then(function ($class) {
            var viewprovider = new $class();
            //Act
            return viewprovider.load().then(function () {
                expect(false).theTruth('the view provider should have failed the load');
            });
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });
});﻿describe("MEPH/mobile/providers/identity/IdentityProvider.spec.js", function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create an identity provider.', function (done) {
        //Arrange
        MEPH.create('MEPH.mobile.providers.identity.IdentityProvider').then(function ($class) {
            //Act
            var instance = new $class();

            //Assert
            expect(instance).theTruth('an identity provider could not be created.');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });

   
});﻿/**
 * @class MEPH.mobile.providers.identity.FacebookProvider
 * A base class for identity providers.
 */
MEPH.define('MEPH.mobile.providers.identity.FacebookProvider', {
    alternateNames: ['FacebookProvider'],
    extend: 'MEPH.mobile.providers.identity.IdentityProvider',
    properties: {
    },
    statics: {
        key: 'facebook',
        maxWaitTime: 10000,
        login: function () {
            return new Promise(function (r, f) {
                var $timeout = setTimeout(function () {
                    r(false);
                }, FacebookProvider.maxWaitTime);

                FB.getLoginStatus(function (response) {

                    if (response.status !== 'connected') {
                        FB.login(function (response) {
                            FacebookProvider.response = response;
                            MEPH.publish(MEPH.Constants.provider.IDENTITY_STATUS_CHANGE, {
                                status: response.status
                            });
                            MEPH.publish('facebook_provider_response', {
                                type: 'facebook', response: response
                            });
                            MEPH.publish(MEPH.Constants.ProviderStatusChange, {
                                provider: provider,
                                online: response && (response.status === 'connected')
                            });
                            if (response.status === 'connected') {
                                // Logged into your app and Facebook.
                                r(true);
                            } else if (response.status === 'not_authorized') {
                                r(false);;
                                // The person is logged into Facebook, but not your app.
                            } else {
                                // The person is not logged into Facebook, so we're not sure if
                                // they are logged into this app or not.

                                r(false);;
                            }
                        });
                    }
                    else {
                        r(true);
                    }
                });
            });
        },
        online: function (provider) {
            return new Promise(function (resolve, f) {
                var $timeout = setTimeout(function () {
                    resolve(true);
                }, FacebookProvider.maxWaitTime);
                FB.getLoginStatus(function (response) {
                    clearTimeout($timeout);
                    MEPH.publish(MEPH.Constants.ProviderStatusChange, {
                        provider: provider,
                        online: response && (response.status === 'connected')
                    });
                    resolve(response && (response.status === 'connected'));
                });

            })
        },
        init: function (args) {
            return new Promise(function (promiseresponse, f) {
                if (!MEPH.mobile.providers.identity.FacebookProvider.initStarted && args && args.appId) {
                    window.fbAsyncInit = window.fbAsyncInit || function () {
                        try {
                            FB.init({
                                cookie: true,  // enable cookies to allow the server to access 
                                // the session
                                appId: args.appId,
                                xfbml: true,
                                version: 'v2.2'
                            });

                            //FB.getLoginStatus(function (response) {
                            //    statusChangeCallback(response);
                            //}, true);
                            MEPH.publish('facebook_provider_inited', { type: 'facebook' });
                            promiseresponse();
                        } catch (e) {
                            MEPH.Log(e);
                            f(e);
                        }

                    };

                    //function statusChangeCallback(response) {
                    //    // The response object is returned with a status field that lets the
                    //    // app know the current login status of the person.
                    //    // Full docs on the response object can be found in the documentation
                    //    // for FB.getLoginStatus().
                    //    MEPH.publish(MEPH.Constants.provider.IDENTITY_STATUS_CHANGE, {
                    //        status: response.status
                    //    });
                    //    if (response) {
                    //        if (response.status === 'connected') {
                    //            //FB.api('/me', function (response) {
                    //            //    console.log('Successful login for: ' + response.name);
                    //            //});

                    //            MEPH.publish('facebook_provider_response', { type: 'facebook', response: response });
                    //        }
                    //        else {
                    //            f({ type: 'facebook', response: response });
                    //        }
                    //    }
                    //}
                    // This function is called when someone finishes with the Login
                    // Button.  See the onlogin handler attached to it in the sample
                    // code below.
                    function checkLoginState() {
                        //FB.getLoginStatus(function (response) {
                        //    statusChangeCallback(response);
                        //});
                    }

                    MEPH.mobile.providers.identity.FacebookProvider.checkLoginState = checkLoginState;
                    if (args.loginbtn) {
                        var loginbtn;
                        if (typeof args.loginbtn === 'string') {
                            loginbtn = document.querySelector(args.loginbtn);
                        }
                        else {
                            loginbtn = args.loginbtn;

                        }
                        if (loginbtn)
                            loginbtn.innerHTML = '<fb:login-button scope="public_profile,email" onlogin="MEPH.mobile.providers.identity.FacebookProvider.checkLoginState();"></fb:login-button>';
                    }
                    if (!MEPH.mobile.providers.identity.FacebookProvider.libraryLoaded) {
                        (function (d, s, id) {
                            var js, fjs = d.getElementsByTagName(s)[0];
                            if (d.getElementById(id)) { return; }
                            js = d.createElement(s); js.id = id;
                            js.src = "//connect.facebook.net/en_US/sdk.js";
                            fjs.parentNode.insertBefore(js, fjs);
                        }(document, 'script', 'facebook-jssdk'));
                        MEPH.mobile.providers.identity.FacebookProvider.libraryLoaded = true;
                    }
                    MEPH.mobile.providers.identity.FacebookProvider.initStarted = true;
                    //window.fbAsyncInit();
                }
            });
        }

    },
    properties: {
    },
    //initialize: function (args) {
    //    var me = this;
    //    me.args = args;
    //    me.$providerpromise = Promise.resolve();
    //},
    contacts: function () {
        var me = this;
        if (me.isReady) {
            return new Promise(function (r, f) {
                /* make the API call */
                FB.api(
                    "/me/friends",
                    function (response) {
                        if (response && !response.error) {
                            r(response)
                        }
                    }
                );
            })
        }
        return false;
    },
    property: function (prop) {
        var me = this;
        me.$providerpromise = me.$providerpromise.then(function () {
            return new Promise(function (resolve, f) {
                if (me.cachedResponse) {
                    resolve(me.cachedResponse);
                }
                var $timeout = setTimeout(function () {
                    resolve(null);
                }, FacebookProvider.maxWaitTime);
                me.contact().then(function (response) {
                    resolve(response);
                });
            }).then(function (response) {
                var val = null;
                if (response)
                    if (response.error) {
                        val = null;
                    }
                    else
                        switch (prop) {
                            case 'name':
                                val = response.name;
                                break;
                            case 'gender':
                                val = response.gender;
                                break;
                            case 'link':
                                val = response.link;
                                break;
                            case 'profileimage':
                                val = 'https://graph.facebook.com/' + response.id + '/picture'
                                break;
                        }
                return {
                    provider: me,
                    type: FacebookProvider.key,
                    response: response,
                    value: val
                };
            });
        });
        return me.$providerpromise;
    },
    contact: function () {
        var me = this;
        return (!me.isReady ? me.ready() : Promise.resolve()).then(function () {
            return new Promise(function (resolve, fail) {
                try {
                    if (me.cachedResponse) {
                        return me.cachedResponse;
                    }

                    FB.api('/me', function (response) {
                        if (response.error) {
                            me.cachedResponse = null;
                            fail(null);
                        }
                        console.log('Successful login for: ' + response.name);
                        me.cachedResponse = response;
                        resolve(response);
                    });
                }
                catch (e) {
                    fail(e);
                }
            })
        })
    },
    Callback: function (response) {
        var me = this;
        FacebookProvider.response = response;
        MEPH.publish(MEPH.Constants.provider.IDENTITY_STATUS_CHANGE, {
            status: response.status
        });
        MEPH.publish('facebook_provider_response', {
            type: 'facebook', response: response
        });
    },
    renderBtn: function (container) {
        var me = this;
        window.FacebookCallback = me.Callback.bind(me);
        container.innerHTML = '<fb:login-button size="medium" onlogin="FacebookCallback">Connect with Facebook</fb:login-button>';
        container.classList.add('g-signin');
        var id = 'c' + MEPH.GUID();
        container.setAttribute('id', id);
        FB.XFBML.parse(document.getElementById(id));
        me.tempBtn = container;
    },
    online: function () {
        var me = this;
        return me.ready().then(function () {
            return me.$online();
        })
    },
    login: function () {
        var me = this;
        return me.ready().then(function () {
            return FacebookProvider.login();
        })
    },
    $online: function () {
        var me = this;
        return new Promise(function (resolve, f) {
            var $timeout = setTimeout(function () {
                resolve(false);
            }, FacebookProvider.maxWaitTime);
            FB.getLoginStatus(function (response) {
                clearTimeout($timeout);
                resolve(response && (response.status === 'connected'));
                MEPH.publish(MEPH.Constants.provider.IDENTITY_STATUS_CHANGE, {
                    status: response.status
                });
                MEPH.publish('facebook_provider_response', {
                    type: 'facebook', response: response
                });
                MEPH.publish(MEPH.Constants.ProviderStatusChange, {
                    provider: me,
                    online: response && (response.status === 'connected')
                });
            });

        })
    },
    ready: function () {
        var me = this;
        me.$providerpromise = me.$providerpromise.then(function () {

            return new Promise(function (r) {
                if (me.isReady) {
                    r(FacebookProvider.key);
                    return;
                }

                var ref = MEPH.subscribe('facebook_provider_response', function (type, res) {
                    me.$response = res.response;
                    MEPH.unsubscribe(ref);
                    clearTimeout($timeout)
                });

                var refinit = MEPH.subscribe('facebook_provider_inited', function (type) {

                    me.isReady = true;
                    MEPH.unsubscribe(refinit);
                    r(FacebookProvider.key);
                    clearTimeout($timeout)
                });
                var $timeout = setTimeout(function () {
                    r(FacebookProvider.key);
                }, FacebookProvider.maxWaitTime);

                FacebookProvider.init(me.args).then(function () {
                    return me.$online();
                })
            });
        });
        return me.$providerpromise;
    }
});﻿describe("MEPH/mobile/providers/identity/FacebookProvider.spec.js", 'MEPH.mobile.providers.identity.FacebookProvider', function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create an identity provider.', function (done) {
        //Arrange
        MEPH.create('MEPH.mobile.providers.identity.FacebookProvider').then(function ($class) {
            //Act
            var instance = new $class();

            //Assert
            expect(instance).theTruth('an identity provider could not be created.');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });

    it('can load the facebook functionality ', function (done) {
        var args = {
            appId: '414388695382971'
        };
        window.FB = {
            init: function () {
            },
            getLoginStatus: function (callback) {
                callback({ status: 'connected' });
            }
        }
        MEPH.mobile.providers.identity.FacebookProvider.libraryLoaded = true;
        var facebookprovider = new FacebookProvider(args);

        facebookprovider.ready().then(function (t) {

        }).catch(function (e) {
            expect(e).caught();
        }).then(function () {
            done();
        });
    });

});﻿describe("MEPH/mobile/Application.spec.js", function () {

    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create a mobile application.', function (done) {
        //Arrange
        MEPH.create('MEPH.mobile.Application').then(function ($class) {
            var mobileapplication = new $class();

            expect(mobileapplication).theTruth('The mobile application was not created.');

        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it('can set the application name of the mobile application', function (done) {
        //Arrange
        MEPH.create('MEPH.mobile.Application').then(function ($class) {
            var mobileapplication = MEPH.App.mobileApplication({
                applicationName: 'Agresso Mobile Platform'
            });

            expect(mobileapplication.getApplicationName()).theTruth('The application name was not set correctly: ');

        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it('can set the product', function (done) {
        //Arrange
        MEPH.create('MEPH.mobile.Application').then(function ($class) {
            var mobileapplication = MEPH.App.mobileApplication({
                product: 'UNIT4'
            });

            expect(mobileapplication.getProduct()).theTruth('The application name was not set correctly: ');

        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it(' will inject the mobileapplicationcontainer into the dom', function (done) {
        MEPH.create('MEPH.mobile.Application').then(function ($class) {
            var div = document.createElement('mobileappspot');
            document.body.appendChild(div);
            var mobileApp = MEPH.App.mobileApplication({
                product: 'UNIT4'
            });
            mobileApp.applicationSelector = 'mobileappspot';
            mobileApp.injectMobileApp();
            expect(div.querySelector('mobileapplicationcontainer')).theTruth('The mobile application container was not found');
            div.parentElement.removeChild(div);

        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });;
    });


    it(' the injected mobile application container will have a controller attached', function (done) {
        MEPH.requires('MEPH.util.Dom').then(function () {
            return MEPH.create('MEPH.mobile.Application').then(function ($class) {
                var div = document.createElement('mobileappspot'),
                   mobileApp,
                   result,
                   mobileAppContainer;
                document.body.appendChild(div);
                mobileApp = MEPH.App.mobileApplication({
                    product: 'UNIT4'
                });
                mobileApp.applicationSelector = 'mobileappspot';
                mobileApp.injectMobileApp();
                mobileAppContainer = div.querySelector('mobileapplicationcontainer');
                result = MEPH.util.Dom.tryParseAttributeJson(mobileAppContainer.getAttribute(MEPH.dataObjectReferenceAttribute));
                expect(result.controller || result.ct$).theTruth('The mobile application container did not have a controller attached.');
                div.parentElement.removeChild(div);

            });
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });
});﻿describe("MEPH/mobile/mixins/Activity.spec.js", function () {
    var fakeActivityId = 'fakeActivity';
    var createActivityObject = function () {
        return {
            close: function () { return Promise.resolve().then(function () { return true; }); },
            hide: function () { return Promise.resolve().then(function () { return true; }); },
            show: function () { return Promise.resolve().then(function () { return true; }); },
            open: function () { return Promise.resolve().then(function () { return true; }); }
        };
    }
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('an activity can be mixed into an object', function (done) {
        MEPH.requires('MEPH.mobile.mixins.Activity').then(function () {
            var object = createActivityObject();
            MEPH.apply(MEPH.mobile.mixins.Activity.prototype, object);
            expect(object.isActivity).theTruth('Activity mixin was not applied');
        }).catch(function (error) {
            if (error) {
                expect(error).caught();
            }
        }).then(function (x) {
            done();
        });
    });

    it('an activity can be show', function (done) {
        MEPH.requires('MEPH.mobile.mixins.Activity').then(function () {
            var object = createActivityObject();
            MEPH.apply(MEPH.mobile.mixins.Activity.prototype, object);
            return object.initShow().then(function (result) {
                expect(result.success).theTruth('the activity was not shown');
            });
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });

    it('an activity can hide ', function (done) {
        MEPH.requires('MEPH.mobile.mixins.Activity').then(function () {
            var object = createActivityObject();
            MEPH.apply(MEPH.mobile.mixins.Activity.prototype, object);
            return object.initHide().then(function (result) {
                expect(result.success).theTruth('the activity was not shown');
            });
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });

    it('an activity can close ', function (done) {
        MEPH.requires('MEPH.mobile.mixins.Activity').then(function () {
            var object = createActivityObject();
            MEPH.apply(MEPH.mobile.mixins.Activity.prototype, object);
            return object.initClose().then(function (result) {
                expect(result.success).theTruth('the activity was not shown');
            });
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });

    it('adding a child activity  sets its parent', function (done) {
        MEPH.requires('MEPH.mobile.mixins.Activity').then(function () {
            var object = createActivityObject(),
                child = createActivityObject();
            MEPH.apply(MEPH.mobile.mixins.Activity.prototype, object);
            MEPH.apply(MEPH.mobile.mixins.Activity.prototype, child);
            object.addChildDomActivity(child);
            expect(object.getActivities().first() === child).theTruth('the child  was not the one expected');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });

    it('can set arguments', function (done) {
        MEPH.requires('MEPH.mobile.mixins.Activity').then(function () {
            var object = createActivityObject();
            MEPH.apply(MEPH.mobile.mixins.Activity.prototype, object);
            object.setActivityArguments({ args: true });
            MEPH.apply(MEPH.mobile.mixins.Activity.prototype, object);
            expect(object.getActivityArguments()).theTruth('the arguments are not set');
            expect(object).theTruth('The list of anscestors was not the corrrect length of 2 ');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });

    it('an array of anscestors can be retrieved', function (done) {
        MEPH.requires('MEPH.mobile.mixins.Activity').then(function () {
            var object = createActivityObject(),
                caught, list,
                parent = createActivityObject(),
                child = createActivityObject();
            MEPH.apply(MEPH.mobile.mixins.Activity.prototype, object);
            MEPH.apply(MEPH.mobile.mixins.Activity.prototype, child);
            MEPH.apply(MEPH.mobile.mixins.Activity.prototype, parent);
            object.addChildDomActivity(child);
            parent.addChildDomActivity(object);
            list = child.getDomAnscestors();

            expect(list.length === 2).theTruth('The list of anscestors was not the corrrect length of 2 ');
            expect(list.first() === object).theTruth('the object was not the first anscestor');
            expect(list.nth(2) === parent).theTruth('the parent was not the second anscestor');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });

    it('can get the ascenstors between the earliest common and itself', function (done) {
        MEPH.requires('MEPH.mobile.mixins.Activity').then(function () {
            var object = createActivityObject(),
                caught, list,
                parent = createActivityObject(),
                child = createActivityObject();
            MEPH.apply(MEPH.mobile.mixins.Activity.prototype, object);
            MEPH.apply(MEPH.mobile.mixins.Activity.prototype, child);
            MEPH.apply(MEPH.mobile.mixins.Activity.prototype, parent);
            object.addChildDomActivity(child);
            parent.addChildDomActivity(object);
            list = child.getAnscestorsBetween(parent);

            expect(list.length === 1).theTruth('The list of anscestors was not the corrrect length of 1 ');
            expect(list.first() === object).theTruth('the object was not the first anscestor');
            list = parent.getAnscestorsBetween(child);
            expect(list.length === 0).theTruth('The list of anscestors was not the corrrect length of 0 ');

        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });


    it('can get the earliest common anscestor', function (done) {
        MEPH.requires('MEPH.mobile.mixins.Activity').then(function () {
            var object = createActivityObject(),
                caught,
                parent = createActivityObject(),
                child = createActivityObject();
            MEPH.apply(MEPH.mobile.mixins.Activity.prototype, object);
            MEPH.apply(MEPH.mobile.mixins.Activity.prototype, child);
            MEPH.apply(MEPH.mobile.mixins.Activity.prototype, parent);
            object.addChildDomActivity(child);
            parent.addChildDomActivity(object);

            expect(child.getEarliestCommonAnscestor(parent) === parent).theTruth('The wrong anscestor was found, not the parent');
            expect(parent.getEarliestCommonAnscestor(child) === parent).theTruth('The wrong anscestor was found, not the parent');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });

    it('if there is no common anscestor it will return null.', function (done) {
        MEPH.requires('MEPH.mobile.mixins.Activity').then(function () {
            var object = createActivityObject(),
                caught,
                parent = createActivityObject(),
                child = createActivityObject(),
                child2 = createActivityObject();
            MEPH.apply(MEPH.mobile.mixins.Activity.prototype, object);
            MEPH.apply(MEPH.mobile.mixins.Activity.prototype, child);
            MEPH.apply(MEPH.mobile.mixins.Activity.prototype, parent);
            MEPH.apply(MEPH.mobile.mixins.Activity.prototype, child2);
            object.addChildDomActivity(child);
            parent.addChildDomActivity(child2);

            expect(child2.getEarliestCommonAnscestor(child) === null).theTruth('The wrong anscestor was found, not the null.');
            expect(child.getEarliestCommonAnscestor(child2) === null).theTruth('The wrong anscestor was found, not the null.');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });


    it('a child activity can not be added if it to an activity, if it already has a parent', function (done) {
        MEPH.requires('MEPH.mobile.mixins.Activity').then(function () {
            var object = createActivityObject(),
                caught, errorcaught = false,
                parent = createActivityObject(),
                child = createActivityObject();
            MEPH.apply(MEPH.mobile.mixins.Activity.prototype, object);
            MEPH.apply(MEPH.mobile.mixins.Activity.prototype, child);
            MEPH.apply(MEPH.mobile.mixins.Activity.prototype, parent);
            object.addChildDomActivity(child);
            expect(object.getActivities().first() === child).theTruth('the child  was not the one expected');
            try {
                parent.addChildDomActivity(child);
            }
            catch (error) {
                errorcaught = true;
            }
            finally {
                expect(errorcaught).theTruth('no error was caught');
            }
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });
    it('an activity can open ', function (done) {
        MEPH.requires('MEPH.mobile.mixins.Activity').then(function () {
            var object = createActivityObject();
            MEPH.apply(MEPH.mobile.mixins.Activity.prototype, object);
            return object.initOpen().then(function (result) {
                expect(result.success).theTruth('the activity was not opened');
            });
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });

    it('an activity will say if if a child is a dom child ', function (done) {
        MEPH.requires('MEPH.mobile.mixins.Activity').then(function () {
            var object = createActivityObject(),
                result,
                parent = createActivityObject();
            MEPH.apply(MEPH.mobile.mixins.Activity.prototype, object);
            MEPH.apply(MEPH.mobile.mixins.Activity.prototype, parent);
            parent.addChildDomActivity(object);
            var result = parent.isDomChild(object)
            expect(result).theTruth('The object isnt a child.');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });;
    });

    it('an activity will have an activity id, guid', function (done) {
        MEPH.requires('MEPH.mobile.mixins.Activity').then(function () {
            var object = createActivityObject(),
                result,
                parent = createActivityObject();
            MEPH.apply(MEPH.mobile.mixins.Activity.prototype, object);
            result = object.getActivityId();
            expect(result).theTruth('The object isnt a child.');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });;
    });
});﻿describe("MEPH/mobile/application/menuview/ApplicationMenuCategories.spec.js", function () {

    //beforeEach(function () {
    //    jasmine.addMatchers(MEPH.customMatchers);
    //});

});﻿/**
* @class MEPH.mobile.mixins.Activity
* A mixin for controls to register as Activities.
*/
MEPH.define('MEPH.mobile.mixins.Activity', {
    ParentAlreadySetMessage: 'Activity.js : Child already has a parent',
    isActivity: function () {
        return true;
    },
    getActivityId: function () {
        var me = this;
        me.$activityId = me.$activityId || MEPH.GUID();
        return me.$activityId;
    },
    setPath: function (path) {
        var me = this;
        me.$activityPath = path;
    },
    getPath: function () {
        var me = this;
        return me.$activityPath;
    },
    getActivityPath: function () {
        var me = this;
        return me.$activityPath;
    },
    afterShow: function () {
    },
    afterHide: function () {
    },
    /**
     * Adds an activity to the list of child dom activities.
     * @param {MEPH.mobile.mixins.Activity} activity
     **/
    addChildDomActivity: function (activity) {
        var me = this;
        me.activities = me.activities || [];
        activity.setDomParent(me);
        me.activities.push(activity);
    },
    /**
     * Sets the dom parent.
     * @param {Object} parent;
     */
    setDomParent: function (parent) {
        var me = this;
        if (me.domParent) {
            throw new Error(me.ParentAlreadySetMessage);
        }
        me.domParent = parent;

    },
    /**
     * Sets activity arguments
     * @param {Object} valuel
     **/
    setActivityArguments: function (value) {
        var me = this;
        me.activityArguments = value;
        if (me.fire) {
            me.fire('activity arguments set', { value: value });
        }
    },
    getPath: function () {
        var me = this, args;
        args = me.getActivityArguments();
        if (args) {
            return args.path || '';
        }
        return '';
    },
    /**
     * Gets the activity arguments.
     * @returns {Object}
     */
    getActivityArguments: function () {
        var me = this;
        return me.activityArguments || null;
    },
    getDomParent: function () {
        var me = this;
        return me.domParent || null;
    },
    /**
     * Gets the dom anscestors.
     * @return {Array}
     */
    getDomAnscestors: function () {
        var result = [],
            me = this,
            anscestor = me.getDomParent();
        do {
            if (anscestor) {
                result.push(anscestor);
                anscestor = anscestor.getDomParent();
            }

        }
        while (anscestor);
        return result;
    },
    /**
     * Gets child dom activities.
     * @returns {Array}
     **/
    getActivities: function () {
        var me = this;
        me.activities = me.activities || [];
        return me.activities;
    },
    /**
     * Returns true if the activity is a descendant.
     * @param {MEPH.mobile.mixins.Activity} activity
     * @returns {Boolean}
     */
    isDomChild: function (activity) {
        var me = this,
            foundActivity,
            activities = me.getActivities();
        foundActivity = activities.first(function (act) {
            return act === activity || me.isDomChild(activity);
        });

        return !!foundActivity;
    },
    /**
     * Starts the open process.
     * @param {Object} options
     * @param {Object} options.skipAnscestors
     * @returns {Promise}
     */
    initOpen: function (options) {
        var me = this,
            commonAnscestor, anscestorsToShow,
            anscestorsToOpenPromise = Promise.resolve(),
            activityToBeShownsAnscestors;
        anscestorsToShow = MEPH.Array(me.getDomAnscestors().reverse());

        if (!options || !options.skipAnscestors) {
            anscestorsToShow.foreach(function (anscestor) {
                anscestorsToOpenPromise = anscestorsToOpenPromise.then(function () {
                    return anscestor.initOpen({ skipAnscestors: true });
                });
            });
        }

        return Promise.resolve().then(anscestorsToOpenPromise).then(function () {

            if (me.show) {
                return me.open().then(function () {
                    return { success: true };
                }).catch(function () {
                    return { success: false, error: new Error('There was a problem opening: Activity.js') };
                });
            }
            return Promise.resolve().then(function () {
                return { success: true };
            });
        });
    },
    /**
     * Starts the show process.
     * @param {Object} options
     * @param {Object} options.skipAnscestors
     * @returns {Promise}
     */
    initShow: function (options) {
        var me = this,
            commonAnscestor, anscestorsToShow,
            anscestorsToShowPromise = Promise.resolve(),
            activityToBeShownsAnscestors;
        anscestorsToShow = me.getDomAnscestors();
        if (!options || !options.skipAnscestors) {
            anscestorsToShow.foreach(function (anscestor) {
                anscestorsToShowPromise = anscestorsToShowPromise.then(function () {
                    return anscestor.initShow({ skipAnscestors: true });
                });
            });
        }
        return Promise.resolve().then(anscestorsToShowPromise).then(function () {

            if (me.show) {
                return me.show().then(function () {
                    return { success: true };
                }).catch(function () {
                    return { success: false, error: new Error('There was a problem opening: Activity.js') };
                });
            }
            return Promise.resolve().then(function () {
                return { success: true };
            });
        });
    },
    /**
     * Gets the earliest common anscestors
     * @param {MEPH.mobile.mixins.Activity} activity
     **/
    getEarliestCommonAnscestor: function (activity) {
        var commonAnscestors, me = this,
            localAnscestors = MEPH.Array([me].concat(me.getDomAnscestors())),
            activityAnscestors = MEPH.Array([activity].concat(activity.getDomAnscestors()));

        commonAnscestors = activityAnscestors.where(function (x) {
            return localAnscestors.contains(function (y) { return y === x; });
        });

        return commonAnscestors.first();
    },
    /**
     * Gets the anscestors that lie between the me and the activity.
     * @param {MEPH.mobile.mixins.Activity} activity
     * @returns {Array}
     ***/
    getAnscestorsBetween: function (activity) {
        var me = this,
            results = [],
            commonAnscestor = activity.getEarliestCommonAnscestor(me);

        if (commonAnscestor) {
            var index = me.getDomAnscestors().indexOf(commonAnscestor);
            if (index !== -1) {
                results = me.getDomAnscestors().subset(0, index);
            }
        }

        return results;
    },
    /**
    * Starts the hide process.
    * @param {Object} options
    * @param {MEPH.mobile.mixins.Activity} options.activityToBeShown
    * @returns {Promise}
    */
    initHide: function (options) {
        var me = this, commonAnscestor, anscestorsToHide, anscestorsToHidePromise = Promise.resolve(),
            activityToBeShownsAnscestors;
        if (options && options.activityToBeShown && !options.skipAnscestors) {
            anscestorsToHide = me.getAnscestorsBetween(options.activityToBeShown);
            if (anscestorsToHide.length === 0) {
                anscestorsToHide = me.getDomAnscestors();
            }
            anscestorsToHide.foreach(function (anscestor) {
                anscestorsToHidePromise = anscestorsToHidePromise.then(function () {
                    return anscestor.initHide({ skipAnscestors: true });
                });
            });

        }
        return Promise.resolve().then(anscestorsToHidePromise).then(function () {

            if (me.hide) {
                if (options && options.activityToBeShown && options.activityToBeShown.getDomAnscestors().contains(function (x) { return x === me; })) {
                    return Promise.resolve().then(function () {
                        return {
                            success: true
                        }
                    });
                }
                else {
                    return me.hide().then(function () {
                        return { success: true };
                    }).catch(function () {
                        return { success: false, error: new Error('There was a problem opening: Activity.js') };
                    });
                }
            }
            return Promise.resolve().then(function () {
                return { success: true };
            });
        });
    },

    activityLoaded: function () {
        var me = this, element;

        element = me.getDomTemplate().first(function (x) { return x.nodeType === MEPH.util.Dom.elementType; });
        element.dispatchEvent(MEPH.createEvent('activityload', { activity: me }));
        me.getDomTemplate().foreach(function (dom) {
            me.don('activityload', dom, function (evnt) {
                if (evnt.parentset) {
                    evnt.preventDefault();
                    return false;
                }
                me.addChildDomActivity(evnt.activity);
                evnt.parentset = true
                evnt.preventDefault();
                return false;
            }, me);
            me.don(MEPH.mobile.activity.view.ActivityView.CloseActivity, dom, function (evnt) {
                MEPH.publish(MEPH.Constants.closeView, { activity: me });
            }, me);
        });
    },
    /**
    * Starts the close process.
    * @returns {Promise}
    */
    initClose: function () {
        var me = this,
            promise = Promise.resolve(),
            activities = me.getActivities();

        activities.foreach(function (activity) {
            promise = promise.then(function () {
                return activity.initClose();
            });
        });

        return Promise.resolve().then(promise).then(function () {
            if (me.close) {
                return me.close().then(function (success) {
                    return { success: success };
                });
            }
            return Promise.resolve().then(function () {
                return { success: true };
            }).catch(function () {
                return { success: false, error: new Error('There was a problem opening: Activity.js') };
            });
        });
    }
});﻿MEPH.define('MEPH.Constants', {
    statics: {
        applicationReady: 'MEPH.events.APPLICATION_READY',
        serviceTypeChanged: 'MEPH.events.SERVICE_TYPE_CHANGED',
        startView: 'MEPH.events.StartView',
        showView: 'MEPH.events.ShowView',
        ACTIVITY_CONTROLLER_CHANNEL: 'MEPH.ACTIVITY_CONTROLLER_CHANNEL',
        RemoteControlRequest: 'MEPH.RemoteControlRequest',
        RemoteControlRequestComplete: 'MEPH.RemoteControlRequestComplete',
        RequestControllAccess: 'MEPH.RequestControllAccess',
        ActivityStarted: 'ActivityStarted',
        ACTIVITY_HEART_BEAT: 'MEPH.ACTIVITY_HEART_BEAT',
        closeView: 'MEPH.events.closeView',
        ActivityDestroyed: 'ActivityDestroyed',
        REQUEST_BLOB_SAVE: 'REQUEST_BLOB_SAVE',
        OPEN_ACTIVITY: 'OPEN_ACTIVITY',
        provider: {
            PROVIDERONLINE:'PROVIDERONLINE',
            IDENTITY_STATUS_CHANGE: 'IDENTITY_STATUS_CHANGE'
        }
    }
});﻿describe("MEPH/mobile/application/menuview/ApplicationMenuView.spec.js", function () {

    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create a applicationmenuview instance ', function (done) {
        MEPH.requires('MEPH.mobile.application.menuview.ApplicationMenuView').then(function ($class) {
            expect(new MEPH.mobile.application.menuview.ApplicationMenuView()).theTruth('the applicationmenuview didnt create an instance');
        }).catch(function (error) {
            expect(new Error('something when wrong when trying to create a applicatiomenuview')).caught();
        }).then(function (x) {
            done();
        });
    });

    it('application menu will get the menuinformation from a menu provider, when load is called.', function (done) {

        MEPH.requires('MEPH.mobile.application.menuview.ApplicationMenuView', 'MEPH.application.Application', 'MEPH.mobile.providers.menuprovider.MenuProvider', 'MEPH.mobile.activity.ActivityController',
                     'MEPH.mobile.services.MobileServices', 'MEPH.ioc.Container').then(function () {

                         return MEPH.IOC.register({
                             name: 'menuProvider',
                             type: 'MEPH.mobile.providers.menuprovider.MenuProvider',
                             config: {
                                 viewsResource: {
                                     uri: 'Menu.json',
                                     path: 'dataviews',
                                     preload: false
                                 },
                                 root: 'menu'
                             }
                         });

                     }).then(function () {
                         var applicationmenuview = new MEPH.mobile.application.menuview.ApplicationMenuView();
                         return applicationmenuview.loadMenu().then(function () {
                             var data = applicationmenuview.getMenuData();
                             expect(data).theTruth('There was no data');
                         });
                     }).catch(function (error) {
                         expect(new Error('something when wrong ')).caught();
                     }).then(function (x) {
                         done();
                     });
    });
});﻿describe("MEPH/mobile/application/menu/ApplicationMenuProvider.spec.js", function () {

    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create an application menu provider.', function (done) {
        MEPH.create('MEPH.mobile.application.menu.ApplicationMenuProvider').then(function ($class) {
            var menu = new $class();

            expect(menu).theTruth('the application menu provider was not created.');

        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });

    it(' an application menu provider , shall receive a list of the providers it will hold', function (done) {
        var called;
        MEPH.requires('MEPH.mobile.services.MobileServices').then(function () {
            return MEPH.define('Fake.Service', {
                getCollection: function () {
                    called = true;
                }
            });
        }).then(function () {
            return MEPH.IOC.register({
                name: 'aservice',
                type: 'Fake.Service',
                config: {}
            });
        }).then(function () {
            return MEPH.create('MEPH.mobile.application.menu.ApplicationMenuProvider').then(function ($class) {
                var menu = new $class({
                    providers: ['aservice']
                });

                expect(menu).theTruth('the application menu provider was not created.');
                return menu.getMenuItemProviders().then(function (result) {
                    
                    expect(result.length === 1).theTruth('the result was incorrect.');
                });
            });
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            MEPH.undefine('Fake.Service');
            done();
        });
    });

    it('will return an array of providers when getProviders is called', function () {

    });
});﻿describe("MEPH/mobile/application/menu/ApplicationMenu.spec.js", function () {

    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create an application menu.', function (done) {
        MEPH.create('MEPH.mobile.application.menu.ApplicationMenu').then(function ($class) {
            var menu = new $class();

            expect(menu).theTruth('the application menu was not created.');

        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });

    it(' setting opened to true will open the flyoutmenu ', function (done) {
        //Arrange
        var app, div,
          dom;
        MEPH.requires('MEPH.mobile.application.menu.ApplicationMenu', 'MEPHTests.helper.Application').then(function () {
            app = new MEPHTests.helper.Application();
            dom = app.createAppSpace(), div = document.createElement('div');
            div.innerHTML = '<applicationmenu position="left"><div class="internalstuff"></div></applicationmenu>';
            return app.create('MEPH.mobile.application.menu.ApplicationMenu', div.firstElementChild);
        }).then(function (results) {
            return app.loadViewObject([results], dom);
        }).then(function (results) {
            var applicationmenu = results.first().classInstance;
            ///Assert
            applicationmenu.opened = true;
            return applicationmenu.open().then(function () {
                //Assert

                expect(applicationmenu.isOpen()).theTruth('the menu was not open.');
                if (app) {
                    app.removeSpace();
                }
            })
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });

    it('will get the menu providers from the MobileServices', function (done) {
        var old;
        MEPH.create('MEPH.mobile.application.menu.ApplicationMenu').then(function ($class) {
            //MEPH.mobile.application.menu.ApplicationMenuProvider
            var appmenu = new $class();
            old = MEPH.MobileServices.get;
            MEPH.MobileServices.get = function () {
                return Promise.resolve().then(function () {
                    return {
                        getMenuItemProviders: function () {
                            return Promise.resolve().then(function () { return [] });
                        }
                    }
                });
            }
            return appmenu.getMenuProviders().then(function (providers) {
                expect(providers).toBeTruthy();
            });
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            MEPH.MobileServices.get = old;
            done();
        });
    });

    it('will loadMenu by getting the collection of menu items to display for the top level', function (done) {
        MEPH.create('MEPH.mobile.application.menu.ApplicationMenu').then(function ($class) {
            //MEPH.mobile.application.menu.ApplicationMenuProvider
            var appmenu = new $class(), provider = {
                getItems: function (data, toplevel) {
                    var me = this;
                    return [{ item: 1 }, { item: 2 }];
                }
            };

            return appmenu.getMenuItems(provider, null).then(function (items) {
                expect(items.length === 2).toBeTruthy();
            });
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });

    it(' will load menu items from the menu providers', function (done) {
        var old;
        MEPH.create('MEPH.mobile.application.menu.ApplicationMenu').then(function ($class) {
            var appmenu = new $class(), provider = {
                getItems: function (data, toplevel) {
                    var me = this;
                    return [{ item: 1 }, { item: 2 }];
                }
            };
            old = MEPH.MobileServices.get;
            MEPH.MobileServices.get = function () {
                return Promise.resolve().then(function () {
                    return {
                        getMenuItemProviders: function () {
                            return Promise.resolve().then(function () { return [provider] });
                        }
                    }
                });
            }
            return appmenu.loadMenu().then(function () {
                expect(appmenu.menusource.length === 2).toBeTruthy()
            });
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            MEPH.MobileServices.get = old;
            done();
        });
    });

    it(' can find the provider from which the item came from', function (done) {
        MEPH.create('MEPH.mobile.application.menu.ApplicationMenu').then(function ($class) {
            var appmenu = new $class(), item3 = {}, provider = {
                getItems: function (data, toplevel) {
                    var me = this;
                    return [{ item: 1 }, { item: 2 }, item3];
                }
            };
            appmenu.$providersAndItems = [{ provider: provider, items: [item3] }];
            expect(appmenu.getProviderByData(item3) === provider).theTruth('the found provider was incorrect.');
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });

    it(' a provider will provide a callback function , which is executed on click, and will return true if handled' +
        'else false. in which case the menu will assume that the top menu should be shown. ', function (done) {
            MEPH.create('MEPH.mobile.application.menu.ApplicationMenu').then(function ($class) {
                var appmenu = new $class(), item3 = {}, provider = {
                    getItems: function (data, toplevel) {
                        var me = this;
                        return [{ item: 1 }, { item: 2 }, item3];
                    },
                    itemClicked: function (data) {
                        return false;
                    }
                };
                old = MEPH.MobileServices.get;
                MEPH.MobileServices.get = function () {
                    return Promise.resolve().then(function () {
                        return {
                            getMenuItemProviders: function () {
                                return Promise.resolve().then(function () { return [provider] });
                            }
                        }
                    });
                }

                return appmenu.loadMenu().then(function () {
                    return appmenu.menuItemClicked(null, null, null, null, null, null, {
                        domEvent: {
                            data: item3
                        }
                    }).then(function () {;
                        expect(appmenu.menusource.length === 3).toBeTruthy()
                    })
                });
            }).catch(function (error) {
                expect(error || new Error('did not render as expected')).caught();
            }).then(function () {
                MEPH.MobileServices.get = old;
                done();
            });
        });
    it(' a provider will return the items to display as an array', function (done) {
        MEPH.create('MEPH.mobile.application.menu.ApplicationMenu').then(function ($class) {
            var appmenu = new $class(), item3 = {}, provider = {
                getItems: function (data, toplevel) {
                    var me = this;
                    return [{ item: 1 }, { item: 2 }, item3];
                },
                itemClicked: function (data) {
                    return [item3];
                }
            };
            old = MEPH.MobileServices.get;
            MEPH.MobileServices.get = function () {
                return Promise.resolve().then(function () {
                    return {
                        getMenuItemProviders: function () {
                            return Promise.resolve().then(function () { return [provider] });
                        }
                    }
                });
            }

            return appmenu.loadMenu().then(function () {
                return appmenu.menuItemClicked(null, null, null, null, null, null, {
                    domEvent: {
                        data: item3
                    }
                }).then(function () {;
                    expect(appmenu.menusource.length === 2).toBeTruthy()
                })
            });
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            MEPH.MobileServices.get = old;
            done();
        });
    });


    it(' a provider will return the items to display as an array, returns a promise then array', function (done) {
        MEPH.create('MEPH.mobile.application.menu.ApplicationMenu').then(function ($class) {
            var appmenu = new $class(), item3 = {}, provider = {
                getItems: function (data, toplevel) {
                    var me = this;
                    return [{ item: 1 }, { item: 2 }, item3];
                },
                itemClicked: function (data) {
                    return Promise.resolve().then(function () { return [item3] });
                }
            };
            old = MEPH.MobileServices.get;
            MEPH.MobileServices.get = function () {
                return Promise.resolve().then(function () {
                    return {
                        getMenuItemProviders: function () {
                            return Promise.resolve().then(function () { return [provider] });
                        }
                    }
                });
            }

            return appmenu.loadMenu().then(function () {
                return appmenu.menuItemClicked(null, null, null, null, null, null, {
                    domEvent: {
                        data: item3
                    }
                }).then(function () {;
                    expect(appmenu.menusource.length === 2).toBeTruthy()
                })
            });
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            MEPH.MobileServices.get = old;
            done();
        });
    });


    it(' a provider will provide a callback function , which is executed on click, and will return true if handled' +
        'else false. in which case the menu will assume that the top menu should be shown. initially it returns a promise', function (done) {
            MEPH.create('MEPH.mobile.application.menu.ApplicationMenu').then(function ($class) {
                var appmenu = new $class(), item3 = {}, provider = {
                    getItems: function (data, toplevel) {
                        var me = this;
                        return [{ item: 1 }, { item: 2 }, item3];
                    },
                    itemClicked: function (data) {
                        return Promise.resolve().then(function () { return false; });
                    }
                };
                old = MEPH.MobileServices.get;
                MEPH.MobileServices.get = function () {
                    return Promise.resolve().then(function () {
                        return {
                            getMenuItemProviders: function () {
                                return Promise.resolve().then(function () { return [provider] });
                            }
                        }
                    });
                }

                return appmenu.loadMenu().then(function () {
                    return appmenu.menuItemClicked(null, null, null, null, null, null, {
                        domEvent: {
                            data: item3
                        }
                    }).then(function () {;
                        expect(appmenu.menusource.length === 3).toBeTruthy()
                    })
                });
            }).catch(function (error) {
                expect(error || new Error('did not render as expected')).caught();
            }).then(function () {
                MEPH.MobileServices.get = old;
                done();
            });
        });
});﻿/**
* @class MEPH.mobile.activity.ActivityController
* Manages activities within the application.
*/
MEPH.define('MEPH.mobile.activity.ActivityController', {
    requires: ['MEPH.Constants',
               'MEPH.mobile.services.MobileServices',
               'MEPH.mobile.mixins.Activity'],
    statics: {
        viewProvider: 'viewProvider'
    },
    properties: {
        activities: null,
        activityHolder: null,
        currentActivity: null,
        tokens: null,
        openActivityOnStop: true,
        $appPath: null,
        activityControllerPromise: null
    },
    initialize: function () {
        var me = this;
        me.activityControllerPromise = Promise.resolve();
        me.tokens = [];
        me.activities = [];
        me.tokens.push(MEPH.subscribe(MEPH.Constants.startView, me.onStartView.bind(me)));
        me.tokens.push(MEPH.subscribe(MEPH.Constants.showView, me.onShowView.bind(me)));
        me.tokens.push(MEPH.subscribe(MEPH.Constants.closeView, me.onCloseActivity.bind(me)));
        me.tokens.push(MEPH.subscribe(MEPH.Constants.OPEN_ACTIVITY, me.onOpenActivity.bind(me)));

        me.listenToStatePop();
        //window.history.pushState({ activityId: null, initial: true }, '', '');
    },
    setAppPath: function (appPath) {
        var me = this;
        me.$appPath = appPath;
    },
    getAppPath: function () {
        var me = this;
        return me.$appPath || '';
    },
    /**
     * @private
     */
    listenToStatePop: function () {
        var me = this;
        MEPH.Events(me);
        me.don('popstate', window, me.onPopState.bind(me));
    },
    /**
     * @private
     */
    onPopState: function (evnt) {
        var me = this,
            state = evnt.state,
            activity;
        MEPH.Log('on pop state ');
        if (state) {

            activity = me.getActivity(state.activityId);
            me.activityControllerPromise = me.activityControllerPromise.then(function () {
                if (activity) {
                    MEPH.Log('showing an activity');
                    return me.showActivity(activity);
                }
                else {
                    MEPH.Log('start activity from path.');
                    return me.startActivityFromPath(state.path, false)
                }
            }).catch(function (e) {
                MEPH.Log(e);
            });
            return me.activityControllerPromise;
        }
        return Promise.resolve();
    },

    startActivityFromPath: function (querystring, replacestate) {
        var me = this;
        if (!querystring) {
            return Promise.resolve();
        }
        return MEPH.MobileServices.get(MEPH.mobile.activity.ActivityController.viewProvider).then(function (viewProvider) {
            if (viewProvider) {
                return viewProvider.getViews().then(function (views) {
                    var view = views.first(function (x) { return x.path === querystring; })
                    if (view) {
                        return me.startActivity(view).then(function (result) {
                            if (replacestate) {
                                var activity = result.classInstance;
                                me.pushState(me.$window, { activityId: activity.getActivityId(), path: activity.getPath() }, '', me.getCombinedPath(activity.getPath()))
                            }
                            return result;
                        });
                    }
                    return Promise.resolve();
                });
            }
        }).then(function () {

            MEPH.Log('activity started from path.');
        }).catch(function (e) {

            MEPH.Log('activity failed to start.');
            throw e;
        });;
    },
    replaceState: function (window, state, pageName, pagePath) {
        window.history.replaceState((state), pageName, pagePath);
    },
    /**
     * @private
     * Pushes the activity state to the window for navigation.
     * @param {Window} window
     * @param {Object} state
     * @param {String} pageName
     * @param {String} pagePath
     **/
    pushState: function (window, state, pageName, pagePath) {
        window.history.pushState((state), pageName, pagePath);
    },
    /**
     * @private
     * Gets the path.
     * @param {Object} viewConfig
     * @returns {String}
     **/
    getPath: function (viewConfig) {
        if (viewConfig) {
            if (viewConfig.path) {
                return viewConfig.path;
            }
        }
        return null;
    },
    getActivityName: function (viewConfig, activity) {
        return '';
    },
    /**
     * Sets the application.
     * @param {MEPH.application.Application} application
     **/
    setApplication: function (application) {
        var me = this;
        me.application = application;
        me.application.on('controladded', me.onControlAdded.bind(me));
    },
    /**
     * Handles the addition of a control.
     **/
    onControlAdded: function (type, control) {
        var me = this;
        if (control && control.isActivity) {
            me.addActivity(control);
        }
    },
    /**
     * Gets  the application.
     * @returns {MEPH.application.Application}
     **/
    getApplication: function () {
        var me = this;
        return me.application;
    },
    /**
     * Sets the activities holder.
     * @param {Object} el
     **/
    setActivityHolder: function (el) {
        var me = this;
        me.activityHolder = el;
    },
    /**
     * Gets the activity holder.
     **/
    getActivityHolder: function () {
        var me = this;
        return me.activityHolder;
    },
    /**
     * Starts view.
     */
    onStartView: function (type, options) {
        var me = this;
        MEPH.Log('onstartview');
        me.activityControllerPromise = me.activityControllerPromise.then(function () {
            return me.startActivity(options).catch(function () {
                MEPH.Log.apply(MEPH, arguments);
            });
        }).catch(function (e) {
            MEPH.Log(e);
        }).then(function () {
            MEPH.Log('view started');
        });
    },
    onShowView: function (type, options) {
        var me = this;
        me.activityControllerPromise = me.activityControllerPromise.then(function () {
            return me.showActivity(options.activity).then(function (result) {
                if (options.activity.getActivityPath()) {
                    me.pushState(me.$window, {
                        activityId: options.activity.getActivityId(),
                        path: options.activity.getActivityPath()
                    }, '', me.getCombinedPath(options.activity.getActivityPath()));
                }
                return result;
            });;
        }).catch(function (e) {
            MEPH.Log(e);
        });
        return me.activityControllerPromise;
    },
    onCloseActivity: function (type, options) {
        var me = this;
        me.activityControllerPromise = me.activityControllerPromise.then(function () {
            return me.closeActivity(options.activity);
        }).catch(function (e) {
            MEPH.Log(e);
        }).then(function () {
            me.setCurrentActivity(null);
        });
    },
    getCombinedPath: function (path) {
        var me = this;
        try {
            return '/' + MEPH.Array(me.getAppPath().split('/').concat(path.split('/'))).where(function (x) {
                return x;
            }).join('/');
        } catch (error) {
            MEPH.Log(error);
            return '';
        }
    },
    onOpenActivity: function (type, option) {
        var me = this;
        return me.openOrCreateActivity(option, null)
    },
    openOrCreateActivity: function (activityConfig, querystring) {
        var me = this;
        me.activityControllerPromise = me.activityControllerPromise.then(function () {
            var res,
                activity = me.getActivity(activityConfig);
            var currentactivity = me.getCurrentActivity();
                
            if (activity) {
                activity.setActivityArguments(activityConfig);
                res = me.openActivity(activity).then(function (options) {
                    //var activity = options.classInstance;
                    me.pushState(me.$window, {
                        activityId: activity.getActivityId(),
                        path: activity.getActivityPath()
                    }, '', me.getCombinedPath(activity.getActivityPath()));
                    return activity;
                });
            }
            else {
                res = me.startActivity(activityConfig, querystring).then(function (options) {
                    var activity = options.classInstance;
                    //me.pushState(me.$window, {
                    //    activityId: activity.getActivityId(),
                    //    path: activity.getActivityPath()
                    //}, '', me.getCombinedPath(activity.getActivityPath()));
                    return activity;
                });
            }
            return res;
        })
    },
    /**
     * Starts an activity
     * @param {Object} activityConfig
     * @param {Object} activityConfig.viewId
     * @param {String} querystring
     **/
    startActivity: function (activityConfig, querystring) {
        var me = this, currentActivity = me.getCurrentActivity();

        return Promise.resolve().then(function () {
            if (currentActivity) {
                return currentActivity.initHide()
            }
        }).then(function () {
            me.setCurrentActivity(null);
            return me.createActivity(activityConfig).then(function (array) {
                var result = array.first();
                result.classInstance.setActivityArguments(activityConfig);
                me.addActivity(result.classInstance, activityConfig.parentActivity || null);
                if (me.openActivityOnStop) {
                    return me.showActivity(result.classInstance).then(function () {

                        return result;
                    });
                }
                return result;
            }).then(function (result) {
                var activity = result.classInstance,
                    combinedPath = '',
                    path = me.getPath(activityConfig);
                if (path !== null) {
                    combinedPath = me.getCombinedPath(querystring || path);
                    activity.setPath(querystring || path);
                    me.pushState(me.$window, {
                        activityId: activity.getActivityId(),
                        path: querystring || path
                    }, me.getActivityName(activityConfig, activity), combinedPath);
                }

                if (result.classInstance.afterShow)
                    result.classInstance.afterShow();

                MEPH.publish(MEPH.Constants.ActivityStarted, { activity: activity });
                return result;
            }).catch(function (error) {
                MEPH.Log(error);
            });;
        })
    },
    /**
     * Creates an activity from the configuration.
     * @param {Object} activityConfig.
     * @returns {Promise}
     */
    createActivity: function (activityConfig) {
        var me = this,
            ac = MEPH.mobile.activity.ActivityController,
            promise = Promise.resolve();
        promise = promise.then(function () {
            return MEPH.MobileServices.get(ac.viewProvider).then(function (viewProvider) {
                return viewProvider.getView(activityConfig);
            });
        }).then(function (viewConfig) {
            var patterns;
            if (viewConfig) {
                patterns = MEPH.Array(MEPH.patternTypes).where(function (pt) {
                    if (viewConfig) {
                        return viewConfig.hasOwnProperty(pt);
                    }
                    return null;
                }).select(function (key) {
                    return viewConfig[key];
                });
            }
            else {
                throw 'no view config passed';
            }
            patterns = patterns || [];

            return MEPH.requires.apply(MEPH, patterns).then(function () {
                if (viewConfig) {
                    var info = MEPH.getDefinedClassInformation(viewConfig.view);
                    viewConfig.alias = info.alias;
                    viewConfig.patterns = patterns;
                    return viewConfig;
                }
                return null;
            })
        }).then(function (viewConfig) {
            var datareferences,
                application = me.getApplication(),
                dom = activityConfig.positionDom || me.getActivityHolder(),
                activityDom = document.createElement(viewConfig.alias),
                keys = MEPH.Array(MEPH.patternTypes).where(function (pt) {
                    return viewConfig.hasOwnProperty(pt);
                })
            datareferences = keys.where(function (x) { return x !== 'view'; })
                .select(function (pattern) {
                    return '"' + pattern + '" : ' + ' "' + viewConfig[pattern] + '" ';
                }).join(',');

            activityDom.setAttribute(MEPH.dataObjectReferenceAttribute, datareferences);

            return application.loadViewObject([{
                node: activityDom,
                alias: viewConfig.alias,
                view: true
            }], dom).then(function (res) {
                res.foreach(function (r) {
                    r.classInstance.$viewConfiguration = r.classInstance.$viewConfiguration || viewConfig;
                });
                return res;
            })
        });
        return promise;
    },
    /**
     * Get the complete ancestor chain of an activity.
     * @param {MEPH.mobile.mixins.Activity} activity
     **/
    getAncestorActivities: function (activity) {
        var me = this,
            activity,
            result = [];
        activityStructure = me.getActivities().first(function (x) {
            return x.activity === activity;
        });
        if (activityStructure && activityStructure.parent) {
            result.push(activityStructure.parent);
            result = result.concat(me.getAncestorActivities(activityStructure.parent));
        }
        else if (!activityStructure) {
            throw 'no activity found : ActivityController';
        }
        return MEPH.Array(result);
    },
    /**
     * Show an activity.
     * @param {MEPH.mobile.mixins.Activity} activity
     **/
    showActivity: function (activity) {
        if (typeof (activity) === 'string') {
            activity = this.getActivity(activity);
        }
        var me = this,
            promise = Promise.resolve(),
            currentActivity = me.getCurrentActivity();
        if (!activity) {
            return promise;
        }
        if (activity === currentActivity) {
            return promise;
        }
        if (currentActivity) {
            promise = promise.then(function () {
                return currentActivity.initHide({ activityToBeShown: activity });
            });
        }

        promise = promise.then(function () {
            return activity.initShow();
        }).then(function (result) {
            if (result.success) {
                me.setCurrentActivity(activity);
            }
            return result;
        });

        return promise;
    },
    /**
     * Closes the activity
     * @param {MEPH.mobile.mixins.Activity} activity
     **/
    closeActivity: function (activity) {
        var me = this,
            promise = Promise.resolve(),
            currentActivity = me.getCurrentActivity();

        promise = promise.then(function () {
            return activity.initClose();
        }).then(function (result) {
            if (result.success) {
                if (activity === currentActivity) {
                    me.setCurrentActivity(null);
                }
            }
            return result;
        });

        return promise;
    },
    /**
     * Open an activity
     * @param {MEPH.mobile.mixins.Activity} activity
     **/
    openActivity: function (activity) {
        var me = this,
          promise = Promise.resolve(),
          currentActivity = me.getCurrentActivity();
        if (currentActivity) {
            promise = promise.then(function () {
                return currentActivity.initHide({ activityToBeShown: activity });
            });
        }
        promise = promise.then(function () {
            return activity.initOpen();
        }).then(function (result) {
            if (result.success) {
                me.setCurrentActivity(activity);
            }
            if (activity.afterShow)
                activity.afterShow();
            return result;
        });

        return promise;
    },
    /**
     * Gets the current activity.
     **/
    getCurrentActivity: function () {
        var me = this;
        return me.currentActivity;
    },
    /**
     * Sets the current activity.
     * @param {MEPH.mobile.mixins.Activity} activity
     */
    setCurrentActivity: function (activity) {
        var me = this;
        me.currentActivity = activity;
    },
    /**
     * Adds an activity.
     * @param {MEPH.mobile.mixins.Activity} activity
     */
    addActivity: function (activity, parentActivity) {
        var me = this,
            parentExists = me.getActivities().first(function (x) { return x.activity === parentActivity; });
        if (activity.isActivity() && !me.activities.some(function (x) {
            return x.activity.getActivityId() === activity.getActivityId();
        })) {
            if (MEPH.IsEventable(activity)) {
                activity.on('destroy', me.onActivityDestroy.bind(me, activity));
            }
            me.activities.push({
                activity: activity,
                parent: parentActivity ? parentActivity : null
            });
        }
    },
    onActivityDestroy: function (activity, type) {
        var me = this,
            removed;
        removed = me.removeActivity(activity);
        if (removed.length) {
            MEPH.publish(MEPH.Constants.ActivityDestroyed, {});
        }
    },
    /**
     * Sets the activity parent.
     **/
    setActivityParent: function (activity, parentActivity) {
        var me = this, first;
        first = me.getActivities().first(function (x) {
            return x.activity === activity;
        });

        if (first) {
            first.parent = parentActivity;
        }
    },
    removeActivity: function (activity) {
        var me = this;
        return me.activities.removeWhere(function (x) {
            return x.activity === activity;
        });
    },
    /**
     * Gets the activity by id.
     * @param {String} id
     * @return {MEPH.mobile.mixins.Activity}
     */
    getActivity: function (id) {
        var me = this, info;
        info = me.getActivities().first(function (x) {
            if (typeof id === 'object') {
                if (x.activity.$viewConfiguration.viewId !== id.viewId) {
                    return false;
                }
                return true;
            }
            return x.activity.getActivityId() === id;
        });
        if (info) {
            return info.activity;
        }
        return null;
    },
    /**
     * Gets the activities.
     * @returns {Array}
     **/
    getActivities: function () {
        var me = this;
        return me.activities;
    }
});﻿describe("MEPH/mobile/application/menu/ActivityMenuProvider.spec.js", 'MEPH.mobile.activity.ActivityController', function () {

    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create an application menu.', function (done) {
        MEPH.create('MEPH.mobile.application.menu.ActivityMenuProvider').then(function ($class) {
            var menu = new $class();

            expect(menu).theTruth('the activity menu was not created.');

        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });


    it('activity menu will return the name to display', function (done) {
        MEPH.create('MEPH.mobile.application.menu.ActivityMenuProvider').then(function ($class) {
            var menu = new $class();

            expect(menu.name === 'Activity').theTruth('the activity menu name was not correct.');

        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });

    it('activity menu provider source is an array which is observable', function (done) {
        MEPH.requires('MEPH.util.Observable').then(function () {
            return MEPH.create('MEPH.mobile.application.menu.ActivityMenuProvider').then(function ($class) {
                var menu = new $class();

                expect(menu.source).toBeTruthy();
                expect(MEPH.util.Observable.isObservable(menu.source)).toBeTruthy();
            })
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });

    it('activity menu provider type is activity', function (done) {
        MEPH.create('MEPH.mobile.application.menu.ActivityMenuProvider').then(function ($class) {
            var menu = new $class();
            expect(menu.type === 'activity').toBeTruthy();
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });

    it('when an activity is started , the source is updated', function (done) {
        MEPH.create('MEPH.mobile.application.menu.ActivityMenuProvider').then(function ($class) {
            var c = new MEPH.mobile.activity.ActivityController();
            c.activities.push({
                activity: {
                    getPath: function () {
                        return 'asdf'
                    },
                    getActivityId: function () {
                        return 'asdf'
                    }
                }
            });
            var old = MEPH.ActivityController;
            MEPH.ActivityController = c;
            var menu = new $class(),
                changed;

            menu.controller = c;
            menu.source.on('changed', function () {
                changed = true;
            });
            MEPH.publish(MEPH.Constants.ActivityStarted, {});
            return new Promise(function (r) {
                setTimeout(function () {
                    expect(changed).toBeTruthy()
                    MEPH.ActivityController = old;
                    r();
                }, 100)
            })
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });

    });

    it('items can be retrieved', function (done) {
        MEPH.create('MEPH.mobile.application.menu.ActivityMenuProvider').then(function ($class) {
            var menu = new $class(),
                changed;
            menu.source.on('changed', function () {
                changed = true;
            });
            MEPH.ActivityController.getActivities = function () {
                return [{
                    activity: {
                        getPath: function () { return 'asdfa'; },
                        getActivityId: function () { return 'asdf'; }
                    }
                }];
            };
            MEPH.publish(MEPH.Constants.ActivityStarted, {});
            expect(menu.getItems().length === 1).toBeTruthy();
            expect(changed).toBeTruthy()
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });


    it('an item is clicked , and it is handled.', function (done) {
        var oldga, oldsa;
        MEPH.create('MEPH.mobile.application.menu.ActivityMenuProvider').then(function ($class) {
            var menu = new $class(), data = {
                activity: {
                    getPath: function () { return 'asdfa'; },
                    getActivityId: function () { return 'asdf'; }
                }
            };
            changed;
            menu.source.on('changed', function () {
                changed = true;
            });
            oldga = MEPH.ActivityController.getActivities;
            oldsa = MEPH.ActivityController.startActivity;
            MEPH.ActivityController.getActivities = function () {
                return [data];
            };
            MEPH.ActivityController.startActivity = function () {
                return [data];
            };
            MEPH.publish(MEPH.Constants.ActivityStarted, {});
            return menu.itemClicked(data).then(function (r) {
                expect(r).toBeTruthy();
            });
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            MEPH.ActivityController.getActivities = oldga;
            MEPH.ActivityController.startActivity = oldsa;
            done();
        });
    });
});﻿describe("MEPH/mobile/application/controller/MobileApplicationController.spec.js", function () {

    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create a mobile application controller.', function (done) {
        MEPH.create('MEPH.mobile.application.controller.MobileApplicationController').then(function ($class) {
            var mac = new $class();

            expect(mac).theTruth('The mobile application class did not start');

        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });

})﻿describe("MEPH/mobile/application/container/MobileApplicationContainer.spec.js", function () {

    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create a mobile application.', function (done) {
        //Arrange
        MEPH.create('MEPH.mobile.application.container.MobileApplicationContainer').then(function ($class) {
            var mobileapplication = new $class();

            expect(mobileapplication).theTruth('The mobile application was not created.');
            mobileapplication.destroy();

        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });;
    });

});﻿
/*global MEPH,U4,window*/
describe('MEPH/mobile/activity/container/Container.spec.js', function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create a activity container.', function (done) {
        MEPH.create('MEPH.mobile.activity.container.Container').then(function ($class) {
            var container = new $class();
            expect(container).theTruth('The container was not created');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it('a container is a control', function (done) {
        MEPH.create('MEPH.mobile.activity.container.Container').then(function ($class) {
            var container = new $class();

            expect(container instanceof MEPH.control.Control).theTruth('the container is not an instance of Control');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });
});﻿describe("MEPH/mobile/activity/ActivityController.spec.js", function () {
    var fakeActivityId = 'fakeActivity';
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    var createActivityObject = function () {
        return {
            close: function () {
                this.opened = false;
                return Promise.resolve().then(function () { return true; });
            },
            hide: function () {
                this.state = 'hidden';
                this.hasHidden = true;
                return Promise.resolve().then(function () { return true; });
            },
            show: function () {
                this.state = 'showing';
                return Promise.resolve().then(function () { return true; });
            },
            open: function () {
                this.opened = true;
                return Promise.resolve().then(function () { return true; });
            }
        };
    }
    var createActivityObjectWithAppliedActivityMixin = function () {
        var activity = createActivityObject();
        MEPH.apply(MEPH.mobile.mixins.Activity.prototype, activity);
        return activity;
    }
    var createWindow = function () {
        var myWindow = window.open("", "MsgWindow", "width=200,height=100");
        myWindow.document.write("<p>This window's name is: " + myWindow.name + "</p>");
        return myWindow;
    }
    it('can create a activity controller.', function (done) {
        //Arrange
        MEPH.create('MEPH.mobile.activity.ActivityController').then(function ($class) {
            var activityController = new $class();

            expect(activityController).theTruth('The activity controller was not created.');

        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });

    it(' an activity controller can have a activity container attached', function (done) {
        //Arrange
        MEPH.create('MEPH.mobile.activity.ActivityController').then(function ($class) {
            var activityController = new $class(),
           div = document.createElement('div');

            expect(activityController).theTruth('The activity controller was not created.');

            activityController.setActivityHolder(div);

            expect(activityController.getActivityHolder() === div).theTruth('the div was not found');

        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });

    it(' can start activities ', function (done) {
        //Arrange
        MEPH.requires('MEPH.application.Application', 'MEPH.mobile.providers.viewprovider.ViewProvider', 'MEPH.mobile.activity.ActivityController',
                     'MEPH.mobile.services.MobileServices', 'MEPH.ioc.Container').then(function () {
                         return MEPH.IOC.register({
                             name: MEPH.mobile.activity.ActivityController.viewProvider,
                             type: 'MEPH.mobile.providers.viewprovider.ViewProvider',
                             config: {
                                 viewsResource: {
                                     uri: 'Views.json',
                                     path: 'dataviews',
                                     preload: false
                                 }
                             }
                         }).then(function () {
                             return MEPH.create('MEPH.mobile.activity.ActivityController').then(function ($class) {
                                 var application = new MEPH.application.Application(),
                                     div = document.createElement('div');

                                 var activityController = new $class();
                                 activityController.setApplication(application);
                                 activityController.setActivityHolder(div);
                                 expect(activityController).theTruth('The activity controller was not created.');

                                 return activityController.startActivity({
                                     viewId: fakeActivityId
                                 }).then(function (result) {

                                     expect(activityController.getCurrentActivity()).theTruth('the controller didnt have a current activity');
                                     expect(activityController.getCurrentActivity().getActivityArguments()).theTruth('the current activity didnt have any arguments');

                                     expect(result).theTruth('An activity is expected to be loaded');

                                 });

                             });
                         });
                     }).catch(function (error) {
                         expect(error).caught();
                     }).then(function (x) {
                         done();
                     });
    });

    it(' can start activities, and push to the state ', function (done) {
        //Arrange
        MEPH.requires('MEPH.application.Application', 'MEPH.mobile.providers.viewprovider.ViewProvider', 'MEPH.mobile.activity.ActivityController',
                     'MEPH.mobile.services.MobileServices', 'MEPH.ioc.Container').then(function () {
                         return MEPH.IOC.register({
                             name: MEPH.mobile.activity.ActivityController.viewProvider,
                             type: 'MEPH.mobile.providers.viewprovider.ViewProvider',
                             config: {
                                 viewsResource: {
                                     uri: 'Views.json',
                                     path: 'dataviews',
                                     preload: false
                                 }
                             }
                         }).then(function () {
                             return MEPH.create('MEPH.mobile.activity.ActivityController').then(function ($class) {
                                 var application = new MEPH.application.Application(), $window,
                                     div = document.createElement('div');

                                 var activityController = new $class();
                                 activityController.setApplication(application);
                                 activityController.setActivityHolder(div);
                                 expect(activityController).theTruth('The activity controller was not created.');

                                 $window = createWindow();
                                 Object.defineProperty(activityController, '$window', {
                                     enumerable: false,
                                     writeable: true,
                                     configurable: true,
                                     get: function () {
                                         return $window;
                                     }
                                 });

                                 return activityController.startActivity({
                                     viewId: fakeActivityId,
                                     path: 'path/is/right'
                                 }).then(function (result) {

                                     expect(activityController.getCurrentActivity()).theTruth('the controller didnt have a current activity');
                                     expect(activityController.getCurrentActivity().getActivityArguments()).theTruth('the current activity didnt have any arguments');
                                     expect($window.location.pathname.indexOf('path/is/right') !== -1).theTruth('the path was not as expected');
                                     expect(result).theTruth('An activity is expected to be loaded');
                                     $window.close()
                                 });

                             });
                         });
                     }).catch(function (error) {
                         expect(error).caught();
                     }).then(function (x) {
                         done();
                     });
    });

    it('on popstate event the activity will be show', function (done) {
        //Arrange
        MEPH.requires('MEPH.application.Application', 'MEPH.mobile.providers.viewprovider.ViewProvider', 'MEPH.mobile.activity.ActivityController',
                     'MEPH.mobile.services.MobileServices', 'MEPH.ioc.Container').then(function () {
                         return MEPH.IOC.register({
                             name: MEPH.mobile.activity.ActivityController.viewProvider,
                             type: 'MEPH.mobile.providers.viewprovider.ViewProvider',
                             config: {
                                 viewsResource: {
                                     uri: 'Views.json',
                                     path: 'dataviews',
                                     preload: false
                                 }
                             }
                         }).then(function () {
                             return MEPH.create('MEPH.mobile.activity.ActivityController').then(function ($class) {
                                 var application = new MEPH.application.Application(), $window,
                                     div = document.createElement('div');

                                 var activityController = new $class();
                                 activityController.setApplication(application);
                                 activityController.setActivityHolder(div);
                                 expect(activityController).theTruth('The activity controller was not created.');

                                 $window = createWindow();
                                 Object.defineProperty(activityController, '$window', {
                                     enumerable: false,
                                     writeable: true,
                                     configurable: true,
                                     get: function () {
                                         return $window;
                                     }
                                 });
                                 activityController.listenToStatePop();
                                 return activityController.startActivity({
                                     viewId: fakeActivityId,
                                     path: '/path/is/right'
                                 }).then(function () {
                                     return activityController.startActivity({
                                         viewId: fakeActivityId,
                                         path: '/path/is/next'
                                     });
                                 }).then(function (result) {
                                     $window.history.go(-1);
                                     return activityController.onPopState({
                                         state: {
                                             activityId: activityController.getActivities().first().activity.getActivityId()
                                         }
                                     }).then(function () {
                                         return activityController.getActivities().first().activity.getActivityId();
                                     });
                                 }).then(function (result) {
                                     expect(result === activityController.getCurrentActivity().getActivityId()).theTruth('The wrong activity is showing');
                                     $window.close()
                                 });

                             });
                         });
                     }).catch(function (error) {
                         expect(error).caught();
                     }).then(function (x) {
                         done();
                     });
    });

    it('can get activity instance by id', function (done) {
        //Arrange
        MEPH.requires('MEPH.mobile.mixins.Activity').then(function () {
            return MEPH.create('MEPH.mobile.activity.ActivityController').then(function ($class) {
                var activityController = new $class(),
               activities, ACTIVITY,
               activity = {};
                MEPH.apply(MEPH.mobile.mixins.Activity.prototype, activity);

                //Act
                activityController.addActivity(activity);

                //Assert
                ACTIVITY = activityController.getActivity(activity.getActivityId());
                expect(ACTIVITY === activity).theTruth('the activity was not found');

            }).catch(function (error) {
                expect(new Error('didnt get the activity instance by id.')).caught();

                if (error) {
                    expect(error).caught();
                }
            });
        }).catch(function (error) {
            expect(new Error('Didnt get the required files.')).caught();
        }).then(function (x) {
            done();
        });
    });

    it(' can start activities when a startEvent is published', function (done) {
        //Arrange
        MEPH.requires('MEPH.Constants', 'MEPH.application.Application', 'MEPH.mobile.providers.viewprovider.ViewProvider', 'MEPH.mobile.activity.ActivityController',
                     'MEPH.mobile.services.MobileServices', 'MEPH.ioc.Container').then(function () {
                         return MEPH.IOC.register({
                             name: MEPH.mobile.activity.ActivityController.viewProvider,
                             type: 'MEPH.mobile.providers.viewprovider.ViewProvider',
                             config: {
                                 viewsResource: {
                                     uri: 'Views.json',
                                     path: 'dataviews',
                                     preload: false
                                 }
                             }
                         }).then(function () {
                             MEPH.create('MEPH.mobile.activity.ActivityController').then(function ($class) {
                                 var application = new MEPH.application.Application(),
                                    div = document.createElement('div');

                                 var activityController = new $class();
                                 activityController.setApplication(application);
                                 activityController.setActivityHolder(div);
                                 expect(activityController).theTruth('The activity controller was not created.');
                                 MEPH.publish(MEPH.Constants.startView, { config: true });
                                 activityController.startActivity = function (type, options) {
                                     expect(options.config).theTruth('no options were found when an activity was published');
                                 }
                                 expect(result).theTruth('An activity is expected to be loaded');

                             });
                         });
                     }).catch(function (error) {
                         expect(error).caught();
                     }).then(function (x) {
                         done();
                     });
    });


    it(' the activitycontroller can pushstate on a window', function (done) {
        MEPH.create('MEPH.mobile.activity.ActivityController').then(function ($class) {
            var window, pageName = 'Page Name', currentLoction,
                pagePath = 'path/ap/atp',
                stateObject = { state: true },
               div = document.createElement('div');

            var activityController = new $class();

            expect(activityController).theTruth('The activity controller was not created.');

            window = createWindow();

            activityController.pushState(window, stateObject, pageName, pagePath);

            currentLoction = window.location
            expect(window.location.pathname.indexOf(pagePath) !== -1).theTruth('the path was not ');
            window.close();

        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });

    it(' will get the path from the activity', function (done) {
        MEPH.create('MEPH.mobile.activity.ActivityController').then(function ($class) {
            var activityController,
                path;

            activityController = new $class();
            path = activityController.getPath({
                'viewId': 'fakeActivity',
                'view': 'MEPHTests.helper.activity.HelperActivity',
                'path': 'helperActivity/Somethingelse'
            });
            expect(activityController).theTruth('The activity controller was not created.');

            expect(path === 'helperActivity/Somethingelse').theTruth(' the path was not as expected');

        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });

    it('if there is no path, then null is returned', function (done) {
        MEPH.create('MEPH.mobile.activity.ActivityController').then(function ($class) {
            var activityController,
                path;

            activityController = new $class();
            path = activityController.getPath({
                'viewId': 'fakeActivity',
                'view': 'MEPHTests.helper.activity.HelperActivity'
            });
            expect(activityController).theTruth('The activity controller was not created.');

            expect(path === null).theTruth(' the path was not as expected');

        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });

    it('an activity controller can house activities', function (done) {
        //Arrange
        MEPH.requires('MEPH.mobile.mixins.Activity').then(function () {
            return MEPH.create('MEPH.mobile.activity.ActivityController').then(function ($class) {
                var activityController = new $class(),
               activities,
               activity = {};
                MEPH.apply(MEPH.mobile.mixins.Activity.prototype, activity);

                //Act
                activityController.addActivity(activity);

                //Assert
                activities = activityController.getActivities();
                expect(activities).theTruth('activities were not found');
                expect(activities.length === 1).theTruth('activities were not found');

            }).catch(function () {
                expect(new Error('activity controller class wasnt created.')).caught();
            });
        }).catch(function (error) {
            expect(new Error('Didnt get the required files.')).caught();
        }).then(function (x) {
            done();
        });
    });

    it('can add an activity as a child of an activity', function (done) {
        //Arrange
        MEPH.requires('MEPH.mobile.mixins.Activity').then(function () {
            return MEPH.create('MEPH.mobile.activity.ActivityController').then(function ($class) {
                var activityController = new $class(),
                activities,
                activity2 = {},
                activity = {};
                MEPH.apply(MEPH.mobile.mixins.Activity.prototype, activity);
                MEPH.apply(MEPH.mobile.mixins.Activity.prototype, activity2);
                activityController.addActivity(activity);

                //Act
                activityController.addActivity(activity2, activity);

                //Assert
                activities = activityController.getActivities();
                expect(activities).theTruth('activities were not found');
                expect(activities.length === 2).theTruth('activities were not found');

            }).catch(function () {
                expect(new Error('activity controller class wasnt created.')).caught();
            });
        }).catch(function (error) {
            expect(new Error('Didnt get the required files.')).caught();
        }).then(function (x) {
            done();
        });
    });

    it('when there is no activity, the activityController will show an activity', function (done) {
        //Arrange
        MEPH.requires('MEPH.mobile.mixins.Activity').then(function () {
            return MEPH.create('MEPH.mobile.activity.ActivityController').then(function ($class) {
                var activityController = new $class(),
               activities,
               currentActivity,
               activity = createActivityObject();
                MEPH.apply(MEPH.mobile.mixins.Activity.prototype, activity);
                activityController.addActivity(activity);

                //Act
                return activityController.showActivity(activity).then(function (result) {
                    expect(result.success).theTruth('the activity controller didnt show correctly');
                    currentActivity = activityController.getCurrentActivity();
                    expect(currentActivity === activity).theTruth('the activity was not the currentactivity.');
                });

            }).catch(function () {
                expect(new Error('activity controller class wasnt created.')).caught();
                done();
            });
        }).catch(function (error) {
            expect(new Error('Didnt get the required files.')).caught();
        }).then(function (x) {
            done();
        });
    });
    it('when there is an activity, the the activity contoller will show another , the first will close', function (done) {
        //Arrange
        MEPH.requires('MEPH.mobile.mixins.Activity').then(function () {
            return MEPH.create('MEPH.mobile.activity.ActivityController').then(function ($class) {
                var activityController = new $class(),
                activities,
                currentActivity,
                activity2 = createActivityObject(),
                activity = createActivityObject();
                MEPH.apply(MEPH.mobile.mixins.Activity.prototype, activity);
                MEPH.apply(MEPH.mobile.mixins.Activity.prototype, activity2);
                activityController.addActivity(activity);
                activityController.addActivity(activity2);

                //Act
                return activityController.showActivity(activity).then(function () {
                    return activityController.showActivity(activity2);
                }).then(function (result) {
                    expect(result.success).theTruth('the activity controller didnt show correctly');
                    currentActivity = activityController.getCurrentActivity();
                    expect(activity.state === 'hidden').theTruth('the activity state did not equal hidden');
                    expect(currentActivity === activity2).theTruth('the activity was not the currentactivity.');
                });

                //Assert

            }).catch(function () {
                expect(new Error('activity controller class wasnt created.')).caught();
            });
        }).catch(function (error) {
            expect(new Error('Didnt get the required files.')).caught();
        }).then(function (x) {
            done();
        });

    });

    it('can get the activities to show based off an activity', function (done) {
        //Arrange
        MEPH.requires('MEPH.mobile.mixins.Activity').then(function () {
            return MEPH.create('MEPH.mobile.activity.ActivityController').then(function ($class) {
                var activityController = new $class(),
                activities,
                list,
                currentActivity,
                activity2 = createActivityObject(),
                activity = createActivityObject();
                MEPH.apply(MEPH.mobile.mixins.Activity.prototype, activity);
                MEPH.apply(MEPH.mobile.mixins.Activity.prototype, activity2);
                activityController.addActivity(activity);
                activityController.addActivity(activity2, activity);
                activity.addChildDomActivity(activity2);
                //Act 
                list = activityController.getAncestorActivities(activity2);

                expect(list).theTruth('no list was created.');
                expect(list.first() === activity).theTruth('no list was created.');


                //Assert

            }).catch(function () {
                expect(new Error('activity controller class wasnt created.')).caught();
            });
        }).catch(function (error) {
            expect(new Error('Didnt get the required files.')).caught();
        }).then(function (x) {
            done();
        });
    });


    it('when showing an activity, all the parent activities will show, and the previously shown activity chain will hide', function (done) {
        var called;
        MEPH.requires('MEPH.mobile.mixins.Activity').then(function () {
            return MEPH.create('MEPH.mobile.activity.ActivityController').then(function ($class) {
                var activityController = new $class(),
                    object = createActivityObject(),
                    parent = createActivityObject(),
                    child2 = createActivityObject(),
                    child = createActivityObject();
                MEPH.apply(MEPH.mobile.mixins.Activity.prototype, object);
                MEPH.apply(MEPH.mobile.mixins.Activity.prototype, child);
                MEPH.apply(MEPH.mobile.mixins.Activity.prototype, child2);
                MEPH.apply(MEPH.mobile.mixins.Activity.prototype, parent);
                object.addChildDomActivity(child);
                parent.addChildDomActivity(child2);
                //Act
                return activityController.showActivity(child).then(function () {
                    return activityController.showActivity(child2);
                }).then(function (result) {
                    expect(result.success).theTruth('the activity controller didnt show correctly');
                    currentActivity = activityController.getCurrentActivity();
                    expect(parent.state === 'showing').theTruth('the parent state wasnt showing');
                    expect(object.state === 'hidden').theTruth('the object state wanst hidden');
                    expect(child2.state === 'showing').theTruth('the child2 state wanst showing');
                    expect(child.state === 'hidden').theTruth('the child2 state wanst showing');
                    expect(currentActivity === child2).theTruth('the activity was not the currentactivity.');
                });
            }).catch(function (error) {
                expect(new Error('Didnt get the required files.')).caught();
            }).then(function (x) {
                done();
            });
        });
    });

    it('when showing a child activity, and its sibling activity is open already, the parent will not hide', function (done) {
        var called;
        MEPH.requires('MEPH.mobile.mixins.Activity').then(function () {
            return MEPH.create('MEPH.mobile.activity.ActivityController').then(function ($class) {
                var activityController = new $class(),
                    object = createActivityObject(),
                    parent = createActivityObject(),
                    child2 = createActivityObject(),
                    child = createActivityObject();
                MEPH.apply(MEPH.mobile.mixins.Activity.prototype, object);
                MEPH.apply(MEPH.mobile.mixins.Activity.prototype, child);
                MEPH.apply(MEPH.mobile.mixins.Activity.prototype, child2);
                MEPH.apply(MEPH.mobile.mixins.Activity.prototype, parent);
                object.addChildDomActivity(child);
                parent.addChildDomActivity(child2);
                //Act
                return activityController.showActivity(child).then(function () {
                    return activityController.showActivity(child2);
                }).then(function (result) {

                    currentActivity = activityController.getCurrentActivity();
                    expect(parent.hasHidden === undefined).theTruth('the parent state was set to hidden,');
                });
            }).catch(function (error) {
                expect(new Error('Didnt get the required files.')).caught();
            }).then(function (x) {
                done();
            });
        });
    });

    it('opening an activity will open its parent activities also, from a dom perspective.', function (done) {
        //Arrange
        MEPH.requires('MEPH.mobile.mixins.Activity').then(function () {
            return MEPH.create('MEPH.mobile.activity.ActivityController').then(function ($class) {
                var activityController = new $class(),
               activity = createActivityObjectWithAppliedActivityMixin(),
               parent = createActivityObjectWithAppliedActivityMixin();

                activityController.addActivity(parent);
                activityController.addActivity(activity, parent);
                parent.addChildDomActivity(activity);

                //Act
                return activityController.openActivity(activity).then(function () {
                    //Assert
                    expect(activity.opened).theTruth('the activity was not opened');
                    expect(parent.opened).theTruth('the parent was not opened');
                });
            }).catch(function (error) {
                expect(new Error('Didnt get the required files.')).caught();
            }).then(function (x) {
                done();
            });
        });
    });

    it('closing an activity will close all of the child activities', function (done) {
        //Arrange
        MEPH.requires('MEPH.mobile.mixins.Activity').then(function () {
            return MEPH.create('MEPH.mobile.activity.ActivityController').then(function ($class) {
                var activityController = new $class(),
                activity = createActivityObjectWithAppliedActivityMixin(),
                parent = createActivityObjectWithAppliedActivityMixin();

                activityController.addActivity(parent);
                activityController.addActivity(activity, parent);
                parent.addChildDomActivity(activity);

                //Act
                return activityController.closeActivity(parent).then(function () {
                    //Assert
                    expect(activity.opened === false).theTruth('the activity was not closed');
                    expect(parent.opened === false).theTruth('the parent was not closed');
                });

            });
        }).catch(function (error) {
            expect(new Error('Didnt get the required files.')).caught();
        }).then(function (x) {
            done();
        });
    });

    it('hiding the parent activity will hide the child', function (done) {
        //Arrange
        MEPH.requires('MEPH.mobile.mixins.Activity').then(function () {
            return MEPH.create('MEPH.mobile.activity.ActivityController').then(function ($class) {
                var activityController = new $class(),
                activities,
                currentActivity,
                activity3 = createActivityObject(),
                activity2 = createActivityObject(),
                activity = createActivityObject();
                MEPH.apply(MEPH.mobile.mixins.Activity.prototype, activity);
                MEPH.apply(MEPH.mobile.mixins.Activity.prototype, activity2);
                MEPH.apply(MEPH.mobile.mixins.Activity.prototype, activity3);
                activityController.addActivity(activity);
                activityController.addActivity(activity2, activity);
                activity.addChildDomActivity(activity2);
                activityController.addActivity(activity3);

                //Act
                return activityController.showActivity(activity2).then(function () {
                    return activityController.showActivity(activity3);
                }).then(function (result) {
                    expect(result.success).theTruth('the activity controller didnt show correctly');
                    currentActivity = activityController.getCurrentActivity();
                    expect(activity2.state === 'hidden').theTruth('the activity state did not equal hidden');
                    expect(activity.state === 'hidden').theTruth('the activity state did not equal hidden');
                    expect(currentActivity === activity3).theTruth('the activity was not the currentactivity.');
                });

                //Assert

            }).catch(function () {
                expect(new Error('activity controller class wasnt created.')).caught();
            });
        }).catch(function (error) {
            expect(new Error('Didnt get the required files.')).caught();
        }).then(function (x) {
            done();
        });

    });

    it('activity controller listens on a signalr channel', function (done) {
        var called, old;
        MEPH.requires('MEPH.mobile.services.MobileServices').then(function () {
            return MEPH.define('Fake.Service', {
                start: function () {
                    return Promise.resolve();
                },

                channel: function () {
                    called = true;;
                }
            })
        }).then(function () {

            return MEPH.IOC.register({
                name: 'signalService',
                type: 'Fake.Service',
                config: {}
            });
        }).then(function () {
            return MEPH.create('MEPH.remoting.RemotingController').then(function ($class) {
                var activityController = new $class();

                return activityController.remoting(true).then(function () {
                    expect(called).toBeTruthy();
                });
            });
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            MEPH.undefine('Fake.Service');
            done();
        });
    });


    it('activity controller listens on a signalr channel, will only add once.', function (done) {
        var called = 0, old;
        MEPH.requires('MEPH.mobile.services.MobileServices').then(function () {
            return MEPH.define('Fake.Service', {

                start: function () {
                    return Promise.resolve();
                },
                channel: function (type) {
                    if (MEPH.Constants.ACTIVITY_CONTROLLER_CHANNEL === type) {
                        called++;
                    }
                }
            })
        }).then(function () {

            return MEPH.IOC.register({
                name: 'signalService',
                type: 'Fake.Service',
                start: function () {
                    return Promise.resolve();
                },
                channel: function () {
                },
                config: {}
            });
        }).then(function () {
            return MEPH.create('MEPH.remoting.RemotingController').then(function ($class) {
                var activityController = new $class();

                return activityController.remoting(true).then(function () {
                    activityController.remoting(true).then(function () {
                        expect(called === 1).toBeTruthy();
                    });
                });
            });
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            MEPH.undefine('Fake.Service');
            done();
        });
    });


    it('activity will execute, remote control request handler on remote control request.', function (done) {
        var called, channelcallback, old;
        MEPH.requires('MEPH.mobile.services.MobileServices').then(function () {
            return MEPH.define('Fake.Service', {
                start: function () {
                    return Promise.resolve();
                },
                channel: function (channelid, callback) {
                    if (MEPH.Constants.ACTIVITY_CONTROLLER_CHANNEL === channelid) {
                        channelcallback = callback;
                    }
                },
            })
        }).then(function () {

            return MEPH.IOC.register({
                name: 'signalService',
                type: 'Fake.Service',
                start: function () {
                    return Promise.resolve();
                },
                channel: function () {
                },
                config: {}
            });
        }).then(function () {
            return MEPH.create('MEPH.remoting.RemotingController').then(function ($class) {
                var activityController = new $class();
                activityController.remoteControlRequestHandler = function (request) {
                    called = true;
                };

                return activityController.remoting(true).then(function () {
                    channelcallback({
                        message: {
                            type: MEPH.Constants.RemoteControlRequest,
                            from: 'from',
                            fromName: 'Spike'
                        }
                    });
                    expect(called).toBeTruthy();
                });
            });
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            MEPH.undefine('Fake.Service');
            done();
        });
    });

    it('activity controller by default will open up whatever activity requested.', function (done) {
        var called, channelcallback, oldac;
        MEPH.requires('MEPH.mobile.services.MobileServices',
                        'MEPH.mobile.activity.ActivityController',
                        'MEPH.remoting.RemotingController').then(function () {
                            return MEPH.define('Fake.Service', {
                                start: function () {
                                    return Promise.resolve();
                                },
                                channel: function (channelid, callback) {
                                    if (MEPH.Constants.ACTIVITY_CONTROLLER_CHANNEL === channelid) {
                                        channelcallback = callback;
                                    }
                                },
                            })
                        }).then(function () {

                            return MEPH.IOC.register({
                                name: 'signalService',
                                start: function () {
                                    return Promise.resolve();
                                },
                                channel: function () {
                                },
                                type: 'Fake.Service',
                                config: {}
                            });
                        }).then(function () {
                            return MEPH.create('MEPH.remoting.RemotingController').then(function ($class) {
                                var activityController = new $class();
                                oldac = MEPH.ActivityController;
                                MEPH.ActivityController = {
                                    startActivity: function (request) {
                                        called = true;
                                    }
                                };
                                activityController.remotes.push({ remoteUser: 'from' });
                                return activityController.remoting(true).then(function () {

                                    channelcallback({
                                        message: {
                                            type: MEPH.Constants.RemoteControlRequest,
                                            viewId: 'viewid',
                                            from: 'from',
                                            fromName: 'Spike'
                                        }
                                    });
                                    expect(called).toBeTruthy();
                                });
                            });
                        }).catch(function (error) {
                            expect(error).caught();
                        }).then(function () {
                            MEPH.ActivityController = oldac;
                            MEPH.undefine('Fake.Service');
                            done();
                        });
    });


    it('activity controller will add users to ok like on request.', function (done) {
        var called, channelcallback;
        MEPH.requires('MEPH.mobile.services.MobileServices').then(function () {
            return MEPH.define('Fake.Service', {
                start: function () {
                    return Promise.resolve();
                },
                channel: function (channelid, callback) {
                    if (MEPH.Constants.ACTIVITY_CONTROLLER_CHANNEL === channelid) {
                        channelcallback = callback;
                    }
                }
            })
        }).then(function () {

            return MEPH.IOC.register({
                name: 'signalService',
                type: 'Fake.Service',
                start: function () {
                    return Promise.resolve();
                },
                channel: function () {
                },
                config: {}
            });
        }).then(function () {
            return MEPH.create('MEPH.remoting.RemotingController').then(function ($class) {
                var activityController = new $class();
                activityController.requestControlHandler = function (request) {
                    called = true;
                };
                return activityController.remoting(true).then(function () {
                    if (channelcallback) {
                        channelcallback({
                            message: {
                                type: MEPH.Constants.RequestControllAccess,
                                from: 'from',
                                fromName: 'Spike'
                            }
                        });
                    }
                    expect(called).toBeTruthy();
                });
            });
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            MEPH.undefine('Fake.Service');
            done();
        });
    });


    it('activity controller will add users to list when oked.', function (done) {
        var called, channelcallback;
        MEPH.requires('MEPH.mobile.services.MobileServices').then(function () {
            return MEPH.define('Fake.Service', {

                start: function () {
                    return Promise.resolve();
                },
                channel: function (channelid, callback) {
                    channelcallback = callback;
                }
            })
        }).then(function () {

            return MEPH.IOC.register({
                name: 'signalService',
                type: 'Fake.Service',
                config: {}
            });
        }).then(function () {
            return MEPH.create('MEPH.remoting.RemotingController').then(function ($class) {
                var activityController = new $class();
                activityController.getControlAcknowledgement = function (request) {
                    return Promise.resolve().then(function () { return true; });
                };
                return activityController.remoting(true).then(function () {
                    if (channelcallback) {
                        channelcallback({
                            message: {
                                type: MEPH.Constants.RequestControllAccess,
                                from: 'from',
                                fromName: 'Spike'
                            }
                        });
                    }
                });
            });
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            MEPH.undefine('Fake.Service');
            done();
        });
    });

});﻿describe("MEPH/mixins/Observable.spec.js", function () {

    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });


    it('will make an object observable', function (done) {
        var fakeObservableNAME = 'Fake.Observable.Class',
            config = {
                initialize: function () {
                    var me = this;
                    me.mixins.observable.init.apply(me);
                },
                requires: ['MEPH.mixins.Observable'],
                mixins: {
                    observable: 'MEPH.mixins.Observable'
                }
            }
        MEPH.undefine(fakeObservableNAME);
        MEPH.define(fakeObservableNAME, config).then(function ($class) {
            var instance = new $class();

            expect(instance.mixins.observable).theTruth('Mixin was not defined on the instance');
            expect(instance[MEPH.nonEnumerablePropertyPrefix + 'isObservable']).theTruth('The object is not observable');
            MEPH.undefine(fakeObservableNAME);

        }).catch(function (error) {
            expect(new Error('Didnt get the required files.')).caught();
        }).then(function (x) {
            done();
        });
    });

    it('will fire altered events on the class when a property is changed', function (done) {
        //Arrange
        var fakeObservableNAME = 'Fake.Observable.Class',
           config = {
               initialize: function () {
                   var me = this;
                   me.mixins.observable.init.apply(me);
               },
               properties: {
                   property: null,
                   property2: null
               },
               requires: ['MEPH.mixins.Observable'],
               mixins: {
                   observable: 'MEPH.mixins.Observable'
               }
           }
        MEPH.undefine(fakeObservableNAME);
        MEPH.define(fakeObservableNAME, config).then(function ($class) {
            var instance = new $class(),
                path;

            instance.on('altered', function (type, options) {
                path = options.path;
            });

            //Act
            instance.property = 'newproperty';
            MEPH.undefine(fakeObservableNAME);

            //Assert
            expect(path === 'property').theTruth('the path on the altered event options was not "property"');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });

    it('will ignore private properties', function (done) {
        //Arrange
        var fakeObservableNAME = 'Fake.Observable.Class',
           config = {
               initialize: function () {
                   var me = this;
                   me.mixins.observable.init.apply(me);
               },
               properties: {
                   property: null,
                   property2: null,
                   $private: null
               },
               requires: ['MEPH.mixins.Observable'],
               mixins: {
                   observable: 'MEPH.mixins.Observable'
               }
           }
        MEPH.undefine(fakeObservableNAME);
        MEPH.define(fakeObservableNAME, config).then(function ($class) {

            var instance = new $class(),
                count = 0,
                path;

            instance.on('altered', function (type, options) {
                count++;
            });

            //Act
            instance.$private = 'newproperty';

            //Assert
            expect(count === 0).theTruth('the private property was observable');
            MEPH.undefine(fakeObservableNAME);

        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });

    it('will fire altered events on the class when a property is changed', function (done) {
        //Arrange
        var fakeObservableNAME = 'Fake.Observable.Class',
           config = {
               initialize: function () {
                   var me = this;
                   me.mixins.observable.init.apply(me);
               },
               properties: {
                   property: null,
                   property2: null
               },
               requires: ['MEPH.mixins.Observable'],
               mixins: {
                   observable: 'MEPH.mixins.Observable'
               }
           }
        MEPH.undefine(fakeObservableNAME);
        MEPH.define(fakeObservableNAME, config).then(function ($class) {
            var instance = new $class(),
                path;

            instance.on('altered', function (type, options) {
                path = options.path;
            });

            //Act
            instance.property = { property: null };
            instance.property.property = 'prop';

            //Assert
            expect(path === 'property.property').theTruth('the path on the altered event options was not "property"');

            MEPH.undefine(fakeObservableNAME);
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });
    it('fires altered events on the class when a property is changed, and not ', function (done) {
        //Arrange
        var fakeObservableNAME = 'Fake.Observable.Class',
           config = {
               initialize: function () {
                   var me = this;
                   me.mixins.observable.init.apply(me);
               },
               properties: {
                   property: null,
                   property2: null
               },
               requires: ['MEPH.mixins.Observable'],
               mixins: {
                   observable: 'MEPH.mixins.Observable'
               }
           }
        MEPH.undefine(fakeObservableNAME);
        MEPH.define(fakeObservableNAME, config).then(function ($class) {
            var instance = new $class(),
                old,
                path;

            instance.on('altered', function (type, options) {
                path = options.path;
            });

            //Act
            instance.property = { property: null };
            old = instance.property;
            instance.property = 'prop';

            //Assert
            MEPH.undefine(fakeObservableNAME);
            expect(old[MEPH.listenersPropertyKey].length === 0).theTruth('');
            expect(path === 'property').theTruth('the path on the altered event options was not "property"');

        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });
});﻿describe("MEPH/math/Vector.spec.js", function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('a vector can be created', function (done) {
        MEPH.requires('MEPH.math.Vector').then(function () {
            var vector = new MEPH.math.Vector();
            expect(vector).theTruth('a list was not created');
        }).catch(function () {
            expect(new Error('something went wrong while creating a list')).caught();
        }).then(function (x) {
            done();
        });
    });

    it('a vector can be created with an x,y', function (done) {
        MEPH.requires('MEPH.math.Vector').then(function () {
            var vector = new MEPH.math.Vector(1, 2);
            expect(vector.x === 1).theTruth('vector x was not 1');
        }).catch(function () {
            expect(new Error('something went wrong while creating a list')).caught();
        }).then(function (x) {
            done();
        });
    });

    it('a vector can be created with an n components', function (done) {
        MEPH.requires('MEPH.math.Vector').then(function () {
            var vector = new MEPH.math.Vector([1, 2, 4]);
            expect(vector.x === 1).theTruth('vector x was not 1');
            expect(vector.z === 4).theTruth('vector z was not 4');
        }).catch(function () {
            expect(new Error('something went wrong while creating a list')).caught();
        }).then(function (x) {
            done();
        });
    });

    it('a vector can equat to another vector', function (done) {
        MEPH.requires('MEPH.math.Vector').then(function () {
            var vector = new MEPH.math.Vector([1, 2, 4, 4]);
            var vector2 = new MEPH.math.Vector([1, 2, 4, 4]);

            expect(vector.equals(vector2)).theTruth('vector x was not 1');
        }).catch(function () {
            expect(new Error('something went wrong while creating a list')).caught();
        }).then(function (x) {
            done();
        });
    });

    it('a vector1 doesnt equal vector2', function (done) {
        MEPH.requires('MEPH.math.Vector').then(function () {
            var vector1 = new MEPH.math.Vector([1, 2, 4, 14]);
            var vector2 = new MEPH.math.Vector([1, 2, 4, 4]);
            expect(!vector1.equals(vector2)).theTruth('v1 doesnt equal v2');
        }).catch(function () {
            expect(new Error('something went wrong while creating a list')).caught();
        }).then(function (x) {
            done();
        });
    });

    it('a vector1 doesnt equal vector2', function (done) {
        MEPH.requires('MEPH.math.Vector').then(function () {
            var vector1 = new MEPH.math.Vector([1, 2, 4, 14]);
            var vector2 = new MEPH.math.Vector([1, 2, 4, 14, 1]);
            expect(!vector1.equals(vector2)).theTruth('v1 doesnt equal v2');
        }).catch(function () {
            expect(new Error('something went wrong while creating a list')).caught();
        }).then(function (x) {
            done();
        });
    });

    it('can get the ith prosition in the vector', function (done) {
        MEPH.requires('MEPH.math.Vector').then(function () {
            var vector1 = new MEPH.math.Vector([1, 2, 4, 14]);
            expect(vector1.getIndex(3) === 14).theTruth('the wrong index was gotten');
        }).catch(function () {
            expect(new Error('something went wrong while creating a list')).caught();
        }).then(function (x) {
            done();
        });
    });


    it('can make a copy of a vector', function (done) {
        MEPH.requires('MEPH.math.Vector').then(function () {
            var vector1 = new MEPH.math.Vector([1, 2, 4, 14]);
            var copy = vector1.copy();
            expect(vector1.equals(copy)).theTruth('the copy was incorrect');
        }).catch(function () {
            expect(new Error('something went wrong while creating a list')).caught();
        }).then(function (x) {
            done();
        });
    });

    it('calculate dot product 2 vectors', function (done) {
        MEPH.requires('MEPH.math.Vector').then(function () {
            var vector1 = new MEPH.math.Vector([1, 0, 2, 4]);
            var vector2 = new MEPH.math.Vector([2, 0, 2, 1]);
            var v3 = vector1.dot(vector2);
            expect(v3 === 10).theTruth('the dot was incorrect');
        }).catch(function () {
            expect(new Error('something went wrong while creating a list')).caught();
        }).then(function (x) {
            done();
        });
    });

    it('calculate length of a vector', function (done) {
        MEPH.requires('MEPH.math.Vector').then(function () {
            var vector1 = new MEPH.math.Vector([1, 0, 0]);
            var length = vector1.length();
            expect(length === 1).theTruth('the length was incorrect');
        }).catch(function () {
            expect(new Error('something went wrong while creating a list')).caught();
        }).then(function (x) {
            done();
        });
    });


    it('v1 - v2 = v3', function (done) {
        MEPH.requires('MEPH.math.Vector').then(function () {
            var v1 = new MEPH.math.Vector([1, 0, 0]);
            var v2 = new MEPH.math.Vector([1, 0, 0]);
            var v3 = new MEPH.math.Vector([0, 0, 0]);
            expect(v1.subtract(v2).equals(v3)).theTruth('the subtraction was incorrect');
        }).catch(function () {
            expect(new Error('something went wrong while creating a list')).caught();
        }).then(function (x) {
            done();
        });
    });

    it('v1 + v2 = v3', function (done) {
        MEPH.requires('MEPH.math.Vector').then(function () {
            var v1 = new MEPH.math.Vector([1, 0, 0]);
            var v2 = new MEPH.math.Vector([1, 0, 0]);
            var v3 = new MEPH.math.Vector([2, 0, 0]);
            expect(v1.add(v2).equals(v3)).theTruth('the subtraction was incorrect');
        }).catch(function () {
            expect(new Error('something went wrong while creating a list')).caught();
        }).then(function (x) {
            done();
        });
    });

    it('can get dimension of a vector', function (done) {
        MEPH.requires('MEPH.math.Vector').then(function () {
            var v1 = new MEPH.math.Vector([]);
            var v2 = new MEPH.math.Vector([1, 0, 0]);
            var v3 = new MEPH.math.Vector([1, 2, 0, 0]);
            expect(v1.dimensions() === 0).theTruth('the dimensions were incorrect');
            expect(v2.dimensions() === 3).theTruth('the dimensions were incorrect');
            expect(v3.dimensions() === 4).theTruth('the dimensions were incorrect');
        }).catch(function () {
            expect(new Error('something went wrong while creating a list')).caught();
        }).then(function (x) {
            done();
        });
    });

    it('calculates distance v1 -> v2', function (done) {
        MEPH.requires('MEPH.math.Vector').then(function () {
            var v1 = new MEPH.math.Vector([1, 0, 0]);
            var v2 = new MEPH.math.Vector([-1, 0, 0]);
            expect(v1.distance(v2) === 2).theTruth('The distance was incorrect');
        }).catch(function () {
            expect(new Error('something went wrong while creating a list')).caught();
        }).then(function (x) {
            done();
        });
    });
    it('calculates the v1 x v2 = v3', function (done) {
        MEPH.requires('MEPH.math.Vector').then(function () {
            var v1 = new MEPH.math.Vector([1, 0, -2]);
            var v2 = new MEPH.math.Vector([1, 2, 3]);
            expect(v1.cross(v2).equals(new MEPH.math.Vector([4, -5, 2]))).theTruth('The cross was incorrect');
        }).catch(function () {
            expect(new Error('something went wrong while creating a list')).caught();
        }).then(function (x) {
            done();
        });
    });

    it('calculates the v1 x v2 = v3', function (done) {
        MEPH.requires('MEPH.math.Vector').then(function () {
            var v1 = new MEPH.math.Vector([1, 0]);
            var v2 = new MEPH.math.Vector([1, 2]);
            expect(v1.cross(v2).equals(new MEPH.math.Vector([2]))).theTruth('The cross was incorrect');
        }).catch(function () {
            expect(new Error('something went wrong while creating a list')).caught();
        }).then(function (x) {
            done();
        });
    });
    it('calculates the unit vector', function (done) {
        MEPH.requires('MEPH.math.Vector').then(function () {
            var v1 = new MEPH.math.Vector([1, 1, 0]);
            expect(Math.abs(v1.unit().length() - 1) < .0000001).theTruth('The unit was incorrect');
        }).catch(function () {
            expect(new Error('something went wrong while creating a list')).caught();
        }).then(function (x) {
            done();
        });
    });

    it('calculates the lerp of vector', function (done) {
        MEPH.requires('MEPH.math.Vector').then(function () {
            var v1 = new MEPH.math.Vector([1, 1, 0]);
            var v2 = new MEPH.math.Vector([0, 0, 0]);
            var v3 = MEPH.math.Vector.Lerp(v1, v2, .5);
            expect(v3.equals(new MEPH.math.Vector([.5, .5, 0]))).theTruth('The unit was incorrect');
        }).catch(function () {
            expect(new Error('something went wrong while creating a list')).caught();
        }).then(function (x) {
            done();
        });
    });
});﻿describe("MEPH/math/Util.spec.js", 'MEPH.math.Util', function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('a factorial can be calculated.', function (done) {
        MEPH.requires('MEPH.math.Util').then(function () {
            var vector = MEPH.math.Util.factorial(3);
            expect(vector === 6).theTruth('the factorial was incorrect.');
        }).catch(function (e) {
            expect(new Error(e)).caught();
        }).then(function (x) {
            done();
        });
    });

    it('a selection of prime numbers can be computed up to a val', function (done) {
        MEPH.requires('MEPH.math.Util').then(function () {

            var primes = MEPH.math.Util.primes(10);

            expect(primes.length === 4).theTruth('the number of primes was incorrect.');
        }).catch(function (e) {
            expect(new Error(e)).caught();
        }).then(function (x) {
            done();
        });
    });



    it('a selection of prime numbers can be computed up to a val', function (done) {
        MEPH.requires('MEPH.math.Util').then(function () {

            var primes = MEPH.math.Util.primes(100);

            expect(primes.length === 25).theTruth('the number of primes was incorrect.');
        }).catch(function (e) {
            expect(new Error(e)).caught();
        }).then(function (x) {
            done();
        });
    });

    it(' can factor a number into an array of its prime multiples.', function (done) {
        MEPH.requires('MEPH.math.Util').then(function () {

            var factor = MEPH.math.Util.factor(10);

            expect(factor.length === 3).theTruth('the number of primes was incorrect.');
        }).catch(function (e) {
            expect(new Error(e)).caught();
        }).then(function (x) {
            done();
        });
    });


    it(' can factor a number into an array of its prime multiples.', function (done) {
        MEPH.requires('MEPH.math.Util').then(function () {
            var primes = MEPH.math.Util.primes(11),
                p = 1,
                pl = primes.length;

            primes.foreach(function (x) { p = x * p; })
            var factor = MEPH.math.Util.factor(p);

            expect(factor.length === (pl + 1)).theTruth('the number of primes was incorrect.');
        }).catch(function (e) {
            expect(new Error(e)).caught();
        }).then(function (x) {
            done();
        });
    });

    it('can apply a window function to an array of numbers ', function () {
        var res = [].interpolate(0, 100, function (x) {
            return 10;
        }).window(0, 10, MEPH.math.Util.window.Triangle.bind(null, -1));
        var h1 = res.subset(0, 5);
        var h2 = res.subset(5).reverse();
        expect(h1.all(function (x, y) {
            return x === h2[y];
        })).toBeTruthy();
    });

    it('can apply a square window function', function () {
        var res = [].interpolate(0, 100, function (x) {
            return 10;
        }).window(0, 10, MEPH.math.Util.window.Rectangle);
        var h1 = res;
        expect(h1.all(function (x, y) {
            return x === 10;
        })).toBeTruthy();
    });

    it('can convert x,y to polar coordinates', function () {
        var x = 1;
        var y = 0;
        var polar = MEPH.math.Util.polar(x, y);

        expect(polar.radius).toBe(1);
        expect(polar.theta).toBe(0);
    });

    it('can generate a sinc ', function () {
        var res = MEPH.math.Util.sinc([].interpolate(0, 10, function (x) {
            return Math.sin(x);
        }), 10);

        expect(res.length).toBeTruthy();
    });

    it('can generate a blackmanharris lobe ', function () {
        var fftsize = 1024;
        
        var bhl = MEPH.math.Util.getBhLobe([].interpolate(0, 10, function (x) {
            return Math.sin(x);;
        }), fftsize);

        expect(bhl.length).toBe(10);
        expect(bhl.all(function (t) {
            return !isNaN(t);
        })).toBeTruthy();
    })
});﻿describe("MEPH/math/Quaternion.spec.js", function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('a quaternion can be created', function (done) {
        MEPH.requires('MEPH.math.Quaternion').then(function () {
            var quaternion = new MEPH.math.Quaternion();
            expect(quaternion).theTruth('a quaternion was not created');
        }).catch(function () {
            expect(new Error('something went wrong while creating a quaternion')).caught();
        }).then(function (x) {
            done();
        });
    });


    it('a quaternion can be created', function (done) {
        MEPH.requires('MEPH.math.Quaternion').then(function () {
            var quaternion = new MEPH.math.Quaternion([1, 1, 2, 3]);
            expect(quaternion.h === 1).theTruth('a quaternion.h was not 1');
            expect(quaternion.i === 1).theTruth('a quaternion.i was not 1');
            expect(quaternion.j === 2).theTruth('a quaternion.j was not 2');
            expect(quaternion.k === 3).theTruth('a quaternion.k was not 3');
        }).catch(function () {
            expect(new Error('something went wrong while creating a quaternion')).caught();
        }).then(function (x) {
            done();
        });
    });

    it('a quaternion noncommunitivity of quaternion multiplication', function (done) {
        MEPH.requires('MEPH.math.Quaternion').then(function () {
            var res = Quaternion.mul('hh');
            expect(res === 'h').theTruth('hh rule is incorrect');
            res = Quaternion.mul('hi');
            expect(res === 'i').theTruth(' hi rule is incorrect');
            res = Quaternion.mul('hj');
            expect(res === 'j').theTruth(' hj rule is incorrect');
            res = Quaternion.mul('hk');
            expect(res === 'k').theTruth(' hk rule is incorrect');
            res = Quaternion.mul('ih');
            expect(res === 'i').theTruth(' hi rule is incorrect');
            res = Quaternion.mul('jh');
            expect(res === 'j').theTruth(' hj rule is incorrect');
            res = Quaternion.mul('kh');
            expect(res === 'k').theTruth(' hk rule is incorrect');


            res = Quaternion.mul('ii');
            expect(res === -1).theTruth('ii rule is incorrect');
            res = Quaternion.mul('ij');
            expect(res === 'k').theTruth('ij rule is incorrect');
            res = Quaternion.mul('ik');
            expect(res === '-j').theTruth('ik rule is incorrect');


            res = Quaternion.mul('ji');
            expect(res === '-k').theTruth('ji rule is incorrect');
            res = Quaternion.mul('jj');
            expect(res === -1).theTruth('jj rule is incorrect');
            res = Quaternion.mul('jk');
            expect(res === 'i').theTruth('jk rule is incorrect');


            res = Quaternion.mul('kh');
            expect(res === 'k').theTruth('kh rule is incorrect');
            res = Quaternion.mul('ki');
            expect(res === 'j').theTruth('ki rule is incorrect');
            res = Quaternion.mul('kj');
            expect(res === '-i').theTruth('kj rule is incorrect');
            res = Quaternion.mul('kk');
            expect(res === -1).theTruth('kk rule is incorrect');


        }).catch(function () {
            expect(new Error('something went wrong while creating a quaternion')).caught();
        }).then(function (x) {
            done();
        });
    });

    it('a quaternion noncommunitivity of quaternion multiplication', function (done) {
        MEPH.requires('MEPH.math.Quaternion').then(function () {
            var quaternion1 = new MEPH.math.Quaternion([1, 2, 3, 4]);
            var quaternion2 = new MEPH.math.Quaternion([1, 2, 3, 4]);
            var res = quaternion1.multiply(quaternion2);
            expect(res.equals(new MEPH.math.Vector([-28, 4, 6, 8]))).toBeTruthy();
        }).catch(function () {
            expect(new Error('something went wrong while creating a quaternion')).caught();
        }).then(function (x) {
            done();
        });
    });

    it('a quaternion noncommunitivity of quaternion addition', function (done) {
        MEPH.requires('MEPH.math.Quaternion').then(function () {
            var quaternion1 = new MEPH.math.Quaternion([1, 2, 3, 4]);
            var quaternion2 = new MEPH.math.Quaternion([1, 2, 3, 4]);
            var res = quaternion1.add(quaternion2);
            expect(res.equals(new MEPH.math.Vector([2, 4, 6, 8]))).toBeTruthy();
        }).catch(function () {
            expect(new Error('something went wrong while creating a quaternion')).caught();
        }).then(function (x) {
            done();
        });
    });
    it('quaternion conjugate', function (done) {
        MEPH.requires('MEPH.math.Quaternion').then(function () {
            var quaternion1 = new Quaternion([1, 2, 3, 4]);

            var vector = quaternion1.conjugate();

            expect(vector.equals(new MEPH.math.Vector([1, -2, -3, -4]))).theTruth('the wrong quaternion was created');
        }).catch(function () {
            expect(new Error('something went wrong while creating a quaternion')).caught();
        }).then(function (x) {
            done();
        });
    });

    it('quaternion qaddtion', function (done) {
        MEPH.requires('MEPH.math.Quaternion').then(function () {
            var quaternion1 = new Quaternion([1, 2, 3, 4]);

            var res = quaternion1.qaddition(new Quaternion([1, 2, 3, 4]));

            expect(res.equals(new MEPH.math.Vector([2, 4, 6, 8]))).theTruth('the wrong quaternion was created');
        }).catch(function () {
            expect(new Error('something went wrong while creating a quaternion')).caught();
        }).then(function (x) {
            done();
        });
    });
    it('quaternion qmultiply', function (done) {
        MEPH.requires('MEPH.math.Quaternion').then(function () {
            var quaternion1 = new Quaternion([3, 1, 0, -2]);

            var res = quaternion1.qmultiply(new Quaternion([2, 1, 2, 3]));

            expect(res.equals(new MEPH.math.Vector([11, 9, 1, 7]))).theTruth('the wrong quaternion was created');
        }).catch(function () {
            expect(new Error('something went wrong while creating a quaternion')).caught();
        }).then(function (x) {
            done();
        });
    });

    it('quaternion norm', function (done) {
        MEPH.requires('MEPH.math.Quaternion').then(function () {
            var quaternion1 = new Quaternion([1, 1, 1, -1]);


            expect(quaternion1.norm() === 2).theTruth('the wrong quaternion was created');
        }).catch(function () {
            expect(new Error('something went wrong while creating a quaternion')).caught();
        }).then(function (x) {
            done();
        });
    });

    it('quaternion det', function (done) {
        MEPH.requires('MEPH.math.Quaternion').then(function () {
            var quaternion1 = new Quaternion([1, 1, 1, -1]);

            expect(quaternion1.det() === 4).theTruth('the wrong quaternion was created');
        }).catch(function () {
            expect(new Error('something went wrong while creating a quaternion')).caught();
        }).then(function (x) {
            done();
        });
    });

    it('quaternion unit', function (done) {
        MEPH.requires('MEPH.math.Quaternion').then(function () {
            var quaternion1 = new Quaternion([2, 0, 0, 0]);

            expect(quaternion1.unit().equals(new MEPH.math.Vector([1, 0, 0, 0]))).theTruth('the wrong quaternion was created');
        }).catch(function () {
            expect(new Error('something went wrong while creating a quaternion')).caught();
        }).then(function (x) {
            done();
        });
    });

    it('quaternion reciprocal', function (done) {
        MEPH.requires('MEPH.math.Quaternion').then(function () {
            var quaternion1 = new Quaternion([2, 0, 0, 0]);

            expect(quaternion1.reciprocal().equals(new MEPH.math.Vector([2 / 4, 0, 0, 0]))).theTruth('the wrong quaternion was created');
        }).catch(function () {
            expect(new Error('something went wrong while creating a quaternion')).caught();
        }).then(function (x) {
            done();
        });
    });

    it('Choose two imaginary quaternions p = b1i + c1j + d1k and q = b2i + c2j + d2k. Their dot product is' +
        'p.q = b1b2 + c1c2 + d1d2', function (done) {
            MEPH.requires('MEPH.math.Quaternion').then(function () {
                var q1 = new Quaternion([2, 1, 2, 3]);
                var q2 = new Quaternion([1, 1, 2, 3]);
                var res = q1.gdot(q2)

                expect(res === 14).theTruth('the wrong quaternion was created');
            }).catch(function () {
                expect(new Error('something went wrong while creating a quaternion')).caught();
            }).then(function (x) {
                done();
            });

        });

    it('Quaternion rotate', function (done) {
        MEPH.requires('MEPH.math.Quaternion').then(function () {
            var q1 = new Quaternion([0, 1, 2, 3]);
            var axis = new MEPH.math.Vector([1, 1, 1]);
            var angle = Math.PI * 2 / 3;
            var res = q1.rotate(axis, angle)

            expect(res.distance(new MEPH.math.Vector([0, 3, 1, 2])) < .0001).theTruth('the wrong quaternion was created');
        }).catch(function () {
            expect(new Error('something went wrong while creating a quaternion')).caught();
        }).then(function (x) {
            done();
        });

    });
});﻿describe("MEPH/math/Set.spec.js", function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('a set can be created', function (done) {
        MEPH.requires('MEPH.math.Set').then(function () {
            var set = new MEPH.math.Set();
            expect(set).theTruth('a set was not created');
        }).catch(function (e) {
            expect(e).caught();
        }).then(function (x) {
            done();
        });
    });

    it('can set the sets value ', function (done) {
        MEPH.requires('MEPH.math.Set').then(function () {
            var set = new MEPH.math.Set();
            set.set([1, 2, 3]);
            expect(set).theTruth('a set was not created');
            expect(set.get().first()).toBe(1);
            expect(set.get().nth(3)).toBe(3);
        }).catch(function (e) {
            expect(e).caught();
        }).then(function (x) {
            done();
        });
    });

    it('can generate the super set of a set. ', function (done) {
        MEPH.requires('MEPH.math.Set').then(function () {
            var set = new MEPH.math.Set();
            set.set([1, 2, 3]);

            var superset = MEPH.math.Set.superset(set);
            expect(superset.get().length).toBe(8);
        }).catch(function (e) {
            expect(e).caught();
        }).then(function (x) {
            done();
        });
    });

    it('can generate the super set of a set. ', function (done) {
        MEPH.requires('MEPH.math.Set').then(function () {
            var set = new MEPH.math.Set();
            set.set([].interpolate(0, 8, function (x) { return x; }));

            var superset = MEPH.math.Set.superset(set);

            expect(superset.get().length).toBe(256);
        }).catch(function (e) {
            expect(e).caught();
        }).then(function (x) {
            done();
        });
    });


    it('can generate a sag set. ', function (done) {
        MEPH.requires('MEPH.math.Set').then(function () {

            var superset = MEPH.math.Set.sagset(6);

            expect(superset.length).toBe(14);

        }).catch(function (e) {
            expect(e).caught();
        }).then(function (x) {
            done();
        });
    });
    it('can generate a sag set. ', function (done) {
        MEPH.requires('MEPH.math.Set').then(function () {
            
            var superset = MEPH.math.Set.sagset(3);

            expect(superset.length).toBe(4);

        }).catch(function (e) {
            expect(e).caught();
        }).then(function (x) {
            done();
        });
    });

    

    it('can generate all the 6 item subsets of a 6 item set', function (done) {
        MEPH.requires('MEPH.math.Set').then(function () {

            var sets = MEPH.math.Set.itemSets(6, 6);

            expect(sets.length).toBe(1);

        }).catch(function (e) {
            expect(e).caught();
        }).then(function (x) {
            done();
        });
    });


    it('can generate all the 6 item subsets of a 5 item set', function (done) {
        MEPH.requires('MEPH.math.Set').then(function () {

            var sets = MEPH.math.Set.itemSets(6, 5);

            expect(sets.length).toBe(6);

        }).catch(function (e) {
            expect(e).caught();
        }).then(function (x) {
            done();
        });
    });

    it('can generate all the 6 item subsets of a 4 item set', function (done) {
        MEPH.requires('MEPH.math.Set').then(function () {

            var sets = MEPH.math.Set.itemSets(6, 4);

            expect(sets.length).toBe(15);

        }).catch(function (e) {
            expect(e).caught();
        }).then(function (x) {
            done();
        });
    });

    it('can generate all the 6 item subsets of a 3 item set', function (done) {
        MEPH.requires('MEPH.math.Set').then(function () {

            var sets = MEPH.math.Set.itemSets(6, 3);

            expect(sets.length).toBe(20);

        }).catch(function (e) {
            expect(e).caught();
        }).then(function (x) {
            done();
        });
    });

    it('can generate all the permutations of a set ', function (done) {
        MEPH.requires('MEPH.math.Set').then(function () {
            var set = new MEPH.math.Set();
            set.set([].interpolate(0, 3, function (x) {
                return x;
            }));
            var sets = MEPH.math.Set.permutate(set);
            sets.foreach(function (set) {
                console.log(set.print());
            });
            expect(sets.length).toBe(6);

        }).catch(function (e) {
            expect(e).caught();
        }).then(function (x) {
            done();
        });
    });

    it('can generate all the permutations of a set ', function (done) {
        MEPH.requires('MEPH.math.Set').then(function () {
            var set = new MEPH.math.Set();
            set.set([].interpolate(0, 5, function (x) {
                return x;
            }));
            var sets = MEPH.math.Set.permutate(set);
            sets.foreach(function (set) {
                console.log(set.print());
            });
            expect(sets.length).toBe(MEPH.math.Util.factorial(5));

        }).catch(function (e) {
            expect(e).caught();
        }).then(function (x) {
            done();
        });
    });
});﻿describe("MEPH/math/Matrix.spec.js", function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('a matrix can be created', function (done) {
        MEPH.requires('MEPH.math.Matrix').then(function () {
            var m = new Matrix();
            expect(m).theTruth('a matrix was not created');
        }).catch(function () {
            expect(new Error('something went wrong while creating a list')).caught();
        }).then(function (x) {
            done();
        });
    });

    it('a matrix can be created with n x m', function (done) {
        MEPH.requires('MEPH.math.Matrix').then(function () {
            var m = new Matrix(3, 4);
            expect(m.matrix.length === 12).theTruth('a matrix was not created correctly');
        }).catch(function () {
            expect(new Error('something went wrong while creating a list')).caught();
        }).then(function (x) {
            done();
        });
    });

    it('can set a matrix with an array', function (done) {
        MEPH.requires('MEPH.math.Matrix').then(function () {
            var m = new Matrix(3, 4);
            m.set([].interpolate(0, 12, function (x) { return x; }));
            expect(m.get(1, 1) === 5).toBeTruthy();
        }).catch(function () {
            expect(new Error('something went wrong while creating a list')).caught();
        }).then(function (x) {
            done();
        });
    });

    it('get row as vector ', function (done) {
        MEPH.requires('MEPH.math.Matrix').then(function () {
            var m = new Matrix(3, 4);
            m.set([].interpolate(0, 12, function (x) { return x; }));
            expect(m.row(1).equals(new MEPH.math.Vector([4, 5, 6, 7]))).toBeTruthy();
        }).catch(function () {
            expect(new Error('something went wrong while creating a list')).caught();
        }).then(function (x) {
            done();
        });
    });

    it('get column as vector', function (done) {
        MEPH.requires('MEPH.math.Matrix').then(function () {
            var m = new Matrix(3, 4);
            m.set([].interpolate(0, 12, function (x) { return x; }));
            expect(m.column(1).equals(new MEPH.math.Vector([1, 5, 9]))).toBeTruthy();
        }).catch(function () {
            expect(new Error('something went wrong while creating a list')).caught();
        }).then(function (x) {
            done();
        });
    });

    it('create a matrix row wise ', function (done) {
        MEPH.requires('MEPH.math.Matrix').then(function () {
            var m = new Matrix();
            m.addRow(new MEPH.math.Vector([0, 1, 2, 3]));
            expect(m.rows === 1).toBeTruthy();
            expect(m.columns === 4).toBeTruthy();
            expect(m.get(0, 1) === 1).toBeTruthy();
        }).catch(function () {
            expect(new Error('something went wrong while creating a list')).caught();
        }).then(function (x) {
            done();
        });
    });

    it('create a matrix row wise ', function (done) {
        MEPH.requires('MEPH.math.Matrix').then(function () {
            var m = new Matrix();
            m.addRow(new MEPH.math.Vector([0, 1, 2, 3]));
            m.addRow(new MEPH.math.Vector([0, 3, 2, 3]));
            expect(m.rows === 2).toBeTruthy();
            expect(m.columns === 4).toBeTruthy();
            expect(m.get(0, 1) === 1).toBeTruthy();
            expect(m.get(1, 1) === 3).toBeTruthy();
        }).catch(function () {
            expect(new Error('something went wrong while creating a list')).caught();
        }).then(function (x) {
            done();
        });
    });

    it('matrix addition ', function (done) {
        MEPH.requires('MEPH.math.Matrix').then(function () {
            var m1 = new Matrix(3, 4);
            m1.set([].interpolate(0, 12, function (x) { return x; }));

            var m2 = new Matrix(3, 4);
            m2.set([].interpolate(0, 12, function (x) { return x; }));

            expect(m1.add(m2).get(1, 1) === 10).toBeTruthy();

        }).catch(function () {
            expect(new Error('something went wrong while creating a list')).caught();
        }).then(function (x) {
            done();
        });
    });

    it('matrix scalar multiplication ', function (done) {
        MEPH.requires('MEPH.math.Matrix').then(function () {
            var m1 = new Matrix(3, 4);
            m1.set([].interpolate(0, 12, function (x) { return 1; }));
            expect(m1.mul(10).get(1, 1) === 10).toBeTruthy();

        }).catch(function () {
            expect(new Error('something went wrong while creating a list')).caught();
        }).then(function (x) {
            done();
        });
    });

    it('matrix transpose ', function (done) {
        MEPH.requires('MEPH.math.Matrix').then(function () {
            var m1 = new Matrix(3, 4);
            m1.set([].interpolate(0, 12, function (x) { return x; }));
            expect(m1.transpose().get(0, 2) === 8).toBeTruthy();

        }).catch(function () {
            expect(new Error('something went wrong while creating a list')).caught();
        }).then(function (x) {
            done();
        });
    });

    it('matrix multiplication ', function (done) {
        MEPH.requires('MEPH.math.Matrix').then(function () {
            var m1 = new Matrix(3, 4);
            m1.set([].interpolate(0, 12, function (x) { return x; }));

            var m2 = new Matrix(4, 3);
            m2.set([].interpolate(0, 12, function (x) { return x; }));

            expect(m1.mul(m2).get(2, 2) > 1).toBeTruthy();

        }).catch(function () {
            expect(new Error('something went wrong while creating a list')).caught();
        }).then(function (x) {
            done();
        });
    });

    it('matrix interchange row ', function (done) {
        MEPH.requires('MEPH.math.Matrix').then(function () {
            var m1 = new Matrix(3, 4);
            m1.set([].interpolate(0, 12, function (x) { return x; }));

            m1.switchRow(0, 1);
            expect(m1.get(0, 0) === 4).toBeTruthy();

        }).catch(function () {
            expect(new Error('something went wrong while creating a list')).caught();
        }).then(function (x) {
            done();
        });
    });

    it('matrix print', function (done) {
        MEPH.requires('MEPH.math.Matrix').then(function () {

            var m2 = new Matrix(4, 4);
            m2.set([].interpolate(0, 4 * 4, function (x) { return x; }));

            expect(m2.printMatrix()).toBeTruthy();

        }).catch(function () {
            expect(new Error('something went wrong while creating a list')).caught();
        }).then(function (x) {
            done();
        });
    });


    it('matrix calculate row multiple for rref', function (done) {
        MEPH.requires('MEPH.math.Matrix').then(function () {

            var m2 = new Matrix(4, 4);
            m2.set([].interpolate(0, 4 * 4, function (x) { return x + 1; }));
            var multiple = m2.getMultiple(0, 1);
            expect(multiple === -5).toBeTruthy();
        }).catch(function () {
            expect(new Error('something went wrong while creating a list')).caught();
        }).then(function (x) {
            done();
        });
    });


    it('matrix row operate ', function (done) {
        MEPH.requires('MEPH.math.Matrix').then(function () {

            var m2 = new Matrix(4, 4);
            m2.set([].interpolate(0, 4 * 4, function (x) { return x + 1; }));
            console.log(m2.printMatrix());
            m2.reduceColumn(0);
            console.log(m2.printMatrix());
            expect(m2.column(0).equals(new MEPH.math.Vector([1, 0, 0, 0]))).toBeTruthy();
        }).catch(function () {
            expect(new Error('something went wrong while creating a list')).caught();
        }).then(function (x) {
            done();
        });
    });


    it('matrix row operate twice ', function (done) {
        MEPH.requires('MEPH.math.Matrix').then(function () {

            var m2 = new Matrix(4, 4);
            m2.set([].interpolate(0, 4 * 4, function (x) { return x + 1; }));
            console.log(m2.printMatrix());
            m2.reduceColumn(0);
            console.log(m2.printMatrix());
            m2.reduceColumn(1);
            console.log(m2.printMatrix());
            expect(m2.column(0).equals(new MEPH.math.Vector([1, 0, 0, 0]))).toBeTruthy();
        }).catch(function () {
            expect(new Error('something went wrong while creating a list')).caught();
        }).then(function (x) {
            done();
        });
    });


    it('matrix row reduce echelon form', function (done) {
        MEPH.requires('MEPH.math.Matrix').then(function () {
            var m1 = new Matrix(3, 4);
            m1.set([]);

            var m2 = new Matrix(4, 3);
            m2.set([].interpolate(0, 12, function (x) { return x; }));
            console.log(m2.printMatrix());
            m2.rref();
            console.log(m2.printMatrix());

        }).catch(function () {
            expect(new Error('something went wrong while creating a list')).caught();
        }).then(function (x) {
            done();
        });
    });
    it('matrix row reduce echelon form', function (done) {
        MEPH.requires('MEPH.math.Matrix').then(function () {

            var m2 = new Matrix(4, 4);
            m2.set([1, 3, 5, 6,
                    2, 7, 1, 12,
                    2, 3, 4, 1,
                    2, 3, 4, 1]);
            console.log(m2.printMatrix());
            m2.rref();
            console.log(m2.printMatrix());

        }).catch(function () {
            expect(new Error('something went wrong while creating a list')).caught();
        }).then(function (x) {
            done();
        });
    });
});﻿describe("MEPH/math/Hamilton.spec.js", function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('a hamilton can be created', function (done) {
        MEPH.requires('MEPH.math.Hamilton').then(function () {
            var hamilton = new Hamilton(new MEPH.math.Vector([1, 2, 3, 4]), new MEPH.math.Vector([1, 2, 3, 4]));
            expect(hamilton).theTruth('a quaternion was not created');
        }).catch(function () {
            expect(new Error('something went wrong while creating a quaternion')).caught();
        }).then(function (x) {
            done();
        });
    });

    it('hamilton multiplication', function (done) {
        MEPH.requires('MEPH.math.Hamilton').then(function () {
            var hamilton = new Hamilton(new MEPH.math.Vector([1, 2, 3, 4]), new MEPH.math.Vector([1, 2, 3, 4]));
            var vector = hamilton.multiplication();
            
            expect(vector.equals(new MEPH.math.Vector([-28, 4, 6, 8]))).theTruth('the wrong vector was created');
        }).catch(function () {
            expect(new Error('something went wrong while creating a quaternion')).caught();
        }).then(function (x) {
            done();
        });
    });


    it('hamilton addition', function (done) {
        MEPH.requires('MEPH.math.Hamilton').then(function () {
            var hamilton = new Hamilton(new MEPH.math.Vector([1, 2, 3, 4]), new MEPH.math.Vector([1, 2, 3, 4]));
            
            var vector = hamilton.addition();

            expect(vector.equals(new MEPH.math.Vector([2, 4, 6, 8]))).theTruth('the wrong vector was created');
        }).catch(function () {
            expect(new Error('something went wrong while creating a quaternion')).caught();
        }).then(function (x) {
            done();
        });
    });

});﻿describe("MEPH/math/FFT.spec.js", 'MEPH.math.FFT', function () {
    var FFT;
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
        FFT = MEPH.math.FFT;
    });

    it('can create a FFT.', function () {
        var fft = new FFT();

        expect(fft).toBeTruthy();
    });

    it('can execute a fft on an array', function () {
        var fft = new FFT();
        var fftsize = 16;
        var output = new Float32Array(fftsize * 2);
        var outputOffset = 0;
        var outputStride = 1;;
        
        var input = new Float32Array(fftsize);
        input.foreach(function (x, index) {
            input[index] = Math.cos(Math.PI * index / 16);
        })
        var inputOffset = 0;
        var inputStride = 1;
        var type = 'real';

        fft.complex(fftsize, false);
        fft.process(output, outputOffset, outputStride, input, inputOffset, inputStride, type)

        var ifft = new FFT();
        ifft.complex(fftsize, true);
        var output2 = new Float32Array(fftsize * 2);
        ifft.process(output2, inputOffset, inputStride, output, outputOffset, outputStride, false);

        var res = []
        output2.foreach(function (x, index) {
            if (index % 2 === 0)
                res.push((output2[index] / fftsize));
        })

        expect(res.all(function (x, i) {

            return Math.abs(Math.abs(res[i]) - Math.abs(input[i])) < .001;
        })).toBeTruthy();


    });
});﻿describe("MEPH/math/Expression.spec.js", 'MEPH.math.expression.Evaluator', 'MEPH.math.Expression', 'MEPH.math.expression.Factor', function () {
    var Evaluator;
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
        Evaluator = MEPH.math.expression.Evaluator;
    });

    var printExpressionToScreen = function (result) {
        return MEPH.requires('MEPH.math.jax.MathJax', 'MEPH.math.Expression').then(function () {
            return MEPHJax.ready().then(function () {
                var dom = document.createElement('div');
                document.body.appendChild(dom);
                return MEPHJax.load(result.latex(), dom)
            });
        })
    };

    it('can print a derivative.', function () {
        var derivative = Expression.derivative(Expression.variable('a'), 1, 'u', 't');

        console.log(derivative.latex());
        printExpressionToScreen(derivative);
        expect(derivative.latex()).toBe('\\frac{\\partial u}{\\partial t} (a)');
    });


    it('can print the 2nd derivative.', function () {
        var derivative = Expression.derivative(Expression.variable('a'), 2, 'u', 't');

        console.log(derivative.latex());
        printExpressionToScreen(derivative);
        expect(derivative.latex()).toBe('\\frac{\\partial^2 u}{\\partial t^2} (a)');
    });

    it('can create a e expression', function () {
        var e = Expression.e('x');

        expect(e.latex() === 'e^x').toBeTruthy();
    });

    it('can set a properties on an expression', function () {
        var e = Expression.variable('x');
        e.setProperties({ val: true });

        var result = e.getProperties();
        expect(result.val).toBe(true);
    })

});﻿describe("MEPH/math/Expression.spec.js", 'MEPH.math.Expression', function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });
    var printExpressionToScreen = function (result) {
        return MEPH.requires('MEPH.math.jax.MathJax', 'MEPH.math.Expression').then(function () {
            return MEPHJax.ready().then(function () {
                var dom = document.createElement('div');
                document.body.appendChild(dom);
                return MEPHJax.load(result.latex(), dom)
            });
        })
    };

    it('when anything is matched, it can be more than one things matching the anything.', function () {
        // MultiplyIntegralofFx
        var rule = Expression.Rules.Integration.IntegralConstMultiply();

        var c = Expression.variable('A');
        var t = Expression.variable('x');
        var y = Expression.variable('x');

        var expression = Expression.integral(Expression.multiplication(c, t, y), 'x');

        expect(Expression.matchRule(expression, rule)).toBeTruthy();
    });

    it('when anything is matched, it can be more than one things matching the anything.', function () {
        // MultiplyIntegralofFx
        var rule = Expression.Rules.Integration.IntegralConstMultiply();

        var c = Expression.variable('c');
        var t = Expression.variable('t');
        var y = Expression.variable('y');

        var expression = Expression.integral(Expression.multiplication(c, t, y), 'x');

        expect(!Expression.matchRule(expression, rule)).toBeTruthy();
    });

    it('a dependency can describe a relation from a child to a parent using upTo:[type of function]', function () {
        var c = Expression.variable('A');
        var a = Expression.anything();
        var expression = Expression.integral(Expression.multiplication(c, a), 'x');

        var res = Expression.select(c, { offset: 'up:.integral' });
        expect(expression === res).toBeTruthy();
    });



    it('wont translate if it is not correct.', function () {
        var Expression = MEPH.math.Expression;

        var rule1 = Expression.Rules.Integration.IntegralConstMultiply();
        var rule2 = Expression.Rules.Integration.MultiplyIntegralofFx();

        var expression = Expression.integral(
                            Expression.multiplication(
                                Expression.variable('x'),
                                Expression.addition(
                                    Expression.func('g', 'x'),
                                    Expression.func('f', 'x')
                                )),
                        'x');
        expression.name(Expression.Rules.Integration.IntegralConstMultiply().name());
        var rule = Expression.matchRule(expression, rule1, true);
        expect(!rule).toBeTruthy();
    });

    it('a zero expression has a value, and can be detected', function () {
        var exp = Expression.zero();

        var res = Expression.isZero(exp);

        expect(res).toBeTruthy();
    });

    it('can return the gcd of an expression like 4*x + 4*y => 4', function () {
        var exp = Expression.addition(Expression.multiplication('4', 'x'), Expression.multiplication('4', 'y'));

        var denom = Expression.GreatestCommonDenominator(exp);

        expect(denom.partOrDefault(Expression.type.variable) == 4).toBeTruthy();
    });

    it('can return the gcd of an expression like 4*x + 4*x => 4*x', function () {
        var exp = Expression.addition(Expression.multiplication('4', 'x'), Expression.multiplication('4', 'x'));

        var denom = Expression.GreatestCommonDenominator(exp);
        
        expect(denom.latex() === '4x').toBeTruthy();
    });


    it('can return the gcd of an expression like 4*x + 5*t => null', function () {
        var exp = Expression.addition(Expression.multiplication('4', 'x'), Expression.multiplication('5', 't'));

        var denom = Expression.GreatestCommonDenominator(exp);

        expect(denom === null).toBeTruthy();
    });

    it('can get matching rules ', function () {
        var exp = Expression.integral(Expression.variable('a'), Expression.variable('x'));
        var rules = Expression.getMatchingRules(exp);
        expect(rules.first().type === Expression.type.integral);
        expect(rules.length === 1).toBeTruthy();
    });
});﻿describe("MEPH/math/Expression.spec.js", 'MEPH.math.Expression', function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });
    var printExpressionToScreen = function (result) {
        return MEPH.requires('MEPH.math.jax.MathJax', 'MEPH.math.Expression').then(function () {
            return MEPHJax.ready().then(function () {
                var dom = document.createElement('div');
                document.body.appendChild(dom);
                return MEPHJax.load(result.latex(), dom)
            });
        })
    };

    it('can create a flat  addition expression, from a tree', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function () {
            var addition = Expression.addition(Expression.variable('a'),
                                                Expression.addition(Expression.variable('b'),
                                                                    Expression.variable('c')));
            var flattenedAddition = Expression.Flatten(addition, 'addition');

            expect(flattenedAddition.parts.length === 3).theTruth('wrong number of parts ');
        }).catch(function (e) {
            expect(e).caught();
        }).then(function (x) {
            done();
        });
    });

    it('can flatten a power expression, from a tree', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function () {
            var power = Expression.power(Expression.power('x', 2), 2);
            var flattenedAddition = Expression.Flatten(power, Expression.function.power);

            expect(flattenedAddition.partOrDefault(Expression.function.power).partOrDefault(Expression.type.variable) === 4).theTruth('power in correct');

        }).catch(function (e) {
            expect(e).caught();
        }).then(function (x) {
            done();
        });
    });


    it('can flatten a power expression with (x^2)^a, from a tree', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function () {
            var power = Expression.power(Expression.power('x', 2), 'a');
            var flattenedAddition = Expression.Flatten(power, Expression.function.power);
            var pow = flattenedAddition.partOrDefault(Expression.function.power);
            expect(pow.type === Expression.type.multiplication).theTruth('power in correct');
            expect(pow.getParts().length === 2).toBeTruthy();
        }).catch(function (e) {
            expect(e).caught();
        }).then(function (x) {
            done();
        });
    });


    it('can flatten a power expression with (x^a)^2, from a tree', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function () {
            var power = Expression.power(Expression.power('x', 'a'), 2);
            var flattenedAddition = Expression.Flatten(power, Expression.function.power);
            var pow = flattenedAddition.partOrDefault(Expression.function.power);
            expect(pow.type === Expression.type.multiplication).theTruth('power in correct');
            expect(pow.getParts().length === 2).toBeTruthy();
        }).catch(function (e) {
            expect(e).caught();
        }).then(function (x) {
            done();
        });
    });


    it('can flatten a power expression with (((x^2)^2)^2), from a tree', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function () {
            var power = Expression.power(Expression.power(Expression.power('x', 2), 2), 2);
            var flattenedAddition = Expression.Flatten(power, Expression.function.power);
            expect(flattenedAddition.partOrDefault(Expression.function.power).partOrDefault(Expression.type.variable) === 8).theTruth('power in correct');

        }).catch(function (e) {
            expect(e).caught();
        }).then(function (x) {
            done();
        });
    });

    it('can flatten a power expression with ((x^2)^2), from a tree', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function () {
            var power = Expression.power(Expression.power(Expression.variable('x'), Expression.variable('2')), Expression.variable('2'));
            var flattenedAddition = Expression.Flatten(power, Expression.function.power);
            expect(flattenedAddition.partOrDefault(Expression.function.power).partOrDefault(Expression.type.variable) === 4).theTruth('power in correct');

        }).catch(function (e) {
            expect(e).caught();
        }).then(function (x) {
            done();
        });
    });



    it('can create all the possible associative groupings for an expression', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function () {
            var addition = Expression.addition(Expression.variable('a'), Expression.variable('b'), Expression.variable('c'));

            var groupings = Expression.createAssociativeGroupings(addition);
            expect(groupings).toBeTruthy();
        }).catch(function (e) {
            expect(e).caught();
        }).then(done);
    });

    it(' can convert groupings into an expression.', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function () {
            var addition = Expression.addition(Expression.variable('a'), Expression.variable('b'), Expression.variable('c'));

            var groupings = Expression.createAssociativeGroupings(addition);

            var expression = Expression.convertGroup({ set: groupings[0].set, grouping: groupings.first().grouping.first() }, Expression.type.addition);

            expect(expression).toBeTruthy();

            expect(expression.parts.length === 2).toBeTruthy();
            return printExpressionToScreen(expression);
        }).catch(function (e) {
            expect(e).caught();
        }).then(done);
    });


    it('can convert all groupings into expressions.', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function () {
            var addition = Expression.addition(Expression.variable('a'), Expression.variable('b'), Expression.variable('c'));

            var groupings = Expression.createAssociativeGroupings(addition);

            var expressions = Expression.convertGrouping(groupings, Expression.type.addition);

            expect(expressions).toBeTruthy();
            expressions.foreach(function (x) {
                console.log(x.latex());
            })
            expect(expressions.length).toBe(13);
        }).catch(function (e) {
            expect(e).caught();
        }).then(done);
    });

    it('can get the base version of a expression, pow -> multiplication of ', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function () {
            var power = Expression.power(Expression.variable('x'), Expression.variable('2'));
            var x = Expression.variable('x');

            var factor = Expression.GreatestCommomFactor(Expression.multiplication(power, x));

            expect(factor).toBeTruthy();
            expect(factor.length === 1).toBeTruthy();
            expect(factor.first().exp.type === Expression.type.variable).toBeTruthy();

        }).catch(function (e) {
            expect(e).caught();
        }).then(done);
    });



    it('can get the base version of a expression, pow -> multiplication + multiplication ', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function () {
            var power = Expression.power(Expression.variable('x'), Expression.variable('2'));
            var power2 = Expression.power(Expression.variable('x'), Expression.variable('2'));
            var x = Expression.variable('x');
            var addition = Expression.addition(Expression.multiplication(power, x), power2);
            var factor = Expression.GreatestCommomFactor(addition);

            expect(factor).toBeTruthy();
            expect(factor.length === 1).toBeTruthy();
            expect(factor.first().exp.type === Expression.type.variable).toBeTruthy();
            expect(factor.first().count === 2).toBeTruthy();

        }).catch(function (e) {
            expect(e).caught();
        }).then(done);
    });


    it('can get the base version of a expression, pow -> a x^2+ a x^2', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function () {
            var power = Expression.power(Expression.variable('x'), Expression.variable('2'));
            var power2 = Expression.power(Expression.variable('x'), Expression.variable('2'));
            var a = Expression.variable('a');
            var a2 = Expression.variable('a');
            var addition = Expression.addition(Expression.multiplication(power, a), Expression.multiplication(power2, a2));
            var factor = Expression.GreatestCommomFactor(addition);

            expect(factor).toBeTruthy();
            expect(factor.length === 2).toBeTruthy();

        }).catch(function (e) {
            expect(e).caught();
        }).then(done);
    });

    it('can refactor an expression in to ; ax + bx => x(a+b)', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function () {
            var x = Expression.variable('x');
            var x2 = Expression.variable('x');
            var a = Expression.variable('a');
            var a2 = Expression.variable('b');
            var addition = Expression.addition(Expression.multiplication(x, a), Expression.multiplication(x2, a2));
            var factor = Expression.GreatestCommomFactor(addition);

            expect(factor).toBeTruthy();
            expect(factor.length === 1).toBeTruthy();

            factor = factor.first();

            var refactored = Expression.Refactor(addition, [factor]);

            var expectedResult = Expression.multiplication(Expression.variable('x'), Expression.addition(Expression.variable('a'), Expression.variable('b')));

            expect(refactored.equals(expectedResult)).toBeTruthy();

        }).catch(function (e) {
            expect(e).caught();
        }).then(done);
    });

    it('can refactor an expression from 2x + 2y => 2(x + y)', function () {
        var two = Expression.variable('2');
        var t2 = Expression.variable('2');
        var x = Expression.variable('x');
        var y = Expression.variable('y');
        var addition = Expression.addition(Expression.multiplication(two, x), Expression.multiplication(t2, y));

        var factor = Expression.GreatestCommomFactor(addition);

        expect(factor).toBeTruthy();
        expect(factor.length === 1).toBeTruthy();

        factor = factor.first();
        var refactored = Expression.Refactor(addition, [factor]);

        var expectedResult = Expression.multiplication(Expression.variable('2'), Expression.addition(Expression.variable('x'), Expression.variable('y')));
        expect(refactored.equals(expectedResult, { exact: true })).toBeTruthy();
    });


    it('can refactor an expression from 6x + 3y => 3(2x + y)', function () {
        var two = Expression.variable('6');
        var t2 = Expression.variable('3');
        var x = Expression.variable('x');
        var y = Expression.variable('y');
        var addition = Expression.addition(Expression.multiplication(two, x), Expression.multiplication(t2, y));

        var factor = Expression.GreatestCommomFactor(addition);

        expect(factor).toBeTruthy();
        expect(factor.length === 1).toBeTruthy();

        factor = factor.first();
        var refactored = Expression.Refactor(addition, [factor]);

        var expectedResult = Expression.multiplication(Expression.variable('3'), Expression.addition(Expression.multiplication(Expression.variable('2'), Expression.variable('x')), Expression.variable('y')));
        expect(refactored.equals(expectedResult, { exact: true })).toBeTruthy();
    });

    it('Expression.one() is a variable with the value of 1', function () {
        var one = Expression.one();
        expect(one.type === Expression.type.variable).toBeTruthy();
        expect(one.partOrDefault(Expression.type.variable) === 1).toBeTruthy();
    });


    it('Expression.isOne(exp) detects if the expression equals one.', function () {
        var one = Expression.one();
        expect(Expression.isOne(one)).toBeTruthy();
    });

    it('Expression.isOne(exp) detects if the expression equals one.', function () {
        var one = 1
        expect(Expression.isOne(one)).toBeTruthy();
    });

    it('Can remove a one from an expression', function () {

        var one = Expression.one();
        var mul = Expression.multiplication(Expression.variable('b'), Expression.variable('a'), one);
        Expression.removeOne(mul);

        expect(mul.parts.length === 2).toBeTruthy();
    });

    it('Can remove multiple ones from an expression', function () {

        var one = Expression.one();
        var mul = Expression.multiplication(Expression.variable('b'), Expression.variable('a'), one, Expression.one());
        Expression.removeOne(mul);

        expect(mul.parts.length === 2).toBeTruthy();
    });

    it('if everything is remove except for 1 value, it returns the single part left.', function () {

        var one = Expression.one();
        var mul = Expression.multiplication(Expression.variable('b'), one, Expression.one());
        var result = Expression.removeOne(mul);
        expect(result.type === Expression.type.variable).toBeTruthy();

    });

    it('if everything is a 1 then a 1 is all that will remain.', function () {

        var one = Expression.one();
        var mul = Expression.multiplication(Expression.variable('1'), one, Expression.one());
        var result = Expression.removeOne(mul);
        expect(result.type === Expression.type.variable).toBeTruthy();
        expect(result.partOrDefault(Expression.type.variable) == 1).toBeTruthy();
    });

    it('can refactor an expression from 6(int(fx)) + 3(int(fy)) => 3(2(int(fx)) + (int(fy)))', function () {
        var two = Expression.variable('6');
        var t2 = Expression.variable('3');
        var x = Expression.integral(Expression.variable('a'), 'x');
        var y = Expression.integral(Expression.variable('d'), 'y');
        var addition = Expression.addition(Expression.multiplication(two, x), Expression.multiplication(t2, y));

        var factor = Expression.GreatestCommomFactor(addition);

        expect(factor).toBeTruthy();
        expect(factor.length === 1).toBeTruthy();

        factor = factor.first();
        var refactored = Expression.Refactor(addition, [factor]);

        var expectedResult = Expression.multiplication(Expression.variable('3'), Expression.addition(
            Expression.multiplication(Expression.variable('2'),
                                        Expression.integral(Expression.variable('a'), 'x')),
                                        Expression.integral(Expression.variable('d'), 'y')));
        expect(refactored.equals(expectedResult, { exact: true })).toBeTruthy();
    });


    it('can refactor an expression from 2(int(fx)) + 3(int(fx)) => int(fx)(2 + 3)', function () {
        var two = Expression.variable('2');
        var t2 = Expression.variable('3');
        var x = Expression.integral(Expression.variable('a'), 'x');
        var y = Expression.integral(Expression.variable('a'), 'x');
        var addition = Expression.addition(Expression.multiplication(two, x), Expression.multiplication(t2, y));

        var factor = Expression.GreatestCommomFactor(addition);

        expect(factor).toBeTruthy();
        expect(factor.length === 1).toBeTruthy();

        factor = factor.first();
        var refactored = Expression.Refactor(addition, [factor]);

        var expectedResult = Expression.multiplication(Expression.integral(Expression.variable('a'), 'x'),
            Expression.addition(Expression.variable('2'), Expression.variable('3')));
        expect(refactored.equals(expectedResult, { exact: true })).toBeTruthy();
    });
});﻿describe("MEPH/math/Expression.spec.js", function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });
    var printExpressionToScreen = function (result) {
        //return MEPH.requires('MEPH.math.jax.MathJax', 'MEPH.math.Expression').then(function () {
        //    return MEPHJax.ready().then(function () {
        //        var dom = document.createElement('div');
        //        document.body.appendChild(dom);
        //        return MEPHJax.load(result.latex(), dom)
        //    });
        //})
    };
    it('match rule Integration(a*f(x)) dx === Integration(a (g(x) + f(x)) dx, and marks the expression, then' +
        'translate a Integration(a (g(x) + f(x)) dx => a * Integration((g(x) + f(x)) dx ', function (done) {
            MEPH.requires('MEPH.math.Expression').then(function ($class) {
                var Expression = MEPH.math.Expression;
                var rule1 = Expression.Rules.Integration.IntegralConstMultiply();
                var rule2 = Expression.Rules.Integration.MultiplyIntegralofFx();

                var expression = Expression.integral(
                                    Expression.multiplication(
                                        Expression.variable('a'),
                                        Expression.addition(
                                            Expression.func('g', 'x'),
                                            Expression.func('f', 'x')
                                        )),
                                'x');

                var rule = Expression.matchRule(expression, rule1, true);

                var transformation = {
                    transformation: {
                        from: Expression.RuleType.IntegralConstMultiply,
                        to: Expression.RuleType.MultiplyIntegralofFx
                    },
                    C: 'C',
                    A: 'A'
                };
                var rule = Expression.matchRule(expression, Expression.Rules.Integration.IntegralConstMultiply(), true);
                var result = Expression.translation.Transform(transformation, expression, rule2);
                expect(result).toBeTruthy();

            }).catch(function () {
                expect(new Error('something went wrong while creating an expression')).caught();
            }).then(function (x) {
                done();
            });
        });
    it('can translate integralConstMultiply ', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;

            var rule1 = Expression.Rules.Integration.IntegralConstMultiply();
            var rule2 = Expression.Rules.Integration.MultiplyIntegralofFx();

            var expression = Expression.integral(
                                Expression.multiplication(
                                    Expression.variable('a'),
                                    Expression.addition(
                                        Expression.func('g', 'x'),
                                        Expression.func('f', 'x')
                                    )),
                            'x');
            expression.name(Expression.Rules.Integration.IntegralConstMultiply().name());
            var rule = Expression.matchRule(expression, rule1, true);
            var result = Expression.translation.Translate(expression, rule2);
            var matches = Expression.matchRule(result, rule2);
            expect(matches).toBeTruthy();
        }).catch(function () {
            expect(new Error('something went wrong while creating an expression')).caught();
        }).then(function (x) {
            done();
        });
    });

    it('translate a Power => PowerIntegrate ', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var expression = Expression.Rules.Integration.IntegrationAddition();
            var rule1 = Expression.Rules.Integration.Power();
            var rule2 = Expression.Rules.Integration.PowerIntegrate();

            var transformation = {
                transformation: {
                    from: Expression.RuleType.PowerIntegrate,
                    to: Expression.RuleType.Power
                },
                n_pre: 'n',
                n_post: 'n',
                x: 'x'
            };
            var result = Expression.translation.Transform(transformation, rule1, rule2);
            console.log(result.latex());

            expect(result).toBeTruthy();
        }).catch(function () {
            expect(new Error('something went wrong while creating an expression')).caught();
        }).then(function (x) {
            done();
        });
    });
    it('can translate Power.', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;

            var rule1 = Expression.Rules.Integration.Power();
            var rule2 = Expression.Rules.Integration.PowerIntegrate();

            rule1.swap('n', Expression.variable('t'));

            rule1.name(Expression.Rules.Integration.Power().name());

            var result = Expression.translation.Translate(rule1, rule2);
            var matches = Expression.matchRule(result, rule2);
            expect(matches).toBeTruthy();
        }).catch(function () {
            expect(new Error('something went wrong while creating an expression')).caught();
        }).then(function (x) {
            done();
        });
    });



    it('get the repeating parts of int(u +/- v +/- w) -> u,v,w', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var expression = Expression.integral(
                            Expression.addition(Expression.func('f', 'x'),
                                Expression.func('g', 'x'),
                                Expression.func('h', 'x')), 'x');
            var rule = Expression.matchRule(expression, Expression.Rules.Integration.IntegrationAddition(), true);

            var parts = expression.getMark('A').getRepeatParts();
            expect(parts.length).toBe(3);
        }).catch(function () {
            expect(new Error('something went wrong while creating an expression')).caught();
        }).then(function (x) {
            done();
        });
    });

    it('match int(u +/- v +/- w) -> int(u) +/- int(v) +/- int(w)', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var expression = Expression.integral(
                            Expression.addition(Expression.func('f', 'x'),
                                Expression.func('g', 'x'),
                                Expression.func('h', 'x')), Expression.variable('x'));
            var rule2 = Expression.Rules.Integration.AdditionIntegral();
            var rule = Expression.matchRule(expression, Expression.Rules.Integration.IntegrationAddition(), true);
            expect(expression.getMarks().dx).toBeTruthy();
            var transformation = {
                repeat: {
                    A: {
                        target: 'A',

                        trans: {
                            transformation: {
                                from: Expression.RuleType.IntegrationAddition,
                                to: Expression.RuleType.AdditionIntegral
                            },
                            f: 'f'
                        }
                    },
                    dx: {
                        scatter: {
                            transformation: {
                                from: Expression.RuleType.IntegrationAddition,
                                to: Expression.RuleType.AdditionIntegral
                            },
                            dx: 'dx'
                        }
                    }
                },
                transform: {
                    from: 'A',
                    to: 'A'
                }
            };
            var result = Expression.translation.Transform(transformation, expression, rule2);
            console.log(result.latex());
            expect(result.getMarks().A.parts.length === 3).toBeTruthy();
            expect(result).toBeTruthy();
        }).catch(function () {
            expect(new Error('something went wrong while creating an expression')).caught();
        }).then(function (x) {
            done();
        });
    });


    it('match int(u +/- v +/- w) -> int(u) +/- int(v) +/- int(w)', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var expression = Expression.integral(
                            Expression.addition(Expression.func('f', 'x'),
                                Expression.func('g', 'x'),
                                Expression.func('h', 'x')), Expression.variable('x'));
            var rule2 = Expression.Rules.Integration.AdditionIntegral();

            var rule = Expression.matchRule(expression, Expression.Rules.Integration.IntegrationAddition(), true);
            expect(expression.getMarks().dx).toBeTruthy();
            var result = Expression.translation.Translate(expression, rule2);
            console.log(result.latex());
            expect(result.getMarks().A.parts.length === 3).toBeTruthy();
            expect(result).toBeTruthy();
        }).catch(function (e) {
            expect(e).caught();
        }).then(function (x) {
            done();
        });
    });


    it('doesnt match int(u +/- v +/- w) -> int(u(t)) +/- int(v) +/- int(w)', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var expression = Expression.integral(
                            Expression.addition(Expression.func('f', 't'),
                                Expression.func('g', 'x'),
                                Expression.func('h', 'x')), Expression.variable('x'));
            var rule2 = Expression.Rules.Integration.AdditionIntegral();

            expression.name(Expression.RuleType.IntegrationAddition);
            var rule = Expression.matchRule(expression, Expression.Rules.Integration.IntegrationAddition(), true); 
            expect(!rule).toBeTruthy();
        }).catch(function (e) {
            expect(e).caught();
        }).then(function (x) {
            done();
        });
    });



    it(' do Integration By Parts ', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var rule1 = Expression.Rules.Integration.IntegrationByParts();
            var rule2 = Expression.Rules.Integration.IntegrationByPartsComplete();
            var transformation = {
                transformation: {
                    from: Expression.RuleType.IntegraionByPartsComplete,
                    to: Expression.RuleType.IntegrationByParts
                },
                v_2: 'dv',
                v_1: 'dv',
                u_1: 'du',
                u_2: 'du'
            };

            var result = Expression.translation.Transform(transformation, rule1, rule2);

            console.log(result.latex());
            expect(result).toBeTruthy();
        }).catch(function () {
            expect(new Error('something went wrong while creating an expression')).caught();
        }).then(function (x) {
            done();
        });
    });


    it(' translateIntegrationByParts ', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var rule1 = Expression.Rules.Integration.IntegrationByParts();
            var rule2 = Expression.Rules.Integration.IntegrationByPartsComplete();

            var result = Expression.translation.Translate(rule1, rule2);

            console.log(result.latex());
            expect(result).toBeTruthy();
        }).catch(function () {
            expect(new Error('something went wrong while creating an expression')).caught();
        }).then(function (x) {
            done();
        });
    });



    it(' OneOverX -> NaturalLogAbsX ', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var rule1 = Expression.Rules.Integration.OneOverX();
            var rule2 = Expression.Rules.Integration.NaturalLogAbsX();
            var transformation = {
                transformation: {
                    from: Expression.RuleType.OneOverX,
                    to: Expression.RuleType.NaturalLogAbsX
                },
                x: 'x'
            };

            var result = Expression.translation.Transform(transformation, rule1, rule2);

            console.log(result.latex());
            expect(result).toBeTruthy();
        }).catch(function (e) {
            expect(e).caught();
        }).then(function (x) {
            done();
        });
    });


    it(' OneOverX -> NaturalLogAbsX ', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var rule1 = Expression.Rules.Integration.OneOverX();
            var rule2 = Expression.Rules.Integration.NaturalLogAbsX();
            var transformation = {
                transformation: {
                    from: Expression.RuleType.OneOverX,
                    to: Expression.RuleType.NaturalLogAbsX
                },
                x: 'x'
            };

            var result = Expression.translation.Transform(transformation, rule1, rule2);

            console.log(result.latex());
            expect(result).toBeTruthy();
        }).catch(function (e) {
            expect(e).caught();
        }).then(function (x) {
            done();
        });
    });

    it(' Translate OneOverX -> NaturalLogAbsX ', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var rule1 = Expression.Rules.Integration.OneOverX();
            var rule2 = Expression.Rules.Integration.NaturalLogAbsX();

            var result = Expression.translation.Translate(rule1, rule2);

            console.log(result.latex());
            expect(result).toBeTruthy();
        }).catch(function (e) {
            expect(e).caught();
        }).then(function (x) {
            done();
        });
    });

    it(' Translate GeneralFormula8A -> GeneralFormula8B ', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var rule1 = Expression.Rules.Integration.GeneralFormula8A();
            var rule2 = Expression.Rules.Integration.GeneralFormula8B();

            var result = Expression.translation.Translate(rule1, rule2);

            console.log(result.latex());
            expect(result).toBeTruthy();
        }).catch(function (e) {
            expect(e).caught();
        }).then(function (x) {
            done();
        });
    });


    it(' Translate GeneralFormula9A -> GeneralFormula9B ', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var rule1 = Expression.Rules.Integration.GeneralFormula9A();
            var rule2 = Expression.Rules.Integration.GeneralFormula9B();

            var result = Expression.translation.Translate(rule1, rule2);

            console.log(result.latex());
            expect(result).toBeTruthy();
            return printExpressionToScreen(result);
        }).catch(function (e) {
            expect(e).caught();
        }).then(function (x) {
            done();
        });
    });


    it(' Translate GeneralFormula9B  -> GeneralFormula9A', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var rule1 = Expression.Rules.Integration.GeneralFormula9A();
            var rule2 = Expression.Rules.Integration.GeneralFormula9B();

            var result = Expression.translation.Translate(rule2, rule1);

            console.log(result.latex());
            expect(result).toBeTruthy();
        }).catch(function (e) {
            expect(e).caught();
        }).then(function (x) {
            done();
        });
    });

    it('TrigonometricFormula10A -> TrigonometricFormula10B', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var rule1 = Expression.Rules.Integration.TrigonometricFormula10A();
            var rule2 = Expression.Rules.Integration.TrigonometricFormula10B();

            var result = Expression.translation.Translate(rule2, rule1);

            console.log(result.latex());
            expect(result).toBeTruthy();
            return printExpressionToScreen(result);
        }).catch(function (e) {
            expect(e).caught();
        }).then(function (x) {
            done();
        });
    });

    it('TrigonometricFormula11A -> TrigonometricFormula11B', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var rule1 = Expression.Rules.Integration.TrigonometricFormula11A();
            var rule2 = Expression.Rules.Integration.TrigonometricFormula11B();

            var result = Expression.translation.Translate(rule1, rule2);

            console.log(result.latex());
            expect(result).toBeTruthy();
        }).catch(function (e) {
            expect(e).caught();
        }).then(function (x) {
            done();
        });
    });

    it('TrigonometricFormula11B -> TrigonometricFormula11A ', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var rule1 = Expression.Rules.Integration.TrigonometricFormula11A();
            var rule2 = Expression.Rules.Integration.TrigonometricFormula11B();

            var result = Expression.translation.Translate(rule2, rule1);

            console.log(result.latex());
            expect(result).toBeTruthy();
        }).catch(function (e) {
            expect(e).caught();
        }).then(function (x) {
            done();
        });
    });

    it(' an expression can say what variables are available for respecting', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var power = Expression.power(Expression.variable('x'), Expression.variable('y'));
            var respects = power.respects();

            expect(respects.length === 2).toBeTruthy();
        }).catch(function (e) {
            expect(e).caught();
        }).then(function (x) {
            done();
        });
    });
    it(' an expression will not add numbers to the list', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var power = Expression.power(Expression.variable('x'), Expression.variable('2'));
            var respects = power.respects();

            expect(respects.length === 1).toBeTruthy();
        }).catch(function (e) {
            expect(e).caught();
        }).then(function (x) {
            done();
        });
    });
    it(' an expression will not add numbers to the respects  list', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var power = Expression.power(Expression.variable('2'), Expression.variable('2'));
            var respects = power.respects();

            expect(respects.length === 0).toBeTruthy();
        }).catch(function (e) {
            expect(e).caught();
        }).then(function (x) {
            done();
        });
    });
    it(' an expression will not add numbers to the respects list', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var power = Expression.addition(Expression.variable('s'), Expression.power(Expression.variable('x'), '2'), Expression.variable('2'));
            var respects = power.respects();

            expect(respects.length === 2).toBeTruthy();
        }).catch(function (e) {
            expect(e).caught();
        }).then(function (x) {
            done();
        });
    });

    it(' an expression will not add duplicates to the respects list', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var power = Expression.addition(Expression.variable('x'), Expression.power(Expression.variable('x'), '2'), Expression.variable('2'));
            var respects = power.respects();

            expect(respects.length === 1).toBeTruthy();
        }).catch(function (e) {
            expect(e).caught();
        }).then(function (x) {
            done();
        });
    });

    it('an expression can expression a dependency on another expression', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function () {
            var c = Expression.variable('#C');
            c.mark('C');
            var dx = Expression.variable('x');
            dx.mark('dx');
            var expression = Expression.integral(c, dx);
            expression.mark('I');
            c.dependency('parent', 'respectTo', function (c, x) {
                var inRespectTo = x && x.val ? x.val : x;
                return c.respects().contains(function (x) { return x === inRespectTo; });
            });

            var list = c.getDependencies();

            expect(list.length).toBe(1);
            expect(list.first()).toBeTruthy();
        }).catch(function (e) {
            expect(e).caught();
        }).then(done);
    });

    it('an expression can tell if an expression respects its dependencies', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function () {
            var c = Expression.variable('#C');
            c.mark('C');
            var dx = Expression.variable('x');
            dx.mark('dx');
            var expression = Expression.integral(c, dx);
            expression.mark('I');
            c.dependency('parent', 'respectTo', function (c, x) {
                var inRespectTo = x && x.val && x.val.part ? x.val.part('variable').val : x.val;

                return !c.respects().contains(function (x) { return x === inRespectTo; });
            });

            var d = Expression.variable('d');
            var dx = Expression.variable('x');
            dx.mark('dx');
            var integral = Expression.integral(d, dx);

            var result = c.dependenciesAreRespected(d);
            expect(result).toBeTruthy();
        }).catch(function (e) {
            expect(e).caught();
        }).then(done);
    });

    it('an expression can tell if an expression respects its dependencies, siblings', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function () {
            var c = Expression.variable('#C');
            c.mark('C');
            var dx = Expression.variable('x');
            dx.mark('dx');
            var expression = Expression.integral(c, dx);
            expression.mark('I');
            c.dependency('sibling', '', function (c, t) {
                var inRespectTo = t.select(function (x) {
                    var inRespectTo = x && x.val && x.val.part ? x.val.part('variable').val : x.val;
                    return inRespectTo;
                });
                return !inRespectTo.intersection(c.respects()).count();
            });

            var d = Expression.variable('d');
            var dx = Expression.variable('x');
            dx.mark('dx');
            var multiplication = Expression.multiplication(d, dx);
            
            var result = c.dependenciesAreRespected(d);
            expect(result).toBeTruthy();
        }).catch(function (e) {
            expect(e).caught();
        }).then(done);
    });

    it('an expression has no dependencies, it is considered respected.', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function () {
            var c = Expression.variable('#C');
            c.mark('C');
            var dx = Expression.variable('x');
            dx.mark('dx');
            var expression = Expression.integral(c, dx);
            expression.mark('I');

            var d = Expression.variable('d');
            var dx = Expression.variable('x');
            dx.mark('dx');
            var integral = Expression.integral(d, dx);

            var result = c.dependenciesAreRespected(d);
            expect(result).toBeTruthy();
        }).catch(function (e) {
            expect(e).caught();
        }).then(done);
    });

});﻿/**
 * @class MEPH.math.ExpressionTranslation
 *
 **/
MEPH.define('MEPH.math.ExpressionTranslation', {
    alternateNames: 'ExpressionTranslation',
    requires: ['MEPH.math.Set', 'MEPH.math.expression.Evaluator'],
    statics: {
        translate: function (a, b) {
            switch (a.name()) {
                case Expression.RuleType.IntegralConst:
                    return ExpressionTranslation.translateIntegralConst(a, b);
                case Expression.RuleType.IntegralConstMultiply:
                    return ExpressionTranslation.translateIntegralConstMultiply(a, b);
                case Expression.RuleType.Power:
                case Expression.RuleType.PowerIntegrate:
                    return ExpressionTranslation.translatePowerIntegrate(a, b);
                case Expression.RuleType.IntegrationAddition:
                    return ExpressionTranslation.translateIntegrationAddition(a, b);
                case Expression.RuleType.IntegrationByParts:
                    return ExpressionTranslation.translateIntegrationByParts(a, b);
                case Expression.RuleType.OneOverX:
                    return ExpressionTranslation.translateOneOverX(a, b);
                case Expression.RuleType.GeneralFormula8A:
                case Expression.RuleType.GeneralFormula8B:
                    return ExpressionTranslation.translateGeneralFormula8(a, b);
                case Expression.RuleType.GeneralFormula9A:
                case Expression.RuleType.GeneralFormula9B:
                    return ExpressionTranslation.translateGeneralFormula9(a, b);
                case Expression.RuleType.TrigonometricFormula10A:
                case Expression.RuleType.TrigonometricFormula10B:
                    return ExpressionTranslation.translateGeneralFormula10(a, b);
                case Expression.RuleType.TrigonometricFormula11A:
                case Expression.RuleType.TrigonometricFormula11B:
                    return ExpressionTranslation.translateGeneralFormula11(a, b);
                case Expression.RuleType.Derivation.GeneralFormula1a:
                case Expression.RuleType.Derivation.GeneralFormula1b:
                    return ExpressionTranslation.derivation.translateGeneralFormula1(a, b);
                case Expression.RuleType.Derivation.GeneralFormula2a:
                case Expression.RuleType.Derivation.GeneralFormula2b:
                    return ExpressionTranslation.derivation.translateGeneralFormula2(a, b);
                case Expression.RuleType.Derivation.GeneralFormula3a:
                case Expression.RuleType.Derivation.GeneralFormula3b:
                    return ExpressionTranslation.derivation.translateGeneralFormula3(a, b);
                case Expression.RuleType.Derivation.GeneralFormula4a:
                case Expression.RuleType.Derivation.GeneralFormula4b:
                    return ExpressionTranslation.derivation.translateGeneralFormula4(a, b);
                case Expression.RuleType.Derivation.GeneralFormula5a:
                    return ExpressionTranslation.derivation.translateGeneralFormula5(a, b);
                case Expression.RuleType.Derivation.SimpleVariableA:
                case Expression.RuleType.Derivation.SimpleVariableB:
                    return ExpressionTranslation.derivation.translateSimpleFormula(a, b);
                case Expression.RuleType.Derivation.GeneralFormula7a:
                    return ExpressionTranslation.derivation.translateGeneralFormula7(a, b);
                case Expression.RuleType.Derivation.GeneralFormula10a:
                    return ExpressionTranslation.derivation.translateGeneralFormula10(a, b);
                case Expression.RuleType.Derivation.GeneralFormula12a:
                case Expression.RuleType.Derivation.GeneralFormula12b:
                    return ExpressionTranslation.derivation.translateGeneralFormula12(a, b);

                case Expression.RuleType.Derivation.GeneralFormula13a:
                case Expression.RuleType.Derivation.GeneralFormula13b:
                    return ExpressionTranslation.derivation.translateGeneralFormula13(a, b);

                case Expression.RuleType.Derivation.GeneralFormula14a:
                case Expression.RuleType.Derivation.GeneralFormula14b:
                    return ExpressionTranslation.derivation.translateGeneralFormula14(a, b);

                case Expression.RuleType.Derivation.GeneralFormula15a:
                case Expression.RuleType.Derivation.GeneralFormula15b:
                    return ExpressionTranslation.derivation.translateGeneralFormula15(a, b);

                case Expression.RuleType.Derivation.GeneralFormula17a:
                case Expression.RuleType.Derivation.GeneralFormula17b:
                    return ExpressionTranslation.derivation.translateGeneralFormula17(a, b);

                case Expression.RuleType.Derivation.GeneralFormula18a:
                case Expression.RuleType.Derivation.GeneralFormula18b:
                    return ExpressionTranslation.derivation.translateGeneralFormula18(a, b);

                case Expression.RuleType.Derivation.GeneralFormula19a:
                case Expression.RuleType.Derivation.GeneralFormula19b:
                    return ExpressionTranslation.derivation.translateGeneralFormula19(a, b);


                case Expression.RuleType.Derivation.GeneralFormula20a:
                case Expression.RuleType.Derivation.GeneralFormula20b:
                    return ExpressionTranslation.derivation.translateGeneralFormula20(a, b);

                case Expression.RuleType.Derivation.GeneralFormula21a:
                case Expression.RuleType.Derivation.GeneralFormula21b:
                    return ExpressionTranslation.derivation.translateGeneralFormula21(a, b);

                case Expression.RuleType.Derivation.GeneralFormula22a:
                case Expression.RuleType.Derivation.GeneralFormula22b:
                    return ExpressionTranslation.derivation.translateGeneralFormula22(a, b);

                case Expression.RuleType.Derivation.GeneralFormula23a:
                case Expression.RuleType.Derivation.GeneralFormula23b:
                    return ExpressionTranslation.derivation.translateGeneralFormula23(a, b);

                case Expression.RuleType.Derivation.GeneralFormula24a:
                case Expression.RuleType.Derivation.GeneralFormula24b:
                    return ExpressionTranslation.derivation.translateGeneralFormula24(a, b);

                case Expression.RuleType.Derivation.GeneralFormula25a:
                case Expression.RuleType.Derivation.GeneralFormula25b:
                    return ExpressionTranslation.derivation.translateGeneralFormula25(a, b);

                case Expression.RuleType.Derivation.GeneralFormula26a:
                case Expression.RuleType.Derivation.GeneralFormula26b:
                    return ExpressionTranslation.derivation.translateGeneralFormula26(a, b);


                case Expression.RuleType.Derivation.GeneralFormula27a:
                case Expression.RuleType.Derivation.GeneralFormula27b:
                    return ExpressionTranslation.derivation.translateGeneralFormula27(a, b);

                case Expression.RuleType.Derivation.GeneralFormula28a:
                case Expression.RuleType.Derivation.GeneralFormula28b:
                    return ExpressionTranslation.derivation.translateGeneralFormula28(a, b);

                case Expression.RuleType.Derivation.GeneralFormula29a:
                case Expression.RuleType.Derivation.GeneralFormula29b:
                    return ExpressionTranslation.derivation.translateGeneralFormula29(a, b);

                case Expression.RuleType.Derivation.GeneralFormula30a:
                case Expression.RuleType.Derivation.GeneralFormula30b:
                    return ExpressionTranslation.derivation.translateGeneralFormula30(a, b);

                case Expression.RuleType.Derivation.GeneralFormula31a:
                case Expression.RuleType.Derivation.GeneralFormula31b:
                    return ExpressionTranslation.derivation.translateGeneralFormula31(a, b);

                case Expression.RuleType.Derivation.GeneralFormula32a:
                case Expression.RuleType.Derivation.GeneralFormula32b:
                    return ExpressionTranslation.derivation.translateGeneralFormula32(a, b);

                case Expression.RuleType.Derivation.GeneralFormula33a:
                case Expression.RuleType.Derivation.GeneralFormula33b:
                    return ExpressionTranslation.derivation.translateGeneralFormula33(a, b);

                case Expression.RuleType.Derivation.GeneralFormula34a:
                case Expression.RuleType.Derivation.GeneralFormula34b:
                    return ExpressionTranslation.derivation.translateGeneralFormula34(a, b);

                case Expression.RuleType.Derivation.GeneralFormula35a:
                case Expression.RuleType.Derivation.GeneralFormula35b:
                    return ExpressionTranslation.derivation.translateGeneralFormula35(a, b);

                case Expression.RuleType.Derivation.GeneralFormula36a:
                case Expression.RuleType.Derivation.GeneralFormula36b:
                    return ExpressionTranslation.derivation.translateGeneralFormula36(a, b);


                case Expression.RuleType.Derivation.GeneralFormula37a:
                case Expression.RuleType.Derivation.GeneralFormula37b:
                    return ExpressionTranslation.derivation.translateGeneralFormula37(a, b);

                case Expression.RuleType.Derivation.GeneralFormula38a:
                case Expression.RuleType.Derivation.GeneralFormula38b:
                    return ExpressionTranslation.derivation.translateGeneralFormula38(a, b);

                case Expression.RuleType.Derivation.GeneralFormula39a:
                case Expression.RuleType.Derivation.GeneralFormula39b:
                    return ExpressionTranslation.derivation.translateGeneralFormula39(a, b);

                case Expression.RuleType.Derivation.GeneralFormula40a:
                case Expression.RuleType.Derivation.GeneralFormula40b:
                case Expression.RuleType.Integration.IGeneralFormula16a:
                case Expression.RuleType.Integration.IGeneralFormula16b:
                case Expression.RuleType.Integration.IGeneralFormula17a:
                case Expression.RuleType.Integration.IGeneralFormula17b:
                case Expression.RuleType.Integration.IGeneralFormula20a:
                case Expression.RuleType.Integration.IGeneralFormula20b:
                case Expression.RuleType.Integration.IGeneralFormula21a:
                case Expression.RuleType.Integration.IGeneralFormula21b:
                case Expression.RuleType.Integration.IGeneralFormula34a:
                case Expression.RuleType.Integration.IGeneralFormula34b:
                case Expression.RuleType.Integration.IGeneralFormula35a:
                case Expression.RuleType.Integration.IGeneralFormula35b:
                case Expression.RuleType.Integration.IGeneralFormula38a:
                case Expression.RuleType.Integration.IGeneralFormula38b:
                case Expression.RuleType.Integration.IGeneralFormula39a:
                case Expression.RuleType.Integration.IGeneralFormula39b:
                case Expression.RuleType.Integration.IGeneralFormula42a:
                case Expression.RuleType.Integration.IGeneralFormula42b:
                    return ExpressionTranslation.derivation.translateGeneralFormula40(a, b);

                case Expression.RuleType.Integration.IGeneralFormula18a:
                case Expression.RuleType.Integration.IGeneralFormula18b:
                case Expression.RuleType.Integration.IGeneralFormula19a:
                case Expression.RuleType.Integration.IGeneralFormula19b:
                case Expression.RuleType.Integration.IGeneralFormula36a:
                case Expression.RuleType.Integration.IGeneralFormula36b:
                case Expression.RuleType.Integration.IGeneralFormula37a:
                case Expression.RuleType.Integration.IGeneralFormula37b:
                    return ExpressionTranslation.derivation.translateIGeneralFormula18(a, b);


                case Expression.RuleType.Integration.IGeneralFormula12a:
                case Expression.RuleType.Integration.IGeneralFormula12b:
                case Expression.RuleType.Integration.IGeneralFormula13a:
                case Expression.RuleType.Integration.IGeneralFormula13b:
                case Expression.RuleType.Integration.IGeneralFormula14a:
                case Expression.RuleType.Integration.IGeneralFormula14b:
                case Expression.RuleType.Integration.IGeneralFormula15a:
                case Expression.RuleType.Integration.IGeneralFormula15b:
                case Expression.RuleType.Integration.IGeneralFormula26a:
                case Expression.RuleType.Integration.IGeneralFormula26b:
                case Expression.RuleType.Integration.IGeneralFormula27a:
                case Expression.RuleType.Integration.IGeneralFormula27b:
                case Expression.RuleType.Integration.IGeneralFormula28a:
                case Expression.RuleType.Integration.IGeneralFormula28b:
                case Expression.RuleType.Integration.IGeneralFormula29a:
                case Expression.RuleType.Integration.IGeneralFormula29b:
                case Expression.RuleType.Integration.IGeneralFormula30a:
                case Expression.RuleType.Integration.IGeneralFormula30b:
                case Expression.RuleType.Integration.IGeneralFormula31a:
                case Expression.RuleType.Integration.IGeneralFormula31b:
                case Expression.RuleType.Integration.IGeneralFormula32a:
                case Expression.RuleType.Integration.IGeneralFormula32b:
                case Expression.RuleType.Integration.IGeneralFormula33a:
                case Expression.RuleType.Integration.IGeneralFormula33b:
                case Expression.RuleType.Integration.IGeneralFormula40a:
                case Expression.RuleType.Integration.IGeneralFormula40b:
                    return ExpressionTranslation.derivation.translateIGeneralFormulaSingleVariable(a, b);

                case Expression.RuleType.Integration.IGeneralFormula24a:
                case Expression.RuleType.Integration.IGeneralFormula24b:
                    return ExpressionTranslation.derivation.translateIGeneralFormula24(a, b);

                case Expression.RuleType.Integration.IGeneralFormula25a:
                case Expression.RuleType.Integration.IGeneralFormula25b:
                    return ExpressionTranslation.derivation.translateIGeneralFormula25(a, b);

                case Expression.RuleType.Integration.IGeneralFormula45a:
                case Expression.RuleType.Integration.IGeneralFormula45b:
                    return ExpressionTranslation.derivation.translateIGeneralFormula45(a, b);

                case Expression.RuleType.Integration.IGeneralFormula41a:
                case Expression.RuleType.Integration.IGeneralFormula41b:
                    return ExpressionTranslation.derivation.translateIGeneralFormula41(a, b);

                case Expression.RuleType.Integration.IGeneralFormula43a:
                case Expression.RuleType.Integration.IGeneralFormula43b:
                    return ExpressionTranslation.derivation.translateGeneralFormula43(a, b);


                case Expression.RuleType.Integration.IGeneralFormula44a:
                case Expression.RuleType.Integration.IGeneralFormula44b:
                    return ExpressionTranslation.derivation.translateGeneralFormula44(a, b);

                case Expression.RuleType.Integration.IGeneralFormula47a:
                case Expression.RuleType.Integration.IGeneralFormula47b:
                    return ExpressionTranslation.derivation.translateGeneralFormula47(a, b);

                case Expression.RuleType.Integration.IGeneralFormula48a:
                case Expression.RuleType.Integration.IGeneralFormula48b:
                    return ExpressionTranslation.derivation.translateGeneralFormula48(a, b);

                case Expression.RuleType.Integration.IGeneralFormula49a:
                case Expression.RuleType.Integration.IGeneralFormula49b:
                    return ExpressionTranslation.derivation.translateGeneralFormula49(a, b);

                case Expression.RuleType.Derivation.ChainRuleA:
                case Expression.RuleType.Derivation.ChainRuleB:
                    return ExpressionTranslation.derivation.chainRule(a, b);

                default:
                    throw new Error('Unhandled case : ExpressionTranslation');
            }
        },
        /**
         * Returns an array of translation sets.
         * @returns {Array}
         ***/
        translationPool: function () {
            var res = [];

            //Integration
            res.push([Expression.RuleType.IntegralConst, Expression.RuleType.AxPlusC]);
            res.push([Expression.RuleType.IntegralConstMultiply, Expression.RuleType.MultiplyIntegralofFx]);
            res.push([Expression.RuleType.PowerIntegrate, Expression.RuleType.Power]);
            res.push([Expression.RuleType.IntegrationAddition, Expression.RuleType.AdditionIntegral]);
            res.push([Expression.RuleType.TrigonometricFormula10A, Expression.RuleType.TrigonometricFormula10B]);
            res.push([Expression.RuleType.TrigonometricFormula11A, Expression.RuleType.TrigonometricFormula11B]);


            //Derivatives
            res.push([Expression.RuleType.Derivation.GeneralFormula1a, Expression.RuleType.Derivation.GeneralFormula1b]);
            res.push([Expression.RuleType.Derivation.GeneralFormula2a, Expression.RuleType.Derivation.GeneralFormula2b]);
            res.push([Expression.RuleType.Derivation.GeneralFormula3a, Expression.RuleType.Derivation.GeneralFormula3b]);
            res.push([Expression.RuleType.Derivation.GeneralFormula4a, Expression.RuleType.Derivation.GeneralFormula4b]);
            res.push([Expression.RuleType.Derivation.GeneralFormula5a, Expression.RuleType.Derivation.GeneralFormula5b]);
            res.push([Expression.RuleType.Derivation.ChainRuleA, Expression.RuleType.Derivation.ChainRuleB]);


            res.push([Expression.RuleType.Derivation.SimpleVariableA, Expression.RuleType.Derivation.SimpleVariableB]);
            [].interpolate(0, 100, function (x) {
                res.push([Expression.RuleType.Derivation['GeneralFormula' + x + 'a'], Expression.RuleType.Derivation['GeneralFormula' + x + 'b']]);
            });

            [].interpolate(0, 100, function (x) {
                res.push([Expression.RuleType.Integration['IGeneralFormula' + x + 'a'], Expression.RuleType.Integration['IGeneralFormula' + x + 'b']]);
            });
            return res;
        },
        /**
         * Transforms a expression a in to expression b
         * @param {Object} transform
         * @param {MEPH.math.Expression} a
         * @param {MEPH.math.Expression} b
         */

        transform: function (transform, a, b) {
            var a_copy = a.copy();
            var b_copy = b.copy();
            a_copy.ensureLineage();
            b_copy.ensureLineage();
            var a_marks = a_copy.getMarks();
            var b_marks = b_copy.getMarks();
            var tranformedRepeats;
            if (transform.repeat) {

                for (var i in transform.repeat) {
                    var transFormInfo = transform.repeat[i];
                    if (transFormInfo.trans) {
                        var a_repeat = a_marks[i];
                        var b_repeat = b_marks[transFormInfo.target];
                        var repeatPartsA = a_repeat.getRepeatParts();
                        var repeatPartsB = b_repeat.getRepeatParts();

                        if (repeatPartsB.length > 1) {
                            throw 'not handled';
                        }
                        else {
                            tranformedRepeats = repeatPartsA.select(function (a) {
                                var tempA = a.val.copy();
                                return ExpressionTranslation.transform(transFormInfo.trans, tempA, repeatPartsB.first().val);
                            });
                        }
                    }
                    else if (transFormInfo.scatter) {
                        tranformedRepeats = tranformedRepeats.select(function (x) {
                            a_copy = a_copy.copy();
                            return ExpressionTranslation.transform(transFormInfo.scatter, a_copy, x);
                        });
                    }
                }
                b_copy.getMark(transform.transform.to).clearParts();
                b_copy.getMark(transform.transform.to).setParts(tranformedRepeats, Expression.function.input);
                return b_copy;
            }
            else if (transform.pattern) {
                if (transform.pattern.process) {
                    return transform.pattern.process(transform, a_copy, b_copy);
                }
            }
            else {
                for (var i in transform) {
                    if (i !== 'transformation' && i !== 'repeat') {
                        var ai;
                        var bi;
                        if (transform.transformation.from === a.name()) {
                            ai = i;
                            bi = transform[i];
                        }
                        else {
                            ai = transform[i];
                            bi = i;
                        }
                        a_copy = a.copy();
                        var a_mark = a_copy.getMark(ai);
                        if (Array.isArray(a_mark)) {
                            a_mark = ExpressionTranslation.convertSiblingsToAnExpression(a_mark);
                        }
                        //var Evaluator = MEPH.math.expression.Evaluator;
                        //a_mark = Evaluator.evaluate(a_mark);

                        b_copy.swap(bi, a_mark);

                        if (b_copy === b_copy.getMark(bi)) {
                            b_copy = a_mark;
                        }
                    }
                }
                return b_copy;
            }
        },
        /**
         * Convers siblings to an expression of the same type as the parent.
         * @param {Array} siblings
         ***/
        convertSiblingsToAnExpression: function (siblings) {
            var sibling = siblings.first();
            var parent = sibling.parent();
            switch (parent.type) {
                case Expression.type.multiplication:
                    return Expression.multiplication.apply(this, siblings);
                case Expression.type.subtraction:
                    return Expression.subtraction.apply(this, siblings);
                case Expression.type.addition:
                    return Expression.addition.apply(this, siblings);
                case Expression.type.division:
                    return Expression.division.apply(this, siblings);
            }
        },

        derivation: {

            translateGeneralFormula1: function (a, b) {
                var transformation = {
                    transformation: {
                        from: Expression.RuleType.Derivation.GeneralFormula1a,
                        to: Expression.RuleType.Derivation.GeneralFormula1b
                    }
                };
                var result = Expression.translation.Transform(transformation, a, b);
                return result;
            },
            translateGeneralFormula2: function (a, b) {

                var transformation = {
                    transformation: {
                        from: Expression.RuleType.Derivation.GeneralFormula2a,
                        to: Expression.RuleType.Derivation.GeneralFormula2b
                    },
                    C: 'C'
                };
                var result = Expression.translation.Transform(transformation, a, b);
                return result;

            },
            translateGeneralFormula3: function (a, b) {
                var transformation = {
                    transformation: {
                        from: Expression.RuleType.Derivation.GeneralFormula3a,
                        to: Expression.RuleType.Derivation.GeneralFormula3b
                    },
                    C: 'C',
                    U: 'U',
                    dx: 'dx'
                };
                var result = Expression.translation.Transform(transformation, a, b);
                return result;
            },
            translateGeneralFormula4: function (a, b) {
                var transformation = {
                    repeat: {
                        A: {
                            target: 'A',

                            trans: {
                                transformation: {
                                    from: Expression.RuleType.Derivation.GeneralFormula4a,
                                    to: Expression.RuleType.Derivation.GeneralFormula4b
                                },
                                U: 'U'
                            }
                        },
                        dx: {
                            scatter: {
                                transformation: {
                                    from: Expression.RuleType.Derivation.GeneralFormula4a,
                                    to: Expression.RuleType.Derivation.GeneralFormula4b
                                },
                                dx: 'dx'
                            }
                        }
                    },
                    transform: {
                        from: 'A',
                        to: 'A'
                    }
                };
                var result = Expression.translation.Transform(transformation, a, b);

                return result;
            },
            translateSimpleFormula: function (a, b) {
                // Expression.SwapPart(a, b);
                return b.copy();
            },
            translateGeneralFormula5: function (a, b) {
                var convert = {
                    from: 'A', to: 'A'
                }
                var targetselection = {
                    target: 'dir',
                    overrite: 'U'
                }
                var nonselection = {
                    target: 'V'
                }
                var respecto = {
                    target: 'dx'
                }
                var Copyto = {
                    target: 'copyTo'
                }
                var transformation = {
                    pattern: {
                        process: function (transform, a_copy, b_copy) {
                            var a_A = a_copy.getMark(convert.from);
                            var b_A = b_copy.getMark(convert.to);
                            var count = a_A.parts.length;

                            var masks = Set.base2MaskSet(count);
                            var partsTo = masks.where(function (t) {
                                return t.split('').count(function (x) {
                                    return x === '1';

                                }) === 1;
                            }).select(function (mask) {
                                var cc_a = a_A.copy();
                                var cc_b = b_A.copy();
                                var copyto = b_copy.getMark(Copyto.target).copy();

                                var res = mask.split('').select(function (x, index) {
                                    if (x === '1') {
                                        var target = cc_b.getMark(targetselection.target).copy();

                                        var dx = a_copy.getMark(respecto.target).copy();
                                        target.swap(respecto.target, dx);
                                        var overrite = target.swap(targetselection.overrite, cc_a.getPartByIndex(index).copy());
                                        return target;
                                    }
                                    else {
                                        var target = cc_a.getPartByIndex(index).copy();
                                        return target;
                                    }
                                }).select(function (x) { return x.copy(); });

                                copyto.clearParts();
                                copyto.setParts(res, Expression.function.input);

                                return copyto;
                            });


                            b_copy.getMark(transformation.transform.to).clearParts();
                            b_copy.getMark(transformation.transform.to).setParts(partsTo, Expression.function.input);
                            return b_copy;
                        }
                    },
                    transform: {
                        from: 'A',
                        to: 'A'
                    }
                };

                var result = Expression.translation.Transform(transformation, a, b);

                return result;
            },
            translateGeneralFormula7: function (a, b) {
                var transformation = {
                    transformation: {
                        from: Expression.RuleType.Derivation.GeneralFormula7b,
                        to: Expression.RuleType.Derivation.GeneralFormula7a,
                    },
                    V: 'V',
                    dU: 'U',
                    dV: 'V',
                    dudx: 'dx',
                    dvdx: 'dx',
                    U: 'U',
                    VD: 'V'
                };

                var result = Expression.translation.Transform(transformation, a, b);
                return result;
            },
            translateGeneralFormula10: function (a, b) {
                var transformation = {
                    transformation: {
                        from: Expression.RuleType.Derivation.GeneralFormula10b,
                        to: Expression.RuleType.Derivation.GeneralFormula10a
                    },
                    dx: 'dx',
                    dU: 'U',
                    NS: 'N',
                    U: 'U',
                    N: 'N'
                }

                var result = Expression.translation.Transform(transformation, a, b);
                return result;
            },
            translateGeneralFormula12: function (a, b) {
                var transformation = {
                    transformation: {
                        from: Expression.RuleType.Derivation.GeneralFormula12b,
                        to: Expression.RuleType.Derivation.GeneralFormula12a
                    },
                    X: 'X'
                }

                var result = Expression.translation.Transform(transformation, a, b);
                return result;
            },
            translateGeneralFormula13: function (a, b) {
                var transformation = {
                    transformation: {
                        from: Expression.RuleType.Derivation.GeneralFormula13b,
                        to: Expression.RuleType.Derivation.GeneralFormula13a
                    },
                    X: 'X',
                    A: 'A',
                    LNA: 'A'
                }

                var result = Expression.translation.Transform(transformation, a, b);
                return result;
            },
            translateGeneralFormula14: function (a, b) {
                var transformation = {
                    transformation: {
                        from: Expression.RuleType.Derivation.GeneralFormula14a,
                        to: Expression.RuleType.Derivation.GeneralFormula14b
                    },
                    X: 'X'
                }

                var result = Expression.translation.Transform(transformation, a, b);
                return result;
            },
            translateGeneralFormula15: function (a, b) {
                var transformation = {
                    transformation: {
                        from: Expression.RuleType.Derivation.GeneralFormula15a,
                        to: Expression.RuleType.Derivation.GeneralFormula15b
                    },
                    X: 'X',
                    A: 'A'
                }

                var result = Expression.translation.Transform(transformation, a, b);
                return result;
            },
            translateGeneralFormula17: function (a, b) {
                return ExpressionTranslation.derivation.trigstandard(a, b,
                    Expression.RuleType.Derivation.GeneralFormula17a,
                    Expression.RuleType.Derivation.GeneralFormula17b);
            },
            translateGeneralFormula18: function (a, b) {
                return ExpressionTranslation.derivation.trigstandard(a, b,
                    Expression.RuleType.Derivation.GeneralFormula18a,
                    Expression.RuleType.Derivation.GeneralFormula18b);
            },
            translateGeneralFormula19: function (a, b) {
                return ExpressionTranslation.derivation.trigstandard(a, b,
                    Expression.RuleType.Derivation.GeneralFormula19a,
                    Expression.RuleType.Derivation.GeneralFormula19b);
            },
            translateGeneralFormula20: function (a, b) {
                return ExpressionTranslation.derivation.trigstandard(a, b,
                    Expression.RuleType.Derivation.GeneralFormula20a,
                    Expression.RuleType.Derivation.GeneralFormula20b);
            },
            translateGeneralFormula23: function (a, b) {
                return ExpressionTranslation.derivation.trigstandard(a, b,
                    Expression.RuleType.Derivation.GeneralFormula23a,
                    Expression.RuleType.Derivation.GeneralFormula23b);

            },
            translateGeneralFormula24: function (a, b) {
                return ExpressionTranslation.derivation.trigstandard(a, b,
                    Expression.RuleType.Derivation.GeneralFormula24a,
                    Expression.RuleType.Derivation.GeneralFormula24b);
            },
            translateGeneralFormula25: function (a, b) {
                return ExpressionTranslation.derivation.trigstandard(a, b,
                    Expression.RuleType.Derivation.GeneralFormula25a,
                    Expression.RuleType.Derivation.GeneralFormula25b);
            },
            translateGeneralFormula26: function (a, b) {
                return ExpressionTranslation.derivation.trigstandard(a, b,
                    Expression.RuleType.Derivation.GeneralFormula26a,
                    Expression.RuleType.Derivation.GeneralFormula26b);
            },
            translateGeneralFormula29: function (a, b) {
                return ExpressionTranslation.derivation.trigstandard(a, b,
                    Expression.RuleType.Derivation.GeneralFormula29a,
                    Expression.RuleType.Derivation.GeneralFormula29b);
            },
            translateGeneralFormula30: function (a, b) {
                return ExpressionTranslation.derivation.trigstandard(a, b,
                    Expression.RuleType.Derivation.GeneralFormula30a,
                    Expression.RuleType.Derivation.GeneralFormula30b);
            },
            translateGeneralFormula31: function (a, b) {
                return ExpressionTranslation.derivation.trigstandard(a, b,
                    Expression.RuleType.Derivation.GeneralFormula31a,
                    Expression.RuleType.Derivation.GeneralFormula31b);
            },
            translateGeneralFormula32: function (a, b) {
                return ExpressionTranslation.derivation.trigstandard(a, b,
                Expression.RuleType.Derivation.GeneralFormula32a,
                Expression.RuleType.Derivation.GeneralFormula32b);

            },
            translateGeneralFormula35: function (a, b) {
                return ExpressionTranslation.derivation.trigstandard(a, b,
                    Expression.RuleType.Derivation.GeneralFormula34a,
                    Expression.RuleType.Derivation.GeneralFormula34b);
            },
            translateGeneralFormula36: function (a, b) {
                return ExpressionTranslation.derivation.trigstandard(a, b,
                    Expression.RuleType.Derivation.GeneralFormula36a,
                    Expression.RuleType.Derivation.GeneralFormula36b);
            },
            translateGeneralFormula37: function (a, b) {
                return ExpressionTranslation.derivation.trigstandard(a, b,
                    Expression.RuleType.Derivation.GeneralFormula37a,
                    Expression.RuleType.Derivation.GeneralFormula37b);
            },
            translateGeneralFormula38: function (a, b) {
                return ExpressionTranslation.derivation.trigstandard(a, b,
                    Expression.RuleType.Derivation.GeneralFormula38a,
                    Expression.RuleType.Derivation.GeneralFormula38b);
            },
            translateIGeneralFormulaSingleVariable: function (a, b) {
                return ExpressionTranslation.derivation.trigstandard(a, b,
                    a.name(),
                    Expression.RuleType.Integration.IGeneralFormula12b);
            },
            trigstandard: function (a, b, name1, name2) {
                var transformation = {
                    transformation: {
                        from: name1,
                        to: name2
                    },
                    X: 'X'
                }

                var result = Expression.translation.Transform(transformation, a, b);
                return result;
            },
            translateGeneralFormula21: function (a, b) {
                return ExpressionTranslation.derivation.trigTwoX(a, b,
                    Expression.RuleType.Derivation.GeneralFormula21a,
                    Expression.RuleType.Derivation.GeneralFormula21b);
            },
            translateGeneralFormula22: function (a, b) {
                return ExpressionTranslation.derivation.trigTwoX(a, b,
                    Expression.RuleType.Derivation.GeneralFormula22a,
                    Expression.RuleType.Derivation.GeneralFormula22b);
            },

            translateGeneralFormula27: function (a, b) {
                return ExpressionTranslation.derivation.trigTwoX(a, b,
                    Expression.RuleType.Derivation.GeneralFormula27a,
                    Expression.RuleType.Derivation.GeneralFormula27b);
            },
            translateGeneralFormula28: function (a, b) {
                return ExpressionTranslation.derivation.trigTwoX(a, b,
                    Expression.RuleType.Derivation.GeneralFormula28a,
                    Expression.RuleType.Derivation.GeneralFormula28b);
            },
            translateGeneralFormula33: function (a, b) {
                return ExpressionTranslation.derivation.trigTwoX(a, b,
                    Expression.RuleType.Derivation.GeneralFormula33a,
                    Expression.RuleType.Derivation.GeneralFormula33b);
            },
            translateGeneralFormula34: function (a, b) {
                return ExpressionTranslation.derivation.trigTwoX(a, b,
                    Expression.RuleType.Derivation.GeneralFormula34a,
                    Expression.RuleType.Derivation.GeneralFormula34b);
            },
            translateGeneralFormula39: function (a, b) {
                return ExpressionTranslation.derivation.trigTwoX(a, b,
                    Expression.RuleType.Derivation.GeneralFormula39a,
                    Expression.RuleType.Derivation.GeneralFormula39b);
            },
            translateGeneralFormula40: function (a, b) {
                return ExpressionTranslation.derivation.trigTwoX(a, b,
                    a.name(),
                    Expression.RuleType.Derivation.GeneralFormula40b);
            },
            translateIGeneralFormula18: function (a, b) {
                return ExpressionTranslation.derivation.trigTwoX(a, b,
                                  Expression.RuleType.Derivation.GeneralFormula40b,
                                  a.name());
            },
            translateGeneralFormula47: function (a, b) {
                var transformation = {
                    transformation: {
                        to: Expression.RuleType.Integration.IGeneralFormula47a,
                        from: Expression.RuleType.Integration.IGeneralFormula47b
                    },
                    dx: 'dx',
                    N1: 'N',
                    N2: 'N',
                    N3: 'N',
                    X1: 'X1',
                    A1: 'A',
                    A2: 'A',
                    A3: 'A',
                    A4: 'A',
                    X4: 'X2',
                    X3: 'X2',
                    X2: 'X2'
                }

                var result = Expression.translation.Transform(transformation, a, b);
                return result;
            },
            chainRule: function (a, b) {
                var transformation = {
                    transformation: {
                        to: Expression.RuleType.Derivation.ChainRuleA,
                        from: Expression.RuleType.Derivation.ChainRuleB
                    },
                    Gx: 'Gx',
                    Fx: 'Fx',
                    dx1: 'dx',
                    dx2: 'dx'
                }
                
                var result = Expression.translation.Transform(transformation, a, b);

                return result;
            },
            translateGeneralFormula49: function (a, b) {
                var transformation = {
                    transformation: {
                        to: Expression.RuleType.Integration.IGeneralFormula49a,
                        from: Expression.RuleType.Integration.IGeneralFormula49b
                    },
                    X2: 'X1',
                    X1: 'X1',
                    N3: 'N',
                    N1: 'N',
                    N2: 'N'
                }

                var result = Expression.translation.Transform(transformation, a, b);

                return result;
            },
            translateGeneralFormula48: function (a, b) {
                var transformation = {
                    transformation: {
                        to: Expression.RuleType.Integration.IGeneralFormula48a,
                        from: Expression.RuleType.Integration.IGeneralFormula48b
                    },
                    dx: 'dx',
                    N1: 'N',
                    N2: 'N',
                    N3: 'N',
                    X1: 'X1',
                    A1: 'A',
                    A2: 'A',
                    A3: 'A',
                    X4: 'X2',
                    X3: 'X2',
                    X2: 'X2'
                }

                var result = Expression.translation.Transform(transformation, a, b);

                return result;
            },
            translateGeneralFormula44: function (a, b) {
                var transformation = {
                    transformation: {
                        to: Expression.RuleType.Integration.IGeneralFormula44a,
                        from: Expression.RuleType.Integration.IGeneralFormula44b
                    },
                    X1: 'X1',
                    A1: 'A',
                    A2: 'A',
                    A3: 'A',
                    X2: 'X2'
                }

                var result = Expression.translation.Transform(transformation, a, b);
                return result;
            },
            translateGeneralFormula43: function (a, b) {
                var transformation = {
                    transformation: {
                        to: Expression.RuleType.Integration.IGeneralFormula43a,
                        from: Expression.RuleType.Integration.IGeneralFormula43b
                    },
                    X1: 'X',
                    A: 'A',
                    X2: 'X'
                }

                var result = Expression.translation.Transform(transformation, a, b);
                return result;
            },
            translateIGeneralFormula41: function (a, b) {
                var transformation = {
                    transformation: {
                        to: Expression.RuleType.Integration.IGeneralFormula41a,
                        from: Expression.RuleType.Integration.IGeneralFormula41b
                    },
                    X: 'X',
                    A1: 'A',
                    A2: 'A'
                }

                var result = Expression.translation.Transform(transformation, a, b);
                return result;
            },
            translateIGeneralFormula45: function (a, b) {

                var transformation = {
                    transformation: {
                        to: Expression.RuleType.Integration.IGeneralFormula45a,
                        from: Expression.RuleType.Integration.IGeneralFormula45b
                    },
                    A: 'A',
                    X1: 'X1',
                    X2: 'X2'
                }

                var result = Expression.translation.Transform(transformation, a, b);
                return result;
            },
            translateIGeneralFormula25: function (a, b) {
                var transformation = {
                    transformation: {
                        to: Expression.RuleType.Integration.IGeneralFormula25a,
                        from: Expression.RuleType.Integration.IGeneralFormula25b
                    },
                    X1: 'X',
                    X2: 'X',
                    X3: 'X',
                    dx: 'dx',
                    N1: 'N',
                    N2: 'N',
                    N3: 'N',
                    N4: 'N',
                    N5: 'N'
                }

                var result = Expression.translation.Transform(transformation, a, b);
                return result;
            },
            translateIGeneralFormula24: function (a, b, c, d) {
                var transformation = {
                    transformation: {
                        to: c || Expression.RuleType.Integration.IGeneralFormula24a,
                        from: d || Expression.RuleType.Integration.IGeneralFormula24b
                    },
                    X1: 'X',
                    X2: 'X',
                    X3: 'X',
                    dx: 'dx',
                    N1: 'N',
                    N2: 'N',
                    N3: 'N',
                    N4: 'N',
                    N5: 'N'
                }

                var result = Expression.translation.Transform(transformation, a, b);
                return result;
            },
            trigTwoX: function (a, b, name1, name2) {
                var transformation = {
                    transformation: {
                        to: name1,
                        from: name2
                    },
                    X1: 'X',
                    X2: 'X'
                }

                var result = Expression.translation.Transform(transformation, a, b);
                return result;
            }
        },
        translateGeneralFormula8: function (a, b) {

            var transformation = {
                transformation: {
                    from: Expression.RuleType.GeneralFormula8B,
                    to: Expression.RuleType.GeneralFormula8A
                },
                x: 'x',
                a_tan: 'a',
                a: 'a'
            };
            var result = Expression.translation.Transform(transformation, a, b);
            return result;
        },
        translateGeneralFormula11: function (a, b) {
            var transformation = {
                transformation: {
                    from: Expression.RuleType.GeneralFormula11A,
                    to: Expression.RuleType.GeneralFormula11B
                },
                x: 'x',
            };
            var result = Expression.translation.Transform(transformation, a, b);
            return result;
        },
        translateGeneralFormula10: function (a, b) {
            var transformation = {
                transformation: {
                    from: Expression.RuleType.GeneralFormula10B,
                    to: Expression.RuleType.GeneralFormula10A
                },
                x: 'x',
            };
            var result = Expression.translation.Transform(transformation, a, b);
            return result;

        },
        translateGeneralFormula9: function (a, b) {
            var transformation = {
                transformation: {
                    from: Expression.RuleType.GeneralFormula9B,
                    to: Expression.RuleType.GeneralFormula9A
                },
                x1: 'x',
                x2: 'x',
                a1: 'a',
                a2: 'a',
                a3: 'a'
            };
            var result = Expression.translation.Transform(transformation, a, b);
            return result;

        },
        translateOneOverX: function (a, b) {
            var transformation = {
                transformation: {
                    from: Expression.RuleType.OneOverX,
                    to: Expression.RuleType.NaturalLogAbsX
                },
                x: 'x'
            };

            var result = Expression.translation.Transform(transformation, a, b);
            return result;
        },
        translateIntegrationByParts: function (a, b) {
            var transformation = {
                transformation: {
                    from: Expression.RuleType.IntegraionByPartsComplete,
                    to: Expression.RuleType.IntegrationByParts
                },
                v_2: 'dv',
                v_1: 'dv',
                u_1: 'du',
                u_2: 'du'
            };

            var result = Expression.translation.Transform(transformation, a, b);

            return result;
        },
        translateIntegrationAddition: function (a, b) {
            switch (b.name()) {
                case Expression.RuleType.AdditionIntegral:
                    var transformation = {
                        repeat: {
                            A: {
                                target: 'A',

                                trans: {
                                    transformation: {
                                        from: Expression.RuleType.IntegrationAddition,
                                        to: Expression.RuleType.AdditionIntegral
                                    },
                                    f: 'f'
                                }
                            },
                            dx: {
                                scatter: {
                                    transformation: {
                                        from: Expression.RuleType.IntegrationAddition,
                                        to: Expression.RuleType.AdditionIntegral
                                    },
                                    dx: 'dx'
                                }
                            }
                        },
                        transform: {
                            from: 'A',
                            to: 'A'
                        }
                    };
                    var result = Expression.translation.Transform(transformation, a, b);

                    return result;
            }
        },
        translateIntegralConst: function (a, b) {
            a = a.copy();
            b = b.copy();
            var a_marks = a.getMarks();
            var result = b.copy();
            var b_marks = result.getMarks();
            switch (b.name()) {
                case Expression.RuleType.AxPlusC:
                    var transformation = {
                        transformation: {
                            from: Expression.RuleType.IntegralConst,
                            to: Expression.RuleType.AxPlusC
                        },
                        C: 'A',
                        dx: 'x'
                    };
                    return Expression.translation.Transform(transformation, a, b);
                default: return null;
            }
        },
        translateIntegralConst: function (a, b) {
            a = a.copy();
            b = b.copy();
            var a_marks = a.getMarks();
            var result = b.copy();
            var b_marks = result.getMarks();
            switch (b.name()) {
                case Expression.RuleType.AxPlusC:
                    var transformation = {
                        transformation: {
                            from: Expression.RuleType.IntegralConst,
                            to: Expression.RuleType.AxPlusC
                        },
                        C: 'A',
                        dx: 'x'
                    };
                    return Expression.translation.Transform(transformation, a, b);
                default: return null;
            }
        },
        /**
         * Translates the IntegralConstMultiply
         * @param {MEPH.math.Expression} a
         * @param {MEPH.math.Expression} b
         * @return {MEPH.math.Expression}
         **/
        translateIntegralConstMultiply: function (a, b) {
            a = a.copy();
            b = b.copy();
            var a_marks = a.getMarks();
            var result = b.copy();
            var b_marks = result.getMarks();
            switch (b.name()) {
                case Expression.RuleType.MultiplyIntegralofFx:
                    var transformation = {
                        transformation: {
                            from: Expression.RuleType.IntegralConstMultiply,
                            to: Expression.RuleType.MultiplyIntegralofFx
                        },
                        C: 'C',
                        A: 'A'
                    };
                    return Expression.translation.Transform(transformation, a, b);
                default: return null;
            }
        },
        /**
      * Translates the PowerIntegrate
      * @param {MEPH.math.Expression} a
      * @param {MEPH.math.Expression} b
      * @return {MEPH.math.Expression}
      **/
        translatePowerIntegrate: function (a, b) {
            var name = a.name();
            if (Expression.RuleType.PowerIntegrate !== a.name()) {
                name = b.name();
            }
            a = a.copy();
            b = b.copy();
            var a_marks = a.getMarks();
            var result = b.copy();
            var b_marks = result.getMarks();
            switch (name) {
                case Expression.RuleType.PowerIntegrate:
                case Expression.RuleType.Power:
                    var transformation = {
                        transformation: {
                            from: Expression.RuleType.PowerIntegrate,
                            to: Expression.RuleType.Power
                        },
                        n_pre: 'n',
                        n_post: 'n',
                        x: 'x'
                    };
                    return Expression.translation.Transform(transformation, a, b);
                default: return null;
            }
        }
    }
});﻿/**
 * @class MEPH.math.Set
 * Describes mathematical sets.
 *
 **/
MEPH.define('MEPH.math.Set', {
    alternateNames: 'Set',
    requires: ['MEPH.math.Util'],
    statics: {
        /**
         * Creates a superset of the set.
         * @param {MEPH.math.Set} set
         * @returns {MEPH.math.Set}
         **/
        superset: function (set) {
            var values = set.get();
            var length = values.length;
            var sets = [];
            var supersetcount = Math.pow(2, length);

            var base2Masks = [].interpolate(0, supersetcount, function (x) {
                var t = Set.baseConvert(x, 10, 2);
                return [].interpolate(0, length - t.length, function () {
                    return '0';
                }).join('') + Set.baseConvert(x, 10, 2);
            }).select(function (mask) {
                var subset = mask.split('').select(function (x, index) {
                    return parseInt(x, 10) ? values[index] : null;
                });
                return subset;
            });;
            var result = new Set();
            result.set(base2Masks);
            return result;
        },
        /**
         * Creates a set of strings represent all the possible base2 bit masks.
         * @param {Number} bits
         */
        base2MaskSet: function (bits) {
            var supersetcount = Math.pow(2, bits);
            var length = Math.log(bits) / Math.log(2)
            var base2Masks = [].interpolate(0, supersetcount, function (x) {
                var t = Set.baseConvert(x, 10, 2);
                return [].interpolate(0, length - t.length + 1, function () {
                    return '0';
                }).join('') + Set.baseConvert(x, 10, 2);
            });
            return base2Masks;
        },
        /**
         * Returns a set of items that have the item set size.
         * @param {Number} setSize
         * @param {Number} itemsCountInSet
         * @return {Array}
         */
        itemSets: function (setSize, itemsCountInSet) {
            var set = new Set();
            set.set([].interpolate(0, setSize, function (x) {
                return x;
            }));
            return Set.superset(set).get().where(function (set) {
                return set.count(function (x) { return x !== null; }) === itemsCountInSet;
            });
        },
        /**
         * Returns all the permutations of the set.
         * @param {MEPH.math.Set} set
         * @returns {Array}
         */
        permutate: function (set, i, n) {
            var j,
                result = [];

            if (i === undefined && n === undefined) {
                i = 0;
                n = set.get().length;
            }

            if (i == n) {
                result.push(set);
            }
            else {
                for (j = i; j < n; j++) {
                    Set.swap(set, i, j);
                    result = result.concat(Set.permutate(set.copy(), i + 1, n));
                    Set.swap(set, i, j); //backtrack
                }
            }
            return result;
        },
        /**
         * Swaps the ith and jth item of a set.
         * @param {MEPH.math.Set} set
         * @param {Number} i
         * @param {Number} j
         **/
        swap: function (set, i, j) {
            var array = set.get();
            var temp = array[i];
            array[i] = array[j];
            array[j] = temp;
        },
        /**
         * Produces a sag set.
         * @param {Number} count
         **/
        sagset: function (count) {

            var set = [].interpolate(1, count, function (x) {
                var subset = [].interpolate(0, count - x, function (t) {
                    return 1;
                });
                return subset;
            });
            set.push([]);
            set = set.reverse().select(function (x, index) {
                return [count - index].concat(x);
            });

            set = set.select(function (x) {
                var result = [];
                var first = x.first();
                result.push(x);
                var xcopy = x.select();
                var setMax = count - first;
                var c = 0;
                while (setMax > xcopy.subset(1).min(function (x) { return x ? x : count + 1; })) {
                    var min = xcopy.subset(1).min(function (x) {
                        return x ? x : count + 1;
                    });
                    c++;
                    if (c > 1000) { break; }
                    var lastMin = xcopy.lastIndexOf(min);
                    xcopy[lastMin]--;

                    var min = xcopy.subset(1).min(function (x) {
                        return x ? x : count + 1;
                    });

                    var firstMin = xcopy.indexOf(min);
                    if (firstMin === -1) {
                        firstMin = lastMin;
                    }
                    xcopy[firstMin]++;

                    if (lastMin === firstMin) {
                        break;
                    }
                    result.push(xcopy);
                    xcopy = xcopy.select();
                }

                return result;
            });
            return set.concatFluentReverse(function (x) { return x; });

        },
        /**
         * Converst a number from one base to another.
         * @param {Number} number
         * @param {Number} fromBase
         * @param {Number} toBase
         * @returns {String}
         **/
        baseConvert: function (number, fromBase, toBase) {
            return parseInt(number, fromBase || 10).toString(toBase || 10);
        }
    },
    properties: {
        value: null
    },
    initialize: function (val) {
        var me = this;
        me.value = val || [];
    },
    /**
     * Create a copy of it self.
     **/
    copy: function () {
        var me = this,
            set = new MEPH.math.Set();

        set.set(me.value.select());
        return set;
    },
    /**
     * Set the sets value.;
     * @param {Array} array
     **/
    set: function (array) {
        var me = this;
        me.value.length = 0;
        me.value.push.apply(me.value, array);
    },
    /**
     * Returns a string.
     **/
    print: function () {
        var me = this;
        return '[' + me.get().join() + ']';
    },
    /**
     * Returns the array of items.
     **/
    get: function () {
        var me = this;
        return me.value;
    }
});﻿MEPH.define('MEPH.math.ExpressionMatch', {
    alternateNames: 'ExpressionMatch',
    statics: {
        getMatch: function (expression) {
            var result = [];
            switch (expression.type) {
                case Expression.type.integral:
                    //Integral of a constant
                    var respectTo = expression.part(Expression.function.respectTo).val;
                    var integral = Expression.integral(Expression.variable('#C'), respectTo);
                    var v = expression.part(Expression.function.input);
                    var dx = expression.part(Expression.function.respectTo);
                    var variable = Expression.variable(v.val);
                    if (expression.equals(integral)) {
                        result.push(Expression.addition(Expression.multiplication(variable, Expression.variable(dx)), Expression.variable('c')));
                    }
                    //var multiplication = Expression.integral(Expression.multiplication(Expression.variable('#C'), Expression.anything()), respectTo);
                    //if (expression.equals(multiplication)) {
                    //    result.push(Expression.integral(Expression.multiplication(Expression.variable('#C'), Expression.anything()), respectTo))
                    //}
                    break;
            }
            return result;
        },
        funcEnums: function () {

        },
        integrate: function (expression) {
            switch (expression.type) {
                case Expression.type.integral:
                    return ExpressionMatch.getMatch(expression).first();
            }
        }
    }
});﻿describe("MEPH/math/Expression.spec.js", function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('an expression can be created', function (done) {

        MEPH.requires('MEPH.math.Expression').then(function ($class) {

            var expression = new MEPH.math.Expression();

            expect(expression).theTruth('a quaternion was not created');

        }).catch(function (e) {
            expect(e.message? e : new Error(e)).caught();
        }).then(function (x) {
            done();
        });
    });

    it('represent a variable ', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var expression = Expression.variable('a');
            var latexp = expression.latex();
            expect(latexp === 'a').toBeTruthy();

        }).catch(function (e) {
            expect(e.message? e : new Error(e)).caught();
        }).then(function (x) {
            done();
        });
    });

    it('represent an integration function', function (done) {

        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var expression = Expression.integral(Expression.variable('f(x)'), 'x', Expression.variable('a'), Expression.variable('b'));
            var latexp = '\\int_a^b \\! f(x) \\, \\mathrm{d}x';
            
            expect(latexp === expression.latex()).toBeTruthy();
        }).catch(function (e) {
            expect(e.message? e : new Error(e)).caught();
        }).then(function (x) {
            done();
        });
    });

    it('represent an integration without start an end', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var expression = Expression.integral(Expression.variable('f(x)'), 'x');
            var latexp = '\\int_ \\! f(x) \\, \\mathrm{d}x';
            expect(latexp === expression.latex()).toBeTruthy();
        }).catch(function (e) {
            expect(e.message? e : new Error(e)).caught();
        }).then(function (x) {
            done();
        });
    });

    it('represents an addition', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var expression = Expression.addition(Expression.variable('f(x)'), Expression.variable('x'));
            var latexp = 'f(x) + x';
            expect(latexp === expression.latex()).toBeTruthy();
        }).catch(function (e) {
            expect(e.message? e : new Error(e)).caught();
        }).then(function (x) {
            done();
        });
    });

    it('represents an addition with multiple parts', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var expression = Expression.addition(Expression.variable('f(x)'),
                Expression.variable('x'),
                Expression.variable('x'),
                Expression.variable('b'),
                Expression.variable('a'),
                Expression.variable('y'));
            var latexp = 'f(x) + x + x + b + a + y';

            expect(latexp === expression.latex()).toBeTruthy();
        }).catch(function (e) {
            expect(e.message? e : new Error(e)).caught();
        }).then(function (x) {
            done();
        });
    });

    it('represents an substitute with subtraction parts', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var expression = Expression.subtraction(Expression.variable('f(x)'),
                Expression.variable('x'),
                Expression.variable('x'),
                Expression.variable('b'),
                Expression.variable('a'),
                Expression.variable('y'));
            var latexp = 'f(x) - x - x - b - a - y';

            expect(latexp === expression.latex()).toBeTruthy();
        }).catch(function (e) {
            expect(e.message? e : new Error(e)).caught();
        }).then(function (x) {
            done();
        });
    });

    it('represents an substitute with division parts', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var expression = Expression.division(Expression.variable('f(x)'),
                Expression.variable('x'),
                Expression.variable('x'),
                Expression.variable('b'),
                Expression.variable('a'),
                Expression.variable('y'));
            var latexp = 'f(x) / x / x / b / a / y';

            expect(latexp === expression.latex()).toBeTruthy();
        }).catch(function (e) {
            expect(e.message? e : new Error(e)).caught();
        }).then(function (x) {
            done();
        });
    });

    it('represents an substitute with multiplication parts, if two variables are the same', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var expression = Expression.multiplication(Expression.variable('f(x)'),
                Expression.variable('x'),
                Expression.variable('x'),
                Expression.variable('b'),
                Expression.variable('a'),
                Expression.variable('y'));
            var latexp = 'f(x)xxbay';

            expect(latexp === expression.latex()).toBeTruthy();
        }).catch(function (e) {
            expect(e.message? e : new Error(e)).caught();
        }).then(function (x) {
            done();
        });
    });


    it('represents an substitute with multiplication parts, if two variables are the same', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var expression = Expression.multiplication(
                Expression.variable('x'),
                Expression.variable('b'),
                Expression.variable('a'),
                Expression.variable('y'));
            var latexp = 'xbay';

            expect(latexp === expression.latex()).toBeTruthy();
        }).catch(function (e) {
            expect(e.message? e : new Error(e)).caught();
        }).then(function (x) {
            done();
        });
    });

    it('requires parenthesis ', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;

            expect(Expression.requiresParenthesis(Expression.type.addition)).toBeTruthy();
            expect(Expression.requiresParenthesis(Expression.type.subtraction)).toBeTruthy();
            expect(Expression.requiresParenthesis(Expression.type.multiplication)).toBeTruthy();
            expect(Expression.requiresParenthesis(Expression.type.division)).toBeTruthy();
        }).catch(function (e) {
            expect(e.message? e : new Error(e)).caught();
        }).then(function (x) {
            done();
        });
    });


    it('expression power ', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var expression = Expression.power(Expression.variable('f(x)'), Expression.variable('y'));
            var latexp = 'f(x)^{y}';

            expect(latexp === expression.latex()).toBeTruthy();
        }).catch(function (e) {
            expect(e.message? e : new Error(e)).caught();
        }).then(function (x) {
            done();
        });
    });

    it('expression fraction ', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var expression = Expression.fraction(Expression.variable('f(x)'), Expression.variable('y'));
            var latexp = '\\frac{f(x)}{y}';

            expect(latexp === expression.latex()).toBeTruthy();
        }).catch(function (e) {
            expect(e.message? e : new Error(e)).caught();
        }).then(function (x) {
            done();
        });
    });

    it('expression fraction continuous', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var expression = Expression.fraction(Expression.variable('f(x)'),
                Expression.variable('f(x)'),
                Expression.variable('f(x)'),
                Expression.variable('f(x)'),
                Expression.variable('y'));
            var latexp = '\\begin{equation}' +
                        ' \\cfrac{f(x)}{' +
                        ' \\cfrac{f(x)}{' +
                        ' \\cfrac{f(x)}{' +
                        ' \\cfrac{f(x)}{y}}}}' +
                        ' \\end{equation}';

            expect(latexp === expression.latex()).toBeTruthy();
        }).catch(function (e) {
            expect(e.message? e : new Error(e)).caught();
        }).then(function (x) {
            done();
        });
    });

    it('expression cos', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var expression = Expression.cos(Expression.theta());
            var latexp = '\\cos (\\theta)';

            expect(latexp === expression.latex()).toBeTruthy();
        }).catch(function (e) {
            expect(e.message? e : new Error(e)).caught();
        }).then(function (x) {
            done();
        });
    });

    it('expression sin', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var expression = Expression.sin(Expression.theta());
            var latexp = '\\sin (\\theta)';

            expect(latexp === expression.latex()).toBeTruthy();
        }).catch(function (e) {
            expect(e.message? e : new Error(e)).caught();
        }).then(function (x) {
            done();
        });
    });

    it('expression tan', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var expression = Expression.tan(Expression.theta());
            var latexp = '\\tan (\\theta)';

            expect(latexp === expression.latex()).toBeTruthy();
        }).catch(function (e) {
            expect(e.message? e : new Error(e)).caught();
        }).then(function (x) {
            done();
        });
    });


    it('expression csc', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var expression = Expression.csc(Expression.theta());
            var latexp = '\\csc (\\theta)';

            expect(latexp === expression.latex()).toBeTruthy();
        }).catch(function (e) {
            expect(e.message? e : new Error(e)).caught();
        }).then(function (x) {
            done();
        });
    });

    it('expression sec', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var expression = Expression.sec(Expression.theta());
            var latexp = '\\sec (\\theta)';

            expect(latexp === expression.latex()).toBeTruthy();
        }).catch(function (e) {
            expect(e.message? e : new Error(e)).caught();
        }).then(function (x) {
            done();
        });
    });

    it('expression cot', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var expression = Expression.cot(Expression.theta());
            var latexp = '\\cot (\\theta)';

            expect(latexp === expression.latex()).toBeTruthy();
        }).catch(function (e) {
            expect(e.message? e : new Error(e)).caught();
        }).then(function (x) {
            done();
        });
    });

    it('expression sin^2', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var expression = Expression.sin(Expression.theta(), 2);
            var latexp = '\\sin^2 (\\theta)';

            expect(latexp === expression.latex()).toBeTruthy();
        }).catch(function (e) {
            expect(e.message? e : new Error(e)).caught();
        }).then(function (x) {
            done();
        });
    });

    it('expression mod', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var expression = Expression.mod(Expression.theta(), Expression.variable('f'));
            var latexp = '\\theta \\bmod f';

            expect(latexp === expression.latex()).toBeTruthy();
        }).catch(function (e) {
            expect(e.message? e : new Error(e)).caught();
        }).then(function (x) {
            done();
        });
    });



    it('expression limit', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var expression = Expression.limit(Expression.variable('f(x)'), Expression.variable('a'), Expression.variable('b'));
            var latexp = '\\lim_{a \\to b} f(x)';

            expect(latexp === expression.latex()).toBeTruthy();
        }).catch(function (e) {
            expect(e.message? e : new Error(e)).caught();
        }).then(function (x) {
            done();
        });
    });

    it('expression is the same form as', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var expression = Expression.sec(Expression.variable('a'));
            var exp2 = Expression.sec(Expression.variable('b'));

            expect(expression.equals(exp2)).toBeTruthy();
        }).catch(function (e) {
            expect(e.message? e : new Error(e)).caught();
        }).then(function (x) {
            done();
        });
    });

    it('expression is equal to sin2 θ + cos2 θ === sin2 f(x) + cos2 f(x)  ', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var expression = Expression.addition(Expression.sin('theta', 2), Expression.cos('theta', 2));
            var exp2 = Expression.addition(Expression.sin(Expression.variable('y'), 2), Expression.cos(Expression.variable('x'), 2));

            expect(expression.equals(exp2)).toBeTruthy();
        }).catch(function (e) {
            expect(e.message? e : new Error(e)).caught();
        }).then(function (x) {
            done();
        });
    });


    it('expression is equal to sin2 θ + cos2 θ + cos2 θ !== sin2 f(x) + cos2 f(x)  ', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var expression = Expression.addition(Expression.sin('theta', 2), Expression.cos('theta', 2), Expression.cos('theta', 2));
            var exp2 = Expression.addition(Expression.sin(Expression.variable('y'), 2), Expression.cos(Expression.variable('x'), 2));

            expect(expression.equals(exp2)).toBeFalsy();
        }).catch(function (e) {
            expect(e.message? e : new Error(e)).caught();
        }).then(function (x) {
            done();
        });
    });


    it('expression function', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var expression = Expression.func('f', 'x');

            var latexp = 'f(x)';

            expect(latexp === expression.latex()).toBeTruthy();
        }).catch(function (e) {
            expect(e.message? e : new Error(e)).caught();
        }).then(function (x) {
            done();
        });
    });


    it('expression plusorminus', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var expression = Expression.plusminus(Expression.variable('a'), Expression.variable('b'));
            var latexp = 'a \\pm b';

            expect(latexp === expression.latex()).toBeTruthy();
        }).catch(function (e) {
            expect(e.message? e : new Error(e)).caught();
        }).then(function (x) {
            done();
        });
    });

    it('can detect  Integration(a)dx = ax + c ', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var expression = Expression.integral(Expression.variable('a'), 'x');

            var results = Expression.getMatch(expression);
            var exp2 = Expression.addition(
                        Expression.multiplication(
                            Expression.variable('a'),
                            Expression.variable('x')),
                        Expression.variable('c'));
            expect(results.length).toBe(1);
            var r = results.some(function (x) {
                return x.equals(exp2);
            });
            expect(r).toBeTruthy();
        }).catch(function (e) {
            expect(e.message? e : new Error(e)).caught();
        }).then(function (x) {
            done();
        });
    });


    it('can detect Integration(ax)dx = ax + c ', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var expression = Expression.integral(Expression.multiplication(
                                                    Expression.variable('a'),
                                                    Expression.variable('x')),
                                'x');

            var results = Expression.getMatch(expression);
            var exp2 = Expression.addition(
                        Expression.multiplication(
                            Expression.variable('a'),
                            Expression.variable('x')),
                        Expression.variable('c'));
            expect(results.length).toBe(0);
            var r = results.some(function (x) {
                return x.equals(exp2);
            });
            expect(r).toBeFalsy();
        }).catch(function (e) {
            expect(e.message? e : new Error(e)).caught();
        }).then(function (x) {
            done();
        });
    });

    it('match rule Integration(a*f(x)) dx = a integrate(f(x))', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var expression = Expression.integral(Expression.multiplication(Expression.variable('a'),
                Expression.func('f', 'x')), 'x');

            var rule = Expression.matchRule(expression, Expression.Rules.Integration.IntegralConstMultiply());

            expect(rule).toBeTruthy();
        }).catch(function (e) {
            expect(e.message? e : new Error(e)).caught();
        }).then(function (x) {
            done();
        });
    });

    it('match rule Integration(a*f(x)) dx !== Integration(a + f(x)) dx ', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var expression = Expression.integral(Expression.addition(Expression.variable('a'),
                Expression.func('f', 'x')), 'x');

            var rule = Expression.matchRule(expression, Expression.Rules.Integration.IntegralConstMultiply());

            expect(!rule).toBeTruthy();
        }).catch(function (e) {
            expect(e.message? e : new Error(e)).caught();
        }).then(function (x) {
            done();
        });
    });


    it('match rule Integration(a*f(x)) dx === Integration(a (g(x) + f(x)) dx ', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var expression = Expression.integral(
                                Expression.multiplication(
                                    Expression.variable('a'),
                                    Expression.addition(
                                        Expression.func('g', 'x'),
                                        Expression.func('f', 'x')
                                    )),
                            'x');

            var rule = Expression.matchRule(expression, Expression.Rules.Integration.IntegralConstMultiply());

            expect(rule).toBeTruthy();
        }).catch(function (e) {
            expect(e.message? e : new Error(e)).caught();
        }).then(function (x) {
            done();
        });
    });


    it('match rule Integration(a*f(x)) dx === Integration(a * (g(x) + f(x)) + h(x)) dx ', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var expression = Expression.integral(
                                Expression.addition(
                                Expression.multiplication(
                                    Expression.variable('a'),
                                    Expression.addition(
                                        Expression.func('g', 'x'),
                                        Expression.func('f', 'x')
                                    )
                                ),
                                Expression.func('h', 'x')),
                            'x');

            var rule = Expression.matchRule(expression, Expression.Rules.Integration.IntegralConstMultiply());

            expect(!rule).toBeTruthy();
        }).catch(function (e) {
            expect(e.message? e : new Error(e)).caught();
        }).then(function (x) {
            done();
        });
    });


    it('match rule Integration(a) dx === Integration(a) dx ', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var expression = Expression.integral(Expression.variable('a'), 'x');

            var rule = Expression.matchRule(expression, Expression.Rules.Integration.IntegralConst());

            expect(rule).toBeTruthy();
        }).catch(function (e) {
            expect(new Error(e)).caught();
        }).then(function (x) {
            done();
        });
    });


    it('match rule Integration(a) dx === Integration(a) dx ', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var expression = Expression.integral(Expression.func('a', 'x'), 'x');

            var rule = Expression.matchRule(expression, Expression.Rules.Integration.IntegralConst());

            expect(!rule).toBeTruthy();
        }).catch(function (e) {
            expect(e).caught();
        }).then(function (x) {
            done();
        });
    });

    it('match rule ax + c', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var expression = Expression.addition(Expression.multiplication(Expression.variable('#B'), Expression.variable('x')), Expression.variable('#C'));

            var rule = Expression.matchRule(expression, Expression.Rules.Integration.AxPlusC());

            expect(rule).toBeTruthy();
        }).catch(function (e) {
            expect(e.message? e : new Error(e)).caught();
        }).then(function (x) {
            done();
        });
    });

    it('match rule  a int(f(x))dx ', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var expression = Expression.multiplication(Expression.variable('#B'), Expression.integral(Expression.func('f', 'x'), 'x'));

            var rule = Expression.matchRule(expression, Expression.Rules.Integration.MultiplyIntegralofFx());

            expect(rule).toBeTruthy();
        }).catch(function (e) {
            expect(e.message? e : new Error(e)).caught();
        }).then(function (x) {
            done();
        });

    });
    it('match rule  a int(f(x))dx ', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var expression = Expression.multiplication(
                                Expression.variable('#B'),
                                Expression.integral(
                                    Expression.multiplication(
                                        Expression.func('g', 'x'),
                                        Expression.func('f', 'x'))
                                    , 'x')
                                );

            var rule = Expression.matchRule(expression, Expression.Rules.Integration.MultiplyIntegralofFx());

            expect(rule).toBeTruthy();
        }).catch(function (e) {
            expect(e.message? e : new Error(e)).caught();
        }).then(function (x) {
            done();
        });
    });


    it('match power rule  int(x^n)dx ', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var expression = Expression.integral(
                Expression.power(
                    Expression.variable('x'),
                    Expression.variable('n'))
                , 'x');

            var rule = Expression.matchRule(expression, Expression.Rules.Integration.Power());

            expect(rule).toBeTruthy();
        }).catch(function (e) {
            expect(e).caught();
        }).then(function (x) {
            done();
        });
    });


    it('doesnt match power rule  int(y^n)dx ', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var expression = Expression.integral(
                Expression.power(
                    Expression.variable('y'),
                    Expression.variable('n'))
                , 'x');

            
            var rule = Expression.matchRule(expression, Expression.Rules.Integration.Power());

            expect(!rule).toBeTruthy();
        }).catch(function (e) {
            expect(e).caught();
        }).then(function (x) {
            done();
        });
    });

    it('doesnt match power rule  int(y^n)dx ', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var expression = Expression.integral(
                Expression.power(
                    Expression.variable('x'),
                    Expression.variable('x'))
                , 'x');


            var rule = Expression.matchRule(expression, Expression.Rules.Integration.Power());

            expect(!rule).toBeTruthy();
        }).catch(function (e) {
            expect(e).caught();
        }).then(function (x) {
            done();
        });
    });


    it('match power rule  1/(n+1)(x^(n+1))', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var expression = Expression.addition(Expression.multiplication(
                                Expression.fraction(
                                    Expression.variable(1),
                                    Expression.addition(
                                        Expression.variable('n'),
                                        Expression.variable(1)
                                    )
                                ),
                Expression.power(
                    Expression.variable('x'),
                    Expression.addition(Expression.variable('n'), Expression.variable(1)))), Expression.variable('a'));

            var rule = Expression.matchRule(expression, Expression.Rules.Integration.PowerIntegrate());

            expect(rule).toBeTruthy();
        }).catch(function (e) {
            expect(e.message? e : new Error(e)).caught();
        }).then(function (x) {
            done();
        });
    });
    it('match power rule  1/(n+1)(x^(n+1))', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var expression = Expression.addition(Expression.multiplication(
                                Expression.fraction(
                                    Expression.variable(1),
                                    Expression.addition(
                                        Expression.variable('n'),
                                        Expression.variable(1)
                                    )
                                ),
                Expression.power(
                    Expression.variable('x'),
                    Expression.addition(Expression.variable('x'), Expression.variable(1)))), Expression.variable('a'));

            var rule = Expression.matchRule(expression, Expression.Rules.Integration.PowerIntegrate());

            expect(!rule).toBeTruthy();
        }).catch(function (e) {
            expect(e).caught();
        }).then(function (x) {
            done();
        });
    });


    it('match int(u +/- v +/- w)', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var expression = Expression.integral(
                            Expression.addition(Expression.func('f', 'x'),
                                Expression.func('g', 'x'),
                                Expression.func('h', 'x')), 'x');

            var rule = Expression.matchRule(expression, Expression.Rules.Integration.IntegrationAddition());

            expect(rule).toBeTruthy();
        }).catch(function (e) {
            expect(e.message? e : new Error(e)).caught();
        }).then(function (x) {
            done();
        });
    });

    it('can describe the transfer from one for to another', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var expression = Expression.integral(
                            Expression.multiplication(Expression.variable('a')), 'x');

            expression.mark('A');
            var variable = expression.partVal(Expression.function.input);
            variable.mark('B');

            expect(expression.mark() === 'A').toBeTruthy();
            expect(variable.mark() === 'B').toBeTruthy();

        }).catch(function (e) {
            expect(e.message? e : new Error(e)).caught();
        }).then(function (x) {
            done();
        });
    });

    it('can describe the transfer from one for to another', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var expression = Expression.Rules.Integration.IntegralConstMultiply();

            var marks = expression.getMarks();
            expect(marks.C).toBeTruthy();
            expect(marks.A).toBeTruthy();
            expect(marks.I).toBeTruthy();

        }).catch(function (e) {
            expect(e.message? e : new Error(e)).caught();
        }).then(function (x) {
            done();
        });
    });

    it('can get marks from AxPlusC', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var expression = Expression.Rules.Integration.AxPlusC();

            var marks = expression.getMarks();
            expect(marks.A).toBeTruthy();
            expect(marks.C).toBeTruthy();
            expect(marks.x).toBeTruthy();

        }).catch(function (e) {
            expect(e.message? e : new Error(e)).caught();
        }).then(function (x) {
            done();
        });
    });

    it('can get marks from AxPlusC', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var expression = Expression.Rules.Integration.AxPlusC();

            var marks = expression.getMarks();
            expect(marks.A).toBeTruthy();
            expect(marks.C).toBeTruthy();
            expect(marks.x).toBeTruthy();

        }).catch(function (e) {
            expect(e.message? e : new Error(e)).caught();
        }).then(function (x) {
            done();
        });
    });

    it('can get marks from AxPlusC', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var expression = Expression.Rules.Integration.MultiplyIntegralofFx();

            var marks = expression.getMarks();
            expect(marks.A).toBeTruthy();
            expect(marks.C).toBeTruthy();
            expect(marks.I).toBeTruthy();

        }).catch(function (e) {
            expect(e.message? e : new Error(e)).caught();
        }).then(function (x) {
            done();
        });
    });

    it('can get marks from IntegralConst', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var expression = Expression.Rules.Integration.IntegralConst();

            var marks = expression.getMarks();

            expect(marks.C).toBeTruthy();
            expect(marks.I).toBeTruthy();

        }).catch(function (e) {
            expect(e.message? e : new Error(e)).caught();
        }).then(function (x) {
            done();
        });
    });

    it('can get marks from Power', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var expression = Expression.Rules.Integration.Power();

            var marks = expression.getMarks();

            expect(marks.x).toBeTruthy();
            expect(marks.n).toBeTruthy();
            expect(marks.I).toBeTruthy();

        }).catch(function (e) {
            expect(e.message? e : new Error(e)).caught();
        }).then(function (x) {
            done();
        });
    });

    it('can get marks from PowerIntegrate', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var expression = Expression.Rules.Integration.PowerIntegrate();

            var marks = expression.getMarks();

            expect(marks.n_pre).toBeTruthy();
            expect(marks.n_post).toBeTruthy();
            expect(marks.x).toBeTruthy();
            expect(marks.C).toBeTruthy();

        }).catch(function (e) {
            expect(e.message? e : new Error(e)).caught();
        }).then(function (x) {
            done();
        });
    });

    it('can get marks from IntegrationAddition', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var expression = Expression.Rules.Integration.IntegrationAddition();

            var marks = expression.getMarks();

            expect(marks.I).toBeTruthy();
            expect(marks.A).toBeTruthy();
            expect(marks.f).toBeTruthy();

        }).catch(function (e) {
            expect(e.message? e : new Error(e)).caught();
        }).then(function (x) {
            done();
        });
    });


    it('an expression can copy ', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var expression = Expression.Rules.Integration.IntegrationAddition();

            var copy = expression.copy();

            expect(copy.type === expression.type).toBeTruthy();
            expect(copy.mark() === expression.mark()).toBeTruthy();
            expect(copy.parts.length === expression.parts.length).toBeTruthy();

        }).catch(function (e) {
            expect(e.message? e : new Error(e)).caught();
        }).then(function (x) {
            done();
        });
    });

    it('a rule has a name ', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var expression = Expression.Rules.Integration.IntegrationAddition();

            for (var i in Expression.Rules.Integration) {
                expect(Expression.Rules.Integration[i]).theTruth(i + ' does not have a name.');
                expect(Expression.Rules.Integration[i]().name).theTruth(i + ' does not have a name.');
            }
        }).catch(function (e) {
            expect(e).caught();
        }).then(function (x) {
            done();
        });
    });

    it('an expression can be set parent. ', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var expression = new Expression();
            expression.parent(new Expression());
            expect(expression.parent()).toBeTruthy();

        }).catch(function (e) {
            expect(e.message? e : new Error(e)).caught();
        }).then(function (x) {
            done();
        });
    });


    it('can replace a part, in an expression. ', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {

            var a = Expression.anything();
            a.mark('A');

            var I = Expression.integral(a, 'x');
            var newc = Expression.variable('newc');
            I.swap('A', newc);
            expect(I.getMark('A')).toBeTruthy();

        }).catch(function (e) {
            expect(e.message? e : new Error(e)).caught();
        }).then(function (x) {
            done();
        });
    });

    it('can use swap rules to transform an expression from a -> b', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var rule1 = Expression.Rules.Integration.IntegralConstMultiply();
            var rule2 = Expression.Rules.Integration.MultiplyIntegralofFx();
            var transformation = {
                transformation: {
                    from: Expression.RuleType.IntegralConstMultiply,
                    to: Expression.RuleType.MultiplyIntegralofFx
                },
                C: 'C',
                A: 'A',
                I: 'I'
            };
            var result = Expression.translation.Transform(transformation, rule1, rule2);
            expect(result).toBeTruthy();

        }).catch(function (e) {
            expect(e).caught();
        }).then(function (x) {
            done();
        });
    });

    it('can set the value of a mark', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var rule1 = Expression.Rules.Integration.AxPlusC();

            rule1.swap('A', Expression.variable('A'));
            console.log(rule1.latex());
            expect(rule1.latex() === 'Ax + #C').toBeTruthy();
        }).catch(function (e) {
            expect(e.message? e : new Error(e)).caught();
        }).then(function (x) {
            done();
        });
    });

    it('translate a IntegralConst => AxPlusC ', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var expression = Expression.Rules.Integration.IntegrationAddition();
            var rule1 = Expression.Rules.Integration.IntegralConst();
            var rule2 = Expression.Rules.Integration.AxPlusC();

            var transformation = {
                transformation: {
                    from: Expression.RuleType.IntegralConst,
                    to: Expression.RuleType.AxPlusC
                },
                C: 'A',
                dx: 'x'
            };
            var result = Expression.translation.Transform(transformation, rule1, rule2);
            console.log(result.latex());
            expect(result).toBeTruthy();
        }).catch(function (e) {
            expect(e.message? e : new Error(e)).caught();
        }).then(function (x) {
            done();
        });
    });

    it('translate a IntegralConst => AxPlusC , with Expression.translation.Translate', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var expression = Expression.Rules.Integration.IntegrationAddition();
            var rule1 = Expression.Rules.Integration.IntegralConst();
            var rule2 = Expression.Rules.Integration.AxPlusC();

            var result = Expression.translation.Translate(rule1, rule2);
            console.log(result.latex());
            expect(result).toBeTruthy();
        }).catch(function (e) {
            expect(e.message? e : new Error(e)).caught();
        }).then(function (x) {
            done();
        });
    });

    it('translate a IntegralConstMultiply => MultiplyIntegralofFx ', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var expression = Expression.Rules.Integration.IntegrationAddition();
            var rule1 = Expression.Rules.Integration.IntegralConstMultiply();
            var rule2 = Expression.Rules.Integration.MultiplyIntegralofFx();

            var transformation = {
                transformation: {
                    from: Expression.RuleType.IntegralConstMultiply,
                    to: Expression.RuleType.MultiplyIntegralofFx
                },
                C: 'C',
                A: 'A'
            };
            var result = Expression.translation.Transform(transformation, rule1, rule2);
            console.log(result.latex());
            expect(result).toBeTruthy();
        }).catch(function (e) {
            expect(e.message? e : new Error(e)).caught();
        }).then(function (x) {
            done();
        });
    });

    it('match rule Integration(a*f(x)) dx === Integration(a (g(x) + f(x)) dx, and marks the expression ', function (done) {
        MEPH.requires('MEPH.math.Expression').then(function ($class) {
            var Expression = MEPH.math.Expression;
            var a = Expression.variable('a');
            var anything = Expression.addition(
                                        Expression.func('g', 'x'),
                                        Expression.func('f', 'x')
                                    );
            var expression = Expression.integral(
                                Expression.multiplication(
                                    a,
                                    anything),
                            'x');


            var rule = Expression.matchRule(expression, Expression.Rules.Integration.IntegralConstMultiply(), true);
            var marks = expression.getMarks();
            expect(rule).toBeTruthy();
            expect(marks.C === a).toBeTruthy();
            expect(marks.I === expression).toBeTruthy();
            expect(marks.A === anything).toBeTruthy();

        }).catch(function (e) {
            expect(e.message? e : new Error(e)).caught();
        }).then(function (x) {
            done();
        });
    });
});﻿describe("MEPH/math/expression/Factor.spec.js", 'MEPH.math.Expression', 'MEPH.math.expression.Factor', 'MEPH.math.expression.Evaluator', function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('an expression can be created', function (done) {

        MEPH.requires('MEPH.math.expression.Factor').then(function ($class) {

            var factor = new MEPH.math.expression.Factor();

            expect(factor).theTruth('a factor was not created');

        }).catch(function (e) {
            expect(e).caught();
        }).then(function (x) {
            done();
        });
    });


    it('can get factors of a "variable" ', function (done) {

        MEPH.requires('MEPH.math.Expression', 'MEPH.math.expression.Factor').then(function ($class) {

            var variable = Expression.variable('x');
            var factors = MEPH.math.expression.Factor.getFactors(variable);
            expect(factors).toBeTruthy();
            expect(factors.length === 1).toBeTruthy();
            expect(factors.first().exp.equals(Expression.variable('x'))).toBeTruthy();
            expect(factors.first().count === 1).toBeTruthy();

        }).catch(function (e) {
            expect(e).caught();
        }).then(function (x) {
            done();
        });
    });


    it('can get factors of a "power" x^2 ', function (done) {

        MEPH.requires('MEPH.math.Expression', 'MEPH.math.expression.Factor').then(function ($class) {

            var power = Expression.power(Expression.variable('x'), Expression.variable('2'));
            var factors = MEPH.math.expression.Factor.getFactors(power);
            expect(factors).toBeTruthy();
            expect(factors.length === 1).toBeTruthy();
            expect(factors.first().exp.type === Expression.type.variable).toBeTruthy();
            expect(factors.first().count === 2).toBeTruthy();

        }).catch(function (e) {
            expect(e).caught();
        }).then(function (x) {
            done();
        });
    });

    it('can get factors of a "power" (x^2)^2 ', function (done) {

        MEPH.requires('MEPH.math.Expression', 'MEPH.math.expression.Factor').then(function ($class) {

            var power = Expression.power(Expression.power(Expression.variable('x'), Expression.variable('2')), Expression.variable('2'));
            var factors = MEPH.math.expression.Factor.getFactors(power);
            expect(factors).toBeTruthy();
            expect(factors.length === 1).toBeTruthy();
            expect(factors.first().exp.type === Expression.type.variable).toBeTruthy();
            expect(factors.first().count === 4).toBeTruthy();

        }).catch(function (e) {
            expect(e).caught();
        }).then(function (x) {
            done();
        });
    });

    it('can get factors of a "power" x^a ', function (done) {

        MEPH.requires('MEPH.math.Expression', 'MEPH.math.expression.Factor').then(function ($class) {

            var power = Expression.power(Expression.variable('x'), Expression.variable('a'));
            var factors = MEPH.math.expression.Factor.getFactors(power);
            expect(factors).toBeTruthy();
            expect(factors.length === 1).toBeTruthy();
            expect(factors.first().exp.type === Expression.type.variable).toBeTruthy();
            var c = MEPH.math.expression.Factor.getNumerical(factors.first().count, true);
            expect(c === 'a').toBeTruthy();

        }).catch(function (e) {
            expect(e).caught();
        }).then(function (x) {
            done();
        });
    });

    it('can get factors of a "power" x*x^2 ', function (done) {

        MEPH.requires('MEPH.math.Expression', 'MEPH.math.expression.Factor').then(function ($class) {

            var power = Expression.multiplication(Expression.variable('x'), Expression.power(Expression.variable('x'), Expression.variable(2)));
            var factors = MEPH.math.expression.Factor.getFactors(power);
            expect(factors).toBeTruthy();
            expect(factors.length === 1).toBeTruthy();
            expect(factors.first().exp.type === Expression.type.variable).toBeTruthy();
            expect(factors.first().count === 3).toBeTruthy();

        }).catch(function (e) {
            expect(e).caught();
        }).then(function (x) {
            done();
        });
    });

    it('can get factors of a "power" a*x^2 ', function (done) {

        MEPH.requires('MEPH.math.Expression', 'MEPH.math.expression.Factor').then(function ($class) {

            var power = Expression.power(Expression.variable('x'), Expression.variable('2'));
            var power2 = Expression.power(Expression.variable('x'), Expression.variable('2'));
            var a = Expression.variable('a');
            var a2 = Expression.variable('a');
            var addition = Expression.multiplication(power, a);

            var factors = MEPH.math.expression.Factor.getFactors(addition);
            expect(factors).toBeTruthy();
            expect(factors.length === 2).toBeTruthy();
            expect(factors.first(function (x) { return x.count === 1; })).toBeTruthy();
            expect(factors.first(function (x) { return x.count === 2; })).toBeTruthy();

        }).catch(function (e) {
            expect(e).caught();
        }).then(function (x) {
            done();
        });
    });

    it('can remove "a" factors from an expression a*x^2 => x^2', function (done) {
        MEPH.requires('MEPH.math.Expression', 'MEPH.math.expression.Factor').then(function ($class) {

            var power = Expression.power(Expression.variable('x'), Expression.variable('2'));
            var power2 = Expression.power(Expression.variable('x'), Expression.variable('2'));
            var a = Expression.variable('a');
            var a2 = Expression.variable('b');
            var addition = Expression.multiplication(power, a);

            var factors = MEPH.math.expression.Factor.getFactors(addition);

            var raddition = MEPH.math.expression.Factor.removeFactors(addition, [factors.first()]);

            expect(raddition.type === Expression.type.power);

        }).catch(function (e) {
            expect(e).caught();
        }).then(function (x) {
            done();
        });
    })

    it('can remove "x^2" factors from an expression a*x^2 => a', function (done) {
        MEPH.requires('MEPH.math.Expression', 'MEPH.math.expression.Factor').then(function ($class) {

            var power = Expression.power(Expression.variable('x'), Expression.variable('2'));
            var power2 = Expression.power(Expression.variable('x'), Expression.variable('2'));
            var a = Expression.variable('a');
            var a2 = Expression.variable('b');
            var addition = Expression.multiplication(power, a);

            var factors = MEPH.math.expression.Factor.getFactors(addition);

            var raddition = MEPH.math.expression.Factor.removeFactors(addition, [factors.second()]);

            expect(raddition.type === Expression.type.variable);
            expect(raddition.getParts().first().val === 'a');

        }).catch(function (e) {
            expect(e).caught();
        }).then(function (x) {
            done();
        });
    })

    it('can remove "x^b" factors from an expression a*x^b => a', function (done) {
        MEPH.requires('MEPH.math.Expression',
                        'MEPH.math.expression.Factor',
                        'MEPH.math.expression.Evaluator').then(function ($class) {

                            var power = Expression.power(Expression.variable('x'), Expression.variable('b'));
                            var a = Expression.variable('a');
                            var addition = Expression.multiplication(power, a);

                            var factors = MEPH.math.expression.Factor.getFactors(addition);

                            var raddition = MEPH.math.expression.Factor.removeFactors(addition, [factors.second()]);

                            expect(raddition.type === Expression.type.variable);
                            expect(raddition.getParts().first().val === 'a');

                        }).catch(function (e) {
                            expect(e).caught();
                        }).then(function (x) {
                            done();
                        });
    });

    it('gets primes that make the number 6', function () {
        var number = Expression.variable('6');

        var factors = MEPH.math.expression.Factor.getFactors(number);

        expect(factors.length === 2).toBeTruthy();

    });
});﻿/**
 * @class MEPH.math.expression.Factor
 * A utility class for factors.
 *
 **/
MEPH.define('MEPH.math.expression.Factor', {
    requires: ['MEPH.math.Util'],
    statics: {
        /**
         * Gets factors from the expression.
         * @param {MEPH.math.Expression} expression
         * @return {Array}
         **/
        getFactors: function (expression) {
            var Factor = MEPH.math.expression.Factor;
            switch (expression.type) {
                case Expression.type.integral:
                case Expression.type.variable:
                    return Factor.getVariableFactors(expression);
                case Expression.type.power:
                    return Factor.getPowerFactors(expression);
                case Expression.type.multiplication:
                    return Factor.getMultiplicationFactors(expression);
                default:
                    throw new Error('unhandle case ? getFactors -> Factor.js ');
            }
        },
        /**
         * Get the first numerical expression with a matching factor.
         * @param {Number} num
         * @param {Expression} expression
         * @return {Object}
         **/
        getFirstNumericalPartWithMatchingFactor: function (num, expression) {
            var Factor = MEPH.math.expression.Factor;
            var factorVal, part = expression.getParts().first(function (part) {
                var val = Factor.getNumerical(part.val);
                if (typeof val === 'number') {
                    var factors = MEPH.math.Util.factor(val);
                    factorVal = factors.first(function (x) { return num === x; })
                    return factorVal;
                }
                else {
                    return false;
                }
            });

            return part ? { factorVal: factorVal, exp: part.val } : false;
        },
        /**
         * Divides the expression by a value.
         * @param {MEPH.math.Expression} expression
         * @param {Number} num
         **/
        divideFactor: function (expression, num) {
            var Factor = MEPH.math.expression.Factor;
            var expNum = Factor.getNumerical(expression);
            var result = MEPH.math.expression.Evaluator.evaluate(Expression.division(expression.copy(), num));
            return result;
        },
        /**
         * Removes factors from an expression
         * @param {MEPH.math.Expression} expression
         * @param {Array} of factors
         * @return {MEPH.math.Expression}
         ***/
        removeFactors: function (expression, factors) {
            var Factor = MEPH.math.expression.Factor;
            var $factors = factors.select(function (x) { return x.copy(); })

            $factors.foreach(function (factor) {
                if (factor.count) {
                    var toremove;
                    var num;
                    if (typeof (num = Factor.getNumerical(factor.exp)) === 'number') {
                        var val = Factor.getFirstNumericalPartWithMatchingFactor(num, expression);
                        if (val) {
                            var newexp = Factor.divideFactor(val.exp, val.factorVal);
                            Expression.SwapPart(val.exp, newexp);
                            Factor.reduceFactorCount(factor, 1);
                        }
                    }
                    else {
                        toremove = expression.getParts().where(function (part) {
                            return Factor.getExp(part.val).equals(factor.exp, { exact: true });
                        });

                        toremove.foreach(function (part) {
                            var count = Factor.getCount(part.val);
                            Factor.reduceFactorCount(factor, count);

                            expression.remove(part.val);
                        });
                    }
                }
            });
            if (expression.parts.length === 1) {
                switch (expression.type) {
                    case Expression.type.multiplication:
                        expression = expression.getParts().first().val;
                        break;
                }
            }
            else {
                switch (expression.type) {
                    case Expression.type.multiplication:
                        expression = Expression.removeOne(expression);
                }
            }
            return expression;
        },
        /**
         * Reduces factor count.
         * @param {MEPH.math.expression.Factor} factor
         * @param {Object} count
         **/
        reduceFactorCount: function (factor, count) {
            if (isNaN(factor.count) || isNaN(count)) {
                var sub = Expression.subtraction(factor.count, count);
                factor.count = MEPH.math.expression.Evaluator.evaluate(sub);
            } else
                factor.count -= count;
        },
        /**
         * Gets the number of factors it accounts for.
         * @param {MEPH.math.Expression} expression
         * @return {Number}
         **/
        getCount: function (expression) {
            switch (expression.type) {
                case Expression.type.power:
                    return expression.partOrDefault(Expression.function.power);
                default:
                    return 1;
            }
        },
        /**
         * Get expression.
         * @param {MEPH.math.Expression} expression
         * @return {MEPH.math.Expression}
         */
        getExp: function (expression) {
            switch (expression.type) {
                case Expression.type.power:
                    return expression.partOrDefault(Expression.function.base);
                default:
                    return expression;
            }
        },
        /**
         * Gets the multiplication factors.
         * @param {MEPH.math.Expression} expression
         * @return {Array} of Factors
         **/
        getMultiplicationFactors: function (expression) {
            var Factor = MEPH.math.expression.Factor;
            var factors = [],
                result = expression.getParts().select(function (x) {
                    return Factor.getFactors(x.val);
                }).concatFluentReverse(function (x) {
                    return x;
                });

            result.foreach(function (x) {
                var f = factors.first(function (y) { return y.exp.equals(x.exp, { exact: true }); });
                if (f) {
                    if (!isNaN(f.count) && !isNaN(x.count)) {
                        f.count += x.count;
                    }
                    else {
                        var t = typeof f.count === 'object' ? f.count : Expression.variable(f.count);
                        f.count = Expression.addition(Expression.variable(x.count), t);
                    }
                }
                else {
                    factors.push(x);
                }
            });

            return factors;
        },
        /**
         * Gets variable factors.
         * @param {MEPH.math.Expression} expression
         * @return {Array}
         **/
        getVariableFactors: function (expression) {
            var Factor = MEPH.math.expression.Factor;
            var numerical = Factor.getNumerical(expression);
            if (!isNaN(numerical)) {
                var t = MEPH.math.Util.factor(numerical).where(function (x) {
                    return x !== 1;
                });

                if (t.length !== 1) {
                    return t.where(function (x) { return x !== numerical; }).select(function (x) {
                        return new Factor(Expression.variable(x), 1);
                    });
                }
            }
            var factor = new Factor(expression, 1);
            return [factor];
        },
        /**
         * Gets power factors.
         * @param {MEPH.math.Expression} expression
         * @return {Array}
         **/
        getPowerFactors: function (expression) {
            var Factor = MEPH.math.expression.Factor;
            var copy = expression.copy();
            var flattenedCopy = Expression.FlattenPower(copy);
            var power = flattenedCopy.partOrDefault(Expression.function.power);
            var num = Factor.getNumerical(power)
            var factor = new Factor(flattenedCopy.partOrDefault(Expression.function.base), num);
            return [factor];
        },
        /**
         * Gets a numerical value or string or expression.
         * @param {Object} obj
         * @param {Boolean} prefferVal
         * @return {Object/Number/String}
         **/
        getNumerical: function (obj, prefferVal) {
            var result;
            if (typeof obj === 'object') {
                if (obj.type === Expression.type.variable) {
                    result = obj.partOrDefault(Expression.type.variable);
                    result = isNaN(result) ? (prefferVal ? result : obj) : parseFloat(result);
                }
                else result = obj;
            }
            else if (typeof obj === 'number') {
                result = obj;
            }
            else if (typeof obj === 'string') {

                result = isNaN(obj) ? obj : parseFloat(obj);
            }
            return result;
        },
        /**
         * Returns true if the expression is representing a number.
         * @param {MEPH.math.Expression} exp;
         * @return {Boolean}
         **/
        isNumerical: function (exp) {
            var result = MEPH.math.expression.Factor.getNumerical(exp);
            return !isNaN(result);
        }
    },
    initialize: function (exp, count) {
        var me = this;
        me.exp = exp;
        me.count = count;
    },
    copy: function () {
        var me = this;
        return new MEPH.math.expression.Factor(me.exp, me.count);
    },
    properties: {
        exp: null,
        count: null
    }
});﻿/**
 * @class MEPH.math.Expression
 * Describes mathematical expressions.
 *
 **/
MEPH.define('MEPH.math.Expression', {
    alternateNames: 'Expression',
    requires: ['MEPH.math.ExpressionMatch',
                'MEPH.math.Set',
                'MEPH.math.expression.Factor',
                'MEPH.math.ExpressionTranslation'],
    statics: {
        type: {
            variable: 'variable',
            integral: 'integral',
            addition: 'addition',
            power: 'power',
            limit: 'limit',
            fraction: 'fraction',
            sin: 'sin',
            cos: 'cos',
            tan: 'tan',
            csc: 'csc',
            cot: 'cot',
            sec: 'sec',
            tan: 'tan',
            sinh: 'sinh',
            cosh: 'cosh',
            tanh: 'tanh',
            sech: 'sech',
            coth: 'coth',
            csch: 'csch',
            ln: 'ln',
            log: 'log',
            e: 'e',
            factorial: 'factorial',
            summation: 'summation',
            sqrt: 'sqrt',
            negative: 'negative',
            abs: 'abs',
            func: 'func',
            mod: 'mod',
            modulo: 'modulo',
            theta: 'theta',
            subtraction: 'subtraction',
            plusminus: 'plusminus',
            multiplication: 'multiplication',
            division: 'division',
            anything: 'anything',
            derivative: 'derivative'
        },
        symbols: {
            Infinity: 'Infinity'
        },
        'function': {
            input: 'input',
            start: 'start',
            end: 'end',
            name: 'name',
            denominator: 'denominator',
            numerator: 'numerator',
            base: 'base',
            expression: 'exp',
            power: 'power',
            respectTo: 'respectTo',
            derivative: 'derivative'
        },
        translation: {
            Translate: function (a, b) {
                return ExpressionTranslation.translate(a, b)
            },
            Transform: function (transform, a, b) {
                return ExpressionTranslation.transform(transform, a, b);
            }
        },
        RuleType: {
            Derivation: {
                SimpleVariableA: 'SimpleVariableA',
                SimpleVariableB: 'SimpleVariableB'
            },
            Integration: {

            },
            IntegralConstMultiply: 'IntegralConstMultiply',
            MultiplyIntegralofFx: 'MultiplyIntegralofFx',
            IntegralConst: 'IntegralConst',
            AxPlusC: 'AxPlusC',
            Power: 'Power',
            PowerIntegrate: 'PowerIntegrate',
            IntegrationAddition: 'IntegrationAddition',
            AdditionIntegral: 'AdditionIntegral',
            IntegrationByParts: 'IntegrationByParts',
            IntegrationByPartsComplete: 'IntegrationByPartsComplete',
            Fudx: 'Fudx',
            FuOveruprimedx: 'FuOveruprimedx',
            OneOverX: 'OneOverX',
            NaturalLogAbsX: 'NaturalLogAbsX',
            GeneralFormula8A: 'GeneralFormula8A',
            GeneralFormula8B: 'GeneralFormula8B',
            GeneralFormula9A: 'GeneralFormula9A',
            GeneralFormula9B: 'GeneralFormula9B',
            TrigonometricFormula10A: 'TrigonometricFormula10A',
            TrigonometricFormula10B: 'TrigonometricFormula10B',
            TrigonometricFormula11A: 'TrigonometricFormula11A',
            TrigonometricFormula11B: 'TrigonometricFormula11B'
        },
        Dependency: {
            ConstRelation: function (c, x) {
                var inRespectTo = x && x.val && x.val.part ? x.val.part('variable').val : x.val;
                return !c.respects().contains(function (x) { return x === inRespectTo; });
            },
            VariableRelation: function (c, x) {
                var inRespectTo = x && x.val && x.val.part ? x.val.part('variable').val : x.val;
                return c.respects().contains(function (x) { return x === inRespectTo; });
            },
            ChainRule: function (Gx, Fx, expression) {
                
                var fx = expression.getMark(Fx);
                var gx = Expression.Dependency.GetGx(fx);
                if (gx) {
                    gx.mark(Gx);
                    return true;
                }
                return false;
            },
            AlreadyChainedRule: function (Gx, Fx, expression) {
                var properties = expression.getProperties();
                
                return !!!properties.chained;
            },
            GetGx: function (Fx) {
                switch (Fx.type) {
                    case Expression.type.fraction:
                    case Expression.type.division:
                    case Expression.type.subtraction:
                    case Expression.type.addition:
                    case Expression.type.multiplication:
                    case Expression.type.variable:
                    case Expression.type.integral:
                    case Expression.type.derivative:
                    case Expression.type.abs:
                    case Expression.type.summation:
                        return null;
                    case Expression.type.power:
                        return Fx.partOrDefault(Expression.function.power);
                    case Expression.type.ln:
                    case Expression.type.e:
                    case Expression.type.log:
                    case Expression.type.cos:
                    case Expression.type.tan:
                    case Expression.type.sec:
                    case Expression.type.sin:
                    case Expression.type.csc:
                    case Expression.type.cosh:
                    case Expression.type.tanh:
                    case Expression.type.sech:
                    case Expression.type.coth:
                    case Expression.type.sinh:
                    case Expression.type.csch:
                    case Expression.type.cot:
                    case Expression.type.sqrt:
                        return Fx.partOrDefault(Expression.function.input);
                    default:
                        throw new Error('unhandled case: ' + Fx.type + ', Expression.js(GetGx)')
                }
            },
            Matches: function (marks, expression) {
                var t = marks.select(function (x) {
                    return expression.getMark(x);
                });
                if (t.length === t.count(function (x) { return x; })) {
                    return t.subset(1).all(function (x) {
                        return t.first().equals(x, { exact: true });
                    })
                }
                return false;
            },
            OrderRequired: function (marks, parentMark, expression) {
                var parent = expression.getMark(parentMark);
                var ordered = marks.select(function (y) {
                    return parent.getParts().indexWhere(function (x) { return x.val === expression.getMark(y); }).first();
                });
                var res = ordered.all(function (x, i) {
                    if (i == 0) {
                        return true;
                    }
                    else {
                        return ordered[i - 1] < x;
                    }
                });
                return res;
            },
            SiblingIndependence: function (c, t) {
                var inRespectTo = t.select(function (x) {
                    var inRespectTo = x && x.val && x.val.part ? x.val.respects() : [x.val];
                    return inRespectTo;
                }).concatFluentReverse(function (x) { return x; });
                return !inRespectTo.intersection(c.respects()).count();
            },
            SiblingDependence: function (c, t) {
                var inRespectTo = t.select(function (x) {
                    var inRespectTo = x && x.val && x.val.part ? x.val.respects() : [x.val];
                    return inRespectTo;
                }).concatFluentReverse(function (x) { return x; });
                return inRespectTo.intersection(c.respects()).count();
            }
        },
        /**
         * Clears marks on expression.
         * @param {MEPH.math.Expression} expression
         **/
        clearMarks: function (expression) {
            expression.clearMarks();
        },
        /**
         * Selects the result based on the selector.
         *
         *              Example
         *              up:.[type of expression] -> traverses the expression upwards for the
         *              first expression of the type.
         * 
         * @param {MEPH.math.Expression}
         * @param {Object} d
         * @param {String} d.offset
         * @returns {MEPH.math.Expression}
         ***/
        select: function (expression, d) {
            var selector = d.offset;
            var split = selector.split(':');
            var traversalDirection = split.first();
            var expType;
            var exp = expression;
            switch (traversalDirection) {
                case 'stay':
                    return exp;
                case 'up':
                    expType = split.second().split('.').second();
                    do {
                        exp = exp.parent();
                    }
                    while (exp && exp.type !== expType);
                    if (exp) {
                        if (d.part) {
                            return exp.part(d.part);
                        }
                        else return exp;
                    }
            }
            /* I would like this section below to dissapear */
            switch (selector) {
                case 'grandparent':
                    offset = expression.parent().parent();
                    part = offset.part(d.part);
                    break;
                case 'parent':
                    offset = expression.parent();
                    part = offset.part(d.part);
                    break
                case 'sibling':
                    offset = expression.parent();
                    var json = JSON.parse('{' + d.part + '}');
                    part = offset.parts.where(function (x) {
                        return x.val !== expression;
                    });
                    break;
                default:
                    if (selector.split('.')) {
                        selector.split('.').foreach(function (x) {
                            if (x === 'parent') {
                                offset = offset.parent();
                            }
                        });
                        part = offset.part(d.part);
                    }
                    else
                        throw new Error('not handled offset');
                    break;
            }
            return part;
        },
        /**
         * Gets the greatest common factor from an array of expressions.
         * @param {MEPH.math.Expression} expression
         * @return {Array} of MEPH.math.expression.Factor
         */
        GreatestCommomFactor: function (expression) {

            var flattenedExpression = Expression.Flatten(expression.copy(), Expression.type.multiplication);
            var factors = [];
            var collectedFactors = flattenedExpression.getParts().select(function (x) {
                return MEPH.math.expression.Factor.getFactors(x.val);
            })
            var preCompactedFactors = collectedFactors.intersectFluent(function (x, y) {
                return x.exp.equals(y.exp, { exact: true });
            });

            var ret = preCompactedFactors.select(function (gh) {
                return collectedFactors.concatFluentReverse(function (x) { return x; }).where(function (x) {
                    return x.exp.equals(gh.exp, { exact: true });
                }).minSelect(function (y) {
                    return y.count;
                });
            });

            return ret;
        },
        /**
         * The greatest common divisor (gcd), also known as the greatest common factor (gcf), 
         * highest common factor (hcf), or greatest common measure (gcm), of two or more 
         * integers (when at least one of them is not zero), is the largest positive integer 
         * that divides the numbers without a remainder.
         * @param {MEPH.math.Expression} expression
         * @return {MEPH.math.Expression}
         **/
        GreatestCommonDenominator: function (expression) {
            var array = Expression.GreatestCommomFactor(expression);
            var res = array.select(function (x) {
                return Expression.power(x.exp, x.count);
            });
            if (res.length > 1) {
                res = Expression.multiplication.apply(this, res);
            }
            else if (res.length) {
                res = res.first();
            }
            else return null;

            return MEPH.math.expression.Evaluator.evaluate(res);
        },
        /**
         * The expression will have the factors removed from a flattened expression, and 
         * multiplied by those factors.
         * @param {MEPH.math.Expression} expression
         * @param {Array} factors 
         * @return {MEPH.math.Expression}
         ***/
        Refactor: function (expression, factors) {
            var flattenedExpression = Expression.Flatten(expression.copy(), Expression.type.multiplication);
            flattenedExpression.getParts().select(function (part) {
                var replacement = MEPH.math.expression.Factor.removeFactors(part.val, factors);
                return { r: replacement, p: part.val };
            }).foreach(function (t) {
                Expression.SwapPart(t.p, t.r);
            });

            return Expression.multiplication.apply(this, factors.select(function (x) { return x.exp }).concat(flattenedExpression))
        },

        /**
         * Swaps a for b.
         * @param {MEPH.math.Expression} b
         * @param {MEPH.math.Expression} a
         * @return {Boolean}s
         ***/
        SwapPart: function (a, b) {
            if (a.parent()) {
                var parent = a.parent();
                var part = parent.remove(a).first();
                parent.addPart(part.type, b);
                b.parent(parent);
                return true;
            }
            return false;
        },
        /**
         * Gets the rules which match the expression.
         **/
        getMatchingRules: function (exp) {
            var res = [];
            for (var j in Expression.Rules) {
                for (var i in Expression.Rules[j]) {
                    var rule = Expression.Rules[j][i]();
                    var ismatch = Expression.matchRule(exp, rule);
                    if (ismatch) {
                        res.push({
                            type: 'Differentiation' === j ? Expression.type.derivative : Expression.type.integral, rule: rule
                        });
                    }
                }
            }
            return res;
        },
        getRule: function (rule, type) {
            if ('Derivation' === type) {
                for (var i in Expression.Rules.Differentiation) {
                    if (i === rule) {
                        return Expression.Rules.Differentiation[i]();
                    }
                }
            }
            for (var i in Expression.Rules.Integration) {
                if (i === rule) {
                    return Expression.Rules.Integration[i]();
                }
            }
            return null;
        },
        Rules: {
            Differentiation: {
                SimpleVariableA: function () {
                    var exp = Expression.variable('x');
                    exp.dependency('up:.derivative', Expression.function.denominator, Expression.Dependency.VariableRelation);

                    var denom = Expression.variable('d');
                    denom.mark('dx');

                    var expression = Expression.derivative(exp, 1, null, denom);

                    expression.name(Expression.RuleType.Derivation.SimpleVariableA);

                    return expression;
                },
                SimpleVariableB: function () {
                    var one = Expression.one();
                    one.name(Expression.RuleType.Derivation.SimpleVariableB);

                    return one;
                },
                GeneralFormula1a: function () {
                    var exp = Expression.anything();
                    exp.dependency('up:.derivative', Expression.function.denominator, Expression.Dependency.ConstRelation);

                    var expression = Expression.derivative(exp, null, null);

                    expression.name(Expression.RuleType.Derivation.GeneralFormula1a);
                    return expression;
                },
                GeneralFormula1b: function () {
                    var expression = Expression.zero();
                    expression.name(Expression.RuleType.Derivation.GeneralFormula1b);
                    return expression;
                },
                GeneralFormula2a: function () {
                    var c = Expression.anything();
                    c.dependency('up:.derivative', Expression.function.denominator, Expression.Dependency.ConstRelation);
                    c.mark('C');

                    var x = Expression.variable('x');
                    x.dependency('up:.derivative', Expression.function.denominator, Expression.Dependency.VariableRelation);

                    var exp = Expression.multiplication(c, x);
                    exp.repeat = {
                        requires: [Expression.function.input]
                    };

                    var denom = Expression.variable('d');
                    var expression = Expression.derivative(exp, 1, null, denom);

                    expression.name(Expression.RuleType.Derivation.GeneralFormula2a);

                    return expression;
                },
                GeneralFormula2b: function () {
                    var c = Expression.variable('c');
                    c.mark('C');
                    c.name(Expression.RuleType.Derivation.GeneralFormula2b);
                    return c;
                },
                GeneralFormula3a: function () {
                    var c = Expression.anything();
                    c.dependency('up:.derivative', Expression.function.denominator, Expression.Dependency.ConstRelation);
                    c.mark('C');

                    var x = Expression.anything('x');
                    x.dependency('up:.derivative', Expression.function.denominator, Expression.Dependency.VariableRelation);
                    x.mark('U');

                    var exp = Expression.multiplication(c, x);
                    exp.repeat = {
                        requires: [Expression.function.input]
                    }

                    var denom = Expression.variable('d');
                    denom.mark('dx');

                    var diff = Expression.derivative(exp, 1, null, denom);
                    diff.name(Expression.RuleType.Derivation.GeneralFormula3a);

                    return diff;
                },
                GeneralFormula3b: function () {
                    var c = Expression.variable('c')
                    c.dependency('sibling', '', Expression.Dependency.SiblingIndependence);
                    c.mark('C');

                    var exp = Expression.anything();
                    exp.dependency('up:.derivative', Expression.function.denominator, Expression.Dependency.VariableRelation);
                    exp.mark('U');

                    var denom = Expression.variable('d');
                    denom.mark('dx');

                    var diff = Expression.derivative(exp, 1, null, denom);

                    var expression = Expression.multiplication(c, diff);
                    expression.name(Expression.RuleType.Derivation.GeneralFormula3b);
                    return expression;
                },
                GeneralFormula4a: function () {
                    var d = Expression.anything();;
                    d.dependency('up:.derivative', Expression.function.denominator, Expression.Dependency.VariableRelation);
                    d.mark('U');

                    var exp = Expression.addition(d);
                    exp.repeat = true;
                    exp.mark('A');

                    var denom = Expression.variable('d');
                    denom.mark('dx');

                    var diff = Expression.derivative(exp, 1, null, denom);
                    diff.name(Expression.RuleType.Derivation.GeneralFormula4a);
                    diff.mark('dir');

                    return diff;
                },
                GeneralFormula4b: function () {
                    var d = Expression.anything();;
                    d.dependency('up:.derivative', Expression.function.denominator, Expression.Dependency.VariableRelation);
                    d.mark('U');

                    var denom = Expression.variable('d');
                    denom.mark('dx');


                    var derivative = Expression.derivative(d, 1, null, denom);
                    derivative.mark('dir');

                    var addition = Expression.addition(derivative);
                    addition.name(Expression.RuleType.Derivation.GeneralFormula4b);
                    addition.mark('A');
                    addition.repeat = true;

                    return addition;
                },
                GeneralFormula5a: function () {

                    var a = Expression.anything();
                    a.dependency('up:.derivative', Expression.function.denominator, Expression.Dependency.VariableRelation);
                    a.mark('U');

                    var denom = Expression.variable('d');
                    denom.mark('dx');

                    var multiplication = Expression.multiplication(a);
                    multiplication.mark('A');
                    multiplication.repeat = true;


                    var dirivative = Expression.derivative(multiplication, 1, null, denom);
                    dirivative.name(Expression.RuleType.Derivation.GeneralFormula5a);
                    return dirivative;
                },
                GeneralFormula5b: function () {

                    var v = Expression.anything();
                    v.mark('V')
                    v.dependency('up:.derivative', Expression.function.denominator, Expression.Dependency.VariableRelation);

                    var u = Expression.anything();
                    u.mark('U')
                    u.dependency('up:.derivative', Expression.function.denominator, Expression.Dependency.VariableRelation);

                    var denom = Expression.variable('d');
                    denom.mark('dx');

                    var dir = Expression.derivative(u, 1, null, denom);
                    dir.mark('dir');

                    var mul = Expression.multiplication(dir, v);
                    mul.mark('copyTo');

                    var addition = Expression.addition(mul);
                    addition.mark('A');
                    addition.repeat = true;
                    addition.name(Expression.RuleType.Derivation.GeneralFormula5b);

                    return addition;
                },
                GeneralFormula7a: function () {
                    var v = Expression.anything();
                    v.mark('V')
                    v.dependency('up:.derivative', Expression.function.denominator, Expression.Dependency.VariableRelation);

                    var u = Expression.anything();
                    u.mark('U')
                    u.dependency('up:.derivative', Expression.function.denominator, Expression.Dependency.VariableRelation);

                    var division = Expression.division(u, v);

                    var denom = Expression.variable('d');
                    denom.mark('dx');

                    var diff = Expression.derivative(division, 1, null, denom);

                    diff.name(Expression.RuleType.Derivation.GeneralFormula7a);

                    return diff;
                },
                GeneralFormula7b: function () {
                    var v = Expression.anything();
                    v.mark('V');

                    var _du = Expression.anything();
                    _du.mark('dU');


                    var dudx = Expression.variable('d');
                    dudx.mark('dudx');

                    var du = Expression.derivative(_du, 1, null, dudx);

                    var _dv = Expression.anything();
                    _dv.mark('dV');

                    var dvdx = Expression.variable('d');
                    dvdx.mark('dvdx');

                    var dv = Expression.derivative(_dv, 1, null, dvdx);


                    var u = Expression.anything();
                    u.mark('U');

                    var vdu = Expression.multiplication(v, du);


                    var udv = Expression.multiplication(u, dv);

                    var top = Expression.subtraction(vdu, udv);

                    var vd = Expression.anything();
                    vd.mark('VD');

                    var bottom = Expression.power(vd, 2);
                    var division = Expression.division(top, bottom);

                    division.name(Expression.RuleType.Derivation.GeneralFormula7b);

                    return division;
                },
                /**
                 * Chain rule.
                 * In calculus, the chain rule is a formula for computing the derivative of the composition of two or more functions. 
                 * @return {MEPH.math.Expression}
                 */
                ChainRuleA: function () {
                    var expression = Expression.anything();
                    expression.mark('Fx');
                    expression.dependency('up:.derivative', Expression.function.denominator, Expression.Dependency.VariableRelation);

                    var denom = Expression.variable('d');
                    denom.mark('dx');

                    var diff = Expression.derivative(expression, 1, null, denom);
                    diff.name(Expression.RuleType.Derivation.ChainRuleA);
                    diff.dependency('stay:', '', Expression.Dependency.AlreadyChainedRule.bind(this, 'Gx', 'Fx'), true);
                    diff.dependency('stay:', '', Expression.Dependency.ChainRule.bind(this, 'Gx', 'Fx'), true);

                    return diff;
                },
                ChainRuleB: function () {

                    var Gx = Expression.anything();
                    Gx.mark('Gx');

                    var Fx = Expression.anything();
                    Fx.mark('Fx');

                    var dx = Expression.variable('x');
                    dx.mark('dx1');

                    var dx2 = Expression.variable('x');
                    dx2.mark('dx2');

                    var dG = Expression.derivative(Gx, 1, null, dx2);

                    var dF = Expression.derivative(Fx, 1, null, dx);
                    dF.setProperties({ chained: true });

                    var multiplication = Expression.multiplication(dF, dG);

                    multiplication.name(Expression.RuleType.Derivation.ChainRuleB);

                    return multiplication;
                },
                GeneralFormula10a: function () {
                    var n = Expression.anything();
                    n.mark('N');

                    var exp = Expression.anything();
                    exp.mark('U');
                    exp.dependency('up:.derivative', Expression.function.denominator, Expression.Dependency.VariableRelation);

                    var power = Expression.power(exp, n);

                    var denom = Expression.variable('d');
                    denom.mark('dx');

                    var diff = Expression.derivative(power, 1, null, denom);

                    diff.name(Expression.RuleType.Derivation.GeneralFormula10a);

                    return diff;
                },
                GeneralFormula10b: function () {

                    var denom = Expression.variable('d');
                    denom.mark('dx');

                    var _du = Expression.anything();
                    _du.mark('dU');

                    var du = Expression.derivative(_du, 1, null, denom);

                    var ns = Expression.anything();
                    ns.mark('NS');

                    var sub = Expression.subtraction(ns, 1);

                    var u = Expression.anything();
                    u.mark('U');

                    var power = Expression.power(u, sub);

                    var n = Expression.anything();
                    n.mark('N');

                    var multiplication = Expression.multiplication(n, power, du);

                    multiplication.name(Expression.RuleType.Derivation.GeneralFormula10b);

                    return multiplication;
                },
                GeneralFormula12a: function () {
                    var x = Expression.anything();
                    x.dependency('up:.derivative', Expression.function.denominator, Expression.Dependency.VariableRelation);
                    x.mark('X');

                    var exp = Expression.e(x);

                    var denom = Expression.variable('d');
                    denom.mark('dx');

                    var diff = Expression.derivative(exp, 1, null, denom);
                    diff.name(Expression.RuleType.Derivation.GeneralFormula12a)
                    return diff;
                },
                GeneralFormula12b: function () {
                    var x = Expression.anything();
                    x.dependency('up:.derivative', Expression.function.denominator, Expression.Dependency.VariableRelation);
                    x.mark('X');

                    var exp = Expression.e(x);
                    exp.name(Expression.RuleType.Derivation.GeneralFormula12b)
                    return exp;

                },
                GeneralFormula13a: function () {
                    var x = Expression.anything();
                    x.mark('X');
                    x.dependency('up:.derivative', Expression.function.denominator, Expression.Dependency.VariableRelation)

                    var a = Expression.anything()
                    a.mark('A');
                    a.dependency('up:.derivative', Expression.function.denominator, Expression.Dependency.ConstRelation);

                    var power = Expression.power(a, x);

                    var denom = Expression.variable('d');
                    denom.mark('dx');

                    var diff = Expression.derivative(power, 1, null, denom);

                    diff.name(Expression.RuleType.Derivation.GeneralFormula13a)

                    return diff;
                },
                GeneralFormula13b: function () {
                    var lna = Expression.anything();
                    lna.mark('LNA');

                    var ln = Expression.ln(lna);

                    var a = Expression.anything();
                    a.mark('A');

                    var x = Expression.anything();
                    x.mark('X');

                    var power = Expression.power(a, x);

                    var multiplication = Expression.multiplication(power, ln);

                    multiplication.name(Expression.RuleType.Derivation.GeneralFormula13b);

                    return multiplication;
                },
                GeneralFormula14a: function () {
                    var x = Expression.anything('x');
                    x.mark('X');
                    x.dependency('up:.derivative', Expression.function.denominator, Expression.Dependency.VariableRelation);

                    var abs = Expression.abs(x);

                    var ln = Expression.ln(abs);

                    var denom = Expression.variable('d');
                    denom.mark('dx');

                    var diff = Expression.derivative(ln, 1, null, denom);
                    diff.name(Expression.RuleType.Derivation.GeneralFormula14a);
                    return diff;
                },
                GeneralFormula14b: function () {
                    var x = Expression.anything('x');
                    x.mark('X');

                    var division = Expression.division(Expression.variable('1'), x);
                    division.name(Expression.RuleType.Derivation.GeneralFormula14b);

                    return division;
                },
                GeneralFormula15a: function () {

                    var x = Expression.anything('x');
                    x.mark('X');

                    var a = Expression.variable('a');
                    a.mark('A');

                    var denom = Expression.variable('d');
                    denom.mark('dx');

                    var log = Expression.log(x, a);

                    var diff = Expression.derivative(log, 1, null, denom);

                    diff.name(Expression.RuleType.Derivation.GeneralFormula15a)
                    return diff;
                },
                GeneralFormula15b: function () {
                    var x = Expression.anything();
                    x.mark('X');
                    x.dependency('up:.derivative', Expression.function.denominator, Expression.Dependency.VariableRelation);

                    var a = Expression.anything();
                    a.mark('A');

                    var ln = Expression.ln(a);

                    var sub = Expression.multiplication(x, ln);

                    var division = Expression.division(1, sub);

                    division.name(Expression.RuleType.Derivation.GeneralFormula15b);

                    return division;
                },
                GeneralFormula17a: function () {
                    var x = Expression.anything();
                    x.mark('X');
                    x.dependency('up:.derivative', Expression.function.denominator, Expression.Dependency.VariableRelation);

                    var sin = Expression.sin(x);

                    var denom = Expression.variable('d');
                    denom.mark('dx');

                    var diff = Expression.derivative(sin, 1, null, denom);

                    diff.name(Expression.RuleType.Derivation.GeneralFormula17a);

                    return diff;
                },
                GeneralFormula17b: function () {
                    var x = Expression.anything();
                    x.mark('X');

                    var cos = Expression.cos(x);
                    cos.name(Expression.RuleType.Derivation.GeneralFormula17b);

                    return cos;
                },
                GeneralFormula18a: function () {
                    var x = Expression.anything();
                    x.mark('X');
                    x.dependency('up:.derivative', Expression.function.denominator, Expression.Dependency.VariableRelation);

                    var cos = Expression.cos(x);

                    var denom = Expression.variable('d');
                    denom.mark('dx');

                    var diff = Expression.derivative(cos, 1, null, denom);

                    diff.name(Expression.RuleType.Derivation.GeneralFormula18a);

                    return diff;
                },
                GeneralFormula18b: function () {
                    var x = Expression.anything();
                    x.mark('X');

                    var cos = Expression.cos(x);
                    cos.name(Expression.RuleType.Derivation.GeneralFormula17b);

                    var mul = Expression.multiplication(-1, cos);

                    mul.name(Expression.RuleType.Derivation.GeneralFormula18b);

                    return mul;
                },
                GeneralFormula19a: function () {
                    var x = Expression.anything();
                    x.mark('X');
                    x.dependency('up:.derivative', Expression.function.denominator, Expression.Dependency.VariableRelation);

                    var denom = Expression.variable('d');
                    denom.mark('dx');

                    var tan = Expression.tan(x);

                    var diff = Expression.derivative(tan, 1, null, denom);

                    diff.name(Expression.RuleType.Derivation.GeneralFormula19a);

                    return diff;
                },
                GeneralFormula19b: function () {
                    var x = Expression.anything();
                    x.mark('X');

                    var sec = Expression.sec(x);

                    var power = Expression.power(sec, 2);

                    power.name(Expression.RuleType.Derivation.GeneralFormula19b);

                    return power;
                },
                GeneralFormula20a: function () {
                    var x = Expression.anything();
                    x.dependency('up:.derivative', Expression.function.denominator, Expression.Dependency.VariableRelation);
                    x.mark('X');

                    var cot = Expression.cot(x);

                    var denom = Expression.variable('d');
                    denom.mark('dx');

                    var diff = Expression.derivative(cot, 1, null, denom);
                    diff.name(Expression.RuleType.Derivation.GeneralFormula20a);
                    return diff;
                },
                GeneralFormula20b: function () {
                    var x = Expression.anything();
                    x.mark('X');

                    var csc = Expression.csc(x);

                    var pow = Expression.power(csc, 2);

                    var negone = Expression.variable(-1);

                    var multiplication = Expression.multiplication(negone, pow);
                    multiplication.name(Expression.RuleType.Derivation.GeneralFormula20b);

                    return multiplication;
                },
                GeneralFormula21a: function () {
                    var x = Expression.anything();
                    x.dependency('up:.derivative', Expression.function.denominator, Expression.Dependency.VariableRelation);
                    x.mark('X');

                    var csc = Expression.csc(x);

                    var denom = Expression.variable('d');
                    denom.mark('dx');

                    var diff = Expression.derivative(csc, 1, null, denom);
                    diff.name(Expression.RuleType.Derivation.GeneralFormula21a);
                    return diff;
                },
                GeneralFormula21b: function () {
                    var x1 = Expression.anything();
                    x1.mark('X1');

                    var x2 = Expression.anything();
                    x2.mark('X2');

                    var csc = Expression.csc(x1);

                    var cot = Expression.cot(x2);

                    var mul = Expression.multiplication(-1, csc, cot);
                    mul.name(Expression.RuleType.Derivation.GeneralFormula21b);

                    return mul;
                },
                GeneralFormula22a: function () {
                    var x = Expression.anything();
                    x.dependency('up:.derivative', Expression.function.denominator, Expression.Dependency.VariableRelation);
                    x.mark('X');

                    var sec = Expression.sec(x);

                    var denom = Expression.variable('d');
                    denom.mark('dx');

                    var diff = Expression.derivative(sec, 1, null, denom);
                    diff.name(Expression.RuleType.Derivation.GeneralFormula22a);
                    return diff;
                },
                GeneralFormula22b: function () {
                    var x1 = Expression.anything();
                    x1.mark('X1');

                    var x2 = Expression.anything();
                    x2.mark('X2');

                    var sec = Expression.sec(x1);

                    var tan = Expression.tan(x2);

                    var mul = Expression.multiplication(sec, tan);
                    mul.name(Expression.RuleType.Derivation.GeneralFormula21b);

                    return mul;
                },
                GeneralFormula23a: function () {
                    var x = Expression.anything();
                    x.dependency('up:.derivative', Expression.function.denominator, Expression.Dependency.VariableRelation);
                    x.mark('X');

                    var sin = Expression.sin(x);

                    var denom = Expression.variable('d');
                    denom.mark('dx');
                    var power = Expression.power(sin, -1);

                    var diff = Expression.derivative(power, 1, null, denom);
                    diff.name(Expression.RuleType.Derivation.GeneralFormula23a);

                    return diff;
                },
                GeneralFormula23b: function () {
                    var x = Expression.anything();
                    x.mark('X');

                    var x2 = Expression.power(x, 2);

                    var sub = Expression.subtraction(1, x2);

                    var sqrt = Expression.sqrt(sub);

                    var division = Expression.division(1, sqrt);

                    division.name(Expression.RuleType.Derivation.GeneralFormula23b);

                    return division;
                },
                GeneralFormula24a: function () {
                    var x = Expression.anything();
                    x.dependency('up:.derivative', Expression.function.denominator, Expression.Dependency.VariableRelation);
                    x.mark('X');

                    var cos = Expression.cos(x);

                    var denom = Expression.variable('d');
                    denom.mark('dx');

                    var power = Expression.power(cos, -1);

                    var diff = Expression.derivative(power, 1, null, denom);
                    diff.name(Expression.RuleType.Derivation.GeneralFormula24a);

                    return diff;
                },
                GeneralFormula24b: function () {
                    var x = Expression.anything();
                    x.mark('X');

                    var x2 = Expression.power(x, 2);

                    var sub = Expression.subtraction(1, x2);

                    var sqrt = Expression.sqrt(sub);

                    var division = Expression.division(1, sqrt);

                    division.name(Expression.RuleType.Derivation.GeneralFormula24b);

                    return division;
                },
                GeneralFormula25a: function () {
                    var x = Expression.anything();
                    x.dependency('up:.derivative', Expression.function.denominator, Expression.Dependency.VariableRelation);
                    x.mark('X');

                    var tan = Expression.tan(x);

                    var denom = Expression.variable('d');
                    denom.mark('dx');

                    var power = Expression.power(tan, -1);

                    var diff = Expression.derivative(power, 1, null, denom);
                    diff.name(Expression.RuleType.Derivation.GeneralFormula25a);

                    return diff;
                },
                GeneralFormula25b: function () {
                    var x = Expression.anything();
                    x.mark('X');

                    var x2 = Expression.power(x, 2);

                    var addition = Expression.addition(1, x2);


                    var division = Expression.division(1, addition);

                    division.name(Expression.RuleType.Derivation.GeneralFormula25b);

                    return division;
                },
                GeneralFormula26a: function () {
                    var x = Expression.anything();
                    x.dependency('up:.derivative', Expression.function.denominator, Expression.Dependency.VariableRelation);
                    x.mark('X');

                    var cot = Expression.cot(x);

                    var denom = Expression.variable('d');
                    denom.mark('dx');

                    var power = Expression.power(cot, -1);

                    var diff = Expression.derivative(power, 1, null, denom);
                    diff.name(Expression.RuleType.Derivation.GeneralFormula26a);

                    return diff;
                },
                GeneralFormula26b: function () {
                    var x = Expression.anything();
                    x.mark('X');

                    var x2 = Expression.power(x, 2);

                    var addition = Expression.addition(1, x2);


                    var division = Expression.division(1, addition);
                    var mul = Expression.multiplication(-1, division);
                    mul.name(Expression.RuleType.Derivation.GeneralFormula26b);

                    return mul;
                },
                GeneralFormula27a: function () {
                    var x = Expression.anything();
                    x.dependency('up:.derivative', Expression.function.denominator, Expression.Dependency.VariableRelation);
                    x.mark('X');

                    var csc = Expression.csc(x);

                    var denom = Expression.variable('d');
                    denom.mark('dx');

                    var power = Expression.power(csc, -1);

                    var diff = Expression.derivative(power, 1, null, denom);
                    diff.name(Expression.RuleType.Derivation.GeneralFormula27a);

                    return diff;
                },
                GeneralFormula27b: function () {
                    var x = Expression.anything();
                    x.mark('X1');

                    var x1 = Expression.anything();
                    x1.mark('X2');

                    var x2 = Expression.power(x, 2);

                    var subtraction = Expression.subtraction(x2, 1);

                    var sqrt = Expression.sqrt(subtraction);

                    var multiply = Expression.multiplication(x1, sqrt);

                    var division = Expression.division(1, multiply);

                    var mul = Expression.multiplication(-1, division);

                    mul.name(Expression.RuleType.Derivation.GeneralFormula27b);

                    return mul;
                },
                GeneralFormula28a: function () {
                    var x = Expression.anything();
                    x.dependency('up:.derivative', Expression.function.denominator, Expression.Dependency.VariableRelation);
                    x.mark('X');

                    var sec = Expression.sec(x);

                    var denom = Expression.variable('d');
                    denom.mark('dx');

                    var power = Expression.power(sec, -1);

                    var diff = Expression.derivative(power, 1, null, denom);
                    diff.name(Expression.RuleType.Derivation.GeneralFormula28a);

                    return diff;
                },
                GeneralFormula28b: function () {
                    var x = Expression.anything();
                    x.mark('X1');

                    var x1 = Expression.anything();
                    x1.mark('X2');

                    var x2 = Expression.power(x, 2);

                    var subtraction = Expression.subtraction(x2, 1);

                    var sqrt = Expression.sqrt(subtraction);

                    var multiply = Expression.multiplication(x1, sqrt);

                    var division = Expression.division(1, multiply);

                    division.name(Expression.RuleType.Derivation.GeneralFormula28b);

                    return division;
                },
                GeneralFormula29a: function () {
                    var x = Expression.anything();
                    x.dependency('up:.derivative', Expression.function.denominator, Expression.Dependency.VariableRelation);
                    x.mark('X');

                    var sinh = Expression.sinh(x);

                    var denom = Expression.variable('d');
                    denom.mark('dx');

                    var diff = Expression.derivative(sinh, 1, null, denom);
                    diff.name(Expression.RuleType.Derivation.GeneralFormula29a);

                    return diff;
                },
                GeneralFormula29b: function () {
                    var x = Expression.anything();
                    x.mark('X');

                    var cosh = Expression.cosh(x);
                    cosh.name(Expression.RuleType.Derivation.GeneralFormula29b);

                    return cosh;
                },
                GeneralFormula30a: function () {
                    var x = Expression.anything();
                    x.dependency('up:.derivative', Expression.function.denominator, Expression.Dependency.VariableRelation);
                    x.mark('X');

                    var cosh = Expression.cosh(x);

                    var denom = Expression.variable('d');
                    denom.mark('dx');

                    var diff = Expression.derivative(cosh, 1, null, denom);
                    diff.name(Expression.RuleType.Derivation.GeneralFormula30a);

                    return diff;
                },
                GeneralFormula30b: function () {
                    var x = Expression.anything();
                    x.mark('X');

                    var cosh = Expression.sinh(x);
                    cosh.name(Expression.RuleType.Derivation.GeneralFormula30b);

                    return cosh;
                },
                GeneralFormula31a: function () {
                    var x = Expression.anything();
                    x.dependency('up:.derivative', Expression.function.denominator, Expression.Dependency.VariableRelation);
                    x.mark('X');

                    var tanh = Expression.tanh(x);

                    var denom = Expression.variable('d');
                    denom.mark('dx');

                    var diff = Expression.derivative(tanh, 1, null, denom);
                    diff.name(Expression.RuleType.Derivation.GeneralFormula31a);

                    return diff;
                },
                GeneralFormula31b: function () {
                    var x = Expression.anything();
                    x.mark('X');
                    var power = Expression.power(x, 2);

                    var sech = Expression.sech(power);

                    sech.name(Expression.RuleType.Derivation.GeneralFormula31b);

                    return sech;
                },
                GeneralFormula32a: function () {
                    var x = Expression.anything();
                    x.dependency('up:.derivative', Expression.function.denominator, Expression.Dependency.VariableRelation);
                    x.mark('X');

                    var coth = Expression.coth(x);

                    var denom = Expression.variable('d');
                    denom.mark('dx');

                    var diff = Expression.derivative(coth, 1, null, denom);
                    diff.name(Expression.RuleType.Derivation.GeneralFormula32a);

                    return diff;
                },
                GeneralFormula32b: function () {
                    var x = Expression.anything();
                    x.mark('X');

                    var csch = Expression.csch(x);

                    var power = Expression.power(csch, 2);

                    var mul = Expression.multiplication(-1, power);

                    mul.name(Expression.RuleType.Derivation.GeneralFormula32b);

                    return mul;
                },
                GeneralFormula33a: function () {
                    var x = Expression.anything();
                    x.dependency('up:.derivative', Expression.function.denominator, Expression.Dependency.VariableRelation);
                    x.mark('X');

                    var csch = Expression.csch(x);

                    var denom = Expression.variable('d');
                    denom.mark('dx');

                    var diff = Expression.derivative(csch, 1, null, denom);
                    diff.name(Expression.RuleType.Derivation.GeneralFormula33a);

                    return diff;
                },
                GeneralFormula33b: function () {
                    var x = Expression.anything();
                    x.mark('X1');

                    var x2 = Expression.anything();
                    x2.mark('X2');

                    var csch = Expression.csch(x);
                    var coth = Expression.coth(x2);


                    var mul = Expression.multiplication(-1, csch, coth);

                    mul.name(Expression.RuleType.Derivation.GeneralFormula33b);

                    return mul;
                },
                GeneralFormula34a: function () {
                    var x = Expression.anything();
                    x.dependency('up:.derivative', Expression.function.denominator, Expression.Dependency.VariableRelation);
                    x.mark('X');

                    var sech = Expression.sech(x);

                    var denom = Expression.variable('d');
                    denom.mark('dx');

                    var diff = Expression.derivative(sech, 1, null, denom);

                    diff.name(Expression.RuleType.Derivation.GeneralFormula34a);

                    return diff;
                },
                GeneralFormula34b: function () {
                    var x = Expression.anything();
                    x.mark('X1');

                    var x2 = Expression.anything();
                    x2.mark('X2');

                    var sech = Expression.sech(x);
                    var tanh = Expression.tanh(x2);


                    var mul = Expression.multiplication(-1, sech, tanh);

                    mul.name(Expression.RuleType.Derivation.GeneralFormula34b);

                    return mul;
                },
                GeneralFormula35a: function () {
                    var x = Expression.anything();
                    x.dependency('up:.derivative', Expression.function.denominator, Expression.Dependency.VariableRelation);
                    x.mark('X');

                    var sin = Expression.sinh(x);

                    var denom = Expression.variable('d');
                    denom.mark('dx');
                    var power = Expression.power(sin, -1);

                    var diff = Expression.derivative(power, 1, null, denom);

                    diff.name(Expression.RuleType.Derivation.GeneralFormula35a);

                    return diff;
                },
                GeneralFormula35b: function () {
                    var x = Expression.anything();
                    x.mark('X');

                    var x2 = Expression.power(x, 2);

                    var addition = Expression.addition(1, x2);

                    var sqrt = Expression.sqrt(addition);

                    var division = Expression.division(1, sqrt);

                    division.name(Expression.RuleType.Derivation.GeneralFormula35b);

                    return division;
                },
                GeneralFormula36a: function () {
                    var x = Expression.anything();
                    x.dependency('up:.derivative', Expression.function.denominator, Expression.Dependency.VariableRelation);
                    x.mark('X');

                    var cos = Expression.cosh(x);

                    var denom = Expression.variable('d');
                    denom.mark('dx');

                    var power = Expression.power(cos, -1);

                    var diff = Expression.derivative(power, 1, null, denom);
                    diff.name(Expression.RuleType.Derivation.GeneralFormula36a);

                    return diff;
                },
                GeneralFormula36b: function () {
                    var x = Expression.anything();
                    x.mark('X');

                    var x2 = Expression.power(x, 2);

                    var sub = Expression.subtraction(x2, 1);

                    var sqrt = Expression.sqrt(sub);

                    var division = Expression.division(1, sqrt);

                    division.name(Expression.RuleType.Derivation.GeneralFormula36b);

                    return division;
                },
                GeneralFormula37a: function () {
                    var x = Expression.anything();
                    x.dependency('up:.derivative', Expression.function.denominator, Expression.Dependency.VariableRelation);
                    x.mark('X');

                    var tanh = Expression.tanh(x);

                    var denom = Expression.variable('d');
                    denom.mark('dx');

                    var power = Expression.power(tanh, -1);

                    var diff = Expression.derivative(power, 1, null, denom);
                    diff.name(Expression.RuleType.Derivation.GeneralFormula37a);

                    return diff;
                },
                GeneralFormula37b: function () {
                    var x = Expression.anything();
                    x.mark('X');

                    var x2 = Expression.power(x, 2);

                    var subtraction = Expression.subtraction(1, x2);


                    var division = Expression.division(1, subtraction);

                    division.name(Expression.RuleType.Derivation.GeneralFormula37b);

                    return division;
                },
                GeneralFormula38a: function () {
                    var x = Expression.anything();
                    x.dependency('up:.derivative', Expression.function.denominator, Expression.Dependency.VariableRelation);
                    x.mark('X');

                    var coth = Expression.coth(x);

                    var denom = Expression.variable('d');
                    denom.mark('dx');

                    var power = Expression.power(coth, -1);

                    var diff = Expression.derivative(power, 1, null, denom);
                    diff.name(Expression.RuleType.Derivation.GeneralFormula38a);

                    return diff;
                },
                GeneralFormula38b: function () {
                    var x = Expression.anything();
                    x.mark('X');

                    var x2 = Expression.power(x, 2);

                    var subtraction = Expression.subtraction(1, x2);


                    var division = Expression.division(1, subtraction);
                    division.name(Expression.RuleType.Derivation.GeneralFormula38b);

                    return division;
                },
                GeneralFormula39a: function () {
                    var x = Expression.anything();
                    x.dependency('up:.derivative', Expression.function.denominator, Expression.Dependency.VariableRelation);
                    x.mark('X');

                    var csch = Expression.csch(x);

                    var denom = Expression.variable('d');
                    denom.mark('dx');

                    var power = Expression.power(csch, -1);

                    var diff = Expression.derivative(power, 1, null, denom);
                    diff.name(Expression.RuleType.Derivation.GeneralFormula39a);

                    return diff;
                },
                GeneralFormula39b: function () {
                    var x = Expression.anything();
                    x.mark('X1');

                    var x1 = Expression.anything();
                    x1.mark('X2');
                    var abs = Expression.abs(x1);

                    var x2 = Expression.power(x, 2);

                    var addition = Expression.addition(x2, 1);

                    var sqrt = Expression.sqrt(addition);

                    var multiply = Expression.multiplication(abs, sqrt);

                    var division = Expression.division(1, multiply);

                    var mul = Expression.multiplication(-1, division);

                    mul.name(Expression.RuleType.Derivation.GeneralFormula39b);

                    return mul;
                },
                GeneralFormula40a: function () {
                    var x = Expression.anything();
                    x.dependency('up:.derivative', Expression.function.denominator, Expression.Dependency.VariableRelation);
                    x.mark('X');

                    var sec = Expression.sech(x);

                    var denom = Expression.variable('d');
                    denom.mark('dx');

                    var power = Expression.power(sec, -1);

                    var diff = Expression.derivative(power, 1, null, denom);
                    diff.name(Expression.RuleType.Derivation.GeneralFormula40a);

                    return diff;
                },
                GeneralFormula40b: function () {
                    var x = Expression.anything();
                    x.mark('X1');

                    var x1 = Expression.anything();
                    x1.mark('X2');

                    var x2 = Expression.power(x, 2);

                    var subtraction = Expression.subtraction(1, x2);

                    var sqrt = Expression.sqrt(subtraction);

                    var multiply = Expression.multiplication(x1, sqrt);

                    var division = Expression.division(1, multiply);

                    var mul = Expression.multiplication(-1, division);


                    mul.name(Expression.RuleType.Derivation.GeneralFormula40b);

                    return mul;
                }
            },
            Integration: {
                IntegralConstMultiply: function () {
                    var c = Expression.anything();
                    c.dependency('up:.integral', 'respectTo', Expression.Dependency.ConstRelation);
                    c.mark('C');

                    var a = Expression.anything();
                    a.dependency('up:.integral', 'respectTo', Expression.Dependency.VariableRelation);
                    a.mark('A');

                    var mul = Expression.multiplication(c, a);
                    mul.repeat = {
                        requires: [Expression.function.input]
                    };

                    var expression = Expression.integral(mul, 'x');
                    expression.mark('I');

                    expression.name(Expression.RuleType.IntegralConstMultiply);

                    return expression;
                },
                MultiplyIntegralofFx: function () {
                    var c = Expression.anything('#C');
                    c.dependency('sibling', '', Expression.Dependency.SiblingIndependence);
                    c.mark('C');

                    var a = Expression.anything();
                    a.dependency('up:.integral', 'respectTo', Expression.Dependency.VariableRelation);
                    a.mark('A');

                    var I = Expression.integral(a, 'x');
                    I.mark('I');

                    var expression = Expression.multiplication(c, I);
                    expression.repeat = {
                        requires: [Expression.function.input]
                    };

                    expression.name(Expression.RuleType.MultiplyIntegralofFx);

                    return expression;
                },
                IntegralConst: function () {
                    var c = Expression.anything();
                    c.mark('C');
                    c.dependency('up:.integral', 'respectTo', Expression.Dependency.ConstRelation);

                    var dx = Expression.variable('x');
                    dx.mark('dx');
                    var expression = Expression.integral(c, dx);
                    expression.mark('I');
                    expression.name(Expression.RuleType.IntegralConst);
                    return expression;
                },
                AxPlusC: function () {
                    var a = Expression.anything('A');
                    a.mark('A');

                    a.dependency('sibling', '', Expression.Dependency.SiblingIndependence);

                    var x = Expression.variable('x');
                    x.mark('x');

                    var c = Expression.variable('#C');
                    c.mark('C');

                    var expression = Expression.addition(Expression.multiplication(a, x), c);

                    expression.name(Expression.RuleType.AxPlusC);

                    return expression;
                },
                Power: function () {
                    var n = Expression.variable('n');
                    n.mark('n');
                    var x = Expression.variable('x');
                    x.mark('x');

                    var power = Expression.power(x, n);
                    x.dependency('up:.integral', 'respectTo', Expression.Dependency.VariableRelation);
                    n.dependency('up:.integral', 'respectTo', Expression.Dependency.ConstRelation);

                    var expression = Expression.integral(power, 'x');
                    expression.mark('I');

                    expression.name(Expression.RuleType.Power);

                    return expression
                },
                PowerIntegrate: function () {
                    var n = Expression.variable('n');
                    n.mark('n_pre');
                    var n2 = Expression.variable('n');
                    n2.mark('n_post');
                    var x = Expression.variable('x');
                    x.mark('x');
                    x.dependency('sibling', '', Expression.Dependency.SiblingIndependence);

                    var c = Expression.variable('C');
                    c.mark('C');

                    var exp = Expression.addition(Expression.multiplication(
                                    Expression.fraction(
                                        Expression.variable(1),
                                        Expression.addition(
                                            n,
                                            Expression.variable(1)
                                        )
                                    ),
                    Expression.power(
                        x,
                        Expression.addition(n2, Expression.variable(1)))), c);

                    exp.name(Expression.RuleType.PowerIntegrate);

                    return exp;
                },
                IntegrationAddition: function () {
                    var func = Expression.func('f', 'x');
                    func.mark('f');
                    func.dependency('up:.integral', 'respectTo', Expression.Dependency.VariableRelation);

                    var addition = Expression.addition(func);
                    addition.mark('A');
                    addition.repeat = true;
                    var dx = Expression.variable('x');
                    dx.mark('dx');
                    var integral = Expression.integral(addition, dx);
                    integral.mark('I');
                    integral.name(Expression.RuleType.IntegrationAddition);
                    return integral;
                },
                AdditionIntegral: function () {
                    var func = Expression.func('f', 'x');
                    func.mark('f');
                    func.dependency('up:.integral', 'respectTo', Expression.Dependency.VariableRelation);

                    var dx = Expression.variable('x');
                    dx.mark('dx');
                    var integral = Expression.integral(func, dx);
                    integral.mark('I');
                    var addition = Expression.addition(integral);
                    addition.repeat = true;
                    addition.mark('A');
                    addition.name(Expression.RuleType.AdditionIntegral);
                    return addition;
                },
                IntegrationByParts: function () {
                    var dv = Expression.variable('v');
                    dv.mark('dv');
                    var du = Expression.variable('u');
                    du.mark('du');
                    var Fx = Expression.func('f', du);
                    Fx.dependency('up:.integral', 'respectTo', Expression.Dependency.ConstRelation);
                    var integral = Expression.integral(Fx, dv);
                    integral.name(Expression.RuleType.IntegrationByParts);
                    return integral;
                },
                IntegrationByPartsComplete: function () {
                    var u1 = Expression.variable('u');
                    u1.mark('u_1');
                    var f = Expression.func('f', u1);

                    var v1 = Expression.variable('v');
                    v1.mark('v_1');
                    var g = Expression.func('g', v1);
                    f.dependency('sibling', '', Expression.Dependency.SiblingDependence);
                    g.dependency('sibling', '', Expression.Dependency.SiblingDependence);

                    var mul = Expression.multiplication(f, g);

                    var v2 = Expression.variable('v');
                    v2.mark('v_2');
                    var g2 = Expression.func('g', v2);
                    g2.dependency('up:.integral', 'respectTo', Expression.Dependency.VariableRelation);

                    var du = Expression.variable('u');
                    du.mark('u_2');
                    var integral = Expression.integral(g2, du);

                    var subtraction = Expression.subtraction(mul, integral);

                    subtraction.name(Expression.RuleType.IntegrationByPartsComplete);

                    return subtraction;
                },
                Fudx: function () {
                    var udx = Expression.variable('x');
                    udx.mark('u_dx');

                    var u = Expression.func('u', udx);
                    u.mark('u');

                    var dx = Expression.variable('x');
                    dx.mark('dx');

                    var fu = Expression.func('f', u);

                    var integral = Expression.integral(fu, dx);
                    integral.mark('I');

                    integral.name(Expression.RuleType.Fudx);

                    return integral;
                },
                FuOveruprimedx: function () {
                    var du3 = Expression.variable('u');
                    du3.mark('du3');

                    var FuPrime = Expression.derivative('f', 1, du3);

                    var du2 = Expression.variable('u');
                    du2.mark('du2');

                    var Fu = Expression.func('f', du2);

                    var du = Expression.variable('u');
                    du.mark('du');

                    var fraction = Expression.fraction(Fu, FuPrime);

                    var integral = Expression.integral(fraction, du);
                    integral.name(Expression.RuleType.FuOveruprimedx);
                    return integral;
                },
                OneOverX: function () {

                    var x = Expression.variable('x');
                    x.mark('x');
                    x.dependency('up:.integral', 'respectTo', Expression.Dependency.VariableRelation);

                    var one = Expression.variable('1');

                    var fraction = Expression.fraction(one, x);

                    var dx = Expression.variable('x');

                    var integral = Expression.integral(fraction, dx);

                    integral.name(Expression.RuleType.OneOverX);

                    return integral;
                },
                NaturalLogAbsX: function () {

                    var x = Expression.variable('x');
                    x.mark('x');

                    var abs = Expression.abs(x);

                    var ln = Expression.ln(abs);
                    ln.dependency('sibling', '', Expression.Dependency.SiblingIndependence);

                    var c = Expression.variable('c');

                    var addition = Expression.addition(ln, c);

                    addition.name(Expression.RuleType.NaturalLogAbsX);

                    return addition;
                },
                GeneralFormula8A: function () {
                    var a = Expression.variable('a');
                    a.mark('a');

                    var x = Expression.variable('x');
                    x.mark('x');

                    var x2 = Expression.power(x, 2);

                    var a2 = Expression.power(a, 2);

                    var denominator = Expression.addition(x2, a2);
                    x2.dependency('sibling', '', Expression.Dependency.SiblingIndependence);
                    x2.dependency('parent.parent.parent', 'respectTo', Expression.Dependency.VariableRelation);

                    var one = Expression.variable('1');

                    var f = Expression.fraction(one, denominator);

                    var dx = Expression.variable('x');

                    var integral = Expression.integral(f, dx);
                    integral.name(Expression.RuleType.GeneralFormula8A);


                    return integral;
                },
                GeneralFormula8B: function () {

                    var xtan = Expression.variable('x');
                    xtan.mark('x');

                    var atan = Expression.variable('a');
                    atan.mark('a_tan');

                    xtan.dependency('sibling', '', Expression.Dependency.SiblingIndependence);

                    var tanexp = Expression.fraction(xtan, atan);

                    var tanInv = Expression.tan(tanexp, -1);

                    var denominator = Expression.variable('a');
                    denominator.mark('a');

                    var numerator = Expression.variable('1');

                    var fraction = Expression.fraction(numerator, denominator);

                    var c = Expression.variable('c');

                    var f = Expression.multiplication(fraction, tanInv);

                    var addition = Expression.addition(f, c);
                    addition.name(Expression.RuleType.GeneralFormula8B);

                    return addition;
                },
                /**
                 * http://myhandbook.info/form_integ.html
                 * General Formula 8 a
                 * @return {MEPH.math.Expression}
                 **/
                GeneralFormula9A: function () {
                    var a = Expression.variable('a');
                    a.mark('a');

                    var x = Expression.variable('x');
                    x.mark('x');

                    var a2 = Expression.power(a, 2);
                    var x2 = Expression.power(x, 2);
                    x2.dependency('sibling', '', Expression.Dependency.SiblingIndependence);
                    x2.dependency('parent.parent.parent', 'respectTo', Expression.Dependency.VariableRelation);

                    var denominator = Expression.subtraction(x2, a2);

                    var numerator = Expression.variable('1');
                    var dx = Expression.variable('x');
                    var f = Expression.fraction(numerator, denominator);

                    var integral = Expression.integral(f, dx);
                    integral.name(Expression.RuleType.GeneralFormula9A);

                    return integral;
                },
                /**
                 * http://myhandbook.info/form_integ.html
                 * General Formula 8 b
                 * @return {MEPH.math.Expression}
                 **/
                GeneralFormula9B: function () {
                    var a2 = Expression.variable('a');
                    a2.mark('a2');

                    var x2 = Expression.variable('x');
                    x2.mark('x2');

                    x2.dependency('sibling', '', Expression.Dependency.SiblingIndependence);

                    var denominator = Expression.addition(x2, a2);

                    var a1 = Expression.variable('a');
                    a1.mark('a1');

                    var x1 = Expression.variable('x');
                    x1.mark('x1');

                    x1.dependency('sibling', '', Expression.Dependency.SiblingIndependence);

                    var numerator = Expression.subtraction(x1, a1);
                    var frac = Expression.fraction(numerator, denominator);

                    numerator.dependency('sibling', '', Expression.Dependency.SiblingDependence);

                    var abs = Expression.abs(frac);

                    var ln = Expression.ln(abs);

                    var two = Expression.variable('2');

                    var a3 = Expression.variable('a');
                    a3.mark('a3');
                    var denom = Expression.multiplication(two, a3);

                    var num = Expression.variable('1');

                    var fraction = Expression.fraction(num, denom);

                    var f = Expression.multiplication(fraction, ln);

                    var c = Expression.variable('c');

                    var addition = Expression.addition(f, c);

                    addition.name(Expression.RuleType.GeneralFormula9B);

                    return addition;
                },
                /**
                 * http://myhandbook.info/form_integ.html
                 * Trigonometric Formula 10 a
                 * @return {MEPH.math.Expression}
                 **/
                TrigonometricFormula10A: function () {
                    var dx = Expression.variable('x');
                    dx.mark('dx');

                    var x = Expression.variable('x');

                    x.mark('x');

                    var sin = Expression.sin(x);

                    var integral = Expression.integral(sin, dx);

                    integral.name(Expression.RuleType.TrigonometricFormula10A);

                    return integral;
                },
                /**
                 * http://myhandbook.info/form_integ.html
                 * Trigonometric Formula 10 b
                 * @return {MEPH.math.Expression}
                 **/
                TrigonometricFormula10B: function () {
                    var c = Expression.variable('c');

                    var x = Expression.variable('x');
                    x.mark('x');

                    var cosine = Expression.cos(x);

                    var neg1 = Expression.multiplication(-1, cosine);


                    var addition = Expression.addition(neg1, c);

                    addition.name(Expression.RuleType.TrigonometricFormula10B);

                    return addition;
                },
                /**
                 * http://myhandbook.info/form_integ.html
                 * Trigonometric Formula 10 a
                 * @return {MEPH.math.Expression}
                 **/
                TrigonometricFormula11A: function () {
                    var dx = Expression.variable('x');
                    dx.mark('dx');

                    var x = Expression.variable('x');

                    x.mark('x');

                    var cos = Expression.cos(x);

                    var integral = Expression.integral(cos, dx);

                    integral.name(Expression.RuleType.TrigonometricFormula11A);

                    return integral;
                },
                /**
                 * http://myhandbook.info/form_integ.html
                 * Trigonometric Formula 10 b
                 * @return {MEPH.math.Expression}
                 **/
                TrigonometricFormula11B: function () {
                    var c = Expression.variable('c');

                    var x = Expression.variable('x');
                    x.mark('x');

                    var sin = Expression.sin(x);

                    var addition = Expression.addition(sin, c);

                    addition.name(Expression.RuleType.TrigonometricFormula11B);

                    return addition;
                },
                IGeneralFormula12a: function () {

                    var x = Expression.anything();
                    x.dependency('up:.integral', Expression.function.respectTo, Expression.Dependency.VariableRelation);
                    x.mark('X');

                    var tan = Expression.tan(x);

                    var dx = Expression.variable('x');
                    dx.mark('dx');

                    var integral = Expression.integral(tan, dx);

                    integral.name(Expression.RuleType.Integration.IGeneralFormula12a);

                    return integral;
                },
                IGeneralFormula12b: function () {
                    var x = Expression.anything();
                    x.mark('X');

                    var sec = Expression.sec(x);

                    var abs = Expression.abs(sec);

                    var ln = Expression.ln(abs);

                    var c = Expression.variable('c');

                    var addition = Expression.addition(ln, c);
                    addition.name(Expression.RuleType.Integration.IGeneralFormula12b);

                    return addition;
                },
                IGeneralFormula13a: function () {

                    var x = Expression.anything();
                    x.dependency('up:.integral', Expression.function.respectTo, Expression.Dependency.VariableRelation);
                    x.mark('X');

                    var cot = Expression.cot(x);

                    var dx = Expression.variable('x');
                    dx.mark('dx');

                    var integral = Expression.integral(cot, dx);

                    integral.name(Expression.RuleType.Integration.IGeneralFormula13a);

                    return integral;
                },
                IGeneralFormula13b: function () {
                    var x = Expression.anything();
                    x.mark('X');

                    var sin = Expression.sin(x);

                    var abs = Expression.abs(sin);

                    var ln = Expression.ln(abs);

                    var c = Expression.variable('c');

                    var addition = Expression.addition(ln, c);
                    addition.name(Expression.RuleType.Integration.IGeneralFormula13b);

                    return addition;
                },
                IGeneralFormula14a: function () {

                    var x = Expression.anything();
                    x.dependency('up:.integral', Expression.function.respectTo, Expression.Dependency.VariableRelation);
                    x.mark('X');

                    var sec = Expression.sec(x);
                    var power = Expression.power(sec, 2);
                    var dx = Expression.variable('x');
                    dx.mark('dx');

                    var integral = Expression.integral(power, dx);

                    integral.name(Expression.RuleType.Integration.IGeneralFormula14a);

                    return integral;
                },
                IGeneralFormula14b: function () {
                    var x = Expression.anything();
                    x.mark('X');

                    var tan = Expression.tan(x);

                    var c = Expression.variable('c');

                    var addition = Expression.addition(tan, c);
                    addition.name(Expression.RuleType.Integration.IGeneralFormula14b);

                    return addition;
                },
                IGeneralFormula15a: function () {

                    var x = Expression.anything();
                    x.dependency('up:.integral', Expression.function.respectTo, Expression.Dependency.VariableRelation);
                    x.mark('X');

                    var csc = Expression.csc(x);
                    var power = Expression.power(csc, 2);
                    var dx = Expression.variable('x');
                    dx.mark('dx');

                    var integral = Expression.integral(power, dx);

                    integral.name(Expression.RuleType.Integration.IGeneralFormula15a);

                    return integral;
                },
                IGeneralFormula15b: function () {
                    var x = Expression.anything();
                    x.mark('X');

                    var cot = Expression.cot(x);

                    var c = Expression.variable('c');

                    var mul = Expression.multiplication(-1, cot);

                    var addition = Expression.addition(mul, c);

                    addition.name(Expression.RuleType.Integration.IGeneralFormula15b);

                    return addition;
                },
                IGeneralFormula16a: function () {

                    var x = Expression.anything();
                    x.dependency('up:.integral', Expression.function.respectTo, Expression.Dependency.VariableRelation);
                    x.mark('X');

                    var tan = Expression.tan(x);
                    var power = Expression.power(tan, 2);
                    var dx = Expression.variable('x');
                    dx.mark('dx');

                    var integral = Expression.integral(power, dx);

                    integral.name(Expression.RuleType.Integration.IGeneralFormula16a);

                    return integral;
                },
                IGeneralFormula16b: function () {
                    var x = Expression.anything();
                    x.mark('X1');

                    var x2 = Expression.anything();
                    x2.mark('X2');

                    var tan = Expression.tan(x);

                    var c = Expression.variable('c');

                    var mul = Expression.multiplication(-1, x2);

                    var addition = Expression.addition(tan, mul, c);

                    addition.name(Expression.RuleType.Integration.IGeneralFormula16b);

                    return addition;
                },
                IGeneralFormula17a: function () {

                    var x = Expression.anything();
                    x.dependency('up:.integral', Expression.function.respectTo, Expression.Dependency.VariableRelation);
                    x.mark('X');

                    var cot = Expression.cot(x);
                    var power = Expression.power(cot, 2);
                    var dx = Expression.variable('x');
                    dx.mark('dx');

                    var integral = Expression.integral(power, dx);

                    integral.name(Expression.RuleType.Integration.IGeneralFormula17a);

                    return integral;
                },
                IGeneralFormula17b: function () {
                    var x = Expression.anything();
                    x.mark('X1');

                    var x2 = Expression.anything();
                    x2.mark('X2');

                    var cot = Expression.cot(x);

                    var c = Expression.variable('c');

                    var mul = Expression.multiplication(-1, x2);

                    var addition = Expression.addition(cot, mul, c);

                    addition.name(Expression.RuleType.Integration.IGeneralFormula17b);

                    return addition;
                },
                IGeneralFormula18a: function () {

                    var x = Expression.anything();
                    x.dependency('up:.integral', Expression.function.respectTo, Expression.Dependency.VariableRelation);
                    x.mark('X1');

                    var x2 = Expression.anything();
                    x2.dependency('up:.integral', Expression.function.respectTo, Expression.Dependency.VariableRelation);
                    x2.mark('X2');

                    var sec = Expression.sec(x);
                    var tan = Expression.tan(x2);
                    var multiplication = Expression.multiplication(sec, tan);

                    var dx = Expression.variable('x');
                    dx.mark('dx');

                    var integral = Expression.integral(multiplication, dx);

                    integral.name(Expression.RuleType.Integration.IGeneralFormula18a);
                    integral.dependency('stay:', '', function (e, s) {
                        return Expression.Dependency.Matches(['X2', 'X1'], e, s);
                    }, true);

                    return integral;
                },
                IGeneralFormula18b: function () {
                    var x = Expression.anything();
                    x.mark('X');

                    var sec = Expression.sec(x);

                    var c = Expression.variable('c');

                    var addition = Expression.addition(sec, c);

                    addition.name(Expression.RuleType.Integration.IGeneralFormula18b);

                    return addition;
                },
                IGeneralFormula19a: function () {

                    var x = Expression.anything();
                    x.dependency('up:.integral', Expression.function.respectTo, Expression.Dependency.VariableRelation);
                    x.mark('X1');

                    var x2 = Expression.anything();
                    x2.dependency('up:.integral', Expression.function.respectTo, Expression.Dependency.VariableRelation);
                    x2.mark('X2');

                    var csc = Expression.csc(x);
                    var cot = Expression.cot(x2);
                    var multiplication = Expression.multiplication(csc, cot);

                    var dx = Expression.variable('x');
                    dx.mark('dx');

                    var integral = Expression.integral(multiplication, dx);

                    integral.name(Expression.RuleType.Integration.IGeneralFormula19a);
                    integral.dependency('stay:', '', function (e, s) {
                        return Expression.Dependency.Matches(['X2', 'X1'], e, s);
                    }, true);

                    return integral;
                },
                IGeneralFormula19b: function () {
                    var x = Expression.anything();
                    x.mark('X');

                    var csc = Expression.csc(x);

                    var c = Expression.variable('c');

                    var mul = Expression.multiplication(-1, csc);

                    var addition = Expression.addition(mul, c);

                    addition.name(Expression.RuleType.Integration.IGeneralFormula19b);

                    return addition;
                },
                IGeneralFormula20a: function () {

                    var x = Expression.anything();
                    x.dependency('up:.integral', Expression.function.respectTo, Expression.Dependency.VariableRelation);
                    x.mark('X');

                    var sec = Expression.sec(x);

                    var dx = Expression.variable('x');
                    dx.mark('dx');

                    var integral = Expression.integral(sec, dx);

                    integral.name(Expression.RuleType.Integration.IGeneralFormula20a);

                    return integral;
                },
                IGeneralFormula20b: function () {
                    var x1 = Expression.anything();
                    x1.mark('X1');

                    var x2 = Expression.anything();
                    x2.mark('X2');

                    var c = Expression.variable('c');

                    var sec = Expression.sec(x1);

                    var tan = Expression.tan(x2);

                    var abs = Expression.abs(Expression.addition(sec, tan));

                    var ln = Expression.ln(abs);

                    var addition = Expression.addition(ln, c);

                    addition.name(Expression.RuleType.Integration.IGeneralFormula20b);

                    return addition;
                },
                IGeneralFormula21a: function () {

                    var x = Expression.anything();
                    x.dependency('up:.integral', Expression.function.respectTo, Expression.Dependency.VariableRelation);
                    x.mark('X');

                    var csc = Expression.csc(x);

                    var dx = Expression.variable('x');
                    dx.mark('dx');

                    var integral = Expression.integral(csc, dx);

                    integral.name(Expression.RuleType.Integration.IGeneralFormula21a);

                    return integral;
                },
                IGeneralFormula21b: function () {
                    var x1 = Expression.anything();
                    x1.mark('X1');

                    var x2 = Expression.anything();
                    x2.mark('X2');

                    var c = Expression.variable('c');

                    var csc = Expression.csc(x1);

                    var cot = Expression.cot(x2);

                    var abs = Expression.abs(Expression.subtraction(csc, cot));

                    var ln = Expression.ln(abs);

                    var addition = Expression.addition(ln, c);

                    addition.name(Expression.RuleType.Integration.IGeneralFormula21b);

                    return addition;
                },
                IGeneralFormula24a: function () {

                    var x = Expression.anything();
                    x.dependency('up:.integral', Expression.function.respectTo, Expression.Dependency.VariableRelation);
                    x.mark('X');

                    var po2 = Expression.anything();
                    po2.dependency('up:.integral', Expression.function.respectTo, Expression.Dependency.ConstRelation);
                    po2.mark('N');

                    var sin = Expression.sin(x);
                    var power = Expression.power(sin, po2);

                    var dx = Expression.variable('x');
                    dx.mark('dx');

                    var integral = Expression.integral(power, dx);

                    integral.name(Expression.RuleType.Integration.IGeneralFormula24a);

                    return integral;
                },
                IGeneralFormula24b: function () {
                    var x = Expression.anything();
                    x.mark('X1');

                    var n2 = Expression.anything();
                    n2.mark('N2');

                    var x2 = Expression.anything();
                    x2.mark('X2');

                    var cos = Expression.cos(x2);

                    var sub = Expression.subtraction(n2, 1);

                    var sin = Expression.sin(x);

                    var power = Expression.power(sin, sub);

                    var n1 = Expression.anything();
                    n1.mark('N1');

                    var frac1 = Expression.division(Expression.variable(1), n1);

                    var part1 = Expression.multiplication(-1, frac1, power, cos);

                    var n3 = Expression.anything();
                    n3.mark('N3');

                    var sub2 = Expression.subtraction(n3, 1);

                    var n4 = Expression.anything();
                    n4.mark('N4');

                    var frac2 = Expression.division(sub2, n4);

                    var x3 = Expression.anything();
                    x3.mark('X3');

                    var n5 = Expression.anything();
                    n5.mark('N5');

                    var sinint = Expression.sin(x3);
                    var po3 = Expression.subtraction(n5, 2);
                    var powersin = Expression.power(sinint, po3);

                    var dx = Expression.variable('x');
                    dx.mark('dx');

                    var integral = Expression.integral(sinint, dx);


                    var part2 = Expression.multiplication(frac2, integral);

                    var addition = Expression.addition(part1, part2);
                    addition.name(Expression.RuleType.Integration.IGeneralFormula24b);
                    return addition;
                },
                IGeneralFormula25a: function () {

                    var x = Expression.anything();
                    x.dependency('up:.integral', Expression.function.respectTo, Expression.Dependency.VariableRelation);
                    x.mark('X');

                    var po2 = Expression.anything();
                    po2.dependency('up:.integral', Expression.function.respectTo, Expression.Dependency.ConstRelation);
                    po2.mark('N');

                    var cos = Expression.cos(x);
                    var power = Expression.power(cos, po2);

                    var dx = Expression.variable('x');
                    dx.mark('dx');

                    var integral = Expression.integral(power, dx);

                    integral.name(Expression.RuleType.Integration.IGeneralFormula25a);

                    return integral;
                },
                IGeneralFormula25b: function () {
                    var x = Expression.anything();
                    x.mark('X1');

                    var n2 = Expression.anything();
                    n2.mark('N2');

                    var x2 = Expression.anything();
                    x2.mark('X2');

                    var sin = Expression.sin(x2);

                    var sub = Expression.subtraction(n2, 1);

                    var cos = Expression.cos(x);

                    var power = Expression.power(cos, sub);

                    var n1 = Expression.anything();
                    n1.mark('N1');

                    var frac1 = Expression.division(Expression.variable(1), n1);

                    var part1 = Expression.multiplication(frac1, power, sin);

                    var n3 = Expression.anything();
                    n3.mark('N3');

                    var sub2 = Expression.subtraction(n3, 1);

                    var n4 = Expression.anything();
                    n4.mark('N4');

                    var frac2 = Expression.division(sub2, n4);

                    var x3 = Expression.anything();
                    x3.mark('X3');

                    var n5 = Expression.anything();
                    n5.mark('N5');

                    var cosint = Expression.cos(x3);
                    var po3 = Expression.subtraction(n5, 2);
                    var powersin = Expression.power(cosint, po3);

                    var dx = Expression.variable('x');
                    dx.mark('dx');

                    var integral = Expression.integral(cosint, dx);


                    var part2 = Expression.multiplication(frac2, integral);

                    var addition = Expression.addition(part1, part2);
                    addition.name(Expression.RuleType.Integration.IGeneralFormula25b);
                    return addition;
                },
                IGeneralFormula26a: function () {
                    var dx = Expression.variable('x');
                    dx.mark('dx');

                    var x = Expression.anything('x');
                    x.dependency('up:.integral', Expression.function.respectTo, Expression.Dependency.VariableRelation);
                    x.mark('X');

                    var sinh = Expression.sinh(x);

                    var integral = Expression.integral(sinh, dx);

                    integral.name(Expression.RuleType.Integration.IGeneralFormula26a);

                    return integral;
                },
                IGeneralFormula26b: function () {
                    var c = Expression.variable('c');

                    var x = Expression.anything('x');
                    x.mark('X');

                    var cosh = Expression.cosh(x);

                    var addition = Expression.addition(cosh, c);

                    addition.name(Expression.RuleType.Integration.IGeneralFormula26b);

                    return addition;
                },
                IGeneralFormula27a: function () {
                    var dx = Expression.variable('x');
                    dx.mark('dx');

                    var x = Expression.anything('x');
                    x.dependency('up:.integral', Expression.function.respectTo, Expression.Dependency.VariableRelation);
                    x.mark('X');

                    var cosh = Expression.cosh(x);

                    var integral = Expression.integral(cosh, dx);

                    integral.name(Expression.RuleType.Integration.IGeneralFormula27a);

                    return integral;
                },
                IGeneralFormula27b: function () {
                    var c = Expression.variable('c');

                    var x = Expression.anything('x');
                    x.mark('X');

                    var sinh = Expression.sinh(x);

                    var addition = Expression.addition(sinh, c);

                    addition.name(Expression.RuleType.Integration.IGeneralFormula27b);

                    return addition;
                },
                IGeneralFormula28a: function () {
                    var dx = Expression.variable('x');
                    dx.mark('dx');

                    var x = Expression.anything('x');
                    x.dependency('up:.integral', Expression.function.respectTo, Expression.Dependency.VariableRelation);
                    x.mark('X');

                    var tanh = Expression.tanh(x);

                    var integral = Expression.integral(tanh, dx);

                    integral.name(Expression.RuleType.Integration.IGeneralFormula28a);

                    return integral;
                },
                IGeneralFormula28b: function () {
                    var c = Expression.variable('c');

                    var x = Expression.anything('x');
                    x.mark('X');

                    var cosh = Expression.cosh(x);

                    var ln = Expression.ln(cosh);

                    var addition = Expression.addition(ln, c);

                    addition.name(Expression.RuleType.Integration.IGeneralFormula28b);

                    return addition;
                },
                IGeneralFormula29a: function () {
                    var dx = Expression.variable('x');
                    dx.mark('dx');

                    var x = Expression.anything('x');
                    x.dependency('up:.integral', Expression.function.respectTo, Expression.Dependency.VariableRelation);
                    x.mark('X');

                    var coth = Expression.coth(x);

                    var integral = Expression.integral(coth, dx);

                    integral.name(Expression.RuleType.Integration.IGeneralFormula29a);

                    return integral;
                },
                IGeneralFormula29b: function () {
                    var c = Expression.variable('c');

                    var x = Expression.anything('x');
                    x.mark('X');

                    var sinh = Expression.sinh(x);

                    var ln = Expression.ln(sinh);

                    var addition = Expression.addition(ln, c);

                    addition.name(Expression.RuleType.Integration.IGeneralFormula29b);

                    return addition;
                },
                IGeneralFormula30a: function () {
                    var dx = Expression.variable('x');
                    dx.mark('dx');

                    var x = Expression.anything('x');
                    x.dependency('up:.integral', Expression.function.respectTo, Expression.Dependency.VariableRelation);
                    x.mark('X');

                    var sech = Expression.sech(x);

                    var integral = Expression.integral(sech, dx);

                    integral.name(Expression.RuleType.Integration.IGeneralFormula30a);

                    return integral;
                },
                IGeneralFormula30b: function () {
                    var c = Expression.variable('c');

                    var x = Expression.anything('x');
                    x.mark('X');

                    var tanh = Expression.tanh(x);

                    var sin = Expression.sin(tanh);

                    var power = Expression.power(sin, -1);

                    var addition = Expression.addition(power, c);

                    addition.name(Expression.RuleType.Integration.IGeneralFormula30b);

                    return addition;
                },
                IGeneralFormula31a: function () {
                    var dx = Expression.variable('x');
                    dx.mark('dx');

                    var x = Expression.anything('x');
                    x.dependency('up:.integral', Expression.function.respectTo, Expression.Dependency.VariableRelation);
                    x.mark('X');

                    var csch = Expression.csch(x);

                    var integral = Expression.integral(csch, dx);

                    integral.name(Expression.RuleType.Integration.IGeneralFormula31a);

                    return integral;
                },
                IGeneralFormula31b: function () {
                    var c = Expression.variable('c');

                    var x = Expression.anything('x');
                    x.mark('X');

                    var div = Expression.division(x, Expression.variable(2));

                    var tanh = Expression.tanh(div);

                    var ln = Expression.ln(tanh);

                    var addition = Expression.addition(ln, c);

                    addition.name(Expression.RuleType.Integration.IGeneralFormula31b);

                    return addition;
                },
                IGeneralFormula32a: function () {
                    var dx = Expression.variable('x');
                    dx.mark('dx');

                    var x = Expression.anything('x');
                    x.dependency('up:.integral', Expression.function.respectTo, Expression.Dependency.VariableRelation);
                    x.mark('X');

                    var sech = Expression.sech(x);

                    var power = Expression.power(sech, 2);

                    var integral = Expression.integral(power, dx);

                    integral.name(Expression.RuleType.Integration.IGeneralFormula32a);

                    return integral;
                },
                IGeneralFormula32b: function () {
                    var c = Expression.variable('c');

                    var x = Expression.anything('x');
                    x.mark('X');


                    var tanh = Expression.tanh(x);

                    var addition = Expression.addition(tanh, c);

                    addition.name(Expression.RuleType.Integration.IGeneralFormula32b);

                    return addition;
                },
                IGeneralFormula33a: function () {
                    var dx = Expression.variable('x');
                    dx.mark('dx');

                    var x = Expression.anything('x');
                    x.dependency('up:.integral', Expression.function.respectTo, Expression.Dependency.VariableRelation);
                    x.mark('X');

                    var csch = Expression.csch(x);

                    var power = Expression.power(csch, 2);

                    var integral = Expression.integral(power, dx);

                    integral.name(Expression.RuleType.Integration.IGeneralFormula33a);

                    return integral;
                },
                IGeneralFormula33b: function () {
                    var c = Expression.variable('c');

                    var x = Expression.anything('x');
                    x.mark('X');


                    var coth = Expression.coth(x);

                    var mul = Expression.multiplication(-1, coth);

                    var addition = Expression.addition(mul, c);

                    addition.name(Expression.RuleType.Integration.IGeneralFormula33b);

                    return addition;
                },
                IGeneralFormula34a: function () {
                    var dx = Expression.variable('x');
                    dx.mark('dx');

                    var x = Expression.anything('x');
                    x.dependency('up:.integral', Expression.function.respectTo, Expression.Dependency.VariableRelation);
                    x.mark('X');

                    var tanh = Expression.tanh(x);

                    var power = Expression.power(tanh, 2);

                    var integral = Expression.integral(power, dx);

                    integral.name(Expression.RuleType.Integration.IGeneralFormula34a);

                    return integral;
                },
                IGeneralFormula34b: function () {
                    var c = Expression.variable('c');

                    var x = Expression.anything('x');
                    x.mark('X1');

                    var x2 = Expression.anything('x');
                    x2.mark('X2');


                    var tanh = Expression.tanh(x);

                    var mul = Expression.multiplication(-1, tanh);

                    var addition = Expression.addition(x2, mul, c);

                    addition.name(Expression.RuleType.Integration.IGeneralFormula34b);

                    return addition;
                },
                IGeneralFormula35a: function () {
                    var dx = Expression.variable('x');
                    dx.mark('dx');

                    var x = Expression.anything('x');
                    x.dependency('up:.integral', Expression.function.respectTo, Expression.Dependency.VariableRelation);
                    x.mark('X');

                    var coth = Expression.coth(x);

                    var power = Expression.power(coth, 2);

                    var integral = Expression.integral(power, dx);

                    integral.name(Expression.RuleType.Integration.IGeneralFormula35a);

                    return integral;
                },
                IGeneralFormula35b: function () {
                    var c = Expression.variable('c');

                    var x = Expression.anything('x');
                    x.mark('X1');

                    var x2 = Expression.anything('x');
                    x2.mark('X2');


                    var coth = Expression.coth(x);

                    var mul = Expression.multiplication(-1, coth);

                    var addition = Expression.addition(x2, mul, c);

                    addition.name(Expression.RuleType.Integration.IGeneralFormula35b);

                    return addition;
                },
                IGeneralFormula36a: function () {

                    var x = Expression.anything();
                    x.dependency('up:.integral', Expression.function.respectTo, Expression.Dependency.VariableRelation);
                    x.mark('X1');

                    var x2 = Expression.anything();
                    x2.dependency('up:.integral', Expression.function.respectTo, Expression.Dependency.VariableRelation);
                    x2.mark('X2');

                    var sech = Expression.sech(x);
                    var tanh = Expression.tanh(x2);
                    var multiplication = Expression.multiplication(sech, tanh);

                    var dx = Expression.variable('x');
                    dx.mark('dx');

                    var integral = Expression.integral(multiplication, dx);

                    integral.name(Expression.RuleType.Integration.IGeneralFormula36a);
                    integral.dependency('stay:', '', function (e, s) {
                        return Expression.Dependency.Matches(['X2', 'X1'], e, s);
                    }, true);

                    return integral;
                },
                IGeneralFormula36b: function () {
                    var x = Expression.anything();
                    x.mark('X');

                    var sech = Expression.sech(x);

                    var c = Expression.variable('c');
                    var mul = Expression.multiplication(-1, sech);
                    var addition = Expression.addition(mul, c);

                    addition.name(Expression.RuleType.Integration.IGeneralFormula36b);

                    return addition;
                },
                IGeneralFormula37a: function () {

                    var x = Expression.anything();
                    x.dependency('up:.integral', Expression.function.respectTo, Expression.Dependency.VariableRelation);
                    x.mark('X1');

                    var x2 = Expression.anything();
                    x2.dependency('up:.integral', Expression.function.respectTo, Expression.Dependency.VariableRelation);
                    x2.mark('X2');

                    var csch = Expression.csch(x);
                    var coth = Expression.coth(x2);
                    var multiplication = Expression.multiplication(csch, coth);

                    var dx = Expression.variable('x');
                    dx.mark('dx');

                    var integral = Expression.integral(multiplication, dx);

                    integral.name(Expression.RuleType.Integration.IGeneralFormula37a);
                    integral.dependency('stay:', '', function (e, s) {
                        return Expression.Dependency.Matches(['X2', 'X1'], e, s);
                    }, true);

                    return integral;
                },
                IGeneralFormula37b: function () {
                    var x = Expression.anything();
                    x.mark('X');

                    var csch = Expression.csch(x);

                    var c = Expression.variable('c');
                    var mul = Expression.multiplication(-1, csch);
                    var addition = Expression.addition(mul, c);

                    addition.name(Expression.RuleType.Integration.IGeneralFormula37b);

                    return addition;
                },
                IGeneralFormula38a: function () {

                    var x = Expression.anything();
                    x.dependency('up:.integral', Expression.function.respectTo, Expression.Dependency.VariableRelation);
                    x.mark('X');

                    var sinh = Expression.sinh(x);
                    var power = Expression.power(sinh, 2);

                    var dx = Expression.variable('x');
                    dx.mark('dx');

                    var integral = Expression.integral(power, dx);

                    integral.name(Expression.RuleType.Integration.IGeneralFormula38a);

                    return integral;
                },
                IGeneralFormula38b: function () {
                    var x = Expression.anything();
                    x.mark('X1');

                    var x2 = Expression.anything();
                    x2.mark('X2');

                    var sinh = Expression.sinh(Expression.multiplication(2, x));

                    var c = Expression.variable('c');

                    var divi = Expression.division(sinh, 4);
                    var divi2 = Expression.division(x2, 2);
                    var addition = Expression.addition(divi, Expression.multiplication(-1, divi2), c);

                    addition.name(Expression.RuleType.Integration.IGeneralFormula38b);

                    return addition;
                },
                IGeneralFormula39a: function () {

                    var x = Expression.anything();
                    x.dependency('up:.integral', Expression.function.respectTo, Expression.Dependency.VariableRelation);
                    x.mark('X');

                    var cosh = Expression.cosh(x);
                    var power = Expression.power(cosh, 2);

                    var dx = Expression.variable('x');
                    dx.mark('dx');

                    var integral = Expression.integral(power, dx);

                    integral.name(Expression.RuleType.Integration.IGeneralFormula39a);

                    return integral;
                },
                IGeneralFormula39b: function () {
                    var x = Expression.anything();
                    x.mark('X1');

                    var x2 = Expression.anything();
                    x2.mark('X2');

                    var sinh = Expression.sinh(Expression.multiplication(2, x));

                    var c = Expression.variable('c');

                    var divi = Expression.division(sinh, 4);
                    var divi2 = Expression.division(x2, 2);
                    var addition = Expression.addition(divi, divi2, c);

                    addition.name(Expression.RuleType.Integration.IGeneralFormula39b);

                    return addition;
                },
                IGeneralFormula40a: function () {

                    var x = Expression.anything();
                    x.dependency('up:.integral', Expression.function.respectTo, Expression.Dependency.VariableRelation);
                    x.mark('X');

                    var e = Expression.e(x);

                    var dx = Expression.variable('x');
                    dx.mark('dx');

                    var integral = Expression.integral(e, dx);

                    integral.name(Expression.RuleType.Integration.IGeneralFormula40a);

                    return integral;
                },
                IGeneralFormula40b: function () {
                    var x = Expression.anything();
                    x.mark('X');

                    var e = Expression.e(x);

                    var c = Expression.variable('c');

                    var addition = Expression.addition(e, c);

                    addition.name(Expression.RuleType.Integration.IGeneralFormula40b);

                    return addition;
                },
                IGeneralFormula41a: function () {
                    var x = Expression.anything();
                    x.dependency('up:.integral', Expression.function.respectTo, Expression.Dependency.VariableRelation);
                    x.mark('X');

                    var a = Expression.anything();
                    a.dependency('up:.integral', Expression.function.respectTo, Expression.Dependency.ConstRelation);
                    a.mark('A');

                    var a = Expression.power(a, x);

                    var dx = Expression.variable('x');
                    dx.mark('dx');

                    var integral = Expression.integral(a, dx);

                    integral.name(Expression.RuleType.Integration.IGeneralFormula41a);

                    return integral;
                },
                IGeneralFormula41b: function () {
                    var x = Expression.anything();
                    x.mark('X');

                    var a1 = Expression.anything();
                    a1.mark('A1');

                    var a2 = Expression.anything();
                    a2.mark('A2');

                    var power = Expression.power(a1, x);

                    var ln = Expression.ln(a2);

                    var div = Expression.division(power, ln);

                    var c = Expression.variable('c');

                    var addition = Expression.addition(div, c);

                    addition.name(Expression.RuleType.Integration.IGeneralFormula41b);

                    return addition;
                },
                IGeneralFormula42a: function () {
                    var x = Expression.anything();
                    x.dependency('up:.integral', Expression.function.respectTo, Expression.Dependency.VariableRelation);
                    x.mark('X');

                    var dx = Expression.variable('x');
                    dx.mark('dx');

                    var ln = Expression.ln(x);

                    var integral = Expression.integral(ln, dx);

                    integral.name(Expression.RuleType.Integration.IGeneralFormula42a);

                    return integral;
                },
                IGeneralFormula42b: function () {
                    var x = Expression.anything();
                    x.mark('X1');

                    var x2 = Expression.anything();
                    x2.mark('X2');

                    var ln = Expression.ln(x2);

                    var sub = Expression.subtraction(ln, 1);

                    var mul = Expression.multiplication(x, sub);

                    var c = Expression.variable('c');

                    var addition = Expression.addition(mul, c);

                    addition.name(Expression.RuleType.Integration.IGeneralFormula42b);

                    return addition;
                },
                IGeneralFormula43a: function () {
                    var x = Expression.anything();
                    x.dependency('up:.integral', Expression.function.respectTo, Expression.Dependency.VariableRelation);
                    x.mark('X');

                    var a = Expression.anything();
                    a.dependency('up:.integral', Expression.function.respectTo, Expression.Dependency.ConstRelation);
                    a.mark('A');

                    var dx = Expression.variable('x');
                    dx.mark('dx');

                    var log = Expression.log(x, a);

                    var integral = Expression.integral(log, dx);

                    integral.name(Expression.RuleType.Integration.IGeneralFormula43a);

                    return integral;
                },
                IGeneralFormula43b: function () {
                    var x = Expression.anything();
                    x.mark('X1');

                    var x2 = Expression.anything();
                    x2.mark('X2');

                    var a = Expression.anything();
                    a.mark('A');
                    var lnx = Expression.ln(x2);
                    var sub = Expression.subtraction(lnx, 1);
                    var ln = Expression.ln(a);

                    var fract = Expression.division(x, ln);
                    var mul = Expression.multiplication(fract, sub);

                    var c = Expression.variable('c');

                    var addition = Expression.addition(mul, c);

                    addition.name(Expression.RuleType.Integration.IGeneralFormula43b);

                    return addition;
                },
                IGeneralFormula44a: function () {
                    var x = Expression.anything();
                    x.dependency('up:.integral', Expression.function.respectTo, Expression.Dependency.VariableRelation);
                    x.mark('X1');

                    var x2 = Expression.anything();
                    x2.dependency('up:.integral', Expression.function.respectTo, Expression.Dependency.VariableRelation);
                    x2.mark('X2');

                    var a = Expression.anything();
                    a.dependency('up:.integral', Expression.function.respectTo, Expression.Dependency.ConstRelation);
                    a.mark('A');

                    var dx = Expression.variable('x');
                    dx.mark('dx');

                    var eax = Expression.e(Expression.multiplication(a, x));
                    var mul = Expression.multiplication(x2, eax);
                    var integral = Expression.integral(mul, dx);

                    integral.name(Expression.RuleType.Integration.IGeneralFormula44a);
                    integral.dependency('stay:', '', function (e, s) {
                        return Expression.Dependency.Matches(['X2', 'X1'], e, s);
                    }, true);

                    return integral;
                },
                IGeneralFormula44b: function () {
                    var x = Expression.anything();
                    x.mark('X1');

                    var x2 = Expression.anything();
                    x2.mark('X2');

                    var a = Expression.anything();
                    a.mark('A1');

                    var a2 = Expression.anything();
                    a2.mark('A2');

                    var a3 = Expression.anything();
                    a3.mark('A3');

                    var ax = Expression.multiplication(a3, x2);

                    var sub = Expression.subtraction(ax, 1);

                    var c = Expression.variable('c');

                    var eax = Expression.e(a, x);

                    var apo = Expression.power(a2, 2);

                    var frac = Expression.division(eax, apo)

                    var mul = Expression.multiplication(frac, sub);

                    var addition = Expression.addition(mul, c);

                    addition.name(Expression.RuleType.Integration.IGeneralFormula44b);

                    return addition;
                },
                IGeneralFormula45a: function () {

                    var x = Expression.anything('x');
                    x.dependency('up:.integral', Expression.function.respectTo, Expression.Dependency.VariableRelation);
                    x.mark('X2');

                    var a = Expression.anything('A');
                    a.dependency('up:.integral', Expression.function.respectTo, Expression.Dependency.ConstRelation);
                    a.mark('A');

                    var x2 = Expression.anything('x');
                    x2.dependency('up:.integral', Expression.function.respectTo, Expression.Dependency.VariableRelation);
                    x2.mark('X1');
                    var mul = Expression.multiplication(a, x2);

                    var eax = Expression.e(mul);
                    eax.mark('EAX');

                    var div = Expression.division(eax, x);
                    div.mark('PARENT');

                    var dx = Expression.variable('x');
                    dx.mark('X');

                    var integral = Expression.integral(div, dx);

                    integral.name(Expression.RuleType.Integration.IGeneralFormula45a);

                    integral.dependency('stay:', '', function (e, s) {

                        return Expression.Dependency.Matches(['X2', 'X1'], e, s);
                    }, true);

                    integral.dependency('stay:', '', function (e, s) {

                        return Expression.Dependency.OrderRequired(['EAX', 'X2'], 'PARENT', e, s);
                    }, true);

                    return integral;
                },
                IGeneralFormula45b: function () {

                    var i1 = Expression.variable('i');
                    i1.mark('i');

                    var a = Expression.anything();
                    a.mark('A');

                    var x = Expression.anything();
                    x.mark('X1');

                    var mul = Expression.multiplication(a, x);

                    var top = Expression.power(mul, i1);

                    var i2 = Expression.variable('i');
                    i2.mark('i');

                    var i3 = Expression.variable('i');
                    i3.mark('i');

                    var fact = Expression.factorial(i3);

                    var bottom = Expression.multiplication(i2, fact);

                    var division = Expression.division(top, bottom);

                    var summation = Expression.summation(division, 1, Expression.symbols.Infinity, 'i');

                    var x = Expression.variable('x');
                    x.mark('X2');

                    var abs = Expression.abs(x);

                    var ln = Expression.ln(abs);

                    var c = Expression.variable('c');

                    var addition = Expression.addition(ln, summation, c);

                    addition.name(Expression.RuleType.Integration.IGeneralFormula45b);

                    return addition;
                },
                IGeneralFormula47a: function () {

                    var n = Expression.anything();
                    n.dependency('up:.integral', Expression.function.respectTo, Expression.Dependency.ConstRelation);
                    n.mark('N');


                    var x1 = Expression.anything('asdfx');
                    x1.dependency('up:.integral', Expression.function.respectTo, Expression.Dependency.VariableRelation);
                    x1.mark('X1');

                    var powx = Expression.power(x1, n);

                    var a = Expression.anything();
                    a.dependency('up:.integral', Expression.function.respectTo, Expression.Dependency.ConstRelation);
                    a.mark('A');

                    var x2 = Expression.anything('fdasdx');
                    x2.dependency('up:.integral', Expression.function.respectTo, Expression.Dependency.VariableRelation);
                    x2.mark('X2');

                    var eax = Expression.e(Expression.multiplication(a, x2));

                    var mul = Expression.multiplication(powx, eax);

                    var dx = Expression.variable('x');
                    dx.mark('dx');

                    var integral = Expression.integral(mul, dx);

                    integral.name(Expression.RuleType.Integration.IGeneralFormula47a);

                    integral.dependency('stay:', '', function (e, s) {
                        return Expression.Dependency.Matches(['X2', 'X1'], e, s);
                    }, true);

                    return integral;
                },
                IGeneralFormula47b: function () {
                    var a1 = Expression.anything();
                    a1.mark('A1');

                    var a2 = Expression.anything();
                    a2.mark('A2');

                    var a3 = Expression.anything();
                    a3.mark('A3');

                    var a4 = Expression.anything();
                    a4.mark('A4');

                    var x1 = Expression.anything();
                    x1.mark('X1');

                    var x2 = Expression.anything();
                    x2.mark('X2');

                    var x3 = Expression.anything();
                    x3.mark('X3');

                    var x4 = Expression.anything();
                    x4.mark('X4');

                    var n1 = Expression.anything();
                    n1.mark('N1');

                    var n2 = Expression.anything();
                    n2.mark('N2');

                    var n3 = Expression.anything();
                    n3.mark('N3');

                    var dx = Expression.anything('dx');
                    dx.mark('dx');

                    var nsub = Expression.subtraction(n3, 1);
                    var mul3 = Expression.multiplication(a4, x4);
                    var eax2 = Expression.e(mul3);
                    var xn1 = Expression.power(x3, nsub);

                    var mul2 = Expression.multiplication(xn1, eax2);

                    var integral = Expression.integral(mul2, dx);
                    var frac2 = Expression.division(n2, a3);
                    var part2 = Expression.multiplication(frac2, integral);

                    var mul1 = Expression.multiplication(a2, x2);

                    var eax = Expression.e(mul1);
                    var xn = Expression.power(x1, n1);
                    var fract = Expression.division(1, a1);
                    var part1 = Expression.multiplication(fract, xn, eax);

                    var subtraction = Expression.subtraction(part1, part2);

                    subtraction.name(Expression.RuleType.Integration.IGeneralFormula47b);

                    return subtraction;
                },
                IGeneralFormula48a: function () {

                    var n = Expression.anything();
                    n.dependency('up:.integral', Expression.function.respectTo, Expression.Dependency.ConstRelation);
                    n.mark('N');


                    var x1 = Expression.anything('x');
                    x1.dependency('up:.integral', Expression.function.respectTo, Expression.Dependency.VariableRelation);
                    x1.mark('X1');

                    var powx = Expression.power(x1, n);
                    powx.mark('POWX');
                    var a = Expression.anything();
                    a.dependency('up:.integral', Expression.function.respectTo, Expression.Dependency.ConstRelation);
                    a.mark('A');

                    var x2 = Expression.anything('x');
                    x2.dependency('up:.integral', Expression.function.respectTo, Expression.Dependency.VariableRelation);
                    x2.mark('X2');

                    var eax = Expression.e(Expression.multiplication(a, x2));
                    eax.mark('EAX');
                    var div = Expression.division(eax, powx);
                    div.mark('PARENT');

                    var dx = Expression.variable('x');
                    dx.mark('dx');

                    var integral = Expression.integral(div, dx);

                    integral.name(Expression.RuleType.Integration.IGeneralFormula48a);

                    integral.dependency('stay:', '', function (e, s) {
                        return Expression.Dependency.Matches(['X2', 'X1'], e, s);
                    }, true);

                    integral.dependency('stay:', '', function (e, s) {

                        return Expression.Dependency.OrderRequired(['EAX', 'POWX'], 'PARENT', e, s);
                    }, true);


                    return integral;
                },
                IGeneralFormula48b: function () {

                    var a = Expression.anything();
                    //a.dependency('up:.integral', Expression.function.respectTo, Expression.Dependency.ConstRelation);
                    a.mark('A1');

                    var x = Expression.anything();
                    //x.dependency('up:.integral', Expression.function.respectTo, Expression.Dependency.VariableRelation);
                    x.mark('X1');

                    var ax = Expression.multiplication(a, x);

                    var top = Expression.e(ax)

                    var x2 = Expression.anything();
                    //x2.dependency('up:.integral', Expression.function.respectTo, Expression.Dependency.VariableRelation);
                    x2.mark('X2');

                    var n2 = Expression.anything();
                    n2.mark('N2');

                    var nsub = Expression.subtraction(n2, 1);


                    var bottom = Expression.power(x2, nsub);

                    var frac2 = Expression.division(top, bottom);

                    var part1 = Expression.multiplication(-1, frac2);

                    var a2 = Expression.anything();
                    //a2.dependency('up:.integral', Expression.function.respectTo, Expression.Dependency.ConstRelation);
                    a2.mark('A2');

                    var dx = Expression.anything('x');
                    dx.mark('dx');

                    var a3 = Expression.anything();
                    //a3.dependency('up:.integral', Expression.function.respectTo, Expression.Dependency.ConstRelation);
                    a3.mark('A3');

                    var x3 = Expression.anything();
                    //x3.dependency('up:.integral', Expression.function.respectTo, Expression.Dependency.VariableRelation);
                    x3.mark('X3');

                    var mul2 = Expression.multiplication(a3, x3);

                    var eax = Expression.e(mul2);


                    var x4 = Expression.anything();
                    //x4.dependency('up:.integral', Expression.function.respectTo, Expression.Dependency.VariableRelation);
                    x4.mark('X4');

                    var n3 = Expression.anything();
                    n3.mark('N3');

                    var nsub2 = Expression.subtraction(n3, 1);

                    var pon1 = Expression.power(x4, nsub2);

                    var frac3 = Expression.division(eax, pon1);

                    var integral2 = Expression.integral(frac3, dx);

                    var part2 = Expression.multiplication(a2, integral2);

                    var add = Expression.addition(part1, part2);

                    var n = Expression.anything('n');
                    n.mark('N1');

                    var sub = Expression.subtraction(n, 1);

                    var frac = Expression.division(1, sub);

                    var mul = Expression.multiplication(frac, add);

                    var c = Expression.variable('c');

                    var addition = Expression.addition(mul, c);

                    addition.name(Expression.RuleType.Integration.IGeneralFormula48b);

                    return addition;
                },
                IGeneralFormula49a: function () {

                    var x2 = Expression.anything();
                    x2.dependency('up:.integral', Expression.function.respectTo, Expression.Dependency.VariableRelation);
                    x2.mark('X2');

                    var ln = Expression.ln(x2);

                    var n = Expression.anything();
                    n.dependency('up:.integral', Expression.function.respectTo, Expression.Dependency.ConstRelation);
                    n.mark('N');

                    var x1 = Expression.anything();
                    x1.dependency('up:.integral', Expression.function.respectTo, Expression.Dependency.VariableRelation);
                    x1.mark('X1');

                    var power = Expression.power(x1, n);

                    var mul = Expression.multiplication(power, ln);

                    var dx = Expression.anything('x');
                    dx.mark('dx');

                    var integral = Expression.integral(mul, dx);

                    integral.dependency('stay:', '', function (e, s) {
                        return Expression.Dependency.Matches(['X2', 'X1'], e, s);
                    }, true);

                    integral.name(Expression.RuleType.Integration.IGeneralFormula49a);

                    return integral;
                },
                IGeneralFormula49b: function () {

                    var n3 = Expression.anything();
                    //n3.dependency('up:.integral', Expression.function.respectTo, Expression.Dependency.ConstRelation);
                    n3.mark('N3');

                    var add2 = Expression.addition(n3, 1);

                    var x2 = Expression.anything();
                    //x2.dependency('up:.integral', Expression.function.respectTo, Expression.Dependency.VariableRelation);
                    x2.mark('X2');

                    var lnx = Expression.ln(x2);

                    var mul2 = Expression.multiplication(add2, lnx)

                    var middleplus = Expression.addition(mul2, -1);

                    var n1 = Expression.anything();
                    //n1.dependency('up:.integral', Expression.function.respectTo, Expression.Dependency.ConstRelation);
                    n1.mark('N1');

                    var plus = Expression.addition(n1, 1);

                    var x1 = Expression.anything();
                    //x1.dependency('up:.integral', Expression.function.respectTo, Expression.Dependency.VariableRelation);
                    x1.mark('X1');

                    var top = Expression.power(x1, plus);

                    var n2 = Expression.anything();
                    //n2.dependency('up:.integral', Expression.function.respectTo, Expression.Dependency.ConstRelation);
                    n2.mark('N2');

                    var add = Expression.addition(n2, 1);

                    var bottom = Expression.power(add, 2);

                    var frac = Expression.division(top, bottom);

                    var mul = Expression.multiplication(frac, middleplus);

                    var c = Expression.variable('c');

                    var addition = Expression.addition(mul, c);

                    addition.name(Expression.RuleType.Integration.IGeneralFormula49b);

                    return addition;
                }
            }
        },
        /**
         * Flattens an expression.
         * @param {MEPH.math.Expression} expression
         * @param {String} type
         * @return {MEPH.math.Expression}
         **/
        Flatten: function (expression, type, started) {

            switch (type) {
                case Expression.type.power:
                    return Expression.FlattenPower(expression.copy(), type, true);
                default:
                    if (expression.type !== type) {
                        if (started) {
                            return [expression];
                        }
                        else {
                            return expression;
                        }
                    }
                    else {
                        var parts = expression.getValues().concatFluentReverse(function (x) {
                            if (x.type === type) {

                                return Expression.Flatten(x.copy(), type, true);

                            }
                            else {
                                return [x.copy()];
                            }
                        });
                        if (!started) {
                            var copy = expression.copy();

                            copy.clearParts();
                            parts.foreach(function (p) {
                                copy.addInput(p)
                                return p.parent(copy);
                            });

                            return copy;
                        }

                        return parts;
                    }
            }
        },
        /**
         * Flattens a power expression.
         * @param {MEPH.math.Expression} expression
         * @param {String} type
         * @return {MEPH.math.Expression}
         **/
        FlattenPower: function (expression, type, started) {
            //
            //            expression.addPart(Expression.function.base, base);
            //           expression.addPart(Expression.function.power, power);
            var exp = expression.partOrDefault(Expression.function.base),
                variable,
                flattenedPower;
            switch (exp.type) {
                case Expression.type.power:
                    flattenedPower = Expression.FlattenPower(exp.copy(), type, started);
                    break;
                default:
                    return expression;
            }
            var powerval,
                power = flattenedPower.partOrDefault(Expression.function.power);

            if (typeof power === 'object') {
                switch (power.type) {
                    case Expression.type.variable:
                        powerval = power.partOrDefault(Expression.type.variable)
                        powerval = isNaN(powerval) ? powerval : parseFloat(powerval);
                        break;
                }
            }
            else {
                powerval = isNaN(power) ? power : parseFloat(power);;
            }

            var expressionpower = expression.partOrDefault(Expression.function.power);
            var expressionpowerval;
            if (typeof expressionpower === 'object') {
                expressionpowerval = expressionpower.partOrDefault(Expression.type.input) || expressionpower.partOrDefault(Expression.type.variable);
                switch (expressionpower.type) {
                    case Expression.type.variable:
                        expressionpowerval = isNaN(expressionpowerval) ? expressionpowerval : parseFloat(expressionpowerval);
                        break;
                }
            }
            else {
                expressionpowerval = isNaN(expressionpower) ? expressionpower : parseFloat(expressionpower);
            }

            if (!isNaN(powerval) && !isNaN(expressionpowerval)) {
                var part = flattenedPower.partOrDefault(Expression.function.power);
                flattenedPower.remove(part);
                flattenedPower.addPart(Expression.function.power, Expression.variable(powerval * expressionpowerval));
            }
            else {
                var part = flattenedPower.partOrDefault(Expression.function.power);
                flattenedPower.remove(part);
                if (typeof powerval !== 'object') {
                    powerval = Expression.variable(powerval);
                }
                if (typeof expressionpowerval !== 'object') {
                    expressionpowerval = Expression.variable(expressionpowerval);
                }

                flattenedPower.addPart(Expression.function.power, Expression.multiplication(powerval, expressionpowerval));
            }

            return flattenedPower;
        },
        /**
         * Creates associative groupings of a flattened expression.
         * @param {MEPH.math.Expression} expression
         * @returns {Array}
         **/
        createAssociativeGroupings: function (expression) {

            var sagset = MEPH.math.Set.sagset(expression.parts.length);
            return sagset.select(function (sag) {
                var set = sag;
                var perm = MEPH.math.Set.permutate(new Set([].interpolate(0, expression.parts.length, function (x) {
                    return x;
                })));

                var generateSetPermutations = function (set, index, max, $subtree) {
                    var superset = MEPH.math.Set.superset(new Set([].interpolate(0, $subtree.length, function (x) {
                        return $subtree[x];
                    }))).get();
                    var sub_super_set = (superset).where(function (x) {
                        return x.count(function (t) {
                            return t !== null;
                        }) === set[index];
                    });

                    var result = sub_super_set.select(function (y) {
                        return y.select(function (t, i) {
                            return y[i] !== null ? $subtree[i] : false;
                        }).where(function (x) {
                            return x !== false;
                        });
                    });

                    result = result.concatFluentReverse(function (subresult) {
                        var subtree = ($subtree.where(function (x) {
                            return !subresult.contains(function (t) { return t === x; })
                        }));
                        var generatedSubTree;
                        if (index < max - 1 && subtree.length) {
                            return generateSetPermutations(set, index + 1, max, subtree).select(function (st) {
                                return subresult.concat(st);
                            });
                        }

                        return index ? subresult : [subresult];
                    });

                    return result;
                };

                var output = generateSetPermutations(set, 0, expression.parts.length, [].interpolate(0, expression.parts.length, function (x) {
                    return x;
                })).select(function (x, index) {
                    return x.select(function (t) {
                        var val = expression.parts[t].val;
                        return val && val.copy ? val.copy() : val;
                    });
                });


                return {
                    set: set,
                    grouping: output
                }
            });

        },
        /**
         * Convert a grouping to expressions.
         * @param {Object} grouping
         * @param {String} type
         * @return {Array}
         **/
        convertGrouping: function (grouping, type) {
            return grouping.concatFluentReverse(function (group) {
                return group.grouping.select(function (t) {
                    return Expression.convertGroup({ set: group.set, grouping: t }, type);
                });
            })
        },
        /**
         * Convert a grouping to an expression.
         * @param {Object} grouping
         * @param {String} type
         * @return {MEPH.math.Expression}
         **/
        convertGroup: function (grouping, type) {
            var expression,
                index = 0,
                buffer = [],
                parentFunc;
            switch (type) {
                case Expression.type.multiplication:
                    parentFunc = Expression.multiplication;
                    break;
                case Expression.type.addition:
                    parentFunc = Expression.addition;
                    break;
            }
            [].interpolate(0, grouping.set.length, function (_s) {
                var s = grouping.set[_s];
                if (expression) {
                    var temp = grouping.grouping.subset(index, s + index);
                    expression = parentFunc.apply(null, [expression].concat(temp));
                    index = s + index;
                }
                else {
                    if (buffer.length || s > 1) {
                        if (buffer.length) {
                            var temp = grouping.grouping.subset(index, s + index);
                            expression = parentFunc.apply(null, buffer.concat(temp));
                            buffer = [];
                        }
                        else {
                            expression = parentFunc.apply(null, grouping.grouping.subset(index, s + index));
                        }
                        index = s + index;
                    }
                    else {
                        buffer.push(grouping.grouping[index]);
                        index++;
                    }
                }
            });
            return expression;
        },
        matchRule: function (expression, rule, markRule) {
            var res = expression.match(rule, true);
            if (res) {
                if (rule.dependenciesMarkAreRespected(expression)) {
                    if (!markRule) {
                        expression.clearMarks();
                    }
                }
                else {
                    return false;
                }
                expression.name(rule.name());
            }
            return res;
        },
        getMatch: function (expression) {
            return ExpressionMatch.getMatch(expression);
        },
        integrate: function (expression) {
            return ExpressionMatch.integrate(expression);
        },
        anything: function (v) {
            var expression = new Expression();
            expression.anything = v || null;
            expression.setExp(Expression.type.anything);
            return expression;
        },
        /**
         * When printing an expression, sub expressions of certain types should be wrapped in parenthesis,
         * for readability purposes.
         * @param {String} type
         **/
        requiresParenthesis: function (type) {
            switch (type) {
                case Expression.type.subtraction:
                case Expression.type.division:
                case Expression.type.multiplication:
                case Expression.type.addition:
                    return true;
                default: return false;
            }
        },
        /**
         * Math.pow(base , power);
         * @param {MEPH.math.Expression} power
         * @param {MEPH.math.Expression} base
         */
        power: function (base, power) {
            var expression = new Expression();
            expression.setExp(Expression.type.power);

            if (!(base instanceof Expression)) {
                base = Expression.variable(base);
            }
            expression.addPart(Expression.function.base, base);

            if (!(power instanceof Expression)) {
                power = Expression.variable(power);
            }
            expression.addPart(Expression.function.power, power);
            return expression;
        },
        /**
         * Math.sqrt(expression);
         * @param {MEPH.math.Expression} expression
         */
        sqrt: function (base) {
            var expression = new Expression();
            expression.setExp(Expression.type.sqrt);

            if (!(base instanceof Expression)) {
                base = Expression.variable(base);
            }

            expression.addPart(Expression.function.input, base);

            return expression;
        },
        plusminus: function (a, b) {
            var expression = new Expression();
            expression.setExp(Expression.type.plusminus);
            expression.addPart(Expression.function.input, a);
            expression.addPart(Expression.function.input, b);
            return expression
        },
        /**
         * An expression representing the value '1'
         * @return {MEPH.math.Expression}
         **/
        one: function () {
            return Expression.variable(1);
        },
        zero: function () {
            return Expression.variable(0);
        },
        /**
         * If an expression represents the value '0' then true is returned otherwise false.
         * @return {MEPH.math.Expression}
         **/
        isZero: function (exp) {
            return Expression.zero().equals(exp, { exact: true });
        },
        /**
         * If an expression represents the value '1' then true is returned otherwise false.
         * @return {MEPH.math.Expression}
         **/
        isOne: function (exp) {
            return Expression.one().equals(Expression.variableOr(exp), { exact: true });
        },
        /**
         * Removes all the parts of an expression representing one.
         * @param {MEPH.math.Expression} exp
         **/
        removeOne: function (exp) {
            var oneparts = exp.getParts().where(function (x) { return Expression.isOne(x.val); });
            if (oneparts.length === exp.getParts().length) {
                oneparts = oneparts.subset(1);
            }
            oneparts.foreach(function (x) { return exp.remove(x.val); });
            if (exp.getParts().length === 1) {
                return exp.getParts().first().val;
            }
            return exp;
        },
        variable: function (variable) {
            var expression = new Expression();
            expression.setExp(Expression.type.variable, variable);
            return expression;
        },
        limit: function (exp, a, b) {
            var expression = new Expression();
            expression.setExp(Expression.type.limit);
            expression.addPart(Expression.function.expression, exp);
            expression.addPart(Expression.function.start, a);
            expression.addPart(Expression.function.end, b);
            return expression;
        },
        factorial: function (a) {
            var expression = new Expression();
            expression.setExp(Expression.type.factorial);
            expression.addPart(Expression.function.input, a);
            return expression;
        },
        summation: function (exp, a, b, respectTo) {
            var expression = new Expression();
            expression.setExp(Expression.type.summation);
            expression.addPart(Expression.function.input, exp);
            if (a && !(a instanceof Expression)) {
                a = Expression.variable(a);
            }
            expression.addPart(Expression.function.start, a);
            if (b && !(a instanceof Expression)) {
                b = Expression.variable(b);
            }
            expression.addPart(Expression.function.end, b);
            if (respectTo && !(respectTo instanceof Expression)) {
                respectTo = Expression.variable(respectTo);
            }
            expression.addPart(Expression.function.respectTo, respectTo)
            return expression;
        },
        /**
         * Expresses an addition function, a + b + c + ... + n
         **/
        addition: function (a, b) {
            return Expression.arithmetic.apply(null, [Expression.type.addition].concat(MEPHArray.convert(arguments)));
        },
        /**
         * Expresses an addition function, a - b - c - ... - n
         **/
        subtraction: function (a, b) {
            return Expression.arithmetic.apply(null, [Expression.type.subtraction].concat(MEPHArray.convert(arguments)));
        },
        /**
         * Expresses an multiplication function, a * b * c * ... * n
         **/
        multiplication: function (a, b) {
            return Expression.arithmetic.apply(null, [Expression.type.multiplication].concat(MEPHArray.convert(arguments)));
        },
        /**
         * Expresses an multiplication function, a * b * c * ... * n
         **/
        division: function (a, b) {
            return Expression.arithmetic.apply(null, [Expression.type.division].concat(MEPHArray.convert(arguments)));
        },
        /**
         * Expresses a fraction
         **/
        fraction: function (numerator, denominator) {
            var expression = new Expression();
            expression.setExp(Expression.type.fraction);
            expression.addPart(Expression.function.numerator, numerator)
            MEPHArray.convert(arguments).subset(1).foreach(function (x) {
                expression.addPart(Expression.function.denominator, x);
            });
            return expression;
        },
        ln: function (x) {
            var expression = new Expression();
            expression.setExp(Expression.type.ln);
            if (!(x instanceof Expression)) {
                x = Expression.variable(x);
            }
            expression.addPart(Expression.function.input, x);
            return expression;
        },
        e: function (x) {
            var expression = new Expression();
            expression.setExp(Expression.type.e);
            if (!(x instanceof Expression)) {
                x = Expression.variable(x);
            }
            expression.addPart(Expression.function.input, x);
            return expression;
        },
        abs: function (x) {
            var expression = new Expression();
            expression.setExp(Expression.type.abs);
            expression.addPart(Expression.function.input, x);
            return expression;
        },
        variableOr: function (input) {
            return input instanceof Expression ? input : Expression.variable(input);
        },
        /**
         * Expresses log
         * @param {Number} a
         * @param {Number} base
         * @return {MEPH.math.Expression}
         **/
        log: function (a, base) {
            var expression = new Expression();

            expression.setExp(Expression.type.log);

            if (!(a instanceof Expression)) {
                a = Expression.variable(a);
            }

            expression.addPart(Expression.function.input, a)

            if (base === undefined || base === null) {
                base = 10;
            }

            if (!(base instanceof Expression)) {
                base = Expression.variable(base);
            }

            expression.addPart(Expression.function.base, base)

            return expression;
        },
        neg: function () {
            var expression = new Expression();
            expression.setExp(Expression.type.negative);
            MEPHArray.convert(arguments).foreach(function (x) {
                expression.addPart(Expression.function.input, x);
            });
            return expression;
        },
        /**
         * Expresses a modulo function
         **/
        mod: function (a, b) {
            var expression = new Expression();
            expression.setExp(Expression.type.modulo);
            expression.addPart(Expression.function.input, a)

            expression.addPart(Expression.function.input, b)
            return expression;
        },
        /**
         * Expresses an arithemetic like function, a - b - c - ... - n
         **/
        arithmetic: function (type, a, b) {
            var expression = new Expression();
            expression.setExp(type);
            MEPHArray.convert(arguments).subset(1).foreach(function (x) {
                var t = x;
                if (!(x instanceof Expression)) {
                    t = Expression.variable(t);
                }
                expression.addPart(Expression.function.input, t);
            });
            return expression;
        },
        /**
         * Expresses cos
         * @param {MEPH.math.Expression} exp
         * @param {Number} power
         **/
        cos: function (exp, power) {
            return Expression.trigonometric(Expression.type.cos, exp, power);
        },
        /**
         * Expresses tan
         * @param {MEPH.math.Expression} exp
         * @param {Number} power
         **/
        tan: function (exp, power) {
            return Expression.trigonometric(Expression.type.tan, exp, power);
        },
        /**
         * Expresses sin
         * @param {MEPH.math.Expression} exp
         * @param {Number} power
         * @returns {MEPH.math.Expression}
         **/
        sin: function (exp, power) {
            return Expression.trigonometric(Expression.type.sin, exp, power);
        },
        /**
         * Expresses csc
         * @param {MEPH.math.Expression} exp
         * @param {Number} power
         * @returns {MEPH.math.Expression}
         **/
        csc: function (exp, power) {
            return Expression.trigonometric(Expression.type.csc, exp, power);
        },
        /**
         * Expresses sec
         * @param {MEPH.math.Expression} exp
         * @param {Number} power
         * @returns {MEPH.math.Expression}
         **/
        sec: function (exp, power) {
            return Expression.trigonometric(Expression.type.sec, exp, power);
        },
        /**
         * Expresses cot
         * @param {MEPH.math.Expression} exp
         * @param {Number} power
         * @returns {MEPH.math.Expression}
         **/
        cot: function (exp, power) {
            return Expression.trigonometric(Expression.type.cot, exp, power);
        },

        /**
         * Expresses sinh
         * @param {MEPH.math.Expression} exp
         * @returns {MEPH.math.Expression}
         **/
        sinh: function (exp) {
            return Expression.trigonometric(Expression.type.sinh, exp, null);
        },

        /**
         * Expresses cosh
         * @param {MEPH.math.Expression} exp
         * @returns {MEPH.math.Expression}
         **/
        cosh: function (exp) {
            return Expression.trigonometric(Expression.type.cosh, exp, null);
        },

        /**
         * Expresses tanh
         * @param {MEPH.math.Expression} exp
         * @returns {MEPH.math.Expression}
         **/
        tanh: function (exp) {
            return Expression.trigonometric(Expression.type.tanh, exp, null);
        },

        /**
         * Expresses sech
         * @param {MEPH.math.Expression} exp
         * @returns {MEPH.math.Expression}
         **/
        sech: function (exp) {
            return Expression.trigonometric(Expression.type.sech, exp, null);
        },
        /**
         * Expresses coth
         * @param {MEPH.math.Expression} exp
         * @returns {MEPH.math.Expression}
         **/
        coth: function (exp) {
            return Expression.trigonometric(Expression.type.coth, exp, null);
        },
        /**
         * Expresses csch
         * @param {MEPH.math.Expression} exp
         * @returns {MEPH.math.Expression}
         **/
        csch: function (exp) {
            return Expression.trigonometric(Expression.type.csch, exp, null);
        },
        /**
         * Expresses a trigonemtric function like, cos, sin and tan
         * @param {String} type
         * @param {MEPH.math.Expression} exp
         * @param {Number} power
         **/
        trigonometric: function (type, exp, power) {
            var expression = new Expression();
            expression.setExp(type);

            if (!(exp instanceof Expression)) {
                exp = Expression.variable(exp);
            }
            expression.addPart(Expression.function.input, exp);

            if (power !== undefined && power !== null) {
                expression.addPart(Expression.function.power, power);
            }

            return expression;

        },
        func: function (func) {
            var expression = new Expression();
            expression.setExp(Expression.type.func);
            expression.addPart(Expression.function.name, MEPHArray.convert(arguments).first());
            MEPHArray.convert(arguments).subset(1).foreach(function (x) {
                expression.addPart(Expression.function.input, x);
            });
            return expression;
        },
        derivative: function (func, dir, u, t) {
            var expression = new Expression();
            expression.setExp(Expression.type.derivative);
            if (func) {
                expression.addPart(Expression.function.input, func);
            }

            if (dir instanceof Expression)
                expression.addPart(Expression.function.derivative, dir);
            else {
                expression.addPart(Expression.function.derivative, Expression.variable(dir || 1));
            }
            if (u) {
                if (typeof u === 'string') {
                    u = Expression.variable(u);
                }
                expression.addPart(Expression.function.numerator, u);
            }
            if (t) {
                if (typeof t === 'string') {
                    t = Expression.variable(t);
                }
                expression.addPart(Expression.function.denominator, t);
            }
            //expression.addPart(Expression.function.name, MEPHArray.convert(arguments).first());
            //MEPHArray.convert(arguments).subset(2).foreach(function (x) {
            //    expression.addPart(Expression.function.input, x);
            //});
            return expression;
        },
        theta: function () {
            var expression = new Expression();
            expression.setExp(Expression.type.theta);
            return expression;
        },
        /**
         * Expresses an integral
         * @param {MEPH.math.Expression} exp
         * @param {MEPH.math.Expression/String} dx
         * @param {MEPH.math.Expression/String/Number} a
         * @param {MEPH.math.Expression/String/Number} b
         **/
        integral: function (exp, dx, a, b) {
            var expression = new Expression();
            expression.setExp(Expression.type.integral);
            expression.addPart(Expression.function.input, exp);
            if (a)
                expression.addPart(Expression.function.start, a);
            if (b)
                expression.addPart(Expression.function.end, b);
            if (dx) {
                if (typeof dx === 'string') {
                    dx = Expression.variable(dx);
                }
                expression.addPart(Expression.function.respectTo, dx);
            }
            return expression;
        }
    },
    properties: {
        expression: null,
        parts: null,
        type: null,
        dependencies: null,
        _mark: null,
        _parent: null,
        repeat: false,
        _name: null
    },
    /**
     * @private
     * If the expession is repeating, its repeating parts are returned in an array.
     * @returns {Array}
     **/
    getRepeatParts: function () {
        var me = this;
        if (me.repeat) {
            return me.getParts();
        }
        return [];
    },
    /**
     * Sets properties on the expression.
     * @param {Object} props
     **/
    setProperties: function (props) {
        var me = this;
        me.properties = me.properties || {};
        MEPH.apply(props, me.properties);
    },
    /**
     * Gets properties set on the expression.
     * @return {Object}
     */
    getProperties: function () {
        var me = this;
        me.properties = me.properties || {};
        return me.properties;
    },
    copy: function () {
        var me = this;
        var expression = new Expression();
        expression.type = me.type;
        expression.mark(me.mark());
        expression.name(me.name());
        expression.setProperties(me.getProperties());
        expression.repeat = me.repeat;
        expression.parts = me.getParts().select(function (x) {
            var copy = x.val.copy ? x.val.copy() : x.val;
            if (x.val.copy) {
                copy.parent(expression);
            }
            return { type: x.type, val: copy };
        });
        expression.expression = me.expression;
        expression.dependencies = me.getDependencies().select();
        return expression;
    },
    mark: function (val) {
        var me = this;
        if (val !== undefined)
            me._mark = val;
        return me._mark;
    },
    clearMarks: function () {
        var me = this;
        me.getParts().select(function (x) {
            return x.val;
        }).foreach(function (x) {
            if (x instanceof Expression) {
                x.clearMarks();
            }
        });
        me._mark = null;
    },
    name: function (val) {
        var me = this;
        if (val !== undefined) {
            me._name = val;
        }
        return me._name;
    },
    setExp: function (type, val) {
        var me = this;
        me.type = type;
        if (val !== undefined) {
            me.parts.push({ type: type, val: val });
        }
    },
    clearParts: function () {
        var me = this;
        return me.parts.clear();
    },
    /**
     * Set the parts of the expression with the same type.
     * @param {Array} parts
     * @param {String} type
     */
    setParts: function (parts, type) {
        var me = this;
        me.clearParts();
        parts.foreach(function (val) {
            me.addPart(type, val);
        });
    },
    getMark: function (mark) {
        var me = this;
        return me.getMarks()[mark];
    },
    setMark: function (mark, val) {
        var me = this;
        var mark = me.getMark(mark);

        mark.parts.removeWhere();
    },
    /**
     * Gets the marks on the expression.
     * @returns {Object}
     ***/
    getMarks: function () {
        var me = this,
            marks = {};

        if (me.mark()) {
            marks[me.mark()] = me;
        }

        me.parts.foreach(function (part) {
            if (part && part.val && part.val.getMarks) {
                var submarks = part.val.getMarks();
                for (var i in submarks) {
                    if (submarks[i]) {
                        var smi = Array.isArray(submarks[i]) ? submarks[i].first() : submarks[i];
                        var temp_exp = marks[i];
                        if (temp_exp) {

                            temp_exp = (!Array.isArray((temp_exp))) ? temp_exp : temp_exp.first();
                            if (temp_exp.isSibling(smi)) {
                                if (!Array.isArray(submarks[i])) {
                                    marks[i] = [temp_exp];
                                    marks[i].push(submarks[i]);
                                }
                                else {
                                    marks[i] = [temp_exp].concat(submarks[i]);
                                }
                            }
                        }
                        else {
                            marks[i] = submarks[i];
                        }
                    }
                }
            }
        });
        return marks;
    },
    /**
     * Returns true if the exp expression share the same parent().
     * @param {MEPH.math.Expression} exp
     * @return {Boolean}
     **/
    isSibling: function (exp) {
        var me = this;
        return me.parent() === exp.parent();
    },
    /**
     * Gets the list of variables and consts in the expression.
     * @return {Array}
     **/
    respects: function () {
        var me = this;
        var respects = me.getParts().select(function (x) {
            if (x.val) {
                if (x.val instanceof Expression) {
                    return x.val.respects();
                }
                else {
                    if (isNaN(parseFloat(x.val))) {
                        return x.val;
                    }
                    else return null;
                }
            }
            else {
                return null;
            }
        }).concatFluentReverse(function (x) {
            if (x) {
                return Array.isArray(x) ? x : [x];
            }
            return [];
        }).unique();

        return respects;
    },
    addPart: function (type, val) {
        var me = this;
        if (val.parent) {
            val.parent(me);
        }
        me.parts.push({ type: type, val: val });
    },
    addInput: function (val) {
        var me = this;
        me.addPart(Expression.function.input, val);
    },
    parent: function (parent) {
        var me = this;

        if (parent) {
            me._parent = parent;
        }

        return me._parent;
    },
    /**
     * Adds a dependency between itself and another expression relative to it.
     * @param {String} offset
     * @param {String} part
     * @param {Function} ruleFunc
     */
    dependency: function (offset, part, ruleFunc, mark) {
        var me = this;
        me.dependencies.push({ mark: mark, offset: offset, part: part, ruleFunction: ruleFunc });
    },
    /**
     * Gets dependencies
     * @return {Array}
     **/
    getDependencies: function () {
        var me = this;
        return me.dependencies;
    },
    dependenciesAreRespected: function (expression, after) {
        var me = this;

        return me.getDependencies().where(function (x) {
            if (after) {
                return x.mark;
            }
            return !!!x.mark;
        }).all(function (d) {
            var offset, part;
            part = Expression.select(expression, d);

            if (!part) {
                throw new Error('no offset found');
            }
            return d.ruleFunction(expression, part);
        });
    },
    dependenciesMarkAreRespected: function (rule) {
        var me = this;

        return me.dependenciesAreRespected(rule, true);
    },
    /**
     * Converts expressions in to latex format.s
     * @return {String}
     **/
    latex: function () {
        var me = this,
            result;
        switch (me.type) {
            case Expression.type.variable:
                return me.parts.first().val;
            case Expression.type.integral:
                //\int_a^b \! f(x) \, \mathrm{d}x.
                var start = me.partLatex(Expression.function.start);
                var end = me.partLatex(Expression.function.end);
                var middle = '';
                if (start && end) {
                    middle = start + '^' + end;
                }
                result =
                    '\\int_' +
                    middle + ' ' +
                '\\! ' +
                me.partLatex(Expression.function.input) + ' ' +
                '\\,' + ' ' +
                '\\mathrm{d}' +
                me.partLatex(Expression.function.respectTo) + ''
                return result;
            case Expression.type.e:
                return 'e^' + me.partLatex(Expression.function.input);
            case Expression.type.addition:
                var before = '';
                var after = '';
                if (me.parent()) {
                    before = '(';
                    after = ')';
                }
                return before + me.parts.select(function (x) {
                    return x.val.latex();
                }).join(' + ') + after;
                break;
            case Expression.type.subtraction:
                return me.parts.select(function (x) {
                    return x.val.latex();
                }).join(' - ');
                break;
            case Expression.type.anything:
                return me.anything || 'f(x)';
            case Expression.type.func:
                return me.partLatex(Expression.function.name) + '(' + me.parts.subset(1).select(function (x) {
                    return x.val && x.val.latex ? x.val.latex() : x.val;
                }).join(',') + ')';
                break;
            case Expression.type.derivative:
                // \frac{\partial u}{\partial t} (func)
                var func = me.partLatex(Expression.function.input);
                var derivative = me.part(Expression.function.derivative);
                derivative = derivative && derivative.val ? derivative.val : null;
                if (derivative && derivative.value() != 1) {
                    derivative = '^' + derivative.value();
                }
                else derivative = '';

                var numerator = me.partLatex(Expression.function.numerator) || '';
                var denominator = me.partLatex(Expression.function.denominator) || '';
                return '\\frac{\\partial' + derivative + ' ' + numerator + '}{\\partial ' + denominator + '' + derivative + '} (' + func + ')';
            case Expression.type.multiplication:
                if (me.parts.unique(function (x) {
                    return x.val.latex();
                }).length !== me.parts.length ||
                    me.parts.where(function (x) {
                    return parseFloat(x.val.latex());
                }).length !== me.parts.length) {//|| x.val.latex() === '0'
                    return me.parts.orderBy(me.orderParts.bind(me)).select(function (x, index) {
                        return x.val.latex();
                    }).join('');
                }
                else
                    return me.parts.orderBy(me.orderParts.bind(me)).select(function (x, index) {
                        return x.val.latex();
                    }).join(' * ');
                break;
            case Expression.type.modulo:
                return me.latexPart(me.parts.nth(1)) +
                    ' \\bmod ' +
                    me.latexPart(me.parts.nth(2));
                break;
            case Expression.type.negative:
                return '-' + me.parts.orderBy(me.orderParts.bind(me)).select(function (x, index) {
                    return x.val && x.val.latex ? x.val.latex() : x.val;
                }).join('');;
            case Expression.type.limit:
                var exp = me.partLatex(Expression.function.expression);
                var a = me.partLatex(Expression.function.start);
                var b = me.partLatex(Expression.function.end);
                return '\\lim_{' + a + ' \\to ' + b + '} ' + exp
                break;
            case Expression.type.division:
                return me.parts.select(function (x) {
                    return x.val.latex();
                }).join(' / ');
                break;
            case Expression.type.ln:
                var start = '\\ln ';
                if (me.parts.length > 1) {
                    start += '(';
                }
                var val = me.parts.first().val;
                if (val.latex) {
                    start += val.latex();
                }
                else {
                    start += val;
                }
                if (me.parts.length > 1) {
                    start += ')';
                }
                return start;
            case Expression.type.abs:
                var start = '|';

                var val = me.parts.select(function (x) {
                    return me.latexPart(x);
                }).join('');
                start += val;
                start += '|';
                return start;
            case Expression.type.fraction:
                if (me.parts.length === 2) {
                    return '\\frac{' + me.partLatex(Expression.function.numerator) +
                        '}{' + me.partLatex(Expression.function.denominator) + '}';
                }
                else {
                    var start = '\\begin{equation}';
                    var end = ' \\end{equation}';
                    me.parts.subset(0, me.parts.length - 1).foreach(function (part) {
                        start += ' \\cfrac{' + me.latexPart(part) + '}{';

                        end = '}' + end;
                    });
                    return start + me.latexPart(me.parts.last()) + end;
                }
                break;
            case Expression.type.plusminus:
                var a = me.parts.first(function (x) { return x.type === Expression.function.input; });
                var b = me.parts.second(function (x) { return x.type === Expression.function.input; });

                return me.latexPart(a) + ' \\pm ' + me.latexPart(b);
                break;
            case Expression.type.theta:
                return '\\theta';
            case Expression.type.factorial:
                var facttext = me.partLatex(me.partOrDefault(Expression.function.input)) + '!';
                return facttext;
            case Expression.type.summation:
                //\displaystyle\sum_{n=1}^{10} n^{2}
                var summationtext = '\\displaystyle\\sum_{' + me.partLatex(Expression.function.respectTo) +
                    '=' + me.partLatex(Expression.function.start) +
                    '}^{' + me.partLatex(Expression.function.end) + '} ' + me.partLatex(Expression.function.input) + '';
                return summationtext;
            case Expression.type.tanh:
            case Expression.type.sinh:
            case Expression.type.cosh:
            case Expression.type.tan:
            case Expression.type.sin:
            case Expression.type.cos:
            case Expression.type.sec:
            case Expression.type.cot:
            case Expression.type.csc:
            case Expression.type.sech:
            case Expression.type.csch:
            case Expression.type.coth:
                var power = me.partLatex(Expression.function.power);
                if (power) {
                    power = '^' + power;
                }
                else { power = '' }
                return '\\' + me.type + power + ' (' + me.partLatex(Expression.function.input) + ')';
            case Expression.type.power:
                return me.partLatex(Expression.function.base) + '^{' + me.partLatex(Expression.function.power) + '}';
                break;
            default:
                throw new Error('unhandled : ' + me.type);
        }
    },
    latexPart: function (start) {
        if (start && start.val) {
            if (start.val.latex) {
                start = start.val.latex();
            }
            else {
                start = start.val;
            }
        }
        return start || '';
    },
    partLatex: function (type) {
        var me = this;
        var start = me.part(type);
        return me.latexPart(start);
    },
    partOrDefault: function (type) {
        var me = this;
        var part = me.part(type)
        return part ? part.val : null;
    },
    part: function (type) {
        var me = this;
        return me.parts.first(function (x) { return x.type === type; });
    },
    /**
     * Swaps the part from the mark.
     ***/
    swap: function (mark, exp) {
        var me = this;
        me.ensureLineage();
        var marks = me.getMarks();
        var parts = me.getParts()
        if (marks[mark]) {
            var parent = marks[mark].parent();
            var pos;
            if (parent) {
                pos = parent.indexOf(marks[mark]);
                var part = parent.remove(marks[mark]).first();
            }
            exp.mark(mark);
            if (parent) {
                if (pos === null || !part) {
                    throw new Error('illegal state for swapping.');
                }
                parent.addPartAt(part.type, exp, pos);
            }
        }

    },
    ensureLineage: function () {
        var me = this;
        me.getParts().foreach(function (p) {
            if (p.val.parent) {
                p.val.parent(me);
                p.val.ensureLineage();
            }
        });
    },
    /**
     * Add part at position pos.
     * @param {string} type
     * @param {MEPH.math.Expression} exp
     * @param {Number} pos
     **/
    addPartAt: function (type, exp, pos) {
        var me = this;
        if (me.getParts().length > pos && pos !== -1) {
            me.getParts().splice(pos, 0, { val: exp, type: type });
        }
        else {
            me.addPart(type, exp);
        }
    },
    /**
     * Gets the index of the expression.
     * @param {MEPH.math.Expression} exp
     * @return {Number}
     **/
    indexOf: function (exp) {
        var me = this;
        var indexes = me.parts.indexWhere(function (x) { return x.val === exp; });
        return indexes.first();
    },
    /**
     * @private
     */
    orderParts: function (a, b) {
        var order = {
            variable: 0,
            ln: 8,
            integral: 10,
            addition: 5,
            power: 5,
            limit: 5,
            fraction: 3,
            sin: 5,
            cos: 5,
            tan: 5,
            csc: 5,
            cot: 5,
            sec: 5,
            tan: 5,
            func: 5,
            derivative: 5,
            mod: 5,
            modulo: 5,
            theta: 5,
            subtraction: 5,
            plusminus: 5,
            multiplication: 5,
            division: 5,
            anything: 5
        }

        return (a.val && a.val.type ? order[a.val.type] || 0 : 0) - (b.val && b.val.type ? order[b.val.type] || 0 : 0);
    },
    value: function () {
        var me = this;
        switch (me.type) {
            case Expression.type.variable:
                return me.partOrDefault(me.type);
            default:
                return me;
        }
    },
    /**
     * Removes the part.
     * @param {MEPH.math.Expression} part
     * @returns {Array} removed parts.
     **/
    remove: function (part) {
        var me = this;
        return me.getParts().removeWhere(function (x) { return x.val === part; });
    },
    partVal: function (type) {
        var me = this;
        var part = me.part(type);
        if (part) {
            return part.val;
        }
        return null;
    },
    getParts: function () {
        var me = this;
        return me.parts;
    },
    /**
     * Get parts by index.
     * @param {Number} index
     * @param {MEPH.math.Expression}
     ***/
    getPartByIndex: function (index) {
        var me = this;
        var p = me.getParts()[index];
        if (p) {
            return p.val;
        }
        return null;
    },
    getValues: function () {
        var me = this;
        return me.getParts().select(function (x) { return x.val; });
    },
    initialize: function (type) {
        var me = this;
        me.expression = {
        };
        me.dependencies = [];
        me.parts = [];
    },
    /**
     * Matches an expression to a rule.
     * @param {MEPH.math.Expression} rule
     * @return {Boolean}
     **/
    match: function (rule, markRule) {
        var me = this;
        if (me.type === rule.type && rule.dependenciesAreRespected(me)) {
            var meParts = me.getParts().select();
            var ruleParts = rule.getParts().select();

            var matchParts = function (ruleParts, x) {
                var first = ruleParts.first(function (y) {
                    if (y.type !== x.type) {
                        return false;
                    }
                    if (y.val && x.val && y.val.equals && x.val.equals) {
                        return x.val.match(y.val, markRule);
                    }
                    else if (y.val && !x.val || !y.val && x.val) {
                        return false;
                    }
                    else {
                        return true
                    }
                });
                if (first) {
                    ruleParts.removeFirstWhere(function (t) { return t === first; });
                    return first;
                }
                else return false;
            };
            if (rule.repeat) {
                var repeatedparts;
                if (rule.repeat.requires) {
                    repeatedparts = rule.getParts().where(function (x) {
                        return rule.repeat.requires.contains(function (y) {
                            return y === x.type;
                        });
                    }).select(function (x) { return x; });

                    var eq = repeatedparts.all(function (part) {
                        var p = [].interpolate(0, me.getParts().length, function () {
                            return part;
                        });
                        var start = p.length;

                        meParts.foreach(matchParts.bind(me, p));

                        return start != p.length;
                    });

                    return eq;
                }
                else {

                    repeatedparts = [].interpolate(0, me.getParts().length, function () {
                        return rule.parts.first();
                    });
                    meParts.foreach(matchParts.bind(me, repeatedparts));
                    if (repeatedparts.length === 0) {
                        if (markRule) {
                            me.mark(rule.mark());
                        }
                        me.repeat = rule.repeat;

                        return true;
                    }
                }
                return false;
            }
            else if (rule.getParts().contains(function (x) {
                return x.val.type === (Expression.type.anything);
            })) {

                ruleParts = rule.getParts().select();
                //.where(function (x) {
                //    return x.val.type === Expression.type.anything;
                //});

                meParts.foreach(matchParts.bind(me, ruleParts));
                if (ruleParts.length === 0) {
                    if (markRule) {
                        me.mark(rule.mark());
                    }
                    return true;
                }
                return false;
            }
            else {
                if (meParts.length !== ruleParts.length) {
                    return false;
                }
                meParts.foreach(matchParts.bind(me, ruleParts));
                if (ruleParts.length > 0) {
                    return false;
                }
                if (markRule) {
                    me.mark(rule.mark());
                }

                return true;
            }
        }
        else if (rule.type === Expression.type.anything && rule.dependenciesAreRespected(me)) {
            if (markRule) {
                me.mark(rule.mark());
            }
            return true;
        }

        return false;
    },
    /**
     * Returns true if the equation are equal
     * @param {Object} options
     * @param {Boolean} options.formEquals
     */
    equals: function (expression, options) {
        var me = this;
        options = options || { formEquals: true, exact: false };

        if (me.type === expression.type) {
            var meparts = me.getParts().select();
            var expparts = expression.getParts().select(function (x) { return x; });
            if (meparts.length !== expparts.length) return false;
            meparts.foreach(function (x) {
                var first = expparts.first(function (y) {
                    if (y.type !== x.type) {
                        return false;
                    }
                    if (y.val && x.val && y.val.equals && x.val.equals) {
                        return y.val.equals(x.val, options);
                    }
                    else if (y.val && !x.val || !y.val && x.val) {
                        return false;
                    }
                    else {
                        if (options.exact) {
                            if (isNaN(x.val) && isNaN(y.val)) {
                                return x.val === y.val;
                            }
                            else {
                                return parseFloat(x.val) === parseFloat(y.val);
                            }
                        }
                        return true
                    }
                });
                if (first) {
                    expparts.removeWhere(function (t) { return t === first; });
                }
                else return false;
            });
            if (expparts.length > 0) return false;
            return true;
        }
    }
}).then(function () {
    [].interpolate(0, 100, function (x) {
        Expression.RuleType.Derivation['GeneralFormula' + x + 'b'] = 'GeneralFormula' + x + 'b';
        Expression.RuleType.Derivation['GeneralFormula' + x + 'a'] = 'GeneralFormula' + x + 'a';
    });

    Expression.RuleType.Derivation.ChainRuleA = 'ChainRuleA';
    Expression.RuleType.Derivation.ChainRuleB = 'ChainRuleB';

    [].interpolate(0, 100, function (x) {
        Expression.RuleType.Integration['IGeneralFormula' + x + 'b'] = 'IGeneralFormula' + x + 'b';
        Expression.RuleType.Integration['IGeneralFormula' + x + 'a'] = 'IGeneralFormula' + x + 'a';
    });
});;﻿/**
 * @class MEPH.math.expression.Evaluator
 * Evaulates mathematical expressions.
 *
 **/
MEPH.define('MEPH.math.expression.Evaluator', {
    statics: {
        /**
         * Evaluate an expression.
         * @param {MEPH.math.Expression} expression
         * @param {Object} options
         * @return {MEPH.math.Expression}
         **/
        evaluate: function (expression, options) {
            var Evaluator = MEPH.math.expression.Evaluator;
            expression = Evaluator.preprocess(expression);
            options = options || {};
            options.count = options.count || 0;
            options.count++;

            if (!expression instanceof Expression) {
                throw 'incorrect input.';
            }
            if (options.count > 256) {
                return expression.copy();
            }
            switch (expression.type) {
                case Expression.type.addition:
                    return Evaluator.evalAddition(expression, options);
                case Expression.type.subtraction:
                    return Evaluator.evalSubtraction(expression, options);
                case Expression.type.fraction:
                case Expression.type.division:
                    return Evaluator.evalDivision(expression, options);
                case Expression.type.multiplication:
                    return Evaluator.evalMultiplication(expression, options);
                case Expression.type.power:
                    return Evaluator.evalPower(expression, options);
                case Expression.type.variable:
                    return Evaluator.evalVariable(expression, options);
                case Expression.type.integral:
                    return Evaluator.evalIntegral(expression, options);
                case Expression.type.derivative:
                    return Evaluator.evalDerivative(expression, options);
                case Expression.type.e:
                    return Evaluator.evalE(expression, options);
                case Expression.type.ln:
                    return Evaluator.evalLn(expression, options);
                case Expression.type.abs:
                    return Evaluator.evalAbs(expression, options);
                case Expression.type.summation:
                    return Evaluator.evalSummation(expression, options);
                case Expression.type.log:
                    return Evaluator.evalLog(expression, options);
                case Expression.type.cos:
                case Expression.type.tan:
                case Expression.type.sec:
                case Expression.type.sin:
                case Expression.type.csc:
                case Expression.type.cosh:
                case Expression.type.tanh:
                case Expression.type.sech:
                case Expression.type.coth:
                case Expression.type.sinh:
                case Expression.type.csch:
                case Expression.type.cot:
                    return Evaluator.evalTrig(expression, options);
                case Expression.type.sqrt:
                    return Evaluator.evalSqrt(expression, options);
                default:
                    throw new Error('unhandled case : ' + expression.type);
            }
        },
        preprocess: function (expression) {
            switch (typeof (expression)) {
                case 'string':
                case 'number':
                    return Expression.variable(expression);
                default:
                    return expression;
            }
        },
        evalTrig: function (expression, options) {
            var Factor = MEPH.math.expression.Factor;
            var Evaluator = MEPH.math.expression.Evaluator;
            var x = expression.partOrDefault(Expression.function.input);

            if (Factor.isNumerical(x)) {
                var val;

                switch (expression.type) {
                    case Expression.type.csch:
                        val = Math.csch(Factor.getNumerical(x));
                        break;
                    case Expression.type.cosh:
                        val = Math.cosh(Factor.getNumerical(x));
                        break;
                    case Expression.type.sech:
                        val = Math.sech(Factor.getNumerical(x));
                        break;

                    case Expression.type.tanh:
                        val = Math.tanh(Factor.getNumerical(x));
                        break;
                    case Expression.type.sinh:
                        val = Math.sinh(Factor.getNumerical(x));
                        break;
                    case Expression.type.coth:
                        val = Math.coth(Factor.getNumerical(x));
                        break;
                    case Expression.type.csc:
                        val = Math.csc(Factor.getNumerical(x));
                        break;
                    case Expression.type.sec:
                        val = Math.sec(Factor.getNumerical(x));
                        break;
                    case Expression.type.tan:
                        val = Math.tan(Factor.getNumerical(x));
                        break;
                    case Expression.type.cos:
                        val = Math.cos(Factor.getNumerical(x));
                        break;
                    case Expression.type.sin:
                        val = Math.sin(Factor.getNumerical(x));
                        break;
                    case Expression.type.cot:
                        val = Math.cot(Factor.getNumerical(x));
                        break;
                    default:
                        throw new Error('unhandled trignometric case : ' + expression.type);
                }

                if (!isNaN(val) && (val % 1) === 0) {
                    return (val);
                }
            };

            switch (expression.type) {
                case Expression.type.coth:
                    return Expression.coth(Evaluator.evaluate(x, options));
                case Expression.type.csch:
                    return Expression.csch(Evaluator.evaluate(x, options));
                case Expression.type.cosh:
                    return Expression.cosh(Evaluator.evaluate(x, options));
                case Expression.type.sech:
                    return Expression.sech(Evaluator.evaluate(x, options));
                case Expression.type.tanh:
                    return Expression.tanh(Evaluator.evaluate(x, options));
                case Expression.type.sinh:
                    return Expression.sinh(Evaluator.evaluate(x, options));
                case Expression.type.sec:
                    return Expression.sec(Evaluator.evaluate(x, options));
                case Expression.type.tan:
                    return Expression.tan(Evaluator.evaluate(x, options));
                case Expression.type.cos:
                    return Expression.cos(Evaluator.evaluate(x, options));
                case Expression.type.sin:
                    return Expression.sin(Evaluator.evaluate(x, options));
                case Expression.type.csc:
                    return Expression.csc(Evaluator.evaluate(x, options));
                case Expression.type.cot:
                    return Expression.cot(Evaluator.evaluate(x, options));
                default:
                    throw new Error('unhandled trignometric case : ' + expression.type);
            }
        },
        evalLog: function (expression, options) {
            var Factor = MEPH.math.expression.Factor;
            var Evaluator = MEPH.math.expression.Evaluator;
            var x = expression.partOrDefault(Expression.function.input);
            var base = expression.partOrDefault(Expression.function.base);

            if (Factor.isNumerical(x) && Factor.isNumerical(base)) {
                var val = Math.log(Factor.getNumerical(x)) / Math.log(Factor.getNumerical(base));
                if (!isNaN(val)) {
                    return (val);
                }
            };
            ;
            return Expression.log(Evaluator.evaluate(x, options), Evaluator.evaluate(base, options));
        },
        evalSqrt: function (expression, options) {
            var Factor = MEPH.math.expression.Factor;
            var Evaluator = MEPH.math.expression.Evaluator;
            var x = expression.partOrDefault(Expression.function.input);

            if (Factor.isNumerical(x) && Factor.isNumerical(base)) {
                var val = Math.sqrt(Factor.getNumerical(x));
                if (!isNaN(val) && (val % 1) === 0) {
                    return (val);
                }
            };
            ;
            return Expression.sqrt(Evaluator.evaluate(x, options));
        },
        evalSummation: function (expression) {
            console.log('Need to actually implement summation.')
            return expression.copy();
        },
        evalAbs: function (expression, options) {
            var Factor = MEPH.math.expression.Factor;
            var Evaluator = MEPH.math.expression.Evaluator;
            var x = expression.partOrDefault(Expression.function.input);
            if (Factor.isNumerical(x)) {
                var val = Math.abs(Factor.getNumerical(x));
                if (!isNaN(val)) {
                    return (val);
                }
            };
            ;
            return Expression.abs(Evaluator.evaluate(x, options));
        },
        evalE: function (expression, options) {
            var Factor = MEPH.math.expression.Factor;
            var Evaluator = MEPH.math.expression.Evaluator;
            var x = expression.partOrDefault(Expression.function.input);
            if (Factor.isNumerical(x)) {
                var val = Math.pow(Math.E, Factor.getNumerical(x));
                if ((val % 1) === 0) {
                    return Expression.variable(val);
                }
            };
            ;
            return Expression.e(Evaluator.evaluate(x, options));
        },
        evalLn: function (expression, options) {

            var Factor = MEPH.math.expression.Factor;
            var Evaluator = MEPH.math.expression.Evaluator;
            var x = expression.partOrDefault(Expression.function.input);
            if (Factor.isNumerical(x)) {
                var val = Math.log(Factor.getNumerical(x)) / Math.log(Math.E);
                if ((val % 1) === 0) {
                    val;
                }
            };
            ;
            return Expression.ln(Evaluator.evaluate(x, options));
        },
        evalVariable: function (expression) {
            var Factor = MEPH.math.expression.Factor;
            return Factor.getNumerical(expression, true);
        },
        evalPower: function (expression, options) {
            var Factor = MEPH.math.expression.Factor;
            var Evaluator = MEPH.math.expression.Evaluator;
            var base = expression.partOrDefault(Expression.function.base);
            var exponent = expression.partOrDefault(Expression.function.power);

            base = Evaluator.evaluate(base, options);
            exponent = Evaluator.evaluate(exponent, options);

            if (Factor.isNumerical(exponent)) {
                if (Expression.isZero(exponent)) {
                    return Expression.one();
                }
                else if (Expression.isOne(exponent)) {
                    if (base instanceof Expression) {
                        return base.copy();
                    }
                    return Expression.variable(base);
                }
                if (Factor.isNumerical(base)) {
                    return Expression.variable(Math.pow(base, exponent));
                }
                else {
                    return Expression.power(base, exponent);
                }
            } else {
                return Expression.power(base, exponent);
            }
        },
        evalMultiplication: function (expression, options) {
            var Factor = MEPH.math.expression.Factor;
            var Evaluator = MEPH.math.expression.Evaluator;
            var multiplyNums = function (exps) {
                return exps.summation(function (x, t, i) {
                    if (i === 0) {
                        var temp = Evaluator.evaluate(x, options);
                        return Factor.getNumerical(temp);
                    }
                    return t * Factor.getNumerical(Evaluator.evaluate(x, options));
                });
            }
            var parts = expression.getParts().select(function (x) {
                return Evaluator.evaluate(x.val, options);
            });
            if (Evaluator.allNumbers(parts)) {
                var result = multiplyNums(parts);
                return Expression.variable(result);
            }
            var numerparts = parts.where(function (x) {
                return Factor.isNumerical(x) && !Expression.isOne(x);
            });
            var notnumbers = parts.where(function (x) {
                return !Factor.isNumerical(x);
            });

            var numexp = Expression.variable(multiplyNums(numerparts));

            if (!Expression.isOne(numexp) && numerparts.length && notnumbers.length) {
                return Expression.multiplication.apply(this, [numexp].concat(notnumbers));
            }
            else if (notnumbers.length) {
                if (notnumbers.length > 1) {
                    return Expression.multiplication.apply(this, notnumbers);
                }
                else {
                    var t = notnumbers.first();
                    return Expression.variableOr(t).copy();
                }
            }
            else {
                return Expression.variableOr(numexp).copy();
            }
        },
        /**
         * Evaluates a division expression.
         * @param {MEPH.math.Expression} expression
         * @param {Object} options
         * @return {MEPH.math.Expression}s
         **/
        evalDivision: function (expression, options) {
            var Factor = MEPH.math.expression.Factor;
            var Evaluator = MEPH.math.expression.Evaluator;
            var divideNums = function (exps) {
                return exps.summation(function (x, t, i) {
                    if (i === 0) {
                        return Evaluator.evaluate(x.val, options);
                    }
                    return t / Evaluator.evaluate(x.val, options);
                });
            }
            var parts = expression.getParts().select(function (x) {
                return Evaluator.evaluate(x.val, options);
            });
            var currentval, index = 0;
            do {
                if (currentval === undefined) {
                    currentval = parts[index] instanceof Expression ? parts[index].value() : parts[index];
                    if (!Factor.isNumerical(currentval) && !(currentval instanceof Expression)) {
                        currentval = Expression.variable(currentval);
                    }
                }
                else {
                    if (Factor.isNumerical(parts[index])) {
                        var pi = Factor.getNumerical(parts[index]);
                        if (pi === 0) {
                            if (currentval > 0)
                                return Expression.variable(Number.POSITIVE_INFINITY);
                            else return Expression.variable(Number.NEGATIVE_INFINITY);
                        }
                        if ((currentval / pi) % 1 === 0) {
                            currentval = currentval / pi;
                        }
                        else {
                            currentval = Expression.variable(currentval);
                            break;
                        }
                    }
                    else {
                        currentval = Expression.variable(currentval);
                        break;
                    }
                }
                index++;
            }
            while ((typeof currentval === 'number') && index < parts.length);

            if (currentval instanceof Expression) {
                return Expression.division.apply(this, [currentval].concat(parts.subset(index)));
            }
            else {
                return Expression.variable(currentval);
            }
        },
        /**
         * Evaluates  an addition expression.
         * @param {MEPH.math.Expression} expression
         * @param {Object} options
         * @return {MEPH.math.Expression}
         **/
        evalAddition: function (expression, options) {
            var Factor = MEPH.math.expression.Factor;
            var Evaluator = MEPH.math.expression.Evaluator;
            if (Evaluator.allNumbers(expression)) {
                var result = expression.getParts().summation(function (x, t) {
                    return Factor.getNumerical(x.val) + t;
                });
                return Expression.variable(result);
            }
            else {
                var copied = expression.copy();
                var parts = copied.getParts().select(function (x) {
                    return Evaluator.evaluate(x.val, options);
                });
                var number = parts.where(function (x) {
                    return Factor.isNumerical(x);
                }).summation(function (x, t) {
                    return Evaluator.evaluate(x, options) + t;
                });
                var notnumbers = parts.where(function (x) {
                    return !Factor.isNumerical(x);
                }).select(function (x) {
                    return x;
                });
                if (number !== 0 && notnumbers.length) {
                    return Expression.addition.apply(this, [Expression.variable(number)].concat(notnumbers));
                }
                else if (number === 0 && notnumbers.length) {
                    return Expression.addition.apply(this, notnumbers);
                }
                else if (notnumbers.length === 0) {
                    return Expression.addition.apply(this, [number]);
                }
            }
        },
        orderDependentEval: function (parts, evalFunc, expFunc) {
            var Evaluator = MEPH.math.expression.Evaluator;
            var Factor = MEPH.math.expression.Factor;
            var currentval, index = 0;

            do {
                if (currentval === undefined) {
                    currentval = parts[index] instanceof Expression ? parts[index].value() : parts[index];
                    if (!Factor.isNumerical(currentval) && !(currentval instanceof Expression)) {
                        currentval = Expression.variable(currentval);
                    }
                }
                else {
                    if (Factor.isNumerical(parts[index])) {

                        currentval = evalFunc(parts[index], currentval);

                        if (currentval instanceof Expression) {
                            break;
                        }
                    }
                    else {
                        currentval = Expression.variable(currentval);
                        break;
                    }
                }
                index++;
            }
            while ((typeof currentval === 'number') && index < parts.length);

            if (currentval instanceof Expression) {
                return expFunc.apply(this, [currentval].concat(parts.subset(index)));
                //Expression.subtraction.apply(this, [currentval].concat(parts.subset(index));
            }
            else {
                return Expression.variable(currentval);
            }

        },
        /**
         * Evaluates  an subtraction expression.
         * @param {MEPH.math.Expression} expression
         * @param {Object} options
         * @return {MEPH.math.Expression}
         **/
        evalSubtraction: function (expression, options) {
            var Evaluator = MEPH.math.expression.Evaluator;
            var Factor = MEPH.math.expression.Factor;

            var parts = expression.getParts().select(function (x, i) {
                if (i === 0) {
                    if (x.val instanceof Expression)
                        return x.val.copy();
                    return Expression.variable(x.val);
                }
                else {
                    if (x.val instanceof Expression)
                        return Expression.multiplication(-1, x.val.copy());
                    return Expression.multiplication(-1, x.val);
                }
                //return Evaluator.evaluate(x.val, options);
            });

            var result = Evaluator.evaluate(Expression.addition.apply(this, parts), options);

            parts = result.getParts().select(function (x, i) {
                if (i === 0) {
                    if (x.val instanceof Expression)
                        return x.val.copy();
                    return Expression.variable(x.val);
                }
                else {
                    var t;
                    t = Expression.Flatten(Expression.multiplication(-1,
                        (x.val instanceof Expression) ?
                         x.val.copy() :
                         x.val), Expression.type.multiplication);
                    if (t === null) {
                        throw 'invalid value for t : Evaluator.js';
                    }



                    return Evaluator.evaluate(t, options);
                }
            });

            var result = Evaluator.orderDependentEval(parts, function evalFunc(partsindex, currentval) {
                var pi = Factor.getNumerical(partsindex);

                if (pi === 0) {
                    if (currentval > 0)
                        return Expression.variable(Number.POSITIVE_INFINITY);
                    else
                        return Expression.variable(Number.NEGATIVE_INFINITY);
                }
                if ((currentval - pi) % 1 === 0) {
                    currentval = currentval - pi;
                }
                else {
                    currentval = Expression.variable(currentval);
                }
                return currentval;
            }, Expression.subtraction);

            if (!(result instanceof Expression)) {
                result = Expression.variable(result);
            }
            return result;
            //if (Evaluator.allNumbers(expression)) {
            //    var result = expression.getParts().summation(function (x, t, i) {
            //        if (i === 0) {
            //            return Evaluator.evaluate(x.val, options) + t;
            //        }
            //        else
            //            return t - Evaluator.evaluate(x.val, options);
            //    });
            //    return Expression.variable(result);
            //}
            //else {
            //    var copied = expression.copy(),
            //        numberfirst;

            //    var number = copied.getParts().where(function (x, index) {
            //        x.index = index;
            //        return Factor.isNumerical(x.val);
            //    }).summation(function (x, t, i) {
            //        if (x.index === 0) {
            //            numberfirst = true;
            //            return Evaluator.evaluate(x.val, options) + t
            //        }
            //        else
            //            return -Evaluator.evaluate(x.val, options) + t;
            //    });

            //    var notnumbers = copied.getParts().where(function (x) {
            //        return !Factor.isNumerical(x.val);
            //    });

            //    if (numberfirst) {
            //        return Expression.subtraction.apply(this, [Expression.variable(number)].concat(notnumbers));
            //    }
            //    else {
            //        var first = notnumbers.first(function (x) { return x.index === 0; });
            //        var start = !!number ? [first.val, number] : [first.val];
            //        return Expression.subtraction.apply(this, start.concat(notnumbers.where(function (x) {
            //            return x !== first;
            //        }).select(function (x) { return x.val; })));
            //    }
            //}
        },
        /**
         * Evaluates a derivative expression.
         * @param {MEPH.math.Expression} expression
         * @param {Object} options
         * @return {MEPH.math.Expression}
         **/
        evalDerivative: function (expression, options) {
            var Evaluator = MEPH.math.expression.Evaluator;
            var Factor = MEPH.math.expression.Factor;
            var rules = Expression.getMatchingRules(expression);
            var derivativeRules = rules.where(function (x) { return x.type === Expression.type.derivative; });
            if (options && derivativeRules.length > 1) {
                if (options.strategy) {
                    derivativeRules = options.strategy(derivativeRules);
                }
            }
            if (derivativeRules.length === 1) {
                var rule = derivativeRules.first().rule;


                Expression.clearMarks(expression);

                Expression.matchRule(expression, rule, true);

                var translation = ExpressionTranslation.translationPool().first(function (x) {
                    return x.some(function (y) { return y === rule.name() });
                });

                var translateTo = translation.first(function (x) {
                    return x !== rule.name();
                });

                var translateToRule = Expression.getRule(translateTo, 'Derivation');

                var result = ExpressionTranslation.translate(expression, translateToRule);

                var evaluatedresult = Evaluator.evaluate(result, options);

                return evaluatedresult;
            }
            else if (derivativeRules.length > 1) {
                throw new Error('dont know which rule to apply');
            }
            else {
                return expression;
            }
        },
        /**
         * Evaluates an integral expression.
         * @param {MEPH.math.Expression} expression
         * @param {Object} options
         * @return {MEPH.math.Expression}
         **/
        evalIntegral: function (expression, options) {
            var Evaluator = MEPH.math.expression.Evaluator;
            var Factor = MEPH.math.expression.Factor;
            var input = expression.partOrDefault(Expression.function.input);
            expression.remove(input);
            input = Evaluator.evaluate(input, options);
            expression.addPart(Expression.function.input, Expression.variableOr(input));

            var rules = Expression.getMatchingRules(expression);
            var integralRules = rules.where(function (x) { return x.type === Expression.type.integral; });

            if (options && integralRules.length > 1) {
                if (options.strategy) {
                    integralRules = options.strategy(integralRules);
                }
            }

            if (integralRules.length === 1) {
                var rule = integralRules.first().rule;


                Expression.clearMarks(expression);

                Expression.matchRule(expression, rule, true);

                var translation = ExpressionTranslation.translationPool().first(function (x) {
                    return x.some(function (y) { return y === rule.name() });
                });

                var translateTo = translation.first(function (x) {
                    return x !== rule.name();
                });

                var translateToRule = Expression.getRule(translateTo);

                var result = ExpressionTranslation.translate(expression, translateToRule);

                var evaluatedresult = Evaluator.evaluate(result, options);

                return evaluatedresult;
            }
            else {
                return expression;
            }
        },
        /**
         * All the parts of the expression are numerical.
         * @param {MEPH.math.Expression/Array}
         * @return {Boolean}
         */
        allNumbers: function (expression) {
            var Factor = MEPH.math.expression.Factor;
            var t = expression;
            if (!Array.isArray(expression)) {
                t = expression.getParts();
            }
            return t.all(function (x) {
                return typeof (Factor.getNumerical(x.val)) === 'number';
            })
        }
    }
});﻿describe("MEPH/math/expression/Evaluator.spec.js", 'MEPH.math.expression.Evaluator', 'MEPH.math.Expression', 'MEPH.math.expression.Factor', function () {
    var Evaluator;
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
        Evaluator = MEPH.math.expression.Evaluator;
    });

    var printExpressionToScreen = function (result) {
        return MEPH.requires('MEPH.math.jax.MathJax', 'MEPH.math.Expression').then(function () {
            return MEPHJax.ready().then(function () {
                var dom = document.createElement('div');
                document.body.appendChild(dom);
                return MEPHJax.load(result.latex(), dom)
            });
        })
    };

    it('can evaluate an addition = Expression.addition(1, 2)', function (done) {
        MEPH.requires('MEPH.math.expression.Evaluator', 'MEPH.math.Expression', 'MEPH.math.expression.Factor').then(function ($class) {
            var additionExp = Expression.addition(1, 2);
            var result = MEPH.math.expression.Evaluator.evaluate(additionExp);

            expect(result.type === Expression.type.variable).toBeTruthy();
            expect(result.partOrDefault(Expression.type.variable) === 3).toBeTruthy();
        }).catch(function (e) {
            expect(e).caught();
        }).then(function (x) {
            done();
        });
    });


    it('can evaluate an addition = Expression.addition(1, 2 , Expression.variable(3))', function (done) {
        MEPH.requires('MEPH.math.expression.Evaluator', 'MEPH.math.Expression', 'MEPH.math.expression.Factor').then(function ($class) {
            var additionExp = Expression.addition(1, 2, Expression.variable(3));
            var result = MEPH.math.expression.Evaluator.evaluate(additionExp);

            expect(result.type === Expression.type.variable).toBeTruthy();
            expect(result.partOrDefault(Expression.type.variable) === 6).toBeTruthy();
        }).catch(function (e) {
            expect(e).caught();
        }).then(function (x) {
            done();
        });
    });

    it('can evaluate an addition = Expression.addition(Expression.variable(3), Expression.variable(3), Expression.variable(3))', function (done) {
        MEPH.requires('MEPH.math.expression.Evaluator', 'MEPH.math.Expression', 'MEPH.math.expression.Factor').then(function ($class) {
            var additionExp = Expression.addition(Expression.variable(3), Expression.variable(3), Expression.variable(3));
            var result = MEPH.math.expression.Evaluator.evaluate(additionExp);

            expect(result.type === Expression.type.variable).toBeTruthy();
            expect(result.partOrDefault(Expression.type.variable) === 9).toBeTruthy();
        }).catch(function (e) {
            expect(e).caught();
        }).then(function (x) {
            done();
        });
    });


    it('can evaluate an addition = Expression.addition(Expression.variable(3), Expression.variable(a))', function (done) {
        MEPH.requires('MEPH.math.expression.Evaluator', 'MEPH.math.Expression', 'MEPH.math.expression.Factor').then(function ($class) {
            var additionExp = Expression.addition(Expression.variable(3), Expression.variable('a'));
            var result = MEPH.math.expression.Evaluator.evaluate(additionExp);

            expect(result.type === Expression.type.addition).toBeTruthy();
            expect(result.getParts().length === 2).toBeTruthy();
        }).catch(function (e) {
            expect(e).caught();
        }).then(function (x) {
            done();
        });
    });

    it('can evaluate an addition = Expression.addition(Expression.variable(3), Expression.variable(3), Expression.variable(a))', function (done) {
        MEPH.requires('MEPH.math.expression.Evaluator', 'MEPH.math.Expression', 'MEPH.math.expression.Factor').then(function ($class) {
            var additionExp = Expression.addition(Expression.variable(3), Expression.variable(3), Expression.variable('a'));
            var result = MEPH.math.expression.Evaluator.evaluate(additionExp);

            expect(result.type === Expression.type.addition).toBeTruthy();
            expect(result.getParts().length === 2).toBeTruthy();
        }).catch(function (e) {
            expect(e).caught();
        }).then(function (x) {
            done();
        });
    });


    it('can evaluate an addition = Expression.addition(Expression.variable(3), Expression.variable(a), Expression.variable(3), Expression.variable(a))', function (done) {
        MEPH.requires('MEPH.math.expression.Evaluator', 'MEPH.math.Expression', 'MEPH.math.expression.Factor').then(function ($class) {
            var additionExp = Expression.addition(Expression.variable(3), Expression.variable('a'), Expression.variable(3), Expression.variable('a'));
            var result = MEPH.math.expression.Evaluator.evaluate(additionExp);

            expect(result.type === Expression.type.addition).toBeTruthy();
            expect(result.getParts().length === 3).toBeTruthy();
        }).catch(function (e) {
            expect(e).caught();
        }).then(function (x) {
            done();
        });
    });


    it('can evaluate an subtraction = Expression.subtraction(Expression.variable(3), Expression.variable(2))', function (done) {
        MEPH.requires('MEPH.math.expression.Evaluator', 'MEPH.math.Expression', 'MEPH.math.expression.Factor').then(function ($class) {
            var subtractionExp = Expression.subtraction(Expression.variable(3), Expression.variable(2));
            var result = MEPH.math.expression.Evaluator.evaluate(subtractionExp);
            expect(result.type === Expression.type.variable).toBeTruthy();
            expect(result.getParts().length === 1).toBeTruthy();
            expect(result.partOrDefault(Expression.type.variable) === 1).toBeTruthy();
        }).catch(function (e) {
            expect(e).caught();
        }).then(function (x) {
            done();
        });
    });

    it('can evaluate an subtraction = Expression.subtraction(Expression.variable(3), Expression.variable(2), Expression.variable(2))', function (done) {
        MEPH.requires('MEPH.math.expression.Evaluator', 'MEPH.math.Expression', 'MEPH.math.expression.Factor').then(function ($class) {
            var subtractionExp = Expression.subtraction(Expression.variable(3), Expression.variable(2), Expression.variable(2));
            var result = MEPH.math.expression.Evaluator.evaluate(subtractionExp);
            expect(result.type === Expression.type.variable).toBeTruthy();
            expect(result.getParts().length === 1).toBeTruthy();
            expect(result.partOrDefault(Expression.type.variable) === -1).toBeTruthy();
        }).catch(function (e) {
            expect(e).caught();
        }).then(function (x) {
            done();
        });
    });

    it('can evaluate an subtraction = Expression.subtraction(Expression.variable(3), Expression.variable(a))', function (done) {
        MEPH.requires('MEPH.math.expression.Evaluator', 'MEPH.math.Expression', 'MEPH.math.expression.Factor').then(function ($class) {
            var subtractionExp = Expression.subtraction(Expression.variable(3), Expression.variable('a'));
            var result = MEPH.math.expression.Evaluator.evaluate(subtractionExp);


            expect(result.type === Expression.type.subtraction).toBeTruthy();
            expect(result.getParts().length === 2).toBeTruthy();

        }).catch(function (e) {
            expect(e).caught();
        }).then(function (x) {
            done();
        });
    });

    it('can evaluate an subtraction = Expression.subtraction(Expression.variable(3), Expression.variable(a), Expression.variable(a), Expression.variable(3))', function (done) {
        MEPH.requires('MEPH.math.expression.Evaluator', 'MEPH.math.Expression', 'MEPH.math.expression.Factor').then(function ($class) {
            var subtractionExp = Expression.subtraction(Expression.variable(3), Expression.variable('a'), Expression.variable(3), Expression.variable('a'));
            var result = MEPH.math.expression.Evaluator.evaluate(subtractionExp);


            expect(result.type === Expression.type.subtraction).toBeTruthy();
            expect(result.getParts().length === 2).toBeTruthy();
        }).catch(function (e) {
            expect(e).caught();
        }).then(function (x) {
            done();
        });
    });

    it('can evaluate a division = Expression.division(Expression.variable(9),Expression.variable(3))', function () {
        var division = Expression.division(Expression.variable(9), Expression.variable(3));
        var result = MEPH.math.expression.Evaluator.evaluate(division);
        expect(result.partOrDefault(Expression.type.variable) === 3).toBeTruthy();
        expect(result.type === Expression.type.variable).toBeTruthy();
    });


    it('can evaluate a division = Expression.division(Expression.variable(9),Expression.variable(3),Expression.variable(a),Expression.variable(b))', function () {
        var division = Expression.division(Expression.variable(9), Expression.variable(3), Expression.variable('a'), Expression.variable('b'));
        var result = MEPH.math.expression.Evaluator.evaluate(division);
        expect(result.parts.length === 3).toBeTruthy();
        expect(result.type === Expression.type.division).toBeTruthy();
    });

    it('can evaluate a multiplication = 4*5*3', function () {
        var multiplication = Expression.multiplication(4, 5, 3);
        var result = MEPH.math.expression.Evaluator.evaluate(multiplication);

        expect(result.partOrDefault(Expression.type.variable).val === 60);
    });

    it('can evaluate a multiplication = 4*a*3', function () {
        var multiplication = Expression.multiplication(4, 'a', 3);
        var result = MEPH.math.expression.Evaluator.evaluate(multiplication);
        expect(result.parts.length === 2).toBeTruthy();
        expect(result.type === Expression.type.multiplication).toBeTruthy();
    });

    it('can evaluate a integral of a constant:general formula 1 of Integration rules', function () {
        var integral = Expression.integral(Expression.variable('f'), Expression.variable('x'));

        var result = Evaluator.evaluate(integral);
        console.log(integral.latex() + ' => ' + result.latex());
        expect(result.type === Expression.type.addition).toBeTruthy();
    });

    it('can evaluate an integral of general formula 2 of Integration rules.', function () {
        var integral = Expression.integral(Expression.multiplication('a', 'x'), 'x');
        var result = Evaluator.evaluate(integral, {
            strategy: function (rules) {
                return [rules.first()]
            }
        });
        console.log(result.latex());

        expect(result.type === Expression.type.multiplication).toBeTruthy();

    });

    it('can evaluate a fraction', function () {
        var fraction = Expression.fraction(4, 2);
        var result = Evaluator.evaluate(fraction);

        expect(result.value() === 2).toBeTruthy();
    });


    it('can evaluate a fraction', function () {
        var fraction = Expression.fraction(2, 3);
        var result = Evaluator.evaluate(fraction);

        expect(result.getParts().first().val.value() === 2).toBeTruthy();
    });

    it('can evaluate an integral of general formula 3 of Integration rules ', function () {
        var integral = Expression.integral(Expression.power(Expression.variable('x'), Expression.variable(3)), 'x');

        var result = Evaluator.evaluate(integral, {
            strategy: function (rules) {
                return [rules.first()];
            }
        });
        console.log(result.latex());

        expect(result.type === Expression.type.addition).toBeTruthy();
    });


    it('can evaluate an integral of general formula 4 of Inetegration rules', function () {
        var integral = Expression.integral(Expression.addition('a', 'b', 'c'), 'x');

        var result = Evaluator.evaluate(integral);
        console.log(result.latex());

        expect(result.type === Expression.type.addition).toBeTruthy();
    });


    it('can evaluate an integral of general formula 4 of Inetegration rules', function () {
        var integral = Expression.integral(Expression.addition('5', '0', '2'), 'x');

        var result = Evaluator.evaluate(integral);
        console.log(result.latex());

        expect(result.type === Expression.type.addition).toBeTruthy();
    });

    it('can evaluate a derivative of general formula 1 of Derivative rules', function () {
        var derivative = Expression.derivative(Expression.variable('a'), 1, null, 'x');

        var result = Evaluator.evaluate(derivative);

        expect(result === 0).toBeTruthy();
    });

    it('can evaluate a derivative of general formula 1 of Derivative rules', function () {
        var derivative = Expression.derivative(Expression.multiplication(
            Expression.variable('a'), Expression.variable('b')), 1, null, 'x');

        var result = Evaluator.evaluate(derivative);

        expect(result === 0).toBeTruthy();
    });

    it('can evaluate a derivative of general formula 2 of Derivative rules', function () {
        var derivative = Expression.derivative(
            Expression.multiplication(Expression.variable('c'), Expression.variable('x'))
            , 1, null, 'x');

        var result = Evaluator.evaluate(derivative, {
            strategy: function (rules) {
                return rules.where(function (x) { return x.rule.name() === Expression.RuleType.Derivation.GeneralFormula2a; });
            }
        });

        expect(result === 'c').toBeTruthy();

    });

    it('can evaluate a derivative of general formula 2 of Derivative rules', function () {
        var derivative = Expression.derivative(
            Expression.multiplication(Expression.variable('d'), Expression.variable('c'), Expression.variable('x'))
            , 1, null, 'x');

        var result = Evaluator.evaluate(derivative, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    return x.rule.name() === Expression.RuleType.Derivation.GeneralFormula2a;
                });
            }
        });

        expect(result.type === Expression.type.multiplication).toBeTruthy();

    });

    it('can evaluate a derivative of general formula 3 of Derivative rules', function () {
        var d = Expression.derivative(Expression.multiplication(Expression.variable('c')
            , Expression.multiplication('d', 'x', 'f')), 1, null, 'x');

        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                if (rules.length === 2) {
                    return [rules.first()]
                }
                return rules.where(function (x) { return x.rule.name() === Expression.RuleType.Derivation.GeneralFormula3a; });
            }
        });

        expect(result.type === Expression.type.multiplication).toBeTruthy();
    });

    it('can evaluate a derivative of general formula 4 of Derivative rules', function () {
        var d = Expression.derivative(Expression.addition('x', 'x'), 1, null, 'x');
        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return [rules.first(function (x) {
                    return x.rule.name() === Expression.RuleType.Derivation.GeneralFormula4a;
                })];
            }
        });
        expect(result.parts.length === 1).toBeTruthy();
        expect(result.type === Expression.type.addition).toBeTruthy();
    });

    it('can evaluate a derivative of general formula 4 of Derivative rules', function () {
        var d = Expression.derivative(Expression.addition('x', 'x', 'x'), 1, null, 'x');
        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return [rules.first(function (x) {
                    return x.rule.name() === Expression.RuleType.Derivation.GeneralFormula4a;
                })];
            }
        });
        expect(result.parts.length === 1).toBeTruthy();
        expect(result.type === Expression.type.addition).toBeTruthy();
    });

    it('can evaluate a derivative of general formula 5 of Derivative rules', function () {
        var d = Expression.derivative(Expression.multiplication('x', 'x', 'x'), 1, null, 'x');

        var result = Evaluator.evaluate(d);

        expect(result.parts.length === 3).toBeTruthy();
        expect(result.type === Expression.type.addition).toBeTruthy();
    });

    it('can evaluate a single variable in a derivative', function () {
        var d = Expression.derivative(Expression.variable('x'), 1, null, 'x');

        var result = Evaluator.evaluate(d);

        expect(result === 1).toBeTruthy();
    });

    it('can evaluate a quotient rule , derivative of general formula 7 of derivative rules', function () {
        var d = Expression.derivative(Expression.division(Expression.multiplication(2, 'x'), Expression.multiplication(4, 'x')), 1, null, 'x');

        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    called = true;
                    return x.rule.name() === Expression.RuleType.Derivation.GeneralFormula7a;
                });
            }
        });

        expect(result.type === Expression.type.division).toBeTruthy();
    });

    it('can evaluate the power rule , derivative of general formula 10 of derivative rules', function () {
        var d = Expression.derivative(Expression.power(Expression.variable('x'), 10), 1, null, 'x');

        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    called = true;
                    return x.rule.name() === Expression.RuleType.Derivation.GeneralFormula10a;
                });
            }
        });
        console.log(result.latex());
        expect("10x^{9}" === result.latex()).toBeTruthy();
        expect(result.type === Expression.type.multiplication).toBeTruthy();
    });

    it('can evaluate the power rule , derivative of general formula 10 of derivative rules', function () {
        var d = Expression.derivative(Expression.power(Expression.power(Expression.variable('x'), 2), 4), 1, null, 'x');

        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    called = true;
                    return x.rule.name() === Expression.RuleType.Derivation.GeneralFormula10a;
                });
            }
        });
        
        expect("4x^{2}^{3}2x" === result.latex()).toBeTruthy();
        expect(result.type === Expression.type.multiplication).toBeTruthy();
    });



    it('can translate with more than the expect parts.', function () {
        var Expression = MEPH.math.Expression;

        var rule1 = Expression.Rules.Integration.IntegralConstMultiply();
        var rule2 = Expression.Rules.Integration.MultiplyIntegralofFx();

        var expression = Expression.integral(
                            Expression.multiplication(
                                Expression.variable('a'),
                                Expression.variable('b'),
                                Expression.addition(
                                    Expression.variable('x'),
                                    Expression.variable('x')
                                )),
                        'x');


        var result = Evaluator.evaluate(expression);

        expect(result).toBeTruthy();

    });

    it('can evaluate a derivative of general formula 12 of derivative rules', function () {
        var d = Expression.derivative(Expression.e('x'), 1, null, 'x');

        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    return x.rule.name() === Expression.RuleType.Derivation.GeneralFormula12a;
                });
            }
        });

        expect(result.type === Expression.type.e).toBeTruthy();
    });

    it('can evaluate a derivative of general formula 13 of derivatives rules', function () {
        var d = Expression.derivative(Expression.power('a', 'x'), 1, null, 'x');

        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    return x.rule.name() === Expression.RuleType.Derivation.GeneralFormula13a;
                });
            }
        });

        expect(result.latex() === 'a^{x}\\ln a').toBeTruthy();
        expect(result.type === Expression.type.multiplication).toBeTruthy();
    });

    it('can evaluate a derivative of general formula 14 of derivative rules', function () {
        var d = Expression.derivative(Expression.ln(Expression.abs(Expression.variable('x'))), 1, null, 'x');

        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    return x.rule.name() === Expression.RuleType.Derivation.GeneralFormula14a;
                });
            }
        });

        expect(result.type === Expression.type.division).toBeTruthy();
    });

    it('can evaluate an absolute value expression', function () {
        var d = Expression.abs('-4');

        var result = Evaluator.evaluate(d);

        expect(result === 4).toBeTruthy();
    });

    it('can evalute a log a x => ', function () {
        var d = Expression.log(Expression.variable('10'), Expression.variable('10'));

        var result = Evaluator.evaluate(d);

        expect(result === 1).toBeTruthy();

    });

    it('can evaluate a derivative of general formula 15 of derivative rules', function () {
        var d = Expression.derivative(Expression.log(Expression.variable('x'), Expression.variable('a')), 1, null, 'x');

        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    return x.rule.name() === Expression.RuleType.Derivation.GeneralFormula15a;
                });
            }
        });

        expect(result.type === Expression.type.division).toBeTruthy();
    });

    it('can evaluate a derivative of general formula 17 of derivative rules', function () {
        var d = Expression.derivative(Expression.sin('x'), 1, null, 'x');

        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    return x.rule.name() === Expression.RuleType.Derivation.GeneralFormula17a;
                });
            }
        });

        expect(result.type === Expression.type.cos).toBeTruthy();
    });

    it('can evalute a derivative of general formula 18 of derivative rules ', function () {
        var d = Expression.derivative(Expression.cos('x'), 1, null, 'x');

        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    return x.rule.name() === Expression.RuleType.Derivation.GeneralFormula18a;
                });
            }
        });

        expect(result.latex() === '-1\\cos (x)').toBeTruthy();
        expect(result.type === Expression.type.multiplication).toBeTruthy();
    });


    it('can evalute a derivative of general formula 19 of derivative rules ', function () {
        var d = Expression.derivative(Expression.tan('x'), 1, null, 'x');

        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    return x.rule.name() === Expression.RuleType.Derivation.GeneralFormula19a;
                });
            }
        });

        expect(result.type === Expression.type.power).toBeTruthy();
    });

    it('can evalutate a derivative of general formula 20 of derivative rules ', function () {
        var d = Expression.derivative(Expression.cot('x'), 1, null, 'x');

        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    return x.rule.name() === Expression.RuleType.Derivation.GeneralFormula20a;
                });
            }
        });

        expect(result.type === Expression.type.multiplication).toBeTruthy();
    });


    it('can evalutate a derivative of general formula 21 of derivative rules ', function () {
        var d = Expression.derivative(Expression.csc('x'), 1, null, 'x');

        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    return x.rule.name() === Expression.RuleType.Derivation.GeneralFormula21a;
                });
            }
        });

        expect(result.type === Expression.type.multiplication).toBeTruthy();
    });


    it('can evalutate a derivative of general formula 22 of derivative rules ', function () {
        var d = Expression.derivative(Expression.sec('x'), 1, null, 'x');

        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    return x.rule.name() === Expression.RuleType.Derivation.GeneralFormula22a;
                });
            }
        });

        expect(result.type === Expression.type.multiplication).toBeTruthy();
    });


    it('can evalutate a derivative of general formula 23 of derivative rules ', function () {
        var d = Expression.derivative(Expression.power(Expression.sin('x'), -1), 1, null, 'x');

        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    return x.rule.name() === Expression.RuleType.Derivation.GeneralFormula23a;
                });
            }
        });

        expect(result.type === Expression.type.division).toBeTruthy();
    });


    it('can evalutate a derivative of general formula 24 of derivative rules ', function () {
        var d = Expression.derivative(Expression.power(Expression.cos('x'), -1), 1, null, 'x');

        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    return x.rule.name() === Expression.RuleType.Derivation.GeneralFormula24a;
                });
            }
        });

        expect(result.type === Expression.type.division).toBeTruthy();
    });

    it('can evalutate a derivative of general formula 25 of derivative rules ', function () {
        var d = Expression.derivative(Expression.power(Expression.tan('x'), -1), 1, null, 'x');

        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    return x.rule.name() === Expression.RuleType.Derivation.GeneralFormula25a;
                });
            }
        });

        expect(result.type === Expression.type.division).toBeTruthy();
    });

    it('can evalutate a derivative of general formula 26 of derivative rules ', function () {
        var d = Expression.derivative(Expression.power(Expression.cot('x'), -1), 1, null, 'x');

        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    return x.rule.name() === Expression.RuleType.Derivation.GeneralFormula26a;
                });
            }
        });

        expect(result.type === Expression.type.multiplication).toBeTruthy();
    });


    it('can evalutate a derivative of general formula 27 of derivative rules ', function () {
        var d = Expression.derivative(Expression.power(Expression.csc('x'), -1), 1, null, 'x');

        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    return x.rule.name() === Expression.RuleType.Derivation.GeneralFormula27a;
                });
            }
        });

        expect(result.type === Expression.type.multiplication).toBeTruthy();
    });


    it('can evalutate a derivative of general formula 28 of derivative rules ', function () {
        var d = Expression.derivative(Expression.power(Expression.sec('x'), -1), 1, null, 'x');

        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    return x.rule.name() === Expression.RuleType.Derivation.GeneralFormula28a;
                });
            }
        });

        expect(result.type === Expression.type.division).toBeTruthy();

    });


    it('can evalutate a derivative of general formula 29 of derivative rules ', function () {
        var d = Expression.derivative(Expression.sinh('x'), 1, null, 'x');

        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    return x.rule.name() === Expression.RuleType.Derivation.GeneralFormula29a;
                });
            }
        });

        expect(result.type === Expression.type.cosh).toBeTruthy();

    });

    it('can evalutate a derivative of general formula 30 of derivative rules ', function () {
        var d = Expression.derivative(Expression.cosh('x'), 1, null, 'x');

        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    return x.rule.name() === Expression.RuleType.Derivation.GeneralFormula30a;
                });
            }
        });

        expect(result.type === Expression.type.sinh).toBeTruthy();

    });

    it('can evalutate a derivative of general formula 31 of derivative rules ', function () {
        var d = Expression.derivative(Expression.tanh('x'), 1, null, 'x');

        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    return x.rule.name() === Expression.RuleType.Derivation.GeneralFormula31a;
                });
            }
        });

        expect(result.type === Expression.type.sech).toBeTruthy();

    });

    it('can evalutate a derivative of general formula 32 of derivative rules ', function () {
        var d = Expression.derivative(Expression.coth('x'), 1, null, 'x');

        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    return x.rule.name() === Expression.RuleType.Derivation.GeneralFormula32a;
                });
            }
        });

        expect(result.type === Expression.type.multiplication).toBeTruthy();

    });

    it('can evalutate a derivative of general formula 33 of derivative rules ', function () {
        var d = Expression.derivative(Expression.csch('x'), 1, null, 'x');

        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    return x.rule.name() === Expression.RuleType.Derivation.GeneralFormula33a;
                });
            }
        });

        expect(result.type === Expression.type.multiplication).toBeTruthy();

    });

    it('can evalutate a derivative of general formula 34 of derivative rules ', function () {
        var d = Expression.derivative(Expression.sech('x'), 1, null, 'x');

        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    return x.rule.name() === Expression.RuleType.Derivation.GeneralFormula34a;
                });
            }
        });

        expect(result.type === Expression.type.multiplication).toBeTruthy();

    });



    it('can evalutate a derivative of general formula 35 of derivative rules ', function () {
        var d = Expression.derivative(Expression.power(Expression.sinh('x'), -1), 1, null, 'x');

        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    return x.rule.name() === Expression.RuleType.Derivation.GeneralFormula35a;
                });
            }
        });

        expect(result.type === Expression.type.division).toBeTruthy();
    });

    it('can evalutate a derivative of general formula 36 of derivative rules ', function () {
        var d = Expression.derivative(Expression.power(Expression.cosh('x'), -1), 1, null, 'x');

        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    return x.rule.name() === Expression.RuleType.Derivation.GeneralFormula36a;
                });
            }
        });

        expect(result.type === Expression.type.division).toBeTruthy();
    });


    it('can evalutate a derivative of general formula 37 of derivative rules ', function () {
        var d = Expression.derivative(Expression.power(Expression.tanh('x'), -1), 1, null, 'x');
        var called;
        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    called = true;
                    return x.rule.name() === Expression.RuleType.Derivation.GeneralFormula37a;
                });
            }
        });
        expect(called).toBeTruthy();
        expect(result.type === Expression.type.division).toBeTruthy();
    });

    it('can evalutate a derivative of general formula 38 of derivative rules ', function () {
        var d = Expression.derivative(Expression.power(Expression.coth('x'), -1), 1, null, 'x');

        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    return x.rule.name() === Expression.RuleType.Derivation.GeneralFormula38a;
                });
            }
        });

        expect(result.type === Expression.type.division).toBeTruthy();
    });


    it('can evalutate a derivative of general formula 39 of derivative rules ', function () {
        var d = Expression.derivative(Expression.power(Expression.csch('x'), -1), 1, null, 'x');

        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    return x.rule.name() === Expression.RuleType.Derivation.GeneralFormula39a;
                });
            }
        });

        expect(result.type === Expression.type.multiplication).toBeTruthy();
    });


    it('can evalutate a derivative of general formula 40 of derivative rules ', function () {
        var d = Expression.derivative(Expression.power(Expression.sech('x'), -1), 1, null, 'x');
        var called;
        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    called = true;
                    return x.rule.name() === Expression.RuleType.Derivation.GeneralFormula40a;
                });
            }
        });
        expect(called).toBeTruthy();
        expect(result.type === Expression.type.multiplication).toBeTruthy();

    });


    it('can evalutate an integral of general formula 12 of integral rules ', function () {
        var d = Expression.integral(Expression.tan('x'), 'x');
        var called;
        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    called = true;
                    return x.rule.name() === Expression.RuleType.Integration.IGeneralFormula12a;
                });
            }
        });
        //expect(called).toBeTruthy();
        expect(result.type === Expression.type.addition).toBeTruthy();
        expect(Expression.matchRule(result, Expression.Rules.Integration.IGeneralFormula12b())).toBeTruthy();;
    });

    it('can evalutate an integral of general formula 13 of integral rules ', function () {
        var d = Expression.integral(Expression.cot('x'), 'x');
        var called;
        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    called = true;
                    return x.rule.name() === Expression.RuleType.Integration.IGeneralFormula13a;
                });
            }
        });
        //expect(called).toBeTruthy();
        expect(result.type === Expression.type.addition).toBeTruthy();
        expect(Expression.matchRule(result, Expression.Rules.Integration.IGeneralFormula13b())).toBeTruthy();;
    });


    it('can evalutate an integral of general formula 14 of integral rules ', function () {
        var d = Expression.integral(Expression.power(Expression.sec('x'), 2), 'x');
        var called;
        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    called = true;
                    return x.rule.name() === Expression.RuleType.Integration.IGeneralFormula14a;
                });
            }
        });

        expect(Expression.matchRule(result, Expression.Rules.Integration.IGeneralFormula14b())).toBeTruthy();
    });


    it('can evalutate an integral of general formula 15 of integral rules ', function () {
        var d = Expression.integral(Expression.power(Expression.csc('x'), 2), 'x');
        var called;
        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    called = true;
                    return x.rule.name() === Expression.RuleType.Integration.IGeneralFormula15a;
                });
            }
        });
        //expect(called).toBeTruthy();
        expect(Expression.matchRule(result, Expression.Rules.Integration.IGeneralFormula15b())).toBeTruthy();;
    });


    it('can evalutate an integral of general formula 16 of integral rules ', function () {
        var d = Expression.integral(Expression.power(Expression.tan('x'), 2), 'x');
        var called;
        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    called = true;
                    return x.rule.name() === Expression.RuleType.Integration.IGeneralFormula16a;
                });
            }
        });
        //expect(called).toBeTruthy();
        expect(Expression.matchRule(result, Expression.Rules.Integration.IGeneralFormula16b())).toBeTruthy();;
    });

    it('can evalutate an integral of general formula 17 of integral rules ', function () {
        var d = Expression.integral(Expression.power(Expression.cot('x'), 2), 'x');
        var called;
        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    called = true;
                    return x.rule.name() === Expression.RuleType.Integration.IGeneralFormula17a;
                });
            }
        });
        //expect(called).toBeTruthy();
        expect(Expression.matchRule(result, Expression.Rules.Integration.IGeneralFormula17b())).toBeTruthy();;
    });

    it('can evalutate an integral of general formula 18 of integral rules ', function () {
        var d = Expression.integral(Expression.multiplication(Expression.sec('x'), Expression.tan('x')), 'x');
        var called;
        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    called = true;
                    return x.rule.name() === Expression.RuleType.Integration.IGeneralFormula18a;
                });
            }
        });
        //expect(called).toBeTruthy();
        expect(Expression.matchRule(result, Expression.Rules.Integration.IGeneralFormula18b())).toBeTruthy();;
    });

    it('can evalutate an integral of general formula 18 of integral rules ', function () {
        var d = Expression.integral(Expression.multiplication(Expression.sec(Expression.multiplication(2, 'x')), Expression.tan('x')), 'x');
        var called;
        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    called = true;
                    return x.rule.name() === Expression.RuleType.Integration.IGeneralFormula18a;
                });
            }
        });
        //expect(called).toBeTruthy();
        expect(!Expression.matchRule(result, Expression.Rules.Integration.IGeneralFormula18b())).toBeTruthy();;
    });



    it('can evalutate an integral of general formula 19 of integral rules ', function () {
        var d = Expression.integral(Expression.multiplication(Expression.csc('x'), Expression.cot('x')), 'x');
        var called;
        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    called = true;
                    return x.rule.name() === Expression.RuleType.Integration.IGeneralFormula19a;
                });
            }
        });
        //expect(called).toBeTruthy();
        expect(Expression.matchRule(result, Expression.Rules.Integration.IGeneralFormula19b())).toBeTruthy();;
    });

    it('can evalutate an integral of general formula 19 of integral rules ', function () {
        var d = Expression.integral(Expression.multiplication(Expression.csc(Expression.multiplication(2, 'x')), Expression.cot('x')), 'x');
        var called;
        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    called = true;
                    return x.rule.name() === Expression.RuleType.Integration.IGeneralFormula19a;
                });
            }
        });
        //expect(called).toBeTruthy();
        expect(!Expression.matchRule(result, Expression.Rules.Integration.IGeneralFormula19b())).toBeTruthy();;
    });

    it('can evalutate an integral of general formula 20 of integral rules ', function () {
        var d = Expression.integral(Expression.sec('x'), 'x');
        var called;
        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    called = true;
                    return x.rule.name() === Expression.RuleType.Integration.IGeneralFormula20a;
                });
            }
        });
        //expect(called).toBeTruthy();
        expect(Expression.matchRule(result, Expression.Rules.Integration.IGeneralFormula20b())).toBeTruthy();;
    });

    it('can evalutate an integral of general formula 21 of integral rules ', function () {
        var d = Expression.integral(Expression.csc('x'), 'x');
        var called;
        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    called = true;
                    return x.rule.name() === Expression.RuleType.Integration.IGeneralFormula21a;
                });
            }
        });
        //expect(called).toBeTruthy();
        expect(Expression.matchRule(result, Expression.Rules.Integration.IGeneralFormula21b())).toBeTruthy();;
    });

    it('can evalutate an integral of general formula 24 of integral rules ', function () {
        var d = Expression.integral(Expression.power(Expression.sin('x'), 2), Expression.variable('x'));
        var called;
        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    called = true;
                    return x.rule.name() === Expression.RuleType.Integration.IGeneralFormula24a;
                });
            }
        });
        //expect(called).toBeTruthy();
        expect(result.latex()).toBe('-11 / 2\\sin (x)\\cos (x) + 1 / 2(-1\\cos (x) + c)');;
    });


    it('can evalutate an integral of general formula 25 of integral rules ', function () {
        var d = Expression.integral(Expression.power(Expression.cos('x'), 2), Expression.variable('x'));
        var called;
        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    called = true;
                    return x.rule.name() === Expression.RuleType.Integration.IGeneralFormula25a;
                });
            }
        });
        //expect(called).toBeTruthy();
        console.log(result.latex())

        expect(result.latex()).toBe('1 / 2\\cos (x)\\sin (x) + 1 / 2(\\sin (x) + c)');
    });


    it('can evalutate an integral of general formula 26 of integral rules ', function () {
        var d = Expression.integral(Expression.sinh('x'), Expression.variable('x'));
        var called;
        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    called = true;
                    return x.rule.name() === Expression.RuleType.Integration.IGeneralFormula26a;
                });
            }
        });
        //expect(called).toBeTruthy();
        expect(Expression.matchRule(result, Expression.Rules.Integration.IGeneralFormula26b())).toBeTruthy();;

    });


    it('can evalutate an integral of general formula 27 of integral rules ', function () {
        var d = Expression.integral(Expression.cosh('x'), Expression.variable('x'));
        var called;
        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    called = true;
                    return x.rule.name() === Expression.RuleType.Integration.IGeneralFormula27a;
                });
            }
        });
        //expect(called).toBeTruthy();
        expect(Expression.matchRule(result, Expression.Rules.Integration.IGeneralFormula27b())).toBeTruthy();;

    });

    it('can evalutate an integral of general formula 28 of integral rules ', function () {
        var d = Expression.integral(Expression.tanh('x'), Expression.variable('x'));
        var called;
        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    called = true;
                    return x.rule.name() === Expression.RuleType.Integration.IGeneralFormula28a;
                });
            }
        });
        //expect(called).toBeTruthy();
        expect(Expression.matchRule(result, Expression.Rules.Integration.IGeneralFormula28b())).toBeTruthy();;

    });

    it('can evalutate an integral of general formula 29 of integral rules ', function () {
        var d = Expression.integral(Expression.coth('x'), Expression.variable('x'));
        var called;
        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    called = true;
                    return x.rule.name() === Expression.RuleType.Integration.IGeneralFormula29a;
                });
            }
        });
        //expect(called).toBeTruthy();
        expect(Expression.matchRule(result, Expression.Rules.Integration.IGeneralFormula29b())).toBeTruthy();;

    });

    it('can evalutate an integral of general formula 30 of integral rules ', function () {
        var d = Expression.integral(Expression.sech('x'), Expression.variable('x'));
        var called;
        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    called = true;
                    return x.rule.name() === Expression.RuleType.Integration.IGeneralFormula30a;
                });
            }
        });
        //expect(called).toBeTruthy();
        expect(Expression.matchRule(result, Expression.Rules.Integration.IGeneralFormula30b())).toBeTruthy();;
    });

    it('can evalutate an integral of general formula 31 of integral rules ', function () {
        var d = Expression.integral(Expression.csch('x'), Expression.variable('x'));
        var called;
        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    called = true;
                    return x.rule.name() === Expression.RuleType.Integration.IGeneralFormula31a;
                });
            }
        });
        //expect(called).toBeTruthy();
        expect(Expression.matchRule(result, Expression.Rules.Integration.IGeneralFormula31b())).toBeTruthy();;
    });

    it('can evalutate an integral of general formula 32 of integral rules ', function () {
        var d = Expression.integral(Expression.power(Expression.sech('x'), 2), Expression.variable('x'));
        var called;
        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    called = true;
                    return x.rule.name() === Expression.RuleType.Integration.IGeneralFormula32a;
                });
            }
        });
        //expect(called).toBeTruthy();
        expect(Expression.matchRule(result, Expression.Rules.Integration.IGeneralFormula32b())).toBeTruthy();;
    });

    it('can evalutate an integral of general formula 33 of integral rules ', function () {
        var d = Expression.integral(Expression.power(Expression.csch('x'), 2), Expression.variable('x'));
        var called;
        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    called = true;
                    return x.rule.name() === Expression.RuleType.Integration.IGeneralFormula33a;
                });
            }
        });
        //expect(called).toBeTruthy();
        expect(Expression.matchRule(result, Expression.Rules.Integration.IGeneralFormula33b())).toBeTruthy();;
    });

    it('can evalutate an integral of general formula 34 of integral rules ', function () {
        var d = Expression.integral(Expression.power(Expression.tanh('x'), 2), Expression.variable('x'));
        var called;
        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    called = true;
                    return x.rule.name() === Expression.RuleType.Integration.IGeneralFormula34a;
                });
            }
        });
        //expect(called).toBeTruthy();
        expect(Expression.matchRule(result, Expression.Rules.Integration.IGeneralFormula34b())).toBeTruthy();;
    });


    it('can evalutate an integral of general formula 35 of integral rules ', function () {
        var d = Expression.integral(Expression.power(Expression.coth('x'), 2), Expression.variable('x'));
        var called;
        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    called = true;
                    return x.rule.name() === Expression.RuleType.Integration.IGeneralFormula35a;
                });
            }
        });
        //expect(called).toBeTruthy();
        expect(Expression.matchRule(result, Expression.Rules.Integration.IGeneralFormula35b())).toBeTruthy();;
    });



    it('can evalutate an integral of general formula 36 of integral rules ', function () {
        var d = Expression.integral(Expression.multiplication(Expression.sech('x'), Expression.tanh('x')), Expression.variable('x'));
        var called;
        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    called = true;
                    return x.rule.name() === Expression.RuleType.Integration.IGeneralFormula36a;
                });
            }
        });
        //expect(called).toBeTruthy();
        expect(Expression.matchRule(result, Expression.Rules.Integration.IGeneralFormula36b())).toBeTruthy();;
    });

    it('can evalutate an integral of general formula 37 of integral rules ', function () {
        var d = Expression.integral(Expression.multiplication(Expression.csch('x'), Expression.coth('x')), Expression.variable('x'));
        var called;
        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    called = true;
                    return x.rule.name() === Expression.RuleType.Integration.IGeneralFormula37a;
                });
            }
        });
        //expect(called).toBeTruthy();
        expect(Expression.matchRule(result, Expression.Rules.Integration.IGeneralFormula37b())).toBeTruthy();;
    });

    it('can evalutate an integral of general formula 38 of integral rules ', function () {
        var d = Expression.integral(Expression.power(Expression.sinh('x'), 2), Expression.variable('x'));
        var called;
        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    called = true;
                    return x.rule.name() === Expression.RuleType.Integration.IGeneralFormula38a;
                });
            }
        });
        //expect(called).toBeTruthy();
        expect(Expression.matchRule(result, Expression.Rules.Integration.IGeneralFormula38b())).toBeTruthy();;
    });


    it('can evalutate an integral of general formula 39 of integral rules ', function () {
        var d = Expression.integral(Expression.power(Expression.cosh('x'), 2), Expression.variable('x'));
        var called;
        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    called = true;
                    return x.rule.name() === Expression.RuleType.Integration.IGeneralFormula39a;
                });
            }
        });
        //expect(called).toBeTruthy();
        expect(Expression.matchRule(result, Expression.Rules.Integration.IGeneralFormula39b())).toBeTruthy();;
    });


    it('can evalutate an integral of general formula 40 of integral rules ', function () {
        var d = Expression.integral(Expression.e('x'), Expression.variable('x'));
        var called;
        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    called = true;
                    return x.rule.name() === Expression.RuleType.Integration.IGeneralFormula40a;
                });
            }
        });
        //expect(called).toBeTruthy();
        expect(Expression.matchRule(result, Expression.Rules.Integration.IGeneralFormula40b())).toBeTruthy();;
    });

    it('can evalutate an integral of general formula 41 of integral rules ', function () {
        var d = Expression.integral(Expression.power('a', 'x'), Expression.variable('x'));
        var called;
        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    called = true;
                    return x.rule.name() === Expression.RuleType.Integration.IGeneralFormula41a;
                });
            }
        });
        //expect(called).toBeTruthy();
        expect(Expression.matchRule(result, Expression.Rules.Integration.IGeneralFormula41b())).toBeTruthy();;
    });


    it('can evalutate an integral of general formula 42 of integral rules ', function () {
        var d = Expression.integral(Expression.ln('x'), Expression.variable('x'));
        var called;
        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    called = true;
                    return x.rule.name() === Expression.RuleType.Integration.IGeneralFormula42a;
                });
            }
        });
        //expect(called).toBeTruthy();
        
        expect(result.latex()).toBe('x-1 - -1\\ln x + c');
        //expect(Expression.matchRule(result, Expression.Rules.Integration.IGeneralFormula42b())).toBeTruthy();;
    });



    it('can evalutate an integral of general formula 43 of integral rules ', function () {
        var d = Expression.integral(Expression.log('x', 'a'), Expression.variable('x'));
        var called;
        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    called = true;
                    return x.rule.name() === Expression.RuleType.Integration.IGeneralFormula43a;
                });
            }
        });
        //expect(called).toBeTruthy();
        expect(result.latex()).toBe("x / \\ln a-1 - -1\\ln x + c");
        // expect(Expression.matchRule(result, Expression.Rules.Integration.IGeneralFormula43b())).toBeTruthy();;
    });


    it('can evalutate an integral of general formula 44 of integral rules ', function () {
        var d = Expression.integral(Expression.multiplication('x', Expression.e(Expression.multiplication('a', 'x'))), Expression.variable('x'));
        var called;
        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    called = true;
                    return x.rule.name() === Expression.RuleType.Integration.IGeneralFormula44a;
                });
            }
        });
        //expect(called).toBeTruthy();
        result.latex();
        expect(Expression.matchRule(result, Expression.Rules.Integration.IGeneralFormula44b())).toBeTruthy();;
    });


    it('can evalutate an integral of general formula 45 of integral rules ', function () {
        var d = Expression.integral(Expression.division(
            Expression.e(Expression.multiplication('a', 'x')), 'x'), Expression.variable('x'));
        var called;
        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    called = true;
                    return x.rule.name() === Expression.RuleType.Integration.IGeneralFormula45a;
                });
            }
        });
        //expect(called).toBeTruthy();
        expect(Expression.matchRule(result, Expression.Rules.Integration.IGeneralFormula45b())).toBeTruthy();;
    });


    it('can evalutate an integral of general formula 45 of integral rules ', function () {
        var d = Expression.integral(Expression.division('x', Expression.e(Expression.multiplication('a', 'x'))), Expression.variable('x'));
        var called;
        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    called = true;
                    return x.rule.name() === Expression.RuleType.Integration.IGeneralFormula45a;
                });
            }
        });
        //expect(called).toBeTruthy();
        expect(!Expression.matchRule(result, Expression.Rules.Integration.IGeneralFormula45b())).toBeTruthy();;
    });


    it('can evalutate an integral of general formula 47 of integral rules ', function () {
        var d = Expression.integral(Expression.multiplication(
                    Expression.power('x', '3'),
                    Expression.e(Expression.multiplication('a', 'x'))
                ), Expression.variable('x'));
        var called;
        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    called = true;
                    return x.rule.name() === Expression.RuleType.Integration.IGeneralFormula47a;
                });
            }
        });
        //expect(called).toBeTruthy();
        console.log(result.latex());
        expect(result.latex()).toBe('e^ax1 / ax^{3} - e^ax1 / ax^{2} - 2 / a(e^a / a^{2}-1 - -1ax + c)3 / a');
        //expect(Expression.matchRule(result, Expression.Rules.Integration.IGeneralFormula47b())).toBeTruthy();;
    });


    it('can evalutate an integral of general formula 48 of integral rules ', function () {
        var d = Expression.integral(Expression.division(
                    Expression.e(Expression.multiplication('a', 'x')),
                    Expression.power('x', '2')
                ), Expression.variable('x'));
        var called;
        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    called = true;
                    return x.rule.name() === Expression.RuleType.Integration.IGeneralFormula48a;
                });
            }
        });
        //expect(called).toBeTruthy();
        expect(result.latex()).toBe('(-1e^ax / x + a(\\ln |x| + \\displaystyle\\sum_{i=1}^{Infinity} ax^{i} / i! + c)) + c');
        //expect(Expression.matchRule(result, Expression.Rules.Integration.IGeneralFormula48b())).toBeTruthy();;
    });

    it('can evalutate an integral of general formula 48 of integral rules ', function () {
        var d = Expression.integral(Expression.division(
                    Expression.power('x', '2'),
                    Expression.e(Expression.multiplication('a', 'x'))
                ), Expression.variable('x'));
        var called;
        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    called = true;
                    return x.rule.name() === Expression.RuleType.Integration.IGeneralFormula48a;
                });
            }
        });
        //expect(called).toBeTruthy();
        console.log(result.latex());
        expect(!Expression.matchRule(result, Expression.Rules.Integration.IGeneralFormula48b())).toBeTruthy();;
    });

    it('can evaluate a subtraction', function () {
        var result = Evaluator.evaluate(Expression.subtraction(5, 4));

        expect(result.partOrDefault(Expression.type.variable)).toBe(1);
    });


    it('can evaluate a subtraction', function () {
        var result = Evaluator.evaluate(Expression.subtraction(Expression.subtraction(5, 4), 4));

        expect(result.partOrDefault(Expression.type.variable)).toBe(-3);
    });

    it('can evalutate an integral of general formula 49 of integral rules ', function () {
        var d = Expression.integral(Expression.multiplication(
                Expression.power('x','n'),
                Expression.ln('x')
            ), Expression.variable('x'));

        var called;
        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    called = true;
                    return x.rule.name() === Expression.RuleType.Integration.IGeneralFormula49a;
                });
            }
        });

        expect(Expression.matchRule(result, Expression.Rules.Integration.IGeneralFormula49b())).toBeTruthy();;

    });

    it('can evaluate a derivative with the chain rule correctly', function () {
        var d = Expression.derivative(Expression.cos(Expression.sin('x')), 1, null, Expression.variable('x'));
        var called;
        var result = Evaluator.evaluate(d, {
            strategy: function (rules) {
                return rules.where(function (x) {
                    called = true;
                    return x.rule.name() === Expression.RuleType.Derivation.ChainRuleA;
                });
            }
        });
        console.log(result.latex());
        expect(result.latex()).toBe('-1\\cos (\\sin (x))\\cos (x)');;
    });
});
﻿describe("MEPH/math/jax/MathJax.spec.js", function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('MathJax can load its requirements', function (done) {
        MEPH.requires('MEPH.math.jax.MathJax').then(function () {
            return MEPHJax.ready().then(function () {
                expect(true).toBeTruthy();
            });
        }).catch(function () {
            expect(new Error('something went wrong with setting up MEPHJax')).caught();
        }).then(function (x) {
            done();
        });
    });

    it('MathJax can load J_\alpha(x)', function (done) {
        var dom = document.createElement('div');
        document.body.appendChild(dom);
        MEPH.requires('MEPH.math.jax.MathJax').then(function () {
            return MEPHJax.ready().then(function () {
                return MEPHJax.load('x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}.', dom)
                    .then(function (success) {
                        expect(success).toBeTruthy();
                        dom.parentNode.removeChild(dom);
                    });
            });
        }).catch(function () {
            expect(new Error('something went wrong with loading mathml')).caught();
        }).then(function (x) {
            done();
        });
    });

    it('MathJax can load \\int_ \\! f(x) \\, \\mathrm{d}x.', function (done) {
        var dom = document.createElement('div');
        document.body.appendChild(dom);
        MEPH.requires('MEPH.math.jax.MathJax').then(function () {
            return MEPHJax.ready().then(function () {
                return MEPHJax.load('\\int_ \\! f(x) \\, \\mathrm{d}x.', dom)
                    .then(function (success) {
                        expect(success).toBeTruthy();
                    });
            });
        }).catch(function (e) {
            expect(e).caught();
        }).then(function (x) {
            done();
        });
    });

    it('MathJax can load \\frac{f(x)}{y}', function (done) {
        var dom = document.createElement('div');
        document.body.appendChild(dom);
        MEPH.requires('MEPH.math.jax.MathJax', 'MEPH.math.Expression').then(function () {
            return MEPHJax.ready().then(function () {
                return MEPHJax.load(Expression.Rules.Integration.PowerIntegrate().latex(), dom)
                    .then(function (success) {
                        expect(success).toBeTruthy();
                    });
            });
        }).catch(function (e) {
            expect(e).caught();
        }).then(function (x) {
            done();
        });
    });
    
});﻿describe("MEPH/list/List.spec.js", function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('a list can be created', function (done) {
        MEPH.requires('MEPH.list.List').then(function () {
            var list = new MEPH.list.List();
            expect(list).theTruth('a list was not created');
        }).catch(function () {
            expect(new Error('something went wrong while creating a list')).caught();
        }).then(function (x) {
            done();
        });
    });

    it('a list can be bound to a source of data', function (done) {
        MEPH.requires('MEPH.util.Observable.observable').then(function () {
            return MEPH.create('MEPH.list.List').then(function ($class) {
                var list = new $class();
                list.source = [].interpolate(0, 10, function (i) {
                    var obj = { prop: 1 };
                    MEPH.util.Observable.observable(obj);
                    return obj;
                });
            })
        }).catch(function (error) {
            expect(new Error('something went wrong while creating a list')).caught();
        }).then(function (x) {
            done();
        });
    });





    it('will have templates assigned to the list', function (done) {
        var app,
            dom;
        MEPH.requires('MEPH.util.Observable.observable', 'MEPH.list.List', 'MEPHTests.helper.Application').then(function () {
            app = new MEPHTests.helper.Application();
            dom = app.createAppSpace(), div = document.createElement('div');
            div.innerHTML = '<list><template name="standard"><div data-bind=\'"innerHTML" : "c$.name"\'></div></template></list>';
            return app.create('MEPH.list.List', div.firstElementChild);
        }).then(function (results) {
            return app.loadViewObject([results], dom);
        }).then(function (results) {
            var list = results.first().classInstance,
                templates;

            templates = list.getListTemplates();
            expect(templates.length === 1).theTruth('No templates have be found');
            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(new Error('something went wrong while creating a list')).caught();
        }).then(function (x) {
            done();
        });
    });

    it('will render data to list, when source is set.', function (done) {
        var app,
            dom;
        MEPH.requires('MEPH.util.Observable', 'MEPH.list.List', 'MEPHTests.helper.Application').then(function () {
            app = new MEPHTests.helper.Application();
            dom = app.createAppSpace(), div = document.createElement('div');
            div.innerHTML = '<list><template name="standard"><div data-bind=\'"innerHTML" : "c$.name"\'></div></template></list>';
            return app.create('MEPH.list.List', div.firstElementChild);
        }).then(function (results) {
            return app.loadViewObject([results], dom);
        }).then(function (results) {
            var list = results.first().classInstance,
                templates,
                source, promise = Promise.resolve();
            source = [].interpolate(0, 10, function (index) {
                var obj = { prop: 1 };
                MEPH.util.Observable.observable(obj);
                return obj;
            });

            list.on('render', function (type, options) {
                promise = options.renderComplete.then(function () {
                    if (app) {
                        app.removeSpace();
                    }
                });
            });
            list.source = source;
            return promise;
        }).catch(function () {
            if (app) {
                app.removeSpace();
            }
            expect(new Error('did not render as expected')).caught();
        }).then(function (x) {
            done();
        });
    });

    it('will render data to list.', function (done) {
        var app,
            dom;
        MEPH.requires('MEPH.util.Observable', 'MEPH.list.List', 'MEPHTests.helper.Application').then(function () {
            app = new MEPHTests.helper.Application();
            dom = app.createAppSpace(), div = document.createElement('div');
            div.innerHTML = '<list><template name="standard"><div data-bind=\'"innerHTML" : "c$.name"\'></div></template></list>';
            return app.create('MEPH.list.List', div.firstElementChild);
        }).then(function (results) {
            return app.loadViewObject([results], dom);
        }).then(function (results) {
            var list = results.first().classInstance,
                promise = Promise.resolve(),
                source,
                templates;
            list.on('render', function (type, options) {
                promise = options.renderComplete.then(function () {
                    return list;
                });
            });
            source = [].interpolate(0, 10, function (index) {
                var obj = { prop: 1 };
                MEPH.util.Observable.observable(obj);
                return obj;
            });

            list.source = source;

            return promise;

        }).then(function (list) {
            expect(list.boundSource.length === 10).theTruth('The bound source wasnt connected to the list. ' + list.boundSource.length);
            if (app) {
                app.removeSpace();
            }
        }).catch(function () {
            if (app) {
                app.removeSpace();
            }
            expect(new Error('did not render as expected')).caught();
        }).then(function (x) {
            done();
        });
    });

    it('will render data to list, and handle updates.', function (done) {
        var app,
            dom;
        MEPH.requires('MEPH.util.Observable', 'MEPH.list.List', 'MEPHTests.helper.Application').then(function () {
            app = new MEPHTests.helper.Application();
            dom = app.createAppSpace(), div = document.createElement('div');
            div.innerHTML = '<list><template name="standard"><div data-bind=\'"innerHTML" : "c$.name"\'></div></template></list>';
            return app.create('MEPH.list.List', div.firstElementChild);
        }).then(function (results) {
            return app.loadViewObject([results], dom);
        }).then(function (results) {
            var list = results.first().classInstance,
                promise = Promise.resolve(),
                source,
                templates;
            source = MEPH.util.Observable.observable([].interpolate(0, 10, function (index) {
                var obj = { prop: 1 };
                MEPH.util.Observable.observable(obj);
                return obj;
            }));

            list.on('render', function (type, options) {
                promise = options.renderComplete.then(function () {
                    return list;
                });
            }, 1);

            list.source = source;

            return promise;

        }).then(function (list) {
            expect(list.boundSource.length === 10).theTruth('The bound source wasnt connected to the list. ' + list.boundSource.length);
            return list;
        }).then(function (list) {
            var promise = Promise.resolve();
            list.un(null, 1);
            list.on('render', function (type, options) {
                promise = options.renderComplete.then(function () {
                });
            }, 1);
            list.on('updatecomplete', function () {
                expect(list.boundSource.length === 9).theTruth('the list didnt update correctly');
                if (app) {
                    app.removeSpace();
                }
            });
            list.source.pop();
            return promise;

        }).catch(function (error) {
            if (app) {
                app.removeSpace();
            }
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });

    it('when the source is updated the added item will go to the correct position', function (done) {
        var app,
           dom;
        MEPH.requires('MEPH.util.Observable', 'MEPH.list.List', 'MEPHTests.helper.Application').then(function () {
            app = new MEPHTests.helper.Application();
            dom = app.createAppSpace(), div = document.createElement('div');
            div.innerHTML = '<list><template name="standard"><div data-bind=\'"innerHTML" : "c$.name"\'></div></template></list>';
            return app.create('MEPH.list.List', div.firstElementChild);
        }).then(function (results) {
            return app.loadViewObject([results], dom);
        }).then(function (results) {
            var list = results.first().classInstance,
                promise = Promise.resolve(),
                source,
                templates;
            source = MEPH.util.Observable.observable([].interpolate(0, 10, function (index) {
                var obj = { prop: 1 };
                MEPH.util.Observable.observable(obj);
                return obj;
            }));

            list.on('render', function (type, options) {
                promise = options.renderComplete.then(function () {
                    return list;
                });
            }, 1);

            list.source = source;

            return promise;

        }).then(function (list) {
            expect(list.boundSource.length === 10).theTruth('The bound source wasnt connected to the list. ' + list.boundSource.length);

            //    done();
            return list;
        }).then(function (list) {
            var promise = Promise.resolve(),
                newobject = { prop: 1 };
            MEPH.util.Observable.observable(newobject);;
            list.un(null, 1);
            list.on('render', function (type, options) {
                promise = options.renderComplete.then(function () {
                });
            }, 1);
            list.on('updatecomplete', function () {
                expect(list.boundSource.length === 11).theTruth('the list didnt update correctly');
                var boundInfo = list.getBoundSourceInfo(newobject);

                expect(list.getBoundSourceIndex(newobject) === 4).theTruth('The item in the list wasnt in the right place.');
                if (app) {
                    app.removeSpace();
                }
            });
            list.source.splice(4, 0, newobject);
            return promise;

        }).catch(function () {
            if (app) {
                app.removeSpace();
            }
            expect(new Error('did not render as expected')).caught();
        }).then(function (x) {
            done();
        });
    });

    it('will destroy all template objects when clearing the list ', function (done) {
        var app,
           dom;
        MEPH.requires('MEPH.util.Observable', 'MEPH.list.List', 'MEPHTests.helper.Application').then(function () {
            app = new MEPHTests.helper.Application();
            dom = app.createAppSpace(), div = document.createElement('div');
            div.innerHTML = '<list><template name="standard"><div data-bind=\'"innerHTML" : "c$.name"\'></div></template></list>';
            return app.create('MEPH.list.List', div.firstElementChild);
        }).then(function (results) {
            return app.loadViewObject([results], dom);
        }).then(function (results) {
            var list = results.first().classInstance,
                source,
                promise = Promise.resolve(),
                templates;

            list.on('render', function (type, options) {
                promise = options.renderComplete.then(function () {
                    return list;
                });
            });

            source = [].interpolate(0, 10, function (index) {
                var obj = { prop: 1 };
                MEPH.util.Observable.observable(obj);
                return obj;
            });

            list.source = source;

            return promise;

        }).then(function (list) {
            expect(list.boundSource.length === 10).theTruth('The bound source wasnt connected to the list.');
            var destroyed = 0;
            list.boundSource.foreach(function (x) {
                x.renderResult.foreach(function (y) {
                    y.classInstance.on('destroy', function () {
                        destroyed++;
                    });
                });
            });
            return list.clearList().then(function () {

                expect(destroyed === 10).theTruth('not all the controls templates were destroyed : destroyed :' + destroyed);
                expect(list.boundSource.length === 0).theTruth('the boundsource still has stuff in it.');
            });

        }).catch(function () {
            if (app) {
                app.removeSpace();
            }
            expect(new Error('did not render as expected')).caught();
        }).then(function (x) {
            done();
        });
    });

    it('can get list space ', function (done) {
        var app,
          dom;
        MEPH.requires('MEPH.util.Observable', 'MEPH.list.List', 'MEPHTests.helper.Application').then(function () {
            app = new MEPHTests.helper.Application();
            dom = app.createAppSpace(), div = document.createElement('div');
            div.innerHTML = '<list><template name="standard"><div data-bind=\'"innerHTML" : "c$.name"\'></div></template></list>';
            return app.create('MEPH.list.List', div.firstElementChild);
        }).then(function (results) {
            return app.loadViewObject([results], dom);
        }).then(function (results) {
            var list = results.first().classInstance,
                space;
            space = list.getListSpace();


            expect(space).theTruth('The space was not foudn.');
        }).catch(function () {
            if (app) {
                app.removeSpace();
            }
            expect(new Error('did not get the list space')).caught();
        }).then(function (x) {
            done();
        });
    });

    it('can get template for dataitem', function (done) {
        var app,
          dom;
        MEPH.requires('MEPH.util.Observable', 'MEPH.list.List', 'MEPHTests.helper.Application').then(function () {
            app = new MEPHTests.helper.Application();
            dom = app.createAppSpace(), div = document.createElement('div');
            div.innerHTML = '<list><template name="standard"><div data-bind=\'"innerHTML" : "c$.name"\'></div></template></list>';
            return app.create('MEPH.list.List', div.firstElementChild);
        }).then(function (results) {
            return app.loadViewObject([results], dom);
        }).then(function (results) {
            var list = results.first().classInstance,
                template;

            template = list.getTemplateForDataItem({ prop: 'data' });


            expect(template.getAttribute('name') === 'standard').theTruth('The template doesnt have the right name.');
        }).catch(function () {
            if (app) {
                app.removeSpace();
            }
            expect(new Error('Something went wrong when trying to find the template.')).caught();
        }).then(function (x) {
            done();
        });
    });

    it('when a template is handled by the list a class is generated which encompasses it', function (done) {
        var app,
          dom;
        MEPH.requires('MEPH.util.Observable', 'MEPH.list.List', 'MEPHTests.helper.Application').then(function () {
            app = new MEPHTests.helper.Application();
            dom = app.createAppSpace(), div = document.createElement('div');
            div.innerHTML = '<list><template name="standard"><div data-bind=\'"innerHTML" : "c$.name"\'></div></template></list>';
            return app.create('MEPH.list.List', div.firstElementChild);
        }).then(function (results) {
            return app.loadViewObject([results], dom);
        }).then(function (results) {
            expect(MEPH.generated.template.standard).theTruth('The class wasnt generated as expected.');
            MEPH.undefine('MEPH.generated.template.standard');
        }).catch(function (error) {
            expect(error).caught(); if (app) {
                app.removeSpace();
            }
            expect(new Error('Something went wrong when trying to find the template.')).caught();
        }).then(function (x) {
            done();
        });
    });

    it('when a templated item can access its parents functions, through list.', function (done) {
        var app,
            tochange,
            called,
          dom;
        MEPH.requires('MEPH.util.Observable', 'MEPH.list.List', 'MEPHTests.helper.Application').then(function () {
            app = new MEPHTests.helper.Application();
            dom = app.createAppSpace(), div = document.createElement('div');
            div.innerHTML = '<list><template name="standard2"><div data-bind=\'"innerHTML" : "c$.data.name | c$.list.callFunc"\'></div></template></list>';
            return app.create('MEPH.list.List', div.firstElementChild);
        }).then(function (results) {
            return app.loadViewObject([results], dom);
        }).then(function (results) {
            var result = results[0].classInstance;
            result.callFunc = function () {
                called = true;
            }
            result.source = MEPH.util.Observable.observable([]);
            tochange = { name: 'name' };
            result.source.push(tochange);
        }).then(function () {
            var toresolve,
                tofail,
                promise = new Promise(function (resolve, fail) {
                    toresolve = resolve;
                    tofail = fail;
                });
            setTimeout(function () {
                tochange.name = 'change';
                toresolve();
            }, 500);
            return promise;
        }).catch(function (error) {
            expect(error).caught(); if (app) {
                app.removeSpace();
                app = null;
            }
            expect(new Error('Something went wrong when trying to find the template.')).caught();
        }).then(function (x) {
            setTimeout(function () {
                if (app) {
                    app.removeSpace();
                    app = null;
                }
                expect(called).toBeTruthy();
                MEPH.undefine('MEPH.generated.template.standard');
                done();
            }, 1000);
        });
    });
});﻿describe("MEPH/pad/DrawingSurface.spec.js", function () {

    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create a DrawingSurface', function (done) {
        MEPH.create('MEPH.pad.DrawingSurface').then(function ($class) {
            var pad = new $class();
            expect(pad.$renderer).theTruth('the renderer is not created');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });;
    });

    it('on load the renderers canvas is set ', function (done) {

        MEPH.requires('MEPH.util.Observable', 'MEPH.pad.DrawingSurface', 'MEPHTests.helper.Application').then(function () {
            app = new MEPHTests.helper.Application();
            dom = app.createAppSpace(), div = document.createElement('div');
            div.innerHTML = '<drawingsurface></drawingsurface>';
            return app.create('MEPH.pad.DrawingSurface', div.firstElementChild);
        }).then(function (results) {
            return app.loadViewObject([results], dom);
        }).then(function (results) {
            var drawingSurface = results.first().classInstance;
            expect(drawingSurface.getRenderer().getCanvas()).theTruth('the canvas was not set on the renderer');


            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it('on mouse down a point is added to the list of drawing', function (done) {

        MEPH.requires('MEPH.util.Observable', 'MEPH.pad.DrawingSurface', 'MEPHTests.helper.Application').then(function () {
            app = new MEPHTests.helper.Application();
            dom = app.createAppSpace(), div = document.createElement('div');
            div.innerHTML = '<drawingsurface></drawingsurface>';
            return app.create('MEPH.pad.DrawingSurface', div.firstElementChild);
        }).then(function (results) {
            return app.loadViewObject([results], dom);
        }).then(function (results) {
            var drawingSurface = results.first().classInstance,
                canvas = drawingSurface.getRenderer().getCanvas();
            expect(drawingSurface.getRenderer().getCanvas()).theTruth('the canvas was not set on the renderer');

            canvas.dispatchEvent(MEPH.createEvent('mousedown', { pageX: 10, pageY: 10 }));
            if (app) {
                app.removeSpace();
            }
            expect(drawingSurface.painting).theTruth('the surface should be painting.');
            expect(drawingSurface.drawing.length === 1).theTruth('the drawing wasnt saved to the array');

        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });
    it('on mouse up painting should be false', function (done) {

        MEPH.requires('MEPH.util.Observable', 'MEPH.pad.DrawingSurface', 'MEPHTests.helper.Application').then(function () {
            app = new MEPHTests.helper.Application();
            dom = app.createAppSpace(), div = document.createElement('div');
            div.innerHTML = '<drawingsurface></drawingsurface>';
            return app.create('MEPH.pad.DrawingSurface', div.firstElementChild);
        }).then(function (results) {
            return app.loadViewObject([results], dom);
        }).then(function (results) {
            var drawingSurface = results.first().classInstance,
                canvas = drawingSurface.getRenderer().getCanvas();
            expect(drawingSurface.getRenderer().getCanvas()).theTruth('the canvas was not set on the renderer');

            canvas.dispatchEvent(MEPH.createEvent('mousedown', { pageX: 10, pageY: 10 }));
            expect(drawingSurface.painting).theTruth('the surface should be painting.');
            canvas.dispatchEvent(MEPH.createEvent('mouseup', { pageX: 10, pageY: 10 }));
            expect(!drawingSurface.painting).theTruth('the surface should not be painting.');
            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });
    it('on mouse leave painting should be false', function (done) {

        MEPH.requires('MEPH.util.Observable', 'MEPH.pad.DrawingSurface', 'MEPHTests.helper.Application').then(function () {
            app = new MEPHTests.helper.Application();
            dom = app.createAppSpace(), div = document.createElement('div');
            div.innerHTML = '<drawingsurface></drawingsurface>';
            return app.create('MEPH.pad.DrawingSurface', div.firstElementChild);
        }).then(function (results) {
            return app.loadViewObject([results], dom);
        }).then(function (results) {
            var drawingSurface = results.first().classInstance,
                canvas = drawingSurface.getRenderer().getCanvas();
            expect(drawingSurface.getRenderer().getCanvas()).theTruth('the canvas was not set on the renderer');

            canvas.dispatchEvent(MEPH.createEvent('mousedown', { pageX: 10, pageY: 10 }));
            expect(drawingSurface.painting).theTruth('the surface should be painting.');
            canvas.dispatchEvent(MEPH.createEvent('mouseleave', { pageX: 10, pageY: 10 }));
            expect(!drawingSurface.painting).theTruth('the surface should not be painting.');
            expect(drawingSurface.strokes.length === 1).theTruth('the drawing wasnt saved to the array');
            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it('on mouse move ', function (done) {
        MEPH.requires('MEPH.util.Observable', 'MEPH.pad.DrawingSurface', 'MEPHTests.helper.Application').then(function () {
            app = new MEPHTests.helper.Application();
            dom = app.createAppSpace(), div = document.createElement('div');
            div.innerHTML = '<drawingsurface></drawingsurface>';
            return app.create('MEPH.pad.DrawingSurface', div.firstElementChild);
        }).then(function (results) {
            return app.loadViewObject([results], dom);
        }).then(function (results) {
            var drawingSurface = results.first().classInstance,
                canvas = drawingSurface.getRenderer().getCanvas();

            canvas.dispatchEvent(MEPH.createEvent('mousedown', { pageX: 10, pageY: 10 }));
            expect(drawingSurface.painting).theTruth('the surface should be painting.');
            canvas.dispatchEvent(MEPH.createEvent('mousemove', { pageX: 120, pageY: 10 }));
            expect(drawingSurface.painting).theTruth('the surface should not be painting.');
            canvas.dispatchEvent(MEPH.createEvent('mouseup', { pageX: 10, pageY: 10 }));
            expect(!drawingSurface.painting).theTruth('the surface should not be painting.');
            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it(' can get drawing instructions for renderer ', function (done) {
        MEPH.requires('MEPH.util.Observable', 'MEPH.pad.DrawingSurface', 'MEPHTests.helper.Application').then(function () {
            app = new MEPHTests.helper.Application();
            dom = app.createAppSpace(), div = document.createElement('div');
            div.innerHTML = '<drawingsurface></drawingsurface>';
            return app.create('MEPH.pad.DrawingSurface', div.firstElementChild);
        }).then(function (results) {
            return app.loadViewObject([results], dom);
        }).then(function (results) {
            var drawingSurface = results.first().classInstance, instructions,
                canvas = drawingSurface.getRenderer().getCanvas();

            canvas.dispatchEvent(MEPH.createEvent('mousedown', { pageX: 10, pageY: 10 }));
            canvas.dispatchEvent(MEPH.createEvent('mousemove', { pageX: 120, pageY: 10 }));
            canvas.dispatchEvent(MEPH.createEvent('mouseup', { pageX: 10, pageY: 10 }));

            instructions = drawingSurface.getInstructions();
            expect(instructions.length === 0).theTruth();
            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it(' surface will request an animation frame and draw to the canvas', function (done) {

        MEPH.requires('MEPH.util.Observable', 'MEPH.pad.DrawingSurface', 'MEPHTests.helper.Application').then(function () {
            app = new MEPHTests.helper.Application();
            dom = app.createAppSpace(), div = document.createElement('div');
            div.innerHTML = '<drawingsurface></drawingsurface>';
            return app.create('MEPH.pad.DrawingSurface', div.firstElementChild);
        }).then(function (results) {
            return app.loadViewObject([results], dom);
        }).then(function (results) {
            var drawingSurface = results.first().classInstance, instructions,
                canvas = drawingSurface.getRenderer().getCanvas();

            canvas.dispatchEvent(MEPH.createEvent('mousedown', { pageX: 10, pageY: 10 }));
            canvas.dispatchEvent(MEPH.createEvent('mousemove', { pageX: 120, pageY: 10 }));
            canvas.dispatchEvent(MEPH.createEvent('mouseup', { pageX: 10, pageY: 10 }));

            drawingSurface.draw();
            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });
});﻿describe("MEPH/ioc/Container.spec.js", function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('ioc services are available.', function (done) {
        MEPH.requires('MEPH.ioc.Container').then(function () {
            expect(MEPH.ioc.Container).theTruth('The IOC Container is not available');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    })

    it(' services can be registered with the container', function (done) {
        //Arrange
        MEPH.requires('MEPH.ioc.Container').then(function () {
            //Act
            return MEPH.IOC.register({
                name: 'serviceName',
                type: 'serviceType',
                config: 'serviceConfig'
            }).then(function () {
                var services = MEPH.IOC.getServices();
                expect(services.first(function (x) { return x.name === 'serviceName' })).theTruth('The service was not found');

                MEPH.IOC.unregister('serviceName');

            });
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            MEPH.IOC.clearServices();
            done();
        });
    });

    it('services can be unregistered', function (done) {
        //Arrange
        MEPH.requires('MEPH.ioc.Container').then(function () {
            //Act
            return MEPH.IOC.register({
                name: 'serviceName',
                type: 'serviceType',
                config: 'serviceConfig'
            }).then(function () {
                var services = MEPH.IOC.getServices();
                expect(services.first().name === 'serviceName').theTruth('The service was not found');
                MEPH.IOC.unregister('serviceName');

            });

        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            MEPH.IOC.clearServices();
            done();
        });
    });

    it(' a service can be registered twice, but will raise an event when changed', function (done) {
        MEPH.requires('MEPH.ioc.Container', 'MEPH.Constants').then(function () {
         
                var changed,
                    id = MEPH.subscribe(MEPH.Constants.serviceTypeChanged, function (options) {
                        changed = true;
                    });
                MEPH.IOC.register({
                    name: 'servicename',
                    type: 'serviceType',
                    config: 'serviceconfig'
                }).then(function () {
                    return MEPH.IOC.register({
                        name: 'servicename',
                        type: 'serviceType2',
                        config: 'serviceconfig'
                    });
                }).then(function () {
                    expect(changed).theTruth('The service change wasnt registered.');
                    MEPH.IOC.unregister('servicename');
                }); 
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            MEPH.IOC.clearServices();
            done();
        });
    });
});﻿describe("MEPH/input/Input.spec.js", function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it("Creates a input.", function (done) {
        //Arrange

        //Act
        MEPH.create('MEPH.input.Input').then(function ($class) {
            //Assert
            var input = new MEPH.input.Input(),
                template;

            var newinput = new $class();
            expect(input !== null).toBeTruthy();
            template = MEPH.getDefinedTemplate('MEPH.input.Input');
            expect(template).toBeTruthy();
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });

    });

    it('creates a text input field', function (done) {
        //Arrange
        MEPH.requires('MEPH.input.Text').then(function () {
            return MEPH.create('MEPH.input.Text').then(function ($class) {
                var input = new $class();
            })
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });


    it(' can render an icon button', function (done) {
        //Arrange
        var app, div,
          dom;
        MEPH.requires('MEPH.input.Text', 'MEPHTests.helper.Application').then(function () {
            app = new MEPHTests.helper.Application();
            dom = app.createAppSpace(), div = document.createElement('div');
            div.innerHTML = '<text></text>';
            return app.create('MEPH.input.Text', div.firstElementChild);
        }).then(function (results) {
            return app.loadViewObject([results], dom);
        }).then(function (results) {
            var dom,
                iconbutton = results.first().classInstance;
            ///Assert
            dom = iconbutton.querySelector('input');

            expect(dom).theTruth('the input wasnt found.');
            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        })
    });

    it(' can set the descriptionCls', function (done) {
        //Arrange
        var app, div,
          dom;
        MEPH.requires('MEPH.input.Text', 'MEPHTests.helper.Application').then(function () {
            app = new MEPHTests.helper.Application();
            dom = app.createAppSpace(), div = document.createElement('div');
            div.innerHTML = '<text icon="fakeicon" color="Red" size="X2"></text>';
            return app.create('MEPH.button.IconButton', div.firstElementChild);
        }).then(function (results) {
            return app.loadViewObject([results], dom);
        }).then(function (results) {
            var iconbutton = results.first().classInstance;
            ///Assert
            expect(iconbutton.size === 'X2').theTruth('the icon size wasnt set correctly');
            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        })
    });

});﻿/**
 * @class MEPH.identity.IdentityProvider
 **/
MEPH.define('MEPH.identity.IdentityProvider', {
    requires: [],
    properties: {
        promise: null,
        $registeredProviders: null,
        options: null,
        providers: null,
        isReady: false
    },
    initialize: function (options) {
        var me = this;
        MEPH.Events(me);
        me.providers = options.providers;
        me.promise = Promise.resolve();
    },
    getProviders: function () {
        var me = this;
        return me.$registeredProviders;
    },
    getNameSources: function (observableArray) {
        var me = this;
        return me.get('name', observableArray);
        //return me.ready().then(function (registeredProviders) {
        //    return registeredProviders.select(function (obj) {
        //        return obj.p.property('name');
        //    });
        //}).then(function (promises) {
        //    promises.foreach(function (promise) {
        //        promise.then(function (obj) {
        //            observableArray.removeWhere(function (x) {
        //                return x.provider === obj.provider;
        //            });
        //            if (obj.value !== null && obj.value !== undefined) {
        //                obj.label = obj.value + ' (' + obj.type + ')';
        //                observableArray.push(obj);
        //            }
        //        })
        //    })
        //});
    },
    get: function (property, observableArray) {
        var me = this;

        //me.promise = me.promise.then(function () {
        return me.ready().then(function (registeredProviders) {
            return registeredProviders.select(function (obj) {
                return obj.p.property(property);
            });
        }).then(function (promises) {
            promises.foreach(function (promise) {
                promise.then(function (obj) {
                    observableArray.removeWhere(function (x) {
                        return x.provider === obj.provider;
                    });
                    if (obj.value !== null && obj.value !== undefined) {
                        obj.label = obj.value + ' (' + obj.type + ')';
                        observableArray.push(obj);
                    }
                })
            })
        });
        //});

        //return me.promise;
    },
    ready: function () {
        var me = this;
        if (me.readypromise) {
            return me.readypromise;
        }
        me.readypromise = (Promise.resolve().then(function (t) {
            if (me.$registeredProviders && me.$registeredProviders.length) {
                return me.$registeredProviders;
            }
            return Promise.all(me.providers.select(function (provider) {
                return MEPH.create(provider.type).then(function ($class) {
                    var p = new $class(provider.args);
                    return p.ready().then(function (key) {
                        return {
                            p: p,
                            type: provider.type,
                            key: key
                        };
                    });
                })
            }));
        }).then(function (providers) {
            me.$registeredProviders = providers;
            me.fire('isready', { isready: true })
            return me.$registeredProviders;
        }));
        return me.readypromise;
    }
})﻿describe("MEPH/identity/IdentityProvider.spec.js", 'MEPH.identity.IdentityProvider', function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create an identity provider.', function (done) {
        //Arrange
        MEPH.create('MEPH.identity.IdentityProvider').then(function ($class) {
            //Act
            var instance = new $class({ providers: [] });

            //Assert
            expect(instance).theTruth('an identity provider could not be created.');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });

    it('can load providers ', function (done) {
        var ip = new MEPH.identity.IdentityProvider({
            providers: [{
                type: 'MEPH.mobile.providers.identity.FacebookProvider',
                args: {
                    appId: '414388695382971'//,
                    //loginbtn: '#facebooklogin'
                }
            }]
        });
        window.FB = {
            init: function () {
            },
            getLoginStatus: function (callback) {
                callback({ status: 'connected' });
            }
        }
        MEPH.mobile.providers.identity.FacebookProvider.libraryLoaded = true;
        ip.ready().then(function (t) {
            expect(ip.providers.length === 1).toBeTruthy();
        }).catch(function (e) {
            expect(e).caught();
        }).then(done);
    })
});﻿describe("MEPH/graph/Connection.spec.js", function () {
    var createConnectionWithNodes = function () {
        var connection = new MEPH.graph.Connection();
        var nodecount = 10;
        var nodes = [].interpolate(0, nodecount, function (x) {
            var node = new MEPH.graph.Node();
            node.setId(MEPH.GUID());
            return node;
        });;
        connection.addNodes(nodes.select(function (x) { return x; }));
        return connection;
    };
    var GraphTest = {
        createConnectionWithNodes: createConnectionWithNodes,

        createEvent: function (type, options) {
            var evt = new Event(type);
            for (var i in options) {
                evt[i] = options[i];
            }
            return evt;
        },
        createCanvas: function (height, width) {
            height = height || 300;
            width = width || 400;
            var canvas = document.createElement('canvas');
            document.body.appendChild(canvas);
            canvas.height = height;
            canvas.width = width;
            return canvas;
        },
        createGraphWithNodesAndConnections: function (count) {
            var graph = new MEPH.graph.Graph();
            var nodecount = count || 10;
            var nodes = [].interpolate(0, nodecount, function (x, index) {
                var node = new MEPH.graph.Node();
                node.setId(MEPH.GUID());
                node.appendData({
                    title: 'Node ' + x,
                    id: MEPH.GUID(),
                    nodeInputs: [].interpolate(0, 3, function (x) {
                        return {
                            title: 'Input ' + x,
                            type: x,
                            id: MEPH.GUID()
                        }
                    }),
                    nodeOutputs: [].interpolate(0, 3, function (x) {
                        return {
                            title: 'Output ' + x,
                            type: x,
                            id: MEPH.GUID()
                        }
                    })
                });
                node.setPosition(x * 10, x * 10, x * 10);
                return node;
            });;
            var connection = new MEPH.graph.Connection();
            connection.addNodes(nodes);
            nodes.foreach(function (node) {
                var zone = node.getZones().nth(8);
                if (zone) {
                    connection.addZone(zone);
                }
            });
            graph.addConnection(connection);
            graph.addNodes(nodes);
            return graph;
        },
        createGraph: function () {
            var graph = new MEPH.graph.Graph();
            var nodecount = 10;
            var nodes = [].interpolate(0, nodecount, function (x) {
                var node = new MEPH.graph.Node();
                node.setId(MEPH.GUID());
                return node;
            });;
            graph.addNodes(nodes);
            return graph;
        },
        createNode: function () {
            var node = new MEPH.graph.Node();
            node.setId(MEPH.GUID());
            return node;
        }
    };
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });
    afterEach(function () {

        var canvases = MEPHArray.convert(document.querySelectorAll('canvas'));
        canvases.foreach(function (x) {
            if (x && x.parentNode)
                return x.parentNode.removeChild(x);
        })
    });


    it("can create a connection", function (done) {
        //Arrange

        //Act
        MEPH.create('MEPH.graph.Connection').then(function ($class) {
            //Assert
            var input = new $class();

            expect(input).toBeTruthy();

        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });

    it("Create hyper link between nodes", function (done) {
        //Arrange

        //Act
        MEPH.requires('MEPH.graph.Graph', 'MEPH.graph.Connection').then(function () {
            return MEPH.create('MEPH.graph.Node').then(function ($class) {
                var connection = new MEPH.graph.Connection();
                var nodecount = 10;
                var nodes = [].interpolate(0, nodecount, function (x) {
                    var node = new MEPH.graph.Node();
                    node.setId(MEPH.GUID());
                    return node;
                });;
                connection.addNodes(nodes.select(function (x) { return x; }));


                expect(nodecount === connection.nodes.length).toBeTruthy();


            }).catch(function (error) {
                expect(error).caught();
            }).then(function (x) {
                done();
            })
        });
    });

    it("get nodes in connection", function (done) {
        //Arrange

        //Act
        MEPH.requires('MEPH.graph.Graph', 'MEPH.graph.Connection', 'MEPH.graph.Node').then(function () {
            //Arrange
            var connection = new MEPH.graph.Connection();
            var nodecount = 10;
            var nodes = [].interpolate(0, nodecount, function (x) {
                var node = new MEPH.graph.Node();
                node.setId(MEPH.GUID());
                return node;
            });;
            connection.addNodes(nodes.select(function (x) { return x; }));

            //Act
            var nodes = connection.getNodes();


            expect(nodecount === nodes.length).toBeTruthy();


        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        })
    });


    it("remove node from connection", function (done) {
        //Arrange

        //Act
        MEPH.requires('MEPH.graph.Graph', 'MEPH.graph.Connection', 'MEPH.graph.Node').then(function () {
            //Arrange
            var connection = GraphTest.createConnectionWithNodes();
            var orignallength = connection.getNodes().length;
            var node = connection.getNodes().first();

            //Act
            connection.removeNode(node);

            //Assert
            expect(connection.getNodes().length == orignallength - 1).toBeTruthy();


        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        })
    });

    it("add node to existing connection", function (done) {
        //Arrange

        //Act
        MEPH.requires('MEPH.graph.Graph', 'MEPH.graph.Connection', 'MEPH.graph.Node').then(function () {
            //Arrange
            var connection = GraphTest.createConnectionWithNodes();
            var orglength = connection.getNodes().length;
            var node = GraphTest.createNode();

            //Act
            connection.addNode(node);

            //Assert
            expect(connection.getNodes().length == orglength + 1).toBeTruthy();


        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        })
    });

    it("set connection id", function (done) {
        //Arrange

        //Act
        MEPH.requires('MEPH.graph.Graph', 'MEPH.graph.Connection', 'MEPH.graph.Node').then(function () {
            //Arrange
            var connection = new MEPH.graph.Connection();

            //Act
            connection.setId(MEPH.GUID());

            //Assert
            //Assert
            expect(connection.getId()).toBeTruthy();


        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        })
    });

    it("Add connection to graph", function (done) {
        //Arrange

        //Act
        MEPH.requires('MEPH.graph.Graph', 'MEPH.graph.Connection', 'MEPH.graph.Node').then(function () {
            var graph = GraphTest.createGraph();

            //Act
            graph.addConnection(new MEPH.graph.Connection());

            //Assert
            expect(graph.getConnections().length === 1).toBeTruthy();


        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        })
    });

    it("remove connection", function (done) {
        //Arrange

        //Act
        MEPH.requires('MEPH.graph.Graph', 'MEPH.graph.Connection', 'MEPH.graph.Node').then(function () {
            //Arrange
            var graph = GraphTest.createGraphWithNodesAndConnections();
            var connection = graph.getConnections().first();
            var connectioncount = graph.getConnections().length;
            //Act
            var result = graph.removeConnection(connection);

            //Assert
            expect(connectioncount - 1 === graph.getConnections().length).toBeTruthy();
            expect(result).toBeTruthy();
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        })
    });

    it("get distance from connection", function (done) {
        MEPH.requires('MEPH.graph.ActiveZone',
            'MEPH.graph.Graph',
            'MEPH.graph.Connection',
            'MEPH.graph.Node').then(function () {
                //Arrange 
                var graph = GraphTest.createGraphWithNodesAndConnections(2);
                var node = graph.getNodes()[0];
                var node2 = graph.getNodes()[1];
                var zone = new MEPH.graph.ActiveZone();
                zone.setPosition(10, 10, 10);
                node.addZone(zone);


                var zone2 = new MEPH.graph.ActiveZone();
                zone2.setPosition(110, 10, 10);
                node.addZone(zone2);

                var connection = graph.getConnections()[0];

                connection.addZone(zone);
                connection.addZone(zone2);
                connection.setConnectionDetectionDepth(1);

                //Act
                var distance = connection.distanceFrom({ x: 100, y: 100 });

                //Assert
                expect(distance).toBeTruthy();
            }).catch(function (error) {
                expect(error).caught();
            }).then(function (x) {
                done();
            })
    });


    it("Detect closest connection to click", function (done) {
        MEPH.requires('MEPH.graph.ActiveZone',
            'MEPH.graph.Graph',
            'MEPH.graph.Connection',
            'MEPH.graph.Node').then(function () {
                //Arrange
                var graphviewport = new MEPH.graph.GraphViewPort();
                var graph = GraphTest.createGraphWithNodesAndConnections(2);
                var graphrenderer = new MEPH.graph.GraphRenderer();
                var connectionrenderer = new MEPH.graph.renderer.ConnectionRenderer();
                var blenderNode = new MEPH.graph.renderer.BlenderNode(graphviewport);

                var connectionHandler = new MEPH.graph.ConnectionHandler();
                connectionHandler.setGraph(graph);
                graphviewport.setConnectionHandler(connectionHandler);

                graphviewport.setup('body', { width: 600, height: 400 });
                graphrenderer.setNodeRenderer(blenderNode);
                graphrenderer.setConnectionRenderer(connectionrenderer);
                graphrenderer.setGraph(graph);
                graphrenderer.setViewPort(graphviewport);
                graphrenderer.use('viewport');
                graphviewport.setGraph(graph);
                graphrenderer.render();
                var startconnection;
                var zone = graphviewport.getActiveZones().first(function (item) {
                    return item.zone.getZoneType() === MEPH.graph.ActiveZone.type.connector;
                }).zone;
                var zone2 = graphviewport.getActiveZones().second(function (item) {
                    return item.zone.getZoneType() === MEPH.graph.ActiveZone.type.connector;
                }).zone;
                zone.getDom().dispatchEvent(GraphTest.createEvent('click', {}));
                zone2.getDom().dispatchEvent(GraphTest.createEvent('click', {}));


                //Act
                var handled;

                graphviewport.getMask().dispatchEvent(GraphTest.createEvent('mousemove', {
                    x: 3,
                    y: 4
                }));
                //Assert
                graphviewport.destroy();
            }).catch(function (error) {
                expect(error).caught();
            }).then(function (x) {
                done();
            })
    });

    it("Add selected connection", function (done) {
        MEPH.requires('MEPH.graph.ActiveZone',
            'MEPH.graph.Graph',
            'MEPH.graph.Connection',
            'MEPH.graph.Node').then(function () {

                //Arrange
                var graphviewport = new MEPH.graph.GraphViewPort();
                var graph = GraphTest.createGraphWithNodesAndConnections(2);
                var graphrenderer = new MEPH.graph.GraphRenderer();
                var connectionrenderer = new MEPH.graph.renderer.ConnectionRenderer();
                var blenderNode = new MEPH.graph.renderer.BlenderNode(graphviewport);

                var connectionHandler = new MEPH.graph.ConnectionHandler();
                connectionHandler.setGraph(graph);
                graphviewport.setConnectionHandler(connectionHandler);

                graphviewport.setup('body', { width: 600, height: 400 });
                graphrenderer.setNodeRenderer(blenderNode);
                graphrenderer.setConnectionRenderer(connectionrenderer);
                graphrenderer.setGraph(graph);
                graphrenderer.setViewPort(graphviewport);
                graphrenderer.use('viewport');
                graphviewport.setGraph(graph);
                graphrenderer.render();
                var startconnection;
                var zone = graphviewport.getActiveZones().first(function (item) {
                    return item.zone.getZoneType() === MEPH.graph.ActiveZone.type.connector;
                }).zone;
                var zone2 = graphviewport.getActiveZones().second(function (item) {
                    return item.zone.getZoneType() === MEPH.graph.ActiveZone.type.connector;
                }).zone;
                zone.getDom().dispatchEvent(GraphTest.createEvent('click', {}));
                zone2.getDom().dispatchEvent(GraphTest.createEvent('click', {}));


                //Act
                var handled;
                graphviewport.selectConnectionOnClick = true;
                graphviewport.getMask().dispatchEvent(GraphTest.createEvent('click', {
                    x: 3,
                    y: 4
                }));
                //Assert
                graphviewport.destroy();
                //Assert.isTrue(graphviewport.getSelectedConnections().length === 1);

            }).catch(function (error) {
                expect(error).caught();
            }).then(function (x) {
                done();
            })
    });

    it("Remove selected connection", function (done) {
        MEPH.requires('MEPH.graph.ActiveZone',
            'MEPH.graph.Graph',
            'MEPH.graph.GraphViewPort',
            'MEPH.graph.ConnectionHandler',
            'MEPH.graph.GraphRenderer',
            'MEPH.graph.renderer.ConnectionRenderer',
            'MEPH.graph.renderer.BlenderNode',
            'MEPH.graph.Connection',
            'MEPH.graph.Node').then(function () {

                //Arrange
                var graphviewport = new MEPH.graph.GraphViewPort();
                var graph = GraphTest.createGraphWithNodesAndConnections(2);
                var graphrenderer = new MEPH.graph.GraphRenderer();
                var connectionrenderer = new MEPH.graph.renderer.ConnectionRenderer();
                var blenderNode = new MEPH.graph.renderer.BlenderNode(graphviewport);

                var connectionHandler = new MEPH.graph.ConnectionHandler();
                connectionHandler.setGraph(graph);
                graphviewport.setConnectionHandler(connectionHandler);

                graphviewport.setup('body', { width: 600, height: 400 });
                graphrenderer.setNodeRenderer(blenderNode);
                graphrenderer.setConnectionRenderer(connectionrenderer);
                graphrenderer.setGraph(graph);
                graphrenderer.setViewPort(graphviewport);
                graphrenderer.use('viewport');
                graphviewport.setGraph(graph);
                graphrenderer.render();
                var startconnection;
                var zone = graphviewport.getActiveZones().first(function (item) {
                    return item.zone.getZoneType() === MEPH.graph.ActiveZone.type.connector;
                }).zone;
                var zone2 = graphviewport.getActiveZones().second(function (item) {
                    return item.zone.getZoneType() === MEPH.graph.ActiveZone.type.connector;
                }).zone;
                zone.getDom().dispatchEvent(GraphTest.createEvent('click', {}));
                zone2.getDom().dispatchEvent(GraphTest.createEvent('click', {}));
                graphviewport.selectConnectionOnClick = true;
                graphviewport.getMask().dispatchEvent(GraphTest.createEvent('click', {
                    x: 3,
                    y: 4
                }));


                //Act
                graph.removeConnections(graphviewport.getSelectedConnections());
                //Assert
                graphviewport.destroy();
                expect(graphviewport.getSelectedConnections().length === 0).toBeTruthy();
            }).catch(function (error) {
                expect(error).caught();
            }).then(function (x) {
                done();
            })
    });
});﻿describe("MEPH/graph/Node.spec.js", function () {
    var createConnectionWithNodes = function () {
        var connection = new MEPH.graph.Connection();
        var nodecount = 10;
        var nodes = [].interpolate(0, nodecount, function (x) {
            var node = new MEPH.graph.Node();
            node.setId(MEPH.GUID());
            return node;
        });;
        connection.addNodes(nodes.select(function (x) { return x; }));
        return connection;
    };
    var GraphTest = {

        createConnectionWithNodes: createConnectionWithNodes,

        createEvent: function (type, options) {
            var evt = new Event(type);
            for (var i in options) {
                evt[i] = options[i];
            }
            return evt;
        },
        createCanvas: function (height, width) {
            height = height || 300;
            width = width || 400;
            var canvas = document.createElement('canvas');
            document.body.appendChild(canvas);
            canvas.height = height;
            canvas.width = width;
            return canvas;
        },
        createGraphWithNodesAndConnections: function (count) {
            var graph = new MEPH.graph.Graph();
            var nodecount = count || 10;
            var nodes = [].interpolate(0, nodecount, function (x, index) {
                var node = new MEPH.graph.Node();
                node.setId(MEPH.GUID());
                node.appendData({
                    title: 'Node ' + x,
                    id: MEPH.GUID(),
                    nodeInputs: [].interpolate(0, 3, function (x) {
                        return {
                            title: 'Input ' + x,
                            type: x,
                            id: MEPH.GUID()
                        }
                    }),
                    nodeOutputs: [].interpolate(0, 3, function (x) {
                        return {
                            title: 'Output ' + x,
                            type: x,
                            id: MEPH.GUID()
                        }
                    })
                });
                node.setPosition(x * 10, x * 10, x * 10);
                return node;
            });;
            var connection = new MEPH.graph.Connection();
            connection.addNodes(nodes);
            nodes.foreach(function (node) {
                var zone = node.getZones().nth(8);
                if (zone) {
                    connection.addZone(zone);
                }
            });
            graph.addConnection(connection);
            graph.addNodes(nodes);
            return graph;
        },
        createGraph: function () {
            var graph = new MEPH.graph.Graph();
            var nodecount = 10;
            var nodes = [].interpolate(0, nodecount, function (x) {
                var node = new MEPH.graph.Node();
                node.setId(MEPH.GUID());
                return node;
            });;
            graph.addNodes(nodes);
            return graph;
        },
        createNode: function () {
            var node = new MEPH.graph.Node();
            node.setId(MEPH.GUID());
            return node;
        }
    };
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    afterEach(function () {

        var canvases = MEPHArray.convert(document.querySelectorAll('canvas'));
        canvases.foreach(function (x) {
            if (x && x.parentNode)
                return x.parentNode.removeChild(x);
        })
    });

    it("can create a node", function (done) {
        //Arrange

        //Act
        MEPH.create('MEPH.graph.Node').then(function ($class) {
            //Assert
            var input = new $class();

            expect(input).toBeTruthy();

        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });
    it("Set node Id", function (done) {
        //Arrange

        //Act
        MEPH.create('MEPH.graph.Node').then(function ($class) {
            //Assert
            var id = 'nodeid';
            var node = new $class();
            node.setId(id);
            expect(id === node.getId()).toBeTruthy();

            expect(node).toBeTruthy();

        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });
    it("Get node Id", function (done) {
        //Arrange

        //Act
        MEPH.create('MEPH.graph.Node').then(function ($class) {
            //Assert
            var id = 'nodeid';
            var node = new $class();
            node.setId(id);
            expect(id === node.getId()).toBeTruthy();

            expect(node).toBeTruthy();

        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });

    it("Get node by id", function (done) {
        //Arrange

        //Act
        MEPH.requires('MEPH.graph.Graph').then(function () {
            return MEPH.create('MEPH.graph.Node').then(function ($class) {
                //Assert
                var graph = new MEPH.graph.Graph();
                var guid = MEPH.GUID();
                var node = new $class();
                node.setId(guid);
                graph.addNode(node);
                var gotnode = graph.getNode(guid);

                expect(guid === node.getId()).toBeTruthy();

                //Assert 
                expect(gotnode === node).toBeTruthy();

            }).catch(function (error) {
                expect(error).caught();
            }).then(function (x) {
                done();
            })
        });;
    });
    it("remove node from graph", function (done) {
        //Arrange

        //Act
        MEPH.requires('MEPH.graph.Graph', 'MEPH.graph.Connection', 'MEPH.graph.Node').then(function () {

            //Arrange
            var graph = GraphTest.createGraphWithNodesAndConnections();
            var length = graph.getNodes().length;
            var node = graph.getNodes().first();

            //Act
            var result = graph.removeNode(node);

            //Assert
            expect(result).toBeTruthy();
            expect(length - 1 === graph.getNodes().length).toBeTruthy();
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        })
    });

    it("remove nodes from graph and fire node removedevent", function (done) {
        //Arrange

        //Act
        MEPH.requires('MEPH.graph.Graph', 'MEPH.graph.Connection', 'MEPH.graph.Node').then(function () {
            var noderemoved;
            var graph = GraphTest.createGraphWithNodesAndConnections();
            var node = graph.getNodes().first();
            //Act
            graph.on('noderemoved', function () { noderemoved = true; });
            graph.removeNode(node);

            //Assert
            expect(noderemoved).toBeTruthy();
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        })
    });

    it("add nodes to graph and fire node nodeadded", function (done) {
        //Arrange

        //Act
        MEPH.requires('MEPH.graph.Graph', 'MEPH.graph.Connection', 'MEPH.graph.Node').then(function () {
            //Arrange
            var nodeadded;
            var graph = GraphTest.createGraphWithNodesAndConnections();
            var node = new MEPH.graph.Node();
            //Act
            graph.on('nodeadded', function () { nodeadded = true; });
            graph.addNode(node);

            //Assert
            expect(nodeadded).toBeTruthy();
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        })
    });
    it("remove node from graph and connection removes corresponding node", function (done) {
        //Arrange

        //Act
        MEPH.requires('MEPH.graph.Graph', 'MEPH.graph.Connection', 'MEPH.graph.Node').then(function () {

            //Arrange
            var connectionchanged;
            var graph = GraphTest.createGraphWithNodesAndConnections();
            var node = graph.getNodes().first();
            var connection = graph.getConnections().first();

            //Act;
            connection.on('changed', function () { connectionchanged = true; });
            graph.removeNode(node);

            //Assert
            expect(connectionchanged).toBeTruthy();
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        })
    });
    it("when connections add new nodes, handlers setup node event handling", function (done) {
        //Arrange

        //Act
        MEPH.requires('MEPH.graph.Graph', 'MEPH.graph.Connection', 'MEPH.graph.Node').then(function () {

            //Arrange
            var nodeRemoved;
            var node = new MEPH.graph.Node();
            var connection = new MEPH.graph.Connection();
            connection.addNode(node);
            connection.on('changed', function () { nodeRemoved = true });

            //Act
            node.removed();

            //Assert
            expect(nodeRemoved).toBeTruthy();

        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        })
    });
    it("when connections remove nodes, handlers setup node event handling", function (done) {
        //Arrange

        //Act
        MEPH.requires('MEPH.graph.Graph', 'MEPH.graph.Connection', 'MEPH.graph.Node').then(function () {
            //Arrange
            var nodeRemoved;
            var node = new MEPH.graph.Node();
            var connection = new MEPH.graph.Connection();
            connection.addNode(node);
            connection.on('changed', function () { nodeRemoved = true });

            //Act
            connection.removeNode(node);

            //Assert
            expect(nodeRemoved).toBeTruthy();

        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        })
    });

    it("when connections are removed nodes handle it", function (done) {
        //Arrange

        //Act
        MEPH.requires('MEPH.graph.Graph', 'MEPH.graph.Connection', 'MEPH.graph.Node').then(function () {
            //Arrange
            var connectionRemoved;
            var node = new MEPH.graph.Node();
            var connection = new MEPH.graph.Connection();
            var graph = new MEPH.graph.Graph();
            graph.addConnection(connection);
            connection.addNode(node);

            node.on('changed', function () { connectionRemoved = true });

            //Act
            graph.removeConnection(connection);

            //Assert
            expect(connectionRemoved).toBeTruthy();

        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        })
    });
    it("add connection to node", function (done) {
        //Arrange

        //Act
        MEPH.requires('MEPH.graph.Graph', 'MEPH.graph.Connection', 'MEPH.graph.Node').then(function () {
            //Arrange
            var node = new MEPH.graph.Node();
            var connection = new MEPH.graph.Connection();
            //Act
            node.addConnection(connection);

            //Assert
            expect(node.getConnections().length === 1).toBeTruthy();

        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        })
    });
    it("remove connection from node", function (done) {
        //Arrange

        //Act
        MEPH.requires('MEPH.graph.Graph', 'MEPH.graph.Connection', 'MEPH.graph.Node').then(function () {
            //Arrange
            var node = new MEPH.graph.Node();
            var connection = new MEPH.graph.Connection();
            node.addConnection(connection);

            //Act
            node.removeConnection(connection);

            //Assert
            expect(node.getConnections().length === 0).toBeTruthy();

        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        })
    });
    it("set node position", function (done) {
        //Arrange

        //Act
        MEPH.requires('MEPH.graph.Graph', 'MEPH.graph.Connection', 'MEPH.graph.Node').then(function () {
            //Arrange
            //Arrange
            var node = new MEPH.graph.Node();

            //Act
            node.setPosition(1, 2, 3);

            //Assert
            expect(node.getPosition()).toBeTruthy();

        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        })
    });
    it("node moved", function (done) {
        //Arrange

        //Act
        MEPH.requires('MEPH.graph.Graph', 'MEPH.graph.Connection', 'MEPH.graph.Node').then(function () {
            //Arrange
            var node = new MEPH.graph.Node();
            var moved;
            node.on('move', function () { moved = true; });
            //Act
            node.setPosition(1, 2, 3);

            //Assert
            expect(node.getPosition()).toBeTruthy();
            expect(moved).toBeTruthy();

        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        })
    });
    it("Append node data", function (done) {
        //Arrange

        //Act
        MEPH.requires('MEPH.graph.Node').then(function () {
            //Arrange
            //Arrange
            var node = new MEPH.graph.Node();

            //Act
            node.appendData({ title: 'Title' });

            //Assert
            expect(node.getTitle() === 'Title').toBeTruthy();

        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        })
    });
});﻿describe("MEPH/graph/renderer/svg/BlenderNodeRenderer.spec.js",
    'MEPH.graph.GraphViewPort',
    'MEPH.graph.SVGGraphRenderer',
    'MEPH.graph.ConnectionHandler',
    'MEPH.graph.Node',
    'MEPH.audio.graph.node.Convolver',
    'MEPH.graph.renderer.svg.ConnectionRenderer',
    'MEPH.graph.renderer.svg.BlenderNodeRenderer', function () {

        it("Blender node renderer create.", function (done) {
            //Act
            MEPH.create('MEPH.graph.renderer.svg.BlenderNodeRenderer').then(function ($class) {
                //Act
                var blenderNode = new $class();

                //Assert
                expect(blenderNode).toBeTruthy();

            }).catch(function (error) {
                expect(error).caught();
            }).then(function (x) {
                done();
            });
        });
        var createGraphEco = function () {
            var graphviewport = new MEPH.graph.GraphViewPort();
            var graph = new MEPH.graph.Graph();
            var graphrenderer = new MEPH.graph.SVGGraphRenderer();
            var blenderNode = new MEPH.graph.renderer.svg.BlenderNodeRenderer(graphviewport);
            var connectionrenderer = new MEPH.graph.renderer.svg.ConnectionRenderer();

            var connectionHandler = new MEPH.graph.ConnectionHandler();
            connectionHandler.setGraph(graph);
            graphviewport.setConnectionHandler(connectionHandler);

            graphviewport.setup('body', { height: 700, width: 1000, element: 'svg' });
            graphrenderer.setNodeRenderer(blenderNode);
            graphrenderer.setConnectionRenderer(connectionrenderer);
            graphrenderer.setGraph(graph);
            graphrenderer.setViewPort(graphviewport);
            graphrenderer.use('viewport');
            graphviewport.setGraph(graph);
            return { graph: graph, graphrenderer: graphrenderer };
        }
        

    });﻿describe("MEPH/graph/renderer/SquareBoxRenderer.spec.js", function () {
    var createConnectionWithNodes = function () {
        var connection = new MEPH.graph.Connection();
        var nodecount = 10;
        var nodes = [].interpolate(0, nodecount, function (x) {
            var node = new MEPH.graph.Node();
            node.setId(MEPH.GUID());
            return node;
        });;
        connection.addNodes(nodes.select(function (x) { return x; }));
        return connection;
    };
    var GraphTest = {

        createConnectionWithNodes: createConnectionWithNodes,

        createEvent: function (type, options) {
            var evt = new Event(type);
            for (var i in options) {
                evt[i] = options[i];
            }
            return evt;
        },
        createCanvas: function (height, width) {
            height = height || 300;
            width = width || 400;
            var canvas = document.createElement('canvas');
            document.body.appendChild(canvas);
            canvas.height = height;
            canvas.width = width;
            return canvas;
        },
        createGraphWithNodesAndConnections: function (count) {
            var graph = new MEPH.graph.Graph();
            var nodecount = count || 10;
            var nodes = [].interpolate(0, nodecount, function (x, index) {
                var node = new MEPH.graph.Node();
                node.setId(MEPH.GUID());
                node.appendData({
                    title: 'Node ' + x,
                    id: MEPH.GUID(),
                    nodeInputs: [].interpolate(0, 3, function (x) {
                        return {
                            title: 'Input ' + x,
                            type: x,
                            id: MEPH.GUID()
                        }
                    }),
                    nodeOutputs: [].interpolate(0, 3, function (x) {
                        return {
                            title: 'Output ' + x,
                            type: x,
                            id: MEPH.GUID()
                        }
                    })
                });
                node.setPosition(x * 10, x * 10, x * 10);
                return node;
            });;
            var connection = new MEPH.graph.Connection();
            connection.addNodes(nodes);
            nodes.foreach(function (node) {
                var zone = node.getZones().nth(8);
                if (zone) {
                    connection.addZone(zone);
                }
            });
            graph.addConnection(connection);
            graph.addNodes(nodes);
            return graph;
        },
        createGraph: function () {
            var graph = new MEPH.graph.Graph();
            var nodecount = 10;
            var nodes = [].interpolate(0, nodecount, function (x) {
                var node = new MEPH.graph.Node();
                node.setId(MEPH.GUID());
                return node;
            });;
            graph.addNodes(nodes);
            return graph;
        },
        createNode: function () {
            var node = new MEPH.graph.Node();
            node.setId(MEPH.GUID());
            return node;
        }
    };

    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });


    it("create square box node renderer", function (done) {
        //Arrange

        //Act
        MEPH.requires('MEPH.graph.Graph').then(function () {
            return MEPH.create('MEPH.graph.renderer.SquareBoxRenderer').then(function ($class) {
                //Arrange

                //Act
                var squareboxrenderer = new $class();

                //Assert
                expect(squareboxrenderer).toBeTruthy();
                squareboxrenderer.destroy(true);
            })
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });


    it("Draw node at 100, 100", function (done) {
        //Arrange

        //Act
        MEPH.requires('MEPH.graph.Graph').then(function () {
            return MEPH.create('MEPH.graph.renderer.SquareBoxRenderer').then(function ($class) {
                //Arrange
                var sbr = new $class();
                var canvas = document.createElement('canvas');
                document.body.appendChild(canvas);
                canvas.height = 300;
                canvas.width = 400;
                sbr.setCanvas(canvas);
                //Act
                var result = sbr.draw({
                    x: 100,
                    y: 100
                })

                //Assert;
                expect(result).toBeTruthy();
                canvas.parentNode.removeChild(canvas);
            })
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });
    it("Draw cached canvas", function (done) {
        //Arrange

        //Act
        MEPH.requires('MEPH.graph.Graph').then(function () {
            return MEPH.create('MEPH.graph.renderer.SquareBoxRenderer').then(function ($class) {
                //Arrange
                var sbr = new $class();

                var canvas = GraphTest.createCanvas();
                sbr.setCanvas(canvas);

                //Act
                sbr.drawToCache();
                sbr.destroy(true);
                //Assert
            })
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });

    it('set option for noderenderer ', function (done) {
        MEPH.create('MEPH.graph.renderer.SquareBoxRenderer').then(function ($class) {

            var options = {};
            var sbr = new $class();

            //Act 

            sbr.setOptions(options);

            //Assert
            expect(sbr.getOptions() === options).toBeTruthy();

        }).catch(function (error) {
            expect(new Error(error)).caught();
        }).then(function () {
            done();
        });;
    });
});﻿describe("MEPH/graph/renderer/ConnectionRenderer.spec.js", function () {
    var createConnectionWithNodes = function () {
        var connection = new MEPH.graph.Connection();
        var nodecount = 10;
        var nodes = [].interpolate(0, nodecount, function (x) {
            var node = new MEPH.graph.Node();
            node.setId(MEPH.GUID());
            return node;
        });;
        connection.addNodes(nodes.select(function (x) { return x; }));
        return connection;
    };
    var GraphTest = {

        createConnectionWithNodes: createConnectionWithNodes,

        createEvent: function (type, options) {
            var evt = new Event(type);
            for (var i in options) {
                evt[i] = options[i];
            }
            return evt;
        },
        createCanvas: function (height, width) {
            height = height || 300;
            width = width || 400;
            var canvas = document.createElement('canvas');
            document.body.appendChild(canvas);
            canvas.height = height;
            canvas.width = width;
            return canvas;
        },
        createGraphWithNodesAndConnections: function (count) {
            var graph = new MEPH.graph.Graph();
            var nodecount = count || 10;
            var nodes = [].interpolate(0, nodecount, function (x, index) {
                var node = new MEPH.graph.Node();
                node.setId(MEPH.GUID());
                node.appendData({
                    title: 'Node ' + x,
                    id: MEPH.GUID(),
                    nodeInputs: [].interpolate(0, 3, function (x) {
                        return {
                            title: 'Input ' + x,
                            type: x,
                            id: MEPH.GUID()
                        }
                    }),
                    nodeOutputs: [].interpolate(0, 3, function (x) {
                        return {
                            title: 'Output ' + x,
                            type: x,
                            id: MEPH.GUID()
                        }
                    })
                });
                node.setPosition(x * 10, x * 10, x * 10);
                return node;
            });;
            var connection = new MEPH.graph.Connection();
            connection.addNodes(nodes);
            nodes.foreach(function (node) {
                var zone = node.getZones().nth(8);
                if (zone) {
                    connection.addZone(zone);
                }
            });
            graph.addConnection(connection);
            graph.addNodes(nodes);
            return graph;
        },
        createGraph: function () {
            var graph = new MEPH.graph.Graph();
            var nodecount = 10;
            var nodes = [].interpolate(0, nodecount, function (x) {
                var node = new MEPH.graph.Node();
                node.setId(MEPH.GUID());
                return node;
            });;
            graph.addNodes(nodes);
            return graph;
        },
        createNode: function () {
            var node = new MEPH.graph.Node();
            node.setId(MEPH.GUID());
            return node;
        }
    };

    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('Create connection renderer ', function (done) {
        MEPH.create('MEPH.graph.renderer.ConnectionRenderer').then(function ($class) {

            //Arrange
            //Act
            var connectionRenderer = new $class();

            //Assert
            expect(connectionRenderer).toBeTruthy();
        }).catch(function (error) {
            expect(new Error(error)).caught();
        }).then(function () {
            done();
        });;
    });

    it('Render a connection ', function (done) {
        MEPH.requires('MEPH.graph.renderer.ConnectionRenderer',
            'MEPH.graph.Connection',
            'MEPH.graph.Node',
            'MEPH.graph.ActiveZone',
            'MEPH.graph.Graph',
            'MEPH.graph.GraphViewPort').then(function () {

            //Arrange
            var connectionrenderer = new MEPH.graph.renderer.ConnectionRenderer();
            var canvas = document.createElement('canvas');
            document.body.appendChild(canvas);
            canvas.height = 300;
            canvas.width = 400;
            var graphviewport = new MEPH.graph.GraphViewPort();
            var graph = GraphTest.createGraphWithNodesAndConnections(2);
            var connection = graph.getConnections().first();

            //Act 
            var result = connectionrenderer.renderConnection(connection, canvas, { x: 0, y: 0 });

            //Assert 
            expect(result).toBeTruthy();
            canvas.parentNode.removeChild(canvas);
        }).catch(function (error) {
            expect(new Error(error)).caught();
        }).then(function () {
            done();
        });;
    });

    
    it('Render a single node connection', function (done) {
        MEPH.requires('MEPH.graph.renderer.ConnectionRenderer',
            'MEPH.graph.Connection',
            'MEPH.graph.Node',
            'MEPH.graph.ActiveZone',
            'MEPH.graph.Graph',
            'MEPH.graph.GraphViewPort').then(function () {

                //Arrange
                var connectionrenderer = new MEPH.graph.renderer.ConnectionRenderer();
                var canvas = document.createElement('canvas');
                document.body.appendChild(canvas);
                canvas.height = 300;
                canvas.width = 400;
                var graphviewport = new MEPH.graph.GraphViewPort();
                var graph = GraphTest.createGraphWithNodesAndConnections(1);
                var connection = graph.getConnections().first();

                //Act 
                var result = connectionrenderer.renderConnection(connection, canvas, { x: 0, y: 0 });

                //Assert 
                expect(result).toBeTruthy();
                canvas.parentNode.removeChild(canvas);
            }).catch(function (error) {
                expect(new Error(error)).caught();
            }).then(function () {
                done();
            });;
    });
     
    it('Set connection renderer', function (done) {
        MEPH.requires('MEPH.graph.renderer.ConnectionRenderer',
            'MEPH.graph.Connection',
            'MEPH.graph.Node',
            'MEPH.graph.GraphRenderer',
            'MEPH.graph.ActiveZone',
            'MEPH.graph.Graph',
            'MEPH.graph.GraphViewPort').then(function () {

                var connectionrenderer = new MEPH.graph.renderer.ConnectionRenderer();
                var graphrenderer = new MEPH.graph.GraphRenderer();

                //Act
                graphrenderer.setConnectionRenderer(connectionrenderer);

                //Assert
                expect(graphrenderer.getConnectionRenderer()).toBeTruthy();
            }).catch(function (error) {
                expect(new Error(error)).caught();
            }).then(function () {
                done();
            });;
    });
});﻿describe("MEPH/graph/renderer/BlenderNode.spec.js", function () {
    var createConnectionWithNodes = function () {
        var connection = new MEPH.graph.Connection();
        var nodecount = 10;
        var nodes = [].interpolate(0, nodecount, function (x) {
            var node = new MEPH.graph.Node();
            node.setId(MEPH.GUID());
            return node;
        });;
        connection.addNodes(nodes.select(function (x) { return x; }));
        return connection;
    };
    var GraphTest = {

        createConnectionWithNodes: createConnectionWithNodes,

        createEvent: function (type, options) {
            var evt = new Event(type);
            for (var i in options) {
                evt[i] = options[i];
            }
            return evt;
        },
        createCanvas: function (height, width) {
            height = height || 300;
            width = width || 400;
            var canvas = document.createElement('canvas');
            document.body.appendChild(canvas);
            canvas.height = height;
            canvas.width = width;
            return canvas;
        },
        createGraphWithNodesAndConnections: function (count) {
            var graph = new MEPH.graph.Graph();
            var nodecount = count || 10;
            var nodes = [].interpolate(0, nodecount, function (x, index) {
                var node = new MEPH.graph.Node();
                node.setId(MEPH.GUID());
                node.appendData({
                    title: 'Node ' + x,
                    id: MEPH.GUID(),
                    nodeInputs: [].interpolate(0, 3, function (x) {
                        return {
                            title: 'Input ' + x,
                            type: x,
                            id: MEPH.GUID()
                        }
                    }),
                    nodeOutputs: [].interpolate(0, 3, function (x) {
                        return {
                            title: 'Output ' + x,
                            type: x,
                            id: MEPH.GUID()
                        }
                    })
                });
                node.setPosition(x * 10, x * 10, x * 10);
                return node;
            });;
            var connection = new MEPH.graph.Connection();
            connection.addNodes(nodes);
            nodes.foreach(function (node) {
                var zone = node.getZones().nth(8);
                if (zone) {
                    connection.addZone(zone);
                }
            });
            graph.addConnection(connection);
            graph.addNodes(nodes);
            return graph;
        },
        createGraph: function () {
            var graph = new MEPH.graph.Graph();
            var nodecount = 10;
            var nodes = [].interpolate(0, nodecount, function (x) {
                var node = new MEPH.graph.Node();
                node.setId(MEPH.GUID());
                return node;
            });;
            graph.addNodes(nodes);
            return graph;
        },
        createNode: function () {
            var node = new MEPH.graph.Node();
            node.setId(MEPH.GUID());
            return node;
        }
    };
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it("Blender node create.", function (done) {
        //Act
        MEPH.create('MEPH.graph.renderer.BlenderNode').then(function ($class) {
            //Act
            var blenderNode = new $class();

            //Assert
            expect(blenderNode).toBeTruthy();

        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });

    it("Blender node render.", function (done) {
        //Act
        MEPH.requires('MEPH.graph.GraphViewPort', 'MEPH.graph.Graph'
            , 'MEPH.graph.Connection'
            , 'MEPH.graph.Node'
            , 'MEPH.graph.GraphRenderer').then(function () {
            return MEPH.create('MEPH.graph.renderer.BlenderNode').then(function ($class) {
                //Arrange
                var graphviewport = new MEPH.graph.GraphViewPort();
                var graph = GraphTest.createGraphWithNodesAndConnections(1);
                var graphrenderer = new MEPH.graph.GraphRenderer();
                var blenderNode = new $class(graphviewport);
                graphviewport.setup('body', { width: 600, height: 400 });
                graphrenderer.setNodeRenderer(blenderNode);
                graphrenderer.setGraph(graph);
                graphrenderer.setViewPort(graphviewport);
                graphrenderer.use('viewport');
                graphviewport.setGraph(graph);

                //Act
                graphrenderer.render();

                //Assert
                graphviewport.destroy();

            })
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });


    it("Blender node render with active zones.", function (done) {
        //Act
        MEPH.requires('MEPH.graph.GraphViewPort', 'MEPH.graph.GraphRenderer').then(function () {
            return MEPH.create('MEPH.graph.renderer.BlenderNode').then(function ($class) {
                //Arrange
                var graphviewport = new MEPH.graph.GraphViewPort();
                var graph = GraphTest.createGraphWithNodesAndConnections(1);
                var graphrenderer = new MEPH.graph.GraphRenderer();
                var blenderNode = new MEPH.graph.renderer.BlenderNode(graphviewport);
                graphviewport.setup('body', { width: 800, height: 800 });
                graphrenderer.setNodeRenderer(blenderNode);
                graphrenderer.setGraph(graph);
                graphrenderer.setViewPort(graphviewport);
                graphrenderer.use('viewport');
                graphviewport.fullwindow = true;
                graphviewport.setGraph(graph);

                //Act
                graphrenderer.render();

                //Assert
                graphviewport.destroy();
                expect(graphviewport.getActiveZones().length === 20).toBeTruthy();
            })
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });
           
});﻿describe("MEPH/graph/SVGGraphRenderer.spec.js",
    'MEPH.audio.graph.node.Convolver',
    'MEPH.graph.SVGGraphRenderer', 'MEPH.graph.Graph', function () {

        beforeEach(function () {
            jasmine.addMatchers(MEPH.customMatchers);
        });

        it("create graphrenderer", function (done) {
            //Arrange

            //Act
            MEPH.create('MEPH.graph.SVGGraphRenderer').then(function ($class) {
                //Act
                var graphrenderer = new $class();

                //Assert
                expect(graphrenderer).toBeTruthy();

            }).catch(function (error) {
                expect(error).caught();
            }).then(function (x) {
                done();
            });
        });

        it('a svg graph renderer passes all the nodes to be rendered to the node renderer and all the connections to the connection ' +
            'renderer', function () {
                var called, ccalled,
                    graph = new MEPH.graph.Graph(),
                    renderer = new MEPH.graph.SVGGraphRenderer();
                renderer.setGraph(graph);
                renderer.getNodeRenderer = function () {
                    return {
                        render: function () {
                            called = true;
                        }
                    }
                }
                renderer.getViewPort = function () {
                    return {
                        getCanvas: function () { }
                    }
                }
                renderer.getConnectionRenderer = function () {
                    return {
                        render: function () {
                            ccalled = true;
                        }
                    }
                }
                renderer.render();
                expect(called).toBeTruthy();
                expect(ccalled).toBeTruthy();
            });
        it('can register a node template with a svg graph renderer ', function () {
            var called, ccalled,
            graph = new MEPH.graph.Graph(),
            renderer = new MEPH.graph.SVGGraphRenderer();

            renderer.registerTemplate('convolver');

            var template = renderer.getTemplate('convolver');
            expect(template).toBeTruthy();
        });
        it('can register a node template with a svg graph renderer ', function () {
            var called, ccalled,
            graph = new MEPH.graph.Graph(),
            renderer = new MEPH.graph.SVGGraphRenderer();

            var template = renderer.getTemplate('convolvecr');
            expect(template).toBeFalsy();
        })

    });﻿describe("MEPH/graph/GraphViewPort.spec.js", function () {
    var createConnectionWithNodes = function () {
        var connection = new MEPH.graph.Connection();
        var nodecount = 10;
        var nodes = [].interpolate(0, nodecount, function (x) {
            var node = new MEPH.graph.Node();
            node.setId(MEPH.GUID());
            return node;
        });;
        connection.addNodes(nodes.select(function (x) { return x; }));
        return connection;
    };
    var GraphTest = {

        createConnectionWithNodes: createConnectionWithNodes,

        createEvent: function (type, options) {
            var evt = new Event(type);
            for (var i in options) {
                evt[i] = options[i];
            }
            return evt;
        },
        createCanvas: function (height, width) {
            height = height || 300;
            width = width || 400;
            var canvas = document.createElement('canvas');
            document.body.appendChild(canvas);
            canvas.height = height;
            canvas.width = width;
            return canvas;
        },
        createGraphWithNodesAndConnections: function (count) {
            var graph = new MEPH.graph.Graph();
            var nodecount = count || 10;
            var nodes = [].interpolate(0, nodecount, function (x, index) {
                var node = new MEPH.graph.Node();
                node.setId(MEPH.GUID());
                node.appendData({
                    title: 'Node ' + x,
                    id: MEPH.GUID(),
                    nodeInputs: [].interpolate(0, 3, function (x) {
                        return {
                            title: 'Input ' + x,
                            type: x,
                            id: MEPH.GUID()
                        }
                    }),
                    nodeOutputs: [].interpolate(0, 3, function (x) {
                        return {
                            title: 'Output ' + x,
                            type: x,
                            id: MEPH.GUID()
                        }
                    })
                });
                node.setPosition(x * 10, x * 10, x * 10);
                return node;
            });;
            var connection = new MEPH.graph.Connection();
            connection.addNodes(nodes);
            nodes.foreach(function (node) {
                var zone = node.getZones().nth(8);
                if (zone) {
                    connection.addZone(zone);
                }
            });
            graph.addConnection(connection);
            graph.addNodes(nodes);
            return graph;
        },
        createGraph: function () {
            var graph = new MEPH.graph.Graph();
            var nodecount = 10;
            var nodes = [].interpolate(0, nodecount, function (x) {
                var node = new MEPH.graph.Node();
                node.setId(MEPH.GUID());
                return node;
            });;
            graph.addNodes(nodes);
            return graph;
        },
        createNode: function () {
            var node = new MEPH.graph.Node();
            node.setId(MEPH.GUID());
            return node;
        }
    };
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it("can create a graphviewport", function (done) {
        //Arrange

        //Act
        MEPH.create('MEPH.graph.GraphViewPort').then(function ($class) {
            //Arrange

            //Act
            var graphviewport = new $class();

            //Assert
            expect(graphviewport).toBeTruthy();
            graphviewport.destroy();

        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });

    it("assign graph", function (done) {
        //Arrange

        //Act
        MEPH.create('MEPH.graph.GraphViewPort').then(function ($class) {
            //Arrange
            var graph = new MEPH.graph.Graph();
            var graphviewport = new MEPH.graph.GraphViewPort();

            //Act
            graphviewport.setGraph(graph);

            //Assert
            expect(graphviewport.getGraph() === graph).toBeTruthy();
            graphviewport.destroy();

        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });
    it("assign canvas", function (done) {
        //Arrange

        //Act
        MEPH.create('MEPH.graph.GraphViewPort').then(function ($class) {
            //Arrange
            var graphviewport = new MEPH.graph.GraphViewPort();
            var canvas = document.createElement('canvas');
            document.body.appendChild(canvas);
            //Act
            graphviewport.setCanvas(canvas);

            //Assert
            expect(canvas).toBeTruthy();
            expect(canvas).toBeTruthy();
            expect(graphviewport.getCanvas() === canvas).toBeTruthy();
            graphviewport.destroy();

        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });

    it("apply size to canvas", function (done) {
        //Arrange

        //Act
        MEPH.create('MEPH.graph.GraphViewPort').then(function ($class) {
            //Arrange
            var height = 400;
            var width = 400;
            var graphviewport = new MEPH.graph.GraphViewPort();
            var canvas = document.createElement('canvas');
            document.body.appendChild(canvas);
            graphviewport.setCanvas(canvas);
            //Act
            graphviewport.setCanvasSize({ height: height, width: width });
            //Assert
            expect(canvas).toBeTruthy();
            expect(graphviewport.getCanvas() === canvas).toBeTruthy();
            expect(canvas.height === height).toBeTruthy();
            expect(canvas.width === width).toBeTruthy();
            graphviewport.destroy();

            expect(canvas).toBeTruthy();
            expect(graphviewport.getCanvas() === canvas).toBeTruthy();
            graphviewport.destroy();

        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });

    it("add invisible mask over canvas", function (done) {
        //Arrange

        //Act
        MEPH.create('MEPH.graph.GraphViewPort').then(function ($class) {
            //Arrange
            var height = 400;
            var width = 430;
            var graphviewport = new MEPH.graph.GraphViewPort();
            var canvas = document.createElement('canvas');
            document.body.appendChild(canvas);
            graphviewport.setCanvas(canvas);
            graphviewport.setCanvasSize({ height: height, width: width });

            //Act
            graphviewport.applyMask();

            //Assert
            expect(canvas).toBeTruthy();
            expect(graphviewport.getMask()).toBeTruthy();
            expect(canvas.width === width).toBeTruthy();
            expect(canvas.height === height).toBeTruthy();
            expect(graphviewport.getCanvas() === canvas).toBeTruthy();
            graphviewport.destroy();


        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });
    it("setup dock", function (done) {
        //Arrange

        //Act
        MEPH.create('MEPH.graph.GraphViewPort').then(function ($class) {

            var temp = {};
            var graphviewport = new MEPH.graph.GraphViewPort();
            //Act
            graphviewport.setDock(temp);

            //Assert
            expect(temp, graphviewport.getDock()).toBeTruthy();
            graphviewport.destroy();

        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });
    it("add invisible mask over canvas", function (done) {
        //Arrange

        //Act
        MEPH.create('MEPH.graph.GraphViewPort').then(function ($class) {
            //Arrange
            var height = 400;
            var width = 430;
            var graphviewport = new MEPH.graph.GraphViewPort();
            var canvas = document.createElement('canvas');
            document.body.appendChild(canvas);
            //Act

            graphviewport.setup('body', canvas, { height: height, width: width });

            //Assert
            expect(canvas).toBeTruthy();
            expect(canvas).toBeTruthy();
            expect(graphviewport.getCanvas());
            expect(graphviewport.getMask()).toBeTruthy();

            graphviewport.destroy();

        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });

    it('Set garphviewport space ', function (done) {
        MEPH.create('MEPH.graph.GraphViewPort').then(function ($class) {
            //Arrange
            var viewport = new $class();

            //Act
            viewport.setPosition(0, 0, 0);

            //Assert
            expect(viewport.getPosition()).toBeTruthy();
            viewport.destroy();

        }).catch(function (error) {
            expect(new Error(error)).caught();
        }).then(function () {
            done();
        });;
    });

    it('set graphviewport renderer ', function (done) {
        MEPH.create('MEPH.graph.GraphViewPort').then(function ($class) {

            //Arrange
            var viewport = new $class();

            //Act
            viewport.setRenderer({});

            //Assert
            expect(viewport.getRenderer()).toBeTruthy();

        }).catch(function (error) {
            expect(new Error(error)).caught();
        }).then(function () {
            done();
        });;
    });

    it('mousedown on graphviewport will start viewport drag ', function (done) {
        MEPH.create('MEPH.graph.GraphViewPort').then(function ($class) {

            //Arrange
            var height = 400;
            var width = 430;
            var graphviewport = new $class();
            var canvas = document.querySelector('canvas');
            var dragstarted = false;

            //Act
            graphviewport.on('startdrag', function () {
                dragstarted = true;
            });

            graphviewport.setup('body', canvas, { height: height, width: width });
            graphviewport.$mask.dispatchEvent(new Event('mousedown', { x: 1, y: 3 }));

            //Assert
            expect(dragstarted).toBeTruthy();
            graphviewport.destroy();
        }).catch(function (error) {
            expect(new Error(error)).caught();
        }).then(function () {
            done();
        });;
    });


    it('mouseout on graphviewport stop drag ', function (done) {
        MEPH.create('MEPH.graph.GraphViewPort').then(function ($class) {
            var height = 400;
            var width = 430;
            var graphviewport = new $class();
            var canvas = document.querySelector('canvas');
            var dragstarted = false;
            var dragended = false;
            //Act
            graphviewport.on('startdrag', function () {
                dragstarted = true;
            });
            graphviewport.on('canceldrag', function () {
                dragended = true;
            });
            graphviewport.setup('body', canvas, { height: height, width: width });
            graphviewport.$mask.dispatchEvent(new Event('mousedown', { x: 1, y: 3 }));
            graphviewport.$mask.dispatchEvent(new Event('mouseout', { x: 1, y: 3 }));

            //Assert
            expect(dragstarted).toBeTruthy();
            expect(dragended).toBeTruthy()
            graphviewport.destroy();
        }).catch(function (error) {
            expect(new Error(error)).caught();
        }).then(function () {
            done();
        });;
    });
    it('mouseup on graphviewport stop drag ', function (done) {
        return MEPH.create('MEPH.graph.GraphViewPort').then(function ($class) {
            //Arrange
            var height = 400;
            var width = 430;
            var graphviewport = new $class();
            var canvas = document.querySelector('canvas');
            var dragstarted = false;
            var dragended = false;
            //Act
            graphviewport.on('startdrag', function () {
                dragstarted = true;
            });
            graphviewport.on('stopdrag', function () {
                dragended = true;
            });
            graphviewport.setup('body', canvas, { height: height, width: width });
            graphviewport.$mask.dispatchEvent(new Event('mousedown', { x: 1, y: 3 }));
            graphviewport.$mask.dispatchEvent(new Event('mouseup', { x: 1, y: 3 }));

            //Assert
            expect(dragstarted).toBeTruthy();
            expect(dragended).toBeTruthy();
            graphviewport.destroy();

        }).catch(function (error) {
            expect(new Error(error)).caught();
        }).then(function () {
            done();
        });;
    });

    it('mousemove on graphviewport fires viewportmove ', function (done) {
        return MEPH.create('MEPH.graph.GraphViewPort').then(function ($class) {
            //Arrange
            var height = 400;
            var width = 430;
            var graphviewport = new $class();
            var canvas = document.querySelector('canvas');
            var dragstarted = false;
            var viewportmoved = false;
            //Act
            graphviewport.on('startdrag', function () {
                dragstarted = true;
            });
            graphviewport.on('viewportmove', function () {
                viewportmoved = true;
            });
            graphviewport.setup('body', canvas, { height: height, width: width });
            graphviewport.$mask.dispatchEvent(new Event('mousedown', { x: 1, y: 3 }));
            graphviewport.$mask.dispatchEvent(new Event('mousemove', { x: 11, y: 31 }));

            //Assert
            expect(dragstarted).toBeTruthy();
            expect(viewportmoved).toBeTruthy();

            graphviewport.destroy();

        }).catch(function (error) {
            expect(new Error(error)).caught();
        }).then(function () {
            done();
        });;
    });

    it('mousedown at (1,1) -> mousemove to (10,10) = viewport relative position (10,10) ', function (done) {
        return MEPH.create('MEPH.graph.GraphViewPort').then(function ($class) {
            //Arrange
            var height = 400;
            var width = 430;
            var graphviewport = new $class();
            var canvas = document.querySelector('canvas');
            graphviewport.setup('body', canvas, { height: height, width: width });

            //Act
            graphviewport.$mask.dispatchEvent(GraphTest.createEvent('mousedown', { x: 1, y: 1 }));
            graphviewport.$mask.dispatchEvent(GraphTest.createEvent('mousemove', { x: 10, y: 10 }));

            //Assert

            expect(graphviewport.getPosition().x == 9 && graphviewport.getPosition().y == 9).toBeTruthy();
            graphviewport.destroy();

        }).catch(function (error) {
            expect(new Error(error)).caught();
        }).then(function () {
            done();
        });;
    });

    it('graphviewport destroy ', function (done) {
        return MEPH.create('MEPH.graph.GraphViewPort').then(function ($class) {
            //Assert
            var graphviewport = new $class();

            //Act
            graphviewport.destroy();

            //Assert
            expect(graphviewport.isDestroyed).toBeTruthy();
            graphviewport.destroy();
        }).catch(function (error) {
            expect(new Error(error)).caught();
        }).then(function () {
            done();
        });;
    });

    it('Set connection handler ', function (done) {
        return MEPH.create('MEPH.graph.GraphViewPort').then(function ($class) {

            //Arrange
            var graphviewport = new MEPH.graph.GraphViewPort();

            //Act
            graphviewport.setConnectionHandler('handler');


            //Assert
            expect(graphviewport.getConnectionHandler() == 'handler').toBeTruthy();
        }).catch(function (error) {
            expect(new Error(error)).caught();
        }).then(function () {
            done();
        });;
    });
    it('start connection on connector click ', function (done) {
        return MEPH.requires('MEPH.graph.GraphViewPort').then(function ($class) {
            //Arrange
            var graphviewport = new MEPH.graph.GraphViewPort();
            var graph = GraphTest.createGraphWithNodesAndConnections(2);
            var graphrenderer = new MEPH.graph.GraphRenderer();
            var connectionrenderer = new MEPH.graph.renderer.ConnectionRenderer();
            var blenderNode = new MEPH.graph.renderer.BlenderNode(graphviewport);
            graphviewport.setup('body', { width: 600, height: 400 });
            graphrenderer.setNodeRenderer(blenderNode);
            graphrenderer.setConnectionRenderer(connectionrenderer);
            graphrenderer.setGraph(graph);
            graphrenderer.setViewPort(graphviewport);
            graphrenderer.use('viewport');
            graphviewport.setGraph(graph);
            graphrenderer.render();
            var startconnection;
            var zone = graphviewport.getActiveZones().first(function (item) {
                return item.zone.getZoneType() === MEPH.graph.ActiveZone.type.connector;
            }).zone;
            zone.getDom().dispatchEvent(GraphTest.createEvent('click', {}));


            //Act
            graphviewport.$mask.dispatchEvent(GraphTest.createEvent('mousemove', { x: 11, y: 31 }));

            //Assert
            graphviewport.destroy();
        }).catch(function (error) {
            expect(new Error(error)).caught();
        }).then(function () {
            done();
        });;
    });

    it('Connection handler handles the connection creation ', function (done) {
        return MEPH.requires('MEPH.graph.GraphViewPort', 'MEPH.graph.ActiveZone').then(function ($class) {
            //Arrange
            var graphviewport = new MEPH.graph.GraphViewPort();
            var graph = GraphTest.createGraphWithNodesAndConnections(2);
            var graphrenderer = new MEPH.graph.GraphRenderer();
            var connectionrenderer = new MEPH.graph.renderer.ConnectionRenderer();
            var blenderNode = new MEPH.graph.renderer.BlenderNode(graphviewport);
            graphviewport.setup('body', { width: 600, height: 400 });
            graphrenderer.setNodeRenderer(blenderNode);
            graphrenderer.setConnectionRenderer(connectionrenderer);
            graphrenderer.setGraph(graph);
            graphrenderer.setViewPort(graphviewport);
            graphrenderer.use('viewport');
            graphviewport.setGraph(graph);
            graphrenderer.render();
            var startconnection;
            var zone = graphviewport.getActiveZones().first(function (item) {
                return item.zone.getZoneType() === MEPH.graph.ActiveZone.type.connector;
            }).zone;
            var zone2 = graphviewport.getActiveZones().second(function (item) {
                return item.zone.getZoneType() === MEPH.graph.ActiveZone.type.connector;
            }).zone;
            zone.getDom().dispatchEvent(GraphTest.createEvent('click', {}));


            //Act
            var handled;
            graphviewport.setConnectionHandler({ createConnection: function () { handled = true; } });
            zone2.getDom().dispatchEvent(GraphTest.createEvent('click', {}));

            //Assert
            graphviewport.destroy();
            expect(handled).toBeTruthy();
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });;
    });

});﻿describe("MEPH/graph/GraphRenderer.spec.js", function () {
    var createConnectionWithNodes = function () {
        var connection = new MEPH.graph.Connection();
        var nodecount = 10;
        var nodes = [].interpolate(0, nodecount, function (x) {
            var node = new MEPH.graph.Node();
            node.setId(MEPH.GUID());
            return node;
        });;
        connection.addNodes(nodes.select(function (x) { return x; }));
        return connection;
    };
    var GraphTest = {

        createConnectionWithNodes: createConnectionWithNodes,

        createEvent: function (type, options) {
            var evt = new Event(type);
            for (var i in options) {
                evt[i] = options[i];
            }
            return evt;
        },
        createCanvas: function (height, width) {
            height = height || 300;
            width = width || 400;
            var canvas = document.createElement('canvas');
            document.body.appendChild(canvas);
            canvas.height = height;
            canvas.width = width;
            return canvas;
        },
        createGraphWithNodesAndConnections: function (count) {
            var graph = new MEPH.graph.Graph();
            var nodecount = count || 10;
            var nodes = [].interpolate(0, nodecount, function (x, index) {
                var node = new MEPH.graph.Node();
                node.setId(MEPH.GUID());
                node.appendData({
                    title: 'Node ' + x,
                    id: MEPH.GUID(),
                    nodeInputs: [].interpolate(0, 3, function (x) {
                        return {
                            title: 'Input ' + x,
                            type: x,
                            id: MEPH.GUID()
                        }
                    }),
                    nodeOutputs: [].interpolate(0, 3, function (x) {
                        return {
                            title: 'Output ' + x,
                            type: x,
                            id: MEPH.GUID()
                        }
                    })
                });
                node.setPosition(x * 10, x * 10, x * 10);
                return node;
            });;
            var connection = new MEPH.graph.Connection();
            connection.addNodes(nodes);
            nodes.foreach(function (node) {
                var zone = node.getZones().nth(8);
                if (zone) {
                    connection.addZone(zone);
                }
            });
            graph.addConnection(connection);
            graph.addNodes(nodes);
            return graph;
        },
        createGraph: function () {
            var graph = new MEPH.graph.Graph();
            var nodecount = 10;
            var nodes = [].interpolate(0, nodecount, function (x) {
                var node = new MEPH.graph.Node();
                node.setId(MEPH.GUID());
                return node;
            });;
            graph.addNodes(nodes);
            return graph;
        },
        createNode: function () {
            var node = new MEPH.graph.Node();
            node.setId(MEPH.GUID());
            return node;
        }
    };
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it("create graphrenderer", function (done) {
        //Arrange

        //Act
        MEPH.create('MEPH.graph.GraphRenderer').then(function ($class) {
            //Act
            var graphrenderer = new $class();

            //Assert
            expect(graphrenderer).toBeTruthy();

        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });


    it("set graphviewport", function (done) {
        //Arrange

        //Act
        MEPH.requires('MEPH.graph.GraphViewPort').then(function () {
            return MEPH.create('MEPH.graph.GraphRenderer').then(function ($class) {
                //Arrange
                var viewport = new MEPH.graph.GraphViewPort();
                var graphrenderer = new $class();

                //Act
                graphrenderer.setViewPort(viewport);

                //Assert
                expect(graphrenderer.getViewPort()).toBeTruthy();

            })
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });

    it("listen graphviewport changes", function (done) {
        //Arrange

        //Act
        MEPH.requires('MEPH.graph.GraphViewPort').then(function () {
            return MEPH.create('MEPH.graph.GraphRenderer').then(function ($class) {
                //Arrange
                var viewport = new MEPH.graph.GraphViewPort();
                var graphrenderer = new $class();
                graphrenderer.onViewPortChange = function () {
                    viewportchanged = true;
                }
                var viewportchanged;
                graphrenderer.setViewPort(viewport);

                //Act
                viewport.setPosition(1, 2, 3);

                //Assert
                expect(viewportchanged).toBeTruthy();
                viewport.destroy();
            })
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });

    it("when graphviewport changes the graphrenderer will requeset an animation frame", function (done) {
        //Arrange

        //Act
        MEPH.requires('MEPH.graph.Graph', 'MEPH.graph.GraphViewPort', 'MEPH.graph.Node').then(function () {
            return MEPH.create('MEPH.graph.GraphRenderer').then(function ($class) {
                //Arrange
                var requestanimationframe = false;
                var graph = new MEPH.graph.Graph();
                var viewport = new MEPH.graph.GraphViewPort();
                var renderer = new $class();
                viewport.setGraph(graph);
                renderer.setViewPort(viewport);
                renderer.requestAnimationFrame = function () {
                    requestanimationframe = true;
                };

                //Act
                graph.addNode(new MEPH.graph.Node());

                //Assert
                expect(requestanimationframe).toBeTruthy();
                viewport.destroy();
            })
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });

    it("set node renderer", function (done) {
        //Arrange

        //Act
        MEPH.requires('MEPH.graph.Graph', 'MEPH.graph.GraphViewPort', 'MEPH.graph.Node').then(function () {
            return MEPH.create('MEPH.graph.GraphRenderer').then(function ($class) {
                //Arrange
                var renderer = new MEPH.graph.GraphRenderer();

                //Act
                renderer.setNodeRenderer({});

                //Assert
                expect(renderer.getNodeRenderer()).toBeTruthy();
            })
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });

    it('create graphrenderer ', function (done) {
        MEPH.create('MEPH.graph.GraphRenderer').then(function ($class) {

            var graphrenderer = new $class();

            //Assert
            expect(graphrenderer).toBeTruthy();

        }).catch(function (error) {
            expect(new Error(error)).caught();
        }).then(function () {
            done();
        });;
    });


    it('set graphrenderer ', function (done) {
        MEPH.create('MEPH.graph.GraphRenderer').then(function ($class) {

            //Assert
            var graphrenderer = new $class();
            graphrenderer.setGraph({});
            //Act
            var graph = graphrenderer.getGraph();

            //Assert
            expect(graph).toBeTruthy();

        }).catch(function (error) {
            expect(new Error(error)).caught();
        }).then(function () {
            done();
        });;
    });
    it('get nodes ', function (done) {
        MEPH.requires('MEPH.graph.Connection').then(function () {
            return MEPH.create('MEPH.graph.GraphRenderer').then(function ($class) {


                //Arrange
                var graph = GraphTest.createGraphWithNodesAndConnections();
                var graphrenderer = new $class();
                graphrenderer.setGraph(graph);

                //Act
                var nodes = graphrenderer.getNodes();

                //Assert
                expect(nodes.length === graph.getNodes().length).toBeTruthy();

            }).catch(function (error) {
                expect(new Error(error)).caught();
            }).then(function () {
                done();
            });;
        });
    });

    it('create graph and render nodes in graphviewport ', function (done) {
        MEPH.requires('MEPH.graph.Connection', 'MEPH.graph.renderer.SquareBoxRenderer').then(function () {
            return MEPH.create('MEPH.graph.GraphRenderer').then(function ($class) {

                var graphviewport = new MEPH.graph.GraphViewPort();
                var graph = GraphTest.createGraphWithNodesAndConnections();
                var graphrenderer = new MEPH.graph.GraphRenderer();
                var sbr = new MEPH.graph.renderer.SquareBoxRenderer();
                graphviewport.setup('body', { width: 600, height: 400 });
                graphrenderer.setNodeRenderer(sbr);
                graphrenderer.setGraph(graph);
                graphrenderer.setViewPort(graphviewport);
                graphrenderer.use('viewport');
                graphviewport.setGraph(graph);

                //Act
                graphrenderer.render();

                //Assert
                graphviewport.destroy();

                //Assert

            }).catch(function (error) {
                expect(new Error(error)).caught();
            }).then(function () {
                done();
            });;
        });
    });
    it('Get connections ', function (done) {
        MEPH.requires('MEPH.graph.GraphViewPort',
            'MEPH.graph.GraphRenderer',
            'MEPH.graph.renderer.BlenderNode',
            'MEPH.graph.Node',
            'MEPH.graph.renderer.ConnectionRenderer',
            'MEPH.graph.Connection', 'MEPH.graph.renderer.SquareBoxRenderer').then(function () {

                //Arrange
                var graphviewport = new MEPH.graph.GraphViewPort();
                var graph = GraphTest.createGraphWithNodesAndConnections(2);
                var graphrenderer = new MEPH.graph.GraphRenderer();
                var connectionrenderer = new MEPH.graph.renderer.ConnectionRenderer();
                var blenderNode = new MEPH.graph.renderer.BlenderNode(graphviewport);
                graphviewport.setup('body', { width: 600, height: 400 });
                graphrenderer.setNodeRenderer(blenderNode);
                graphrenderer.setConnectionRenderer(connectionrenderer);
                graphrenderer.setGraph(graph);
                graphrenderer.setViewPort(graphviewport);
                graphrenderer.use('viewport');
                graphviewport.setGraph(graph);
                graphviewport.fullwindow = true;
                //Act
                var connections = graphrenderer.getConnections();

                //Assert
                expect(connections).toBeTruthy();
                graphviewport.destroy();

            }).catch(function (error) {
                expect(new Error(error)).caught();
            }).then(function () {
                done();
            });;
    });
    
    it('Blender node and connectionsrender ', function (done) {
        MEPH.requires('MEPH.graph.GraphViewPort',
            'MEPH.graph.GraphRenderer',
            'MEPH.graph.renderer.BlenderNode',
            'MEPH.graph.Node',
            'MEPH.graph.renderer.ConnectionRenderer',
            'MEPH.graph.Connection').then(function () {

                //Arrange
                var graphviewport = new MEPH.graph.GraphViewPort();
                var graph = GraphTest.createGraphWithNodesAndConnections(2);
                var graphrenderer = new MEPH.graph.GraphRenderer();
                var connectionrenderer = new MEPH.graph.renderer.ConnectionRenderer();
                var blenderNode = new MEPH.graph.renderer.BlenderNode(graphviewport);
                graphviewport.setup('body', { width: 600, height: 400 });
                graphrenderer.setNodeRenderer(blenderNode);
                graphrenderer.setConnectionRenderer(connectionrenderer);
                graphrenderer.setGraph(graph);
                graphrenderer.setViewPort(graphviewport);
                graphrenderer.use('viewport');
                graphviewport.setGraph(graph);

                //Act
                graphrenderer.render();

                //Assert
                graphviewport.destroy();

            }).catch(function (error) {
                expect(new Error(error)).caught();
            }).then(function () {
                done();
            });;
    });
     
      
});﻿describe("MEPH/graph/GraphControl.spec.js", function () {

    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });


    it("can create a graph control", function (done) {
        MEPH.requires('MEPH.graph.GraphControl').then(function () {
            var graphcontrol = new MEPH.graph.GraphControl()

            expect(graphcontrol).toBeTruthy();
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });

    it("can add a node", function (done) {
        MEPH.requires('MEPH.graph.GraphControl').then(function () {
            var graphcontrol = new MEPH.graph.GraphControl()

            graphcontrol.addNode(new MEPH.graph.Node());

            expect(graphcontrol.getNodes().length === 1).toBeTruthy();

        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });
});﻿describe("MEPH/graph/Graph.spec.js", function () {
    var createConnectionWithNodes = function () {
        var connection = new MEPH.graph.Connection();
        var nodecount = 10;
        var nodes = [].interpolate(0, nodecount, function (x) {
            var node = new MEPH.graph.Node();
            node.setId(MEPH.GUID());
            return node;
        });;
        connection.addNodes(nodes.select(function (x) { return x; }));
        return connection;
    };
    var GraphTest = {

        createConnectionWithNodes: createConnectionWithNodes,

        createEvent: function (type, options) {
            var evt = new Event(type);
            for (var i in options) {
                evt[i] = options[i];
            }
            return evt;
        },
        createCanvas: function (height, width) {
            height = height || 300;
            width = width || 400;
            var canvas = document.createElement('canvas');
            document.body.appendChild(canvas);
            canvas.height = height;
            canvas.width = width;
            return canvas;
        },
        createGraphWithNodesAndConnections: function (count) {
            var graph = new MEPH.graph.Graph();
            var nodecount = count || 10;
            var nodes = [].interpolate(0, nodecount, function (x, index) {
                var node = new MEPH.graph.Node();
                node.setId(MEPH.GUID());
                node.appendData({
                    title: 'Node ' + x,
                    id: MEPH.GUID(),
                    nodeInputs: [].interpolate(0, 3, function (x) {
                        return {
                            title: 'Input ' + x,
                            type: x,
                            id: MEPH.GUID()
                        }
                    }),
                    nodeOutputs: [].interpolate(0, 3, function (x) {
                        return {
                            title: 'Output ' + x,
                            type: x,
                            id: MEPH.GUID()
                        }
                    })
                });
                node.setPosition(x * 10, x * 10, x * 10);
                return node;
            });;
            var connection = new MEPH.graph.Connection();
            connection.addNodes(nodes);
            nodes.foreach(function (node) {
                var zone = node.getZones().nth(8);
                if (zone) {
                    connection.addZone(zone);
                }
            });
            graph.addConnection(connection);
            graph.addNodes(nodes);
            return graph;
        },
        createGraph: function () {
            var graph = new MEPH.graph.Graph();
            var nodecount = 10;
            var nodes = [].interpolate(0, nodecount, function (x) {
                var node = new MEPH.graph.Node();
                node.setId(MEPH.GUID());
                return node;
            });;
            graph.addNodes(nodes);
            return graph;
        },
        createNode: function () {
            var node = new MEPH.graph.Node();
            node.setId(MEPH.GUID());
            return node;
        }
    };
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    afterEach(function () {
        
        var canvases = MEPHArray.convert(document.querySelectorAll('canvas'));
        canvases.foreach(function (x) {
            if (x && x.parentNode)
                return x.parentNode.removeChild(x);
        })
    });

    it("can create a graph", function (done) {
        //Arrange

        //Act
        MEPH.create('MEPH.graph.Graph').then(function ($class) {
            //Assert
            var input = new $class();

            expect(input).toBeTruthy();

        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });

    it('Get node from graph', function (done) {
        MEPH.create('MEPH.graph.Graph').then(function ($class) {
            //Assert
            var graph = new $class();
            var node = new MEPH.graph.Node();
            graph.addNode(node);

            expect(graph).toBeTruthy();

            //Act
            var nodes = graph.getNodes();

            //Assert
            expect(nodes).toBeTruthy();
            expect(nodes.length === 1).toBeTruthy();

        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });

    it('graph can be saved', function (done) {
        MEPH.create('MEPH.graph.Graph').then(function ($class) {

            var graph = GraphTest.createGraphWithNodesAndConnections(3);

            var result = graph.save();

            expect(result).toBeTruthy();
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });
    it('graph can be saved and a graph can reload it', function (done) {
        MEPH.create('MEPH.graph.Graph').then(function ($class) {
            var graph = GraphTest.createGraphWithNodesAndConnections(3);

            var result = graph.save();


            var graph = new MEPH.graph.Graph();
            graph.load(result);
            expect(graph.getNodes().length).toBeTruthy();
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });

    it('When dragging a  node near a connection it fires a nodeoverconnection event', function (done) {
        MEPH.requires('MEPH.graph.Graph',
            'MEPH.graph.renderer.ConnectionRenderer',
            'MEPH.graph.ConnectionHandler',
            'MEPH.graph.renderer.BlenderNode').then(function ($class) {
                //Arrange
                var graphviewport = new MEPH.graph.GraphViewPort();
                var graph = GraphTest.createGraphWithNodesAndConnections(2);
                var graphrenderer = new MEPH.graph.GraphRenderer();
                var connectionrenderer = new MEPH.graph.renderer.ConnectionRenderer();
                var blenderNode = new MEPH.graph.renderer.BlenderNode(graphviewport);

                var connectionHandler = new MEPH.graph.ConnectionHandler();
                connectionHandler.setGraph(graph);
                graphviewport.setConnectionHandler(connectionHandler);

                graphviewport.setup('body', { width: 600, height: 400 });
                graphrenderer.setNodeRenderer(blenderNode);
                graphrenderer.setConnectionRenderer(connectionrenderer);
                graphrenderer.setGraph(graph);
                graphrenderer.setViewPort(graphviewport);
                graphrenderer.use('viewport');
                graphviewport.setGraph(graph);
                graphrenderer.render();
                var startconnection;
                var zone = graphviewport.getActiveZones().first(function (item) {
                    return item.zone.getZoneType() === MEPH.graph.ActiveZone.type.connector;
                }).zone;
                var zone2 = graphviewport.getActiveZones().second(function (item) {
                    return item.zone.getZoneType() === MEPH.graph.ActiveZone.type.connector;
                }).zone;
                zone.getDom().dispatchEvent(GraphTest.createEvent('click', {}));
                zone2.getDom().dispatchEvent(GraphTest.createEvent('click', {}));
                graphviewport.selectConnectionOnClick = true;
                graphviewport.getMask().dispatchEvent(GraphTest.createEvent('click', {
                    x: 3,
                    y: 4
                }));

                var newnode = new MEPH.graph.Node();
                newnode.setId(MEPH.GUID());
                newnode.appendData({
                    title: 'Node ',
                    id: MEPH.GUID(),
                    nodeInputs: [].interpolate(0, 3, function (x) {
                        return {
                            title: 'Input ' + x,
                            type: x,
                            id: MEPH.GUID()
                        }
                    }),
                    nodeOutputs: [].interpolate(0, 3, function (x) {
                        return {
                            title: 'Output ' + x,
                            type: x,
                            id: MEPH.GUID()
                        }
                    })
                });
                graphviewport.setDragData({ x: 10, y: 20 });
                graph.addNode(newnode);
                var nodeoverconnection;
                graphviewport.on('nodeoverconnection', function () {
                    nodeoverconnection = true;
                });
                graphviewport.isDraggingNode = { node: newnode, startPos: { x: 2, y: 4 } };
                //Act
                graphviewport.getMask().dispatchEvent(GraphTest.createEvent('mousemove', {
                    x: 4,
                    y: 4
                }));


                //Assert
                graphviewport.destroy();
                //Assert.isTrue(nodeoverconnection);
            }).catch(function (error) {
                expect(error).caught();
            }).then(function (x) {
                done();
            });
    });
});﻿describe("MEPH/graph/ConnectionHandler.spec.js", function () {
    var createConnectionWithNodes = function () {
        var connection = new MEPH.graph.Connection();
        var nodecount = 10;
        var nodes = [].interpolate(0, nodecount, function (x) {
            var node = new MEPH.graph.Node();
            node.setId(MEPH.GUID());
            return node;
        });;
        connection.addNodes(nodes.select(function (x) { return x; }));
        return connection;
    };
    var GraphTest = {

        createConnectionWithNodes: createConnectionWithNodes,

        createEvent: function (type, options) {
            var evt = new Event(type);
            for (var i in options) {
                evt[i] = options[i];
            }
            return evt;
        },
        createCanvas: function (height, width) {
            height = height || 300;
            width = width || 400;
            var canvas = document.createElement('canvas');
            document.body.appendChild(canvas);
            canvas.height = height;
            canvas.width = width;
            return canvas;
        },
        createGraphWithNodesAndConnections: function (count) {
            var graph = new MEPH.graph.Graph();
            var nodecount = count || 10;
            var nodes = [].interpolate(0, nodecount, function (x, index) {
                var node = new MEPH.graph.Node();
                node.setId(MEPH.GUID());
                node.appendData({
                    title: 'Node ' + x,
                    id: MEPH.GUID(),
                    nodeInputs: [].interpolate(0, 3, function (x) {
                        return {
                            title: 'Input ' + x,
                            type: x,
                            id: MEPH.GUID()
                        }
                    }),
                    nodeOutputs: [].interpolate(0, 3, function (x) {
                        return {
                            title: 'Output ' + x,
                            type: x,
                            id: MEPH.GUID()
                        }
                    })
                });
                node.setPosition(x * 10, x * 10, x * 10);
                return node;
            });
            var connection = new MEPH.graph.Connection();
            connection.addNodes(nodes);
            nodes.foreach(function (node) {
                var zone = node.getZones().nth(8);
                if (zone) {
                    connection.addZone(zone);
                }
            });
            graph.addConnection(connection);
            graph.addNodes(nodes);
            return graph;
        },
        createGraph: function () {
            var graph = new MEPH.graph.Graph();
            var nodecount = 10;
            var nodes = [].interpolate(0, nodecount, function (x) {
                var node = new MEPH.graph.Node();
                node.setId(MEPH.GUID());
                return node;
            });;
            graph.addNodes(nodes);
            return graph;
        },
        createNode: function () {
            var node = new MEPH.graph.Node();
            node.setId(MEPH.GUID());
            return node;
        }
    };
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('Create connection handler', function (done) {
        //Arrange
        MEPH.requires('MEPH.graph.ConnectionHandler').then(function () {
            //Act
            var handler = new MEPH.graph.ConnectionHandler();

            //Assert
            expect(handler).toBeTruthy();
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });

    it('Set graph', function (done) {
        //Arrange
        MEPH.requires('MEPH.graph.ConnectionHandler', 'MEPH.graph.Graph').then(function () {
            //Act
            var handler = new MEPH.graph.ConnectionHandler();
            var graph = new MEPH.graph.Graph();
            //Act
            handler.setGraph(graph);

            //Assert
            expect(handler.getGraph()).toBeTruthy();
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });

    it('Connection handler handles the connection creation', function (done) {
        //Arrange
        MEPH.requires('MEPH.graph.ConnectionHandler', 'MEPH.graph.Graph').then(function () {

            //Arrange
            var graphviewport = new MEPH.graph.GraphViewPort();
            var graph = GraphTest.createGraphWithNodesAndConnections(2);
            var graphrenderer = new MEPH.graph.GraphRenderer();
            var connectionrenderer = new MEPH.graph.renderer.ConnectionRenderer();

            var blenderNode = new MEPH.graph.renderer.BlenderNode(graphviewport);
            var connectionHandler = new MEPH.graph.ConnectionHandler();
            connectionHandler.setGraph(graph);
            graphviewport.setConnectionHandler(connectionHandler);

            graphviewport.setup('body', { width: 600, height: 400 });
            graphrenderer.setNodeRenderer(blenderNode);
            graphrenderer.setConnectionRenderer(connectionrenderer);
            graphrenderer.setGraph(graph);
            graphrenderer.setViewPort(graphviewport);
            graphrenderer.use('viewport');
            graphviewport.fullwindow = true;
            graphviewport.setGraph(graph);
            graphrenderer.render();
            var startconnection;
            var zone = graphviewport.getActiveZones().first(function (item) {
                return item.zone.getZoneType() === MEPH.graph.ActiveZone.type.connector;
            }).zone;
            var zone2 = graphviewport.getActiveZones().second(function (item) {
                return item.zone.getZoneType() === MEPH.graph.ActiveZone.type.connector;
            }).zone;


            //Act

            //Assert
            graphviewport.destroy();

        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });

    
    it('Cancel connection creation with double click', function (done) {
        //Arrange
        MEPH.requires('MEPH.graph.ConnectionHandler', 'MEPH.graph.Graph').then(function () {
            //Arrange
            var graphviewport = new MEPH.graph.GraphViewPort();
            var graph = GraphTest.createGraphWithNodesAndConnections(2);
            var graphrenderer = new MEPH.graph.GraphRenderer();
            var connectionrenderer = new MEPH.graph.renderer.ConnectionRenderer();
            var blenderNode = new MEPH.graph.renderer.BlenderNode(graphviewport);
            graphviewport.setup('body', { width: 600, height: 400 });
            graphrenderer.setNodeRenderer(blenderNode);
            graphrenderer.setConnectionRenderer(connectionrenderer);
            graphrenderer.setGraph(graph);
            graphrenderer.setViewPort(graphviewport);
            graphrenderer.use('viewport');
            graphviewport.setGraph(graph);
            graphrenderer.render();
            var startconnection;
            var zone = graphviewport.getActiveZones().first(function (item) {
                return item.zone.getZoneType() === MEPH.graph.ActiveZone.type.connector;
            }).zone;
            zone.getDom().dispatchEvent(GraphTest.createEvent('click', {}));


            //Act
            var handled;
            graphviewport.$mask.dispatchEvent(GraphTest.createEvent('dblclick', {}));

            //Assert
            graphviewport.destroy();
            expect(graphviewport.connectionFlow === null).toBeTruthy();
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    }); 
});﻿describe("MEPH/graph/ActiveZone.spec.js", function () {
    var createConnectionWithNodes = function () {
        var connection = new MEPH.graph.Connection();
        var nodecount = 10;
        var nodes = [].interpolate(0, nodecount, function (x) {
            var node = new MEPH.graph.Node();
            node.setId(MEPH.GUID());
            return node;
        });;
        connection.addNodes(nodes.select(function (x) { return x; }));
        return connection;
    };
    var GraphTest = {

        createConnectionWithNodes: createConnectionWithNodes,

        createEvent: function (type, options) {
            var evt = new Event(type);
            for (var i in options) {
                evt[i] = options[i];
            }
            return evt;
        },
        createCanvas: function (height, width) {
            height = height || 300;
            width = width || 400;
            var canvas = document.createElement('canvas');
            document.body.appendChild(canvas);
            canvas.height = height;
            canvas.width = width;
            return canvas;
        },
        createGraphWithNodesAndConnections: function (count) {
            var graph = new MEPH.graph.Graph();
            var nodecount = count || 10;
            var nodes = [].interpolate(0, nodecount, function (x, index) {
                var node = new MEPH.graph.Node();
                node.setId(MEPH.GUID());
                node.appendData({
                    title: 'Node ' + x,
                    id: MEPH.GUID(),
                    nodeInputs: [].interpolate(0, 3, function (x) {
                        return {
                            title: 'Input ' + x,
                            type: x,
                            id: MEPH.GUID()
                        }
                    }),
                    nodeOutputs: [].interpolate(0, 3, function (x) {
                        return {
                            title: 'Output ' + x,
                            type: x,
                            id: MEPH.GUID()
                        }
                    })
                });
                node.setPosition(x * 10, x * 10, x * 10);
                return node;
            });;
            var connection = new MEPH.graph.Connection();
            connection.addNodes(nodes);
            nodes.foreach(function (node) {
                var zone = node.getZones().nth(8);
                if (zone) {
                    connection.addZone(zone);
                }
            });
            graph.addConnection(connection);
            graph.addNodes(nodes);
            return graph;
        },
        createGraph: function () {
            var graph = new MEPH.graph.Graph();
            var nodecount = 10;
            var nodes = [].interpolate(0, nodecount, function (x) {
                var node = new MEPH.graph.Node();
                node.setId(MEPH.GUID());
                return node;
            });;
            graph.addNodes(nodes);
            return graph;
        },
        createNode: function () {
            var node = new MEPH.graph.Node();
            node.setId(MEPH.GUID());
            return node;
        }
    };
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it("create active zone", function (done) {
        //Arrange

        //Act
        MEPH.create('MEPH.graph.ActiveZone').then(function ($class) {
            //Act
            var activezone = new $class();

            //Assert
            expect(activezone).toBeTruthy();

        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });

    it("set graphviewport on ActiveZone", function (done) {
        //Arrange

        //Act
        MEPH.requires('MEPH.graph.GraphViewPort').then(function () {
            return MEPH.create('MEPH.graph.ActiveZone').then(function ($class) {
                //Arrange
                var activezone = new $class();
                var graphviewport = new MEPH.graph.GraphViewPort();

                //Act
                activezone.setGraphViewPort(graphviewport);

                //Assert
                expect(activezone.getGraphViewPort()).toBeTruthy();
                expect(activezone.getGraphViewPort() === graphviewport).toBeTruthy();

            })
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });
    it("Add dom object", function (done) {
        //Arrange

        //Act
        MEPH.requires('MEPH.graph.GraphViewPort').then(function () {
            return MEPH.create('MEPH.graph.ActiveZone').then(function ($class) {
                //Arrange
                var activezone = new $class();
                var graphviewport = new MEPH.graph.GraphViewPort();
                graphviewport.setup('body', { width: 600, height: 400 });
                activezone.setGraphViewPort(graphviewport);
                var div = document.createElement('div');
                //Act
                activezone.setDom(div);

                //Assert
                expect(activezone.getDom()).toBeTruthy();
                graphviewport.destroy();

            })
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });
    it("detect click", function (done) {
        //Arrange

        //Act
        MEPH.requires('MEPH.graph.GraphViewPort').then(function () {
            return MEPH.create('MEPH.graph.ActiveZone').then(function ($class) {
                //Arrange
                var activezone = new $class();
                var graphviewport = new MEPH.graph.GraphViewPort();
                graphviewport.setup('body', { width: 600, height: 400 });
                activezone.setGraphViewPort(graphviewport);
                var div = document.createElement('div');
                activezone.setDom(div);
                var activezoneclicked = false

                activezone.clickable();
                //Act
                activezone.on('click', function () { activezoneclicked = true; });
                div.dispatchEvent(GraphTest.createEvent('click', {}));

                //Assert
                expect(activezoneclicked).toBeTruthy();
                graphviewport.destroy();

            })
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });

    it("position dom element according to graphviewport", function (done) {
        //Arrange

        //Act
        MEPH.requires('MEPH.graph.GraphViewPort').then(function () {
            return MEPH.create('MEPH.graph.ActiveZone').then(function ($class) {
                //Arrange
                var activezone = new MEPH.graph.ActiveZone();
                var graphviewport = new MEPH.graph.GraphViewPort();
                graphviewport.setup('body', { width: 600, height: 400 });
                activezone.setGraphViewPort(graphviewport);
                var div = document.createElement('div');
                div.style.height = "20px";
                div.style.width = "20px";
                div.style.backgroundColor = 'yellow';
                activezone.setDom(div);
                var activezoneclicked = false
                //Act
                graphviewport.setPosition(109, 10, 0);

                graphviewport.destroy();
            })
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });
    it("set active zone type", function (done) {
        //Arrange

        //Act
        MEPH.requires('MEPH.graph.GraphViewPort').then(function () {
            return MEPH.create('MEPH.graph.ActiveZone').then(function ($class) {
                //Arrange
                var activezone = new MEPH.graph.ActiveZone();

                //Act
                activezone.clickable();

                //Assert
                expect(activezone.$clickable).toBeTruthy();
            })
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });

    it("set active zone type draggable", function (done) {
        //Arrange

        //Act
        MEPH.requires('MEPH.graph.GraphViewPort').then(function () {
            return MEPH.create('MEPH.graph.ActiveZone').then(function ($class) {
                //Arrange
                var activezone = new MEPH.graph.ActiveZone();

                //Act
                activezone.draggable();

                //Assert
                expect(activezone.$draggable).toBeTruthy();
            })
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });

    it("assign active zone to node", function (done) {
        //Arrange

        //Act
        MEPH.requires('MEPH.graph.Node').then(function () {
            return MEPH.create('MEPH.graph.ActiveZone').then(function ($class) {
                //Arrange
                var activezone = new MEPH.graph.ActiveZone();
                var node = new MEPH.graph.Node();

                //Act
                node.addZone(activezone);

                //Assert
                expect(node.getZones().length === 1).toBeTruthy();
            })
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });
    it("Active zone set zone type", function (done) {
        //Arrange

        //Act
        MEPH.requires('MEPH.graph.Node').then(function () {
            return MEPH.create('MEPH.graph.ActiveZone').then(function ($class) {
                //Arrange
                var activezone = new MEPH.graph.ActiveZone();

                //Act
                activezone.setZoneType('temp');

                //Assert
                expect(activezone.getZoneType() === 'temp').toBeTruthy();
            })
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });
    it("Active zone set zone type", function (done) {
        //Arrange

        //Act
        MEPH.requires('MEPH.graph.Node',
            'MEPH.graph.GraphViewPort',
            'MEPH.graph.GraphRenderer',
            'MEPH.graph.renderer.BlenderNode',
            'MEPH.graph.Connection',
            'MEPH.graph.Graph',
            'MEPH.graph.renderer.ConnectionRenderer').then(function () {
                //Arrange
                var graphviewport = new MEPH.graph.GraphViewPort();
                var graph = GraphTest.createGraphWithNodesAndConnections(2);
                var graphrenderer = new MEPH.graph.GraphRenderer();
                var connectionrenderer = new MEPH.graph.renderer.ConnectionRenderer();
                var blenderNode = new MEPH.graph.renderer.BlenderNode(graphviewport);
                graphviewport.setup('body', { width: 600, height: 400 });
                graphrenderer.setNodeRenderer(blenderNode);
                graphrenderer.setConnectionRenderer(connectionrenderer);
                graphrenderer.setGraph(graph);
                graphrenderer.setViewPort(graphviewport);
                graphrenderer.use('viewport');
                graphviewport.setGraph(graph);
                graphrenderer.render();
                var clicked;
                //Act
                var zone = graphviewport.getActiveZones().first(function (item) {
                    return item.zone.getZoneType() === MEPH.graph.ActiveZone.type.connector;
                }).zone;
                zone.on('click', function () {
                    clicked = true;
                });
                zone.getDom().dispatchEvent(GraphTest.createEvent('click', {}));

                //Assert
                graphviewport.destroy();
                expect(clicked).toBeTruthy();

            }).catch(function (error) {
                expect(error).caught();
            }).then(function (x) {
                done();
            });
    });

    it("start connection on connector click", function (done) {
        MEPH.requires('MEPH.graph.Node',
            'MEPH.graph.GraphViewPort',
            'MEPH.graph.GraphRenderer',
            'MEPH.graph.renderer.BlenderNode',
            'MEPH.graph.Connection',
            'MEPH.graph.Graph',
            'MEPH.graph.renderer.ConnectionRenderer').then(function () {
                //Arrange
                var graphviewport = new MEPH.graph.GraphViewPort();
                var graph = GraphTest.createGraphWithNodesAndConnections(2);
                var graphrenderer = new MEPH.graph.GraphRenderer();
                var connectionrenderer = new MEPH.graph.renderer.ConnectionRenderer();
                var blenderNode = new MEPH.graph.renderer.BlenderNode(graphviewport);
                graphviewport.setup('body', { width: 600, height: 400 });
                graphrenderer.setNodeRenderer(blenderNode);
                graphrenderer.setConnectionRenderer(connectionrenderer);
                graphrenderer.setGraph(graph);
                graphrenderer.setViewPort(graphviewport);
                graphrenderer.use('viewport');
                graphviewport.setGraph(graph);
                graphrenderer.render();
                var startconnection;
                var zone = graphviewport.getActiveZones().first(function (item) {
                    return item.zone.getZoneType() === MEPH.graph.ActiveZone.type.connector;
                }).zone;

                graphviewport.on('startconnection', function () {
                    startconnection = true;
                });

                //Act
                zone.getDom().dispatchEvent(GraphTest.createEvent('click', {}));

                //Assert
                graphviewport.destroy();
                expect(startconnection).toBeTruthy();
            }).catch(function (error) {
                expect(error).caught();
            }).then(function (x) {
                done();
            });
    });
});﻿describe("MEPH/gpu/Context.spec.js", function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it("Creates a gpu context.", function (done) {
        //Arrange

        //Act
        MEPH.create('MEPH.gpu.Context').then(function ($class) {
            //Assert
            var context = new $class()

            expect(context !== null).toBeTruthy();

        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });

    });
    it('gpu will construct a command object on select', function (done) {
        MEPH.create('MEPH.gpu.Context').then(function ($class) {
            //Assert
            var context = new $class();
            var commandObject = context.select({ prop: 'float' });
            expect(commandObject).toBeTruthy();
            expect(commandObject.command === 'select').toBeTruthy();
            expect(commandObject.arguments[0].name === 'prop').toBeTruthy();
            expect(commandObject.arguments[0].type === 'float').toBeTruthy();

        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });

    it('gpu context, create function', function (done) {
        MEPH.create('MEPH.gpu.Context').then(function ($class) {
            var context = new $class();
            context.function('testFunction', { type: 'texture2d', name: 'parameter1' });
            var textfunc = context.getFunction('testFunction');
            expect(textfunc).toBeTruthy();
            expect(textfunc.name === 'testFunction').toBeTruthy();
            expect(textfunc.parameters.first().name === 'parameter1').toBeTruthy();
            expect(textfunc.parameters.first().type === 'texture2d').toBeTruthy();
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });

    it('can add functions to a gpu context function', function (done) {
        MEPH.create('MEPH.gpu.Context').then(function ($class) {
            var context = new $class();
            context.function('testFunction', { type: 'texture2d', name: 'parameter1' })
                    .select({ prop: 'float' });
            var textfunc = context.getFunction('testFunction');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });

    it('gpu context will accept commands', function (done) {
        MEPH.create('MEPH.gpu.Context').then(function ($class) {
            //Assert
            var context = new $class();
            var command = context.command(context.select({ prop: 'float' }), 'parameter');
            expect(command).toBeTruthy();
            expect(command.command).toBeTruthy();
            expect(command.jsInputs).toBeTruthy();
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });



});﻿describe("MEPH/file/Dropbox.spec.js", function () {

    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it("can create a drop box", function (done) {
        //Arrange

        //Act
        MEPH.create('MEPH.file.Dropbox').then(function ($class) {
            //Assert
            var input = new $class();

            expect(input).toBeTruthy();

        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });

    it('drop box has a depend property call dropboxCls, which will be computed on property change', function (done) {
        //Arrange

        MEPH.create('MEPH.file.Dropbox').then(function ($class) {
            var dropbox = new $class();

            dropbox.componentCls = 'cssclass';

            //Assert
            expect(dropbox.dropboxCls.indexOf('cssclass') !== -1).theTruth('the class wasnt set correctly');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });

    it('can render a drop box ', function (done) {
        MEPH.render('MEPH.file.Dropbox', 'dropbox').then(function (r) {
            var results = r.res;
            var app = r.app;

            var dom,
                iconbutton = results.first().classInstance;
            ///Assert
            dom = iconbutton.getDomTemplate()[0]
            expect(dom).toBeTruthy();
            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        })
    });

    it('on dragover the hover class is added.', function (done) {
        MEPH.render('MEPH.file.Dropbox', 'dropbox').then(function (r) {
            var results = r.res;
            var app = r.app;

            var dom,
                dropbox = results.first().classInstance;
            dropbox.dragovercssclass = 'hover';

            ///Assert
            dom = dropbox.getDomTemplate()[0];
            dom.dispatchEvent(MEPH.createEvent('dragover'));

            var p = new Promise(function (r, s) {
                setTimeout(function () {
                    expect(dropbox.dropboxCls.indexOf('hover') !== -1).toBeTruthy();

                    if (app) {
                        app.removeSpace();
                    }
                    r();
                }, 10);
            });

            return p;
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        })
    })

    it('on dragout removes the hover class is added.', function (done) {
        MEPH.render('MEPH.file.Dropbox', 'dropbox').then(function (r) {
            var results = r.res;
            var app = r.app;

            var dom,
                dropbox = results.first().classInstance;
            dropbox.hoverCls = 'hover';

            ///Assert
            dom = dropbox.getDomTemplate()[0];
            
            dom.dispatchEvent(MEPH.createEvent('dragout'));

            var p = new Promise(function (r, s) {
                setTimeout(function () {
                    expect(dropbox.dropboxCls.indexOf('hover') === -1).toBeTruthy();

                    if (app) {
                        app.removeSpace();
                    }
                    r();
                }, 10);
            });

            return p;
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        })
    })

    it('on drop a file is exposed through the file property.', function (done) {
        MEPH.render('MEPH.file.Dropbox', 'dropbox').then(function (r) {
            var results = r.res;
            var app = r.app;

            var dom, dropped,
                dropbox = results.first().classInstance;

            ///Assert
            dom = dropbox.getDomTemplate()[0];
            dom.addEventListener('filesdropped', function (x) {
                dropped = true;
            })
            dom.dispatchEvent(MEPH.createEvent('drop', {
                dataTransfer: {
                    files: [{ file: 'file' }]
                }
            }));

            var p = new Promise(function (r, s) {
                setTimeout(function () {
                    expect(dropped).toBeTruthy();

                    if (app) {
                        app.removeSpace();
                    }
                    r();
                }, 10);
            });

            return p;
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        })
    })

});﻿describe("MEPH/field/FormField.spec.js", function () {

      beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it("can create a form field", function (done) {
        //Arrange

        //Act
        MEPH.create('MEPH.field.FormField').then(function ($class) {
            //Assert
            var input = new $class();

            expect(input).toBeTruthy();

        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });

    it('form filed has a depend property call formFieldCls, which will be computed on property change', function (done) {
        //Arrange

        MEPH.create('MEPH.field.FormField').then(function ($class) {
            var input = new $class();
            
            input.componentCls = 'cssclass';

            //Assert
            expect(input.formFieldCls === 'form-control cssclass').theTruth('the class wasnt set correctly');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });

});﻿describe("MEPH/dom/ControlReader.spec.js", function () {
    var createDomObjects = function (node) {
        var dom = document.createElement(node);
        return dom;
    };
    it("Reads dom objects from the parent dom.", function (done) {
        //Arrange
        var dom = document.createElement('div'),
            $subdom = dom;
        [].interpolate(0, 10, function (i) {
            MEPH.addTemplateInformation({ classifiedName: 'node' + i, alias: 'node' + i });
            return createDomObjects('node' + i);
        }).foreach(function (subdom) {
            $subdom.appendChild(subdom);
            $subdom = subdom;
        });

        MEPH.create('MEPH.dom.ControlReader').then(function ($class) {
            //Act
            var reader = new $class(),
                viewobjects;

            viewobjects = reader.getViewObjects(dom);

            //Assert
            expect(viewobjects).toBeTruthy();
            expect(viewobjects.length === 10).toBeTruthy();
            [].interpolate(0, 10, function (i) {
                MEPH.removeTemplateInformation('node' + i);
            }) 
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });

    it('Reads the child view objects from the parent dom ', function (done) {
        //Arrange

        var dom = createDomObjects('div'), $subdom;
        [].interpolate(0, 10, function (i) {
            MEPH.addTemplateInformation({ classifiedName: 'node_' + i, alias: 'node_' + i });
            return createDomObjects('node_' + i);
        }).foreach(function (subdom) {
            dom.appendChild(subdom);
            $subdom = subdom;
        });
        
        MEPH.addTemplateInformation({ classifiedName: 'nodetest', alias: 'nodetest' });
        $subdom.appendChild(createDomObjects('nodetest'));
        MEPH.create('MEPH.dom.ControlReader').then(function ($class) {
            //Act
            var reader = new $class(),
                viewobjects,
                allobjects;
            viewobjects = reader.getChildViewObjects(dom);
            allobjects = reader.getViewObjects(dom);
            //Assert
            expect(viewobjects).toBeTruthy();
            expect(viewobjects.length === 10).toBeTruthy();
            expect(allobjects.length === 11).toBeTruthy();
            [].interpolate(0, 10, function (i) {
                MEPH.removeTemplateInformation('node_' + i);
            })
            MEPH.removeTemplateInformation('nodetest'); 
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });
});﻿describe("MEPH/dom/ControlLoader.spec.js", function () {
    var createDomObjects = function (node) {
        var dom = document.createElement(node);
        return dom;
    };

    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('will load controls from the nodes', function (done) {
        ///Arrange
        var nodes = [].interpolate(0, 10, function (i) {
            return { node: createDomObjects('m_input'), alias: 'm_input' };
        });
        MEPH.create('MEPH.input.Input').then(function ($class) {
            return MEPH.create('MEPH.dom.ControlLoader')
        }).then(function ($class) {
            //Act
            var loader = new $class();
            return Promise.resolve().then(function () {
                return loader.loadControls(nodes)
            }).then(function (controls) {
                try {
                    expect(controls).toBeTruthy();
                    expect(controls.length === 10).toBeTruthy();
                }
                catch (error) {
                    expect(error).caught();
                }
                finally {
                    done();
                }
            });
        });
    });
    it('will load controls from the node, then generate bound controls', function (done) {
        ///Arrange
        var nodes = [].interpolate(0, 10, function (i) {
            return { node: createDomObjects('m_input'), alias: 'm_input' };
        });
        MEPH.create('MEPH.input.Input').then(function ($class) {
            return MEPH.create('MEPH.dom.ControlLoader')
        }).then(function ($class) {
            //Act
            var loader = new $class();
            return loader.loadControls(nodes)
        }).then(function (packages) {
            var loader = new MEPH.dom.ControlLoader();
            return loader.generateBoundControls(packages);
        }).then(function (controls) {
            try {
                expect(controls).toBeTruthy();
                expect(controls.length === 10).toBeTruthy();
            }
            catch (error) {
                expect(error).caught();
            }
            finally {
                done();
            }
        });
    });

    it('can get all the ref from the node', function (done) {
        var dom = createDomObjects('deephelpercomposite');
        dom.setAttribute('ref-controller', 'value1');
        dom.setAttribute('ref-something', 'value2');
        MEPH.create('MEPH.dom.ControlLoader').then(function ($class) {
            var loader = new $class();
            var references = loader.getNodeInstanceReferences(dom);

            expect(references).toBeTruthy();;
            expect(references.length === 2).toBeTruthy();
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it('when a control is being loaded, events will fire at key points in the process', function (done) {
        ///Arrange
        var classInstances = [],
            initted = 0,
            setdomtemplate = 0,
            subcontrolsloaded = 0,
            referencesbound = 0,
            nodes = [].interpolate(0, 2, function (i) {
                return { node: createDomObjects('deephelpercomposite'), alias: 'deephelpercomposite' };
            });
        MEPH.requires('MEPHTests.helper.Application').then(function () {
            return MEPH.create('MEPHTests.helper.composite.DeepHelperComposite').then(function ($class) {
                return MEPH.create('MEPH.dom.ControlLoader')
            }).then(function ($class) {
                //Act
                var loader = new $class();

                var app = new MEPHTests.helper.Application();
                app.on('controladded', function (type, control) {
                    classInstances.push(control);
                    control.on('init', function () {
                        initted++;
                    });
                    control.on('setdomtemplate', function () {
                        setdomtemplate++;
                    });
                    control.on('referencesbound', function () {
                        referencesbound++;
                    });

                });
                return loader.loadControls(nodes, null, app)
            }).then(function (packages) {
                var loader = new MEPH.dom.ControlLoader();
                return loader.generateBoundControls(packages);
            }).then(function (controls) {
                try {
                    expect(controls).toBeTruthy();
                    expect(controls.length).toBeTruthy();
                    expect(initted == 2).theTruth('The controls didnt fire init event');
                    expect(setdomtemplate).theTruth('The controls didnt fire setdomtemplate event');
                    expect(referencesbound).theTruth('The controls didnt fire referencesbound event');
                }
                catch (error) {
                    expect(error).caught();
                }
                finally {
                    done();
                }
            });
        }).catch(function () {
            expect(new Error('something went wrong')).caught();
            done();
        });
    });


    it('will load controls from the node, then generate bound controls, then process sub composite controls and bind.', function (done) {
        ///Arrange
        var nodes = [].interpolate(0, 10, function (i) {
            return { node: createDomObjects('m_input'), alias: 'm_input' };
        });
        MEPH.create('MEPH.input.Input').then(function ($class) {
            return MEPH.create('MEPH.dom.ControlLoader')
        }).then(function ($class) {
            //Act
            var loader = new $class();
            return loader.loadControls(nodes)
        }).then(function (packages) {
            var loader = new MEPH.dom.ControlLoader();
            return loader.generateBoundControls(packages);
        }).then(function (controls) {
            var loader = new MEPH.dom.ControlLoader();
            return loader.loadSubControls(controls);
        }).then(function (controls) {
            expect(controls).toBeTruthy();
            expect(controls.length === 10).toBeTruthy();

        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });
    it('will load MEPHTests.helper.composite.HelperComposite controls from the node, then generate bound controls, then process sub composite controls and bind.', function (done) {
        ///Arrange
        var nodes = [].interpolate(0, 2, function (i) {
            return { node: createDomObjects('helpercomposite'), alias: 'helpercomposite' };
        });
        MEPH.requires('MEPHTests.helper.composite.HelperComposite', 'MEPH.dom.ControlLoader')
        .then(function () {
            //Act
            var loader = new MEPH.dom.ControlLoader();
            return loader.loadControls(nodes)
        }).then(function (packages) {
            var loader = new MEPH.dom.ControlLoader();
            return loader.generateBoundControls(packages);
        }).then(function (controls) {
            var loader = new MEPH.dom.ControlLoader();
            return loader.loadSubControls(controls);
        }).then(function (controls) {
            try {
                expect(controls).toBeTruthy();
                expect(controls.length === 2).toBeTruthy();
            }
            catch (error) {
                expect(error).caught();
            }
            finally {
                done();
            }
        });
    });

    it(' controls will be loaded into the a specific area specified by a control, otherwise internal items of the dom will be ignored.', function (done) {
        ///Arrange
        var nodes = [].interpolate(0, 2, function (i) {
            return { node: createDomObjects('mephtests_view_view'), alias: 'mephtests_view_view' };
        }).foreach(function (x) {
            x.node.innerHTML = '<div class="internal">Internal</div>';
        });;

        MEPH.requires('MEPHTests.helper.view.View', 'MEPH.dom.ControlLoader').then(function () {
            //Act
            var loader = new MEPH.dom.ControlLoader();
            return loader.loadControls(nodes);
        }).then(function (packages) {
            var loader = new MEPH.dom.ControlLoader();
            return loader.generateBoundControls(packages);
        }).then(function (controls) {
            var loader = new MEPH.dom.ControlLoader();
            return loader.loadSubControls(controls);
        }).then(function (controls) {
            try {
                var internal,
                    control = controls.first().classInstance.getDomTemplate().first(function (x) {
                        return x.querySelector('.defaultLocation');
                    });
                expect(control).theTruth('no control was found');
                if (control) {
                    internal = control.querySelector('.internal');
                    expect(internal).theTruth('No items were injected in to the control');
                }
            }
            finally {
                done();
            }
        }).catch(function () {
            expect(new Error('something when wrong while trying to inject an item')).caught();
        });
    })

    it('can load controls more than 2 levels deep', function (done) {
        ///Arrange
        var nodes = [].interpolate(0, 2, function (i) {
            return {
                node: createDomObjects('deephelpercomposite'),
                alias: 'deephelpercomposite'
            };
        });
        MEPH.requires('MEPH.bind.Binder',
            'MEPHTests.helper.composite.DeepHelperComposite',
            'MEPH.dom.ControlLoader')
        .then(function () {
            //Act
            var loader = new MEPH.dom.ControlLoader();
            return loader.loadControls(nodes)
        }).then(function (packages) {
            var loader = new MEPH.dom.ControlLoader();
            return loader.generateBoundControls(packages);
        }).then(function (controls) {
            var loader = new MEPH.dom.ControlLoader();

            return loader.loadSubControls(controls);
        }).then(function (controls) {
            try {
                var dom = controls[0].templateNode[0],
                    helpercomposite,
                    m_inputs;
                helpercomposite = dom.querySelector('[data-alias="helpercomposite"]');
                m_inputs = helpercomposite.querySelectorAll('m_input');
                expect(controls).toBeTruthy();
                expect(m_inputs.length === 0).toBeTruthy();
                expect(controls.length === 2).toBeTruthy();
            }
            catch (error) {
                expect(error).caught();
            }
            finally {
                done();
            }
        });
    });

    it('controls will connect to child controls. ', function (done) {
        ///Arrange
        var nodes = [].interpolate(0, 2, function (i) {
            return {
                node: createDomObjects('deephelpercomposite'),
                alias: 'deephelpercomposite'
            };
        });
        MEPH.requires('MEPH.bind.Binder',
            'MEPHTests.helper.composite.DeepHelperComposite',
            'MEPH.dom.ControlLoader')
        .then(function () {
            //Act
            var loader = new MEPH.dom.ControlLoader();
            return loader.loadControls(nodes)
        }).then(function (packages) {
            var loader = new MEPH.dom.ControlLoader();
            return loader.generateBoundControls(packages);
        }).then(function (controls) {
            var loader = new MEPH.dom.ControlLoader();

            return loader.loadSubControls(controls);
        }).then(function (controls) {
            try {
                var dom = controls[0].templateNode[0],
                    helpercomposite,
                    instance = controls[0].classInstance,
                    m_inputs;


                expect(instance.headerInput).theTruth('the control instance did not have the expected properties');
                expect(instance.helperComposite).theTruth('the control instance did not have the "helperComposite" expected properties');
                expect(instance.personInput).theTruth('the control instance did not have the "personInput" expected properties');
                expect(instance.lastHelperComposite).theTruth('the control instance did not have the "lastHelperComposite" expected properties');

            }
            catch (error) {
                expect(error).caught();
            }
            finally {
                done();
            }
        });
    });

    it('will load controls from the node, and attach controllers, presenter, models and viewmodels', function (done) {
        ///Arrange
        var nodes = [].interpolate(0, 10, function (i) {
            var dom = createDomObjects('m_input');
            dom.setAttribute('data-reference', '"p$":"helperpresenter",' +
       ' "vm$":"helperviewmodel","ct$":"helpercontroller","m$":"helpermodel"');
            return { node: dom, alias: 'm_input' };
        });
        MEPH.requires('MEPHTests.helper.controller.HelperController',
           'MEPHTests.helper.viewmodel.HelperViewModel',
           'MEPHTests.helper.presenter.HelperPresenter',
           'MEPH.input.Input',
           'MEPHTests.helper.model.HelperModel'
       ).then(function () {
           return MEPH.create('MEPH.dom.ControlLoader')
       }).then(function ($class) {
           //Act
           var loader = new $class();
           return loader.loadControls(nodes)
       }).then(function (controls) {
           try {
               expect(controls).toBeTruthy();
               expect(controls.length === 10).toBeTruthy();
           }
           catch (error) {
               expect(error).caught();
           }
           finally {
               done();
           }
       });
    });

    it(' will detect if a dom object has data-object references  ', function (done) {
        var dom = createDomObjects('m_input');
        var emptydom = createDomObjects('m_input');
        dom.setAttribute('data-reference', '"p$":"helperpresenter",' +
            ' "vm$":"helperviewmodel","ct$":"helpercontroller","m$":"helpermodel"');
        MEPH.create('MEPH.dom.ControlLoader').then(function ($class) {
            var controlLoader = new $class(),
                result;
            result = controlLoader.hasReferences(dom);
            expect(result).toBeTruthy();
            result = controlLoader.hasReferences(emptydom);
            expect(result === false).toBeTruthy();
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });

    it('will find presenters, controller, viewmodel, models  which will be paired with controls/views', function (done) {
        var dom = createDomObjects('m_input'),
            nodes;
        dom.setAttribute('data-reference', '"p$":"helperpresenter",' +
            ' "vm$":"helperviewmodel","ct$":"helpercontroller","m$":"helpermodel"');
        nodes = [{ node: dom, alias: 'm_input' }];
        MEPH.requires('MEPHTests.helper.controller.HelperController',
            'MEPHTests.helper.viewmodel.HelperViewModel',
            'MEPHTests.helper.presenter.HelperPresenter',
            'MEPHTests.helper.model.HelperModel'
        ).then(function () {
            return MEPH.create('MEPH.dom.ControlLoader');
        }).then(function ($class) {
            var controlLoader = new $class(),
                references;
            Promise.resolve().then(function () { return controlLoader.getObjectReferences(dom) }).then(function (references) {
                try {

                    expect(references).toBeTruthy();
                    expect(references.length === 4).toBeTruthy();
                }
                catch (error) {
                    expect(error).caught();
                }
                finally {
                    done();
                }
            });
        });
    });

    it('will get the template dom ', function (done) {
        //Arrange
        MEPH.create('MEPH.input.Input').then(function () {
            return MEPH.getDefinedTemplate('MEPH.input.Input')
        }).then(function (templatInfo) {
            MEPH.create('MEPH.dom.ControlLoader').then(function ($class) {
                try {
                    var controlLoader = new $class(),
                    childNodes;

                    //Act
                    childNodes = controlLoader.getTemplateDom(templatInfo);

                    //Assert
                    expect(childNodes).toBeTruthy();
                    expect(childNodes.length).toBeTruthy();
                }
                catch (error) {
                    expect(error).caught();
                }
                finally {
                    done();
                }
            });
        });;
    });
    it('will get an unattached div', function (done) {
        //Arrange

        MEPH.create('MEPH.dom.ControlLoader').then(function ($class) {
            try {            //Act
                var loader = new $class(),
                    div = loader.getUnattachedDiv();

                //Assert
                expect(div).toBeTruthy();
            }
            catch (error) {
                expect(error).caught();
            }
            finally {
                done();
            }
        });
    });
});﻿
/*global MEPH,U4,window*/
describe("MEPH/controller/Controller.spec.js", function () {

    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it("Control class is defined.", function (done) {
        //Arrange
        MEPH.create('MEPH.controller.Controller').then(function ($class) {
            var controller = new $class();
            expect(controller).theTruth('No controller was created');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it('controller is referrable', function (done) {
        MEPH.create('MEPH.controller.Controller').then(function ($class) {
            var controller = new $class();
            expect(controller.isReferrerable()).theTruth('the controller is not referrable');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it('controller is observable', function (done) {
        MEPH.create('MEPH.controller.Controller').then(function ($class) {
            var controller = new $class();
            expect(MEPH.util.Observable.isObservable(controller)).theTruth('The controller is not observable');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });;
    });
})﻿describe("MEPH/control/Control.spec.js", function () {

    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it("Control class is defined.", function (done) {
        //Arrange

        //Act
        MEPH.create('MEPH.control.Control').then(function (result) {
            var control = new MEPH.control.Control();
            try {
                expect(control).toBeTruthy();
                expect(result).toBeTruthy();
            }
            finally {
                done();
            }
        });
        //Assert
    });

    it('a control will be able to get its template information', function (done) {
        //Arrange
        MEPH.create('MEPHTests.helper.HelperControl').then(function (result) {
            var control = new result();
            return control;
        }).then(function (control) {
            //Act
            var templates = control.getTemplates();
            return templates;
        }).catch(function (error) {

            done();
            throw error;
        }).then(function (templates) {
            //Assert
            try {
                expect(templates).toBeTruthy();
                expect(templates.length).toBeTruthy();
            }
            finally {
                done();
            }
        }).catch(function (error) {
            expect(false).toBeTruthy();
            done();
        });
    });


    it('a control can add to a list of attributes that will transfer', function (done) {
        //Arrange
        MEPH.create('MEPHTests.helper.HelperControl').then(function (result) {
            try {
                var control = new result();
                control.addTransferableAttribute('attributeName', { options: true });
                expect(control.getListOfTransferableAttributes().length === 2).theTruth('the number of transferable attributes was incorrect');
            }
            catch (error) {
                expect(error).caught();
            }
            finally {
                done();
            }
        })
    });


    it('a control can have an alias', function (done) {
        //Arrange
        MEPH.create('MEPHTests.helper.HelperControl').then(function (result) {
            try {
                var control = new result();
                expect(control.alias === 'meph_helper').toBeTruthy();
            }
            finally {
                done();
            }
        })
    });

    it('a control can have a html template instance set', function (done) {
        //Arrange
        var dom = document.createElement('div');
        dom.innerHTML = 'stuff';

        MEPH.create('MEPH.control.Control').then(function ($class) {
            try {
                var control = new $class();
                control.setDomTemplate(dom);
                expect(control.getDomTemplate()).toBeTruthy();
            }
            finally {
                done();
            }
        });
    });

    it('a control can extend the html of another', function (done) {
        //Arrange
        MEPH.create('MEPHTests.helper.input.InputHelper').then(function ($class) {
            try {
                var inputHelper = new $class(),
                templates = inputHelper.templates;

                //Act
                //Assert
                expect(templates.length === 3).toBeTruthy();

            }
            finally {
                done();
            }
        });
    });

    it('a control can construct a template ', function (done) {
        //Arrange
        MEPH.create('MEPHTests.helper.input.InputHelper').then(function ($class) {

            var inputHelper = new $class(),
                generatedDomTemplate;

            Promise.resolve().then(function () { return inputHelper.generateDomTemplate() }).then(function (reslut) {;
                try {
                    //Act
                    generatedDomTemplate = reslut;

                    //Assert
                    expect(generatedDomTemplate).toBeTruthy();
                }
                catch (error) {
                    throw error;
                }
                finally {
                    done();
                }
            });
        });
    });

    it('when a control has generated its dom template, then a the dom objects with a data-bind process are found', function (done) {
        //Arrange
        MEPH.create('MEPHTests.helper.input.InputHelper').then(function ($class) {
            var inputHelper = new $class(),
                generatedDomTemplate;
            Promise.resolve().then(function () { return inputHelper.generateDomTemplate() }).then(function (result) {
                generatedDomTemplate = result;

                //Act
                return inputHelper.getDomObjectsToBind(generatedDomTemplate);
            }).then(function (domObjects) {
                try {

                    //Assert
                    expect(domObjects.length > 1).toBeTruthy();
                }
                catch (error) {
                    throw error;
                }
                finally {
                    done();
                }
            });
        })
    });

    it('when a control has identified controls that require a bind process, the setup is applied ', function (done) {
        //
        done();
    });

    it(' can add reference connection', function (done) {
        //Arrange
        MEPH.create('MEPHTests.helper.input.InputHelper').then(function ($class) {
            try {
                var inputHelper = new $class(),
                    view,
                    obj = {};

                inputHelper.addReferenceConnection('view', obj);
                view = inputHelper.getConnection('view');
                expect(view === obj).toBeTruthy();
                view = inputHelper.getConnection('noview');
                expect(view === null).toBeTruthy();
            }
            catch (error) {
                expect(false).toBeTruthy();
            }
            finally {
                done();
            }
        });
    });

    it('a control can get comment groups', function (done) {
        //Arrange
        MEPH.create('MEPHTests.helper.input.InputHelper').then(function ($class) {
            try {

                var inputHelper = new $class(),
                    templateInfo,
                    template = 'MEPHTests.helper.input.InputHelper',
                    commentGroups,
                    childNodes,
                    generatedDomTemplate;
                templateInfo = MEPH.getDefinedTemplate(template);
                childNodes = MEPH.dom.ControlLoader.getTemplateDom(templateInfo);


                //Act
                commentGroups = inputHelper.getCommentGroups(childNodes);

                expect(commentGroups).toBeTruthy();
            }
            finally {
                done();
            }
        });
    });

    it('a control can inject dom objects to a specific location', function (done) {
        MEPH.create('MEPH.control.Control').then(function ($class) {
            var div,
                template,
                parentDom = document.createElement('div'),
                control = new $class();
            template = document.createElement('custom');
            template.innerHTML = '<header><div class="target"></div></header>';
            div = document.createElement('div');
            div.innerHTML = '<!-- "name" : "header" -->';
            parentDom.appendChild(div);
            control.setInstanceTemplate(template);
            control.setDomTemplate([div]);
            control.injectControls = {
                location: {
                    header: 'header'
                }
            }
            control.handleDomTemplate();
            expect(div.querySelector('.target')).theTruth('Nothing was found, there should have been div.target');
        }).catch(function (error) {
            if (error) {
                expect(error).caught();
            }
        }).then(function () {
            done();
        });
    });

    it('a control can get the comment groups for templates it requires', function (done) {
        //Arrange
        MEPH.create('MEPHTests.helper.input.InputHelper').then(function ($class) {
            try {

                var inputHelper = new $class(),
                    templateInfo,
                    template = 'MEPHTests.helper.input.InputHelper',
                    commentGroups,
                    childNodes,
                    generatedDomTemplate;
                //Act
                var groups = inputHelper.getOrdereredConstructionInstructions();

                //Assert
                expect(groups.length === 3).toBeTruthy();
            }
            catch (error) {
                throw error;
            }
            finally {
                done();
            }
        });
    });

    it('a control can detect if the template has construction instructions', function (done) {
        //Arrange
        MEPH.create('MEPHTests.helper.input.InputHelper').then(function ($class) {
            try {
                var inputHelper = new $class(),
                template,
                template2,
                result;
                template = inputHelper.getOrdereredConstructionInstructions().first();
                template2 = inputHelper.getOrdereredConstructionInstructions().nth(2);
                //Act
                result = inputHelper.hasInstructions(template);

                expect(result === false).toBeTruthy();
                expect(inputHelper.hasInstructions(template2)).toBeTruthy();
            }
            catch (error) {
                throw error;
            }
            finally {
                done();
            }
        });
    });

    it('a control can inject dom objects into another at a specific position', function (done) {
        ///Arrange
        var dom = document.createElement('div');
        dom.innerHTML = '<div><span><!-- "name":"beforedescription" --></span></div>';
        var injectelement = document.createElement('injected');
        MEPH.create('MEPH.control.Control').then(function ($class) {
            try {
                var control = new $class();

                //Act
                control.injectDom(dom, {
                    domObjects: [injectelement],
                    position: 'beforedescription',
                    before: 'true'
                }, [injectelement]);

                //Assert
                expect(dom.querySelector('injected')).toBeTruthy();

            }
            catch (error) {
                throw error;
            }
            finally {
                done();
            }
        });
    });

    it('will have be observable on initialization', function (done) {
        MEPH.create('MEPH.control.Control').then(function ($class) {
            try {

                //Act
                var control = new $class();

                //Assert
                expect(control[MEPH.isObservablePropertyKey]).toBeTruthy();

            }
            catch (error) {
                throw error;
            }
            finally {
                done();
            }
        });
    });

    it('can add auto bind controls', function (done) {
        MEPH.create('MEPH.control.Control').then(function ($class) {
            var control = new $class(), div, result;
            div = document.createElement('custom');
            div.setAttribute('custom', 'value');
            control.addAutoBindProperty('custom', 'autoProp', 'path');
            result = control.getAutoBindProperties();
            expect(result.first()).toBeTruthy();
            expect(result.first().autoProperty === 'autoProp').toBeTruthy();
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });;
    });

    it('calling querySelectorAll will return dom objects', function (done) {
        var dom = document.createElement('div');
        dom.innerHTML = '<div><div class="name"><div></div></div></div><div><div class="name"><div></div></div></div>';
        MEPH.create('MEPH.control.Control').then(function ($class) {
            var control = new $class(),
                divs;

            control.$domTemplate = MEPH.Array(dom.childNodes);
            divs = control.querySelectorAll('.name');
            expect(divs.length === 2).theTruth('Not returning the correct number of items.');
            done();
        }).catch(function (error) {
            expect(error).caught();
            done();
        });
    });
});﻿describe("MEPH/button/IconButton.spec.js", function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('an iconbutton can be created.', function (done) {
        MEPH.create('MEPH.button.IconButton').then(function ($class) {
            var iconbutton = new $class();
            expect(iconbutton).theTruth('the icon button was not created');
        }).catch(function (error) {
            if (error) {
                expect(error).caught();
            }
        }).then(function () {
            done();
        });
    });


    it(' an icon button can set the icon type ', function (done) {
        //Arrange
        var app, div,
          dom;
        MEPH.requires('MEPH.button.IconButton', 'MEPHTests.helper.Application').then(function () {
            app = new MEPHTests.helper.Application();
            dom = app.createAppSpace(), div = document.createElement('div');
            div.innerHTML = '<iconbutton icon="fakeicon"></iconbutton>';
            return app.create('MEPH.button.IconButton', div.firstElementChild);
        }).then(function (results) {
            return app.loadViewObject([results], dom);
        }).then(function (results) {
            var iconbutton = results.first().classInstance;
            ///Assert
            expect(iconbutton.icon === 'fakeicon').theTruth('the icon type wasnt set correctly');
            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        })
    });



    it(' an icon button can set the icon color', function (done) {
        //Arrange
        var app, div,
          dom;
        MEPH.requires('MEPH.button.IconButton', 'MEPHTests.helper.Application').then(function () {
            app = new MEPHTests.helper.Application();
            dom = app.createAppSpace(), div = document.createElement('div');
            div.innerHTML = '<iconbutton icon="fakeicon" color="Red" size="X2"></iconbutton>';
            return app.create('MEPH.button.IconButton', div.firstElementChild);
        }).then(function (results) {
            return app.loadViewObject([results], dom);
        }).then(function (results) {
            var iconbutton = results.first().classInstance;
            ///Assert
            expect(iconbutton.size === 'X2').theTruth('the icon size wasnt set correctly');
            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        })
    });


    it(' an icon button can set the icon size', function (done) {
        //Arrange
        var app, div,
          dom;
        MEPH.requires('MEPH.button.IconButton', 'MEPHTests.helper.Application').then(function () {
            app = new MEPHTests.helper.Application();
            dom = app.createAppSpace(), div = document.createElement('div');
            div.innerHTML = '<iconbutton icon="fakeicon" color="Red"></iconbutton>';
            return app.create('MEPH.button.IconButton', div.firstElementChild);
        }).then(function (results) {
            return app.loadViewObject([results], dom);
        }).then(function (results) {
            var iconbutton = results.first().classInstance;
            ///Assert
            expect(iconbutton.color === 'Red').theTruth('the icon color wasnt set correctly');
            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        })
    });



    it(' an icon button with the type set will apply the css ', function (done) {
        //Arrange
        var app, div,
          dom;
        MEPH.requires('MEPH.button.IconButton', 'MEPHTests.helper.Application').then(function () {
            app = new MEPHTests.helper.Application();
            dom = app.createAppSpace(), div = document.createElement('div');
            div.innerHTML = '<iconbutton icon="calculator"></iconbutton>';
            return app.create('MEPH.button.IconButton', div.firstElementChild);
        }).then(function (results) {
            return app.loadViewObject([results], dom);
        }).then(function (results) {
            var iconbutton = results.first().classInstance;
            ///Assert
            expect(iconbutton.iconButtonCls.indexOf(iconbutton.iconPrefix + 'calculator') !== -1).theTruth('the icon class wasnt set correctly');
            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        })
    });
});﻿describe("MEPH/button/Button.spec.js", function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('a button can be created.', function (done) {
        MEPH.create('MEPH.button.Button').then(function ($class) {
            try {
                expect(new $class()).theTruth('The button class can not be created.');
            }
            catch (error) {
                expect(error).caught();
            }
            finally {
                done();
            }
        }).catch(function () {
            expect(new Error('Something went wrong while creating a button')).caught();
        });
    });


    it('when a button is clicked it will dispatch a buttonclicked event.', function (done) {
        var app, div,
            dom;
        MEPH.requires('MEPH.util.Observable', 'MEPH.button.Button', 'MEPHTests.helper.Application').then(function () {
            app = new MEPHTests.helper.Application();
            dom = app.createAppSpace(), div = document.createElement('div');
            div.innerHTML = '<mephbutton></mephbutton>';
            return app.create('MEPH.button.Button', div.firstElementChild);
        }).then(function (results) {
            return app.loadViewObject([results], dom);
        }).then(function (results) {
            var button = results.first().classInstance,
                clicked,
                buttonDom;

            try {
                buttonDom = button.getDomTemplate().first(function (x) { return x.nodeType === 1; })

                dom.addEventListener(MEPH.button.Button.buttonClickEvent, function () {
                    clicked = true;
                });

                buttonDom.dispatchEvent(MEPH.createEvent('click', {}));

                expect(clicked).theTruth('a buttonclick event was not fired');
            }
            finally {
                if (app) {
                    app.removeSpace();
                }
                done();
            }
        }).catch(function () {
            if (app) {
                app.removeSpace();
            }
            expect(new Error('did not render as expected')).caught();
            done();
        });;
    });


    it('classes applied to mephbuton are applied to the button.', function (done) {
        var app, div,
            dom;
        MEPH.requires('MEPH.util.Observable', 'MEPH.button.Button', 'MEPHTests.helper.Application').then(function () {
            app = new MEPHTests.helper.Application();
            dom = app.createAppSpace(), div = document.createElement('div');
            div.innerHTML = '<mephbutton class="appliedclass secondapplied"></mephbutton>';
            return app.create('MEPH.button.Button', div.firstElementChild);
        }).then(function (results) {
            return app.loadViewObject([results], dom);
        }).then(function (results) {
            var button = results.first().classInstance,
                clicked,
                buttonDom;

            try {
                buttonDom = button.getDomTemplate().first(function (x) { return x.nodeType === 1; })

                expect(buttonDom.classList.toString() === 'appliedclass secondapplied').theTruth('a buttonclick event was not fired');

            }
            catch (error) {
                expect(error).caught();
            }
            finally {
                if (app) {
                    app.removeSpace();
                }
                done();
            }
        }).catch(function () {
            if (app) {
                app.removeSpace();
            }
            expect(new Error('did not render as expected')).caught();
            done();
        });;
    });
    it('classes applied to mephbuton are applied to the button.', function (done) {
        var app, div,
            dom;
        MEPH.requires('MEPH.util.Observable', 'MEPH.button.Button', 'MEPHTests.helper.Application').then(function () {
            app = new MEPHTests.helper.Application();
            dom = app.createAppSpace(), div = document.createElement('div');
            div.innerHTML = '<mephbutton class="appliedclass"></mephbutton>';
            return app.create('MEPH.button.Button', div.firstElementChild);
        }).then(function (results) {
            return app.loadViewObject([results], dom);
        }).then(function (results) {
            var button = results.first().classInstance,
                clicked,
                buttonDom;

            try {
                buttonDom = button.getDomTemplate().first(function (x) { return x.nodeType === 1; })

                expect(buttonDom.classList.toString() === 'appliedclass').theTruth('a buttonclick event was not fired');

            }
            finally {
                if (app) {
                    app.removeSpace();
                }
            }
        }).catch(function () {
            if (app) {
                app.removeSpace();
            }
            expect(new Error('did not render as expected')).caught();
        }).then(function(){
            done();
        });;
    });

});﻿/**
 * @class MEPH.build.MinificationBatchCreate
 */
MEPH.define('MEPH.build.MinificationBatchCreate', {
    getScripts: function () {
        var scripts = document.querySelectorAll("script");
        var result = [];
        for (var i = 0 ; i < scripts.length; i++) {
            result.push(scripts[i]);
        }
        return result;
    },
    getSources: function (spacefile) {
        
        var me = this;
        var scripts = me.getScripts();
        return scripts.select(function (x) {
            return x.src;
        }).where(function (x) { return x.trim(); }).select(function (x) {
            return [x, spacefile || '']
        }).concatFluent(function (x) { return x; })
        .where(function (x) {
            return x;
        }).reverse();
    },
    generateMinificationFiles: function (path) {
        var me = this;
        //"http://localhost:62767/PumpNation/PumpScripts/"
        //java -jar yuicompressor-x.y.z.jar myfile.js -o myfile-min.js
        return me.getSources()
               .where(function (x) {
                   return x.startsWith(path);
               })
               .select(function (x) {
                   return x.after(path);
               })
               .select(function (x) {
                   return "java -jar yuicompressor-2.4.8.jar " + x + " -o " + x.splitAddLast("/", 'min-');
               })
    },
    generateMinificationCombinedBatchOp: function (path, outputname, spacefile) {
        //java -jar yuicompressor-2.4.8.jar file1.js, file2.js --type js -o combined.js 
        var me = this;
        //"http://localhost:62767/PumpNation/PumpScripts/"
        //copy /b at_1.js+at_2.js+at_3.js at_combined.js
        return "copy /b " + me.getSources(spacefile)
               .where(function (x) {
                   return x.startsWith(path) || x === spacefile;
               })
            .where(function (x) {
                return x.indexOf('MinificationBatchCreator') === -1;
            })
               .select(function (x) {
                   if (x === spacefile) {
                       return x;
                   }
                   var exp = new RegExp("/", 'gi')
                   return x.after(path).replace(exp, "\\");
               }).join('+') + " outputname_temp.js " +
            "\r\n" +
            "java -jar yuicompressor-2.4.8.jar outputname_temp.js -o " + (outputname);
    },
    generateMinificationFilesBatchOp: function (path) {
        var me = this;
        return me.generateMinificationFiles(path).select(function (x) { return x + "\r\n"; }).join(" ");
    }

});﻿describe("MEPH/build/MinificationBatchCreate.spec.js", 'MEPH.build.MinificationBatchCreate', function () {

    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it("Minification batch create.", function (done) {
        //Arrange

        //Act
        MEPH.create('MEPH.build.MinificationBatchCreate').then(function (result) {
            var builder = new MEPH.build.MinificationBatchCreate();
            expect(builder).toBeTruthy();
        }).catch(function (e) {
            expect(e).caught();
        }).then(done);
        //Assert
    });

    it('can generate a batch script ', function (done) {

        MEPH.create('MEPH.build.MinificationBatchCreate').then(function (result) {
            var builder = new MEPH.build.MinificationBatchCreate();
            var path = document.location.protocol + '//' + document.location.host + '/MEPH/MEPH/meph/',
                outputname = 'meph-min-build-test.js', spacefile = '';
debugger    
            var res = builder.generateMinificationCombinedBatchOp(path, outputname, spacefile);
            expect(res).toBeTruthy();
            expect(builder).toBeTruthy();
        }).catch(function (e) {
            expect(e).caught();
        }).then(done);
    })
});﻿describe("MEPH/bind/Binder.spec.js", function () {

    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });
    var createDomObjectWithDataBind = function createDomObjectWithDataBind(nodeName, dataBindString) {
        var dom = document.createElement(nodeName);
        dom.setAttribute(MEPH.defaultDataBindString, dataBindString);
        return dom;
    }
    it("A binder can be created.", function (done) {
        //Arrange
        MEPH.create('MEPH.bind.Binder').then(function ($class) {
            try {

                //Act
                var binder = new $class();

                //Assert
                expect(binder).toBeTruthy();
            }
            catch (error) {
                throw error;
            }
            finally {
                done();
            }
        });
    });

    it('a binder can create a handler from an object with a dom object', function (done) {
        //Arrange
        var dom = createDomObjectWithDataBind('div', '"innerHTML":"c$.prop"'),
            object = {
                value: 'value',
                transform: null,
                transformAgain: null,
                getConnection: function (type) {
                    return object;
                },
                getReferenceConnections: function () {
                    return [{ type: 'control', obj: object }];
                },
                getConnectableTypes: function () {
                    return MEPH.Array([MEPH.control.Control.connectables.control, 'view']);
                }
            };
        MEPH.Events(object);
        MEPH.requires('MEPH.control.Control').then(function () {
            return MEPH.create('MEPH.bind.Binder').then(function ($class) {
                try {
                    var binder = new $class();
                    binder.bindObject(object, dom);
                }
                catch (error) {
                    expect(false).toBeTruthy();
                }
                finally {
                    done();
                }
            })
        });
    });

    it('a binder can bind dom-events to handleers', function (done) {
        //Arrange
        var dom = createDomObjectWithDataBind('div', '"innerHTML":"c$.prop"'),
            called = 0,
            object = {
                value: 'value',
                transform: null,
                transformAgain: null,
                clicked: function () {
                    called++;
                },
                getConnection: function (type) {
                    return object;
                },
                getReferenceConnections: function () {
                    return [{ type: 'control', obj: object }];
                },
                getConnectableTypes: function () {
                    return MEPH.Array([MEPH.control.Control.connectables.control, 'view']);
                }
            };
        dom.setAttribute('data-events', '"click" : "c$.clicked"');
        MEPH.Events(object);
        MEPH.create('MEPH.bind.Binder').then(function ($class) {
            try {
                var binder = new $class();
                binder.bindObject(object, dom);

                dom.dispatchEvent(MEPH.createEvent('click', {}));
                setTimeout(function () {
                    expect(called === 1).theTruth('The click should have been handled.');
                    done();
                }, 100);
            }
            catch (error) {
                expect(false).toBeTruthy();
            }
            finally {
            }
        });
    });

    it('a binder can bind dom-events and execute once', function (done) {
        //Arrange
        var dom = createDomObjectWithDataBind('div', '"innerHTML":"c$.prop"'),
            called = 0,
            object = {
                value: 'value',
                transform: null,
                transformAgain: null,
                clicked: function () {
                    called++;
                },
                getConnection: function (type) {
                    return object;
                },
                getReferenceConnections: function () {
                    return [{ type: 'control', obj: object }];
                },
                getConnectableTypes: function () {
                    return MEPH.Array([MEPH.control.Control.connectables.control, 'view']);
                }
            };
        dom.setAttribute('data-events', '"click" : "c$.clicked"');
        MEPH.Events(object);
        MEPH.create('MEPH.bind.Binder').then(function ($class) {
            try {
                var binder = new $class();
                binder.bindObject(object, dom);

                dom.dispatchEvent(MEPH.createEvent('click', {}));
                setTimeout(function () {
                    expect(called === 1).theTruth('The click should have been handled.');
                    done();
                }, 1000);
            }
            catch (error) {
                expect(false).toBeTruthy();
            }
            finally {
            }
        });
    });

    it('can collect all the custom alias tags a certain level down', function (done) {
        ///getSubObjects
        var dom = createDomObjectWithDataBind('div', '"innerHTML":"c$.prop"'),
            object = {};
        dom.innerHTML = '<div></div><div><m_input></m_input><div></div></div><m_input><m_input></m_input><div></div></m_input>'
        MEPH.create('MEPH.bind.Binder').then(function ($class) {
            try {
                var binder = new $class();
                var result = binder.getSubObjects(dom, 1);
                expect(result).toBeTruthy();
                expect(result.length === 2).toBeTruthy();
            }
            catch (error) {
                expect(false).toBeTruthy();
            }
            finally {
                done();
            }
        });
    });

    it('can collect all the dom objects which are not custom tags', function (done) {
        var dom = createDomObjectWithDataBind('div', '"innerHTML":"c$.prop"'),
            object = {};
        dom.innerHTML = '<div></div><div><m_input></m_input><div></div></div><m_input><div></div></m_input>'
        MEPH.create('MEPH.bind.Binder').then(function ($class) {
            try {
                var binder = new $class();
                var result = binder.getDomObjectsForBinding(dom);
                expect(result).toBeTruthy();
                expect(result.length === 4).toBeTruthy();
            }
            catch (error) {
                expect(false).toBeTruthy();
            }
            finally {
                done();
            }
        });
    });

    it('a binder can parse the data-bind attributes', function (done) {
        //Arrange
        var dom = createDomObjectWithDataBind('div', '"innerHTML":"c$.prop"'),
            object = {};
        MEPH.create('MEPH.bind.Binder').then(function ($class) {
            try {
                var binder = new $class();
                var result = binder.parseDomAttributes(dom);
                expect(result).toBeTruthy();
                expect(result.innerHTML).toBeTruthy();
                expect(result.innerHTML === 'c$.prop').toBeTruthy();
            }
            catch (error) {
                expect(false).toBeTruthy();
            }
            finally {
                done();
            }
        });
    });

    it('a binder can parse the data-bind attributes and data-bind-value', function (done) {
        //Arrange
        var dom = createDomObjectWithDataBind('div', '"innerHTML":"c$.prop"'),
            object = {};
        dom.setAttribute('data-bind-value', '"c$.value | c$.transform"');
        MEPH.create('MEPH.bind.Binder').then(function ($class) {
            try {
                var binder = new $class();
                var result = binder.parseDomAttributes(dom);
                expect(result).toBeTruthy();
                expect(result.innerHTML).toBeTruthy();
                expect(result.innerHTML === 'c$.prop').toBeTruthy();
                expect(result.value === '"c$.value | c$.transform"').toBeTruthy();
            }
            catch (error) {
                expect(false).toBeTruthy();
            }
            finally {
                done();
            }
        });
    });

    it('a binder can parse the data-bind attributes and meph-data-value', function (done) {
        //Arrange
        var dom = createDomObjectWithDataBind('div', '"innerHTML":"c$.prop"'),
            object = {};
        MEPH.addDataBindPrefix('meph-data');
        dom.setAttribute('meph-data-value', '"c$.transform"');
        MEPH.create('MEPH.bind.Binder').then(function ($class) {
            try {
                var binder = new $class();
                var result = binder.parseDomAttributes(dom);
                expect(result).toBeTruthy();
                expect(result.innerHTML).toBeTruthy();
                expect(result.innerHTML === 'c$.prop').toBeTruthy();
                expect(result.value === '"c$.transform"').toBeTruthy();
            }
            catch (error) {
                expect(false).toBeTruthy();
            }
            finally {
                done();
            }
        });
    });



    it('a binder can parse the data-bind attributes and data-bind-value and custom d-binder-tutut', function (done) {
        //Arrange
        var dom = createDomObjectWithDataBind('div', '"innerHTML":"c$.prop"'),
            object = {};
        MEPH.addDataBindPrefix('d-binder');
        dom.setAttribute('data-bind-value', 'c$.value | c$.transform');
        dom.setAttribute('d-binder-tutut', 'c$.value | c$.transform');
        MEPH.create('MEPH.bind.Binder').then(function ($class) {
            try {
                var binder = new $class();
                var result = binder.parseDomAttributes(dom);
                expect(result).toBeTruthy();
                expect(result.innerHTML).toBeTruthy();
                expect(result.innerHTML === 'c$.prop').toBeTruthy();
                expect(result.value === 'c$.value | c$.transform').toBeTruthy();
                expect(result.tutut === 'c$.value | c$.transform').toBeTruthy();
            }
            catch (error) {
                expect(false).toBeTruthy();
            }
            finally {
                done();
            }
        });
    });

    it('a binder will add a single listener for a property that should be monitored for binding', function (done) {
        //Arrange
        MEPH.requires('MEPH.control.Control').then(function () {
            var dom = createDomObjectWithDataBind('div', '"innerHTML":"c$.prop"'),
                propertyAltered,
                object = {
                    getConnection: function () { return object; },
                    getReferenceConnections: function () {
                        return [{ type: 'control', obj: object }];
                    },
                    getConnectableTypes: function () {
                        return MEPH.Array([MEPH.control.Control.connectables.control]);
                    }
                };
            MEPH.Events(object);
            MEPH.addDataBindPrefix('d-binder');
            dom.setAttribute('data-bind-value', 'c$.value | c$.transform');
            dom.setAttribute('d-binder-tutut', 'c$.value | c$.transform');
            MEPH.create('MEPH.bind.Binder').then(function ($class) {
                try {
                    var binder = new $class();
                    var result = binder.parseDomAttributes(dom);
                    binder.executeInstructions = function (prop, eventType, instruction, target) {
                        propertyAltered = true;
                    };
                    binder.addEventListeners(result, object, dom);
                    object.fire(MEPH.bind.Binder.events.altered, { path: 'prop' });
                    expect(propertyAltered).toBeTruthy();
                    MEPH.removeDataBindPrefix('d-binder');
                }
                catch (error) {
                    expect(false).toBeTruthy();
                }
                finally {
                    done();
                }
            });
        });
    });

    it('a binder can parse an instruction stirng ', function (done) {
        //Arrange
        var instructionstring = 'c$.value | c$.transform | c$.transformAgain';
        MEPH.create('MEPH.bind.Binder').then(function ($class) {
            try {
                var binder = new $class(),
                    result;
                result = binder.parseInstructionString(instructionstring);
                expect(result.length === 3).toBeTruthy();
            }
            catch (error) {
                expect(false).toBeTruthy();
            }
            finally {
                done();
            }

        });
    });

    it('a binder will execute an instruction chain', function (done) {
        //Arrange
        MEPH.requires('MEPH.control.Control').then(function () {
            var dom = createDomObjectWithDataBind('div', '"innerHTML":"c$.prop"'),
                propertyAltered,
                object = {
                    value: 'value',
                    transform: null,
                    transformAgain: null,
                    getConnection: function (type) {
                        return object;
                    },
                    getReferenceConnections: function () {
                        return [{ type: 'control', obj: object }];
                    },
                    getConnectableTypes: function () {
                        return MEPH.Array([MEPH.control.Control.connectables.control]);
                    }
                };
            MEPH.Events(object);
            MEPH.addDataBindPrefix('d-binder');
            dom.setAttribute('data-bind-value', 'c$.value | c$.transform');
            dom.setAttribute('d-binder-tutut', 'c$.value | c$.transform');
            MEPH.create('MEPH.bind.Binder').then(function ($class) {
                try {
                    var binder = new $class(),
                        instructionstring,
                        instructions;
                    instructionstring = 'c$.value | c$.transform | c$.transformAgain';
                    instructions = binder.parseInstructionString(instructionstring);

                    //Act
                    binder.executeInstructions(dom, 'value', 'Changed', instructions, object, 'value')
                    .then(function () {
                        try {
                            //Assert
                            expect(object.transformAgain === 'value').toBeTruthy();
                        }
                        catch (error) {
                            expect(false).toBeTruthy();
                        }
                        finally {
                            done();
                        }
                    });
                }
                catch (error) {
                    expect(false).toBeTruthy();
                    done();
                }
                finally {
                }
            });
        });
    });

    it('a binder will execute an instruction chain accross objects', function (done) {
        //Arrange
        MEPH.requires('MEPH.control.Control').then(function () {
            var dom = createDomObjectWithDataBind('div', '"innerHTML":"c$.prop"'),
                propertyAltered,
                view = {
                    value: 'value'
                },
                object = {
                    value: 'value',
                    transform: null,
                    transformAgain: null,
                    getConnection: function (type) {
                        if (type === 'view') {
                            return view;
                        }
                        else {
                            return object;
                        }
                    },
                    getReferenceConnections: function () {
                        return [{ type: 'control', obj: object }];
                    },
                    getConnectableTypes: function () {
                        return MEPH.Array([MEPH.control.Control.connectables.control, 'view']);
                    }
                };
            MEPH.Events(view);
            MEPH.Events(object);
            MEPH.addDataBindPrefix('d-binder');
            MEPH.addBindPrefixShortCuts('v$', 'view');
            dom.setAttribute('data-bind-value', 'c$.value | c$.transform');
            dom.setAttribute('d-binder-tutut', 'c$.value | c$.transform');
            MEPH.create('MEPH.bind.Binder').then(function ($class) {
                try {
                    var binder = new $class(),
                        instructionstring,
                        instructions;
                    instructionstring = 'c$.value | v$.value | c$.transformAgain';
                    instructions = binder.parseInstructionString(instructionstring);

                    //Act
                    binder.executeInstructions(dom, 'value', 'altered', instructions, object, 'value')
                    .then(function () {
                        try {
                            //Assert
                            expect(object.transformAgain === 'value').toBeTruthy();
                            expect(object.value === 'value').toBeTruthy();
                        }
                        catch (error) {
                            expect(false).toBeTruthy();
                        }
                        finally {
                            done();
                        }
                    });
                }
                catch (error) {
                    expect(false).toBeTruthy();
                    done();
                }
                finally {
                }
            });
        });
    });

    it('a binder will execute an instruction chain accross objects with deep objects', function (done) {
        //Arrange
        MEPH.requires('MEPH.control.Control').then(function () {
            var dom = createDomObjectWithDataBind('div', '"innerHTML":"c$.prop"'),
                propertyAltered,
                view = {
                    value: 'value'
                },
                object = {
                    value: { prop: 'newvalue' },
                    transform: null,
                    transformAgain: null,
                    getConnection: function (type) {
                        if (type === 'view') {
                            return view;
                        }
                        else {
                            return object;
                        }
                    },
                    getConnectableTypes: function () {
                        return MEPH.Array([MEPH.control.Control.connectables.control, 'view']);
                    }
                };
            MEPH.Events(view);
            MEPH.Events(object);
            MEPH.addDataBindPrefix('d-binder');
            MEPH.addBindPrefixShortCuts('v$', 'view');
            dom.setAttribute('data-bind-value', 'c$.value.prop | c$.transform');
            dom.setAttribute('d-binder-tutut', 'c$.value.prop | c$.transform');
            MEPH.create('MEPH.bind.Binder').then(function ($class) {
                try {
                    var binder = new $class(),
                        instructionstring,
                        instructions;
                    instructionstring = 'c$.value.prop | v$.value | c$.transformAgain';
                    instructions = binder.parseInstructionString(instructionstring);

                    //Act
                    binder.executeInstructions(dom, 'value.prop', 'altered', instructions, object, 'value')
                    .then(function () {
                        try {
                            //Assert
                            expect(object.transformAgain === 'newvalue').toBeTruthy();
                            expect(object.value.prop === 'newvalue').toBeTruthy();
                        }
                        catch (error) {
                            expect(false).toBeTruthy();
                        }
                        finally {
                            done();
                        }
                    });
                }
                catch (error) {
                    expect(false).toBeTruthy();
                    done();
                }
                finally {
                }
            });
        });
    });


    it('a binder will execute an instruction chain accross objects with deep objects,' +
        ' and when reference objects are set new the corresponding changes will follow.', function (done) {
            //Arrange
            MEPH.requires('MEPH.control.Control').then(function () {
                var dom = createDomObjectWithDataBind('div', '"innerHTML":"c$.prop"'),
                    propertyAltered,
                    view = {
                        value: 'value'
                    },
                    object = {
                        value: { prop: 'newvalue' },
                        transform: null,
                        transformAgain: null,
                        getConnection: function (type) {
                            if (type === 'view') {
                                return view;
                            }
                            else {
                                return object;
                            }
                        },
                        getConnectableTypes: function () {
                            return MEPH.Array([MEPH.control.Control.connectables.control, 'view']);
                        }
                    };
                MEPH.Events(view);
                MEPH.Events(object);
                MEPH.addDataBindPrefix('d-binder');
                MEPH.addBindPrefixShortCuts('v$', 'view');
                dom.setAttribute('data-bind-value', 'c$.value.prop | c$.transform');
                dom.setAttribute('d-binder-tutut', 'c$.value.prop | c$.transform');
                MEPH.create('MEPH.bind.Binder').then(function ($class) {
                    try {
                        var binder = new $class(),
                            instructionstring,
                            instructions;
                        instructionstring = 'c$.value.prop | v$.value | c$.transformAgain';
                        instructions = binder.parseInstructionString(instructionstring);

                        //Act
                        binder.executeInstructions(dom, 'value', 'Changed', instructions, object, 'value')
                        .then(function () {
                            try {
                                //Assert
                                expect(object.transformAgain === 'newvalue').toBeTruthy();
                                expect(object.value.prop === 'newvalue').toBeTruthy();
                            }
                            catch (error) {
                                expect(false).toBeTruthy();
                            }
                            finally {
                                done();
                            }
                        });
                    }
                    catch (error) {
                        expect(false).toBeTruthy();
                        done();
                    }
                    finally {
                    }
                });
            });
        });
    it('a binder will execute an instruction if there is an invalid property chain an error will be thrown', function (done) {
        //Arrange
        MEPH.requires('MEPH.control.Control').then(function () {
            var dom = createDomObjectWithDataBind('div', '"innerHTML":"c$.prop"'),
                propertyAltered,
                view = {
                    value: 'value'
                },
                object = {
                    transform: null,
                    transformAgain: null,
                    getConnection: function (type) {
                        if (type === 'view') {
                            return view;
                        }
                        else {
                            return object;
                        }
                    },
                    getConnectableTypes: function () {
                        return MEPH.Array([MEPH.control.Control.connectables.control, 'view']);
                    }
                };
            MEPH.Events(view);
            MEPH.Events(object);
            MEPH.addDataBindPrefix('d-binder');
            MEPH.addBindPrefixShortCuts('v$', 'view');
            dom.setAttribute('data-bind-value', 'c$.value.prop | c$.transform');
            dom.setAttribute('d-binder-tutut', 'c$.value.prop | c$.transform');
            MEPH.create('MEPH.bind.Binder').then(function ($class) {
                try {
                    var binder = new $class(),
                        instructionstring,
                        errorthrown,
                        instructions;
                    instructionstring = 'c$.value.prop | v$.value | c$.transformAgain';
                    instructions = binder.parseInstructionString(instructionstring);

                    //Act
                    binder.executeInstructions(dom, 'value', 'Changed', instructions, object, 'value')
                        .catch(function (error) {
                            errorthrown = true;
                        })
                        .then(function (result) {
                            try {
                                //Assert
                                expect(errorthrown).toBeTruthy();
                                expect(object.transformAgain === null).toBeTruthy();
                                expect(object.value === undefined).toBeTruthy();
                            }
                            catch (error) {
                                expect(false).toBeTruthy();
                            }
                            finally {
                                done();
                            }
                        });
                }
                catch (error) {
                    expect(false).toBeTruthy();
                    done();
                }
                finally {
                }
            });
        });
    });

    it('a binder can set the value on a dom object', function (done) {
        //Arrange
        var dom = createDomObjectWithDataBind('div', '"innerHTML":"c$.prop"');
        MEPH.create('MEPH.bind.Binder').then(function ($class) {
            try {
                var binder = new $class();
                binder.setValueOnDom('innerHTML', dom, 'innerHTML');
                expect(dom.innerHTML === 'innerHTML').toBeTruthy();
            }
            catch (error) {
                expect(false).toBeTruthy();
            }
            finally {
                done();
            }
        });
    });

    it('a binder can set the value on a dom object class', function (done) {
        //Arrange
        var dom = createDomObjectWithDataBind('div', '"innerHTML":"c$.prop"');
        MEPH.create('MEPH.bind.Binder').then(function ($class) {
            try {
                var binder = new $class();
                binder.setValueOnDom('class1 class2', dom, 'class');
                expect(dom.classList.contains('class1')).toBeTruthy();
                expect(dom.classList.contains('class2')).toBeTruthy();
            }
            catch (error) {
                expect(false).toBeTruthy();
            }
            finally {
                done();
            }
        });
    });


    it('a control can bind to events on custom controls', function (done) {
        //Arrange
        var dom = createDomObjectWithDataBind('div', '');
        helperCompositeNode = ' <helpercomposite mephid="helperComposite"' +
        ' data-bind=\'"helperCompositeProperty" : "c$.deepHelperProperty"\'' +
        ' mephuniqueid="f6f0b8c8-ac52-401c-b2ec-e0adaec4e963">' +
        '</helpercomposite>';
        dom.innerHTML = helperCompositeNode,
        helperCompositeNode = dom.firstElementChild;

        MEPH.requires('MEPH.bind.Binder',
            'MEPHTests.helper.composite.DeepHelperComposite',
            'MEPHTests.helper.composite.HelperComposite').then(function () {
                try {
                    var dhc = new MEPHTests.helper.composite.DeepHelperComposite(),
                    hc = new MEPHTests.helper.composite.HelperComposite();

                    MEPH.Binder.bindControl(dhc, hc, helperCompositeNode);

                    //Act
                    var teep = dhc.deepHelperProperty = 'prop';

                    //Assert
                    setTimeout(function () {
                        expect(hc.helperCompositeProperty === 'prop').theTruth('helperCompositeProperty didnt propogate to the deepHelperProperty');
                        done();
                    }, 100);
                }
                catch (error) {
                    expect(error).caught();
                }
                finally {
                }
            });
    });

    it('can parse instructions for subcontrols', function (done) {
        //Arrange
        MEPH.requires('MEPH.bind.Binder',
            'MEPHTests.helper.composite.DeepHelperComposite',
            'MEPHTests.helper.composite.HelperComposite').then(function () {
                try {

                    var dhc = new MEPHTests.helper.composite.DeepHelperComposite(),
                        instruction,
                        parsedInstruction,
                        hc = new MEPHTests.helper.composite.HelperComposite();

                    hc.setUniqueId(MEPH.GUID());

                    shorcut = MEPH.getBindPrefixShortCuts().first(function (x) {
                        return x.type === 'subcontrol';
                    });

                    instruction = shorcut.prefix + hc.getUniqueId() + '.helperCompositeProperty';

                    //Act    
                    parsedInstruction = MEPH.Binder.parseInstructionString(instruction)[0]

                    //Assert
                    expect(parsedInstruction.shortCut.prefix === shorcut.prefix);
                    expect(parsedInstruction.path.join('.') === shorcut.prefix + '.helperCompositeProperty');
                    expect(parsedInstruction.uniqueId === hc.getUniqueId());

                }
                catch (error) {
                    expect(error).caught();
                }
                finally {
                    done();
                }
            });
    });
    it(' can parse push instructions from dom objects', function (done) {
        //Arrange
        var dom = createDomObjectWithDataBind('div', '');
        helperCompositeNode = ' <helpercomposite mephid="helperComposite"' +
        ' data-push=\'"helperCompositeProperty" : "s$.deepHelperProperty"\'' +
        ' mephuniqueid="f6f0b8c8-ac52-401c-b2ec-e0adaec4e963">' +
        '</helpercomposite>';
        dom.innerHTML = helperCompositeNode,
        helperCompositeNode = dom.firstElementChild;

        MEPH.requires('MEPH.bind.Binder').then(function () {
            try {
                //Act
                var parsedInstruction = MEPH.Binder.parseDomAttributes(helperCompositeNode, MEPH.getReverseDataBindingPrefixes(), MEPH.defaultReversePrefix);

                //Assert
                expect(parsedInstruction.helperCompositeProperty === 's$.deepHelperProperty').theTruth('the parsed reverse binding was not correct : ' + parsedInstruction.helperCompositeProperty);;
            }
            catch (error) {
                expect(error).caught();
            }
            finally {
                done();
            }
        });
    });


    it(' can parse data-event attributes on a dom object', function (done) {
        //Arrange
        var dom = createDomObjectWithDataBind('div', '');
        helperCompositeNode = ' <helpercomposite mephid="helperComposite"' +
        ' data-events=\'"click" : "c$.function"\'' +
        ' mephuniqueid="f6f0b8c8-ac52-401c-b2ec-e0adaec4e963">' +
        '</helpercomposite>';
        dom.innerHTML = helperCompositeNode,
        helperCompositeNode = dom.firstElementChild;

        MEPH.requires('MEPH.bind.Binder').then(function () {
            try {
                //Act
                var parsedInstruction = MEPH.Binder.parseDomAttributes(helperCompositeNode, MEPH.getEventDataBindingPrefixes(), MEPH.defaultEventPrefix);

                //Assert
                expect(parsedInstruction.click === 'c$.function').theTruth('the parsed event was not correct : ' + parsedInstruction.click);
            }
            catch (error) {
                expect(error).caught();
            }
            finally {
                done();
            }
        });
    });

    it('when a click event occurs, the clicked function will get called. ', function (done) {
        //Arrange
        var dom = createDomObjectWithDataBind('div', '');
        helperCompositeNode = ' <helpercomposite mephid="helperComposite"' +
        ' data-events=\'"click" : "c$.function"\'' +
        ' mephuniqueid="f6f0b8c8-ac52-401c-b2ec-e0adaec4e963">' +
        '</helpercomposite>';
        dom.innerHTML = helperCompositeNode,
        helperCompositeNode = dom.firstElementChild;


        MEPH.requires('MEPH.bind.Binder',
             'MEPHTests.helper.composite.DeepHelperComposite',
             'MEPHTests.helper.composite.HelperComposite').then(function () {
                 try {

                     var dhc = new MEPHTests.helper.composite.DeepHelperComposite(),
                         called,
                         hc = new MEPHTests.helper.composite.HelperComposite();
                     hc.setUniqueId(MEPH.GUID());
                     dhc.function = function () {
                         called = true;
                     }
                     //Act    
                     MEPH.Binder.bindDomControl({
                         classInstance: dhc
                     }, {
                         classInstance: hc,
                         templateNode: MEPH.Array([helperCompositeNode])
                     }, helperCompositeNode);

                     helperCompositeNode.dispatchEvent(MEPH.createEvent('click', {}));
                     //Assert
                     setTimeout(function () {
                         expect(called).theTruth('the click event was not propogated to the parent node');
                         done();
                     }, 10);

                 }
                 catch (error) {
                     expect(error).caught();
                 }
                 finally {
                 }
             });
    });

    it('when a click event occurs, the clicked function will get called. with meph-event-click', function (done) {
        //Arrange
        var dom = createDomObjectWithDataBind('div', '');
        helperCompositeNode = ' <helpercomposite mephid="helperComposite"' +
        ' meph-event-click="c$.function"' +
        ' mephuniqueid="f6f0b8c8-ac52-401c-b2ec-e0adaec4e963">' +
        '</helpercomposite>';
        dom.innerHTML = helperCompositeNode,
        helperCompositeNode = dom.firstElementChild;


        MEPH.requires('MEPH.bind.Binder',
             'MEPHTests.helper.composite.DeepHelperComposite',
             'MEPHTests.helper.composite.HelperComposite').then(function () {
                 try {
                     var dhc = new MEPHTests.helper.composite.DeepHelperComposite(),
                         called,
                         hc = new MEPHTests.helper.composite.HelperComposite();
                     hc.setUniqueId(MEPH.GUID());
                     dhc.function = function () {
                         called = true;
                     }
                     MEPH.addEventDataBindingPrefixes('meph-event');
                     //Act    
                     MEPH.Binder.bindDomControl({
                         classInstance: dhc
                     }, {
                         classInstance: hc,
                         templateNode: MEPH.Array([helperCompositeNode])
                     }, helperCompositeNode);

                     helperCompositeNode.dispatchEvent(MEPH.createEvent('click', {}));
                     //Assert
                     setTimeout(function () {
                         expect(called).theTruth('the click event was not propogated to the parent node');
                         done();
                     }, 10);

                 }
                 catch (error) {
                     expect(error).caught();
                 }
                 finally {
                 }
             });
    });


    it('when a click event occurs, a series of functions are called . ', function (done) {
        //Arrange
        var dom = createDomObjectWithDataBind('div', '');
        helperCompositeNode = ' <helpercomposite mephid="helperComposite"' +
        ' data-events=\'"click" : "c$.function | c$.function |c$.function |c$.function "\'' +
        ' mephuniqueid="f6f0b8c8-ac52-401c-b2ec-e0adaec4e963">' +
        '</helpercomposite>';
        dom.innerHTML = helperCompositeNode,
        helperCompositeNode = dom.firstElementChild;


        MEPH.requires('MEPH.bind.Binder',
             'MEPHTests.helper.composite.DeepHelperComposite',
             'MEPHTests.helper.composite.HelperComposite').then(function () {
                 try {

                     var dhc = new MEPHTests.helper.composite.DeepHelperComposite(),
                         called = 0,
                         hc = new MEPHTests.helper.composite.HelperComposite();
                     hc.setUniqueId(MEPH.GUID());
                     dhc.function = function () {
                         called++;
                     }
                     //Act    
                     MEPH.Binder.bindDomControl({
                         classInstance: dhc
                     }, {
                         classInstance: hc,
                         templateNode: MEPH.Array([helperCompositeNode])
                     }, helperCompositeNode);

                     helperCompositeNode.dispatchEvent(MEPH.createEvent('click', {}));
                     //Assert
                     setTimeout(function () {
                         expect(called === 4).theTruth('the functions were executed the wrong number of times : ' + called);
                         done();
                     }, 10);

                 }
                 catch (error) {
                     expect(error).caught();
                 }
                 finally {
                 }
             });
    });


    it('will reverse the instructions when there are no pipes in the instructions', function (done) {
        MEPH.requires('MEPH.bind.Binder',
            'MEPHTests.helper.composite.DeepHelperComposite',
            'MEPHTests.helper.composite.HelperComposite').then(function () {
                try {

                    var dhc = new MEPHTests.helper.composite.DeepHelperComposite(),
                    hc = new MEPHTests.helper.composite.HelperComposite();
                    hc.setUniqueId(MEPH.GUID());
                    //Act    
                    var reversedInstructions = MEPH.Binder.reverseInstructions({
                        helperCompositeProperty: "c$.deepHelperProperty",
                        property: "c$.holwa.asdf"
                    }, dhc, hc);

                    //Assert
                    expect(reversedInstructions.deepHelperProperty === 's$' + '.helperCompositeProperty');

                }
                catch (error) {
                    expect(error).caught();
                }
                finally {
                    done();
                }
            });
    });


    it('a binder will be able to prune the bindingInformation specifically for a presenter/control/viewmodel/view', function (done) {
        //Arrange
        var transform = 'transform';
        MEPH.requires('MEPH.control.Control').then(function () {
            var dom = createDomObjectWithDataBind('div', '"innerHTML":"c$.value | c$.transform"');

            MEPH.create('MEPH.bind.Binder').then(function ($class) {
                try {
                    var binder = new $class(),
                        controlTrimInstructions,
                        presenterTrimmedInstructions,
                        bindingInformation;

                    bindingInformation = binder.parseDomAttributes(dom);

                    //Act
                    controlTrimInstructions = binder.trimInstructions(bindingInformation, 'control');
                    presenterTrimmedInstructions = binder.trimInstructions(bindingInformation, 'presenter');

                    //Assert
                    expect(controlTrimInstructions).theTruth('Nothing was returned.');
                    if (controlTrimInstructions) {
                        expect(controlTrimInstructions).theTruth('Nothing was returned.');
                    }
                    expect(presenterTrimmedInstructions === false).theTruth('the presenter returned instructions when it shouldnt');
                }
                catch (error) {
                    expect(error).caught();
                }
                finally {
                    done();
                }
            });
        });
    });


    it('a binder can parse an instruction string with parameters', function (done) {
        var instructionstring = 'c$.value | c$.transform, c$.param1, c$.param2 | c$.transformgain';
        MEPH.create('MEPH.bind.Binder').then(function ($class) {
            var binder = new $class(), result;
            result = binder.parseInstructionString(instructionstring);
            expect(result.length === 3).toBeTruthy();
            expect(result.nth(2).params.length === 2).toBeTruthy();
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it('a binder will execute an instruction chain, and parameters will passed along .', function (done) {
        //Arrange
        MEPH.requires('MEPH.control.Control').then(function () {
            var passedvalues, dom = createDomObjectWithDataBind('div', '"innerHTML":"c$.prop"'),
                propertyAltered,
                object = {
                    value: 'value',
                    transform: function (p, p2) { passedvalues = [p, p2]; return p; },
                    transformAgain: null,
                    getConnection: function (type) {
                        return object;
                    },
                    getConnectableTypes: function () {
                        return MEPH.Array([MEPH.control.Control.connectables.control]);
                    }
                };
            MEPH.Events(object);
            MEPH.addDataBindPrefix('d-binder');
            dom.setAttribute('data-bind-value', 'c$.value | c$.transform');
            dom.setAttribute('d-binder-tutut', 'c$.value | c$.transform');
            return MEPH.create('MEPH.bind.Binder').then(function ($class) {
                var binder = new $class(),
                    instructionstring,
                    instructions;
                instructionstring = 'c$.value | c$.transform, param1, param2 | c$.transformAgain';
                instructions = binder.parseInstructionString(instructionstring);

                //Act
                return binder.executeInstructions(dom, 'value', 'Changed', instructions, object, 'value')
                   .then(function () {
                       //Assert
                       expect(passedvalues.first() === 'param1').toBeTruthy();
                       expect(passedvalues.nth(2) === 'param2').toBeTruthy();
                       expect(object.transformAgain === 'param1').toBeTruthy();

                   });

            })
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });;
    });

    it('a binder will execute an instruction chain, and parameters will passed along, even if the are also binding parameters .', function (done) {
        //Arrange
        MEPH.requires('MEPH.control.Control').then(function () {
            var passedvalues, dom = createDomObjectWithDataBind('div', '"innerHTML":"c$.prop"'),
                propertyAltered,
                object = {
                    value: 'value',
                    anotherparam: 123,
                    transform: function (p, p2) { passedvalues = [p, p2]; return p; },
                    transformAgain: null,
                    getConnection: function (type) {
                        return object;
                    },
                    getConnectableTypes: function () {
                        return MEPH.Array([MEPH.control.Control.connectables.control]);
                    }
                };
            MEPH.Events(object);
            MEPH.addDataBindPrefix('d-binder');
            dom.setAttribute('data-bind-value', 'c$.value | c$.transform');
            dom.setAttribute('d-binder-tutut', 'c$.value | c$.transform');
            return MEPH.create('MEPH.bind.Binder').then(function ($class) {
                var binder = new $class(),
                    instructionstring,
                    instructions;
                instructionstring = 'c$.value | c$.transform, c$.anotherparam, param2 | c$.transformAgain';
                instructions = binder.parseInstructionString(instructionstring);

                //Act
                return binder.executeInstructions(dom, 'value', 'Changed', instructions, object, 'value')
                   .then(function () {
                       //Assert
                       expect(passedvalues.first() === 123).toBeTruthy();
                       expect(passedvalues.nth(2) === 'param2').toBeTruthy();
                       expect(object.transformAgain === 123).toBeTruthy();

                   });

            })
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });;
    });


    it('a control can have attributes on a custom tag that will be bound ie; <custom customAttr="p$.value"></custom', function (done) {
        //Arrange
        MEPH.requires('MEPH.control.Control', 'MEPH.bind.Binder').then(function () {
            var dom = createDomObjectWithDataBind('custom', ''),
                binder = new MEPH.bind.Binder(), result,
                object = {
                    getListOfTransferableAttributes: function () {
                        return MEPH.Array([{ name: 'customAttr', options: {} }])
                    }
                };
            dom.setAttribute('customAttr', 'p$.value');

            result = binder.parseDomAttributes(dom, null, null, object);
            expect(result).theTruth('parsing didnt work as expected');
            expect(result.customAttr).theTruth('parsing didnt yield a customAttr rule');

        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it('a control can have properties that will automatically be bound ' +
        'also when another is present ie <custom value="m$.value"></custom> will have a property m$. isValidatable.value', function (done) {
            //Arrange
            MEPH.requires('MEPH.control.Control', 'MEPH.bind.Binder').then(function () {
                var dom = createDomObjectWithDataBind('custom', ''),
                    binder = new MEPH.bind.Binder(), result,
                    object = {
                        getListOfTransferableAttributes: function () {
                            return ([{ name: 'customAttr', options: {} }])
                        },
                        getAutoBindPropertyPath: function (path) {
                            return path;
                        },
                        getAutoBindProperties: function () {
                            return [{ property: 'customAttr', path: 'p$. isValidatable.value', autoProperty: 'invalid' }];
                        }
                    };
                dom.setAttribute('customAttr', 'p$.value');

                result = binder.parseDomAttributes(dom, null, null, object);
                expect(result).theTruth('parsing didnt work as expected');
                expect(result['invalid']).theTruth('parsing didnt yield a customAttr rule');

            }).catch(function (error) {
                expect(error).caught();
            }).then(function () {
                done();
            });
        });


    it('a binder will execute an instruction chain accross objects and with functions', function (done) {
        //Arrange
        var transform = 'transform';
        MEPH.requires('MEPH.control.Control').then(function () {
            var dom = createDomObjectWithDataBind('div', '"innerHTML":"c$.prop"'),
                propertyAltered,
                view = {
                    valueAfter: null,
                    value: 'value',
                    func: function (val) {
                        return val + transform
                    }
                },
                object = {
                    value: 'value',
                    transform: null,
                    transformAgain: null,
                    getConnection: function (type) {
                        if (type === 'view') {
                            return view;
                        }
                        else {
                            return object;
                        }
                    },
                    getConnectableTypes: function () {
                        return MEPH.Array([MEPH.control.Control.connectables.control, 'view']);
                    }
                };
            MEPH.Events(view);
            MEPH.Events(object);
            MEPH.addDataBindPrefix('d-binder');
            MEPH.addBindPrefixShortCuts('v$', 'view');
            dom.setAttribute('data-bind-value', 'c$.value | c$.transform');
            dom.setAttribute('d-binder-tutut', 'c$.value | c$.transform');
            MEPH.create('MEPH.bind.Binder').then(function ($class) {
                try {
                    var binder = new $class(),
                        instructionstring,
                        instructions;
                    instructionstring = 'c$.value | v$.value | v$.func | v$.valueAfter | c$.transformAgain';
                    instructions = binder.parseInstructionString(instructionstring);

                    //Act
                    binder.executeInstructions(dom, 'value', 'Changed', instructions, object, 'path')
                    .then(function () {
                        try {
                            //Assert
                            expect(object.transformAgain === 'value' + transform).toBeTruthy();
                            expect(object.value === 'value').toBeTruthy();
                            expect(view.valueAfter = 'value' + transform).toBeTruthy();
                        }
                        catch (error) {
                            expect(false).toBeTruthy();
                        }
                        finally {
                            done();
                        }
                    });
                }
                catch (error) {
                    expect(false).toBeTruthy();
                    done();
                }
                finally {
                }
            });
        });
    });
});﻿/**
 * @class MEPH.table.SpreadSheet
 * @extends MEPH.control.Control
 * A infinitely scrolling SpreadSheet.
 **/
MEPH.define('MEPH.tween.Calculator', {
    requires: ['MEPH.math.Util', 'MEPH.math.Vector'],
    statics: {
        /**
         * Bezier Curve
         *
         **/
        BezierCubic: function (P1, P2, P3, P4, t) {
            var t0 = Math.pow(1 - t, 3);
            var t1 = 3 * Math.pow(1 - t, 2) * t;
            var t2 = 3 * Math.pow(1 - t, 2) * Math.pow(t, 2);
            var t3 = Math.pow(t, 3);

            var res = new MEPH.math.Vector([t0 * P1.x + t1 * P2.x + t2 * P3.x + t3 * P4.x,
                t0 * P1.y + t1 * P2.y + t2 * P3.y + t3 * P4.y]);
            return res;
        },
        Linear: function (p1, p2, t) {
            var vect = MEPH.math.Vector.Lerp2D(p1, p2, t);
            return vect;
        }
    },
    properties: {
        tweendata: null
    },
    setData: function (data) {
        var me = this;
        me.tweendata = data;
    },
    /**
     * Gets the tween value from the first path in the tween data.
     * @param {Number } t A value from 0 to 1
     **/
    get: function (t) {
        var me = this;
        var path = me.tweendata.first(function (x) { return x; });

        var index = path.x.firstIndex(function (x) { return x > t; });
        if (index === -1) {
            if (t === path.x.last()) {
                index = path.x.length - 1;
            }
            else
                throw new Error('not in defined range: Calculator.js')
        }
        index--;
        var segment = path.segments ? path.segments.first(function (x) {
            return x.segment === index;
        }) : null;
        var p1 = new Vector([path.x.nth(index + 1), path.y.nth(index + 1)]);
        var p2 = new Vector([path.x.nth(index + 2), path.y.nth(index + 2)]);
        var t0 = t < path.x.nth(index + 1) ? t - path.x.nth(index + 1) : t;
        var tn = path.x.nth(index + 2);
        if (tn)
            t0 = t0 / tn;
        if (segment) {
            //If cubic
            var p3 = new Vector([segment.startpos.x, segment.startpos.y]);
            var p4 = new Vector([segment.startpos.x, segment.startpos.y]);
            var res = MEPH.tween.Calculator.BezierCubic(p1, p3, p4, p2, t0)
            return res.y;
        }
        else {
            var res = MEPH.tween.Calculator.Linear(p1, p2, t0);

            return res.y;
        }
    }
});﻿/**
 * @class MEPH.math.Util
 * Describes mathematical expressions.
 *
 **/
MEPH.define('MEPH.math.Util', {
    statics: {
        cachedPrimes: null,
        polar: function (x, y) {
            return {
                radius: Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2)),
                theta: Math.atan2(y, x)
            }
        },
        rectangular: function (theta, radius) {
            return {
                x: radius * Math.cos(theta),
                y: radius * Math.sin(theta)
            }
        },
        /**
         * Generate the main lobe of a sinc function (Dirichlet kernel)
         * @param {Array} x 
         * Array of indices to compute.
         * @param {Number} N
         * Size of FFT to simulate.
         * @return {Array} 
         * Samples of the main lobe of a sinc function
         ***/
        sinc: function (x, N) {
            return [].interpolate(0, N, function (t) {
                var res = Math.sin(N * x[t] / 2) / Math.sin(x[t] / 2);
                if (isNaN(res)) {
                    return N;
                }
                return res;
            });
        },
        sec: function (num) {
            return 1 / Math.cos(num);
        },
        csc: function (num) {
            return 1 / Math.sin(num);
        },
        cot: function (num) {
            return 1 / Math.tan(num);
        },
        sinh: function (num) {
            return (Math.exp(num) - Math.exp(-num)) / 2;
        },
        cosh: function (num) {
            return (Math.exp(num) + Math.exp(-num)) / 2;
        },
        tanh: function (x) {
            return (Math.exp(2 * x) - 1) / (Math.exp(2 * x) + 1);
        },
        sech: function (num) {
            return 1 / MEPH.math.Util.cosh(num);
        },
        coth: function (num) {
            return 1 / MEPH.math.Util.tanh(num);
        },
        csch: function (num) {
            return 1 / MEPH.math.Util.sinh(num);
        },
        /**
         * n mathematics, the factorial of a non-negative integer n, denoted by n!, is the product of all positive integers less than or equal to n.
         * http://en.wikipedia.org/wiki/Factorial
         * Calculates the factorial of num.
         **/
        factorial: function (num) {
            var result = 1;
            [].interpolate(1, num + 1, function (x) {
                result = result * x;
            });
            return result;
        },
        /**
         * Returns the primes up to the passed value.
         * @param {Number} val
         **/
        primes: function (val) {
            MEPH.math.Util.cachedPrimes = MEPH.math.Util.cachedPrimes || [2, 3];
            var cachedPrimes = MEPH.math.Util.cachedPrimes;
            var last = MEPH.math.Util.cachedPrimes.last();
            if (last >= val) {
                return MEPH.math.Util.cachedPrimes.where(function (x) { return val >= x; });
            }
            for (var i = last + 2; i <= (val) ; i = i + 2) {
                if (cachedPrimes.all(function (x) { return i % x !== 0; })) {
                    cachedPrimes.push(i);
                }
            }
            return cachedPrimes;
        },
        /**
         * Factors an integer into its basic parts.
         * @param {Number} val
         * @returns {Array}
         **/
        factor: function (val) {
            var Util = MEPH.math.Util,
                result = [1];
            var primes = Util.primes(val);
            var v = val;
            while (!primes.contains(function (x) { return x === v; }) && v % 1 == 0) {
                var prime = primes.first(function (x) { return v % x === 0; });
                result.push(prime);
                v /= prime;
            }
            result.push(v);
            return result;
        },
        /**
         * Generates the main lobe of a Blackman-Harris window
         * @param {Array} x
         * Bin positions to compute.
         * @param {Number} fftsize
         * @return {Array}
         * Main lob as spectrum of a Blackman-Harris window
         ***/
        getBhLobe: function (x, fftsize) {
            var N = fftsize || 512;
            var f = x.select(function (t) {
                return t * Math.PI * 2 / N;
            });
            var df = Math.PI * 2 / N;
            var y = [].interpolate(0, x.length, function () {
                return 0;
            });

            var consts = [0.35875, 0.48829, 0.14128, 0.01168];
            [].interpolate(0, consts.length, function (m) {
                var sincs1 = MEPH.math.Util.sinc(f.select(function (ft) { return ft - df * m }), N);
                var sincs2 = MEPH.math.Util.sinc(f.select(function (ft) { return ft + df * m; }), N);
                y = y.select(function (y, y0) {
                    return y + (consts[m] / 2) * (sincs1[y0] + sincs2[y0]);
                });
            });
            y = y.select(function (t) { return t / N / consts[0]; });
            return y;
        },
        window: {
            /**
             * http://en.wikipedia.org/wiki/Window_function#Spectral_analysis
             * Triangular windows are given by: w(n)=1 - \left|\frac{n-\frac{N-1}{2}}{\frac{L}{2}}\right|,
             * where L can be N,[8][16] N+1,[17] or N-1.[18] The last one is also known as Bartlett window. All three definitions converge at large N.
             * The triangular window is the 2nd order B-spline window and can be seen as the convolution of two half-sized rectangular windows, giving it twice the width of the regular windows.
             ****/
            Triangle: function (plus, index, end) {
                var L = end + plus;
                var v = 1 - Math.abs(((index - ((end - 1) / 2)) / (L / 2)));
                return v;
            },
            Triang: function (n, N) {
                var sym = true;
                if (N < 1)
                    return [];
                if (N === 1) {
                    return [1];
                }
                var odd = N % 2;
                if (!sym && !odd) {
                    N += 1;
                }
                var ns = [].interpolate(1, Math.floor((N + 1) / 2) + 1, function (t) {
                    return t;
                });
                var w;
                if (N % 2 === 0) {
                    w = ns.select(function (n) {
                        return ((n * 2) - 1) / N;
                    });
                    w = w.select().concat(w.select().reverse());
                }
                else {
                    w = ns.select(function (t) {
                        return (2 * t) / (N + 1);
                    });

                    w = w.select().concat(w.select().reverse());
                }
                return w;
            },
            Rect: function (n, N) {
                var t = Math.abs(n / N);
                if (t > 0.5) {
                    return 0;
                }
                else if (t === .5) {
                    return .5
                }
                else if (t < .5) {
                    return 1;
                }
            },
            Rectangle: function (index, end) {
                return 1;
            },
            Welch: function (n, N) {
                return 1 - Math.pow(((n - ((N - 1) / 2)) / ((N + 1) / 2)), 2);
            },
            Hann: function (a, b, n, N) {
                return a - (b * Math.cos((2 * Math.PI * n) / (N - 1)));
            },
            Hamming: function (n, N) {
                return MEPH.math.Util.window.Hann(.54, .46, n, N);
            },
            Blackman: function (n, N) {
                var a0 = 0.42;
                var a1 = .5;
                var a2 = 0.08;
                return a0 -
                        (a1 * Math.cos((2 * Math.PI * n) / (N - 1))) +
                        (a2 * Math.cos((4 * Math.PI * n) / (N - 1)));
            },
            BlackmanHarris: function (n, N) {
                var a0 = 0.35875;
                var a1 = 0.48829;
                var a2 = 0.14128;
                var a3 = 0.01168;
                return a0 -
                        (a1 * Math.cos((2 * Math.PI * n) / (N - 1))) +
                        (a2 * Math.cos((4 * Math.PI * n) / (N - 1))) +
                        (a3 * Math.cos((6 * Math.PI * n) / (N - 1)));
            }
        }
    }
}).then(function (x) {
    if (!Math.sec) {
        Math.sec = MEPH.math.Util.sec;
    }
    if (!Math.csc) {
        Math.csc = MEPH.math.Util.csc;
    }
    if (!Math.cot) {
        Math.cot = MEPH.math.Util.cot;
    }
    if (!Math.sinh) {
        Math.sinh = MEPH.math.Util.sinh;
    }
    if (!Math.cosh) {
        Math.cosh = MEPH.math.Util.cosh;
    }
    if (!Math.sech) {
        Math.sech = MEPH.math.Util.sech;
    }
    if (!Math.csch) {
        Math.csch = MEPH.math.Util.csch;
    }
    if (!Math.coth) {
        Math.coth = MEPH.math.Util.coth;
    }
    if (!Math.tanh) {
        Math.tanh = MEPH.math.Util.tanh;
    }
});;﻿/* Copyright (c) 2012, Jens Nockert <jens@ofmlabs.org>, Jussi Kalliokoski <jussi@ofmlabs.org>
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 * 
 * 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. 
 * 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. 
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * @class MEPH.math.Expression
 * Describes mathematical expressions.
 *
 **/
MEPH.define('MEPH.math.FFT', {
    alternateNames: 'FFT',
    requires: [],
    statics: {
    },

    butterfly2: function (output, outputOffset, outputStride, fStride, state, m) {
        var t = state.twiddle

        for (var i = 0; i < m; i++) {
            var s0_r = output[2 * ((outputOffset) + (outputStride) * (i))], s0_i = output[2 * ((outputOffset) + (outputStride) * (i)) + 1]
            var s1_r = output[2 * ((outputOffset) + (outputStride) * (i + m))], s1_i = output[2 * ((outputOffset) + (outputStride) * (i + m)) + 1]

            var t1_r = t[2 * ((0) + (fStride) * (i))], t1_i = t[2 * ((0) + (fStride) * (i)) + 1]

            var v1_r = s1_r * t1_r - s1_i * t1_i, v1_i = s1_r * t1_i + s1_i * t1_r

            var r0_r = s0_r + v1_r, r0_i = s0_i + v1_i
            var r1_r = s0_r - v1_r, r1_i = s0_i - v1_i

            output[2 * ((outputOffset) + (outputStride) * (i))] = r0_r, output[2 * ((outputOffset) + (outputStride) * (i)) + 1] = r0_i
            output[2 * ((outputOffset) + (outputStride) * (i + m))] = r1_r, output[2 * ((outputOffset) + (outputStride) * (i + m)) + 1] = r1_i
        }
    },

    butterfly3: function (output, outputOffset, outputStride, fStride, state, m) {
        var t = state.twiddle
        var m1 = m, m2 = 2 * m
        var fStride1 = fStride, fStride2 = 2 * fStride

        var e = t[2 * ((0) + (fStride) * (m)) + 1]

        for (var i = 0; i < m; i++) {
            var s0_r = output[2 * ((outputOffset) + (outputStride) * (i))], s0_i = output[2 * ((outputOffset) + (outputStride) * (i)) + 1]

            var s1_r = output[2 * ((outputOffset) + (outputStride) * (i + m1))], s1_i = output[2 * ((outputOffset) + (outputStride) * (i + m1)) + 1]
            var t1_r = t[2 * ((0) + (fStride1) * (i))], t1_i = t[2 * ((0) + (fStride1) * (i)) + 1]
            var v1_r = s1_r * t1_r - s1_i * t1_i, v1_i = s1_r * t1_i + s1_i * t1_r

            var s2_r = output[2 * ((outputOffset) + (outputStride) * (i + m2))], s2_i = output[2 * ((outputOffset) + (outputStride) * (i + m2)) + 1]
            var t2_r = t[2 * ((0) + (fStride2) * (i))], t2_i = t[2 * ((0) + (fStride2) * (i)) + 1]
            var v2_r = s2_r * t2_r - s2_i * t2_i, v2_i = s2_r * t2_i + s2_i * t2_r

            var i0_r = v1_r + v2_r, i0_i = v1_i + v2_i

            var r0_r = s0_r + i0_r, r0_i = s0_i + i0_i
            output[2 * ((outputOffset) + (outputStride) * (i))] = r0_r, output[2 * ((outputOffset) + (outputStride) * (i)) + 1] = r0_i

            var i1_r = s0_r - i0_r * 0.5
            var i1_i = s0_i - i0_i * 0.5

            var i2_r = (v1_r - v2_r) * e
            var i2_i = (v1_i - v2_i) * e

            var r1_r = i1_r - i2_i
            var r1_i = i1_i + i2_r
            output[2 * ((outputOffset) + (outputStride) * (i + m1))] = r1_r, output[2 * ((outputOffset) + (outputStride) * (i + m1)) + 1] = r1_i

            var r2_r = i1_r + i2_i
            var r2_i = i1_i - i2_r
            output[2 * ((outputOffset) + (outputStride) * (i + m2))] = r2_r, output[2 * ((outputOffset) + (outputStride) * (i + m2)) + 1] = r2_i
        }
    },

    butterfly4: function (output, outputOffset, outputStride, fStride, state, m) {
        var t = state.twiddle
        var m1 = m, m2 = 2 * m, m3 = 3 * m
        var fStride1 = fStride, fStride2 = 2 * fStride, fStride3 = 3 * fStride

        for (var i = 0; i < m; i++) {
            var s0_r = output[2 * ((outputOffset) + (outputStride) * (i))], s0_i = output[2 * ((outputOffset) + (outputStride) * (i)) + 1]

            var s1_r = output[2 * ((outputOffset) + (outputStride) * (i + m1))], s1_i = output[2 * ((outputOffset) + (outputStride) * (i + m1)) + 1]
            var t1_r = t[2 * ((0) + (fStride1) * (i))], t1_i = t[2 * ((0) + (fStride1) * (i)) + 1]
            var v1_r = s1_r * t1_r - s1_i * t1_i, v1_i = s1_r * t1_i + s1_i * t1_r

            var s2_r = output[2 * ((outputOffset) + (outputStride) * (i + m2))], s2_i = output[2 * ((outputOffset) + (outputStride) * (i + m2)) + 1]
            var t2_r = t[2 * ((0) + (fStride2) * (i))], t2_i = t[2 * ((0) + (fStride2) * (i)) + 1]
            var v2_r = s2_r * t2_r - s2_i * t2_i, v2_i = s2_r * t2_i + s2_i * t2_r

            var s3_r = output[2 * ((outputOffset) + (outputStride) * (i + m3))], s3_i = output[2 * ((outputOffset) + (outputStride) * (i + m3)) + 1]
            var t3_r = t[2 * ((0) + (fStride3) * (i))], t3_i = t[2 * ((0) + (fStride3) * (i)) + 1]
            var v3_r = s3_r * t3_r - s3_i * t3_i, v3_i = s3_r * t3_i + s3_i * t3_r

            var i0_r = s0_r + v2_r, i0_i = s0_i + v2_i
            var i1_r = s0_r - v2_r, i1_i = s0_i - v2_i
            var i2_r = v1_r + v3_r, i2_i = v1_i + v3_i
            var i3_r = v1_r - v3_r, i3_i = v1_i - v3_i

            var r0_r = i0_r + i2_r, r0_i = i0_i + i2_i

            if (state.inverse) {
                var r1_r = i1_r - i3_i
                var r1_i = i1_i + i3_r
            } else {
                var r1_r = i1_r + i3_i
                var r1_i = i1_i - i3_r
            }

            var r2_r = i0_r - i2_r, r2_i = i0_i - i2_i

            if (state.inverse) {
                var r3_r = i1_r + i3_i
                var r3_i = i1_i - i3_r
            } else {
                var r3_r = i1_r - i3_i
                var r3_i = i1_i + i3_r
            }

            output[2 * ((outputOffset) + (outputStride) * (i))] = r0_r, output[2 * ((outputOffset) + (outputStride) * (i)) + 1] = r0_i
            output[2 * ((outputOffset) + (outputStride) * (i + m1))] = r1_r, output[2 * ((outputOffset) + (outputStride) * (i + m1)) + 1] = r1_i
            output[2 * ((outputOffset) + (outputStride) * (i + m2))] = r2_r, output[2 * ((outputOffset) + (outputStride) * (i + m2)) + 1] = r2_i
            output[2 * ((outputOffset) + (outputStride) * (i + m3))] = r3_r, output[2 * ((outputOffset) + (outputStride) * (i + m3)) + 1] = r3_i
        }
    },

    butterfly: function (output, outputOffset, outputStride, fStride, state, m, p) {
        var t = state.twiddle, n = state.n, scratch = new Float64Array(2 * p)

        for (var u = 0; u < m; u++) {
            for (var q1 = 0, k = u; q1 < p; q1++, k += m) {
                var x0_r = output[2 * ((outputOffset) + (outputStride) * (k))], x0_i = output[2 * ((outputOffset) + (outputStride) * (k)) + 1]
                scratch[2 * (q1)] = x0_r, scratch[2 * (q1) + 1] = x0_i
            }

            for (var q1 = 0, k = u; q1 < p; q1++, k += m) {
                var tOffset = 0

                var x0_r = scratch[2 * (0)], x0_i = scratch[2 * (0) + 1]
                output[2 * ((outputOffset) + (outputStride) * (k))] = x0_r, output[2 * ((outputOffset) + (outputStride) * (k)) + 1] = x0_i

                for (var q = 1; q < p; q++) {
                    tOffset = (tOffset + fStride * k) % n

                    var s0_r = output[2 * ((outputOffset) + (outputStride) * (k))], s0_i = output[2 * ((outputOffset) + (outputStride) * (k)) + 1]

                    var s1_r = scratch[2 * (q)], s1_i = scratch[2 * (q) + 1]
                    var t1_r = t[2 * (tOffset)], t1_i = t[2 * (tOffset) + 1]
                    var v1_r = s1_r * t1_r - s1_i * t1_i, v1_i = s1_r * t1_i + s1_i * t1_r

                    var r0_r = s0_r + v1_r, r0_i = s0_i + v1_i
                    output[2 * ((outputOffset) + (outputStride) * (k))] = r0_r, output[2 * ((outputOffset) + (outputStride) * (k)) + 1] = r0_i
                }
            }
        }
    },

    work: function (output, outputOffset, outputStride, f, fOffset, fStride, inputStride, factors, state) {
        var p = factors.shift()
        var m = factors.shift()
        var me = this;
        if (m == 1) {
            for (var i = 0; i < p * m; i++) {
                var x0_r = f[2 * ((fOffset) + (fStride * inputStride) * (i))], x0_i = f[2 * ((fOffset) + (fStride * inputStride) * (i)) + 1]
                output[2 * ((outputOffset) + (outputStride) * (i))] = x0_r, output[2 * ((outputOffset) + (outputStride) * (i)) + 1] = x0_i
            }
        } else {
            for (var i = 0; i < p; i++) {
                me.work(output, outputOffset + outputStride * i * m, outputStride, f, fOffset + i * fStride * inputStride, fStride * p, inputStride, factors.slice(), state)
            }
        }

        switch (p) {
            case 2: me.butterfly2(output, outputOffset, outputStride, fStride, state, m); break
            case 3: me.butterfly3(output, outputOffset, outputStride, fStride, state, m); break
            case 4: me.butterfly4(output, outputOffset, outputStride, fStride, state, m); break
            default: me.butterfly(output, outputOffset, outputStride, fStride, state, m, p); break
        }
    },

    complex: function (n, inverse) {
        if (arguments.length < 2) {
            throw new RangeError("You didn't pass enough arguments, passed `" + arguments.length + "'")
        }

        var n = ~~n, inverse = !!inverse

        if (n < 1) {
            throw new RangeError("n is outside range, should be positive integer, was `" + n + "'")
        }

        var state = {
            n: n,
            inverse: inverse,

            factors: [],
            twiddle: new Float64Array(2 * n),
            scratch: new Float64Array(2 * n)
        }

        var t = state.twiddle, theta = 2 * Math.PI / n

        for (var i = 0; i < n; i++) {
            if (inverse) {
                var phase = theta * i
            } else {
                var phase = -theta * i
            }

            t[2 * (i)] = Math.cos(phase)
            t[2 * (i) + 1] = Math.sin(phase)
        }

        var p = 4, v = Math.floor(Math.sqrt(n))

        while (n > 1) {
            while (n % p) {
                switch (p) {
                    case 4: p = 2; break
                    case 2: p = 3; break
                    default: p += 2; break
                }

                if (p > v) {
                    p = n
                }
            }

            n /= p

            state.factors.push(p)
            state.factors.push(n)
        }

        this.state = state
    },

    simple: function (output, input, t) {
        this.process(output, 0, 1, input, 0, 1, t)
    },

    process: function (output, outputOffset, outputStride, input, inputOffset, inputStride, t) {
        var outputStride = ~~outputStride, inputStride = ~~inputStride
        var me = this;
        var type = t == 'real' ? t : 'complex'

        if (outputStride < 1) {
            throw new RangeError("outputStride is outside range, should be positive integer, was `" + outputStride + "'")
        }

        if (inputStride < 1) {
            throw new RangeError("inputStride is outside range, should be positive integer, was `" + inputStride + "'")
        }

        if (type == 'real') {
            for (var i = 0; i < this.state.n; i++) {
                var x0_r = input[inputOffset + inputStride * i]
                var x0_i = 0.0

                this.state.scratch[2 * (i)] = x0_r, this.state.scratch[2 * (i) + 1] = x0_i
            }

            me.work(output, outputOffset, outputStride, this.state.scratch, 0, 1, 1, this.state.factors.slice(), this.state)
        } else {
            if (input == output) {
                me.work(this.state.scratch, 0, 1, input, inputOffset, 1, inputStride, this.state.factors.slice(), this.state)

                for (var i = 0; i < this.state.n; i++) {
                    var x0_r = this.state.scratch[2 * (i)], x0_i = this.state.scratch[2 * (i) + 1]

                    output[2 * ((outputOffset) + (outputStride) * (i))] = x0_r, output[2 * ((outputOffset) + (outputStride) * (i)) + 1] = x0_i
                }
            } else {
                me.work(output, outputOffset, outputStride, input, inputOffset, 1, inputStride, this.state.factors.slice(), this.state)
            }
        }
    }
});﻿/**
 * @class MEPH.table.SpreadSheet
 * @extends MEPH.control.Control
 * A infinitely scrolling Scrollbar.
 **/
MEPH.define('MEPH.scrollbar.Scrollbar', {
    alias: 'scrollbar',
    templates: true,
    requires: ['MEPH.util.Style', 'MEPH.util.Dom'],
    extend: 'MEPH.control.Control',
    properties: {
        dragging: 'dragging',
        horizontal: true,
        barheight: 20,
        handleheight: 16,
        handleoffset: 1,
        virtualsize: 0,
        scrollbarposition: 0,
        minhandlesize: 30
    },
    initialize: function () {
        var me = this;
        me.callParent.apply(me, arguments);
        me.cache = {};

        me.on('altered', function (type, args) {
            if (args.property === 'virtualsize' || args.path === 'virtualsize' || args.path === 'minhandlesize' || args.path === 'horizontal') {
                me.horizontal = me.horizontal === 'false' || !me.horizontal ? false : true;
                me.sizehandle();
                me.stylebar();
            }
        });
        window.addEventListener('resize', me.sizehandle.bind(me));
    },
    onLoaded: function () {
        var me = this;
        me.callParent.apply(me, arguments);
        me.appendEvents();
        me.stylebar();
    },
    sizehandle: function () {
        var me = this;
        if (me.horizontal) {
            Style.width(me.handle, Math.max(me.minhandlesize, me.bar.clientWidth * (me.bar.clientWidth / me.virtualsize)));
        }
        else {
            Style.height(me.handle, Math.max(me.minhandlesize, me.bar.clientHeight / me.virtualsize));
        }
    },
    stylebar: function () {
        var me = this;
        if (me.horizontal) {
            Style.clear(me.bar, 'width')
            Style.height(me.bar, me.barheight);
            Style.top(me.handle, me.handleoffset);
            Style.height(me.handle, me.handleheight);
        }
        else {
            Style.clear(me.bar, 'height')
            Style.width(me.bar, me.barheight);
            Style.left(me.handle, me.handleoffset);
            Style.width(me.handle, me.handleheight);
        }
    },
    appendEvents: function () {
        var me = this;
        me.handle.addEventListener('mousedown', function (e) {
            var position = MEPH.util.Dom.getScreenEventPositions(e).first();
            var handleoffset = MEPH.util.Dom.getEventPositions(e).first();
            me.state = me.dragging
            me.start_position = me.horizontal ? position.x : position.y;

            me.handlePos = me.getBarPosition();
            me.handleoffset = handleoffset;
        });

        me.bar.addEventListener('click', function (e) {

            if (e.srcElement !== me.bar) return;
            var position = MEPH.util.Dom.getEventPositions(e).first();
            me.position = me.horizontal ? position.x : position.y;
            var barposition = me.getBarPosition();
            var barsize = me.barSize();
            me.setBarPosition(me.position);
            me.scrollbarposition = me.getBarPosition() / (me.barSize() - me.handleSize());
        });

        document.body.addEventListener('mousemove', function (e) {
            if (me.state === me.dragging) {
                var position = MEPH.util.Dom.getScreenEventPositions(e).first();
                me.position = me.horizontal ? position.x : position.y;
                me.setBarPosition(me.position - me.start_position);
                me._scrollbarposition = me.getBarPosition() / (me.barSize() - me.handleSize());
            }
        });
        var enddrag = function (e) {
            me.state = null;
            me.start_position = null;
            me.scrollbarposition = me._scrollbarposition
        };
        document.body.addEventListener('mouseup', enddrag);
    },
    handleSize: function () {
        var me = this;
        return parseFloat(me.horizontal ? me.handle.clientWidth : me.handle.clientHeight) || 0;
    },
    barSize: function () {
        var me = this;
        return parseFloat(me.horizontal ? me.bar.clientWidth : me.bar.clientHeight) || 0;
    },
    getBarPosition: function () {
        var me = this;
        if (me.horizontal) {
            return parseFloat(me.handle.offsetLeft) || 0;
        }
        return parseFloat(me.handle.offsetTop) || 0;
    },
    setBarPosition: function (pos) {
        var me = this;
        if (me.horizontal) {
            var width = me.bar.clientWidth - me.handle.clientWidth;
            Style.left(me.handle, Math.max(0, Math.min(width, me.handlePos + pos)));
        }
        else {
            var width = me.bar.clientHeight - me.handle.clientHeight;
            Style.top(me.handle, Math.max(0, Math.min(width, me.handlePos + pos)));
        }
    }
});﻿/**
 * @class MEPH.signalprocessing.SignalProcessor
 * @extends MEPH.control.Control
 * Signal processing library.
 **/
MEPH.define('MEPH.signalprocessing.SignalProcessor', {
    requires: ['MEPH.math.FFT',
        'MEPH.math.Util',
        'MEPH.util.Vector',
        'MEPH.math.Vector',
        'MEPH.tween.Calculator'],
    statics: {
        MAX_FRAME_LENGTH: 16000,//        private static int 
        maximumWindow: 1024,

    },
    properties: {
        windowingFunc: null,
        sampleRate: 44100,
        joiningFunc: null,
        framesize: 2048,
        lastphase: null,
        gInFIFO: null,//private static float[]  new float[MAX_FRAME_LENGTH];
        gOutFIFO: null,//new float[MAX_FRAME_LENGTH];
        gFFTworksp: null,//new float[2 * MAX_FRAME_LENGTH];
        gLastPhase: null,//new float[MAX_FRAME_LENGTH / 2 + 1];
        gSumPhase: null,//new float[MAX_FRAME_LENGTH / 2 + 1];
        gOutputAccum: null,//new float[2 * MAX_FRAME_LENGTH];
        gAnaFreq: null,//new float[MAX_FRAME_LENGTH];
        gAnaMagn: null,//new float[MAX_FRAME_LENGTH];
        gSynFreq: null,//new float[MAX_FRAME_LENGTH];
        gSynMagn: null,//new float[MAX_FRAME_LENGTH];
        gRover: null,//
        gInit: null

    },
    initialize: function (skip) {
        var me = this;
        if (!skip) {
            me.clear();
        }
    },
    clear: function () {
        var me = this;
        me.gInFIFO = new Float32Array(MEPH.signalprocessing.SignalProcessor.MAX_FRAME_LENGTH);
        me.gOutFIFO = new Float32Array(MEPH.signalprocessing.SignalProcessor.MAX_FRAME_LENGTH);
        me.gFFTworksp = new Float32Array(2 * MEPH.signalprocessing.SignalProcessor.MAX_FRAME_LENGTH);
        me.gLastPhase = new Float32Array(MEPH.signalprocessing.SignalProcessor.MAX_FRAME_LENGTH);
        me.gSumPhase = new Float32Array(MEPH.signalprocessing.SignalProcessor.MAX_FRAME_LENGTH);
        me.gOutputAccum = new Float32Array(MEPH.signalprocessing.SignalProcessor.MAX_FRAME_LENGTH);
        me.gAnaFreq = new Float32Array(MEPH.signalprocessing.SignalProcessor.MAX_FRAME_LENGTH);
        me.gAnaMagn = new Float32Array(MEPH.signalprocessing.SignalProcessor.MAX_FRAME_LENGTH);
        me.gSynFreq = new Float32Array(MEPH.signalprocessing.SignalProcessor.MAX_FRAME_LENGTH);
        me.gSynMagn = new Float32Array(MEPH.signalprocessing.SignalProcessor.MAX_FRAME_LENGTH);

    },
    pitchShift: function (pitchShift, numSampsToProcess, fftFrameSize, osamp, sampleRate, indata, outdata) {
        var magn, phase, tmp, window, real, imag;
        var freqPerBin, expct;
        var i, k, qpd, index, inFifoLatency, stepSize, fftFrameSize2;
        var me = this;

        outdata = outdata || indata;
        var hasoutput = false;

        /* set up some handy variables */
        fftFrameSize2 = fftFrameSize / 2;
        stepSize = fftFrameSize / osamp;
        freqPerBin = sampleRate / fftFrameSize;
        expct = 2.0 * Math.PI * stepSize / fftFrameSize;
        inFifoLatency = fftFrameSize - stepSize;
        if (!me.gRover) me.gRover = inFifoLatency;


        /* main processing loop */
        for (i = 0; i < numSampsToProcess; i++) {

            /* As long as we have not yet collected enough data just read in */
            me.gInFIFO[me.gRover] = indata[i];
            outdata[i] = me.gOutFIFO[me.gRover - inFifoLatency];

            me.gRover++;

            /* now we have enough data for processing */
            if (me.gRover >= fftFrameSize) {
                me.gRover = inFifoLatency;

                /* do windowing and re,im interleave */
                for (k = 0; k < fftFrameSize; k++) {
                    window = -.5 * Math.cos(2.0 * Math.PI * k / fftFrameSize) + .5;
                    me.gFFTworksp[2 * k] = (me.gInFIFO[k] * window);
                    me.gFFTworksp[2 * k + 1] = 0.0;
                }


                /* ***************** ANALYSIS ******************* */
                /* do transform */
                me.ShortTimeFourierTransform(me.gFFTworksp, fftFrameSize, -1);

                /* this is the analysis step */
                for (k = 0; k <= fftFrameSize2; k++) {

                    /* de-interlace FFT buffer */
                    real = me.gFFTworksp[2 * k];
                    imag = me.gFFTworksp[2 * k + 1];

                    /* compute magnitude and phase */
                    magn = 2.0 * Math.sqrt(real * real + imag * imag);
                    phase = Math.atan2(imag, real);

                    /* compute phase difference */
                    tmp = phase - me.gLastPhase[k];
                    me.gLastPhase[k] = phase;

                    /* subtract expected phase difference */
                    tmp -= k * expct;

                    /* map delta phase into +/- Pi interval */
                    qpd = Math.floor(tmp / Math.PI);
                    if (qpd >= 0) qpd += qpd & 1;
                    else qpd -= qpd & 1;
                    tmp -= Math.PI * qpd;

                    /* get deviation from bin frequency from the +/- Pi interval */
                    tmp = osamp * tmp / (2.0 * Math.PI);

                    /* compute the k-th partials' true frequency */
                    tmp = k * freqPerBin + tmp * freqPerBin;

                    /* store magnitude and true frequency in analysis arrays */
                    me.gAnaMagn[k] = magn;
                    me.gAnaFreq[k] = tmp;

                }

                /* ***************** PROCESSING ******************* */
                /* this does the actual pitch shifting */
                for (var zero = 0; zero < fftFrameSize; zero++) {
                    me.gSynMagn[zero] = 0;
                    me.gSynFreq[zero] = 0;
                }

                for (k = 0; k <= fftFrameSize2; k++) {
                    index = Math.floor(k * pitchShift);
                    if (index <= fftFrameSize2) {
                        me.gSynMagn[index] += me.gAnaMagn[k];
                        me.gSynFreq[index] = me.gAnaFreq[k] * pitchShift;
                    }
                }

                /* ***************** SYNTHESIS ******************* */
                /* this is the synthesis step */
                for (k = 0; k <= fftFrameSize2; k++) {

                    /* get magnitude and true frequency from synthesis arrays */
                    magn = me.gSynMagn[k];
                    tmp = me.gSynFreq[k];

                    /* subtract bin mid frequency */
                    tmp -= k * freqPerBin;

                    /* get bin deviation from freq deviation */
                    tmp /= freqPerBin;

                    /* take osamp into account */
                    tmp = 2.0 * Math.PI * tmp / osamp;

                    /* add the overlap phase advance back in */
                    tmp += k * expct;

                    /* accumulate delta phase to get bin phase */
                    me.gSumPhase[k] += tmp;
                    phase = me.gSumPhase[k];

                    /* get real and imag part and re-interleave */
                    me.gFFTworksp[2 * k] = (magn * Math.cos(phase));
                    me.gFFTworksp[2 * k + 1] = (magn * Math.sin(phase));
                }

                /* zero negative frequencies */
                for (k = fftFrameSize + 2; k < 2 * fftFrameSize; k++) {
                    me.gFFTworksp[k] = 0.0;//
                }

                /* do inverse transform */
                me.ShortTimeFourierTransform(me.gFFTworksp, fftFrameSize, 1);

                /* do windowing and add to output accumulator */
                for (k = 0; k < fftFrameSize; k++) {
                    window = -.5 * Math.cos(2.0 * Math.PI * k / fftFrameSize) + .5;
                    me.gOutputAccum[k] += (2.0 * window * me.gFFTworksp[2 * k] / (fftFrameSize2 * osamp));
                    if (isNaN(me.gOutputAccum[k])) {

                    }
                }
                for (k = 0; k < stepSize; k++) me.gOutFIFO[k] = me.gOutputAccum[k];
                hasoutput = true;
                /* shift accumulator */
                //memmove(gOutputAccum, gOutputAccum + stepSize, fftFrameSize * sizeof(float));
                for (k = 0; k < fftFrameSize; k++) {
                    me.gOutputAccum[k] = me.gOutputAccum[k + stepSize];
                }

                /* move input FIFO */
                for (k = 0; k < inFifoLatency; k++) me.gInFIFO[k] = me.gInFIFO[k + stepSize];
            }
        }
        return hasoutput;
    },
    signalPitchShift: function (frames, pitchShift, fftFrameSize, osamp, sampleRate) {
        var k, index, fftFrameSize2;

        /* set up some handy variables */
        fftFrameSize2 = fftFrameSize / 2;

        var gSynMagn, gAnaMagn;
        var gSynFreq, gAnaFreq;

        /* ***************** PROCESSING ******************* */
        /* this does the actual pitch shifting */
        var res = frames.select(function (frame) {
            gAnaMagn = frame.mag;
            gAnaFreq = frame.freq;
            gSynMagn = new Float32Array(fftFrameSize);
            gSynFreq = new Float32Array(fftFrameSize);

            for (k = 0; k <= fftFrameSize2; k++) {
                index = Math.floor(k * pitchShift);
                if (index <= fftFrameSize2) {
                    gSynMagn[index] += gAnaMagn[k];
                    gSynFreq[index] = gAnaFreq[k] * pitchShift;
                }
            }
            return {
                mag: gSynMagn,
                freq: gSynFreq
            }
        });
        return res;
    },
    timeStretch: function (pitchShift, timeStretch, numSampsToProcess, fftFrameSize, osamp, sampleRate, indata, outdata) {
        var magn, phase, tmp, window, real, imag;
        var freqPerBin, expct;
        var i, k, qpd, index, inFifoLatency, stepSize, fftFrameSize2;
        var me = this;
        timeStretch = timeStretch || 1;

        outdata = outdata || indata;
        var hasoutput = false;

        /* set up some handy variables */
        fftFrameSize2 = fftFrameSize / 2;
        stepSize = fftFrameSize / osamp;
        freqPerBin = sampleRate / fftFrameSize;
        expct = 2.0 * Math.PI * stepSize / fftFrameSize;
        inFifoLatency = fftFrameSize - stepSize;
        if (!me.gRover) me.gRover = inFifoLatency;


        /* main processing loop */
        for (i = 0; i < numSampsToProcess; i++) {

            /* As long as we have not yet collected enough data just read in */
            me.gInFIFO[me.gRover] = indata[i];
            outdata[i] = me.gOutFIFO[me.gRover - inFifoLatency];

            me.gRover++;

            /* now we have enough data for processing */
            if (me.gRover >= fftFrameSize) {
                me.gRover = inFifoLatency;

                /* do windowing and re,im interleave */
                for (k = 0; k < fftFrameSize; k++) {
                    window = -.5 * Math.cos(2.0 * Math.PI * k / fftFrameSize) + .5;
                    me.gFFTworksp[2 * k] = (me.gInFIFO[k] * window);
                    me.gFFTworksp[2 * k + 1] = 0.0;
                }


                /* ***************** ANALYSIS ******************* */
                /* do transform */
                me.ShortTimeFourierTransform(me.gFFTworksp, fftFrameSize, -1);

                /* this is the analysis step */
                for (k = 0; k <= fftFrameSize2; k++) {

                    /* de-interlace FFT buffer */
                    real = me.gFFTworksp[2 * k];
                    imag = me.gFFTworksp[2 * k + 1];

                    /* compute magnitude and phase */
                    magn = 2.0 * Math.sqrt(real * real + imag * imag);
                    phase = Math.atan2(imag, real);

                    /* compute phase difference */
                    tmp = phase - me.gLastPhase[k];
                    me.gLastPhase[k] = phase;

                    /* subtract expected phase difference */
                    tmp -= k * expct;

                    /* map delta phase into +/- Pi interval */
                    qpd = Math.floor(tmp / Math.PI);
                    if (qpd >= 0) qpd += qpd & 1;
                    else qpd -= qpd & 1;
                    tmp -= Math.PI * qpd;

                    /* get deviation from bin frequency from the +/- Pi interval */
                    tmp = osamp * tmp / (2.0 * Math.PI);

                    /* compute the k-th partials' true frequency */
                    tmp = k * freqPerBin + tmp * freqPerBin;

                    /* store magnitude and true frequency in analysis arrays */
                    me.gAnaMagn[k] = magn;
                    me.gAnaFreq[k] = tmp;

                }

                /* ***************** PROCESSING ******************* */
                /* this does the actual pitch shifting */
                for (var zero = 0; zero < fftFrameSize; zero++) {
                    me.gSynMagn[zero] = 0;
                    me.gSynFreq[zero] = 0;
                }

                for (k = 0; k <= fftFrameSize2; k++) {
                    index = Math.floor(k * pitchShift);
                    if (index <= fftFrameSize2) {
                        me.gSynMagn[index] += me.gAnaMagn[k];
                        me.gSynFreq[index] = me.gAnaFreq[k] * pitchShift;
                    }
                }

                /* ***************** SYNTHESIS ******************* */
                /* this is the synthesis step */
                for (k = 0; k <= fftFrameSize2; k++) {

                    /* get magnitude and true frequency from synthesis arrays */
                    magn = me.gSynMagn[k];
                    tmp = me.gSynFreq[k];

                    /* subtract bin mid frequency */
                    tmp -= k * freqPerBin;

                    /* get bin deviation from freq deviation */
                    tmp /= freqPerBin;

                    /* take osamp into account */
                    tmp = 2.0 * Math.PI * tmp / osamp;

                    /* add the overlap phase advance back in */
                    tmp += k * expct;

                    /* accumulate delta phase to get bin phase */
                    me.gSumPhase[k] += tmp;
                    phase = me.gSumPhase[k];

                    /* get real and imag part and re-interleave */
                    me.gFFTworksp[2 * k] = (magn * Math.cos(phase));
                    me.gFFTworksp[2 * k + 1] = (magn * Math.sin(phase));
                }

                /* zero negative frequencies */
                for (k = fftFrameSize + 2; k < 2 * fftFrameSize; k++) {
                    me.gFFTworksp[k] = 0.0;//
                }

                /* do inverse transform */
                me.ShortTimeFourierTransform(me.gFFTworksp, fftFrameSize, 1);

                /* do windowing and add to output accumulator */
                for (k = 0; k < fftFrameSize; k++) {
                    window = -.5 * Math.cos(2.0 * Math.PI * k / fftFrameSize) + .5;
                    me.gOutputAccum[k] += (2.0 * window * me.gFFTworksp[2 * k] / (fftFrameSize2 * osamp));
                    if (isNaN(me.gOutputAccum[k])) {

                    }
                }
                for (k = 0; k < stepSize; k++) me.gOutFIFO[k] = me.gOutputAccum[k];
                hasoutput = true;
                /* shift accumulator */
                //memmove(gOutputAccum, gOutputAccum + stepSize, fftFrameSize * sizeof(float));
                for (k = 0; k < fftFrameSize; k++) {
                    me.gOutputAccum[k] = me.gOutputAccum[k + stepSize];
                }

                /* move input FIFO */
                for (k = 0; k < inFifoLatency; k++) me.gInFIFO[k] = me.gInFIFO[k + stepSize];
            }
        }
        return hasoutput;
    },
    signalAnalysis: function (fftFrameSize, osamp, sampleRate, indata) {
        var me = this;

        var fftFrameSize2 = fftFrameSize / 2;
        var stepSize = fftFrameSize / osamp;
        var freqPerBin = sampleRate / fftFrameSize;
        var k;
        var expct = 2.0 * Math.PI * stepSize / fftFrameSize;
        var inFifoLatency = fftFrameSize - stepSize;
        var res = [];
        var magn, phase, tmp, window, real, imag;
        var freqPerBin, expct;
        var i, k, qpd, index, inFifoLatency, stepSize, fftFrameSize2;
        var me = this;
        var gInFIFO;
        var gAnaFreq;
        var gAnaMagn;
        var gFFTworksp;
        var gLastPhase;
        gFFTworksp = new Float32Array(2 * fftFrameSize);
        var steps = Math.ceil(indata.length / stepSize);
        gLastPhase = new Float32Array(fftFrameSize);
        var res = [].interpolate(0, steps, function (step) {
            gInFIFO = indata.subset(step * stepSize, (step * stepSize) + fftFrameSize);
            gAnaFreq = new Float32Array(fftFrameSize);
            gAnaMagn = new Float32Array(fftFrameSize);

            /* do windowing and re,im interleave */
            for (k = 0; k < fftFrameSize; k++) {
                window = -.5 * Math.cos(2.0 * Math.PI * k / fftFrameSize) + .5;
                gFFTworksp[2 * k] = (gInFIFO[k] * window);
                gFFTworksp[2 * k + 1] = 0.0;
            }


            /* ***************** ANALYSIS ******************* */
            /* do transform */
            me.ShortTimeFourierTransform(gFFTworksp, fftFrameSize, -1);

            /* this is the analysis step */
            for (k = 0; k <= fftFrameSize2; k++) {

                /* de-interlace FFT buffer */
                real = gFFTworksp[2 * k];
                imag = gFFTworksp[2 * k + 1];

                /* compute magnitude and phase */
                magn = 2.0 * Math.sqrt(real * real + imag * imag);
                phase = Math.atan2(imag, real);

                /* compute phase difference */
                tmp = phase - gLastPhase[k];
                gLastPhase[k] = phase;

                /* subtract expected phase difference */
                tmp -= k * expct;

                /* map delta phase into +/- Pi interval */
                qpd = Math.floor(tmp / Math.PI);
                if (qpd >= 0) qpd += qpd & 1;
                else qpd -= qpd & 1;
                tmp -= Math.PI * qpd;

                /* get deviation from bin frequency from the +/- Pi interval */
                tmp = osamp * tmp / (2.0 * Math.PI);

                /* compute the k-th partials' true frequency */
                tmp = k * freqPerBin + tmp * freqPerBin;

                /* store magnitude and true frequency in analysis arrays */
                gAnaMagn[k] = magn;
                gAnaFreq[k] = tmp;
            }
            return {
                mag: gAnaMagn,
                freq: gAnaFreq
            }
        });
        return res;
    },
    signalSynthesis: function (frames, fftFrameSize, osamp, sampleRate) {
        var magn, phase, tmp, window, real, imag;
        var freqPerBin, expct;
        var i, k, qpd, index, inFifoLatency, stepSize, fftFrameSize2;
        var me = this;

        var hasoutput = false;

        /* set up some handy variables */
        fftFrameSize2 = fftFrameSize / 2;
        stepSize = fftFrameSize / osamp;
        freqPerBin = sampleRate / fftFrameSize;
        expct = 2.0 * Math.PI * stepSize / fftFrameSize;
        var gSumPhase = new Float32Array(fftFrameSize);
        var gFFTworksp = new Float32Array(2 * fftFrameSize);
        var gOutputAccum = new Float32Array(fftFrameSize + stepSize);
        var currentstep = 0;
        var gOutFIFO = new Float32Array(stepSize * frames.length);
        frames.foreach(function (frame) {
            var gSynMagn = frame.mag;
            var gSynFreq = frame.freq;
            /* ***************** SYNTHESIS ******************* */
            /* this is the synthesis step */
            for (k = 0; k <= fftFrameSize2; k++) {

                /* get magnitude and true frequency from synthesis arrays */
                magn = gSynMagn[k];
                tmp = gSynFreq[k];

                /* subtract bin mid frequency */
                tmp -= k * freqPerBin;

                /* get bin deviation from freq deviation */
                tmp /= freqPerBin;

                /* take osamp into account */
                tmp = 2.0 * Math.PI * tmp / osamp;

                /* add the overlap phase advance back in */
                tmp += k * expct;

                /* accumulate delta phase to get bin phase */
                gSumPhase[k] += tmp;
                phase = gSumPhase[k];

                /* get real and imag part and re-interleave */
                gFFTworksp[2 * k] = (magn * Math.cos(phase));
                gFFTworksp[2 * k + 1] = (magn * Math.sin(phase));
            }

            /* zero negative frequencies */
            for (k = fftFrameSize + 2; k < 2 * fftFrameSize; k++) {
                gFFTworksp[k] = 0.0;//
            }

            /* do inverse transform */
            me.ShortTimeFourierTransform(gFFTworksp, fftFrameSize, 1);

            /* do windowing and add to output accumulator */
            for (k = 0; k < fftFrameSize; k++) {
                window = -.5 * Math.cos(2.0 * Math.PI * k / fftFrameSize) + .5;
                gOutputAccum[k] += (2.0 * window * gFFTworksp[2 * k] / (fftFrameSize2 * osamp));
            }
            for (k = 0; k < stepSize; k++) {
                gOutFIFO[k + currentstep] = gOutputAccum[k];
            }
            hasoutput = true;
            currentstep = stepSize + currentstep;
            /* shift accumulator */
            //memmove(gOutputAccum, gOutputAccum + stepSize, fftFrameSize * sizeof(float));
            for (k = 0; k < fftFrameSize; k++) {
                if (k + stepSize >= gOutputAccum.length) {
                    MEPH.Log('outside of bounds');
                }
                gOutputAccum[k] = gOutputAccum[k + stepSize];
            }

            /* move input FIFO */
            //for (k = 0; k < inFifoLatency; k++) me.gInFIFO[k] = me.gInFIFO[k + stepSize];
        });
        return gOutFIFO;
    },
    modifySignal: function (pitchShift, timeStretch, fftFrameSize, osamp, sampleRate, buffer) {
        var res;
        var tres;
        var sp = this;
        pitchShift = pitchShift || 1;
        res = sp.signalAnalysis(fftFrameSize, osamp, sampleRate, buffer);
        if (timeStretch && timeStretch.length) {
            tres = sp.timeScaling(res, timeStretch);
            res = tres;
        }
        if (pitchShift !== 1) {
            tres = sp.signalPitchShift(res, pitchShift, fftFrameSize, osamp, sampleRate);
            res = tres;
        }
        var sres = sp.signalSynthesis(res, fftFrameSize, osamp, sampleRate);

        return sres;
    },
    /**
     * Time scaling of sinusoidal tracks
     * @param {Array} sfreq
     * @param {Array} smag
     * @param {Array} timeScaling
     * @return {Object} 
     *          {
     *            tfreq: [],
     *            tmag: []
     *          }
     ***/
    timeScaling: function (frames, timeScaling) {
        if (!timeScaling.length) {
            throw new Error('Time scaling array does any elements.');
        }
        var L = frames.length; //frames
        var maxInTime = timeScaling.maximum(function (x) { return x.start; });
        var maxOutTime = timeScaling.maximum(function (x) { return x.scale; });
        var outL = (L) * maxOutTime / maxInTime;
        var inFrames = timeScaling.select(function (x) { return x.start * (L - 1) / maxInTime; });
        var outFrames = timeScaling.select(function (x) { return x.scale * (L - 1) / maxOutTime; });
        var timeScalingEnv = function (frames) {
            var tweendata = [{
                x: inFrames.select(function (x) { return x / (L - 1); }),
                y: outFrames.select(function (x) { return x / (L - 1); })
            }]
            var calculator = new MEPH.tween.Calculator();
            calculator.setData(tweendata);
            return frames.select(function (x) {
                var result = calculator.get(x / (outL - 1));
                return result * (L - 1);
            });
        };
        var indexes = timeScalingEnv([].interpolate(0, Math.floor(outL)));
        var ysfreq = [frames[Math.round(indexes[0])]];

        indexes.subset(1).foreach(function (ii) {
            ysfreq.push(frames[Math.round(ii)]);
        })

        return ysfreq;
    },
    guessfrequencies: function (input, sampleRate, windowsize, binsize, step) {
        var me = this;
        var steps = Math.ceil(input.length / windowsize);
        var frequencies = [].interpolate(0, steps, function (t) {

            var _input = input.subset(windowsize * t, (windowsize * (t + 1)));

            var freq = me.guessfrequency(_input, sampleRate, binsize, step);
            return freq
        });

        return frequencies;
    },
    getNotes: function (input, sampleRate, windowsize, binsize, step) {
        var me = this, frequencies = me.guessfrequencies(input, sampleRate, windowsize, binsize, step);

        return frequencies.select(function (x) {
            return me.noteFromFrequency(x);
        })
    },
    noteFromPitch: function (frequency) {
        var noteNum = 12 * (Math.log(frequency / 440) / Math.log(2));
        return Math.round(noteNum) + 69;
    },
    noteFromFrequency: function (frequency) {
        var me = this, note = me.noteFromPitch(frequency);
        var noteStrings = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"];

        return noteStrings[note % 12];
    },
    guessfrequency: function (input, sampleRate, binsize, windowStep) {
        var me = this;
        var res = me.frequency(input, sampleRate, binsize, windowStep);
        if (res.length > 2) {
            // remove maximum
            var max = res.maximum(function (x) {
                return Math.abs(x);
            });
            var bbin = res.indexWhere(function (x) {
                return Math.abs(x) === max;
            }).first();
            res.splice(bbin, 1);

            // remove minimum
            var max = res.maximum(function (x) {
                return -Math.abs(x);
            });
            var bbin = res.indexWhere(function (x) {
                return -Math.abs(x) === max;
            }).first();
            res.splice(bbin, 1);
        }
        var averagefreque = res.summation(function (x, r) { return x + r }) / res.length;

        return averagefreque;
    },
    frequency: function (input, sampleRate, binsize, windowStep) {
        var me = this;
        var length = input.length;
        var fftsize = length / 2;
        binsize = binsize || 1024;
        windowStep = windowStep || (binsize / 2);

        var steps = input.length / windowStep;
        var frequencies = [].interpolate(0, steps, function (t) {
            var _input = input.subset(windowStep * t, (windowStep * (t)) + binsize);
            if (_input.length < binsize) {
                _input = [].interpolate(0, binsize, function (x) {
                    return _input[x] || 0;
                })
            }
            var frequency = me._frequency(_input, sampleRate);
            return frequency;
        });


        return frequencies;
    },
    _frequency: function (input, sampleRate) {
        var me = this;
        var res = me.fft(input);
        //res = res.skipEvery(2);
        var max = res.maximum(function (x) {
            return Math.abs(x);
        });
        var bbin = res.indexWhere(function (x) {
            return Math.abs(x) === max;
        }).first();
        var fs = sampleRate / input.length * bbin;
        return fs;
    },
    ShortTimeFourierTransform: function (fftBuffer, fftFrameSize, sign) {
        var wr, wi, arg, temp;
        var tr, ti, ur, ui;
        var i, bitm, j, le, le2, k;

        for (i = 2; i < 2 * fftFrameSize - 2; i += 2) {
            for (bitm = 2, j = 0; bitm < 2 * fftFrameSize; bitm <<= 1) {
                if ((i & bitm) != 0) j++;
                j <<= 1;
            }
            if (i < j) {
                temp = fftBuffer[i];
                fftBuffer[i] = fftBuffer[j];
                fftBuffer[j] = temp;
                temp = fftBuffer[i + 1];
                fftBuffer[i + 1] = fftBuffer[j + 1];
                fftBuffer[j + 1] = temp;
            }
        }
        var max = Math.floor(Math.log(fftFrameSize) / Math.log(2.0) + .5);
        for (k = 0, le = 2; k < max; k++) {
            le <<= 1;
            le2 = le >> 1;
            ur = 1.0;
            ui = 0.0;
            arg = Math.PI / (le2 >> 1);
            wr = Math.cos(arg);
            wi = (sign * Math.sin(arg));
            for (j = 0; j < le2; j += 2) {

                for (i = j; i < 2 * fftFrameSize; i += le) {
                    tr = fftBuffer[i + le2] * ur - fftBuffer[i + le2 + 1] * ui;
                    ti = fftBuffer[i + le2] * ui + fftBuffer[i + le2 + 1] * ur;
                    fftBuffer[i + le2] = fftBuffer[i] - tr;
                    fftBuffer[i + le2 + 1] = fftBuffer[i + 1] - ti;
                    fftBuffer[i] += tr;
                    fftBuffer[i + 1] += ti;

                }
                tr = ur * wr - ui * wi;
                ui = ur * wi + ui * wr;
                ur = tr;
            }
        }
    },
    /**
     * Performs a sfft.
     * @param {Array} array
     * @param {Array} $window
     * @param {Number} N
     * FFT Size
     * @param {Number} H
     * hop size returns
     * @return {Array}
     **/
    sfft: function (array, $window, N, H) {
        H = Math.ceil(H || 0);
        var me = this;
        if (H <= 0) {
            throw new Error('Hop size is smaller than or equal to 0.');
        }
        var M = $window.length;
        var hM1 = Math.floor((M + 1) / 2);
        var hM2 = Math.floor(M / 2);
        var pin = 0;
        var pend = array.length - M;
        var total = $window.summation(function (x, r) { return x + r });
        $window = $window.select(function (x) { return x / total; });
        var result = [];

        while (pin <= pend) {
            //analysis
            var x1 = array.subset(pin, pin + M);
            var resX1 = me.dfft(x1, $window);

            result.push(resX1);
            pin += H;
        }

        return result;
    },
    /**
     * Performs  the inverse sfft
     * @param {Array} frames
     * @param {Number} M
     * The window size.
     * @param {Number} H
     * The Hop size
     **/
    isfft: function (frames, M, H) {
        var me = this;
        var pin = 0;
        var result = new Float32Array(frames.length * H);
        frames.foreach(function (frame, i) {
            var y1 = me.idfft(frame, M).skipEvery(2);
            y1.foreach(function (y, i) {
                result[pin + i] += y * H;
            });
            pin += H;
        });
        return result;
    },
    idfft: function (array, M) {
        var me = this;

        return me.ifft(array);
    },
    dfft: function (array, $window) {
        var me = this, warray;

        warray = array.select(function (x, i) {
            return x * $window[i];
        });

        return me.fft(warray);
    },
    /**
     * Performs a fast fourier transform(FFT).
     * @param {Array} array
     * @param {Number} outputOffset
     * @param {Number} outputStride
     * @param {Number} inputOffset
     * @param {Number} inputStide
     * @param {Array} output
     ***/
    fft: function (array, type, outputOffset, outputStride, inputOffset, inputStride) {
        type = type !== undefined ? type : 'real';
        var size = type === 'real' ? array.length * 2 : array.length;
        var output = new Float32Array(size);
        outputOffset = outputOffset !== undefined ? outputOffset : 0;
        outputStride = outputStride !== undefined ? outputStride : 1;

        inputOffset = inputOffset !== undefined ? inputOffset : 0;
        inputStride = inputStride !== undefined ? inputStride : 1;
        var fft = new FFT();

        fft.complex(type === 'complex' ? array.length / 2 : array.length, false);
        fft.process(output, outputOffset, outputStride, array, inputOffset, inputStride, type)
        return output;
    },
    /**
     * Performs an inverse fast fourier transform(FFT).
     * @param {Array} array
     * @param {Number} outputOffset
     * @param {Number} outputStride
     * @param {Number} inputOffset
     * @param {Number} inputStide
     * @param {Array} output
     ***/
    ifft: function (array, outputOffset, outputStride, inputOffset, inputStride, type) {
        type = type !== undefined ? type : 'complex';
        var size = array.length;
        var output = new Float32Array(type === 'complex' ? size : size * 2);
        outputOffset = outputOffset !== undefined ? outputOffset : 0;
        outputStride = outputStride !== undefined ? outputStride : 1;

        inputOffset = inputOffset !== undefined ? inputOffset : 0;
        inputStride = inputStride !== undefined ? inputStride : 1;
        var fft = new FFT();

        fft.complex(output.length / 2, true);
        fft.process(output, outputOffset, outputStride, array, inputOffset, inputStride, false);

        output.foreach(function (t, i) {
            output[i] = output[i] / (size / 2);
        })
        return output;
    },
    /**
     *
     * Calculates the amplitude for each imaginary real pair of the fft result.
     * @param {Array} fftarray
     * [r,i,r,i,r,i,r,i,r,i]
     ***/
    amplitude: function (fftarray) {
        var res = new Float32Array(fftarray.length / 2);
        [].interpolate(0, fftarray.length / 2, function (x) {
            var index = x * 2;
            res[x] = MEPH.math.Util.polar(fftarray[index], fftarray[index + 1]).radius;
        });
        return res;
    },
    /**
     *
     * Calculates the phases for each imaginary real pair of the fft result.
     * @param {Array} fftarray
     * [r,i,r,i,r,i,r,i,r,i]
     ***/
    phase: function (fftarray) {
        var res = new Float32Array(fftarray.length / 2);
        [].interpolate(0, fftarray.length / 2, function (x) {
            var index = x * 2;
            res[x] = MEPH.math.Util.polar(fftarray[index], fftarray[index + 1]).theta;
        });
        return res;
    },
    /**
     *
     * Detects maxima in an array of values;
     * @param {Array} array
     * @param {Number} distance
     **/
    detectMaxima: function (array, distance) {
        var res = [];
        var i = 0;
        distance = distance || 1
        var maxima = null;
        var x;

        for (var index = 0 ; index < array.length ; index++) {
            x = array[index];
            maxima = x;
            var forwardMin = array.subset(index + 1, index + distance + 1).where(function (y) {
                if (y >= maxima) {
                    maxima = y;
                }
                return y >= maxima;
            });

            maxima = x;
            var backwardMin = array.subset(index - distance, index).where(function (y) {
                if (y >= maxima) {
                    maxima = y;
                }
                return y >= maxima;
            });

            if (forwardMin.length === 0 && backwardMin.length === 0) {
                res.push(index);
                index += distance - 1;
            }
        }
        return res;
    },
    /**
     *
     * Detects minima in an array of values;
     * @param {Array} array
     **/
    detectMinima: function (array, distance) {
        var res = [];
        var i = 0;
        distance = distance || 1
        var minima = null;
        var x;

        for (var index = 0 ; index < array.length ; index++) {
            x = array[index];
            minima = x;
            var forwardMin = array.subset(index + 1, index + distance + 1).where(function (y) {
                if (y <= minima) {
                    minima = y;
                }
                return y <= minima;
            });

            minima = x;
            var backwardMin = array.subset(index - distance, index).where(function (y) {
                if (y <= minima) {
                    minima = y;
                }
                return y <= minima;
            });

            if (forwardMin.length === 0 && backwardMin.length === 0) {
                res.push(index);
                index += distance - 1;
            }
        }
        return res;
    },
    /**
     * Gets/Sets the frame size.
     **/
    frameSize: function (size) {
        var me = this;
        if (size) {
            me.framesize = size;
            me.framesize2 = size / 2;
        }
        return me.framesize;
    },
    oversampling: function (os) {
        var me = this;
        if (os) {
            me.oversample = os;
        }
        return me.oversample;
    },
    samplingRate: function (sr) {
        var me = this;
        if (sr) {
            me.samplingrate = sr;
        }
        return me.samplingrate;
    },
    /**
     *
     * Analysis of the input.
     **/
    analysis: function (input) {
        var me = this,
            magn, phase,
            real, expct,
            stepSize, tmp, freqPerBin,
            sampleRate = me.samplingRate(),
            qpd, osamp = me.oversampling(),
            imag;
        me.lastphase = me.lastphase || new Float32Array(me.framesize2);
        if (me.lastphase.length !== me.framesize2) {
            me.lastphase = new Float32Array(me.framesize2)
        }
        stepSize = me.frameSize() / osamp;
        expct = 2 * Math.PI * stepSize / me.frameSize();
        freqPerBin = sampleRate / me.frameSize();
        var res = {
            mag: new Float32Array(me.framesize2),
            freq: new Float32Array(me.framesize2)
        }
        for (var k = 0 ; k < me.framesize2; k++) {
            /* de-interlace FFT buffer */
            real = input[2 * k];
            imag = input[2 * k + 1];

            /* compute magnitude and phase */
            magn = 2. * Math.sqrt(real * real + imag * imag);
            phase = Math.atan2(imag, real);

            /* compute phase difference */
            tmp = phase - me.lastphase[k];
            me.lastphase[k] = phase;

            /* subtract expected phase difference */
            tmp -= k * expct;

            /* map delta phase into +/- Pi interval */
            qpd = tmp / Math.PI;
            if (qpd >= 0) {
                qpd += (qpd & 1);
            }
            else {
                qpd -= (qpd & 1);
            }
            tmp -= Math.PI * qpd;

            /* get deviation from bin frequency from the +/- Pi interval */
            tmp = osamp * tmp / (2.0 * Math.PI);

            /* compute the k-th partials' true frequency */
            tmp = k * freqPerBin + tmp * freqPerBin;

            res.mag[k] = magn;
            res.freq[k] = tmp;
        }
        return res;
    },
    /**
     * Pitch shifts input.
     ***/
    pitch: function (analysisframe, pitchShift) {
        var me = this, k,
            synthesisMag = new Float32Array(me.frameSize()),
            synthesisFreq = new Float32Array(me.frameSize()),
            index;
        for (k = 0; k < me.framesize2; k++) {
            index = Math.floor(k * pitchShift);
            if (index < me.framesize2) {
                synthesisMag[index] += analysisframe.mag[k];
                synthesisFreq[index] = analysisframe.freq[k] * pitchShift;
            }
        }
        return {
            mag: synthesisMag,
            freq: synthesisFreq
        }
    },
    synthesis: function (frame) {
        var me = this,
            k, osamp, stepSize,
            expct,
            sampleRate = me.samplingRate(),
            freqPerBin;

        osamp = me.oversampling();
        stepSize = me.frameSize() / osamp;
        expct = 2 * Math.PI * stepSize / me.frameSize();
        freqPerBin = sampleRate / me.frameSize();
        me.sumPhase = me.sumPhase || new Float32Array(me.framesize2);
        if (me.sumPhase.length !== me.framesize2) {
            me.sumPhase = new Float32Array(me.framesize2);
        }
        var result = new Float32Array(me.frameSize());
        for (k = 0; k < me.framesize2; k++) {

            /* get magnitude and true frequency from synthesis arrays */
            magn = frame.mag[k];
            tmp = frame.freq[k];

            /* subtract bin mid frequency */
            tmp -= k * freqPerBin;

            /* get bin deviation from freq deviation */
            tmp /= freqPerBin;

            /* take osamp into account */
            tmp = 2.0 * Math.PI * tmp / osamp;

            /* add the overlap phase advance back in */
            tmp += k * expct;

            /* accumulate delta phase to get bin phase */
            me.sumPhase[k] += tmp;
            phase = me.sumPhase[k];

            /* get real and imag part and re-interleave */
            result[2 * k] = magn * Math.cos(phase);
            result[2 * k + 1] = magn * Math.sin(phase);
        }
        return result;
    },
    /*
     *
     * do windowing and add to output accumulator 
     * @param {Array} frame
     * @param {Array} output
     */
    unwindow: function (frame, output) {
        var me = this,
            window,
            osamp,
            k;
        osamp = me.oversampling();

        for (k = 0; k < me.frameSize() ; k++) {
            window = -.5 * Math.cos(2.0 * Math.PI * k / me.frameSize()) + .5;
            output[k] += 2. * window * (frame[2 * k] || 0) / (me.framesize2 * osamp);
        };
        return output;
    },
    /**
     * https://github.com/numpy/numpy/blob/v1.8.1/numpy/lib/function_base.py#L1122
     * Unwrap by changing deltas between values to 2*pi complement.
     * Unwrap radian phase `p` by changing absolute jumps greater than 
     * `discont` to their 2*pi complement along the given axis.
    *
    *    Parameters
    *    ----------
    *    p : array_like
    *        Input array.
    *    discont : float, optional
    *        Maximum discontinuity between values, default is ``pi``.
    *    axis : int, optional
    *        Axis along which unwrap will operate, default is the last axis.
    *
    *    Returns
    *    -------
    *    out : ndarray
    *        Output array.
    *
    *    See Also
    *    --------
    *    rad2deg, deg2rad
    *
    *    Notes
    *    -----
    *    If the discontinuity in `p` is smaller than ``pi``, but larger than
    *    `discont`, no unwrapping is done because taking the 2*pi complement
    *    would only make the discontinuity larger.
    
    *    Examples
    *    --------
    *    >>> phase = np.linspace(0, np.pi, num=5)
    *    >>> phase[3:] += np.pi
    *    >>> phase
    *    array([ 0.        ,  0.78539816,  1.57079633,  5.49778714,  6.28318531])
    *    >>> np.unwrap(phase)
    *    array([ 0.        ,  0.78539816,  1.57079633, -0.78539816,  0.        ])
    *
    */
    unwrap: function (p, discont, axis) {
        discont = discont || Math.PI;
        axis = axis || -1;
        var me = this;
        var nd = p.length;
        var dd = me.diff(p);
        //slice1 = [slice(None, None)] * nd
        // slice1[axis] = slice(1, None)
        // ddmod = mod(dd + pi, 2 * pi) - pi
        var ddmod = dd.select(function (x) {
            return (x + Math.PI) % (2 * Math.PI) - Math.PI;
        })
        // _nx.copyto(ddmod, pi, where = (ddmod == -pi) & (dd > 0))
        ddmod = ddmod.select(function (x, index) {
            return x === -Math.PI && dd[index] > 0 ? Math.PI : x;
        });
        // ph_correct = ddmod - dd;
        var ph_correct = ddmod.select(function (x, index) {
            return x - dd[index];
        });

        // _nx.copyto(ph_correct, 0, where = abs(dd) < discont)
        ph_correct = ph_correct.select(function (x, index) {
            return Math.abs(dd[index]) < discont ? 0 : x;
        })
        // up = array(p, copy = True, dtype = 'd')
        // up[slice1] = p[slice1] + ph_correct.cumsum(axis)
        var correct = ph_correct.cumsum();
        return p.select(function (x, index) {
            return x + (correct[index - 1] || 0);
        });

    },
    phaseunwrap: function ($data) {
        var me = this;
        var data = $data.select();
        return me.unwrapImplGetter(data, 0, 1, 1);
    },
    unwrapImplGetter: function (data, ptr, stride, n) {
        var pi = Math.PI;
        var me = this;
        var pphase = me.modf(data, ptr),
            shift = 0;
        ptr += stride;
        for (var i = 1; i < n ; ++i, ptr += stride) {
            var cphase = me.modf(data, ptr);
            var d = cphase - pphase;
            if (d < -pi) {
                shift += tau;
            }
            else if (d > pi) {
                shift -= tau;
            }
            data[ptr] = cphase + shift;
            pphase = cphase;
        }
        return data;
    },
    modf: function (data, ptr) {
        var tau = Math.PI * 2;
        var me = this;
        var x = data[ptr];
        if (data[ptr] < 0) {
            return tau + (x % tau);
        }
        else if (x > tau) {
            return x % tau;
        }
        return x;
    },
    /**
    *
    *  Calculate the n-th order discrete difference along given axis.
    *  The first order difference is given by ``out[n] = a[n+1] - a[n]`` along
    *  the given axis, higher order differences are calculated by using `diff`
    *  recursively.
    
    *  Parameters
    *  ----------
    *  a : array_like
    *      Input array
    *  n : int, optional
    *      The number of times values are differenced.
    *  axis : int, optional
    *      The axis along which the difference is taken, default is the last axis.
    *
    *  Returns
    *  -------
    *  diff : ndarray
    *      The `n` order differences. The shape of the output is the same as `a`
    *      except along `axis` where the dimension is smaller by `n`.
    *
    *
    */
    diff: function (array, n) {
        n = n || 1;

        var res = array.subset(1).select(function (x, index) {
            return x - array[index];
        });
        if (n > 1) {
            n--;
            return me.diff(res, n);
        }
        return res;
    },
    /**
     *
     * Stretches a signal by the stretch factor, resulting in a signal * stretch long.
     * @param {Array} signal
     * @param {Number} stretch how much to stretch the windows.
     * @param {Number} overlap the overlap factor of the windowing function.
     * @param {Number} width overrides the calculated width.
     * @param {String} type , complex or real
     **/
    stretch: function (signal, stretch, overlap, width, type) {
        var len = signal.length,
            me = this;
        overlap = overlap === null ? .5 : overlap;
        var windowWidth = width || me.windowWidth(signal.length);

        stretch = type === 'complex' ? stretch : stretch * 2;
        var windows = me.fftwindows(signal, windowWidth);
        var frames = windows.select(function (x, index) {
            return {
                a: x,
                b: windows[index + 1] || null
            }
        });

        var interpolatedWindows = me.interpolateFrames(windowWidth * 2, windows, type === 'complex' ? stretch : stretch / 2, overlap);

        var ifftwindows = me.ifftwindows(interpolatedWindows);
        var res = me.joinWindows(ifftwindows, me.joining(), overlap, stretch * len);

        return res//.subset(0, Math.ceil(stretch * signal.length * (1 / (overlap || 1))));
    },
    /**
     * @private
     **/
    interpolateFrames: function (windowWidth, windows, stretch, overlap) {
        var me = this, unwrappedPhase, phase, amplitude, rectangular,
            a, b, halfIndex,
            unwrappedA, unwrappedB,
            lerp, frame, gth,
            fth, interpolateVal, inverseoverlap = (1 / (overlap || 1)),
        generatedWindowFrames;
        generatedWindowFrames = me.generateWindows(windowWidth, Math.ceil(windows.length * stretch * inverseoverlap));
        lerp = MEPH.util.Vector.Lerp;

        var unwrappedPhase = windows.first().phase.select();
        var wwindow = windowWidth / 2;

        var unwrappedPhase = [].interpolate(0, windows.first().phase.length, function (x) {
            return windows.select(function (t) {
                return t.phase[x];
            })
        }).select(function (x) {
            return me.unwrap(x);
        });

        var lastXsk = null, hop = windowWidth * overlap;
        generatedWindowFrames.foreach(function (Xsk, i) {
            fth = Math.floor(i / (stretch * inverseoverlap));
            gth = Math.ceil(i / (stretch * inverseoverlap));
            interpolateVal = (i / (stretch)) - fth;
            a = windows[fth];
            b = windows[gth];
            b = b || a;
            if (fth > gth) {
                throw new Error('Frames are out of sequence.')
            }
            Xsk.step(2, function (xsk, index) {
                halfIndex = index / 2;
                //unwrappedPhase = unwrappedB ? lerp(unwrappedA[halfIndex], unwrappedB[halfIndex], interpolateVal) : unwrappedA[halfIndex];
                //phase = unwrappedPhase //% Math.PI;
                //amplitude = unwrappedB ? lerp(a.amplitude[halfIndex], b.amplitude[halfIndex], interpolateVal) : a.amplitude[halfIndex];
                //rectangular = MEPH.math.Util.rectangular(phase, amplitude);
                var phasea = unwrappedPhase[halfIndex][fth];
                var phaseb = unwrappedPhase[halfIndex][gth];
                if (lastXsk) {
                    var dpkm = (phaseb - phasea) / (hop);
                    //var dpckm = (hop * (Math.PI * 2)) / (wwindow / (wwindow / 2));
                    var polar = MEPH.math.Util.polar(lastXsk[index], lastXsk[index + 1]);
                    var pa = polar.theta + dpkm * stretch * overlap;
                    //var pa = dpckm + (halfIndex / hop) * (1 / wwindow);
                    phasea = pa;/// me.unwrap([phasea, pa]).last();
                }
                // var phasea = unwrappedPhase[halfIndex];
                //var phasea = a.phase[halfIndex]
                //var phaseb;
                //phaseb = b.phase[halfIndex];

                //var dp = phaseb - phasea - (2 * Math.PI * (wwindow / 2)) / (wwindow / index);
                //dp = dp - 2 * Math.PI * Math.round(dp / (2 * Math.PI));
                //phaseb = dp;

                // b.phase[halfIndex] = phaseb;
                //var x = b && b.raw ? lerp(a.raw[index], b.raw[index], interpolateVal) : a.raw[index];
                //var y = b && b.raw ? lerp(a.raw[index + 1], b.raw[index + 1], interpolateVal) : a.raw[index + 1];
                var x = phasea;
                // var x = lerp(phasea, phaseb, interpolateVal);
                var y = lerp(a.amplitude[halfIndex], b.amplitude[halfIndex], interpolateVal);
                var rect = MEPH.math.Util.rectangular(x, y)
                //var x = a.raw[index];
                //var y = a.raw[index + 1];
                //Xsk[index] = x;
                //Xsk[index + 1] = y;
                Xsk[index] = rect.x;
                Xsk[index + 1] = rect.y;
            });
            lastXsk = Xsk;
        });

        return generatedWindowFrames;
    },
    joinWindows: function (windows, joinfunc, stepratio, length) {
        var windowWidth = windows.first().length;
        stepratio = stepratio || 1;
        var resultSignalLength = length;
        var res = new Float32Array(resultSignalLength);


        res.step(2, function (x, rindex) {
            //var percentage = index / res;
            var indexesOfContributingWindows = windows.indexWhere(function (w, index) {
                var start = index * stepratio * windowWidth;
                var end = start + windowWidth - 1;
                return start <= rindex && rindex < end;
            });

            var contributionsWindow = indexesOfContributingWindows.select(function (w, index) {
                var t = windows[w];
                var start = Math.floor(w * stepratio * windowWidth);
                var contribution = joinfunc(rindex - start, windowWidth);
                return {
                    window: windows[w],
                    start: start,
                    contribution: contribution < 0 ? 0 : contribution
                }
            });

            var total = contributionsWindow.addition(function (t) {
                return t.contribution;
            });
            var r = contributionsWindow.addition(function (t, index) {
                var w = t.window;
                return total === 0 ? w[rindex - t.start] : (t.contribution / total) * w[rindex - t.start];
            });
            res[rindex] = r;

            r = contributionsWindow.addition(function (t, index) {
                var w = t.window;
                return (t.contribution / total) * w[(rindex + 1) - t.start];
            });
            res[rindex + 1] = r;

            //var r = indexesOfContributingWindows.addition(function (w, index) {
            //    var t = windows[w];
            //    var start = w * stepratio * windowWidth;
            //    var contribution = joinfunc(rindex - start, windowWidth);
            //    return contribution < 0 ? 0 : contribution * t[rindex - start];
            //});
            //res[rindex] = r;

            //r = indexesOfContributingWindows.addition(function (w, index) {
            //    var t = windows[w];
            //    var start = w * stepratio * windowWidth;
            //    var contribution = joinfunc((rindex) - (start), windowWidth);
            //    return contribution < 0 ? 0 : contribution * t[(rindex + 1) - (start)];
            //});
            //res[rindex + 1] = r;
        });
        return res;
    },
    /**
     * Splits real signal arrays into fft chunks.
     * @param {Array} signal
     * @param {Number} step
     **/
    fftwindows: function (signal, step) {
        var me = this;
        var windowing = me.windowing();
        if (!windowing) {
            throw new Error('Set a windowing function.');
        }
        var steps = Math.ceil(signal.length / step);
        var result = [].interpolate(0, steps, function (t) {
            var windowStartIndex = t * step;
            var windowEndIndex = (t + 1) * step;
            var windowSlice = signal.subset(windowStartIndex, windowEndIndex);//, windowing, t === 0, t === (steps - 1)
            var windowFFT = me.fft(windowSlice);
            return {
                raw: windowFFT,
                phase: me.phase(windowFFT),
                amplitude: me.amplitude(windowFFT)
            };
        });

        return result;
    },
    ifftwindows: function (windows) {
        var me = this;
        var res = windows.select(function (w) {
            return me.ifft(w);
        });
        return res;
    },
    /**
     * Generates a count of series of arrays of size long
     **/
    generateWindows: function (size, count) {
        return [].interpolate(0, count, function (x) {
            return new Float32Array(size);
        })
    },
    /**
     * Selects a windows width based on the signal length.
     * @param {Number} len
     **/
    windowWidth: function (len) {
        var length = Math.log(len) / Math.log(2);

        return Math.pow(2, Math.min(MEPH.signalprocessing.SignalProcessor.maximumWindow, Math.max(2, (length / 2))));
    },
    /**
     * Gets/Sets the function to use for windowing.
     */
    windowing: function (w) {
        var me = this;
        if (w !== undefined) {
            me.windowingFunc = w;
        }
        return me.windowingFunc;
    },
    joining: function (w) {
        var me = this;
        if (w !== undefined) {
            me.windowingFunc = w;
        }
        return me.windowingFunc;
    },
    /**
     *  Do windowing and re,im interleave
     ***/
    interleaveInput: function (input) {
        var me = this, window, framesize = me.frameSize(),
            gFFTworksp = me.getArray(input, framesize * 2);
        for (k = 0; k < me.frameSize() ; k++) {
            window = -.5 * Math.cos(2. * Math.PI * k / framesize) + .5;
            gFFTworksp[2 * k] = input[k] * window;
            gFFTworksp[2 * k + 1] = 0.;
        }
        return gFFTworksp;
    },
    getArray: function (array, length) {
        if (array instanceof Float32Array) {
            return new Float32Array(length);
        }
        else if (array instanceof Float64Array) {
            return new Float64Array(length);
        }
        return [].interpolate(0, length, function () { return 0; });
    },
    /**
     * Detects spectral peak locations.
     * @param {Array} mX
     * Magnitude spectrum
     * @param {Number} threshold
     **/
    peakDetection: function (_mX, _t) {
        var me = this;
        var t = (_t);
        var mX = _mX.select(function (x) {
            return (x);
        })
        var thresh = mX.subset(1, mX.length - 1).indexWhere(function (x) {
            return (x) > (t);
        });
        var next_minor = mX.subset(1, mX.length - 1).indexWhere(function (x, i) {
            return (x) > (mX[i]) && (x) > (mX[i + 2]);
        }).select(function (x) { return x + 1 });
        var ploc = next_minor.where(function (t) {
            return thresh.some(function (x) { return x === t; })
        });
        return ploc;
    },
    toDb: function (val) {
        return 20 * Math.log(Math.abs(val)) / Math.log(10);
    },
    fromDb: function (val) {
        return Math.pow(10, val / 20);
    },
    /**
     * Interpolate peak values using parabolic interpolation,
     * @param {Array} mX
     * Magnitude 
     * @param {Array} pX
     * Phase
     * @param {Array} pLoc
     * @return {Object}
     ***/
    peakInterp: function (mX, pX, ploc) {
        var me = this;
        var iplocs = ploc.select(function (loc, index) {
            var val = (mX[loc]);
            var lval = (mX[loc - 1]);
            var rval = (mX[loc + 1]);
            var iploc = loc + 0.5 * (lval - rval) / (lval - (2 * val) + rval);
            return iploc;
        });
        var ipmags = ploc.select(function (loc, index) {
            var val = (mX[loc]);
            var lval = (mX[loc - 1]);
            var rval = (mX[loc + 1]);
            var ipmag = val - 0.25 * (lval - rval) * (iplocs[index] - loc);
            return ipmag;
        });

        var ipphases = ploc.select(function (loc, index) {
            return MEPH.math.Vector.lerp(pX[loc], pX[loc + 1], .5);
        });

        return {
            locations: iplocs,
            magnitudes: ipmags,
            phases: ipphases
        }
    },
    /**
     * Analysis of a sound using the sinusoidal model with sine tracking.
     * @param {Array} x
     * @param {Array} w
     * @param {Number} N
     * Size of complex spectrum
     * @param {Number} H
     * Hop size
     * @param {Number} t
     * threshold in negative dbs.
     * @param {Number} maxnSines
     * Maximum number of sines per frame.
     * @param {Number} minSineDur
     * Minimum duration of sines in seconds
     * @param {Number} freqDevOffset
     * Minimum frequency deviation at 0Hz
     * @param {Number} freqDevSlope
     * Slop increase of minimum frequency deviation.
     ****/
    sineModelAnal: function (x, fs, w, N, H, threshold, maxnSines, minSineDur, freqDevOffset, freqDevSlope) {
        maxnSines = maxnSines || 811;
        minSineDur = minSineDur || .001;
        freqDevOffset = freqDevOffset || 20;
        freqDevSlope = freqDevSlope || 0.3;
        var me = this;
        if (minSineDur < 0)
            throw new Error('Minimum duration of sine tracks smaller than 0');
        var hM1 = Math.floor((w.length + 1) / 2);
        var hM2 = Math.floor((w.length / 2));

        var newx = new Float32Array(x.length + hM2 + hM1);
        x.foreach(function (t, i) {
            newx[i + hM2] = t;
        });

        x = newx;

        var pin = hM1;
        var pend = x.length - hM1;
        w = w.normalize();
        var tfreq = [];


        var xtfreq, xtmag, xtphase;
        while (pin < pend) {
            var x1 = x.subset(pin - hM1, pin + hM2, function (t) { return t; });
            var mpRex = me.dftAnal(x1, w, N);
            var ploc = me.peakDetection(mpRex.mX, threshold);
            var pmag = ploc.select(function (x) { return mpRex.mX[x]; });
            var ips = me.peakInterp(mpRex.mX, mpRex.pX, ploc);
            var iploc = ips.locations;
            var ipmags = ips.magnitudes;
            var ipphases = ips.phases;;

            var ipfreq = iploc.select(function (x) {
                return (fs * x / N);
            });

            var tres = me.sineTracking(ipfreq, ipmags, ipphases, tfreq, freqDevOffset, freqDevSlope);
            tfreq = tres.tfreq;
            var tmag = tres.tmag;
            var tphase = tres.tphase;

            tfreq = tfreq.subset(0, maxnSines);
            tmag = tmag.subset(0, maxnSines);
            tphase = tphase.subset(0, maxnSines);
            var jtfreq = [].zeroes(maxnSines);
            var jtmag = [].zeroes(maxnSines);
            var jtphase = [].zeroes(maxnSines);

            tfreq.foreach(function (x, i) {
                jtfreq[i] = x;
            });

            tmag.foreach(function (x, i) {
                jtmag[i] = x;
            });

            tphase.foreach(function (x, i) {
                jtphase[i] = x;
            });

            if (pin === hM1) {
                xtfreq = [jtfreq.select()];
                xtmag = [jtmag.select()];
                xtphase = [jtphase.select()];
            }
            else {
                xtfreq.push(jtfreq.select());
                xtmag.push(jtmag.select());
                xtphase.push(jtphase.select());
            }
            pin += H;
        }
        xtfreq = me.cleaningSineTracks(xtfreq, Math.round(fs * minSineDur / H));

        return {
            tfreq: xtfreq,
            tmag: xtmag,
            tphase: xtphase
        }
    },
    /**
     * Synthesis of a sound using the sinusoidal model
     * @param {Array} tfreq
     * Frequencies
     * @param {Array} tmag
     * Magnitudes
     * @param {Array} tphase
     * Phases of sinusoids
     * @param {Number} N
     * synthesis FFT size
     * @param {Number} H
     * Hope size
     * @param {Number} sampling rate
     * @param {Nubmer} w
     * @return {Float32Array}
     **/
    sineModelSynth: function (tfreq, tmag, tphase, N, H, fs) {
        var me = this;
        var hN = N / 2;
        var L = tfreq.length;
        var pout = 0;
        var ysize = H * (L + 3);
        var y = new Float32Array(ysize);
        var sw = [].zeroes(N);
        var ow = MEPH.math.Util.window.Triang(null, H * 2);

        ow.foreach(function (t, i) {
            sw[hN - H + i] = t;
        });

        var bh = [].interpolate(0, N, function (n) {
            return MEPH.math.Util.window.BlackmanHarris(n, N);
        });
        bh = bh.normalize();

        [].interpolate(hN - H, hN + H, function (t) {
            sw[t] = sw[t] / bh[t];
        });

        var lastytfreq = tfreq[0].select();

        var ytphase = [].interpolate(0, lastytfreq.length, function (t) {
            return 2 * Math.PI * Math.random();
        });

        [].interpolate(0, L, function (l) {
            if (tphase[l]) {
                ytphase = tphase[l].select();
            }
            else {
                ytphase = ytphase.select(function (c, i) {
                    return ytphase[i] + (Math.PI * (lastytfreq[i] + tfreq[l][i]) / fs) * H;
                });
            }

            var Y = me.genSpecSines(tfreq[l], tmag[l], ytphase, N, fs);

            lastytfreq = tfreq[l].select();

            ytphase = ytphase.select(function (x) { return x % (2 * Math.PI); });
            tphase.push(ytphase);
            var yw = me.ifft(Y.Y).skipEvery(2).fftshift();;
            //var yw = [].zeroes(N);

            //[].interpolate(0, hN - 1, function (t) {
            //    yw[t] = yi[hN + 1 + t];
            //    yw[hN - 1 + t] = yi[t + 0];
            //});
            //            yw = yw.fftshift();

            [].interpolate(pout, pout + N, function (x, i) {
                y[x] += sw[i] * yw[i];
            });

            pout += H;
        });

        y = y.subset(hN, y.length - hN);
        return y;
    },
    /**
     * Time scaling of sinusoidal tracks
     * @param {Array} sfreq
     * @param {Array} smag
     * @param {Array} timeScaling
     * @return {Object} 
     *          {
     *            tfreq: [],
     *            tmag: []
     *          }
     ***/
    sineTimeScaling: function (sfreq, smag, timeScaling) {
        if (!timeScaling.length) {
            throw new Error('Time scaling array does any elements.');
        }
        var L = sfreq.length; //frames
        var maxInTime = timeScaling.maximum(function (x) { return x.start; });
        var maxOutTime = timeScaling.maximum(function (x) { return x.scale; });
        var outL = (L) * maxOutTime / maxInTime;
        var inFrames = timeScaling.select(function (x) { return x.start * (L - 1) / maxInTime; });
        var outFrames = timeScaling.select(function (x) { return x.scale * (L - 1) / maxOutTime; });
        var timeScalingEnv = function (frames) {
            var tweendata = [{
                x: inFrames.select(function (x) { return x / (L - 1); }),
                y: outFrames.select(function (x) { return x / (L - 1); })
            }]
            var calculator = new MEPH.tween.Calculator();
            calculator.setData(tweendata);
            return frames.select(function (x) {
                var result = calculator.get(x / (outL - 1));
                return result * (L - 1);
            });
        };
        var indexes = timeScalingEnv([].interpolate(0, outL));
        var ysfreq = [sfreq[Math.round(indexes[0])]];
        var ysmag = [smag[Math.round(indexes[0])]];

        indexes.subset(1).foreach(function (ii) {
            ysfreq.push(sfreq[Math.round(ii)]);
            ysmag.push(smag[Math.round(ii)]);
        })

        return {
            tfreq: ysfreq,
            tmag: ysmag
        }
    },
    /**
     * Frequency scaling of sinusoidal tracks.
     * @param {Array} sfreq
     * @param {Array} freqScaling
     * @return {Array}
     ***/
    sineFreqScaling: function (sfreq, freqScaling) {
        var me = this;
        if (!freqScaling.length) {
            throw new Error('Frequency scaling array does any elements.');
        }
        var L = sfreq.length; //frames
        var maxInTime = freqScaling.maximum(function (x) { return x.start; });
        var maxOutTime = freqScaling.maximum(function (x) { return x.scale; });
        var outL = (L) * maxOutTime / maxInTime;
        var inFrames = freqScaling.select(function (x) { return x.start * (L - 1) / maxInTime; });
        var outFrames = freqScaling.select(function (x) { return x.scale * (L - 1) / maxOutTime; });
        var freqScalingEnv = function (frames) {
            var tweendata = [{
                x: inFrames.select(function (x) { return x / (L - 1); }),
                y: outFrames.select(function (x) { return x / (L - 1); })
            }]
            var calculator = new MEPH.tween.Calculator();
            calculator.setData(tweendata);
            return frames.select(function (x) {
                var result = calculator.get(x / (outL - 1));
                return result;
            });
        };
        var freqScaling = freqScalingEnv([].interpolate(0, outL));
        var ysfreq = [];

        freqScaling.foreach(function (ii, index) {
            var res = sfreq[index].select(function (x) {
                return x + x * ii;
            });
            ysfreq.push(res);
        });

        return ysfreq;
    },
    sineModel: function (x, fs, w, N, t, fftsize) {
        var me = this;
        var hM1 = Math.floor((w.length + 1) / 2);
        var hM2 = Math.floor(w.length / 2);
        var Ns = fftsize || 512;
        var H = Ns / 4;
        var hNs = Ns / 2;
        var pin = Math.max(hNs, hM1);
        var pend = x.length - pin;
        var fftbuffer = new Float32Array(N);
        var yw = new Float32Array(Ns);
        var y = new Float32Array(x.length);
        var wsum = w.summation(function (r, t) { return r + t; });
        w = w.select(function (t) { return t / wsum; });
        var sw = new Float32Array(Ns);
        var ow = MEPH.math.Util.window.Triang(null, H * 2);
        ow.foreach(function (t, i) {
            sw[hNs - H + i] = t;
        });
        var bh = [].interpolate(0, N, function (n) {
            return MEPH.math.Util.window.BlackmanHarris(n, N);
        });

        bh.normalize();

        [].interpolate(hN - H, hN + H, function (t) {
            sw[t] = sw[t] / bh[t];
        });

        while (pin < pend) {
            var xl = x.subset(pin - hM1, pin + hM2, function (t) { return t; });
            var mxPx = me.dftAnal(x1, w, N);
            var ploc = me.peakDetection(mxPx.mX, t);
            var pmag = ploc.select(function (t) { return mxPx.mX[t]; });
            var res = me.peakInterp(mxPx.mX, mxPx.pX, ploc);

            var ipfreq = res.iploc.select(function (t) { return fs * t / N; });

            var Y = me.genSpecSines(ipfreq, res.ipmag, res.ipphase, Ns, fs);

            var yw = me.dftSynth(Y, w);

            [].interpolate(pin - hNs, pin + hNs, function (t, i) {
                y[t] += sw[i] * yw[i];
            })
            pin += H;
        }
        return y;
    },
    /**
     * Delete short fragments of a collection of sinusoidal tracks
     * @param {Array} tfreq
     * Frequency of tracks
     * @param {Number} minTrackLength
     * Minimum duration of tracks in number of frames
     * @returns {Array} 
     * Ouputs frequency of tracks.
     ****/
    cleaningSineTracks: function (tfreq, minTrackLength) {
        minTrackLength = minTrackLength || 3;
        if (tfreq.length === 0) {
            return tfreq;
        }
        var nFrames = tfreq.length;
        var nTracks = tfreq[0].length;
        var beginnings = [].interpolate(0, nTracks, function (t) {
            return [].interpolate(0, nFrames, function (j) {
                if (tfreq[j][t]) {
                    if (j === 0) {
                        return {
                            track: t,
                            frame: j
                        }
                    }
                    else if (j > 0 && tfreq[j - 1][t] === 0) {
                        return {
                            track: t,
                            frame: j
                        }
                    }
                }
            }).where();
        }).concatFluent(function (x) {
            return x;
        });

        var ends = [].interpolate(0, nTracks, function (t) {
            return [].interpolate(0, nFrames, function (j) {
                if (tfreq[j][t]) {
                    if (j === nFrames - 1) {
                        return {
                            track: t,
                            frame: j
                        }
                    }
                    else if (tfreq[j + 1][t] === 0) {
                        return {
                            track: t,
                            frame: j
                        }
                    }
                }
            }).where();
        }).concatFluent(function (x) {
            return x;
        });

        beginnings.foreach(function (x) {
            var end = ends.first(function (t) {
                return t.track === x.track && t.frame > x.frame;
            });
            if (end) {
                x.end = end.frame;
                x.length = end.frame - x.frame;
            }
        });

        var toremove = beginnings.where(function (x) { return x.length < minTrackLength; });

        toremove.foreach(function (x) {
            [].interpolate(x.frame, x.end + 1, function (t) {
                tfreq[t][x.track] = 0;
            })
        })
        return tfreq;
    },
    /**
     * Tracking sinusoids from one frame to the next
     * @param {Array} pfreq
     * Frequencies and magnitude of current frame.
     * @param {Array} pmag
     * Frequencies and magnitude of current frame.
     * @param {Array} pphase
     * Frequencies and magnitude of current frame.
     * @param {Array} tfreq
     * Frequencies of incoming tracks from previous frame.
     * @param {Number} freqDevOffset
     * Minimum frequency deviation of 0hz
     * @pafam {Number} freqDevSlope
     * Slope increase of minimum frequency deviation
     * @returns {Object}
     *              {
     *                  tfreqn : [],
     *                  tmagn: [],
     *                  tphasen: [],
     *                  frequency: null,
     *                  magnitude: null,
     *                  phase: null
     *              }
     ****/
    sineTracking: function (pfreq, pmag, pphase, tfreq, freqDevOffset, freqDevSlope) {
        freqDevOffset = freqDevOffset || 20;
        freqDevSlope = freqDevSlope || 0.01;
        var me = this,
            tfreqn = [].zeroes(tfreq.length),
            tmagn = [].zeroes(tfreq.length),
            tphasen = [].zeroes(tfreq.length),
            pindexes = pfreq.indexWhere(function (x) {
                return x //&& x.length;
            }),
            incomingTracks = [].interpolate(0, tfreq.length, function (x) {
                return x;
            }),
            newTracks = [].interpolate(0, tfreq.length, function () {
                return -1;
            }),
            magOrder = pindexes.argsort(function (x, y) {
                return Math.abs(pmag[y]) - Math.abs(pmag[x]);
            }),
            pfreqt = pfreq.select(),
            pmagt = pmag.select(),
            pphaset = pphase.select();

        if (incomingTracks.length > 0) {
            magOrder.foreach(function (i) {
                if (incomingTracks.length) {
                    var track = incomingTracks.closestAbs(pfreqt[i], function (index) {
                        var tf = tfreq[incomingTracks[index]]
                        return tf;
                    });

                    var freqDistance = Math.abs(Math.abs(pfreq[i]) - Math.abs(tfreq[incomingTracks[track]]));
                    if (freqDistance < (freqDevOffset + freqDevSlope * pfreq[i])) {
                        newTracks[incomingTracks[track]] = i;
                        incomingTracks.splice(track, 1);
                    }
                }
            })
        }

        var indext = newTracks.indexWhere(function (x) { return x !== -1; });

        if (indext.length > 0) {
            var indexp = indext.select(function (x) {
                return newTracks[x];
            });

            indexp.foreach(function (i, index) {
                tfreqn[indext[index]] = pfreqt[i];
                tmagn[indext[index]] = pmagt[i];
                tphasen[indext[index]] = pphaset[i];
            });
            pfreqt.removeIndices(indexp);
            pmagt.removeIndices(indexp);
            pphaset.removeIndices(indexp);
        }
        // create new tracks from non used peaks
        var emptyt = tfreq.indexWhere(function (x) { return x === 0; });
        var peaksleft = pmagt.argsort(function (x, y) {
            return Math.abs(y) - Math.abs(x);
        });
        if (peaksleft.length > 0 && emptyt.length >= peaksleft.length) {
            peaksleft.foreach(function (pl, index) {
                tfreqn[emptyt[index]] = pfreqt[pl];
                tmagn[emptyt[index]] = pmagt[pl];
                tphasen[emptyt[index]] = pphaset[pl];
            })
        }
        else if (peaksleft.length > 0 && emptyt.length < peaksleft.length) {
            emptyt.foreach(function (ei, index) {
                tfreqn[ei] = pfreqt[peaksleft[index]];
                tmagn[ei] = pmagt[peaksleft[index]];
                tphasen[ei] = pphaset[peaksleft[index]];
            });

            [].interpolate(emptyt.length, peaksleft.length, function (t) {
                tfreqn.push(pfreqt[peaksleft[t]]);
                tmagn.push(pmagt[peaksleft[t]]);
                tphasen.push(pphaset[peaksleft[t]]);
            });
        }

        return {
            tfreq: tfreqn,
            tmag: tmagn,
            tphase: tphasen
        }
    },
    /**
     * Analysis of a signal using the discrete Fourier transform
     * @param {Array} x
     * Input signal.
     * @param {Array} w
     * Analysis window
     * @param {Number} N
     * FFT Size
     * @return {Object}
     *          {
     *              mX: [],
     *              pX: [] 
     *          }
     **/
    dftAnal: function (x, w, N) {

        if (w.length > N) {
            throw new Error('Window size (M) is bigger than FFT size');
        }
        var me = this;
        var hN = (N / 2) + 1;
        var hM1 = Math.floor((w.length + 1) / 2);
        var hM2 = Math.floor(w.length / 2);
        var fftbuffer = [].zeroes(N);
        w = w.normalize();

        var xw = x.select(function (t, i) { return t * w[i]; });

        [].interpolate(0, hM1, function (x) {
            fftbuffer[x] = xw[hM2 + x];
        });

        [].interpolate(0, hM2, function (x) {
            fftbuffer[fftbuffer.length - hM2 + x - 1] = xw[x];
        });

        var X = me.fft(fftbuffer);
        var mX = X.skipEvery(2).select(function (x, index) {
            var amp = MEPH.math.Util.polar(X[index * 2], X[index * 2 + 1]).radius
            return me.toDb(amp);
        }).subset(0, hN);
        var pX = me.unwrap(X.subset(1).skipEvery(2).select(function (x, index) {
            return MEPH.math.Util.polar(X[index * 2], x).theta;
        })).subset(0, hN);

        return {
            mX: mX,
            pX: pX
        }
    },
    /**
     * Synthesis of a signal using the discrete Fourier transform
     * @param {Object} mXpX
     * @param {Array} mXpX.mX
     * Magnitude spectrum
     * @param {Array} mXpX.pX
     * Phase spectrum
     * @param {Number} M 
     * window size
     **/
    dftSynth: function (mXpX, M) {
        var mX = mXpX.mX;
        var pX = mXpX.pX;
        var hN = mX.length;
        var me = this;


        var Y = new Float32Array(hN * 2);
        mX.foreach(function (x, i) {
            Y[i * 2] = x;
            Y[i * 2 + 1] = pX[i];
        })
        var result = me.ifft(Y).skipEvery(2);

        return result;
    },
    //*iploc, *ipmag, *ipphase, int n_peaks, double *real, double*imag, int size_spec
    genSpecSines2: function (ipfreq, ipmag, ipphase, N, fs) {
        var me = this;

        var Yreal = [].zeroes(N);
        var Yimg = [].zeroes(N);
        var hN = N / 2;

        [].interpolate(0, ipfreq.length, function (i) {
            var loc = N * ipfreq[i] / fs;
            if (loc !== 0 && loc <= hN - 1) {
                var binremainder = Math.round(loc) - loc;
                var lb = [].interpolate(binremainder - 4, binremainder + 5, function (x) { return x; });
                var lmag = me.genBhLobe(lb).select(function (res) { return res * ipmag[i]; });
                var b = [].interpolate(Math.round(loc) - 4, Math.round(loc) + 5);
                [].interpolate(0, 9, function (m) {
                    if (b[m] < 0) {
                        Yreal[-b[m]] += lmag[m]
                    }
                })
            }
        });
    },
    genBhLobe: function (array, N) {
        return MEPH.math.Util.getBhLobe(array, N);
    },
    /**
     * Generates a spectrum from a series of sine values.
     * @param {Array} ipfreq
     * Sine peaks frequences
     * @param {Array} ipmag
     * Magnitudes
     * @param {Array} ipphase
     * Phases
     * @param {Number} N 
     * Size of complex spectrum to generate
     * @param {Number} fs
     * Frequency sampling.
     * @return {Object}
     **/
    genSpecSines: function (ipfreq, ipmag, ipphase, N, fs) {
        var me = this;
        var Yreal = new Float32Array(N);
        var Yimg = new Float32Array(N);
        var hN = N / 2;
        var iploc = ipfreq.select(function (x) {
            var loc = N * x / fs;
            return loc;
        }).where().where(function (x) {
            return x <= hN - 1
        });



        me.$getSpecSines(iploc, ipmag, ipphase, iploc.length, Yreal, Yimg, N);

        var Y = new Float32Array(Yimg.length * 2);
        var temp = [].interpolate(0, Yimg.length, function (t, i) {
            return [Yreal[i], Yimg[i]];
        }).concatFluent(function (x) { return x; });

        temp.foreach(function (t, i) {
            Y[i] = t;
        })
        return {
            mX: Yreal,
            pX: Yimg,
            Y: Y
        };
    },
    $$getSpecSines: function (iploc, ipmag, ipphase, n_peaks, real, imag, N) {
        var me = this,
            ploc_int;
        var hN = N / 2;
        var cos = Math.cos;
        var sin = Math.sin;
        for (var ii = 0 ; ii < n_peaks; ii++) {
            var loc = iploc[ii];
            var bin_remainder = Math.floor(loc + .5) - loc;
            var lb = [].interpolate(bin_remainder - 4, bin_remainder + 5);
            var bhlobes = me.genBhLobe(lb, N);
            var b = [].interpolate(Math.round(loc) - 4, Math.round(loc) + 5, function (x) { return x; });

            var mag = ipmag[ii];

            for (var m = 0 ; m < 9; m++) {
                if (b[m] < 0) {
                    real[-b[m]] += mag * bhlobes[m] * cos(ipphase[ii]);
                    imag[-b[m]] += -1 * mag * bhlobes[m] * sin(ipphase[ii]);
                }
                else if (b[m] > hN) {
                    real[b[m]] += mag * bhlobes[m] * cos(ipphase[ii]);
                    imag[b[m]] += -1 * mag * bhlobes[m] * sin(ipphase[ii]);
                }
                else if (b[m] === 0 || b[m] === hN) {
                    if (b[m] === 0) {
                        real[b[m]] += 2 * mag * bhlobes[m] * cos(ipphase[ii]);
                    }
                    else {
                        real[b[m]] += 2 * mag * bhlobes[m] * cos(ipphase[ii]);
                    }
                }
                else {
                    real[b[m]] += mag * bhlobes[m] * cos(ipphase[ii]);
                    imag[b[m]] += mag * bhlobes[m] * sin(ipphase[ii]);
                }
            }
        }

        for (ii = 1; ii < hN; ii++) {
            real[hN + ii] = real[hN - ii];
            imag[hN + ii] = -1 * imag[hN - ii];
        }
    },
    $getSpecSines: function (iploc, ipmag, ipphase, n_peaks, real, imag, size_spec) {
        var ii = 0,
            jj = 0,
            bh_92_1001 = MEPH.signalprocessing.SignalProcessor.bh_92_1001,
            BH_SIZE_BY2 = MEPH.signalprocessing.SignalProcessor.BH_SIZE_BY2,
            ploc_int;
        var me = this;
        var size_spec_half = Math.floor(size_spec / 2);
        var bin_remainder,
            cos = Math.cos,
            sin = Math.sin,
            pow = Math.pow,
            loc,
            mag;

        for (ii = 0; ii < n_peaks; ii++) {
            loc = iploc[ii];
            bin_remainder = Math.floor(loc + 0.5) - loc;
            ploc_int = Math.floor(loc + 0.5);

            if ((loc >= 5) && (loc < size_spec_half - 4)) {
                mag = me.fromDb(ipmag[ii]);

                for (jj = -4; jj < 5; jj++) {
                    real[ploc_int + jj] += mag * bh_92_1001[Math.floor((bin_remainder + jj) * 100) + BH_SIZE_BY2] * cos(ipphase[ii]);
                    imag[ploc_int + jj] += mag * bh_92_1001[Math.floor((bin_remainder + jj) * 100) + BH_SIZE_BY2] * sin(ipphase[ii]);
                }
            }
            else if ((loc > 0) && (loc < 5)) {
                mag = me.fromDb(ipmag[ii]);

                for (jj = -4; jj < 5; jj++) {
                    if (ploc_int + jj < 0) {
                        real[-1 * (ploc_int + jj)] += mag * bh_92_1001[Math.floor((bin_remainder + jj) * 100) + BH_SIZE_BY2] * cos(ipphase[ii]);
                        imag[-1 * (ploc_int + jj)] += -1 * mag * bh_92_1001[Math.floor((bin_remainder + jj) * 100) + BH_SIZE_BY2] * sin(ipphase[ii]);

                    }
                    else if (ploc_int + jj == 0) {
                        real[(ploc_int + jj)] += 2 * mag * bh_92_1001[Math.floor((bin_remainder + jj) * 100) + BH_SIZE_BY2] * cos(ipphase[ii]);
                    }
                    else {
                        real[(ploc_int + jj)] += mag * bh_92_1001[Math.floor((bin_remainder + jj) * 100) + BH_SIZE_BY2] * cos(ipphase[ii]);
                        imag[ploc_int + jj] += mag * bh_92_1001[Math.floor((bin_remainder + jj) * 100) + BH_SIZE_BY2] * sin(ipphase[ii]);
                    }
                }
            }
            else if ((loc >= size_spec_half - 4) && (loc < size_spec_half - 1)) {
                mag = me.fromDb(ipmag[ii]);

                for (jj = -4; jj < 5; jj++) {
                    if (ploc_int + jj > size_spec_half) {
                        real[size_spec - (ploc_int + jj)] += mag * bh_92_1001[Math.floor((bin_remainder + jj) * 100) + BH_SIZE_BY2] * cos(ipphase[ii]);
                        imag[size_spec - (ploc_int + jj)] += -1 * mag * bh_92_1001[Math.floor((bin_remainder + jj) * 100) + BH_SIZE_BY2] * sin(ipphase[ii]);

                    }
                    else if (ploc_int + jj == size_spec_half) {
                        real[(ploc_int + jj)] += 2 * mag * bh_92_1001[Math.floor((bin_remainder + jj) * 100) + BH_SIZE_BY2] * cos(ipphase[ii]);

                    }
                    else {
                        real[(ploc_int + jj)] += mag * bh_92_1001[Math.floor((bin_remainder + jj) * 100) + BH_SIZE_BY2] * cos(ipphase[ii]);
                        imag[ploc_int + jj] += mag * bh_92_1001[Math.floor((bin_remainder + jj) * 100) + BH_SIZE_BY2] * sin(ipphase[ii]);
                    }
                }
            }

        }

        for (ii = 1; ii < size_spec_half; ii++) {
            real[size_spec_half + ii] = real[size_spec_half - ii];
            imag[size_spec_half + ii] = -1 * imag[size_spec_half - ii];
        }

    }
}).then(function () {
    MEPH.signalprocessing.SignalProcessor.bh_92_1001 = [8.876e-06, 9.5606e-06, 1.0255e-05, 1.0956e-05, 1.1664e-05, 1.2376e-05, 1.309e-05, 1.3804e-05, 1.4516e-05, 1.5224e-05, 1.5927e-05, 1.662e-05, 1.7303e-05, 1.7973e-05, 1.8628e-05, 1.9265e-05, 1.9881e-05, 2.0475e-05, 2.1045e-05, 2.1586e-05, 2.2098e-05, 2.2578e-05, 2.3022e-05, 2.343e-05, 2.3798e-05, 2.4124e-05, 2.4406e-05, 2.4642e-05, 2.4829e-05, 2.4966e-05, 2.5051e-05, 2.5081e-05, 2.5055e-05, 2.4971e-05, 2.4828e-05, 2.4625e-05, 2.436e-05, 2.4032e-05, 2.3642e-05, 2.3187e-05, 2.2668e-05, 2.2085e-05, 2.1437e-05, 2.0726e-05, 1.9952e-05, 1.9116e-05, 1.822e-05, 1.7264e-05, 1.6253e-05, 1.5186e-05, 1.4069e-05, 1.2904e-05, 1.1694e-05, 1.0445e-05, 9.1607e-06, 7.8463e-06, 6.5078e-06, 5.1516e-06, 3.7846e-06, 2.4143e-06, 1.0491e-06, 3.0242e-07, 1.6305e-06, 2.925e-06, 4.1749e-06, 5.3683e-06, 6.4929e-06, 7.5353e-06, 8.481e-06, 9.3154e-06, 1.0022e-05, 1.0584e-05, 1.0984e-05, 1.1202e-05, 1.1219e-05, 1.1013e-05, 1.0564e-05, 9.8468e-06, 8.8379e-06, 7.5115e-06, 5.8412e-06, 3.7985e-06, 1.3548e-06, 1.5209e-06, 4.8605e-06, 8.6968e-06, 1.3065e-05, 1.8002e-05, 2.3544e-05, 2.973e-05, 3.6602e-05, 4.4202e-05, 5.2573e-05, 6.1761e-05, 7.1816e-05, 8.2779e-05, 9.471e-05, 0.00010766, 0.00012167, 0.00013682, 0.00015315, 0.00017072, 0.0001896, 0.00020986, 0.00023155, 0.00025474, 0.00027951, 0.00030592, 0.00033406, 0.00036401, 0.00039582, 0.00042959, 0.0004654, 0.00050335, 0.0005435, 0.00058595, 0.00063081, 0.00067816, 0.00072811, 0.00078076, 0.0008362, 0.00089452, 0.00095588, 0.0010203, 0.001088, 0.0011591, 0.0012336, 0.0013117, 0.0013935, 0.0014791, 0.0015687, 0.0016625, 0.0017604, 0.0018628, 0.0019696, 0.0020811, 0.0021974, 0.0023187, 0.0024451, 0.0025767, 0.0027137, 0.0028564, 0.0030048, 0.0031592, 0.0033195, 0.003486, 0.0036593, 0.0038388, 0.0040255, 0.004219, 0.0044196, 0.0046273, 0.0048431, 0.0050664, 0.0052977, 0.005537, 0.0057848, 0.0060412, 0.0063063, 0.0065804, 0.0068638, 0.0071565, 0.0074591, 0.0077713, 0.0080938, 0.0084265, 0.00877, 0.0091241, 0.0094893, 0.0098661, 0.010254, 0.010654, 0.011066, 0.01149, 0.011927, 0.012377, 0.01284, 0.013315, 0.013805, 0.014309, 0.014827, 0.015359, 0.015906, 0.016468, 0.017045, 0.017637, 0.018246, 0.01887, 0.019511, 0.020169, 0.020844, 0.021536, 0.022245, 0.022973, 0.023718, 0.024482, 0.025264, 0.026066, 0.026887, 0.027728, 0.028589, 0.02947, 0.030371, 0.031294, 0.032237, 0.033201, 0.03419, 0.035198, 0.03623, 0.037285, 0.03836, 0.039461, 0.040587, 0.041734, 0.042906, 0.044103, 0.045324, 0.046571, 0.047845, 0.049141, 0.050468, 0.051817, 0.053194, 0.054598, 0.056031, 0.057491, 0.058976, 0.060492, 0.062036, 0.063608, 0.065211, 0.066842, 0.068501, 0.070191, 0.071912, 0.073664, 0.075443, 0.077257, 0.079099, 0.080975, 0.082882, 0.08482, 0.086792, 0.088794, 0.090832, 0.0929, 0.095002, 0.097135, 0.099305, 0.10151, 0.10375, 0.10602, 0.10832, 0.11066, 0.11304, 0.11545, 0.11789, 0.12037, 0.12289, 0.12544, 0.12803, 0.13065, 0.13331, 0.13601, 0.13874, 0.14151, 0.14431, 0.14715, 0.15003, 0.15295, 0.1559, 0.15889, 0.16192, 0.16498, 0.16808, 0.17122, 0.1744, 0.17761, 0.18086, 0.18415, 0.18747, 0.19083, 0.19424, 0.19767, 0.20115, 0.20466, 0.20821, 0.21179, 0.21542, 0.21907, 0.22277, 0.22651, 0.23028, 0.23408, 0.23793, 0.24181, 0.24572, 0.24967, 0.25366, 0.25769, 0.26175, 0.26584, 0.26996, 0.27413, 0.27833, 0.28256, 0.28683, 0.29113, 0.29546, 0.29983, 0.30423, 0.30866, 0.31313, 0.31762, 0.32215, 0.32671, 0.3313, 0.33592, 0.34057, 0.34525, 0.34996, 0.35471, 0.35948, 0.36426, 0.36909, 0.37393, 0.37883, 0.38373, 0.38866, 0.39362, 0.39858, 0.4036, 0.40863, 0.41368, 0.41873, 0.42385, 0.42897, 0.43411, 0.43926, 0.44444, 0.44962, 0.45486, 0.46006, 0.46534, 0.47061, 0.47588, 0.48118, 0.48648, 0.49181, 0.49715, 0.50251, 0.50788, 0.51324, 0.51863, 0.52403, 0.52942, 0.53485, 0.54028, 0.5457, 0.55113, 0.55655, 0.56201, 0.56744, 0.57289, 0.57835, 0.58381, 0.58923, 0.59469, 0.60015, 0.60557, 0.61103, 0.61646, 0.62191, 0.62734, 0.63277, 0.63816, 0.64359, 0.64898, 0.65438, 0.65974, 0.66511, 0.67047, 0.6758, 0.68114, 0.68644, 0.69174, 0.69701, 0.70225, 0.70749, 0.71273, 0.71794, 0.72312, 0.72826, 0.73338, 0.7385, 0.74358, 0.74864, 0.75366, 0.75868, 0.76364, 0.7686, 0.7735, 0.7784, 0.78324, 0.78804, 0.79285, 0.79759, 0.80231, 0.80696, 0.81161, 0.8162, 0.82076, 0.82528, 0.82978, 0.83421, 0.83861, 0.84296, 0.84727, 0.85151, 0.85573, 0.85992, 0.86404, 0.8681, 0.87213, 0.8761, 0.88004, 0.88391, 0.88773, 0.89148, 0.8952, 0.89886, 0.90246, 0.90602, 0.90952, 0.91294, 0.91632, 0.91963, 0.92289, 0.92611, 0.92924, 0.93231, 0.93532, 0.9383, 0.94118, 0.944, 0.94676, 0.94946, 0.9521, 0.95467, 0.95718, 0.9596, 0.96199, 0.96428, 0.96651, 0.96868, 0.97076, 0.97278, 0.97473, 0.97662, 0.97845, 0.98019, 0.98186, 0.98344, 0.98499, 0.98642, 0.98781, 0.98912, 0.99036, 0.99154, 0.99262, 0.99361, 0.99457, 0.99541, 0.99622, 0.99693, 0.99758, 0.99814, 0.99864, 0.99904, 0.99938, 0.99966, 0.99984, 0.99994, 1, 0.99994, 0.99984, 0.99966, 0.99938, 0.99904, 0.99864, 0.99814, 0.99758, 0.99693, 0.99622, 0.99541, 0.99457, 0.99361, 0.99262, 0.99154, 0.99036, 0.98912, 0.98781, 0.98642, 0.98499, 0.98344, 0.98186, 0.98019, 0.97845, 0.97662, 0.97473, 0.97278, 0.97076, 0.96868, 0.96651, 0.96428, 0.96199, 0.9596, 0.95718, 0.95467, 0.9521, 0.94946, 0.94676, 0.944, 0.94118, 0.9383, 0.93532, 0.93231, 0.92924, 0.92611, 0.92289, 0.91963, 0.91632, 0.91294, 0.90952, 0.90602, 0.90246, 0.89886, 0.8952, 0.89148, 0.88773, 0.88391, 0.88004, 0.8761, 0.87213, 0.8681, 0.86404, 0.85992, 0.85573, 0.85151, 0.84727, 0.84296, 0.83861, 0.83421, 0.82978, 0.82528, 0.82076, 0.8162, 0.81161, 0.80696, 0.80231, 0.79759, 0.79285, 0.78804, 0.78324, 0.7784, 0.7735, 0.7686, 0.76364, 0.75868, 0.75366, 0.74864, 0.74358, 0.7385, 0.73338, 0.72826, 0.72312, 0.71794, 0.71273, 0.70749, 0.70225, 0.69701, 0.69174, 0.68644, 0.68114, 0.6758, 0.67047, 0.66511, 0.65974, 0.65438, 0.64898, 0.64359, 0.63816, 0.63277, 0.62734, 0.62191, 0.61646, 0.61103, 0.60557, 0.60015, 0.59469, 0.58923, 0.58381, 0.57835, 0.57289, 0.56744, 0.56201, 0.55655, 0.55113, 0.5457, 0.54028, 0.53485, 0.52942, 0.52403, 0.51863, 0.51324, 0.50788, 0.50251, 0.49715, 0.49181, 0.48648, 0.48118, 0.47588, 0.47061, 0.46534, 0.46006, 0.45486, 0.44962, 0.44444, 0.43926, 0.43411, 0.42897, 0.42385, 0.41873, 0.41368, 0.40863, 0.4036, 0.39858, 0.39362, 0.38866, 0.38373, 0.37883, 0.37393, 0.36909, 0.36426, 0.35948, 0.35471, 0.34996, 0.34525, 0.34057, 0.33592, 0.3313, 0.32671, 0.32215, 0.31762, 0.31313, 0.30866, 0.30423, 0.29983, 0.29546, 0.29113, 0.28683, 0.28256, 0.27833, 0.27413, 0.26996, 0.26584, 0.26175, 0.25769, 0.25366, 0.24967, 0.24572, 0.24181, 0.23793, 0.23408, 0.23028, 0.22651, 0.22277, 0.21907, 0.21542, 0.21179, 0.20821, 0.20466, 0.20115, 0.19767, 0.19424, 0.19083, 0.18747, 0.18415, 0.18086, 0.17761, 0.1744, 0.17122, 0.16808, 0.16498, 0.16192, 0.15889, 0.1559, 0.15295, 0.15003, 0.14715, 0.14431, 0.14151, 0.13874, 0.13601, 0.13331, 0.13065, 0.12803, 0.12544, 0.12289, 0.12037, 0.11789, 0.11545, 0.11304, 0.11066, 0.10832, 0.10602, 0.10375, 0.10151, 0.099305, 0.097135, 0.095002, 0.0929, 0.090832, 0.088794, 0.086792, 0.08482, 0.082882, 0.080975, 0.079099, 0.077257, 0.075443, 0.073664, 0.071912, 0.070191, 0.068501, 0.066842, 0.065211, 0.063608, 0.062036, 0.060492, 0.058976, 0.057491, 0.056031, 0.054598, 0.053194, 0.051817, 0.050468, 0.049141, 0.047845, 0.046571, 0.045324, 0.044103, 0.042906, 0.041734, 0.040587, 0.039461, 0.03836, 0.037285, 0.03623, 0.035198, 0.03419, 0.033201, 0.032237, 0.031294, 0.030371, 0.02947, 0.028589, 0.027728, 0.026887, 0.026066, 0.025264, 0.024482, 0.023718, 0.022973, 0.022245, 0.021536, 0.020844, 0.020169, 0.019511, 0.01887, 0.018246, 0.017637, 0.017045, 0.016468, 0.015906, 0.015359, 0.014827, 0.014309, 0.013805, 0.013315, 0.01284, 0.012377, 0.011927, 0.01149, 0.011066, 0.010654, 0.010254, 0.0098661, 0.0094893, 0.0091241, 0.00877, 0.0084265, 0.0080938, 0.0077713, 0.0074591, 0.0071565, 0.0068638, 0.0065804, 0.0063063, 0.0060412, 0.0057848, 0.005537, 0.0052977, 0.0050664, 0.0048431, 0.0046273, 0.0044196, 0.004219, 0.0040255, 0.0038388, 0.0036593, 0.003486, 0.0033195, 0.0031592, 0.0030048, 0.0028564, 0.0027137, 0.0025767, 0.0024451, 0.0023187, 0.0021974, 0.0020811, 0.0019696, 0.0018628, 0.0017604, 0.0016625, 0.0015687, 0.0014791, 0.0013935, 0.0013117, 0.0012336, 0.0011591, 0.001088, 0.0010203, 0.00095588, 0.00089452, 0.0008362, 0.00078076, 0.00072811, 0.00067816, 0.00063081, 0.00058595, 0.0005435, 0.00050335, 0.0004654, 0.00042959, 0.00039582, 0.00036401, 0.00033406, 0.00030592, 0.00027951, 0.00025474, 0.00023155, 0.00020986, 0.0001896, 0.00017072, 0.00015315, 0.00013682, 0.00012167, 0.00010766, 9.471e-05, 8.2779e-05, 7.1816e-05, 6.1761e-05, 5.2573e-05, 4.4202e-05, 3.6602e-05, 2.973e-05, 2.3544e-05, 1.8002e-05, 1.3065e-05, 8.6968e-06, 4.8605e-06, 1.5209e-06, 1.3548e-06, 3.7985e-06, 5.8412e-06, 7.5115e-06, 8.8379e-06, 9.8468e-06, 1.0564e-05, 1.1013e-05, 1.1219e-05, 1.1202e-05, 1.0984e-05, 1.0584e-05, 1.0022e-05, 9.3154e-06, 8.481e-06, 7.5353e-06, 6.4929e-06, 5.3683e-06, 4.1749e-06, 2.925e-06, 1.6305e-06, 3.0242e-07, 1.0491e-06, 2.4143e-06, 3.7846e-06, 5.1516e-06, 6.5078e-06, 7.8463e-06, 9.1607e-06, 1.0445e-05, 1.1694e-05, 1.2904e-05, 1.4069e-05, 1.5186e-05, 1.6253e-05, 1.7264e-05, 1.822e-05, 1.9116e-05, 1.9952e-05, 2.0726e-05, 2.1437e-05, 2.2085e-05, 2.2668e-05, 2.3187e-05, 2.3642e-05, 2.4032e-05, 2.436e-05, 2.4625e-05, 2.4828e-05, 2.4971e-05, 2.5055e-05, 2.5081e-05, 2.5051e-05, 2.4966e-05, 2.4829e-05, 2.4642e-05, 2.4406e-05, 2.4124e-05, 2.3798e-05, 2.343e-05, 2.3022e-05, 2.2578e-05, 2.2098e-05, 2.1586e-05, 2.1045e-05, 2.0475e-05, 1.9881e-05, 1.9265e-05, 1.8628e-05, 1.7973e-05, 1.7303e-05, 1.662e-05, 1.5927e-05, 1.5224e-05, 1.4516e-05, 1.3804e-05, 1.309e-05, 1.2376e-05, 1.1664e-05, 1.0956e-05, 1.0255e-05, 9.5606e-06, 8.876e-06, 8.2026e-06, 7.5422e-06, 6.8957e-06, 6.265e-06, 5.6514e-06, 5.0561e-06, 4.48e-06, 3.9244e-06, 3.3905e-06, 2.8791e-06, 2.3909e-06, 1.9268e-06, 1.4875e-06, 1.0735e-06, 6.8548e-07, 3.2373e-07];


    MEPH.signalprocessing.SignalProcessor.BH_SIZE = 1001;
    MEPH.signalprocessing.SignalProcessor.BH_SIZE_BY2 = 501;
    MEPH.signalprocessing.SignalProcessor.MFACTOR = 100;
});﻿/**
 * @class MEPH.table.SpreadSheet
 * @extends MEPH.control.Control
 * A infinitely scrolling SpreadSheet.
 **/
MEPH.define('MEPH.table.SpreadSheet', {
    alias: 'spreadsheet',
    templates: true,
    requires: ['MEPH.util.Renderer', 'MEPH.util.Style', 'MEPH.util.Dom', 'MEPH.scrollbar.Scrollbar', 'MEPH.util.SVG'],
    extend: 'MEPH.control.Control',
    statics: {
        states: {
            Selectingleft: 'selectingleft',
            Selectingtop: 'selectingtop',
            Selecting: 'selecting'
        }
    },
    properties: {
        width: 0,
        height: 0,
        vertical: false,
        animatemode: false,
        animFrame: null,
        enablesvg: false,
        columnOffsets: null,
        rowOffsets: null,
        columnheaders: 0,
        endselectonmouseout: false,
        rowheaders: 0,
        state: null,
        columns: null,
        rows: null,
        defaultRowHeight: 50,
        selectedrange: null,
        selectedrangeleft: null,
        selectedrangetop: null,
        defaultColumnWidth: 80,
        defaultHeaderColumnWidth: 80,
        gridlinecolor: "#d6ccf0",
        startColumn: 0,
        vbarposition: null,
        hbarposition: null,
        startRow: 0,
        startTopRow: 0,
        startLeftColumn: 0,
        verticalSize: 0,
        horizontalSize: 0,
        selectedleftheader: null,
        selectedtopheader: null,
        cache: null,
        visibleleftheader: null,
        visibletopheader: null,
        visiblegrid: null
    },
    initialize: function () {
        var me = this;
        me.callParent.apply(me, arguments);
        me.cache = {};

        me.renderer = new MEPH.util.Renderer();
        me.rendererContent = new MEPH.util.Renderer();

        me.leftRenderer = new MEPH.util.Renderer();
        me.leftContentRenderer = new MEPH.util.Renderer();

        me.topRenderer = new MEPH.util.Renderer();
        me.topContentRenderer = new MEPH.util.Renderer();

        me.columnOffsets = null;
        me.rowOffsets = null;
        me.requestActiveSelect = null;
        me.requestActiveCell = null;

        me.on('altered', function (type, args) {
            var rowheaders = parseFloat(me.rowheaders);
            var cols = parseFloat(me.columns);
            var rows = parseFloat(me.rows);
            var colheaders = parseFloat(me.columnheaders);
            if (args.path === 'rowheaders' ||
                args.property === "gridlinecolor" ||
                args.path === 'columnheaders' ||
                args.path === 'columns' ||
                args.path === 'vertical' ||
                args.property === 'enablesvg' ||
                args.property === 'startColumn' ||
                args.property === 'startRow' ||
                args.property === 'vbarposition' ||
                args.property === 'hbarposition' ||
                args.path === 'rows') {
                if (args.property === 'enablesvg') {
                    if (me.enablesvg && !me.svgrenderer) {
                        me.svgrenderer = new MEPH.util.SVG();
                        me.svgrenderer.batchdraw = true;
                        me.svgrenderer.setCanvas(me.canvassvg);
                    }
                }
                if (args.property === 'vbarposition') {
                    me.setStartRow(me.vbarposition);
                }

                if (args.property === 'hbarposition') {
                    me.setStartColumn(me.hbarposition);
                }


                if (!me.columnOffsets && rowheaders && cols) {
                    me.columnOffsets = [].interpolate(0, cols, function (x) {
                        return me.defaultColumnWidth;
                    });
                    me.columnHeaderOffsets = [].interpolate(0, colheaders, function (x) {
                        return me.defaultHeaderColumnWidth;
                    });
                    me.refreshRowColPositions();
                }
                if (!me.rowOffsets && rows && colheaders) {

                    me.rowOffsets = [].interpolate(0, rows, function (x) {
                        return me.defaultRowHeight;
                    })
                    me.rowHeaderOffsets = [].interpolate(0, rowheaders, function (x) {
                        return me.defaultRowHeight;
                    })
                    me.refreshRowColPositions();
                }

                me.update();
            }
        });
    },
    refreshRowColPositions: function () {
        var me = this;

        if (me.columnOffsets) {
            me.columnPositions = me.columnOffsets.subset(0, me.columnOffsets.length).cumsum();


            me.columnHeaderPositions = me.columnHeaderOffsets.subset(0, me.columnHeaderOffsets.length).cumsum();
        }

        if (me.rowOffsets) {
            me.rowPositions = me.rowOffsets.subset(0, me.rowOffsets.length).cumsum();

            me.rowHeaderPositions = me.rowHeaderOffsets.subset(0, me.rowHeaderOffsets.length).cumsum();

        }


    },
    onLoaded: function () {
        var me = this;
        me.callParent.apply(me, arguments);
        me.appendEvents();

        me.rendererContent.setCanvas(me.canvascontent);
        me.leftContentRenderer.setCanvas(me.leftheadercontent);
        me.topContentRenderer.setCanvas(me.topheadercontent);

    },
    appendEvents: function () {
        var me = this;

        me.don('resize', window, me.update.bind(me));
        me.appendCanvasEvents();
        me.appendHeaderEvents();
    },
    appendHeaderEvents: function () {
        var me = this;
        me.don('click', me.topheader, function (evt) {
            me.handleSingleHeaderCellCalculations(me.topheader, evt, 'topheadercellclicked', 'top');
        });
        me.don('click', me.leftheader, function (evt) {
            me.handleSingleHeaderCellCalculations(me.leftheader, evt, 'leftheadercellclicked', 'left');
        });
        me.don('mousemove', me.topheader, function (evt) {
            me.handleSingleHeaderCellCalculations(me.topheader, evt, 'mousemovetopheader', 'top');
        });
        me.don('mousemove', me.leftheader, function (evt) {
            me.handleSingleHeaderCellCalculations(me.leftheader, evt, 'mousemoveleftheader', 'left');
        });
        me.don('mousemovetopheader', me.topheader, function (evt) {
            me.handleMouseMoveHeaderCell(evt, 'top');
        });
        me.don('mousemoveleftheader', me.leftheader, function (evt) {
            me.handleMouseMoveHeaderCell(evt, 'left');
        });



        me.don('mouseover', me.leftheader, me.headerMouseEventHandler.bind(me, 'left', me.leftheader, 'mouseoverheader'));
        me.don('mousemove', me.leftheader, me.headerMouseMoveHandler.bind(me, 'left', me.leftheader));

        me.don('mousemoveselectleft', me.leftheader, me.headerMouseMoveSelectHandler.bind(me, 'left', me.leftheader));

        me.don('mousedown', me.leftheader, me.headerMouseDownHandler.bind(me, 'left', me.leftheader));
        me.don('mouseup', me.leftheader, me.onHeaderMouseupSelecting.bind(me, 'left', me.leftheader));
        if (me.endselectonmouseout)
            me.don('mouseout', me.leftheader, me.onHeaderMouseupSelecting.bind(me, 'left', me.leftheader));



        me.don('mousedown', me.topheader, me.headerMouseDownHandler.bind(me, 'top', me.topheader));

        me.don('mousemove', me.topheader, me.headerMouseMoveHandler.bind(me, 'top', me.topheader));

        me.don('mouseover', me.topheader, me.headerMouseEventHandler.bind(me, 'top', me.topheader, 'mouseoverheader'));

        me.don('mousemoveselecttop', me.topheader, me.headerMouseMoveSelectHandler.bind(me, 'top', me.topheader));

        me.don('mouseup', me.topheader, me.onHeaderMouseupSelecting.bind(me, 'top', me.topheader));
        if (me.endselectonmouseout)
            me.don('mouseout', me.topheader, me.onHeaderMouseupSelecting.bind(me, 'top', me.topheader));
    },
    onHeaderMouseupSelecting: function (offset, header, evt) {
        var me = this;
        if (me.state === MEPH.table.SpreadSheet.states.Selecting + offset) {
            var selectedstartrow = me.getSelectedStartRow(me.selecting);
            me['selectedrange' + offset] = me.selecting;
            if (me['selected' + offset + 'header']) {
                me['selected' + offset + 'header'].clear();
                if (selectedstartrow) {
                    [].interpolate(selectedstartrow.startrow, selectedstartrow.endrow + 1, function (x) {
                        [].interpolate(selectedstartrow.startcolumn, selectedstartrow.endcolumn + 1, function (y) {
                            me['selected' + offset + 'header'].push({
                                row: x,
                                column: y
                            });
                        })
                    });
                }
            }
            me.selecting = null;
            me.state = null;
        }
    },
    headerMouseMoveSelectHandler: function (offset, header, evt) {
        var me = this; var selecting = evt.selecting;
        if (!selecting || !selecting.end || !selecting.start) {
            return null;
        }
        me.handleHeaderMouseMoveCellSelect(offset, evt);
    },

    handleHeaderMouseMoveCellSelect: function (offset, evt) {
        var me = this;
        if (evt.selecting) {
            var info = me.getSelectedStartRow(evt.selecting);
            if (info) {
                var minCellLeftPosition = me.getCellPosition({ row: info.startrow, column: info.startcolumn }, offset);
                var maxCellLeftPosition = me.getCellPosition({ row: info.startrow, column: info.endcolumn + 1 }, offset);

                var minCellTopPosition = me.getCellPosition({ row: info.startrow, column: info.endcolumn }, offset);
                var maxCellTopPosition = me.getCellPosition({ row: info.endrow + 1, column: info.endcolumn }, offset);

                me.setHeaderActiveSelect(minCellLeftPosition.x, maxCellLeftPosition.x, minCellTopPosition.y, maxCellTopPosition.y, offset)
            }
        }
    },
    headerMouseEventHandler: function (offset, header, outevt, evt) {
        var me = this;
        var cells = me.getHeaderCells(evt);
        var pos = MEPH.util.Dom.getEventPositions(evt, header);
        header.dispatchEvent(MEPH.createEvent(outevt + offset, {
            cells: cells,
            position: pos
        }));
    },
    headerMouseMoveHandler: function (offset, header, evt) {
        var me = this;
        if (me.state === MEPH.table.SpreadSheet.states.Selecting + offset) {

            var cells = me.getHeaderCells(evt);
            var cell = cells.first()
            me.selecting.end = cell;
            header.dispatchEvent(MEPH.createEvent('mousemoveselect' + offset, {
                selecting: me.selecting
            }));
        }
    },
    headerMouseDownHandler: function (offset, header, evt) {
        var me = this;
        if (!me.state) {
            var cells = me.getHeaderCells(evt, offset);
            var cell = cells.first()

            me.selecting = {
                start: cell
            };
            document.body.classList.add('noselect');
            me.state = MEPH.table.SpreadSheet.states.Selecting + offset;
            header.dispatchEvent(MEPH.createEvent(offset + 'selectstart', {
                cell: cell
            }));
        }
    },
    appendCanvasEvents: function () {
        var me = this;
        me.don('click', [me.canvassvg, me.canvas], function (evt) {
            me.handleSingleCellCalculations(evt, 'cellclicked');
        });
        //me.don('mousemove', me.canvas, function (evt) {
        //    me.handleSingleCellCalculations(evt, 'mousemovecell');
        //});

        //me.don('mousemove', me.canvas, function (evt) {
        //});
        me.don('keypress', [me.canvassvg, me.canvas], function (evt) {
            me.onKeyPress(evt);
        });

        me.don('keypress', me.leftheader, function (evt) {
            me.onKeyPress(evt);
        });
        if (me.movemoverequest) {
            cancelAnimationFrame(me.movemoverequest)
        }
        me.don('mousemove', [me.canvassvg, me.canvas], function (evt) {
            var t = function () {
                me.handleSingleCellCalculations(evt, ['mouseovercell', 'mousemovecell']);
                if (me.state === MEPH.table.SpreadSheet.states.Selecting) {
                    var cell = me.hovercells ? me.hovercells.first() : me.getCanvasCells(evt).first()
                    me.selecting.end = cell;
                    me.canvas.dispatchEvent(MEPH.createEvent('mousemoveselect', {
                        selecting: me.selecting
                    }));
                }
            }
            if (me.animatemode) {
                me.movemoverequest = requestAnimationFrame(t);
            }
            else {
                t();
            }
        });

        me.don('mousemovecell', me.canvas, function (evt) {
            me.handleMouseMoveCell(evt);
        });

        me.don('mousemoveselect', me.canvas, function (evt) {
            var selecting = evt.selecting;
            if (!selecting || !selecting.end || !selecting.start) {
                return null;
            }
            me.handleMouseMoveCellSelect(evt);
        });

        me.don('mousedown', [me.canvassvg, me.canvas], function (evt) {
            if (me.commands && me.commands.first(function (x) { return x.command === 'select' }))
                return;
            me.select(evt);
        });

        me.don('mouseout', [me.canvassvg, me.canvas], me.onMouseupSelecting.bind(me));
        me.don('mouseup', [me.canvassvg, me.canvas], me.onMouseupSelecting.bind(me));
        var removenoselect = function () {
            document.body.classList.remove('noselect');
        }
        me.don('mouseup', document.body, removenoselect);
        me.don('mouseout', document.body, removenoselect);
    },
    getSelectedStartRow: function (selecting) {
        if (!selecting || !selecting.end || !selecting.start) {
            return null;
        }
        var startrow = Math.min(selecting.end.row, selecting.start.row);
        var endrow = Math.max(selecting.end.row, selecting.start.row);
        var startcolumn = Math.min(selecting.end.column, selecting.start.column);
        var endcolumn = Math.max(selecting.end.column, selecting.start.column);

        return {
            startrow: startrow,
            endrow: endrow,
            startcolumn: startcolumn,
            endcolumn: endcolumn
        }
    },
    onMouseupSelecting: function () {
        var me = this;
        if (me.commands && me.commands.first(function (x) { return x.command === 'select' }))
            return;
        me.endselect();
    },
    handleMouseMoveCell: function (evt) {
        var me = this;
        var minCellLeft = evt.cells.minSelect(function (x) { return x.row; });
        var maxCellLeft = evt.cells.maxSelection(function (x) { return x.row; });

        var minCellTop = evt.cells.minSelect(function (x) { return x.column });
        var maxCellTop = evt.cells.maxSelection(function (x) { return x.column; });

        var minCellLeftPosition = me.getCellPosition(minCellLeft);
        var maxCellLeftPosition = me.getCellPosition({ row: maxCellLeft.row, column: maxCellLeft.column + 1 });

        var minCellTopPosition = me.getCellPosition(minCellTop);
        var maxCellTopPosition = me.getCellPosition({ row: maxCellTop.row + 1, column: maxCellTop.column });

        me.setActiveCell(minCellLeftPosition.x, maxCellLeftPosition.x, minCellTopPosition.y, maxCellTopPosition.y);
    },
    handleMouseMoveHeaderCell: function (evt, header) {
        var me = this;
        var minCellLeft = evt.cells.minSelect(function (x) { return x.row; });
        var maxCellLeft = evt.cells.maxSelection(function (x) { return x.row; });

        var minCellTop = evt.cells.minSelect(function (x) { return x.column });
        var maxCellTop = evt.cells.maxSelection(function (x) { return x.column; });

        var minCellLeftPosition = me.getCellPosition(minCellLeft, header);
        var maxCellLeftPosition = me.getCellPosition({ row: maxCellLeft.row, column: maxCellLeft.column + 1 }, header);

        var minCellTopPosition = me.getCellPosition(minCellTop, header);
        var maxCellTopPosition = me.getCellPosition({ row: maxCellTop.row + 1, column: maxCellTop.column }, header);

        me.setActiveHeaderCell(minCellLeftPosition.x, maxCellLeftPosition.x, minCellTopPosition.y, maxCellTopPosition.y, header)
    },
    updateSelectedMouse: function () {
        var me = this;
        if (me.selectedrange) {
            me.handleMouseMoveCellSelect({ selecting: me.selectedrange });
        }
        if (me.selectedrangeleft) {

            me.handleHeaderMouseMoveCellSelect('left', { selecting: me.selectedrangeleft });
        }
        if (me.selectedrangetop) {
            me.handleHeaderMouseMoveCellSelect('top', { selecting: me.selectedrangetop });
        }
    },
    handleMouseMoveCellSelect: function (evt) {
        var me = this;
        if (evt.selecting) {
            var info = me.getSelectedStartRow(evt.selecting);
            if (info) {
                var minCellLeftPosition = me.getCellPosition({ row: info.startrow, column: info.startcolumn });
                var maxCellLeftPosition = me.getCellPosition({ row: info.startrow, column: info.endcolumn + 1 });

                var minCellTopPosition = me.getCellPosition({ row: info.startrow, column: info.endcolumn });
                var maxCellTopPosition = me.getCellPosition({ row: info.endrow + 1, column: info.endcolumn });

                me.setActiveSelect(minCellLeftPosition.x, maxCellLeftPosition.x, minCellTopPosition.y, maxCellTopPosition.y)
            }
        }
    },
    setHeaderActiveSelect: function (x1, x2, y1, y2, header) {
        var me = this,
            area = {
                x1: x1,
                x2: x2,
                y1: y1,
                y2: y2
            };
        var requestHeaderActiveSelectheader = 'requestHeaderActiveSelectArea' + header;
        if (me[requestHeaderActiveSelectheader] != null || me[requestHeaderActiveSelectheader] != undefined) {
            cancelAnimationFrame(me[requestHeaderActiveSelectheader]);
        }
        var activeareaheader = 'selectarea' + header;
        var activearea = 'selectArea' + header;

        me[requestHeaderActiveSelectheader] = requestAnimationFrame(function () {
            if (me[activeareaheader] && MEPH.equals(me[activeareaheader], area)) {
            }
            else if (arguments.length === 4) {
                me[activearea] = area;

                Style.top(me[activeareaheader], y1 + (header === 'left' ? me.getColumnHeaderHeight() : 0));
                Style.left(me[activeareaheader], x1 + (header === 'left' ? 0 : me.getRowsHeaderWidth()));
                Style.width(me[activeareaheader], x2 - x1);
                Style.height(me[activeareaheader], y2 - y1);
                me[activeareaheader].classList.add('active')
            }
            else {
                me[activeareaheader].classList.remove('active')
            }
            me['requestHeaderActiveSelect' + header] = null;
        }.bind(x1, x2, y1, y2))
    },
    setActiveHeaderCell: function (x1, x2, y1, y2, header) {
        var me = this,
            area = {
                x1: x1,
                x2: x2,
                y1: y1,
                y2: y2
            };
        var requestHeaderActiveSelectheader = 'requestHeaderActiveSelect' + header;
        if (me[requestHeaderActiveSelectheader] != null || me[requestHeaderActiveSelectheader] != undefined) {
            cancelAnimationFrame(me[requestHeaderActiveSelectheader]);
        }
        var activeareaheader = 'activearea' + header;
        var activearea = 'activeArea' + header;

        me[requestHeaderActiveSelectheader] = requestAnimationFrame(function () {
            if (me[activeareaheader] && MEPH.equals(me[activeareaheader], area)) {
            }
            else if (arguments.length === 4) {
                me[activearea] = area;

                Style.top(me[activeareaheader], y1 + (header === 'left' ? me.getColumnHeaderHeight() : 0));
                Style.left(me[activeareaheader], x1 + (header === 'left' ? 0 : me.getRowsHeaderWidth()));
                Style.width(me[activeareaheader], x2 - x1);
                Style.height(me[activeareaheader], y2 - y1);
                me[activeareaheader].classList.add('active')
            }
            else {
                me[activeareaheader].classList.remove('active')
            }
            me['requestHeaderActiveSelect' + header] = null;
        }.bind(x1, x2, y1, y2))
    },
    setActiveSelect: function (x1, x2, y1, y2) {
        var me = this,
            area = {
                x1: x1,
                x2: x2,
                y1: y1,
                y2: y2
            };
        if (me.requestActiveSelect != null) {
            cancelAnimationFrame(me.requestActiveSelect);
        }
        me.requestActiveSelect = requestAnimationFrame(function () {
            if (me.selectArea && MEPH.equals(me.selectArea, area)) {
            }
            else if (arguments.length === 4) {
                me.selectArea = area;

                Style.top(me.selectarea, y1 + me.getColumnHeaderHeight());
                Style.left(me.selectarea, x1 + me.getRowsHeaderWidth());
                Style.width(me.selectarea, x2 - x1);
                Style.height(me.selectarea, y2 - y1);
                me.selectarea.classList.add('active')
            }
            else {
                me.selectarea.classList.remove('active')
            }
            me.requestActiveSelect = null;
        }.bind(x1, x2, y1, y2))
    },
    setActiveCell: function (x1, x2, y1, y2) {
        var me = this, area = {
            x1: x1,
            x2: x2,
            y1: y1,
            y2: y2
        };

        if (me.requestActiveCell) {
            cancelAnimationFrame(me.requestActiveCell);
        }

        me.requestActiveCell = requestAnimationFrame(function () {
            if (me.activeArea && MEPH.equals(me.activeArea, area)) {
            } else if (arguments.length === 4) {
                me.activeArea = area;

                Style.top(me.activearea, y1 + me.getColumnHeaderHeight());
                Style.left(me.activearea, x1 + me.getRowsHeaderWidth());
                Style.width(me.activearea, x2 - x1);
                Style.height(me.activearea, y2 - y1);
                me.activearea.classList.add('active')
            }
            else {
                me.activearea.classList.remove('active')
            }
            me.requestActiveCell = null;
        }.bind(x1, x2, y1, y2))
    },
    handleSingleHeaderCellCalculations: function (canvas, evt, outevnt, offset) {
        var me = this;
        var cells = me.getHeaderCells(evt, offset);
        canvas.dispatchEvent(MEPH.createEvent(outevnt, {
            cells: cells,
            offset: offset
        }));
    },
    handleSingleCellCalculations: function (evt, outevnt) {
        var me = this;
        var cells = me.getCanvasCells(evt);
        me.hovercells = cells || me.hovercells;

        var pos = MEPH.util.Dom.getEventPositions(evt, me.canvas);
        outevnt = Array.isArray(outevnt) ? outevnt : [outevnt];
        pos = pos.first();
        outevnt.foreach(function (outevnt) {
            me.canvas.dispatchEvent(MEPH.createEvent(outevnt, {
                cells: cells,
                position: pos
            }));
        })

    },
    getHeaderCells: function (evt, offsets) {
        var me = this;
        var canvasPos = MEPH.util.Dom.getPosition(offsets === 'left' ? me.leftheader : me.topheader);
        var pos = MEPH.util.Dom.getEventPositions(evt, offsets === 'left' ? me.leftheader : me.topheader);
        var cells = me.calculateHeaderCells(pos, {
            x: 0,// me.getRowsHeaderWidth(),
            y: 0//me.getColumnHeaderHeight()
        }, offsets);
        return cells;
    },
    getCanvasCells: function (evt) {
        var me = this;
        var canvasPos = MEPH.util.Dom.getPosition(me.canvas);
        var pos = MEPH.util.Dom.getEventPositions(evt, me.canvas);
        var cells = me.calculateCells(pos, {
            x: 0,
            y: 0
        });
        return cells;
    },
    getCellPosition: function (cell, offset) {
        var me = this;
        var t = 0;
        var u = 0;
        t = me.getCellRowPosition(cell, offset);

        u = me.getCellColumnPosition(cell, offset);

        return {
            x: u,
            y: t
        }
    },
    getCellColumnPx: function (cell, offset) {
        var me = this;
        return me.getCellColumnPosition({ column: cell.column }, offset);
    },
    getCellColumnPosition: function (cell, offset) {
        var me = this,
            u = 0;
        if (offset == 'left') {
            me.columnHeaderOffsets.subset(me.startLeftColumn, cell.column).first(function (x) {
                u += x;
            });
        }
        else {
            if (me.columnPositions)
                return me.columnPositions[cell.column] - me.columnPositions[me.startColumn];
            me.columnOffsets.subset(me.startColumn, cell.column).first(function (x) {
                u += x;
            });
        }
        return u;
    },
    getCellRowPx: function (cell, offset) {
        var me = this;
        return me.getCellRowPosition({ row: cell.row }, offset);
    },
    getCellRowPosition: function (cell, offset) {
        var me = this;
        var t = 0;
        if (offset == 'top') {
            me.rowHeaderOffsets.subset(me.startTopRow, cell.row).first(function (x) {
                t += x;
            });
        }
        else {
            if (me.rowPositions)
                return me.rowPositions[cell.row] - me.rowPositions[me.startRow];
            me.rowOffsets.subset(me.startRow, cell.row).first(function (x) {
                t += x;
            });
        }
        return t;
    },
    getColumnWidth: function (col) {
        var me = this;
        return me.columnOffsets[col];
    },
    getRowHeight: function (row) {
        var me = this;
        return me.rowOffsets[row];
    },
    getColumnHeaderHeight: function () {
        var me = this;
        me.cache.columnHeaderHeight = me.cache.columnHeaderHeight || me.rowHeaderOffsets.summation(function (x, t) {
            return t += x;
        });
        return me.cache.columnHeaderHeight;
    },
    getRowsHeaderWidth: function () {
        var me = this;
        me.cache.rowHeaderWidth = me.cache.rowHeaderWidth || me.columnHeaderOffsets.summation(function (x, t) {
            return t += x;
        });
        return me.cache.rowHeaderWidth;
    },
    calculateHeaderCells: function (positions, relativePos, offset) {
        var me = this;
        var cells = positions.select(function (pos) {
            return {
                row: me.getRelativeRow(pos.y - relativePos.y, offset),
                column: me.getRelativeColum(pos.x - relativePos.x, offset),
            }
        });
        return cells;
    },
    calculateCells: function (positions, relativePos) {
        var me = this;
        var cells = positions.select(function (pos) {
            return {
                row: me.getRelativeRow(pos.y - relativePos.y),
                column: me.getRelativeColum(pos.x - relativePos.x),
            }
        });
        return cells;
    },
    setStartRow: function (percentage) {
        if (!isNaN(percentage)) {
            var me = this;
            me.startRow = me.setStart(percentage, me.rowOffsets, me.calculateVertical());
        }
    },
    setStart: function (percentage, offsets, vs) {
        if (!isNaN(percentage)) {
            var me = this;
            var voffset = vs * percentage;;
            var t = 0;
            var index = 0;
            offsets.first(function (x, i) {
                t += x;
                index = i;
                return t > voffset;
            });
            return index;
        }
    },
    setStartColumn: function (percentage) {
        if (!isNaN(percentage)) {
            var me = this;
            me.startColumn = me.setStart(percentage, me.columnOffsets, me.calculateHorizontal());
        }
    },
    getRelativeRow: function (relativeX, offset) {
        var me = this,
            startrow = me.startRow,
            offsets = me.rowPositions;
        switch (offset) {
            case 'top':
                offsets = me.rowHeaderPositions;
                break;
        }
        var visi = me.qvisible(relativeX, startrow, offsets, null, me.defaultRowHeight);

        return visi + me.startRow;
    },
    /**
     * Gets the column index, based on the relative distance.
     * @param {Number} relativeY
     * @param {String} offset
     * @return {Number}
     ***/
    getRelativeColum: function (relativeY, offset) {
        var me = this, columnwidth = me.defaultColumnWidth,
           offsets = me.columnPositions;
        switch (offset) {
            case 'left':
                columnwidth = me.defaultHeaderColumnWidth;
                offsets = me.columnHeaderPositions;
                break;
        }
        var visi = me.qvisible(relativeY, me.startColumn, offsets, null, columnwidth);

        return visi + me.startColumn;
    },
    calculateVertical: function () {
        var me = this;
        me.verticalSize = me.verticalSize || me.rowOffsets.summation(function (x, t) { return t += x; });
        return me.verticalSize;
    },
    calculateHorizontal: function () {
        var me = this;
        me.horizontalSize = me.horizontalSize || me.columnOffsets.summation(function (x, t) { return t += x; });
        return me.horizontalSize;
    },
    update: function () {
        var me = this;
        me.render();
        me.updateSelectedMouse();
        me.updateCells();
    },
    updateCells: function () {
        var me = this;
        if (!me.loaded) {
            return;
        }
        if (me.updateCellsAnimFrame !== null && me.updateCellsAnimFrame !== undefined) {
            cancelAnimationFrame(me.updateCellsAnimFrame);
        }
        me.updateCellsAnimFrame = requestAnimationFrame(function () {
            var headerInstructions = me.getTopHeaderInstructions(me.visibletopheader);
            if (headerInstructions) {
                me.topContentRenderer.clear();
                me.topContentRenderer.draw(headerInstructions);
            };
            headerInstructions = me.getLeftHeaderInstructions(me.visibleleftheader);
            if (headerInstructions) {
                me.leftContentRenderer.clear();
                me.leftContentRenderer.draw(headerInstructions);
            }
            headerInstructions = me.getMainContentInstructions(me.visiblegrid);
            if (headerInstructions) {
                if (me.enablesvg) {
                    me.svgrenderer.clear();
                    var res = me.svgrenderer.draw(headerInstructions);
                    res.foreach(function (item) {
                        me.dun(item.shape);
                        me.don('mouseover', item.shape, function (item) {
                            me.dispatchEvent('mouseoveritem', {
                                items: [item.options.relObj], header: null
                            }, me.canvas)
                        }.bind(me, item), item.shape);
                        //me.dispatchEvent('mouseoveritem', {
                        //    items: items, header: header
                        //}, canvas)
                    })
                }
                else {
                    me.rendererContent.clear();
                    me.rendererContent.draw(headerInstructions);
                }
            }
            me.updateCellsAnimFrame = null;
        });
    },
    drawContent: function (singleinstruction) {
        var me = this, headerInstructions;
        headerInstructions = me.getMainContentInstructions(me.visiblegrid) || [];
        if (me.enablesvg) {
            me.svgrenderer.clear();
            var res = me.svgrenderer.draw(headerInstructions);
            res.foreach(function (item) {
                me.dun(item.shape);
                me.don('mouseover', item.shape, function (item) {
                    me.dispatchEvent('mouseoveritem', {
                        items: [item.options.relObj], header: null
                    }, me.canvas)
                }.bind(me, item), item.shape);
            })
        }
        else {
            me.rendererContent.clear();
            me.rendererContent.draw(singleinstruction);
        }
    },
    getTopHeaderInstructions: function (visibleCellData) {
    },
    getLeftHeaderInstructions: function (visibleCellData) {
    },
    getMainContentInstructions: function (visibleCellData) {
    },
    render: function () {
        var me = this;
        if (!me.rowOffsets || !me.columnOffsets)
            return;
        if (me.animFrame !== null) {
            cancelAnimationFrame(me.animFrame);
        }
        me.animFrame = requestAnimationFrame(function () {
            var rows, columns, headers;

            if (!me.rendered) {
                me.renderer.setCanvas(me.canvas);
                me.leftRenderer.setCanvas(me.leftheader);
                me.topRenderer.setCanvas(me.topheader);
            }
            if (!me.body) return;
            me.lastCanvasSize = me.lastCanvasSize || {};
            var canvasheight = me.body.clientHeight;
            var canvaswidth = me.body.clientWidth;
            var leftcanvasWidth = me.getLeftCanvasWidth();
            var topcanvasHeight = me.getTopCanvasHeight();
            canvasheight -= topcanvasHeight;
            canvaswidth -= leftcanvasWidth;
            me.calculateVertical();
            me.calculateHorizontal();

            if (me.lastCanvasSize.height === canvasheight && me.lastCanvasSize.width === canvaswidth) {

            }
            else {

                me.positionCanvas(me.canvas, leftcanvasWidth, topcanvasHeight, canvaswidth, canvasheight);
                me.positionCanvas(me.canvascontent, leftcanvasWidth, topcanvasHeight, canvaswidth, canvasheight);
                me.positionCanvas(me.canvassvg, leftcanvasWidth, topcanvasHeight, canvaswidth, canvasheight);

                me.positionCanvas(me.leftheader, 0, topcanvasHeight, leftcanvasWidth, canvasheight);
                me.positionCanvas(me.leftheadercontent, 0, topcanvasHeight, leftcanvasWidth, canvasheight);

                me.positionCanvas(me.topheader, leftcanvasWidth, 0, canvaswidth, topcanvasHeight);
                me.positionCanvas(me.topheadercontent, leftcanvasWidth, 0, canvaswidth, topcanvasHeight);


                me.renderer.clear();
            }
            //row = me.height;
            //columns = me.width;
            //columnheaders = me.columnheaders;
            //rowheaders = me.rowheaders;
            var canceldraw = me.lastCanvasSize.height === canvasheight && me.lastCanvasSize.width === canvaswidth;
            me.drawGrid(canvasheight, canvaswidth, canceldraw);
            me.drawTopGrid(topcanvasHeight, canvaswidth, canceldraw);
            me.drawLeftGrid(canvasheight, leftcanvasWidth, canceldraw);
            me.lastCanvasSize = {
                height: canvasheight,
                width: canvaswidth
            }
            me.animFrame = null;
        });
    },
    positionCanvas: function (canvas, left, top, width, height) {
        Style.left(canvas, left);
        Style.top(canvas, top);
        Style.width(canvas, width);
        Style.height(canvas, height);
    },
    getLeftCanvasWidth: function () {
        var me = this;
        me.cache.leftcanvaswidth = me.cache.leftcanvaswidth || (me.columnHeaderOffsets ? me.columnHeaderOffsets.summation(function (i, total) {
            return total += i;
        }) : 0);
        return me.cache.leftcanvaswidth;
    },
    getTopCanvasHeight: function () {
        var me = this;
        me.cache.topcanvasheight = me.cache.topcanvasheight || (me.rowHeaderOffsets ? me.rowHeaderOffsets.summation(function (i, total) {
            return total += i;
        }) : 0);
        return me.cache.topcanvasheight;
    },
    drawTopGrid: function (height, width, canceldraw) {
        var me = this;
        me.visibletopheader = me.drawSubGrid(me.topheader, me.rowHeaderOffsets, me.columnOffsets, height, width, me.topRenderer, me.startTopRow, me.startColumn, canceldraw);
    },
    drawLeftGrid: function (height, width, canceldraw) {
        var me = this;
        me.visibleleftheader = me.drawSubGrid(me.leftheader, me.rowOffsets, me.columnHeaderOffsets, height, width, me.leftRenderer, me.startRow, me.startLeftColumn, canceldraw);
    },
    drawGrid: function (height, width, canceldraw) {
        var me = this;
        me.visiblegrid = me.drawSubGrid(me.canvas, me.rowOffsets, me.columnOffsets, height, width, me.renderer, me.startRow, me.startColumn, canceldraw);
    },
    rowDrawInstruction: function (row, width) {
        var me = this;
        return {
            shape: MEPH.util.Renderer.shapes.line,
            end: {
                x: width,
                y: row
            },
            start: {
                x: 0,
                y: row
            },
            strokeStyle: me.gridlinecolor
        }
    },
    columnDrawInstruction: function (col, height) {
        var me = this;
        return {
            shape: MEPH.util.Renderer.shapes.line,
            end: {
                x: col,
                y: height
            },
            start: {
                x: col,
                y: 0
            },
            strokeStyle: me.gridlinecolor
        };
    },
    drawSubGrid: function (canvas, rowOffsets, columnOffsets, height, width, renderer, startRow, startColumn, canceldraw) {
        var me = this;
        var row = 0;
        var rowDrawFunc = function (rowOffset) {
            var res = me.rowDrawInstruction(row, width);
            row += rowOffset;
            return res;
        };
        var col = 0;
        var colDrawFunc = function (columnOffset) {
            var res = me.columnDrawInstruction(col, height);
            col += columnOffset;
            return res;
        };
        var visRows = me.visibleRows(height, startRow)
        var drawInstructions = rowOffsets.subset(startRow, startRow + visRows + 1).select(rowDrawFunc).where();

        if (rowOffsets.length < startRow + visRows && !canceldraw) {
            drawInstructions = drawInstructions.concat([].interpolate(0, startRow + visRows - rowOffsets.length, function (x) {
                return me.defaultRowHeight;
            }).select(rowDrawFunc).where());
        }

        var visCols = me.visibleColumns(width, startColumn);
        if (!canceldraw) {
            drawInstructions = drawInstructions.concat(columnOffsets.subset(startColumn, startColumn + visCols + 1).select(colDrawFunc).where());
        }
        if (columnOffsets.length < startColumn + visCols && !canceldraw) {
            drawInstructions = drawInstructions.concat([].interpolate(0, startColumn + visCols - columnOffsets.length, function (x) {
                return me.defaultColumnWidth;
            }).select(colDrawFunc).where());
        }
        if (!canceldraw) {
            Style.height(canvas, height)
            Style.width(canvas, width);
            renderer.draw(drawInstructions);
        }
        return {
            visibleColumns: visCols,
            visibleRows: visRows,
            row: startRow,
            column: startColumn
        }
    },
    /**
     * Gets the number of visible columns.
     * @param {Number} width
     * @param {Number} start
     ****/
    visibleColumns: function (width, start) {
        var me = this;
        return me.qvisible(width, start, me.columnPositions, null, me.defaultColumnWidth);
    },
    /**
     * Gets the number of visible rows.
     * @param {Number} height
     * @param {Number} start
     ****/
    visibleRows: function (height, start) {
        var me = this;
        return me.qvisible(height, start, me.rowPositions, null, me.defaultRowHeight);
    },
    /**
     * Gets the number of visible parts from a set of offsets.
     * @param {Number} width
     * @param {Number} start
     * @param {Array} offsets
     * @param {Number} defaultWidth
     ***/
    //visible: function (width, start, offsets, defaultWidth) {
    //    var me = this;
    //    var columns = 0;
    //    var total = 0;
    //    var res = offsets.subset(start).first(function (x) {
    //        if (total + x < width) {
    //            columns++;
    //            total += x;
    //            return false;
    //        }
    //        return true;
    //    });

    //    if (total + defaultWidth < width) {
    //        columns += Math.ceil((width - total) / defaultWidth);
    //    }

    //    return columns;
    //},
    qvisible: function (width, start, offsets, end, defaultWidth, count, cstart) {
        var me = this, result;
        count = count || 0;
        cstart = cstart || start;

        end = end || (offsets.length - 1);
        var mid = Math.floor((end - cstart) / 2) + cstart;
        var tempWidth = offsets[mid] - offsets[start];
        if (count > 20) {
            debugger;
        }

        if ((Math.abs(end - cstart) <= 1)) {
            result = mid - start;
        }
        else if (tempWidth > width) {
            result = me.qvisible(width, start, offsets, mid, defaultWidth, count, cstart);
        }
        else {
            result = me.qvisible(width, start, offsets, end, defaultWidth, count, mid);
        }
        return result;
    },
    /**
     * Handles key presses.
     * @param {Object} evt
     **/
    onKeyPress: function (evt) {
        var me = this,
          key = MEPH.util.Dom.getCharCode(evt);
        if (me.commands) {
            var command = me.commands.first(function (x) {
                return x.key.toLowerCase() === String.fromCharCode(key).toLowerCase();
            });
            if (command) {
                switch (command.command) {
                    case 'select':
                        me.state === MEPH.table.SpreadSheet.states.Selecting ? me.endselect() : me.select();
                        break;
                    default:
                        if (command.function) {
                            command.function(evt);
                        }
                        break;
                }
            }
        }
    },
    select: function (evt) {
        var me = this;
        if (!me.state) {
            var cell = me.hovercells ? me.hovercells.first() || me.getCanvasCells(evt).first() : me.getCanvasCells(evt).first();
            me.selecting = {
                start: cell
            };
            document.body.classList.add('noselect');
            me.state = MEPH.table.SpreadSheet.states.Selecting;
            me.canvas.dispatchEvent(MEPH.createEvent('selectstart', {
                cell: cell
            }));
        }
    },
    endselect: function () {
        var me = this;
        if (me.state === MEPH.table.SpreadSheet.states.Selecting) {
            var selectedstartrow = me.getSelectedStartRow(me.selecting);
            me.selectedrange = MEPH.clone(me.selecting);
            if (me.selected) {
                me.selected.clear();
                if (selectedstartrow) {
                    [].interpolate(selectedstartrow.startrow, selectedstartrow.endrow + 1, function (x) {
                        [].interpolate(selectedstartrow.startcolumn, selectedstartrow.endcolumn + 1, function (y) {
                            me.selected.push({
                                row: x,
                                column: y
                            });
                        })
                    });
                }
            }
            me.selecting = null;
            me.state = null;
        }
    }
});﻿describe("MEPH/application/Application.spec.js", function () {

    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('application will load an application container', function (done) {
        //Arrange
        MEPH.define('MEPHTests.application.Application', {
            extend: 'MEPH.application.Application',
            applicationSelector: 'body'
        }).then(function ($class) {
            //Act
            var result = new $class(),
                dom;
            dom = result.getAppDom();
            //Assert
            expect(dom === document.body);
            MEPH.undefine('MEPHTests.application.Application');
            done();
        });
    });

    it('an application will have a activitycontroller', function (done) {
        //Arrange
        MEPH.define('MEPHTests.application.Application', {
            extend: 'MEPH.application.Application',
            applicationSelector: 'body'
        }).then(function ($class) {
            //Act
            var result = new $class();

            //Assert
            expect(result.getActivityController()).theTruth('The application doesnt have an activity controller');
            MEPH.undefine('MEPHTests.application.Application');
            done();
        }).catch(function () {
            MEPH.undefine('MEPHTests.application.Application');
            expect(new Error('Couldnt get the activity controller')).caught();
            done();
        });
    });

    it(' if an application has a homepage it will tell the activity controller to start it', function (done) {
        //Arrange
        MEPH.define('MEPHTests.application.Application', {
            extend: 'MEPH.application.Application',
            applicationSelector: 'body'
        }).then(function ($class) {
            //Act
            var result = new $class(),
                startedConfig;

            result.homeView = { viewId: 'MEPH001' };
            result.activityController = {
                startActivity: function (config) { startedConfig = config; }
            }

            return result.startHomePage().then(function () {;
                //Assert
                expect(startedConfig).theTruth('The application didnt start anything.');
                MEPH.undefine('MEPHTests.application.Application');
                done();
            });
        }).catch(function () {
            MEPH.undefine('MEPHTests.application.Application');
            expect(new Error('Couldnt get the activity controller')).caught();
            done();
        });
    });

    it('applications can create controls', function (done) {
        var dom;
        MEPH.define('MEPHTests.application.Application', {
            extend: 'MEPH.application.Application',
            applicationSelector: '.testapplication'
        }).then(function ($class) {
            //Act
            var application = new $class();
            dom = document.createElement('div');
            dom.classList.add('testapplication');
            document.body.appendChild(dom);

            return application.create('MEPHTests.helper.input.InputHelper')

        }).then(function (results) {
            expect(results).theTruth('nothing was returned, where is the control information');
            if (dom && dom.parentNode) {
                dom.parentNode.removeChild(dom);
            }
            MEPH.undefine('MEPHTests.application.Application');
            done();
        }).catch(function () {
            expect(new Error('something went wrong')).caught();
            MEPH.undefine('MEPHTests.application.Application');
            if (dom && dom.parentNode) {
                dom.parentNode.removeChild(dom);
            }
            done();
        });
    });

    it('when a control is added to the application an event will be fired', function (done) {
        var dom;
        MEPH.define('MEPHTests.application.Application', {
            extend: 'MEPH.application.Application',
            requires: ['MEPH.control.Control'],
            applicationSelector: '.testapplication'
        }).then(function ($class) {
            //Act
            var application = new $class(),
                instanceadded;
            application.on('instanceadded', function (type, control) {
                instanceadded = control;
            });
            application.addInstance(new MEPH.control.Control());

            expect(instanceadded).theTruth('instance was not added to the application');
            expect(instanceadded instanceof MEPH.control.Control).theTruth('the instance object was not a Control');
            MEPH.undefine('MEPHTests.application.Application');
            done();
        }).catch(function () {
            expect(new Error('something went wrong')).caught();
            MEPH.undefine('MEPHTests.application.Application');
            if (dom && dom.parentNode) {
                dom.parentNode.removeChild(dom);
            }
            done();
        });
    });

    it('when applications start they will retrieve all the application view objects', function (done) {
        //Arrange
        var div = document.createElement('div');
        div.setAttribute('meph-app', '');
        var input = document.createElement('m_input');
        div.appendChild(input);
        document.body.appendChild(div);
        MEPH.define('MEPHTests.application.Application', {
            extend: 'MEPH.application.Application',
            requires: ['MEPH.input.Input'],
            applicationSelector: '[meph-app]'
        }).then(function ($class) {
            //Act
            var application = new $class();
            application.start().then(function () {
                //Assert
                try {
                    expect(application.getAppViewObjects().length === 1).toBeTruthy();
                }
                finally {
                    div.parentNode.removeChild(div);
                    done();
                }
            })
        });
    });
    it('applications will add ioc configs to the IOC.Container', function (done) {
        //Arrange
        var div = document.createElement('div'),
            called;
        div.setAttribute('meph-app', '');
        document.body.appendChild(div);
        MEPH.define('MEPHTests.application.Application', {
            extend: 'MEPH.application.Application',
            requires: ['MEPH.Constants'],
            applicationSelector: '[meph-app]'
        }).then(function ($class) {
            //Act
            var application = new $class({
                ioc: {
                    service: {
                        type: 'servicetype',
                        config: 'config'
                    }
                }
            });

            application.start().then(function () {
                //Assert
                try {
                    called = true;
                    var service = MEPH.IOC.getServices().first(function (x) { return x.type === 'servicetype'; });
                    expect(service.name).theTruth('The service was not in the IOC');
                    MEPH.IOC.unregister('service');
                }
                finally {
                    div.parentNode.removeChild(div);
                    MEPH.undefine('MEPHTests.application.Application');
                    done();
                }
            });
            setTimeout(function () {
                if (!called) {
                    MEPH.undefine('MEPHTests.application.Application');
                    expect(false).theTruth('The application never raised an app ready event');
                    done();
                }
            }, 1000);
        });
    });

    it('application if there is a session manager, it will check if it requires a login', function (done) {
        //Arrange
        var div = document.createElement('div'),
            called;
        div.setAttribute('meph-app', '');
        document.body.appendChild(div);
        MEPH.define('MEPHTests.application.TestSessionManager', {
            extend: 'MEPH.application.Application',
            requires: ['MEPH.Constants', 'MEPHTests.session.TestSessionManager'],
            applicationSelector: '[meph-app]'
        }).then(function ($class) {
            //Act
            
            var application = new $class({
                ioc: {
                    sessionManager: {
                        type: 'MEPHTests.session.TestSessionManager',
                        config: {
                            loginRequired: true,
                            automaticLogin: true
                        }
                    }
                }
            });

            return application.start().then(function () {
                //Assert
                expect(MEPHTests.session.TestSessionManager.loggedin).theTruth('the test session manager should have automatically logged in');
            });
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            MEPH.IOC.clearServices();
            MEPHTests.session.TestSessionManager.loggedin = false;
            MEPH.undefine('MEPHTests.application.TestSessionManager');
            done();
        });
    });

    it('when an application is ready it will fire and app ready event', function (done) {
        //Arrange
        var div = document.createElement('div'),
            called;
        div.setAttribute('meph-app2', '');
        var input = document.createElement('m_input');
        div.appendChild(input);
        document.body.appendChild(div);
        MEPH.define('MEPHTests.application.Application', {
            extend: 'MEPH.application.Application',
            requires: ['MEPH.input.Input', 'MEPH.Constants'],
            applicationSelector: '[meph-app2]'
        }).then(function ($class) {
            //Act
            var application = new $class();
            application.on(MEPH.Constants.applicationReady, function () {
                called = true;
                expect(called).toBeTruthy();
                MEPH.undefine('MEPHTests.application.Application');
                done();
            });
            application.start().then(function () {
                //Assert
                try {
                    expect(application.getAppViewObjects().length === 1).toBeTruthy();
                }
                finally {
                    MEPH.undefine('MEPHTests.application.Application');
                    div.parentNode.removeChild(div);
                }
            });
            setTimeout(function () {
                if (!called) {
                    MEPH.undefine('MEPHTests.application.Application');
                    expect(false).theTruth('The application never raised an app ready event');
                    done();
                }
            }, 1000);
        });
    });
});﻿/// <reference path="../RecorderWorker.js" />
/*global MEPH*/

/**
* @class
*
* This is a convenient way of defining a visual selector.
*/
MEPH.define('MEPH.audio.view.VisualSelector', {
    alias: 'visualselector',
    extend: 'MEPH.audio.view.Visualizer',
    requires: ['MEPH.input.Range',
        'MEPH.util.Renderer',
        'MEPH.input.Dropdown',
        'MEPH.signalprocessing.SignalProcessor'],
    templates: true,
    properties: {
        stop: 100,
        maxCache: 20,
        position: 0,
        step: .0001,
        markBtnText: 'Mark',
        max: null,
        min: null,
        marks: null,
        offsetbtnheight: 19,
        windowpadding: 5,
        offsetstretchvertical: 4,
        stretchlinewidth: 3,
        marktype: 'default',
        stretchtype: 'stretchtype',
        windowingcolor:'#aa3939',
        markercolor: '#d9534f',
        markscolor: '#f0ad4e',
        markscolorbg: 'rgba(45, 64, 114, 0.5)',
        markerBtns: null,
        stretchControls: null,
        stretchcolor: '#f2f233',
        stretchmarks: null,
        stretchFlowState: '',
        beats: null,
        beatsPerMin: null,
        pitchShift: .5,
        pitchWindowSize: 1000,
        smallestStep: 0.0000001,
        silenceThreshold: 0,
        silenceTimeSticky: 0,
        silenceTimeThreshold: 0,
        renderer: null,
        stretchValue: 1,
        injectControls: {
            location: 'buttonpanel'
        },
        detectedPitch: null,
        $signalProcessor: null,
        markerrenderer: null
    },
    initialize: function () {
        var me = this;
        me.great()
        me.markerBtns = [];
        me.stretchControls = [];
        me.$signalProcessor = new SignalProcessor();;

        Observable.defineDependentProperty('silenceThresholdHeight', me, ['silenceThreshold'], me.calculateSilenceThreholdHeight.bind(me));
        me.on('altered', function (type, args) {
            if (args.path === 'marks') {
                if (me.marks) {
                    me.marks.onIf('changed', me.update.bind(me));
                }
                me.update();
            }
            if (args.path === 'stretchmarks') {
                if (me.stretchmarks) {
                    me.stretchmarks.onIf('changed', me.update.bind(me));
                }
                me.update();
            }

            if (args.path === 'vertical' || args.path === 'scrollMutiplier' || args.path === 'scrollleft') {
                me.update();
            }
        });
    },
    onLoaded: function () {
        var me = this;
        me.beats = MEPH.util.Observable.observable([].interpolate(35, 170, function (x) {
            return {
                name: x,
                value: x
            };
        }));
        me.beatsPerMin = 72;
        me.stretchFlowState = 'Start';
    },
    calculateSilenceThreholdHeight: function () {
        var me = this,
            height = me.height || 0,
            st = me.silenceThreshold || 0, stheight = height * st;

        Style.top(me.silenceThresholdDiv, (height / 2) - (stheight / 2));
        Style.height(me.silenceThresholdDiv, stheight);
        Style.width(me.silenceThresholdDiv, me.width);
        return stheight;
    },
    addMark: function () {
        var me = this,
            relativePosition = me.getCurrentPosition();
        var absPosition = me.getAbsoluteMarkPosition(relativePosition);
        me.$addMark(absPosition);

    },
    $addMark: function (pos) {
        var me = this;

        if (me.marks && !me.marks.some(function (x) {
             return x.position === pos;
        })) {
            me.marks.push({
                position: pos,
                type: me.marktype
            })
        }
    },
    addStretchMark: function () {
        var me = this,
            relativePosition = me.getCurrentPosition();
        var absPosition = me.getAbsoluteMarkPosition(relativePosition);
        if (me.stretchmarks && !me.stretchmarks.some(function (x) {
            return x.position === absPosition || (x.position < absPosition && x.targetposition > absPosition);
        })) {
            me.$addStretchMark(absPosition)
        }
    },
    $addStretchMark: function (position, targetposition) {
        var me = this;
        me.stretchmarks.push({
            position: position,
            targetposition: targetposition || 0,
            stretch: 0,
            type: me.stretchtype
        })
    },
    detectPitch: function () {
        var me = this, clip = me.getSelectedClip();
        if (clip) {
            var res = MEPH.audio.Audio.updatePitch(clip.buffer.buffer.getChannelData(0), me.source.buffer.buffer.sampleRate);
            me.detectedPitch = res;
        }
    },
    getSelectedClip: function () {
        var me = this,
            startstop = me.getStartEndPosition();
        if (startstop) {
            var start = startstop.start;
            var end = startstop.end;
            if (me.source) {
                var clip = me.getClip(me.source, start, end);
                return clip;
            }
        }
        return null;
    },
    getStartEndPosition: function () {
        var me = this,
         pixels = me.width;
        if (me.selectedRange) {
            var start = me.getAbsoluteMarkPosition(me.selectedRange.start / pixels) / me.source.buffer.buffer.sampleRate;
            var end = me.getAbsoluteMarkPosition((me.selectedRange.end) / pixels) / me.source.buffer.buffer.sampleRate;
            return {
                start: start,
                end: end
            }
        }
        return null;
    },
    detectPitches: function () {
        var me = this,
            startend = me.getStartEndPosition(),
            clip = me.getSelectedClip();
        if (clip) {
            var sampleRate = me.source.buffer.buffer.sampleRate;


            var res = MEPH.audio.Audio.detectPitches(clip.buffer.buffer.getChannelData(0), sampleRate, parseInt(me.pitchWindowSize));
            me.renderAreasOfInterest('pitches', res.select(function (x) {
                return {
                    start: x.start + startend.start * sampleRate,
                    key: x.key,
                    end: x.end + startend.start * sampleRate
                }
            }));
        }
    },
    detectSilence: function () {
        var me = this,
            startend = me.getStartEndPosition(),
            clip = me.getSelectedClip();

        if (clip) {
            var sampleRate = me.source.buffer.buffer.sampleRate;
            var res = MEPH.audio.Audio.detectSilence(clip.buffer.buffer.getChannelData(0), parseFloat(me.silenceThreshold), parseFloat(me.silenceTimeThreshold),
                parseFloat(me.silenceTimeSticky));
            me.renderAreasOfInterest('silence', res.select(function (x) {
                return {
                    start: x.start + startend.start * sampleRate,
                    end: x.end + startend.start * sampleRate
                }
            }));
        }
    },
    renderAreasOfInterest: function (type, areas) {
        var me = this,
            container = me.container,
            interestAreas = (me.$areasOfInterest || []).where(function (x) {
                if (type === undefined) return true;
                return x.type === type;
            });
        if (areas === undefined) {
            areas = (me.$areasOfInterest || []).select();
        }
        var newareas = areas.select(function (x) {
            var left = me.getRelativeMarkPosition(x.start);
            var right = me.getRelativeMarkPosition(x.end);
            if (right - left < 5) {
                return null;
            }
            var area = interestAreas.unshift(),
                div;

            if (area) {
                div = area.div;
            }

            div = div || document.createElement('div');
            Style.height(div, me.height);
            Style.absolute(div);
            Style.top(div, 0);
            div.classList.add('infoarea');
            div.classList.add('noresponse');
            if (type === 'pitches') {
                var h3 = document.createElement('h3');
                h3.innerHTML = x.key.note;
                div.appendChild(h3);
            }
            if (div.parentNode !== container)
                container.appendChild(div);
            Style.left(div, left);
            Style.width(div, right - left);
            return {
                div: div,
                start: x.start,
                type: type || x.type,
                end: x.end
            }
        }).where();
        interestAreas.foreach(function (t) {
            t.div.parentNode.removeChild(t.div);
        })

        me.$areasOfInterest = newareas;
    },
    addSelectionAsMarks: function () {
        var me = this, pixels = me.width;

        if (me.selectedRange) {
            var start = me.getAbsoluteMarkPosition(me.selectedRange.start / pixels);
            var end = me.getAbsoluteMarkPosition((me.selectedRange.end) / pixels);

            if (me.marks && !me.marks.some(function (x) {
           return x.position === start;
            })) {
                me.marks.push({
                    position: start,
                    type: me.marktype
                })
            }
            if (me.marks && !me.marks.some(function (x) {
          return x.position === end;
            })) {
                me.marks.push({
                    position: end,
                    type: me.marktype
                })
            }
        }
    },
    getAbsoluteMarkPosition: function (position) {
        var result,
            me = this,
            pixels = me.width,
            buffer = me.getBuffer();
        if (buffer) {
            var start = buffer.length * me.timeScroll;
            var length = (buffer.length * me.magnification);

            return (position * length) + start;
        }
    },
    shiftPitch: function () {
        var me = this;
        var sp = me.$signalProcessor;

        if (me.playingClip) {
            me.playingClip.stop();
            return;
        }
        var buffer = me.getBuffer();
        var audioresult = me.getSnippet();
        var inbucket;
        var outbucket;
        if (!audioresult) return;
        var audio = new MEPH.audio.Audio();
        audio.buffer(audioresult.buffer, { name: 'buffer' })
            .processor({
                name: 'proce',
                process: function (audioProcessingEvent) {
                    var inputBuffer = audioProcessingEvent.inputBuffer;
                    var inputData = audioProcessingEvent.inputBuffer.getChannelData(0);
                    var d = audioProcessingEvent.outputBuffer.getChannelData(0);
                    sp.pitchShift(parseFloat(me.pitchShift), inputData.length, inputData.length, 4, me.source.buffer.buffer.sampleRate, inputData, d);
                }
            })
            .complete();
        var snippet = audio.get({ name: 'buffer' });
        snippet.first().node.onended = function () {
            audio.disconnect();
            delete me.playingClip;
            delete audio;
            delete snippet.first().node;
        }
        me.playingClip = snippet.first().node;
        me.playingClip.start();

    },
    getSnippet: function () {
        var me = this,
           source = me.source,
           audio = new MEPH.audio.Audio(),
           magnification = parseFloat(me.magnification);
        if (me.source) {
            var start = me.getSnippetStart();
            var time = source.buffer.buffer.duration * magnification;
            var snippet = me.getClip(source, start, start + time);
            return snippet;
        }
        return null;
    },
    getSnippetStart: function () {
        var me = this, source = me.source,
           magnification = parseFloat(me.magnification),
           timeScroll = parseFloat(me.timeScroll);

        var start = timeScroll * source.buffer.buffer.duration;
        return start;
    },
    getClip: function (source, start, stop) {
        var snippet = MEPH.audio.Audio.clip(source, start, Math.min(source.buffer.buffer.duration, stop));
        return snippet;
    },
    playClip: function () {
        var me = this;
        if (me.playingClip) {
            me.playingClip.stop();
            return;
        }

        var snippet = me.getSnippet();;

        if (snippet) {
            snippet = me.$playSnippet(snippet);
        }

    },
    saveClip: function () {
        var me = this, snippet = me.getSnippet();

        if (!snippet) return;
        me.markCanvas.dispatchEvent(MEPH.createEvent('saveclip', {
            snippets: [snippet]
        }))
    },
    saveClips: function () {
        var me = this, source;
        if (!me.source) {
            return null;
        }
        source = me.source;
        var tmarks = me.marks.orderBy(function (x, y) {
            return x.position - y.position;
        });

        me.marks.length = 0;
        me.marks.push.apply(me.marks, tmarks);
        var res = me.marks.select(function (x, index) {
            if (index) {
                var mark = me.marks[index - 1];
                var end = me.marks[index] ? me.marks[index].position : source.buffer.buffer.length;
                var snippet = MEPH.audio.Audio.clipBuffer(me.source, mark.position, end);
                return snippet;
            }
            return false;
        }).where();

        if (res.length)
            me.markCanvas.dispatchEvent(MEPH.createEvent('saveclip', {
                snippets: res
            }))
    },
    cutSectionOut: function () {
        var me = this, pixels = me.width;
        if (me.selectedRange) {
            var start = me.getAbsoluteMarkPosition(me.selectedRange.start / pixels);
            var end = me.getAbsoluteMarkPosition((me.selectedRange.end) / pixels);
            if (end - start > 10) {
                var res = MEPH.audio.Audio.cutOutSection(me.source, start, end, null);
                me.source.buffer = res.buffer;
            }
        }
    },
    trimSection: function () {
        var me = this,
            pixels = me.width;
        if (me.selectedRange) {
            var start = me.getAbsoluteMarkPosition(me.selectedRange.start / pixels);
            var end = me.getAbsoluteMarkPosition((me.selectedRange.end) / pixels);
            console.log('start : ' + start + ' ' + ' end ' + end)
            if (end - start > 10) {
                me.marks.removeWhere(function (x) {
                    return x.position > end || x.position < start;
                });
                me.marks.where(function (x) {
                    return x.position < end && x.position > start;
                }).foreach(function (mark) {
                    mark.position -= start;
                })
                var res = MEPH.audio.Audio.clipBuffer(me.source, start, end, null);
                me.source.buffer = res.buffer;
            }
        }
    },
    $playSnippet: function (snippet) {
        var me = this;
        if (me.playingClip) {
            me.playingClip.stop();
        }
        if (snippet) {
            var audio = new MEPH.audio.Audio();
            audio.buffer(snippet.buffer.buffer, { name: 'buffer' }).gain({ name: 'gain', volume: 1 }).complete();
            var snippet = audio.get({ name: 'buffer' });
            snippet.first().node.onended = function () {
                audio.disconnect();
                if (me.getCurrentTime)
                    me.clipEnded = me.getCurrentTime();
                delete me.getCurrentTime;
                delete me.playingClip;
                delete audio;
                delete snippet.first().node;
            }
            me.playingClip = snippet.first().node;
            me.getCurrentTime = function () { return audio.getAudioContext().currentTime; }
            me.playingClip.start();
            me.startedTime = audio.getAudioContext().currentTime;

        }
        return snippet;
    },
    getRelativeMarkPosition: function (position) {
        var me = this,
            pixels = me.width,
            buffer = me.getBuffer();
        if (buffer) {
            var start = buffer.length * me.timeScroll;
            position -= start;
            var length = (buffer.length * me.magnification);
            position /= length;

            return (position) * pixels;
        }
    },
    getCurrentPosition: function () {
        var me = this;
        var position = parseFloat(me.position);
        var a = parseFloat(me.container.scrollLeft);
        var canvasWidth = parseFloat(me.canvas.clientWidth);
        var containerWidth = parseFloat(me.container.clientWidth);

        var windowWidth = Math.min(containerWidth, canvasWidth - a);
        var windowStep = windowWidth * position;

        return (windowStep + a) / canvasWidth
    },
    getMarkerPosition: function () {
        var me = this;
        var position = parseFloat(me.position);
        var a = parseFloat(me.container.scrollLeft);
        var canvasWidth = parseFloat(me.canvas.clientWidth);
        var containerWidth = parseFloat(me.container.clientWidth);

        var windowWidth = Math.min(containerWidth, canvasWidth - a);
        var windowStep = windowWidth * position;

        return (windowStep + a);
    },
    scanToMark: function (dir) {
        var me = this, buffer = me.getBuffer();
        if (buffer) {
            if (me.$currentMark === undefined) {
                var mark = me.marks.first();
                if (mark) {
                    me.timeScroll = mark.position / buffer.length;
                    me.$currentMark = 0;
                }
            }
            else {
                me.$currentMark = (me.$currentMark + parseInt(dir));
                if (me.$currentMark === me.marks.length) me.$currentMark = -1;
                if (me.$currentMark < -1) me.$currentMark = me.marks.length - 1;
                if (me.$currentMark === -1) {
                    me.timeScroll = 0;
                    return;
                }
                me.$currentMark = me.$currentMark % me.marks.length
                var position = me.marks[me.$currentMark].position;
                me.timeScroll = position / buffer.length;

            }
        }
    },
    updateStretchControls: function () {
        var me = this;
        if (me.stretchmarks) {
            var removed = me.stretchControls.removeWhere(function (btnObject) {
                return !me.stretchmarks.some(function (x) { return x === btnObject.marker; });
            });
            removed.foreach(function (control) {
                if (control.destroy) {
                    control.destroy();
                }
            });
            var newmarks = me.stretchmarks.where(function (x) {
                return !me.stretchControls.some(function (t) { return t.marker === x; })
            });

            var newmarkObjects = me.createNewStretchMarkerControls(newmarks);
            me.stretchControls.push.apply(me.stretchControls, newmarkObjects);
            me.stretchControls.foreach(function (x) {
                me.positionStretchControls(x);
            });
        }
    },
    updateMarkBtns: function () {
        var me = this;
        if (me.marks) {
            var removed = me.markerBtns.removeWhere(function (btnObject) {
                return !me.marks.some(function (x) { return x === btnObject.marker });
            });
            removed.foreach(function (x) {
                x.dom.parentNode.removeChild(x.dom);
            });
            var newmarks = me.marks.where(function (x) {
                return !me.markerBtns.some(function (t) { return t.marker === x; });
            });

            var newmarksObjects = me.createNewMarkerBtns(newmarks);
            me.markerBtns.push.apply(me.markerBtns, newmarksObjects);

            me.markerBtns.foreach(function (x) {
                var rel = me.getRelativeMarkPosition(x.marker.position, me.magnification, me.timeScroll);
                x.dom.style.left = (rel) + 'px';
                x.dom.style.top = (me.height - me.offsetbtnheight) + 'px';
            })
            //
        }
    },
    getBufferSampleRate: function () {
        var me = this, buffer = me.getBuffer();
        if (buffer)
            return me.source.buffer.buffer.sampleRate;
        return null;
    },
    getBufferLength: function () {
        var me = this, buffer = me.getBuffer();

        if (buffer) {
            return buffer.length;
        }
        return null;
    },
    createStretchPointFlow: function () {
        var me = this;

        if (!me.stretchPointFlowState) {
            me.stretchFlowState = 'Mark Start';
            me.playClip();
            me.stretchPointFlowState = {
                state: true,
                started: me.getCurrentTime()
            }
        }
        else if (me.stretchPointFlowState.state && me.getCurrentTime) {
            me.stretchPointFlowState.start = me.getCurrentTime();
            me.stretchPointFlowState.state = false;
            me.stretchFlowState = 'Mark End';
        }
        else if (!me.stretchPointFlowState.state) {
            if (me.getCurrentTime) {
                me.stretchPointFlowState.end = me.getCurrentTime();
            }
            else me.stretchPointFlowState.end = me.clipEnded;
            var samplerate = me.getBufferSampleRate();
            var start = me.getSnippetStart() + samplerate * (me.stretchPointFlowState.start - me.stretchPointFlowState.started);
            var end = me.getSnippetStart() + samplerate * (me.stretchPointFlowState.end - me.stretchPointFlowState.started);

            if (me.playingClip) {
                me.playingClip.stop();
            }
            me.$addStretchMark(start, end - start);
            me.stretchFlowState = '';
            me.stretchPointFlowState = null;
        }

    },
    getWindowfunctions: function () {
        var me = this;
        var res = [];
        for (var i in MEPH.math.Util.window) {
            res.push({ name: i, value: i })
        }

        return res;
    },
    createNewStretchMarkerControls: function (stretchmarks) {
        var me = this;
        return stretchmarks.select(function (x, index) {
            var stretchtemplate = me.createStretchMark();
            var anchorbtn = stretchtemplate.querySelector('[anchorbtn]');
            var targetbtn = stretchtemplate.querySelector('[targetbtn]');
            var stretchselect = stretchtemplate.querySelector('[stretchselect]');
            var stretchcontrol = stretchtemplate.querySelector('[stretchcontrol]');
            var stretchvalue = stretchtemplate.querySelector('[stretchvalue]');
            var removebtn = stretchtemplate.querySelector('[removebtn]');
            var stretchbeattarget = stretchtemplate.querySelector('[stretchbeattarget]');
            var stretchactualbeattarget = stretchtemplate.querySelector('[stretchactualbeattarget]');
            var addanchormarker = stretchtemplate.querySelector('[addanchormarker]');
            var addtargetmarker = stretchtemplate.querySelector('[addtargetmarker]');
            var stretchandplay = stretchtemplate.querySelector('[stretchandplay]');
            var normalplaybtn = stretchtemplate.querySelector('[normalplaybtn]');
            var windowfunction = stretchtemplate.querySelector('[windowfunction]');
            var saveclip = stretchtemplate.querySelector('[saveclip]');
            var savestretchclip = stretchtemplate.querySelector('[savestretchclip]');
            var windowfunctionspread = stretchtemplate.querySelector('[windowfunctionspread]');
            var notes = [{
                name: 'Sixteenth note', value: .25
            }, {
                name: 'Eighth note', value: .5
            }, {
                name: 'Quarter note', value: 1
            }, {
                name: 'Half note', value: 2
            }, {
                name: 'Whole note', value: 4
            }, {
                name: '2 Whole', value: 8
            }, {
                name: '4 Whole', value: 16
            }, {
                name: '8 Whole', value: 32
            }, {
                name: '16 Whole', value: 64
            }, {
                name: '32 Whole', value: 128
            }, {
                name: '64 Whole', value: 256
            }];

            notes.foreach(function (note) {
                MEPH.util.Dom.addOption(note.name, note.value, stretchbeattarget);
                MEPH.util.Dom.addOption(note.name, note.value, stretchactualbeattarget);
            });

            me.getWindowfunctions().foreach(function (x) {
                MEPH.util.Dom.addOption(x.name, x.value, windowfunction);
            });

            var control = {
                marker: x,
                dom: stretchtemplate,
                targetbtn: targetbtn,
                anchorbtn: anchorbtn,
                destroy: function () {
                }
            }
            var getwidth = function (bpm, val, samplerate) {
                return 1 / (bpm / 60) * val * samplerate;
            }
            stretchvalue.innerHTML = Math.round(100 * parseFloat(control.marker.stretch)) / 100;
            me.don('change', stretchbeattarget, function (control) {
                var val = parseFloat(stretchbeattarget.value);
                var bpm = parseFloat(me.beatsPerMin);
                if (bpm && me.source && me.source.buffer) {
                    var samplerate = me.source.buffer.buffer.sampleRate;
                    //60 / me.smallestnote / me.beatspermin;
                    var desiredwidth = getwidth(bpm, val, samplerate);;
                    var stretch = desiredwidth / control.marker.targetposition;
                    control.marker.stretch = stretch;
                    me.update();
                }
            }.bind(me, control));
            me.don('change', windowfunction, function (control) {
                var wf = windowfunction.value;
                if (MEPH.math.Util.window[wf]) {
                    control.marker.windowFunc = wf;
                    me.update();
                }
            }.bind(me, control));
            me.don('change', windowfunctionspread, function (control) {
                if (MEPH.math.Util.window[control.marker.windowFunc]) {
                    var wfv = parseFloat(windowfunctionspread.value);
                    control.marker.windowFuncValue = wfv;
                    me.update();
                }
            }.bind(me, control))
            me.don('change', stretchactualbeattarget, function (control) {
                var val = parseFloat(stretchactualbeattarget.value);
                var bpm = parseFloat(me.beatsPerMin);
                if (bpm && me.source && me.source.buffer) {
                    var samplerate = me.source.buffer.buffer.sampleRate;
                    var desiredwidth = getwidth(bpm, val, samplerate);
                    control.marker.targetposition = desiredwidth;
                    me.update();
                }
            }.bind(me, control))
            me.don('click', saveclip, function (control) {
                var sampleRate = me.getBufferSampleRate();
                var windowing = control.marker.windowFunc ? me.createWindow(control.marker.targetposition, control.marker.windowFunc, control.marker.windowFuncValue) : null;
                var snippet = MEPH.audio.Audio.clipBuffer(me.source, control.marker.position, control.marker.position + control.marker.targetposition, null, windowing);
                var signal = snippet.buffer.buffer.getChannelData(0);
                var audio = new MEPH.audio.Audio();
                var audioresult = audio.copyToBuffer(snippet, 0, signal.length / sampleRate);
                me.markCanvas.dispatchEvent(MEPH.createEvent('saveclip', {
                    snippets: [snippet]
                }))
            }.bind(me, control))
            me.don('click', normalplaybtn, function (control) {
                var sampleRate = me.getBufferSampleRate();

                var snippet = MEPH.audio.Audio.clipBuffer(me.source, control.marker.position, control.marker.position + control.marker.targetposition);
                var signal = snippet.buffer.buffer.getChannelData(0);

                var audio = new MEPH.audio.Audio();
                var audioresult = audio.copyToBuffer(snippet, 0, signal.length / sampleRate);
                me.$playSnippet(audioresult)

            }.bind(me, control));
            me.don('click', savestretchclip, function (control) {
                var sampleRate = me.getBufferSampleRate();
                var item = me.getCache({
                    sampleRate: sampleRate,
                    position: control.marker.position,
                    targetposition: control.marker.targetposition,
                    stretch: control.marker.stretch
                })
                if (item) {
                    var windowing = control.marker.windowFunc ? me.createWindow(control.marker.targetposition, control.marker.windowFunc, control.marker.windowFuncValue) : null;
                    var snippet = MEPH.audio.Audio.clipBuffer(me.getResource(item.resource, item.sampleRate), 0, item.resource.length, null, windowing);
                    var signal = snippet.buffer.buffer.getChannelData(0);
                    var audio = new MEPH.audio.Audio();
                    var audioresult = audio.copyToBuffer(snippet, 0, signal.length / sampleRate);
                    //var snippet = audio.copyToBuffer(me.getResource(item.resource, item.sampleRate), 0, item.resource.length / item.sampleRate);
                    me.markCanvas.dispatchEvent(MEPH.createEvent('saveclip', {
                        snippets: [audioresult]
                    }))
                }
            }.bind(me, control))
            me.don('click', stretchandplay, function (control) {
                var audio = new MEPH.audio.Audio();
                var sampleRate = me.getBufferSampleRate();
                var item = me.getCache({
                    sampleRate: sampleRate,
                    position: control.marker.position,
                    targetposition: control.marker.targetposition,
                    stretch: control.marker.stretch
                })
                if (item) {
                    var audioresult = audio.copyToBuffer(me.getResource(item.resource, item.sampleRate), 0, item.resource.length / item.sampleRate);
                    me.$playSnippet(audioresult);
                    return;
                }
                var snippet = MEPH.audio.Audio.clipBuffer(me.source, control.marker.position, control.marker.position + control.marker.targetposition);
                var signal = snippet.buffer.buffer.getChannelData(0);
                var sp = me.$signalProcessor;
                var sres = sp.modifySignal(1, [{ start: 0, scale: 0 }, { start: 1, scale: control.marker.stretch || 1 }], 4096, 8, sampleRate, signal);


                var audioresult = audio.copyToBuffer(me.getResource(sres, sampleRate), 0, sres.length / sampleRate);
                me.cacheAudio({
                    resource: sres,
                    sampleRate: sampleRate,
                    position: control.marker.position,
                    targetposition: control.marker.targetposition,
                    stretch: control.marker.stretch
                })
                me.$playSnippet(audioresult);
            }.bind(me, control));
            me.don('click', addanchormarker, function (control) {
                me.$addMark(control.marker.position);
            }.bind(me, control));

            me.don('click', addtargetmarker, function (control) {
                me.$addMark(control.marker.position + control.marker.targetposition);
            }.bind(me, control));

            me.don('click', removebtn, function (control) {
                me.stretchmarks.removeWhere(function (x) { return x === control.marker })
                stretchtemplate.parentNode.removeChild(stretchtemplate);
                me.update();
            }.bind(me, control))
            me.don('mouseover', stretchtemplate, function () {
                Style.show(stretchcontrol);
            });
            me.don('mouseout', stretchtemplate, function () {
                Style.hide(stretchcontrol);
            });
            me.don('change', stretchselect, function (control) {
                stretchvalue.innerHTML = Math.round(100 * parseFloat(stretchselect.value)) / 100;
                control.marker.stretch = parseFloat(stretchselect.value);
                me.update();
            }.bind(me, control));
            me.don('click', anchorbtn, function (x) {
                me.toggleStretchMarkerDrag(x, 'dom');
            }.bind(me, control));

            me.don('click', targetbtn, function (x) {
                me.toggleStretchMarkerDrag(x, 'targetbtn');
            }.bind(me, control));


            return control;
        })
    },
    cacheAudio: function (item) {
        var me = this;
        me.$audioCache = me.$audioCache || [];

        me.$audioCache.push(item);

        if (me.$audioCache.length > me.maxCache) {
            me.$audioCache = me.$audioCache.subset(me.maxCache - me.$audioCache.length);
        }
    },
    getCache: function (item) {
        var me = this;
        me.$audioCache = me.$audioCache || [];

        return me.$audioCache.first(function (it) {
            for (var i in item) {
                if (item[i] !== it[i]) {
                    return false
                }
            }
            return true;
        })
    },
    toggleStretchMarkerDrag: function (x, target) {
        var me = this;
        if (!me.stretchdrag) {
            me.stretchdrag = {
                marker: x.marker,
                target: target,
                callback: function () {
                    me.positionStretchControls(x);
                    me.update()
                }
            }
        }
        else {
            me.stretchdrag = false;
        }
    },
    onMouseMove: function () {
        var me = this, pos;
        if (me.stretchdrag) {
            pos = MEPH.util.Dom.getEventPositions(MEPH.Array(arguments).last().domEvent).first();
            if (pos) {
                pos.x += -50;
                var abspos = me.getAbsoluteMarkPosition(pos.x / me.width);
                switch (me.stretchdrag.target) {
                    case 'targetbtn':
                        me.stretchdrag.marker.targetposition = abspos - me.stretchdrag.marker.position;
                        break;
                    default:
                        me.stretchdrag.marker.position = abspos;
                        break;

                }
                me.stretchdrag.callback();
            }
        }
        else {
            me.great()
        }
    },

    getResource: function (result, sampleRate) {
        sampleRate = sampleRate || 44100
        var resource = {
            buffer: {
                buffer: {
                    getChannelData: function () {
                        return result;
                    },
                    sampleRate: sampleRate
                },
                channelCount: 1
            }
        };
        return resource;
    },
    positionStretchControls: function (control) {
        var me = this;
        var rel = me.getRelativeMarkPosition(control.marker.position);

        var targetrel = me.getRelativeMarkPosition(control.marker.position + control.marker.targetposition);

        control.dom.style.left = (rel) + 'px';
        control.dom.style.top = (me.offsetstretchvertical) + 'px';
        Style.top(control.targetbtn, (0));
        Style.left(control.targetbtn, (targetrel - rel));
    },

    createNewMarkerBtns: function (newmarks) {
        var me = this;
        return newmarks.select(function (x, index) {
            var btntemplate = me.createMarkerBtn();
            var btn = btntemplate.querySelector('[removebtn]');
            me.don('click', btn, function (x) {
                me.marks.removeWhere(function (y) { return y === x; });
            }.bind(me, x));

            me.don('click', btntemplate.querySelector('[playbtn]'), function (x) {
                console.log('play snippet')
                me.playSnippet(x);
            }.bind(me, x))

            return {
                marker: x,
                dom: btntemplate
            }
        })
    },
    /**
     * Plays the snippet.
     * @param {Object} percentage
     ***/
    playSnippet: function (mark) {
        var me = this;
        var tmarks = me.marks.orderBy(function (x, y) {
            return x.position - y.position;
        });
        me.marks.length = 0;
        me.marks.push.apply(me.marks, tmarks);
        var index = me.marks.indexWhere(function (x) {
            return x.position === mark.position;
        }).first();
        if (index !== null) {
            var end = me.marks[index + 1] ? me.marks[index + 1].position : me.source.buffer.buffer.length;
            var snippet = MEPH.audio.Audio.clipBuffer(me.source, mark.position, end);
            me.$playSnippet(snippet)
        }
    },
    createMarkerBtn: function () {
        var me = this;
        var clone = me.markerBtnTemplate.cloneNode(true);
        me.markerCanvas.parentNode.appendChild(clone);
        return clone;
    },
    createStretchMark: function () {
        var me = this;
        var clone = me.stretchMarkTemplate.cloneNode(true);
        me.stretcherCanvas.parentNode.appendChild(clone);
        return clone;
    },
    update: function () {
        var me = this;
        return Promise.resolve().then(function () {
            me.updateMarkBtns();
            me.updateStretchControls();
        }).then(function () {
            return me.updateMarks()
        }).then(function () {
            return me.updateMarker();
        }).then(function () {
            return me.updateStretcher();
        }).then(function () {
            me.draw();
        }).then(function () {
            me.renderAreasOfInterest();
        });
    },
    updateBpm: function () {
        var me = this;
        if (me.source) {
            MEPH.audio.Audio.bpm(me.source.buffer).then(function (res) {
                if (res && res.length) {
                    var bpm = res.subset(0, 4)
                        .orderBy(function (x, y) {
                            return y.count - x.count;
                        })
                        .select(function (x, index) {
                            return 'Tempo :' + x.tempo + '(Score:' + x.count + ')  ';
                        }).join('|');
                    setTimeout(function () {
                        me.calculatedBpm = bpm;
                    }, 10)
                }
            }).catch(function (e) {
                MEPH.Log(e);
            });
        }
    },
    updateMarks: function () {
        var me = this;


        return me.render();
    },
    updateStretcher: function () {
        var me = this;
        if (me.stretcherFrame)
            cancelAnimationFrame(me.stretcherFrame);
        if (me.stretcherrenderer) {
            me.stretcherrenderer.clear();
        }
        me.stretcherFrame = requestAnimationFrame(function () {
            me.stretcherFrame = null;
            var HEIGHT = me.height;
            var WIDTH = me.width;
            if (!me.stretcherrenderer) {
                me.stretcherrenderer = new MEPH.util.Renderer();
                me.stretcherrenderer.setCanvas(me.stretcherCanvas);
            }

            me.stretcherrenderer.clear();
            if (me.stretchmarks) {
                var lines = me.stretchmarks.concatFluent(function (x) {
                    var xpos = me.getRelativeMarkPosition(x.position);
                    var xtpos = me.getRelativeMarkPosition(x.position + x.targetposition);
                    var diffx = x.targetposition;
                    var targetxpos = me.getRelativeMarkPosition(x.position + diffx * (x.stretch || 1));

                    var res = [{
                        shape: MEPH.util.Renderer.shapes.polygon,
                        lb: {
                            x: xpos,
                            y: HEIGHT / 2
                        },
                        rb: {
                            x: xtpos,
                            y: HEIGHT / 2
                        },
                        rt: {
                            x: targetxpos,
                            y: me.offsetstretchvertical
                        },
                        lt: {
                            x: xpos,
                            y: me.offsetstretchvertical
                        },
                        fillStyle: me.markscolorbg
                    }, {
                        shape: MEPH.util.Renderer.shapes.line,
                        lineWidth: me.stretchlinewidth,
                        end: {
                            x: xtpos,
                            y: HEIGHT / 2
                        },
                        start: {
                            x: targetxpos,
                            y: me.offsetstretchvertical
                        },
                        strokeStyle: me.markscolor
                    }, {// 
                        shape: MEPH.util.Renderer.shapes.line,
                        lineWidth: me.stretchlinewidth,
                        end: {
                            x: xpos,
                            y: HEIGHT / 2
                        },
                        start: {
                            x: xpos,
                            y: me.offsetstretchvertical
                        },
                        strokeStyle: me.markscolor
                    }];
                    if (x.windowFunc) {
                        var width = Math.floor(xtpos - xpos);
                        var blocksize = 4;
                        var blockspace = 10;
                        var N = (width / blockspace);
                        //var wfv = x.windowFuncValue * N || 0;
                        //var hwfv = wfv / 2 + N / 2;
                        //var lwfv = N / 2 - wfv / 2;
                        //[].interpolate(0, N, function (n) {
                        //    var r = MEPH.math.Util.window[x.windowFunc](n, N);
                        //    if (hwfv > n && lwfv < n) {
                        //        r = 1;
                        //    }
                        //    else {
                        //        if (n < lwfv) {
                        //            r = MEPH.math.Util.window[x.windowFunc](n, N - wfv);
                        //        }
                        //        else
                        //            r = MEPH.math.Util.window[x.windowFunc](n - wfv, N - wfv);
                        //    }
                        //    return r;
                        //})
                        me.createWindow(N, x.windowFunc, x.windowFuncValue)
                            .select(function (r, n) {
                                return {
                                    shape: MEPH.util.Renderer.shapes.circle,
                                    lineWidth: me.stretchlinewidth,
                                    y: HEIGHT / 2 - HEIGHT / 2 * r + (me.windowpadding || 0),
                                    x: n * blockspace + xpos,
                                    fillStyle: me.windowingcolor,
                                    radius: blocksize
                                }
                            }).foreach(function (t) { res.push(t) });
                    }
                    return res;
                });
                me.renderer.draw(lines);
            }
            rsolve();
        });
        var rsolve;
        return new Promise(function (r) {
            rsolve = r;
        });
    },
    createWindow: function (N, wf, wfv) {
        wfv = wfv * N || 0;
        var hwfv = wfv / 2 + N / 2;
        var lwfv = N / 2 - wfv / 2;
        return [].interpolate(0, N, function (n) {
            var r = MEPH.math.Util.window[wf](n, N);
            if (hwfv > n && lwfv < n) {
                r = 1;
            }
            else {
                if (n < lwfv) {
                    r = MEPH.math.Util.window[wf](n, N - wfv);
                }
                else
                    r = MEPH.math.Util.window[wf](n - wfv, N - wfv);
            }
            return r;
        });
    },
    updateMarker: function () {
        var me = this;
        if (me.markerFrame)
            cancelAnimationFrame(me.markerFrame)
        me.markerFrame = requestAnimationFrame(function () {
            var HEIGHT = me.height;
            var WIDTH = me.width;
            me.markerFrame = null;

            if (!me.markerrenderer) {
                me.markerrenderer = new MEPH.util.Renderer();
                me.markerrenderer.setCanvas(me.markerCanvas);
            }
            me.markerrenderer.clear();
            var xpos = me.getMarkerPosition();
            me.markerrenderer.draw({
                shape: MEPH.util.Renderer.shapes.line,
                end: {
                    x: xpos,
                    y: HEIGHT
                },
                start: {
                    x: xpos,
                    y: 0
                },
                strokeStyle: me.markercolor
            });
            rsolve();
        });
        var rsolve;
        return new Promise(function (r) {
            rsolve = r;
        });
    },
    stectchClip: function () {
        var me = this,
            source = me.source,
            stretchvalue = parseFloat(me.stretchValue) || 1;
        if (source) {
            me.source = MEPH.audio.Audio.stretch(source, stretchvalue);
        }
    },
    render: function () {
        var me = this;
        if (me.markframe)
            cancelAnimationFrame(me.markframe)
        me.markframe = requestAnimationFrame(function () {
            var HEIGHT = me.height;
            var WIDTH = me.width;
            var dataArray = me.source;
            me.markframe = null;

            if (!me.renderer) {
                me.renderer = new MEPH.util.Renderer();
                me.renderer.setCanvas(me.markCanvas);
            }


            me.renderer.clear();
            if (me.marks) {
                var lines = me.marks.select(function (x) {
                    var xpos = me.getRelativeMarkPosition(x.position, me.magnification, me.timeScroll);
                    return {
                        shape: MEPH.util.Renderer.shapes.line,
                        end: {
                            x: xpos,
                            y: HEIGHT
                        },
                        start: {
                            x: xpos,
                            y: 0
                        },
                        strokeStyle: me.markscolor
                    }
                });
                me.renderer.draw(lines);
            }
            rsolve();
        });
        var rsolve;
        return new Promise(function (r) {
            rsolve = r;
        });
    }
});﻿/**
 * @class MEPH.field.FormField
 * @extends MEPH.control.Control
 * Standard form for a input field.
 **/
MEPH.define('MEPH.file.Dropbox', {
    alias: 'dropbox',
    templates: true,
    extend: 'MEPH.control.Control',
    requires: [],
    properties: {
        hoverCls: '',
        dragovercssclass: 'hover',
        /**
         * @property {String} cls
         * CSS class to apply for this node.
         */
        cls: '',

        baseCls: 'dropbox',

        dragoutcssclass: '',
        /**
          * Files of the input field
          */
        files: null,

    },
    initialize: function () {
        var me = this;
        me.callParent.apply(me, arguments);
        me.addTransferables();
        me.defineDependentProperties();
    },
    fileDrop: function () {
        var args = arguments;
        var evntArgs = MEPH.util.Array.convert(args).last();
        var me = this;

        me.getDomTemplate().first().dispatchEvent(MEPH.createEvent('filesdropped', {
            files: evntArgs.domEvent.dataTransfer.files
        }));

    },
    /**
     * @private
     * Adds transferable properties.
     **/

    addTransferables: function () {
        var me = this, properties = MEPH.Array(['componentCls', 'files']);

        properties.foreach(function (prop) {
            me.addTransferableAttribute(prop, {
                object: me,
                path: prop
            });
        });

    },

    defineDependentProperties: function () {
        var me = this;
        me.combineClsIntoDepenendProperty('dropboxCls', ['componentCls', 'hoverCls', 'cls', 'baseCls']);
    },
});﻿/*global MEPH*/

/**
* @class MEPH.input.Dropdown
* @extends MEPH.field.FormField
* This is a convenient way of defining an input control
* color css selector when using the MEPH.iconfont.IconFont#color selector syntax.
*/
MEPH.define('MEPH.input.Dropdown', {
    alias: 'dropdown',
    extend: 'MEPH.field.FormField',
    requires: ['MEPH.util.Dom'],
    templates: true,
    properties: {
        source: null,
        labelfield: 'label',
        valuefield: 'value'
    },
    initialize: function () {
        var me = this;

        me.callParent.apply(me, arguments);
        me.on('altered', me.onAltered.bind(me));
    },
    onAltered: function (type, args) {
        var me = this;
        if (args.path === 'source' || args.property === 'source') {
            if (args && args.old && args.old.un)
                args.old.un(args.old);

            if (me.source && me.source.isObservable) {
                me.source.on('changed', function () {
                    me.updateselectDom();
                }, me.source);
            }

            me.updateselectDom();
        }
    },
    updateselectDom: function () {
        var me = this;
        if (me.selectDom) {
            me.selectDom.options.length = 0;
            if (me.source && Array.isArray(me.source) && me.source.length) {

                me.source.foreach(function (x) {
                    MEPH.util.Dom.addOption(x[me.labelfield], x[me.valuefield], me.selectDom);
                })
            }
        }

    },
    onLoaded: function () {
        var me = this;;
        me.great()
        me.updateselectDom();
    },
    /**
    * @private
    * Adds transferable properties.
    **/
    addTransferables: function () {
        var me = this,
            properties = MEPH.Array(['value']);
        me.callParent.apply(me, arguments);
        properties.foreach(function (prop) {
            me.addTransferableAttribute(prop, {
                object: me,
                path: prop
            });
        });

    }
});﻿MEPH.define('MEPH.input.Number', {
    alias: 'number',
    extend: 'MEPH.input.Input',
    properties: {
        type: 'number'
    }
});﻿
MEPH.define('MEPH.input.Range', {
    alias: 'range',
    extend: 'MEPH.input.Input',
    properties: {
        type: 'range'
    }
});﻿/*global MEPH*/

/**
* @class
*
* This is a convenient way of defining an input control
* color css selector when using the MEPH.iconfont.IconFont#color selector syntax.
*/
MEPH.define('MEPH.input.Checkbox', {
    alias: 'checkbox',
    extend: 'MEPH.field.FormField',
    templates: true,
    properties: {
        type: 'checkbox'
    },
    initialize: function () {
        var me = this,
            properties = MEPH.Array(['value']);

        me.callParent.apply(me, arguments);
        properties.foreach(function (prop) {
            me.addTransferableAttribute(prop, {
                object: me,
                path: prop
            });
        });
    },
    onLoaded: function () {
        var me = this;
        me.callParent.apply(me, arguments);
        me.fire('altered', { path: 'type', references: [] });
    },
    translateValue: function (value) {
        return value || false;
    }
});﻿/**
 * @class MEPH.util.FileReader
 * Reads files.
 **/
MEPH.define('MEPH.util.FileReader', {
    statics: {
        /**
         * Gets all the views in the application.
         * @param {Object} fileList
         * @param {Object} options
         * @return {Promise}
         **/
        readFileList: function (fileList, options) {
            var me = this;
            options = options || {};
            var promises = [];

            for (var i = 0 ; i < fileList.length; i++) {
                promises.push(Promise.resolve().then(function (file) {
                    var newprom = new Promise(function (r, s) {

                        var reader = new FileReader();
                        reader.onload = function (event) {

                            r({
                                file: file,
                                res: event.target.result
                            });
                        };
                        console.log(file);
                        switch (options.readas) {
                            case 'ArrayBuffer':
                                reader.readAsArrayBuffer(file);
                                break;
                            default:
                                reader.readAsDataURL(file);
                                break;
                        }

                    });
                    return newprom;
                }.bind(me, fileList[i])))

            }
            return Promise.all(promises);
        }
    }
});﻿/*global MEPH*/

/**
* @class
*
* This is a convenient way of defining a visual selector.
*/
MEPH.define('MEPH.audio.view.AudioSignalVisualizer', {
    alias: 'audiosignalvisualizer',
    extend: 'MEPH.audio.view.Visualizer',
    requires: ['MEPH.input.Range',
        'MEPH.util.Renderer',
        'MEPH.signalprocessing.SignalProcessor'],
    templates: true,

    properties: {
        stop: 100,
        position: 0,
        step: .0001,
        markBtnText: 'Mark',
        max: null,
        min: null,
        marks: null,
        offsetbtnheight: 19,
        marktype: 'default',
        markercolor: '#d9534f',
        markscolor: '#f0ad4e',
        markerBtns: null,
        pitchShift: .5,
        pitchWindowSize: 1000,
        smallestStep: 0.0000001,
        silenceThreshold: 0,
        silenceTimeSticky: 0,
        silenceTimeThreshold: 0,
        renderer: null,
        injectControls: {
            location: 'buttonpanel'
        },
        detectedPitch: null,
        $signalProcessor: null,
        markerrenderer: null
    },
    initialize: function () {
        var me = this;
        me.great()
        me.markerBtns = [];
        me.$signalProcessor = new SignalProcessor();;

        Observable.defineDependentProperty('silenceThresholdHeight', me, ['silenceThreshold'], me.calculateSilenceThreholdHeight.bind(me));
        me.on('altered', function (type, args) {
            if (args.path === 'marks') {
                if (me.marks) {
                    me.marks.on('changed', me.update.bind(me));
                }
                me.update();

            }

            if (args.path === 'vertical' || args.path === 'scrollMutiplier' || args.path === 'scrollleft') {
                me.update();
            }
        });
    },
    calculateSilenceThreholdHeight: function () {
        var me = this,
            height = me.height || 0,
            st = me.silenceThreshold || 0, stheight = height * st;

        Style.top(me.silenceThresholdDiv, (height / 2) - (stheight / 2));
        Style.height(me.silenceThresholdDiv, stheight);
        Style.width(me.silenceThresholdDiv, me.width);
        return stheight;
    },
    addMark: function () {
        var me = this,
            relativePosition = me.getCurrentPosition();
        var absPosition = me.getAbsoluteMarkPosition(relativePosition, me.magnification, me.timeScroll)
        if (me.marks && !me.marks.some(function (x) {
            return x.position === absPosition;
        })) {
            me.marks.push({
                position: absPosition,
                type: me.marktype
            })
        }
    },
    detectPitch: function () {
        var me = this, clip = me.getSelectedClip();
        if (clip) {
            var res = MEPH.audio.Audio.updatePitch(clip.buffer.buffer.getChannelData(0), me.source.buffer.buffer.sampleRate);
            me.detectedPitch = res;
        }
    },
    getSelectedClip: function () {
        var me = this,
            startstop = me.getStartEndPosition();
        if (startstop) {
            var start = startstop.start;
            var end = startstop.end;
            if (me.source) {
                var clip = me.getClip(me.source, start, end);
                return clip;
            }
        }
        return null;
    },
    getStartEndPosition: function () {
        var me = this,
         pixels = me.width;
        if (me.selectedRange) {
            var start = me.getAbsoluteMarkPosition(me.selectedRange.start / pixels) / me.source.buffer.buffer.sampleRate;
            var end = me.getAbsoluteMarkPosition((me.selectedRange.end) / pixels) / me.source.buffer.buffer.sampleRate;
            return {
                start: start,
                end: end
            }
        }
        return null;
    },
    detectPitches: function () {
        var me = this,
            startend = me.getStartEndPosition(),
            clip = me.getSelectedClip();
        me.clearAreasOfInterest();
        if (clip) {
            var sampleRate = me.source.buffer.buffer.sampleRate;
            if (me.$detectedSilence) {

                var res = me.$detectedSilence.select(function (x, index) {
                    if (index) {
                        return {
                            start: me.$detectedSilence[index - 1].end,
                            end: me.$detectedSilence[index].start,
                            length: me.$detectedSilence[index].start - me.$detectedSilence[index - 1].end
                        }
                    }
                    else {
                        return {
                            start: 0,
                            end: x.start,
                            length: x.start
                        }
                    }
                });

                var pitches = res.where(function (x) { return x.length > 4000; }).select(function (x) {
                    var $clip = me.getClip(clip, x.start / sampleRate, (x.start + x.length) / sampleRate);
                    var res = MEPH.audio.Audio.detectPitches($clip.buffer.buffer.getChannelData(0), sampleRate, parseInt(me.pitchWindowSize));
                    var sp = new SignalProcessor();
                    res = sp.getNotes($clip.buffer.buffer.getChannelData(0), sampleRate, 4000, 4096 * 2, 512);
                    //var note = res.select(function (x) { return x.key.note }).mostcommon(function (x) { return x; });
                    var note = res.select(function (x) { return x }).mostcommon(function (x) { return x; });
                    return {
                        start: x.start + startend.start * sampleRate,
                        end: x.end + startend.start * sampleRate,
                        key: { note: note }
                    }
                });

                me.renderAreasOfInterest('pitches', pitches);
            }
            else {
                me.renderAreasOfInterest();
                var res = MEPH.audio.Audio.detectPitches(clip.buffer.buffer.getChannelData(0), sampleRate, parseInt(me.pitchWindowSize));
                me.renderAreasOfInterest('pitches', res.select(function (x) {
                    return {
                        start: x.start + startend.start * sampleRate,
                        key: x.key,
                        end: x.end + startend.start * sampleRate
                    }
                }));
            }
        }
    },
    detectSilence: function () {
        var me = this,
            startend = me.getStartEndPosition(),
            clip = me.getSelectedClip();
        me.clearAreasOfInterest();
        if (clip) {
            var sampleRate = me.source.buffer.buffer.sampleRate;
            var res = MEPH.audio.Audio.detectSilence(clip.buffer.buffer.getChannelData(0), parseFloat(me.silenceThreshold), parseFloat(me.silenceTimeThreshold),
                parseFloat(me.silenceTimeSticky));
            me.$detectedSilence = res;
            me.renderAreasOfInterest('silence', res.select(function (x) {
                return {
                    start: x.start + startend.start * sampleRate,
                    end: x.end + startend.start * sampleRate
                }
            }));
        }
    },
    clearAreasOfInterest: function () {
        var me = this, area;

        areas = (me.$areasOfInterest || []).select();
        areas.foreach(function (t) {
            t.div.parentNode.removeChild(t.div);
        })
        me.$areasOfInterest = [];
    },
    renderAreasOfInterest: function (type, areas) {
        var me = this,
            container = me.container,
            interestAreas = (me.$areasOfInterest || []).where(function (x) {
                if (type === undefined) return true;
                return x.type === type;
            });
        if (areas === undefined) {
            areas = (me.$areasOfInterest || []).select();

        }
        var newareas = areas.select(function (x) {
            var left = me.getRelativeMarkPosition(x.start);
            var right = me.getRelativeMarkPosition(x.end);
            if (right - left < 5) {
                return null;
            }
            var area = interestAreas.unshift(),
                div;

            if (area) {
                div = area.div;
            }

            div = div || document.createElement('div');
            Style.height(div, me.height);
            Style.absolute(div);
            Style.top(div, 0);
            div.classList.add('infoarea');
            div.classList.add('noresponse');
            if (type === 'pitches') {
                div.classList.add('pitches');
                var h3 = document.createElement('h3');
                h3.innerHTML = x.key.note;
                div.appendChild(h3);
            }
            if (div.parentNode !== container)
                container.appendChild(div);
            Style.left(div, left);
            Style.width(div, right - left);
            return {
                div: div,
                start: x.start,
                type: type || x.type,
                end: x.end
            }
        }).where();
        interestAreas.foreach(function (t) {
            t.div.parentNode.removeChild(t.div);
        })

        me.$areasOfInterest = newareas;
    },
    addSelectionAsMarks: function () {
        var me = this, pixels = me.width;

        if (me.selectedRange) {
            var start = me.getAbsoluteMarkPosition(me.selectedRange.start / pixels);
            var end = me.getAbsoluteMarkPosition((me.selectedRange.end) / pixels);

            if (me.marks && !me.marks.some(function (x) {
           return x.position === start;
            })) {
                me.marks.push({
                    position: start,
                    type: me.marktype
                })
            }
            if (me.marks && !me.marks.some(function (x) {
          return x.position === end;
            })) {
                me.marks.push({
                    position: end,
                    type: me.marktype
                })
            }
        }
    },
    getAbsoluteMarkPosition: function (position, magnification, timeOffset) {
        var result,
            me = this,
            pixels = me.width,
            buffer = me.getBuffer();
        if (buffer) {
            var start = buffer.length * me.timeScroll;
            var length = (buffer.length * me.magnification);

            return (position * length) + start;
        }
    },
    shiftPitch: function () {
        var me = this;
        var sp = me.$signalProcessor;

        if (me.playingClip) {
            me.playingClip.stop();
            return;
        }
        var buffer = me.getBuffer();
        var audioresult = me.getSnippet();
        var inbucket;
        var outbucket;
        if (!audioresult) return;
        var audio = new MEPH.audio.Audio();
        audio.buffer(audioresult.buffer, { name: 'buffer' })
            .processor({
                name: 'proce',
                process: function (audioProcessingEvent) {
                    var inputBuffer = audioProcessingEvent.inputBuffer;
                    var inputData = audioProcessingEvent.inputBuffer.getChannelData(0);
                    var d = audioProcessingEvent.outputBuffer.getChannelData(0);
                    sp.pitchShift(parseFloat(me.pitchShift), inputData.length, inputData.length, 4, me.source.buffer.buffer.sampleRate, inputData, d);
                }
            })
            .complete();
        var snippet = audio.get({ name: 'buffer' });
        snippet.first().node.onended = function () {
            audio.disconnect();
            delete me.playingClip;
            delete audio;
            delete snippet.first().node;
        }
        me.playingClip = snippet.first().node;
        me.playingClip.start();

    },
    getSnippet: function () {
        var me = this,
           source = me.source,
           audio = new MEPH.audio.Audio(),
           magnification = parseFloat(me.magnification),
           timeScroll = parseFloat(me.timeScroll);
        if (me.source) {
            var start = timeScroll * source.buffer.buffer.duration;
            var time = source.buffer.buffer.duration * magnification;
            var snippet = me.getClip(source, start, start + time);
            return snippet;
        }
        return null;
    },
    getClip: function (source, start, stop) {
        var snippet = MEPH.audio.Audio.clip(source, start, Math.min(source.buffer.buffer.duration, stop));
        return snippet;
    },
    playClip: function () {
        var me = this;
        if (me.playingClip) {
            me.playingClip.stop();
            return;
        }

        var snippet = me.getSnippet();;

        if (snippet) {
            snippet = me.$playSnippet(snippet);
        }

    },
    saveClip: function () {
        var me = this, snippet = me.getSnippet();

        if (!snippet) return;
        me.markCanvas.dispatchEvent(MEPH.createEvent('saveclip', {
            snippets: [snippet]
        }))
    },
    saveClips: function () {
        var me = this, source;
        if (!me.source) {
            return null;
        }
        source = me.source;
        var tmarks = me.marks.orderBy(function (x, y) {
            return x.position - y.position;
        });

        me.marks.length = 0;
        me.marks.push.apply(me.marks, tmarks);
        var res = me.marks.select(function (x, index) {
            if (index) {
                var mark = me.marks[index - 1];
                var end = me.marks[index] ? me.marks[index].position : source.buffer.buffer.length;
                var snippet = MEPH.audio.Audio.clipBuffer(me.source, mark.position, end);
                return snippet;
            }
            return false;
        }).where();

        if (res.length)
            me.markCanvas.dispatchEvent(MEPH.createEvent('saveclip', {
                snippets: res
            }))
    },
    cutSectionOut: function () {
        var me = this, pixels = me.width;
        if (me.selectedRange) {
            var start = me.getAbsoluteMarkPosition(me.selectedRange.start / pixels);
            var end = me.getAbsoluteMarkPosition((me.selectedRange.end) / pixels);
            if (end - start > 10) {
                var res = MEPH.audio.Audio.cutOutSection(me.source, start, end, null);
                me.source.buffer = res.buffer;
            }
        }
    },
    trimSection: function () {
        var me = this,
            pixels = me.width;
        if (me.selectedRange) {
            var start = me.getAbsoluteMarkPosition(me.selectedRange.start / pixels);
            var end = me.getAbsoluteMarkPosition((me.selectedRange.end) / pixels);
            console.log('start : ' + start + ' ' + ' end ' + end)
            if (end - start > 10) {
                me.marks.removeWhere(function (x) {
                    return x.position > end || x.position < start;
                });
                me.marks.where(function (x) {
                    return x.position < end && x.position > start;
                }).foreach(function (mark) {
                    mark.position -= start;
                })
                var res = MEPH.audio.Audio.clipBuffer(me.source, start, end, null);
                me.source.buffer = res.buffer;
            }
        }
    },
    $playSnippet: function (snippet) {
        var me = this;
        if (snippet) {
            var audio = new MEPH.audio.Audio();
            audio.buffer(snippet.buffer.buffer, { name: 'buffer' }).gain({ name: 'gain', volume: 1 }).complete();
            var snippet = audio.get({ name: 'buffer' });
            snippet.first().node.onended = function () {
                audio.disconnect();
                delete me.playingClip;
                delete audio;
                delete snippet.first().node;
            }
            me.playingClip = snippet.first().node;
            me.playingClip.start();

        }
        return snippet;
    },
    getRelativeMarkPosition: function (position, magnification, timeOffset) {
        var me = this,
            pixels = me.width,
            buffer = me.getBuffer();
        if (buffer) {
            var start = buffer.length * me.timeScroll;
            position -= start;
            var length = (buffer.length * me.magnification);
            position /= length;

            return (position) * pixels;
        }
    },
    getCurrentPosition: function () {
        var me = this;
        var position = parseFloat(me.position);
        var a = parseFloat(me.container.scrollLeft);
        var canvasWidth = parseFloat(me.canvas.clientWidth);
        var containerWidth = parseFloat(me.container.clientWidth);

        var windowWidth = Math.min(containerWidth, canvasWidth - a);
        var windowStep = windowWidth * position;

        return (windowStep + a) / canvasWidth
    },
    getMarkerPosition: function () {
        var me = this;
        var position = parseFloat(me.position);
        var a = parseFloat(me.container.scrollLeft);
        var canvasWidth = parseFloat(me.canvas.clientWidth);
        var containerWidth = parseFloat(me.container.clientWidth);

        var windowWidth = Math.min(containerWidth, canvasWidth - a);
        var windowStep = windowWidth * position;

        return (windowStep + a);
    },
    scanToMark: function (dir) {
        var me = this, buffer = me.getBuffer();
        if (buffer) {
            if (me.$currentMark === undefined) {
                var mark = me.marks.first();
                if (mark) {
                    me.timeScroll = mark.position / buffer.length;
                    me.$currentMark = 0;
                }
            }
            else {
                me.$currentMark = (me.$currentMark + parseInt(dir));
                if (me.$currentMark === me.marks.length) me.$currentMark = -1;
                if (me.$currentMark < -1) me.$currentMark = me.marks.length - 1;
                if (me.$currentMark === -1) {
                    me.timeScroll = 0;
                    return;
                }
                me.$currentMark = me.$currentMark % me.marks.length
                var position = me.marks[me.$currentMark].position;
                me.timeScroll = position / buffer.length;

            }
        }
    },

    updateMarkBtns: function () {
        var me = this;
        if (me.marks) {
            var removed = me.markerBtns.removeWhere(function (btnObject) {
                return !me.marks.some(function (x) { return x === btnObject.marker });
            });
            removed.foreach(function (x) {
                x.dom.parentNode.removeChild(x.dom);
            });
            var newmarks = me.marks.where(function (x) {
                return !me.markerBtns.some(function (t) { return t.marker === x; });
            });

            var newmarksObjects = me.createNewMarkerBtns(newmarks);
            me.markerBtns.push.apply(me.markerBtns, newmarksObjects);

            me.markerBtns.foreach(function (x) {
                var rel = me.getRelativeMarkPosition(x.marker.position, me.magnification, me.timeScroll);
                x.dom.style.left = (rel) + 'px';
                x.dom.style.top = (me.height - me.offsetbtnheight) + 'px';
            })
            //
        }
    },
    getBufferSampleRate: function () {
        var me = this, buffer = me.getBuffer();
        if (buffer)
            return me.source.buffer.buffer.sampleRate;
        return null;
    },
    getBufferLength: function () {
        var me = this, buffer = me.getBuffer();

        if (buffer) {
            return buffer.length;
        }
        return null;
    },
    createNewMarkerBtns: function (newmarks) {
        var me = this;
        return newmarks.select(function (x, index) {
            var btntemplate = me.createMarkerBtn();
            var btn = btntemplate.querySelector('[removebtn]');
            me.don('click', btn, function (x) {
                me.marks.removeWhere(function (y) { return y === x; });
            }.bind(me, x));

            me.don('click', btntemplate.querySelector('[playbtn]'), function (x) {
                console.log('play snippet')
                me.playSnippet(x);
            }.bind(me, x))

            return {
                marker: x,
                dom: btntemplate
            }
        })
    },
    /**
     * Plays the snippet.
     * @param {Object} percentage
     ***/
    playSnippet: function (mark) {
        var me = this;
        var tmarks = me.marks.orderBy(function (x, y) {
            return x.position - y.position;
        });
        me.marks.length = 0;
        me.marks.push.apply(me.marks, tmarks);
        var index = me.marks.indexWhere(function (x) {
            return x.position === mark.position;
        }).first();
        if (index !== null) {
            var end = me.marks[index + 1] ? me.marks[index + 1].position : source.buffer.buffer.length;
            var snippet = MEPH.audio.Audio.clipBuffer(me.source, mark.position, end);
            me.$playSnippet(snippet)
        }
    },
    createMarkerBtn: function () {
        var me = this;
        var clone = me.markerBtnTemplate.cloneNode(true);
        me.markerCanvas.parentNode.appendChild(clone);
        return clone;
    },
    update: function () {
        var me = this;
        return Promise.resolve().then(function () {
            me.updateMarkBtns();
        }).then(function () {
            return me.updateMarks()
        }).then(function () {
            return me.updateMarker();
        }).then(function () {
            me.draw();
        }).then(function () {
            me.renderAreasOfInterest();
        });
    },
    updateBpm: function () {
        var me = this;
        if (me.source) {
            MEPH.audio.Audio.bpm(me.source.buffer).then(function (res) {
                if (res && res.length) {
                    var bpm = res.subset(0, 4)
                        .orderBy(function (x, y) {
                            return y.count - x.count;
                        })
                        .select(function (x, index) {
                            return 'Tempo :' + x.tempo + '(Score:' + x.count + ')  ';
                        }).join('|');
                    setTimeout(function () {
                        me.calculatedBpm = bpm;
                    }, 10)
                }
            }).catch(function (e) {
                MEPH.Log(e);
            });
        }
    },
    updateMarks: function () {
        var me = this;


        return me.render();
    },
    updateMarker: function () {
        var me = this;
        if (me.markerFrame)
            cancelAnimationFrame(me.markerFrame)
        me.markerFrame = requestAnimationFrame(function () {
            var HEIGHT = me.height;
            var WIDTH = me.width;
            var dataArray = me.source;
            me.markerFrame = null;

            if (!me.markerrenderer) {
                me.markerrenderer = new MEPH.util.Renderer();
                me.markerrenderer.setCanvas(me.markerCanvas);
            }
            me.markerrenderer.clear();
            var xpos = me.getMarkerPosition();
            me.markerrenderer.draw({
                shape: MEPH.util.Renderer.shapes.line,
                end: {
                    x: xpos,
                    y: HEIGHT
                },
                start: {
                    x: xpos,
                    y: 0
                },
                strokeStyle: me.markercolor
            });
            rsolve();
        });
        var rsolve;
        return new Promise(function (r) {
            rsolve = r;
        });
    },
    render: function () {
        var me = this;
        if (me.markframe)
            cancelAnimationFrame(me.markframe)
        me.markframe = requestAnimationFrame(function () {
            var HEIGHT = me.height;
            var WIDTH = me.width;
            var dataArray = me.source;
            me.markframe = null;

            if (!me.renderer) {
                me.renderer = new MEPH.util.Renderer();
                me.renderer.setCanvas(me.markCanvas);
            }


            me.renderer.clear();
            if (me.marks) {
                var lines = me.marks.select(function (x) {
                    var xpos = me.getRelativeMarkPosition(x.position, me.magnification, me.timeScroll);
                    return {
                        shape: MEPH.util.Renderer.shapes.line,
                        end: {
                            x: xpos,
                            y: HEIGHT
                        },
                        start: {
                            x: xpos,
                            y: 0
                        },
                        strokeStyle: me.markscolor
                    }
                });
                me.renderer.draw(lines);
            }
            rsolve();
        });
        var rsolve;
        return new Promise(function (r) {
            rsolve = r;
        });
    }
});﻿/**
 * @class MEPH.table.SpreadSheet
 * @extends MEPH.control.Control
 * A infinitely scrolling Scrollbar.
 **/
MEPH.define('MEPH.table.Sequencer', {
    alias: 'sequencer',
    templates: true,
    extend: 'MEPH.table.SpreadSheet',
    requires: ['MEPH.util.Observable', 'MEPH.util.Style'],
    statics: {
        grabbing: 'grabbing'
    },
    properties: {
        grabkeycode: 'G',
        source: null,
        radius: 2,
        leftHeaderLeftPadding: 3,
        topheadersource: null,
        leftheadersource: null,

        /**
         * @property {Object} grabbeditem
         * The item grabbed.
         **/
        grabbeditem: null,
        timescale: 1,
        /**
         * @property {Object} time
         * This function will take an item from the source, and return the time.
         **/
        time: null,
        /**
         * @property {Object} time
         * This function will take a number and item as an input, and set the time on the item.
         **/
        settime: null,

        /**
         * @property{Object} rowheader
         * This function will take an item, and return the text/or instructions to render.
         */
        rowheader: null,

        /**
         * @property{Object} columnheader
         * This function will take an item, and return the text/or instructions to render.
         */
        columnheader: null,

        /**
         * @property {Object} lane
         * This function will take an item from the source, and return the lane.
         **/
        lane: null,
        /**
         * @property {Object} length
         * This function will take an item from the source, and return the length.
         **/
        length: null
    },
    initialize: function () {
        var me = this;
        me.callParent.apply(me, arguments);

        me.on('altered', function (type, args) {
            if (args.property === 'source') {

                if (args.old) {
                    args.old.un(null, me);
                    if (Array.isArray(args.old)) {
                        args.old.foreach(function (x) {
                            if (MEPH.util.Observable.isObservable(x))
                                x.un(null, me);
                        })
                    }
                }
                me.onSourceUpdated();
            }
        })
    },
    onLoaded: function () {
        var me = this;
        me.great()

        me.don('mouseovercell', me.canvas, function (evt) {
            me.onMouseOverCell(me.canvas, evt);
        });
        me.don('mousemovecell', me.canvas, function (evt) {
            me.onMouseMoveCell(me.canvas, evt);
        });

        me.don('mouseoveritem', me.canvas, function (evt) {
            me.onMouseOverItem(evt);
        });

        me.don('mouseovercelltop', me.topheader, function (evt) {
            me.onMouseOverCell(me.topheader, evt, 'top')
        });
        me.don('mouseovercellleft', me.leftheader, function (evt) {
            me.onMouseOverCell(me.topheader, evt, 'left')
        });
    },
    onSourceUpdated: function () {
        var me = this;
        if (me.source && MEPH.util.Observable.isObservable(me.source)) {
            me.source.on('changed', me.sourceItemChanged.bind(me), me);
            me.source.foreach(function (item) {
                if (MEPH.util.Observable.isObservable(item)) {
                    item.on('changed', me.sourceItemChanged.bind(me), me);
                }
            });
        }
        me.updateCells();
    },
    sourceItemChanged: function (type, args) {
        var me = this;
        me.updateCells();
    },
    drawSingleDataItem: function (itemtodraw) {
        var me = this;
        var singleinstruction = me.getInstructionsFor(itemtodraw);
        if (singleinstruction) {
            me.drawContent(singleinstruction);
        }
    },
    getMainContentInstructions: function (visibleCellData) {
        var me = this;
        var result = me.getItemsInCellSpace(visibleCellData).concatFluent(function (x) {
            return (me.getInstructionsFor(x));
        });
        return result;
    },
    getLeftHeaderInstructions: function (visibleCellData) {
        var me = this;
        var result = me.getItemsInLeftSpace(visibleCellData).concatFluent(function (x) {
            return me.getInstructionsForLeft(x);
        });
        return result;
    },
    getTopHeaderInstructions: function (visibleCellData) {
        var me = this;
        var result = me.getItemsInTopSpace(visibleCellData).concatFluent(function (x) {
            return me.getInstructionsForTop(x);
        });
        return result;
    },
    getItemsInCellSpace: function (cellData) {
        var me = this;
        return me.getItemInSpace(cellData, me.source);
    },
    getItemsInTopSpace: function (cellData) {
        var me = this;
        return me.getItemInSpace(cellData, me.topheadersource, 'top');
    },
    getItemsInLeftSpace: function (cellData) {
        var me = this;
        return me.getItemInSpace(cellData, me.leftheadersource, 'left');
    },
    deleteSelected: function () {
        var me = this;

        if (me.selectedrange && me.selectedrange.end && me.selectedrange.start) {
            var items = me.getItemInSpace({
                row: me.selectedrange.start.row,
                visibleRows: me.selectedrange.end.row - me.selectedrange.start.row,
                column: me.selectedrange.start.column,
                visibleColumns: me.selectedrange.end.column - me.selectedrange.start.column
            }, me.source);
            if (me.delete && me.delete.function)
                me.delete.function(items);
        }
    },
    getItemInSpace: function (cellData, source, header) {
        var result = [],
            time, lane, endtime,
            length,
            calctime,
            me = this;

        if (cellData) {
            if (me.time && me.length && me.lane && typeof (me.time.function) === 'function' &&
                   typeof (me.length.function) === 'function' &&
                   typeof (me.lane.function) === 'function') {
                if (source) {
                    source.where(function (x) {
                        time = me.time.function(x);
                        length = me.length.function(x);
                        lane = me.lane.function(x);
                        calctime = me.getScaled(time);
                        endtime = calctime + me.getScaled(length);

                        var rowfits = cellData.row <= lane && lane <= cellData.visibleRows + cellData.row;
                        var startofcolumns = cellData.column <= calctime && calctime <= cellData.visibleColumns + cellData.column;
                        var endofcolumns = cellData.column <= endtime && endtime <= cellData.visibleColumns + cellData.column;
                        var beginning = (startofcolumns && rowfits);
                        var end = (endofcolumns && rowfits);

                        if ((beginning || end) && !header) {
                            return true;
                        }
                        else if (header === 'left') {
                            return rowfits;
                        }
                        else if (header === 'top') {
                            return startofcolumns;
                        }
                        return false;
                    }).foreach(function (x) {
                        result.push(x);
                    });
                }
            }
        }
        return result;
    },
    /**
     * Gets the scaled value.
     * @param {Number} value
     * @return {Number}
     **/
    getScaled: function (value) {
        var me = this;
        return value / me.timescale;
    }, /**
     * Gets the unscaled value.
     * @param {Number} value
     * @return {Number}
     **/
    unscaleValue: function (value) {
        var me = this;
        return value * me.timescale;
    },

    /**
     * Gets instructions for a sequence item.
     * @param {Object} sequenceItem
     *
     */
    getInstructionsFor: function (sequenceItems) {
        var me = this,
            metrics;
        sequenceItems = Array.isArray(sequenceItems) ? sequenceItems : [sequenceItems];
        return sequenceItems.select(function (sequenceItem) {
            metrics = me.getItemMetrics(sequenceItem);
            metrics.shape = MEPH.util.Renderer.shapes.rectangle;
            metrics.radius = me.radius;
            return metrics;
        })
    },
    getInstructionsForLeft: function (sequenceItem) {
        var me = this,
            metrics;

        metrics = me.getItemMetrics(sequenceItem, 'left');
        var res = me.rowheader && me.rowheader.function ? me.rowheader.function(sequenceItem) : null;
        if (res === null) {
        }
        else if (typeof res === 'string') {
            metrics.font = "12px Arial";
            metrics.textAlign = 'left';
            // metrics.x = me.getCellColumnPx(metrics, 'left')
            metrics.x += me.leftHeaderLeftPadding;
            metrics.y = me.getCellRowPx(metrics, 'left');
            metrics.textBaseline = 'top';
            metrics.shape = MEPH.util.Renderer.shapes.text;
            metrics.text = res;
            return [metrics];
        }
        else {
            console.log('Unhandled: ')
        }
        return [];
    },
    getInstructionsForTop: function (sequenceItem) {
        var me = this,
          metrics;

        metrics = me.getItemMetrics(sequenceItem, 'top');
        var res = me.columnheader && me.columnheader.function ? me.columnheader.function(sequenceItem) : null;
        if (res === null) {
        }
        else if (typeof res === 'string') {
            metrics.font = "12px Arial";
            metrics.textAlign = 'left';
            // metrics.x = me.getCellColumnPx(metrics, 'left')
            metrics.x += me.leftHeaderLeftPadding;
            metrics.y = me.getCellRowPx(metrics, 'top');
            metrics.textBaseline = 'top';
            metrics.shape = MEPH.util.Renderer.shapes.text;
            metrics.text = res;
            return [metrics];
        }
        else {
            console.log('Unhandled: ')
        }
        return [];
    },
    getItemMetrics: function (sequenceItem, offset) {
        var me = this;
        var lane = me.lane.function(sequenceItem, offset);
        var time = me.time.function(sequenceItem, offset);
        var length = me.length.function(sequenceItem);
        var calctime = me.getScaled(time);
        var column = Math.floor(calctime);
        var pos = me.getCellPosition({ row: lane, column: column }, offset);
        var columnWidth = me.getColumnWidth(column);
        var xoffset = (calctime - column) * columnWidth;
        var width = me.getScaled(length) * columnWidth;
        var height = me.getRowHeight(lane);
        return {
            x: pos.x + xoffset,
            y: pos.y,
            width: width,
            fillStyle: me.color && me.color.function ? me.color.function(sequenceItem) : '#ff0000',
            height: height,
            column: column,
            row: lane,
            relObj: sequenceItem
        };
    },
    onMouseOverCell: function (canvas, evt, header) {
        var metrics, func,
            me = this;
        if (!header && me.enablesvg) {
            return;
        }
        var cell = evt.cells.first();

        var items;

        switch (header) {
            case 'left':
                func = me.getItemsInLeftSpace.bind(me);
                break;
            case 'top':
                func = me.getItemsInTopSpace.bind(me);
                break;
            default:
                func = me.getItemsInCellSpace.bind(me);
                break;
        }
        items = func({
            row: cell.row,
            column: cell.column,
            visibleRows: 1,
            visibleColumns: 1
        });
        items = items.where(function (x) {
            metrics = me.getItemMetrics(x);
            return (evt.position.x >= metrics.x && evt.position.x <= metrics.x + metrics.width &&
                evt.position.y >= metrics.y && evt.position.y <= metrics.y + metrics.height)
        });
        me.dispatchEvent('mouseoveritem', {
            items: items, header: header
        }, canvas)
    },
    onMouseMoveCell: function (canvas, evt) {

        var me = this;
        if (me.state === MEPH.table.Sequencer.grabbing) {

            var lane = me.lane.function(me.grabbeditem);
            var y = Math.min(parseFloat(canvas.clientHeight), Math.max(0, me.getCellRowPx({ row: lane }))) + me.topheader.clientHeight;
            var x = evt.position.x;
            var metrics = me.getItemMetrics(me.grabbeditem);
            me.lastgrabposition = { x: x, y: y };

            me.positionGrabRep({ x: x + (parseFloat(me.leftheader.clientWidth) || 0), y: y, width: metrics.width, height: metrics.height });
        }
    },
    dispatchEvent: function (evnt, args, canvas) {
        var me = this;
        canvas.dispatchEvent(MEPH.createEvent(evnt, args));
    },
    onMouseOverItem: function (evnt) {
        var me = this;
        switch (evnt.header) {
            case 'left':
            case 'top':
                break;
            default:
                me.lastitem = evnt.items.first() || me.lastitem;
                break;
        }
    },
    /**
     *Grabs an item from a sequence, and sets the state to grabbing.
     * @param {Object} item
     */
    grab: function (item) {
        var me = this;
        if (me.settime && typeof (me.settime.function) === 'function' && !me.state) {
            me.state = MEPH.table.Sequencer.grabbing;
            me.grabbeditem = item;
            if (me.grabrep) {
                Style.show(me.grabrep);
            }
            return true;
        }
        else return false;
    },
    ungrab: function (item) {
        var me = this;
        if (me.grabbeditem === item && me.state === MEPH.table.Sequencer.grabbing) {
            me.grabbeditem = null;
            if (me.grabrep) {
                var position = MEPH.util.Dom.getRelativePosition(me.grabrep, me.canvas);
                var col = me.getRelativeColum(position.x);
                var colpos = me.getCellColumnPosition({ column: col });
                var extrac = (me.lastgrabposition.x - colpos) / me.getColumnWidth(col);
                var time = col + extrac;
                time = Math.max(0, time);
                var unscaledtime = me.unscaleValue(time);
                me.settime.function(unscaledtime, item);
                Style.hide(me.grabrep);

            }

            me.state = null;
        }
    },
    onKeyPress: function (evt) {
        var me = this,
            key = MEPH.util.Dom.getCharCode(evt);

        if (String.fromCharCode(key).toLowerCase() === me.grabkeycode.toLowerCase()) {
            if (me.lastitem) {
                if (me.state === null) {
                    me.grab(me.lastitem);
                }
                else if (me.state === MEPH.table.Sequencer.grabbing) {
                    me.ungrab(me.grabbeditem);
                }
            }
        }
        else {
            me.great()
        }
    },
    positionGrabRep: function (options) {
        var me = this;
        Style.height(me.grabrep, options.height);
        Style.width(me.grabrep, options.width);
        Style.left(me.grabrep, options.x);;
        Style.top(me.grabrep, options.y);
    }
});﻿describe("MEPH/audio/view/VisualSelector.spec.js", 'MEPH.audio.view.VisualSelector', function () {

    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it("can create a VisualSelector", function () {
        //Arrange

        //Assert
        var input = new MEPH.audio.view.VisualSelector();

        expect(input).toBeTruthy();

    });

    it('can render a VisualSelector', function () {
        MEPH.render('MEPH.audio.view.VisualSelector', 'visualizer').then(function (r) {
            var results = r.res;
            var app = r.app;

            var dom,
                visualizer = results.first().classInstance;
            ///Assert
            dom = visualizer.getDomTemplate()[0]
            expect(dom).toBeTruthy();
            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        })
    });

    it('has a mark canvas', function (done) {
        MEPH.render('MEPH.audio.view.VisualSelector', 'visualizer').then(function (r) {
            var results = r.res;
            var app = r.app;

            var dom,
                visualizer = results.first().classInstance;
            ///Assert
            expect(visualizer.markCanvas).toBeTruthy();
            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        })
    });


    it('has an array of objects that can be rendered to a canvas', function (done) {

        MEPH.render('MEPH.audio.view.VisualSelector', 'visualizer').then(function (r) {
            var results = r.res;
            var app = r.app;

            var dom, rendered,
                visualizer = results.first().classInstance;
            ///Assert
            visualizer.render = function () { rendered = true; }
            visualizer.marks = MEPH.util.Observable.observable([{ position: .1, type: 'start' }]);

            return new Promise(function (r) {
                setTimeout(function () {
                    expect(rendered).toBeTruthy();
                    if (app) {
                        app.removeSpace();
                    }
                    r();
                }, 10)
            })
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        })
    });

    it("can add mark to a relative position", function () {
        //Arrange

        //Assert
        var input = new MEPH.audio.view.VisualSelector();
        input.draw = function () { return Promise.resolve(); }
        input.marks = MEPH.util.Observable.observable([]);
        input.position = 0;
        input.source = [];
        input.scrollleft = 1;
        input.canvas = { clientWidth: 400, getContext: function () { return null; } };
        input.container = { clientWidth: 400 };
        input.addMark();
        expect(input).toBeTruthy();
        
        expect(input.marks.first()).toBeTruthy();

    });

});﻿/**
 * @class MEPH.field.FormField
 * @extends MEPH.control.Control
 * Standard form for a input field.
 **/
MEPH.define('MEPH.audio.view.Visualizer', {
    alias: 'visualizer',
    templates: true,
    extend: 'MEPH.control.Control',
    requires: ['MEPH.input.Range',
        'MEPH.util.Style',
        'MEPH.util.Dom'],
    properties: {
        /**
         * @property {String} cls
         * CSS class to apply for this node.
         */
        cls: '',

        baseCls: 'visualizer col-md-3',

        height: 200,
        calculatedBpm: '',

        width: 300,
        maxsize: 20000,
        magnification: 1,
        timeScroll: 0,
        vertical: 0,
        delta: 1,
        scrollMutiplier: 1,
        scrollleft: 0,
        maxlevel: null,

        /**
         * @property {Array} source
         * An audio source.
         ***/
        source: null

    },
    initialize: function () {
        var me = this;
        me.callParent.apply(me, arguments);
        me.addTransferables();
        me.defineDependentProperties();
        me.on('altered', function (type, args) {

            if (args.path === 'source' || args.path === 'vertical' || args.path === 'scrollMutiplier') {
                me.updateWidth(args).then(me.setLeft.bind(me)).then(function () {
                    me.sourceChanged(args);
                });
            }
        })
    },
    onMouseDown: function () {
        var me = this;

        me.targetStart = MEPH.util.Dom.getEventPositions(MEPH.Array(arguments).last().domEvent).first();

        Style.top(me.mousehover, 0);
        Style.height(me.mousehover, me.height);
        Style.width(me.mousehover, 0);
        if (me.mousehover) {
            me.mousehover.classList.add('active');
        }
    },
    onMouseMove: function () {
        var me = this, pos;
        if (me.targetStart) {
            pos = MEPH.util.Dom.getEventPositions(MEPH.Array(arguments).last().domEvent).first();
            if (pos) {

                me.targetWidth = pos.x - me.targetStart.x;

                if (me.mousehover) {
                    if (me.targetWidth > 0) {
                        Style.left(me.mousehover, me.targetStart.x);
                        Style.width(me.mousehover, me.targetWidth);
                    }
                    else {
                        Style.left(me.mousehover, me.targetStart.x + me.targetWidth);
                        Style.width(me.mousehover, me.targetWidth * -1);
                    }
                }
            }
        }
    },
    onMouseUp: function () {
        var me = this, pos;

        if (me.targetStart) {
            me.setSelectedRange(me.targetStart.x, me.targetWidth);
            me.targetStart = null;
        }
    },
    setSelectedRange: function (start, width) {
        var me = this,
            buffer = me.getBuffer(),
            pixels = me.width;
        if (buffer && me.getAbsoluteMarkPosition) {
            if (width < 0) {
                start = start + width;
                width = width * -1;
            }
            me.selectedRange = {};
            me.selectedRange.start = start
            me.selectedRange.end = start + width;// ;
        }
    },
    sourceChanged: function (args) {
        var me = this;
        me.draw(args.value);

    },
    calculateLeft: function (args) {

        var me = this;
        var width = parseFloat(me.container.scrollWidth);
        var scrollLeft = parseFloat(me.scrollleft) / 100;

        return (width * scrollLeft);
    },
    setLeft: function () {
        var me = this;
        var left = me.calculateLeft();
        me.container.scrollLeft = left;
    },
    draw: function () {
        var me = this;
        if (me.frame)
            cancelAnimationFrame(me.frame)
        me.frame = requestAnimationFrame(function () {
            if (!me.canvas) return;
            var HEIGHT = me.height;
            var WIDTH = me.width;
            var canvasCtx = me.canvas.getContext('2d');

            canvasCtx.fillStyle = 'rgb(200, 200, 200)';
            canvasCtx.fillRect(0, 0, WIDTH, HEIGHT);

            canvasCtx.lineWidth = 1;
            canvasCtx.strokeStyle = 'rgb(0, 0, 0)';

            canvasCtx.beginPath();
            var source = me.getDataToDraw(me.source, WIDTH);
            if (source && source.max) {
                var dataArray = source;
                var max = me.maxlevel ? parseFloat(me.maxlevel) : source.max(function (x) { return Math.abs(x); }) || 1;
                max = Math.abs(max * 1.1);
                var bufferLength = source.length;
                var sliceWidth = WIDTH * 1.0 / bufferLength;
                var x = 0;

                for (var i = 0; i < bufferLength; i++) {

                    var v = dataArray[i] / (max || 128.0);
                    var y = (v * HEIGHT / 2) + (HEIGHT / 2) + parseFloat(me.vertical || 0) / (max || 128.0);

                    if (i === 0) {
                        canvasCtx.moveTo(x, y);
                    } else {
                        canvasCtx.lineTo(x, y);
                    }

                    x += sliceWidth;
                }
            }
            canvasCtx.lineTo(WIDTH, HEIGHT / 2);
            canvasCtx.stroke();
            me.frame = null;
            rsolve();
        });
        var rsolve;
        return new Promise(function (r) {
            rsolve = r;
        });
    },
    getBuffer: function () {
        var me = this, buffer,
            source = me.source;
        if (source && source.buffer && source.buffer.buffer) {
            buffer = source.buffer.buffer.getChannelData(0);
        }
        if (buffer) {
            return buffer;
        }
        return null;
    },
    getDataToDraw: function (source, pixels) {
        var me = this,
            buffer = me.getBuffer();

        if (buffer) {
            var start = buffer.length * me.timeScroll;
            var length = (buffer.length * me.magnification);
            var end = length + start;
            var skip = length / pixels

            return buffer.skipEveryFromTo(Math.round(skip) || 1, Math.round(start), Math.round(end), function (x) {
                return x;
            });

        }
        else if (source && Array.isArray(source) || source instanceof Float32Array) {
            return source;
        }
        return [];
    },
    changeWidth: function () {
        var e = MEPH.util.Array.convert(arguments).last().domEvent;
        var me = this;

        var delta = Math.max(-1, Math.min(1, (e.wheelDelta || -e.detail)));
        me.delta = delta;
        me.width += me.delta
        me.draw();
    },
    updateWidth: function () {
        var me = this;
        if (parseFloat(me.scrollMutiplier)) {
            me.width = (me.maxsize * parseFloat(me.scrollMutiplier) / 100);
            return me.draw();
        }
        else {
            me.width = me.container.clientWidth;
        }
        return Promise.resolve();
    },
    /**
     * @private
     * Adds transferable properties.
     **/

    addTransferables: function () {
        var me = this, properties = MEPH.Array(['componentCls', 'source', 'height', 'width', 'scrollMutiplier']);

        properties.foreach(function (prop) {
            me.addTransferableAttribute(prop, {
                object: me,
                path: prop
            });
        });

    },

    defineDependentProperties: function () {
        var me = this;
        me.combineClsIntoDepenendProperty('visualizerCls', ['componentCls', 'cls', 'baseCls']);
    },
});﻿describe("MEPH/audio/view/Visualizer.spec.js", 'MEPH.audio.view.Visualizer', function () {

    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it("can create a visualizer", function () {
        //Arrange

        //Assert
        var input = new MEPH.audio.view.Visualizer();

        expect(input).toBeTruthy();

    });

    it('drop box has a depend property call dropboxCls, which will be computed on property change', function (done) {
        //Arrange

        MEPH.create('MEPH.audio.view.Visualizer').then(function ($class) {
            var dropbox = new $class();

            dropbox.componentCls = 'cssclass';

            //Assert
            expect(dropbox.visualizerCls.indexOf('cssclass') !== -1).theTruth('the class wasnt set correctly');
        }).catch(function (error) {
            expect(error).caught();
        }).then(function (x) {
            done();
        });
    });

    it('can render a visualizer', function (done) {
        MEPH.render('MEPH.audio.view.Visualizer', 'visualizer').then(function (r) {
            var results = r.res;
            var app = r.app;

            var dom,
                visualizer = results.first().classInstance;
            ///Assert
            dom = visualizer.getDomTemplate()[0]
            expect(dom).toBeTruthy();
            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        })
    });


    it('has a canvas', function (done) {
        MEPH.render('MEPH.audio.view.Visualizer', 'visualizer').then(function (r) {
            var results = r.res;
            var app = r.app;
            var dom,
                visualizer = results.first().classInstance;
            ///Assert
            expect(visualizer.canvas).toBeTruthy();
            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        })
    });


    //it('mouse wheel event will change the width of the visualizer', function (done) {
    //    MEPH.render('MEPH.audio.view.Visualizer', 'visualizer').then(function (r) {
    //        var results = r.res;
    //        var app = r.app;
    //        var dom,
    //            visualizer = results.first().classInstance;
    //        ///Assert
    //        expect(visualizer.canvas).toBeTruthy();

    //        dom = visualizer.getDomTemplate()[0];
    //        dom.dispatchEvent(MEPH.createEvent('mousewheel', { wheelDelta: 1 }));

    //        var p = new Promise(function (r, s) {
    //            setTimeout(function () {
    //                expect(visualizer.width == 301).toBeTruthy();

    //                if (app) {
    //                    app.removeSpace();
    //                }
    //                r();
    //            }, 10);
    //        });

    //        return p;
    //    }).catch(function (error) {
    //        expect(error || new Error('did not render as expected')).caught();
    //    }).then(function () {
    //        done();
    //    })
    //});


    it('can set height and width of visualizer', function (done) {
        MEPH.render('MEPH.audio.view.Visualizer', 'visualizer').then(function (r) {
            var results = r.res;
            var app = r.app;
            var dom,
                visualizer = results.first().classInstance;
            ///Assert
            visualizer.height = 400;
            visualizer.width = 400;
            return new Promise(function (r) {
                setTimeout(function () {
                    expect(parseInt(visualizer.canvas.height) === 400).toBeTruthy();
                    expect(parseInt(visualizer.canvas.width) === 400).toBeTruthy();
                    if (app) {
                        app.removeSpace();
                    }
                    r();
                }, 10)
            })
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        })
    })


    it('can draw', function (done) {
        MEPH.render('MEPH.audio.view.Visualizer', 'visualizer').then(function (r) {
            var results = r.res;
            var app = r.app;
            var dom,
                visualizer = results.first().classInstance;
            ///Assert
            var drawn;
            visualizer.draw = function () { drawn = true; return Promise.resolve(); }
            visualizer.source = new Uint8Array(100);
            return new Promise(function (r) {
                setTimeout(function () {
                    expect(drawn).toBeTruthy();
                    if (app) {
                        app.removeSpace();
                    }
                    r();
                }, 199)
            });
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        })
    });



    it('draw', function (done) {
        MEPH.render('MEPH.audio.view.Visualizer', 'visualizer').then(function (r) {
            var results = r.res;
            var app = r.app;
            var dom,
                visualizer = results.first().classInstance;
            ///Assert
            var drawn;
            var source = new Uint8Array(100);
            for (var i = 0 ; i < 100 ; i++) {
                source[i] = Math.random() * 127;
            }
            visualizer.source = source;
            return new Promise(function (r) {
                setTimeout(function () {
                    if (app) {
                        app.removeSpace();
                    }
                    r();
                }, 100)
            });
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        })
    });

    it('can detect mouse down on the canvas ', function (done) {
        MEPH.render('MEPH.audio.view.Visualizer', 'visualizer').then(function (r) {
            var results = r.res;
            var app = r.app;
            var dom, called,
                visualizer = results.first().classInstance;
            ///Assert
            var drawn;

            visualizer.canvas.dispatchEvent(MEPH.createEvent('mousedown', { offsetX: 1, offsetY: 1 }));
            return new Promise(function (r) {
                setTimeout(function () {
                    expect(visualizer.targetStart).toBeTruthy();
                    if (app) {
                        app.removeSpace();
                    }
                    r();
                }, 100)
            });

        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        })
    });


    it('can detect mouse move on the canvas ', function (done) {
        MEPH.render('MEPH.audio.view.Visualizer', 'visualizer').then(function (r) {
            var results = r.res;
            var app = r.app;
            var dom, called,
                visualizer = results.first().classInstance;
            ///Assert
            var drawn;
            visualizer.targetStart = { x: 0, y: 0 };
            visualizer.canvas.dispatchEvent(MEPH.createEvent('mousemove', { offsetX: 1, offsetY: 1 }));

            return new Promise(function (r) {
                setTimeout(function () {
                    expect(visualizer.targetWidth).toBe(1);

                    if (app) {
                        app.removeSpace();
                    }
                    r();
                }, 100)
            });

        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        })
    });


    it('can detect mouse up on the canvas ', function (done) {
        MEPH.render('MEPH.audio.view.Visualizer', 'visualizer').then(function (r) {
            var results = r.res;
            var app = r.app;
            var dom, called,
                visualizer = results.first().classInstance;
            ///Assert
            var drawn;
            visualizer.targetStart = { x: 0, y: 0 };
            visualizer.targetWidth = 1;
            visualizer.canvas.dispatchEvent(MEPH.createEvent('mouseup', {}));

            return new Promise(function (r) {
                setTimeout(function () {
                    expect(visualizer.targetWidth).toBe(1);
                    expect(visualizer.targetStart).toBe(null);
                    if (app) {
                        app.removeSpace();
                    }
                    r();
                }, 100)
            });

        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        })
    });

});﻿/**
 * @class MEPH.audio.view.AudioSequencer
 * @extends MEPH.table.Sequencer
 * Standard form for a input field.
 **/
MEPH.define('MEPH.audio.view.AudioSequencer', {
    alias: 'audiosequencer',
    templates: true,
    scripts: ['MEPH.audio.view.sequencer.CanvasContextMenu',
        'MEPH.audio.view.sequencer.SequencerResourcesSelect',
        'MEPH.audio.view.sequencer.CanvasHeaderLeftMenu'],
    extend: 'MEPH.table.Sequencer',
    requires: ['MEPH.audio.Audio',
        'MEPH.audio.music.theory.Notes',
        'MEPH.audio.AudioResources',
        'MEPH.input.Text',
        'MEPH.audio.view.AudioSignalVisualizer',
        'MEPH.audio.Sequence',
        'MEPH.util.FileReader',
        'MEPH.audio.graph.AudioGraph',
        'MEPH.input.Checkbox',
        'MEPH.input.Range',
        'MEPH.util.Dom',
        'MEPH.input.Number',
        'MEPH.input.Dropdown',
        'MEPH.file.Dropbox',
        'MEPH.audio.Constants',
        'MEPH.audio.music.theory.Scales',
        'MEPH.util.Observable'],
    statics: {
        TrackResource: 'TrackResource',
        ContextMenu: 'ContextMenu',
        Play: 'Play'
    },
    injections: ['audioResources',
        'fileSaver',
        'recorder',
        'scheduler'],
    properties: {
        firstMidiNote: null,
        lastMidiNote: null,
        selectedSoundFontValue: null,
        defaultColumnWidth: 25,
        nearest: 32,
        singleUnit: 1,
        sequence: null,
        animatemode: true,
        currentSoundFontSelection: null,
        smallestnote: 16,
        scalevalue: 1,
        selectedSoundFont: null,
        fontlistsource: null,
        defaultBpm: 75,
        beatspermin: null,
        selectedSoundFontChunks: null,
        resources: null,
        scales: null,
        triadExtensions: null,
        availableShortCutKeys: null,
        selectedShortCutKey: null,
        chordShortCuts: null,
        selectedTriadExtensionType: null,
        triadTypes: null,
        timeLength: null,
        whistleBuffer: null,
        currentChord: null
    },
    initialize: function () {
        var me = this;
        me.setupFunctions();
        me.setupKeyCommands();
        Object.defineProperty(me, 'bpm', {
            get: function () {
                var bpm = me.beatspermin;
                return (1 / (bpm / 60)) * (1 / me.smallestnote)
                //return 60 / me.smallestnote / me.beatspermin;
            }
        })
        me.great()
        if (!me.sequence) {
            me.sequence = new MEPH.audio.Sequence();
        }
        me.on('altered', function (type, args) {
            if (args.property === 'sequence') {
                me.translateToSource(me.sequence);
            }
            if (args.property === 'beatspermin') {
                me.updateBeat();
            }
            if (args.property === 'commands' || args.property === 'chordShortCuts') {
                me.updateAvailableShortCutKeys();
            }
        });
        me.setupHeaders();


        MEPH.subscribe(MEPH.audio.Constants.RECORDING_COMPLETE, function (type, result) {
            var name = prompt("Save As : ", "");
            MEPH.publish(MEPH.Constants.REQUEST_BLOB_SAVE, result, name + '.wav')
        });

        MEPH.subscribe('removekey', function (type, key) {
            me.commands.removeWhere(function (x) {
                return x.key === key;
            });
            me.chordShortCuts.removeWhere(function (x) {
                return x.key === key;
            })
        });

        MEPH.subscribe(MEPH.audio.Constants.VIEW_RESOURCE, function (type, resource, resourceType) {
            if (me.$inj.audioResources) {
                var resource = me.$inj.audioResources.getResourceById(resource);
                switch (resource.type) {
                    case 'soundfont':
                        me.showSoundFont(resource);
                        break;
                    default:
                        if (resource.nodes) {
                            var sequence = me.addTrackSequence(resource.name);
                            sequence.setDefault('graph', resource.id)
                        }
                        break;
                }
            }
            // me.showResource(resource);
        })
    },
    onLoaded: function () {
        var me = this;
        me.great()
        me.beatspermin = me.defaultBpm;
        me.firstMidiNote = 0;
        me.lastMidiNote = 192;
        me.resources = MEPH.util.Observable.observable([]);
        me.fontlistsource = MEPH.util.Observable.observable([]);
        me.currentSoundFontSelection = MEPH.util.Observable.observable([]);
        me.scales = [{ id: null, name: 'none' }].concat(TheoryScales.getScales());

        me.setupHeaders();
        me.sequence.title = me.sequence.title || 'untitled';
        me.fire('altered', { path: 'sequence' });
        document.body.appendChild(me.soundfontlistholder);
        document.body.appendChild(me.audiographholder);
        document.body.appendChild(me.resourceloader);
        document.body.appendChild(me.shortcutconfigpanel)

        me.hideSoundFontList();
        me.hideParts(me.audiographholder, me.hideGraph.bind(me));
        me.hideParts(me.whistlinlistenin, me.hideWhistlin.bind(me));
        me.hideParts(me.soundfontlistholder, me.hideSoundFontList.bind(me));
        me.hideParts(me.resourceloader, me.hideResource.bind(me));
        me.hideParts(me.shortcutconfigpanel, me.hideShortCutConfigPanel.bind(me));
        me.triadTypes = [{ name: '', text: "", triad: [] },
                { name: 'Major', text: "major", triad: ["0", "4", "7"] },
                { name: 'Minor', text: "minor", triad: ["0", "3", "7"] },
                { name: 'Dim', text: "dim", triad: ["0", "3", "6"] },
                { name: 'Aug', text: "aug", triad: ["0", "4", "8"] },
                { name: 'Sus4', text: "sus4", triad: ["0", "5", "7"] },
                { name: 'Sus2', text: "sus2", triad: ["0", "2", "7"] },
                { name: 'Flat2nd', text: "flat2nd", triad: ["0", "1", "7"] },
                { name: 'Sharp4th', text: "sharp4th", triad: ["0", "6", "7"] }];

        me.triadExtensions = [{ text: "", ext: [] },
                        { text: "Maj 7th", ext: ["b"] },
                        { text: "Dom 7th", ext: ["a"] },
                        { text: "Maj 9th", ext: ["b", "12"] },
                        { text: "Dom 9th", ext: ["a", "12"] },
                        { text: "Maj 11th", ext: ["b", "12", "15"] },
                        { text: "Dom 11th", ext: ["a", "12", "15"] }];

        me.chordShortCuts = MEPH.util.Observable.observable([]);
        me.chordShortCuts.on('changed', function () {
            me.updateAvailableShortCutKeys();
        })
        me.updateAvailableShortCutKeys();
    },
    hideWhistlin: function () {
        var me = this;
        Style.hide(me.whistlinlistenin);
    },
    showShortCuts: function () {
        var me = this;
        Style.show(me.chordshortcuts);
    },
    hideShortCuts: function () {
        var me = this;
        Style.hide(me.chordshortcuts);
    },
    showWhistlin: function () {
        var me = this;
        Style.show(me.whistlinlistenin);
    },
    updateAvailableShortCutKeys: function () {
        var me = this,
            keys = 'abcdefghijklmnopqrstuvwxyz,./;[]'.split('');
        keys = keys.where(function (x) {
            var res = me.commands.first(function (t) {
                return t.key === x;
            });
            return res === null;
        }).select(function (x) {
            return {
                text: x
            }
        });

        me.availableShortCutKeys = keys;
    },
    hideParts: function (part, hidefunc) {
        var me = this;
        me.don('click', document.body, function (evt) {
            if (!MEPH.util.Dom.isDomDescendant(evt.srcElement, part) &&
                !evt.srcElement.classList.contains('form-control')) {
                hidefunc();
            }
        });
        hidefunc();
    },
    createAudioGraph: function () {
        var me = this;
        return me.renderControl('MEPH.audio.graph.AudioGraph', me.audiographholder, me)
    },
    loadResources: function () {

        var me = this;
        return MEPH.util.FileReader.readFileList(MEPH.Array(arguments).last().domEvent.files, { readas: 'ArrayBuffer' })
            .then(function (fileResults) {
                if (me.$inj && me.$inj.audioResources) {
                    me.$inj.audioResources.addResources(fileResults).then(function () {
                        me.updateResources();
                    })
                }
            })
    },
    updateResources: function () {
        var me = this;
        if (me.$updateTimeout) {
            clearTimeout(me.$updateTimeout);
        }
        me.$updateTimeout = setTimeout(function () {
            var resources = me.$inj.audioResources.getResources();
            me.resources = resources.select(function (t) {
                if (t.resource && t.resource.file) {
                    return ({
                        name: t.resource.file.name,
                        id: t.id,
                        type: 'font'
                    });
                }
                else if (t.name) {
                    return ({
                        name: t.name,
                        id: t.id,
                        type: 'graph'
                    });
                }
            })
        }, 1000)
    },
    viewResource: function (resource, type) {
        var me = this;
        MEPH.publish(MEPH.audio.Constants.VIEW_RESOURCE, resource, type)
    },
    openResources: function () {
        var me = this;
        me.showResource();
    },
    showResource: function () {
        var me = this;
        Style.show(me.resourceloader);
        me.$resourcehidden = false;
        me.updateResources();
    },
    hideResource: function () {
        var me = this;
        if (me.$resourcehidden) { return; }
        Style.hide(me.resourceloader);
        me.$resourcehidden = true;
    },
    showShortCutConfigPanel: function () {
        var me = this;
        Style.show(me.shortcutconfigpanel);
        me.$shotcutConfigPanelHidden = false;
    },
    hideShortCutConfigPanel: function () {
        var me = this;
        if (me.$shotcutConfigPanelHidden) { return; }
        Style.hide(me.shortcutconfigpanel);
        me.$shotcutConfigPanelHidden = true;
    },
    hideSoundFontList: function () {
        var me = this;
        if (me.$fontlisthidden) { return; }
        Style.hide(me.soundfontlistholder);
        me.$fontlisthidden = true;
    },
    showSoundFontList: function () {
        var me = this;
        Style.show(me.soundfontlistholder);
        me.$fontlisthidden = false;
    },
    showSoundFont: function (info) {
        var me = this,
            soundFontInstrument = info.soundfontInstrument;
        me.hideAll();
        var chunks = soundFontInstrument.sampleChunks();
        me.selectedSoundFontId = info.id;
        me.selectedSoundFont = soundFontInstrument.$soundfontfile;
        me.selectedSoundFontChunks = chunks.select(function (x) {
            return ({
                name: x.name,
                id: x.id,
                sid: info.id
            });
        });
        me.showSoundFontList();
    },
    selectSoundFontNotes: function () {
        var me = this,
            scale, selection;

        scale = me.selectedScale;
        me.currentSoundFontSelection.clear();

        if (scale === 'none' || !scale) {
            selection = [].interpolate(parseInt(me.firstMidiNote), parseInt(me.lastMidiNote) + 1, function (x) {
                return x;
            });
        }
        else {
            selection = TheoryScales.getNotesInScale(scale, parseInt(me.firstMidiNote), parseInt(me.lastMidiNote) + 1);
        }
        selection = selection.select(function (x) {
            return {
                name: Notes.convertToNote(x),
                id: x,
                midi: x,
                selected: true,
                sid: me.selectedSoundFontId
            }
        })
        selection.foreach(function (t) {
            me.currentSoundFontSelection.push(t);
        })
    },
    toNote: function (d) {

        var note = Notes.convertToNote(d)
        return note;
    },
    addToSelection: function (chunkid) {
        var me = this;
        var info = me.selectedSoundFontChunks.first(function (x) { return x.id.toString() === chunkid; })
        if (info) {
            me.currentSoundFontSelection.push(info);
        }
    },
    addAllChunks: function () {
        var me = this;
        me.currentSoundFontSelection.clear();
        me.selectedSoundFontChunks.foreach(function (x) {
            x.selected = true;
            me.currentSoundFontSelection.push(x);
        });
    },
    addToSequence: function () {
        var me = this;
        me.currentSoundFontSelection.where(function (x) {
            return x.selected;
        }).foreach(function (x) {

            var sequence = me.addTrackSequence(x.name);
            sequence.setDefaultSoundFont({
                sid: x.sid,
                id: x.id
            });
            if (x.midi) {
                sequence.midiNote(x.midi);
            }
        });
        me.currentSoundFontSelection.clear();
    },
    hideAll: function () {
        var me = this;
        me.hideGraph();
        me.hideSoundFontList();
        me.hideResource();
    },
    hideGraph: function () {
        var me = this;
        if (me.$graphhidden) { return; }
        Style.hide(me.audiographholder);
        if (me.editedSequence) {
            me.editedSequence.saveGraph(me.audiographinstance.saveGraph());
            me.editedSequence = null;
        }
        me.$graphhidden = true;
    },
    showGraph: function () {
        var me = this;
        me.$graphhidden = false;
        Style.show(me.audiographholder);
    },
    showGraphForSequence: function () {
        var me = this,
            hovercells = MEPH.clone(me.hovercells),
            lane = hovercells.first().row;

        var seq = me.sequence.items()[lane];
        if (seq) {
            return Promise.resolve().then(function () {
                return me.audiographinstance || me.createAudioGraph();
            }).then(function (t) {
                if (!me.audiographinstance) {
                    var res = t.first();
                    me.audiographinstance = res.classInstance;
                }
            }).then(function () {
                me.showGraph();
            }).then(function () {
                me.editedSequence = seq.source;
                return me.audiographinstance.loadGraph(JSON.stringify(seq.source.getGraph()));
            }).then(function () {
                me.audiographinstance.resize();
            });;
        }
    },
    updateBeat: function () {
        var me = this;
        if (me.$inj && me.$inj.scheduler) {
            me.$inj.scheduler.bpm = me.bpm;
        }
    },
    onInjectionsComplete: function () {
        var me = this;
        me.updateBeat();
    },
    addShortcut: function () {
        var me = this,
            data = {
                triad: me.selectedTriadType,
                triadExt: me.selectedTriadExtensionType,
                key: me.selectedShortCutKey
            };
        if (me.selectedShortCutKey) {
            me.setCommand(data.key, data.key + ' : shortcut set current chord', me.setCurrentChord.bind(me, data));
            me.chordShortCuts.push(data);
            me.selectedShortCutKey = null;
            me.selectedTriadExtensionType = null;
            me.selectedTriadType = null;
        }
    },
    setCurrentChord: function (data) {
        var me = this;
        me.currentChord = data;
    },
    removeShortCut: function (key) {
        MEPH.publish('removekey', key);
    },
    /**
     * Save sequence.
     **/
    saveSequence: function () {
        var me = this;
        if (me.$inj && me.$inj.audioResources) {
            me.$inj.audioResources.addSequence(me.sequence);
        }
    },
    loadGrandPiano: function () {
        var me = this;
        //if (!me.pianoloaded) {
        me.pianoloaded = true;
        return MEPH.requires('MEPH.audio.music.instrument.piano.GrandPiano').then(function (piano) {

            var grandpiano = new MEPH.audio.music.instrument.piano.GrandPiano();
            return grandpiano.ready().then(function () {
                var sequence = grandpiano.createSequence();
                if (me.$inj && me.$inj.audioResources) {
                    me.$inj.audioResources.addSequence(sequence);
                    me.openSequence(sequence.id);
                }
            })
        })
        //   }
    },
    /**
     * New sequence.
     **/
    newSequence: function () {
        var me = this;
        me.sequence = new MEPH.audio.Sequence();
        me.update();
    },
    /**
     * Opens a sequence
     * @param {String} id
     **/
    openSequence: function (id) {
        var me = this;
        if (me.$inj && me.$inj.audioResources) {
            me.sequence = me.$inj.audioResources.getSequenceInstance(id) || me.sequence;

        }
    },
    setupHeaders: function () {
        var me = this, columns = 2000, rows = 88;
        me.leftheadersource = [].interpolate(0, rows, function (x) {
            return MEPH.util.Observable.observable({
                lane: x,
                time: x,
                length: 1
            });
        });
        me.topheadersource = [].interpolate(0, columns, function (x) {
            return MEPH.Observable.observable({
                lane: 0,
                time: x,
                length: 1
            });
        });
        me.rowheaders = 1;
        me.columnheaders = 1;
        me.columns = columns;
        me.rows = rows;
    },
    setupKeyCommands: function () {
        var me = this;
        me.setContextMenuOpenKey('v');
        me.setTrackResourceOpenKey('t');
        me.setDurationKeys()
        me.setRemoveKey('x');
        me.setSequenceGraphMod('m');
        me.setPlayButton('p');
        me.setClearCurrentChord('q');
        me.updateAvailableShortCutKeys();
    },
    translateToSource: function (sequence) {
        var me = this;
        if (!me.source) {
            me.source = sequence.itemSequences();
        }
        else {
            me.source.clear();
            me.source.push.apply(me.source, sequence.itemSequences());
        }
    },
    setupFunctions: function () {
        var me = this;
        me.time = {
            'function': function (item, offset) {
                if (item && (item.source instanceof MEPH.audio.Audio || item.source instanceof MEPH.audio.Sequence) || typeof item.source === 'string') {
                    return me.scaleValue(item.relativeTimeOffset);
                }
                if (offset === 'left') {
                    return 0;
                }
                return item.time;
            }
        }

        me.lane = {
            'function': function (item, offset) {
                if (item && (item.source instanceof MEPH.audio.Audio || item.source instanceof MEPH.audio.Sequence || typeof item.source === 'string'))
                    return me.sequence.getParentIndexOf(item);

                return item.lane;

            }
        }

        me.settime = {
            'function': function (time, item) {
                if (item && (item.source instanceof MEPH.audio.Audio || item.source instanceof MEPH.audio.Sequence || typeof item.source === 'string')) {
                    time = Math.round(time * me.nearest) / me.nearest;
                    time = me.scaleValue(time)
                    me.sequence.setRelativeTime(item, time);
                    me.update();
                }
                return item;

            }
        }
        me.color = {
            'function': function (item) {
                var result = '#ff0000';
                if (item && (item.source instanceof MEPH.audio.Audio || item.source instanceof MEPH.audio.Sequence)) {
                    var duration = me.sequence.getDuration(item)
                    result = me.getColorForDuration(duration);
                }
                else if (item && typeof item.source === 'string') {
                    if (item.duration === null) {
                        var audio = item.getAudio();
                        var res;
                        if (audio.getSourceDuration)
                            res = audio.getSourceDuration();
                        if (res) {
                            try {
                                res = res * (parseFloat(me.beatspermin) / 60) * me.smallestnote;
                            } catch (e) { res = 0; }
                        }
                        return me.getColorForDuration(me.singleUnit);
                    }
                    result = me.getColorForDuration(item.duration);
                }
                return result;
            }
        }
        me.length = {
            'function': function (item) {
                var result;
                if (item && (item.source instanceof MEPH.audio.Audio || item.source instanceof MEPH.audio.Sequence)) {
                    var duration = me.sequence.getDuration(item)


                    result = duration;
                }
                else if (item && typeof item.source === 'string') {
                    if (item.duration === null) {
                        var audio = item.getAudio();
                        var res;
                        if (audio.getSourceDuration)
                            res = audio.getSourceDuration();
                        if (res) {
                            try {
                                res = res * (parseFloat(me.beatspermin) / 60) * me.smallestnote;
                            } catch (e) { res = 0; }
                        }
                        return me.singleUnit;//res || 
                    }
                    result = item.duration;
                }
                return me.scaleValue(result);
            }
        }
        me.delete = {
            'function': function (items) {

                if (items) {
                    items.foreach(function (item) {
                        var parent = me.sequence.getParent(item);
                        if (parent) {
                            parent.source.remove(item);
                        }
                    });
                    me.translateToSource(me.sequence);
                    me.update();
                }
            }
        }
        me.rowheader = {
            'function': function (item) {

                var seq = me.sequence.items()[item.lane];
                return seq && seq.source ? (seq.source.title || '') : '';
            }
        }
        me.columnheader = {
            'function': function (item) {
                return item.time % me.smallestnote === 0 ? (item.time / me.smallestnote) + " " : null;
            }
        }
    },
    getColorForDuration: function (duration) {
        duration = parseFloat(duration);
        if (isNaN(duration)) {
            duration = 0;
        }
        if (duration >= 32) {
            return '#dabfff';
        }
        else if (duration >= 16) {
            return '#907ad6';
        }
        else if (duration >= 8) {
            return '#4f518c';
        }
        else if (duration >= 4) {
            return '#2c2a4a';
        }
        else if (duration >= 2) {
            return '#7fdeff';
        }
        else if (duration >= 1) {
            return '#204442';
        }
        else if (duration >= -1) {
            return '#7956f';
        }
    },
    scaleValue: function (value) {
        var me = this;
        return parseFloat(me.scalevalue) * value;
    },
    unscaleValue: function (value) {
        var me = this;
        return value / parseFloat(me.scalevalue);
    },
    openContextMenu: function (evt) {
        var me = this,
            form;

        var hovercells = me.hovercells;
        if (evt.currentTarget === me.leftheader) {
            var el = me.getTemplateEl('MEPH.audio.view.sequencer.CanvasHeaderLeftMenu');
            var select = el.querySelector('input');
            select.focus();
            var value;
            Dom.addSimpleDataEntryToElments(me, [{
                element: select,
                setFunc: function (val) {
                    value = val;
                }
            }], el, function () {
                if (value)
                    me.addTrackSequence(value)
            });
            Dom.centerElement(el);
        }
        else {
            me.addSequence(hovercells.first());

            //var el = me.getTemplateEl('MEPH.audio.view.sequencer.CanvasContextMenu');
            //me.$canvasContextMenuEl = el;
            //el.querySelector('[addsequence]').focus();
            //var elements = MEPH.Array(el.querySelectorAll('[addsequence]')).select(function (t) { return { setFunc: function () { }, element: t } });
            //Dom.addSimpleDataEntryToElments(me, elements, el);
            //me.don('click', elements.select(function (t) { return t.element; }), function () {
            //    me.addSequence(hovercells.first());
            //    me.canvas.focus();
            //}, 'button');
        }
    },
    onInjectionsComplete: function () {
        var me = this;
        if (me.$inj.audioResources) {
            MEPH.subscribe(MEPH.audio.AudioResources.RESOURCE_MANAGER_UPDATE, function () {
                me.updateResources();
            });

        }

    },
    openSavedSequence: function () {
        var me = this;
        return new Promise(function (resolve) {
            if (me.$inj.audioResources) {
                var el = me.getTemplateEl('MEPH.audio.view.sequencer.SequencerResourcesSelect');
                var select = el.querySelector('select');
                select.focus();
                var value;
                var sequences = me.$inj.audioResources.getSequences();


                var selectOptions = sequences.select(function (x, index) {
                    return {
                        title: x.title,
                        value: x.id
                    }
                });

                selectOptions.foreach(function (t) {
                    Dom.addOption(t.title, t.value, select);
                });

                Dom.addSimpleDataEntryToElments(me, [{
                    element: select,
                    setFunc: function (val) {
                        value = val;
                    }
                }], el, function () {
                    var val = sequences.first(function (x) { return x.id === value; })
                    if (val)
                        me.openSequence(val.id);
                    resolve();
                });
            }
        })
    },
    selectTrackResource: function (evt) {
        var me = this;
        var hovercells = MEPH.clone(me.hovercells);
        if (me.$inj.audioResources && hovercells) {
            var el = me.getTemplateEl('MEPH.audio.view.sequencer.SequencerResourcesSelect');
            var select = el.querySelector('select');
            select.focus();
            var value;
            var graphs = me.$inj.audioResources.getGraphs();
            var sequences = me.$inj.audioResources.getSequences();


            var selectOptions = graphs.select(function (x, index) {
                return {
                    title: x.name,
                    value: x.id
                }
            });

            sequences.foreach(function (x) {
                selectOptions.push({
                    title: x.title,
                    value: x.id
                });
            });

            selectOptions.foreach(function (t) {
                Dom.addOption(t.title, t.value, select);
            });

            Dom.addSimpleDataEntryToElments(me, [{
                element: select,
                setFunc: function (val) {
                    value = val;
                }
            }], el, function () {
                var val = graphs.first(function (x) { return x.id === value; }) ||
                    sequences.first(function (x) { return x.id === value; })
                me.setTrackResource(hovercells.first().row, val)
            });
        }
    },
    /**
     * Sets the resources which the track will use, and will 
     * set the sources of the sequences.
     ***/
    setTrackResource: function (lane, graph) {
        var me = this, sequence = me.sequence.items()[lane];
        if (sequence) {
            sequence.source.setDefault(graph instanceof MEPH.audio.Sequence ? 'sequence' : 'graph', graph.id)
        }
    },
    /**
     * Set the resources source for each sequence in the row.
     * @param {Object/String} val
     * @param {Object} hovercells
     **/
    addTrackSequence: function (title) {
        var me = this,
            sequence = new MEPH.audio.Sequence({ title: title });
        me.sequence.add(sequence);
        me.update();
        return sequence;
    },
    getCurrentChord: function () {
        var me = this, triad;
        if (me.currentChord) {
            var triad = me.triadTypes.first(function (x) {
                return x.text === me.currentChord.triad;
            });
            var triadExt = me.triadExtensions.first(function (x) {
                return x.text === me.currentChord.triadExt;
            })
            if (triad && triadExt) {
                return triad.triad.concat(triadExt.ext);
            }
            else if (triad) {
                return triad.triad.select();
            }
            else if (triadExt) {
                return triadExt.ext.select();
            }
        }
        return null;
    },
    /**
     * Adds a sequence/audio source to the row at the cell.
     **/
    addSequence: function (location) {
        var me = this,
            sequence,
            row = location.row,
            column = location.column;
        sequence = me.getSequenceItem(row);
        if (sequence) {
            var currentChord = me.getCurrentChord();
            var midiNote = sequence.source.midiNote();
            if (currentChord && midiNote !== null && midiNote !== undefined) {
                me.addChordSequence(currentChord, midiNote, column);
            }
            else {
                sequence.source.add(null, me.unscaleValue(column));
                me.translateToSource(me.sequence);
                var itemtodraw = sequence.source.parts.last();
                me.drawSingleDataItem(itemtodraw);
            }
        }
    },
    getSequenceNotes: function (notes) {
        var me = this,
            sequence = me.sequence,
            items = sequence.items();
        var sequenceNotes = notes.select(function (t) {
            return items.first(function (x) {
                return x.source.midiNote() === t;
            });
        });
        return sequenceNotes;
    },
    removeSequence: function () {
        var me = this,
            location = me.hovercells.first(),
            sequence,
            row = location.row,
            column = location.column;
        sequence = me.getSequenceItem(row);
        if (sequence && me.lastitem) {
            var res = sequence.source.remove(me.lastitem);

            me.translateToSource(me.sequence);
            me.update();
        }
    },
    addSequenceDuration: function (key) {
        var me = this,
            location = me.hovercells.first(),
            sequence,
            row = location.row,
            column = location.column;
        sequence = me.getSequenceItem(row);
        if (sequence) {
            var currentChord = me.getCurrentChord();
            var midiNote = sequence.source.midiNote();
            if (currentChord && midiNote !== null && midiNote !== undefined) {
                me.addChordSequence(currentChord, midiNote, column, key);
            }
            else {
                var res = sequence.source.add(null, me.unscaleValue(column), me.getDuration(key));
                me.translateToSource(me.sequence);
                var itemtodraw = sequence.source.parts.last();
                me.drawSingleDataItem(itemtodraw);
            }
        }
    },
    addChordSequence: function (currentChord, midiNote, column, key) {
        var me = this;
        if (currentChord && midiNote !== null && midiNote !== undefined) {
            var notes = Notes.midiNotes(midiNote, currentChord);
            var sequences = me.getSequenceNotes(notes).where();
            itemtodraw = sequences.concatFluent(function (sequence) {
                sequence.source.add(null, me.unscaleValue(column), key ? me.getDuration(key) : null);
                var itemtodraw = sequence.source.parts.last();
                return itemtodraw;
            });
            me.drawSingleDataItem(itemtodraw)
            me.translateToSource(me.sequence);
        }
    },
    removeSelectedSequences: function (itemstoremove) {
        var me = this;

        me.deleteSelected();
    },
    getDuration: function (key) {
        switch (key) {
            case '1':
                return 16;
            case '2':
                return 8;
            case '3':
                return 6;
            case '4':
                return 4;
            case '5':
                return 2;
            case '6':
                return 1;
            case '0':
                return 64;
            case '9':
                return 32;
            case '8':
                return 24;
            case '7':
                return 20;
            default: return 1;
        }
    },
    /**
     * Get sequence item.
     * @param {Number} item
     * @param {Object}
     ***/
    getSequenceItem: function (item) {
        var me = this;

        return me.sequence.items()[item] || null;
    },
    setTrackResourceOpenKey: function (key) {
        var me = this;

        me.setCommand(key, MEPH.audio.view.AudioSequencer.TrackResource, me.selectTrackResource.bind(me));
    },
    saveSequenceAsWave: function () {
        var me = this;
        if (me.$inj && me.$inj.scheduler) {
            me.$inj.scheduler.render().then(function (x) {
                MEPH.publish(MEPH.audio.Constants.REQUEST_RECORDING, { buffer: { buffer: x.renderedBuffer } });
            });;
        }
    },
    setPlayButton: function (key) {
        var me = this;
        me.setCommand(key, MEPH.audio.view.AudioSequencer.Play, function () {

            if (me.$inj && me.$inj.scheduler) {
                if (!me.$inj.scheduler.playing) {
                    me.$inj.scheduler.sequence(me.sequence);
                    me.$inj.scheduler.play();
                }
                else {
                    me.$inj.scheduler.sequence(me.sequence);
                    me.$inj.scheduler.stop();
                }
            }
        });
        me.setCommand('r', 'render', function () {
            if (me.$inj && me.$inj.scheduler) {
                me.$inj.scheduler.render().then(function (x) {
                    debugger;
                    var res = x;
                }).catch(function (e) {
                    debugger
                })
            }
        })
    },
    setCommand: function (key, commandCode, func) {
        var me = this,
            command;


        me.commands = me.commands || [];
        command = me.commands.first(function (x) {
            return x.command === commandCode;
        });
        if (!command) {
            command = {
                command: commandCode,
                'function': func
            }
            me.commands.push(command);
        }
        command.key = key.toLowerCase();
    },
    setContextMenuOpenKey: function (key) {
        var me = this;
        me.setCommand(key, MEPH.audio.view.AudioSequencer.ContextMenu, me.openContextMenu.bind(me));
    },
    setSequenceGraphMod: function (key) {
        var me = this;
        me.setCommand(key, 'sequencegraphmod', me.showGraphForSequence.bind(me));
    },
    setClearCurrentChord: function (key) {
        var me = this;
        me.setCommand(key, 'clearurrentchord', function () {
            me.currentChord = null;
        });
    },
    setRemoveKey: function (key) {
        var me = this;
        me.setCommand(key, 'RemoveSequence', me.removeSequence.bind(me));
    },
    setDurationKeys: function () {
        var me = this;
        [1, 2, 3, 4, 5, 6, 7, 8, 9, 0].foreach(function (key) {
            me.setCommand(key.toString(), 'AddSequence' + key, me.addSequenceDuration.bind(me, key.toString()));
        });
    },
    //////////////// Sequencer Rendering///
    rowDrawInstruction: function () {
        return null;
    },
    recordWhistle: function () {
        var me = this;
        if (!me.$whistleRecorder && parseFloat(me.timeLength)) {
            me.$whistleRecorder = new MEPH.audio.Audio();
            me.$whistleRecorder.mediastream({
                callback: function (stream) {
                    var video = document.createElement('video');
                    document.body.appendChild(video);
                    video.src = (window.URL && window.URL.createObjectURL(stream)) || stream;;
                    video.autoPlay = true;
                    video.muted = true;
                    video.onloadedmetadata = function (e) {
                        video.play();

                        var audioCtx = me.$whistleRecorder.createContext();
                        var frameCount = Math.ceil(parseFloat(me.timeLength) * audioCtx.sampleRate);
                        var myArrayBuffer = audioCtx.createBuffer(2, frameCount, audioCtx.sampleRate);
                        var c = 0;
                        me.$whistleRecorder.processor({
                            process: function (audioProcessingEvent) {

                                var inputBuffer = audioProcessingEvent.inputBuffer;
                                var length = audioProcessingEvent.inputBuffer.numberOfChannels;
                                var duration = inputBuffer.length;
                                var channeldata;
                                var data;
                                for (var i = length ; i--;) {
                                    channeldata = inputBuffer.getChannelData(i);
                                    data = myArrayBuffer.getChannelData(i);
                                    for (var sample = 0; sample < duration; sample++) {
                                        data[sample + c] = channeldata[sample];
                                    }
                                }
                                c += duration;
                                if (frameCount < c) {
                                    me.$whistleRecorder.disconnect();
                                    me.$whistleRecorder = null;
                                    var b = audioCtx.createBufferSource();
                                    b.buffer = myArrayBuffer;
                                    me.whistleBuffer = { buffer: b };
                                }
                            }

                        }).complete();
                    };
                }
            })
        }
    }
});﻿describe("MEPH/audio/view/AudioSequencer.spec.js", 'MEPH.audio.Audio', 'MEPH.audio.Sequence', 'MEPH.audio.view.AudioSequencer', function () {
    var createSequence = function () {
        var sequence = new MEPH.audio.Sequence();
        var track1 = new MEPH.audio.Sequence();
        var audio = new MEPH.audio.Audio({ id: 'audio' });
        track1.add(audio, 1);
        track1.add(audio, 2);
        track1.add(audio, 3);
        sequence.add(track1, 1);
        sequence.add(track1, 4);
        sequence.add(track1, 7);
        sequence.add(track1, 10);
        return sequence;
    }
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it("can create a AudioSequencer", function () {
        //Arrange

        //Assert
        var audioSequencer = new MEPH.audio.view.AudioSequencer();

        expect(audioSequencer).toBeTruthy();

    });

    it('can render an audiosequencer', function (done) {
        MEPH.render('MEPH.audio.view.AudioSequencer', 'audiosequencer').then(function (r) {
            var results = r.res;
            var app = r.app;

            var dom,
                sequencer = results.first().classInstance;
            ///Assert
            dom = sequencer.getDomTemplate()[0]
            expect(dom).toBeTruthy();
            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        })
    });

    it('can render an set a sequencer to the audiosequencer and render', function (done) {
        //Assert
        var audioSequencer = new MEPH.audio.view.AudioSequencer();
        var sequence = createSequence();
        audioSequencer.sequence = sequence;
        expect(audioSequencer).toBeTruthy();
        setTimeout(function () {
            expect(audioSequencer.source).toBeTruthy();
            done();
        }, 100);
    });

    it('the time function is setup on the audiosequencer', function () {
        var audiosequencer = new MEPH.audio.view.AudioSequencer();
        expect(audiosequencer.time.function).toBeTruthy();
    });

    it('the lane function is setup on the audiosequencer ', function () {
        var audiosequencer = new MEPH.audio.view.AudioSequencer();;
        expect(audiosequencer.lane.function).toBeTruthy();
    })

    it('the settimeFunc function is setup on the audiosequencer ', function () {
        var audiosequencer = new MEPH.audio.view.AudioSequencer();
        expect(audiosequencer.settime.function).toBeTruthy();
    });

    it('the lengthFunc function is setup on the audiosequencer', function () {
        var audiosequencer = new MEPH.audio.view.AudioSequencer();
        expect(audiosequencer.length.function).toBeTruthy();
    })

    it('the rowheader function is setup on the audiosequencer ', function () {
        var audiosequencer = new MEPH.audio.view.AudioSequencer();
        expect(audiosequencer.rowheader.function).toBeTruthy();
    })
    it('the columnheader function is setup on the audiosequencer', function () {
        var audiosequencer = new MEPH.audio.view.AudioSequencer();
        expect(audiosequencer.columnheader.function).toBeTruthy();
    })

    it('the leftheadersource is setup on the audiosequencer', function () {
        var audiosequencer = new MEPH.audio.view.AudioSequencer();
        expect(audiosequencer.leftheadersource).toBeTruthy();
    })

    it('the topheadersource is setup on the audiosequencer', function () {
        var audiosequencer = new MEPH.audio.view.AudioSequencer();
        expect(audiosequencer.topheadersource).toBeTruthy();
    })

    it('the rowheaders is setup on the audiosequencer', function () {
        var audiosequencer = new MEPH.audio.view.AudioSequencer();
        expect(audiosequencer.rowheaders).toBeTruthy();
    })


    it('the columnheaders is setup on the audiosequencer', function () {
        var audiosequencer = new MEPH.audio.view.AudioSequencer();
        expect(audiosequencer.columnheaders).toBeTruthy();
    })

    it('the time function can get the time of an item in the sequence', function () {
        var audiosequencer = new MEPH.audio.view.AudioSequencer();
        var sequence = createSequence();
        audiosequencer.sequence = sequence;
        var item = sequence.itemSequences().first();

        var time = audiosequencer.time.function(item);
        expect(time).toBe(1);
    });


    it('the lane function get the lane of an item in the sequence ', function () {
        var audiosequencer = new MEPH.audio.view.AudioSequencer();
        var sequence = createSequence();

        audiosequencer.sequence = sequence;
        var item = sequence.itemSequences().first();

        var item = audiosequencer.lane.function(item);

        expect(item).toBe(0);
    })

    it('the settime function get the lane of an item in the sequence ', function () {
        var audiosequencer = new MEPH.audio.view.AudioSequencer();
        var sequence = createSequence();

        audiosequencer.sequence = sequence;
        var item = sequence.itemSequences().first();

        var item = audiosequencer.settime.function(0, item);

        expect(item.relativeTimeOffset).toBe(0);
    });

    it('can setup a key press variable to execute a command', function (done) {
        MEPH.render('MEPH.audio.view.AudioSequencer', 'audiosequencer').then(function (r) {
            var results = r.res;
            var app = r.app, called;

            var sequencer = results.first().classInstance;
            sequencer.hovercells = [{ column: 0, row: 0 }]
            sequencer.addSequence = function () { called = true; }
            sequencer.setContextMenuOpenKey('t');

            sequencer.dispatchEvent('keypress', { which: 't'.charCodeAt(0) }, sequencer.canvas);

            expect(called).toBeTruthy();

            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });

    it('can save a sequence to the audioresources', function (done) {
        MEPH.render('MEPH.audio.view.AudioSequencer', 'audiosequencer').then(function (r) {
            var results = r.res;
            var app = r.app, called;

            var sequencer = results.first().classInstance;

            sequencer.$inj = {
                audioResources: {
                    addSequence: function () {
                        called = true;
                    }
                }
            }

            sequencer.saveSequence();
            expect(called).toBeTruthy();
            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });

    it('can create a new sequence', function (done) {
        MEPH.render('MEPH.audio.view.AudioSequencer', 'audiosequencer').then(function (r) {
            var results = r.res;
            var app = r.app, called;

            var sequencer = results.first().classInstance;
            var old = sequencer.sequence;

            sequencer.newSequence();
            expect(old !== sequencer.sequence).toBeTruthy();
            expect(sequencer.sequence instanceof MEPH.audio.Sequence).toBeTruthy();

            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });

    it('can create a open sequence', function (done) {
        MEPH.render('MEPH.audio.view.AudioSequencer', 'audiosequencer').then(function (r) {
            var results = r.res;
            var app = r.app, called;

            var sequencer = results.first().classInstance;
            var old = sequencer.sequence;
            sequencer.$inj = {
                audioResources: {
                    getSequenceInstance: function () {
                        return old;
                    }
                }
            }
            sequencer.newSequence();
            sequencer.openSequence(old.id);
            expect(old === sequencer.sequence).toBeTruthy();
            expect(sequencer.sequence instanceof MEPH.audio.Sequence).toBeTruthy();

            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });

});﻿/**
 * @class MEPH.audio.view.AudioResourceManager
 * @extends MEPH.table.Sequencer
 * Standard form for a input field.
 **/
MEPH.define('MEPH.audio.view.AudioResourceManager', {
    alias: 'audioresourcemanager',
    templates: true,
    scripts: [],
    extend: 'MEPH.control.Control',
    requires: ['MEPH.audio.Audio',
        'MEPH.audio.AudioResources',
        'MEPH.input.Text',
        'MEPH.audio.Sequence',
        'MEPH.util.Dom',
        'MEPH.audio.Constants',
        'MEPH.util.Observable'],
    statics: {
    },
    injections: ['audioResources'],
    properties: {
        audiobuffers: null,
        audiobuffer: null,
        audioGraphs: null,
        audiograph: null
    },
    initialize: function () {
        var me = this;

        me.great()
    },
    onLoaded: function () {
        var me = this;
        me.great()

        MEPH.subscribe(MEPH.audio.AudioResources.RESOURCE_MANAGER_UPDATE, me.onInjectionsComplete.bind(me));
        MEPH.subscribe('select_audio_buffer_resourcemanager', function (type, args) {
            me.audiobuffer = args.buffer;
        })
        MEPH.subscribe('select_audio_graph_resourcemanager', function (type, args) {
            me.audiograph = args.graph;
        })
    },
    onAudioGraphSaved: function () {
        var me = this;
        debugger
    },
    onInjectionsComplete: function () {
        var me = this;

        if (me.$inj.audioResources) {
            me.audiobuffers = me.$inj.audioResources.getResources();
            me.audioGraphs = me.$inj.audioResources.getGraphs();
        }
    },
    viewAudioBuffer: function (audioBuffer) {
        var me = this;
        MEPH.publish('select_audio_buffer_resourcemanager', { buffer: audioBuffer });
    },
    viewGraphData: function (graph) {
        var me = this;
        MEPH.publish('select_audio_graph_resourcemanager', { graph: graph });
    }
})﻿describe("MEPH/audio/view/AudioResourceManager.spec.js", 'MEPH.audio.view.AudioResourceManager', function () {

    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it("can create a AudioResourceManager", function () {
        //Arrange

        //Assert
        var manager = new MEPH.audio.view.AudioResourceManager();

        expect(manager).toBeTruthy();

    });

});﻿//MEPH.audio.soundfont.SFObject
describe("MEPH/audio/soundfont/utils/SFByteArray.spec.js", 'MEPH.audio.soundfont.utils.SFByteArray', function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create an sfarray', function () {
        var sfarray = new MEPH.audio.soundfont.utils.SFByteArray();

        expect(sfarray).toBeTruthy();
    });

});﻿//MEPH.audio.soundfont.SFObject
describe("MEPH/audio/soundfont/chunks/data/operators/StartAddressOffset.spec.js", 'MEPH.audio.soundfont.chunks.data.operators.StartAddressOffset', function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create an startaddressoffset', function () {
        var startaddressoffset= new MEPH.audio.soundfont.chunks.data.operators.StartAddressOffset();

        expect(startaddressoffset).toBeTruthy();
    });

});﻿describe("MEPH/audio/soundfont/chunks/data/operators/SampleOperator.spec.js", 'MEPH.audio.soundfont.chunks.data.operators.SampleOperator', function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create an sampleoperator', function () {
        var sampleoperator = new MEPH.audio.soundfont.chunks.data.operators.SampleOperator();

        expect(sampleoperator).toBeTruthy();
    });

});﻿describe("MEPH/audio/soundfont/chunks/data/operators/RangeOperator.spec.js", 'MEPH.audio.soundfont.chunks.data.operators.RangeOperator', function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create an rangeoperator', function () {
        var rangeoperator = new MEPH.audio.soundfont.chunks.data.operators.RangeOperator(Operator.KEY_RANGE, [0]);

        expect(rangeoperator).toBeTruthy();
    });

});﻿describe("MEPH/audio/soundfont/chunks/data/operators/OperatorFactory.spec.js", 'MEPH.audio.soundfont.chunks.data.operators.OperatorFactory', function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create an operator factory', function () {
        var operatorFactory = new MEPH.audio.soundfont.chunks.data.operators.OperatorFactory();

        expect(operatorFactory).toBeTruthy();
    });

});﻿describe("MEPH/audio/soundfont/chunks/data/operators/KeyRange.spec.js", 'MEPH.audio.soundfont.chunks.data.operators.KeyRange', function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create an keyrange', function () {
        var keyrange = new MEPH.audio.soundfont.chunks.data.operators.KeyRange([1, 2, 3, 4]);

        expect(keyrange).toBeTruthy();
    });

});﻿/////
describe("MEPH/audio/soundfont/chunks/data/operators/Operator.spec.js", 'MEPH.audio.soundfont.chunks.data.operators.Operator', function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create an operator ', function () {
        var operator = new MEPH.audio.soundfont.chunks.data.operators.Operator();

        expect(operator).toBeTruthy();
    });

});﻿describe("MEPH/audio/soundfont/chunks/data/ZoneRecord.spec.js", 'MEPH.audio.soundfont.chunks.data.ZoneRecord', function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create an zonerecord', function () {
        var sfobject = new MEPH.audio.soundfont.chunks.data.ZoneRecord();

        expect(sfobject).toBeTruthy();
    });

});﻿
describe("MEPH/audio/soundfont/chunks/data/GeneratorsSubchunk.spec.js", 'MEPH.audio.soundfont.chunks.data.GeneratorsSubchunk', function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create an zonerecord', function () {
        var generatorsSubchunk = new MEPH.audio.soundfont.chunks.data.GeneratorsSubchunk();

        expect(generatorsSubchunk).toBeTruthy();
    });

}); ﻿describe("MEPH/audio/soundfont/chunks/data/GeneratorRecord.spec.js", 'MEPH.audio.soundfont.chunks.data.GeneratorRecord', function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create an zonerecord', function () {
        var generatorrecord= new MEPH.audio.soundfont.chunks.data.GeneratorRecord();

        expect(generatorrecord).toBeTruthy();
    });

});﻿//MEPH.audio.soundfont.SFObject
describe("MEPH/audio/soundfont/chunks/Subchunk.spec.js", 'MEPH.audio.soundfont.chunks.Subchunk', function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create an subchunk', function () {
        var subchunk = new MEPH.audio.soundfont.chunks.Subchunk();

        expect(subchunk).toBeTruthy();
    });

});﻿//MEPH.audio.soundfont.ZoneContainer
describe("MEPH/audio/soundfont/ZoneContainer.spec.js", function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create an zonecontainer', function (done) {
        MEPH.requires('MEPH.audio.soundfont.ZoneContainer').then(function () {
            var zonecontainer = new MEPH.audio.soundfont.ZoneContainer();

            expect(zonecontainer).toBeTruthy();
        }).catch(function(e){
            expect(e).caught();
        }).then(function(){
            done();
        });
    });

});﻿//MEPH.audio.soundfont.SFObject
describe("MEPH/audio/soundfont", 'MEPH.audio.soundfont.SFObject', function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create an sfobject', function () {
        var sfobject = new MEPH.audio.soundfont.SFObject();

        expect(sfobject).toBeTruthy();
    });

});﻿describe("MEPH/audio/sbsms/Util.spec.js", 'MEPH.audio.sbsms.Util', function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create an audio', function () {
        var audio = new MEPH.audio.sbsms.Util();

        expect(audio).toBeTruthy();
    });

});﻿/**
 * @class MEPH.audio.sbsms.Track
 **/
var PhShift = 5;
var WShift = 21;
var Ph1 = 65535;
var WPI = 536870912;
var W2PI = 1073741824;
var W2PIMask = 1073741823;
var WScale = 1.708913188941079e8;
var MScale = 4.656683928435187e-10;
window.SynthMode = {
    synthModeOutput: 0,
    synthModeTrial2: 1,
    synthModeTrial1: 2
};
MEPH.define('MEPH.audio.sbsms.Track', {
    statics: {
    },
    properties: {
        //vector<TrackPoint*> point;
        point: null,
        //float h;
        h: 0,
        //float jumpThresh;
        jumpThresh: 0,
        //TrackIndexType index;
        index: null,
        //TimeType start;
        start: null,
        //TimeType first;
        first: null,
        //TimeType end;
        end: null,
        //TimeType last;
        last: null,
        //bool bEnd;
        bEnd: null,
        ///bool bEnded;
        bEnded: null,
        //bool bRender;
        bRender: null,
        //bool bStitch;
        bStitch: null,
        //bool bSplit;
        bSplit: null,
        //bool bMerge;
        bMerge: null
    },
    //float h, TrackIndexType index, TrackPoint *p, const TimeType &time, bool bStitch
    initialize: function (h, index, p, time, bStitch) {
        var me = this;
        me.h = h;
        me.jumpThresh = 1.0e-5 * h;
        me.index = index;
        me.bEnd = false;
        me.bEnded = false;
        me.bRender = false;
        me.bSplit = false;
        me.bMerge = false;
        me.first = time;
        me.start = time;
        if (me.bStitch) {
            me.bStitch = true;
        } else {
            me.bStitch = false;
            if (me.start > 0) {
                me.start--;
            }
        }
        me.point = me.point || [];
        if (p)//this is added
            me.point.push(p);
        p.owner = this;
        p.refCount++;
        me.end = time;
        me.last = time;
    },
    //TrackIndexType Track :: 
    getIndex: function () {
        var me = this;
        return me.index;
    },
    //bool Track :: //const TimeType &time
    isFirst: function (time) {
        var me = this;
        return (time == me.first);
    },
    //bool Track :: //const TimeType &
    isLast: function (time) {
        var me = this;
        return (time == me.last);
    },
    ///TimeType Track :: 
    size: function () {
        var me = this;
        return me.point.length;
    },
    //TrackPoint *Track :: 
    back: function () {
        var me = this;
        return me.point.last();
    },
    //TrackPoint *Track :: //const TimeType &
    getTrackPoint: function (time) {
        var me = this;
        return me.point[time - me.first];
    },
    //SBSMSTrackPoint *Track :: //const TimeType &time
    getSBSMSTrackPoint: function (time) {
        var me = this;

        return me.getTrackPoint(time);
    },
    //bool Track :: //TrackPoint *tp0, TrackPoint *tp1
    jump: function (tp0, tp1) {
        var me = this;
        if (me.tp1.m > me.tp0.m) {
            var cost = 1.0e-4 * dBApprox(tp0.m, tp1.m);
            return (cost > me.jumpThresh);
        } else {
            return false;
        }
    },
    //TrackPoint *Track ::            
    //const TimeType &time, int mode, int n, float f0, float f1
    updateFPH: function (time, mode, n, f0, f1) {
        var U = MEPH.audio.sbsms.Util;
        var me = this;
        if (time === me.start && time < me.first) {
            var tp1 = me.getTrackPoint(time + 1);
            tp1.fSynth1 = Math.max(0.0, Math.min(6.0, f1 * tp1.f));
            tp1.fSynth0 = tp1.fSynth1;
            tp1.phSynth = tp1.ph;
            if (mode == SynthMode.synthModeOutput && me.tp1.dupStereo) {
                return tp1;
            }
        } else if (time == me.last) {
            if (me.last < me.end) {
                var tp0 = me.getTrackPoint(time);
                tp0.fSynth0 = tp0.fSynth1;
            }
        } else {
            var tp0 = me.getTrackPoint(time);
            var tp1 = me.getTrackPoint(time + 1);

            if (mode == SynthMode.synthModeOutput) {
                if (tp0.dupStereo && tp1.dupStereo && tp0.dupStereo.owner == tp1.dupStereo.owner) {
                    var dp = tp1.ph - tp0.ph;
                    var dp0 = 0.5 * h * (tp0.f + tp1.f);
                    var dw = U.canonPI(dp - dp0) / h;
                    var dpStereo = tp1.dupStereo.ph - tp0.dupStereo.ph;
                    var dp0Stereo = 0.5 * h * (tp0.dupStereo.f + tp1.dupStereo.f);
                    var dwStereo = U.canonPI(dpStereo - dp0Stereo) / h;
                    if (dw > .0013 * (tp0.f + tp1.f)) {
                        dw = 0;
                        dwStereo = 0;
                    } else if (dwStereo > .0013 * (tp0.dupStereo.f + tp1.dupStereo.f)) {
                        dwStereo = 0;
                    }
                    var w0 = 0.5 * (tp0.f + tp0.dupStereo.f + dw + dwStereo);
                    var w1 = 0.5 * (tp1.f + tp1.dupStereo.f + dw + dwStereo);
                    var dwSynth = 0.5 * U.canonPI(dp - dpStereo) / n;
                    if (!(bSplit && time == first)) {
                        tp0.fSynth0 = Math.max(0.0, Math.min(6.0, f0 * (w0 + dwSynth)));
                    }
                    if (!(bMerge && time + 1 == last)) {
                        tp1.fSynth1 = Math.max(0.0, Math.min(6.0, f1 * (w1 + dwSynth)));
                    }
                } else {
                    var dp = tp1.ph - tp0.ph;
                    var dp0 = 0.5 * h * (tp0.f + tp1.f);
                    var dw = U.canonPI(dp - dp0) / h;
                    if (dw > .0013 * (tp0.f + tp1.f)) {
                        dw = 0;
                    }
                    if (!(bSplit && time == first)) {
                        tp0.fSynth0 = Math.max(0.0, Math.min(6.0, f0 * (tp0.f + dw)));
                    }
                    if (!(bMerge && time + 1 == last)) {
                        tp1.fSynth1 = Math.max(0.0, Math.min(6.0, f1 * (tp1.f + dw)));
                    }
                }

                if (!(tp0.bSplit || tp0.bMerge || tp1.bSplit || tp1.bMerge) && me.jump(tp0, tp1)) {
                    tp1.bJump = true;
                    if (tp0.dupStereo && tp1.dupStereo) {
                        if (tp0.dupStereo.owner == tp1.dupStereo.owner) {
                            tp1.bSyncStereo = !me.jump(tp0.dupStereo, tp1.dupStereo);
                        }
                    }
                }

                if (!tp0.bSplit) {
                    if (tp0.bJump) {
                        if (tp0.bSyncStereo) {
                            tp0.phSynth = U.canon2PI(tp0.dupStereo.phSynth + tp0.ph - tp0.dupStereo.ph);
                        } else {
                            tp0.phSynth = tp0.ph;
                        }
                    }
                }

                if (!(me.bMerge && time + 1 == me.last)) {
                    var dw = (tp1.fSynth1 - tp0.fSynth0) / n;
                    var w = tp0.fSynth0 + 0.5 * dw;
                    var iw = lrintf(w * WScale) / WScale;
                    var idw = lrintf(dw * WScale) / WScale;
                    tp1.phSynth = U.canon2PI(tp0.phSynth + n * iw + ((n * (n - 1)) >> 1) * idw);
                }
            } else {
                var dp = tp1.ph - tp0.ph;
                var dp0 = 0.5 * h * (tp0.f + tp1.f);
                var dw = U.canonPI(dp - dp0) / h;
                if (dw > .0013 * (tp0.f + tp1.f)) {
                    dw = 0;
                }
                if (!(me.bSplit && time == me.first)) {
                    tp0.fSynth0 = Math.max(0.0, Math.min(6.0, f0 * (tp0.f + dw)));
                    tp0.phSynth = tp0.ph;
                }
                if (!(me.bMerge && time + 1 == me.last)) {
                    tp1.fSynth1 = Math.max(0.0, Math.min(6.0, f1 * (tp1.f + dw)));
                    tp1.phSynth = tp1.ph;
                }
            }
        }
        return null;
    },
    //void Track :: //const TimeType &time, int mode
    updateM: function (time, mode) {
        var me = this;
        if (mode == synthModeTrial2) {
            if (time == me.first && time == me.start) {
                var tp0 = me.getTrackPoint(time);
                tp0.m = (tp0.m2 > 0.0 ? Math.sqrt(tp0.m2) : 0.0);
            }
            if (time < me.last) {
                var tp1 = me.getTrackPoint(time + 1);
                tp1.m = (tp1.m2 > 0.0 ? Math.sqrt(tp1.m2) : 0.0);
            }
        }
    },
    //void Track :: //const TimeType &time
    step: function (time) {
        var me = this;
        if (time > me.first && time < me.last) {
            var tp = me.point[time - first];
            tp.destroy();
            me.point[time - me.first] = null;
        }
    },
    //void Track :: //TrackPoint *
    push_back: function (p) {
        var me = this;

        me.point.push(p);
        p.owner = this;
        p.refCount++;
        me.last++;
        me.end++;
    },
    //void Track :: //bool bStitch
    endTrack: function (bStitch) {
        if (bStitch) {
            this.bStitch = true;
        } else {
            me.end++;
        }
        me.bEnded = true;
    },

    //void Track :: ////var *out, const TimeType &time,    int n,    int mode,    int c
    synth: function (out, time, n, mode, c) {
        //Probably need to change the out parameter to something i can send data out through.
        var me = this;
        var m0, m1;
        var w0, w1;
        // unused   var dw;
        var ph0, ph1;
        var bTailStart;
        var bTailEnd;
        if (time >= me.end) return;
        if (time < me.last) {
            var tp1 = me.getTrackPoint(time + 1);
            w1 = tp1.fSynth1;
            m1 = tp1.m;
            ph1 = tp1.phSynth;
            if (me.bMerge && time + 1 == me.last) {
                m1 = 0.0;
            }
            bTailStart = tp1.bJump;
            bTailEnd = tp1.bJump;
        } else {
            bTailStart = false;
            bTailEnd = (me.last != me.end);
        }
        if (time >= me.first) {
            var tp0 = me.getTrackPoint(time);
            w0 = tp0.fSynth0;
            m0 = tp0.m;
            ph0 = tp0.phSynth;
            if (me.bSplit && time == me.first) {
                m0 = 0.0;
            }
        } else {
            bTailStart = true;
        }

        if (bTailEnd) {
            var fall = Math.min(n, w0 == 0.0 ? 384 : Math.min(384, lrintf(Math.PI * 4.0 / w0)));
            var dm = m0 / fall;
            var w = w0;
            var out2 = out;
            var end = out + fall;
            var iph = lrintf(ph0 * WScale);
            if (iph >= W2PI) iph -= W2PI;
            var iw = lrintf(w * WScale);
            while (out2 != end) {
                if (iw < WPI) {
                    var f = (iph >> PhShift) & Ph1;
                    var i = iph >> WShift;
                    out2 += m0 * (synthTable1[i] + f * synthTable2[i]);
                }
                out2++;
                m0 -= dm;
                iph += iw;
                iph &= W2PIMask;
            }
        }

        if (bTailStart) {
            var rise = Math.min(n, w1 == 0.0 ? 384 : Math.min(384, lrintf(Math.PI * 3.0 / w1)));
            var dm = m1 / rise;
            var w = w1;
            out += n;
            var end = out - rise;
            var iph = lrintf(ph1 * WScale);
            iph &= W2PIMask;
            var iw = lrintf(w * WScale);
            while (out != end) {
                out--;
                m1 -= dm;
                iph -= iw;
                if (iph < 0) iph += W2PI;
                if (iw < WPI) {
                    var f = (iph >> PhShift) & Ph1;
                    var i = iph >> WShift;
                    out += m1 * (synthTable1[i] + f * synthTable2[i]);
                }
            }
        }

        if (!(bTailStart || bTailEnd)) {
            var dw = (w1 - w0) / n;
            var w = w0 + 0.5 * dw;
            var dm = (m1 - m0) / n;
            var iph = lrintf(ph0 * WScale);
            if (iph >= W2PI) iph -= W2PI;
            var iw = lrintf(w * WScale);
            var idw = lrintf(dw * WScale);

            var end = out + n;
            while (out != end) {
                if (iw < WPI) {
                    var f = (iph >> PhShift) & Ph1;
                    var i = iph >> WShift;
                    out += m0 * (synthTable1[i] + f * synthTable2[i]);
                }
                iph += iw;
                iw += idw;
                iph &= W2PIMask;
                m0 += dm;
                out++;
            }
        }
    },
    //void Track :: 
    absorb: function () {
        //for(vector<TrackPoint*>::iterator i = point.begin();
        //    i != point.end();
        //++i) {
        //    TrackPoint *tp = (*i);
        //    tp.absorb();
        //}
        var me = this;
        me.point.foreach(function (tp) {
            tp.absorb();
        })
    }


}).then(function () {
    window.synthTable1 = [2147450880, 2147319810, 2146795530, 2146009110, 2144895015, 2143387710, 2141618265, 2139521145, 2137096350, 2134343880, 2131329270, 2127921450,
        2124185955, 2120188320, 2115863010, 2111144490, 2106163830, 2100921030, 2095285020, 2089321335, 2083095510, 2076542010, 2069660835, 2062451985, 2054980995, 2047182330,
        2039055990, 2030667510, 2021951355, 2012907525, 2003536020, 1993902375, 1984006590, 1973783130, 1963231995, 1952418720, 1941277770, 1929874680, 1918143915, 1906151010,
        1893895965, 1881313245, 1868468385, 1855361385, 1841926710, 1828229895, 1814270940, 1800049845, 1785566610, 1770755700, 1755748185, 1740412995, 1724881200, 1709021730,
        1692965655, 1676581905, 1660001550, 1643159055, 1626054420, 1608753180, 1591124265, 1573364280, 1555276620, 1536992355, 1518445950, 1499702940, 1480763325, 1461561570,
        1442163210, 1422502710, 1402645605, 1382591895, 1362341580, 1341829125, 1321185600, 1300279935, 1279243200, 1257944325, 1236514380, 1214887830, 1193064675, 1171044915,
        1148894085, 1126546650, 1104002610, 1081327500, 1058455785, 1035453000, 1012319145, 988988685, 965527155, 941934555, 918145350, 894290610, 870239265, 846056850,
        821808900, 797364345, 772854255, 748213095, 723440865, 698603100, 673634265, 648534360, 623368920, 598137945, 572775900, 547282785, 521789670, 496165485, 470541300,
        444786045, 418965255, 393078930, 367127070, 341109675, 315092280, 289009350, 262860885, 236712420, 210498420, 184218885, 158004885, 131659815, 105380280, 79035210,
        52690140, 26345070, 0, -26345070, -52690140, -79035210, -105380280, -131659815, -158004885, -184218885, -210498420, -236712420, -262860885, -289009350, -315092280,
        -341109675, -367127070, -393078930, -418965255, -444786045, -470541300, -496165485, -521789670, -547282785, -572775900, -598137945, -623368920, -648534360, -673634265,
        -698603100, -723440865, -748213095, -772854255, -797364345, -821808900, -846056850, -870239265, -894290610, -918145350, -941934555, -965527155, -988988685, -1012319145,
        -1035453000, -1058455785, -1081327500, -1104002610, -1126546650, -1148894085, -1171044915, -1193064675, -1214887830, -1236514380, -1257944325, -1279243200, -1300279935,
        -1321185600, -1341829125, -1362341580, -1382591895, -1402645605, -1422502710, -1442163210, -1461561570, -1480763325, -1499702940, -1518445950, -1536992355, -1555276620,
        -1573364280, -1591124265, -1608753180, -1626054420, -1643159055, -1660001550, -1676581905, -1692965655, -1709021730, -1724881200, -1740412995, -1755748185, -1770755700,
        -1785566610, -1800049845, -1814270940, -1828229895, -1841926710, -1855361385, -1868468385, -1881313245, -1893895965, -1906151010, -1918143915, -1929874680, -1941277770,
        -1952418720, -1963231995, -1973783130, -1984006590, -1993902375, -2003536020, -2012907525, -2021951355, -2030667510, -2039055990, -2047182330, -2054980995, -2062451985,
        -2069660835, -2076542010, -2083095510, -2089321335, -2095285020, -2100921030, -2106163830, -2111144490, -2115863010, -2120188320, -2124185955, -2127921450, -2131329270,
        -2134343880, -2137096350, -2139521145, -2141618265, -2143387710, -2144895015, -2146009110, -2146795530, -2147319810, -2147450880, -2147319810, -2146795530, -2146009110,
        -2144895015, -2143387710, -2141618265, -2139521145, -2137096350, -2134343880, -2131329270, -2127921450, -2124185955, -2120188320, -2115863010, -2111144490, -2106163830,
        -2100921030, -2095285020, -2089321335, -2083095510, -2076542010, -2069660835, -2062451985, -2054980995, -2047182330, -2039055990, -2030667510, -2021951355, -2012907525,
        -2003536020, -1993902375, -1984006590, -1973783130, -1963231995, -1952418720, -1941277770, -1929874680, -1918143915, -1906151010, -1893895965, -1881313245, -1868468385,
        -1855361385, -1841926710, -1828229895, -1814270940, -1800049845, -1785566610, -1770755700, -1755748185, -1740412995, -1724881200, -1709021730, -1692965655, -1676581905,
        -1660001550, -1643159055, -1626054420, -1608753180, -1591124265, -1573364280, -1555276620, -1536992355, -1518445950, -1499702940, -1480763325, -1461561570, -1442163210,
        -1422502710, -1402645605, -1382591895, -1362341580, -1341829125, -1321185600, -1300279935, -1279243200, -1257944325, -1236514380, -1214887830, -1193064675, -1171044915,
        -1148894085, -1126546650, -1104002610, -1081327500, -1058455785, -1035453000, -1012319145, -988988685, -965527155, -941934555, -918145350, -894290610, -870239265,
        -846056850, -821808900, -797364345, -772854255, -748213095, -723440865, -698603100, -673634265, -648534360, -623368920, -598137945, -572775900, -547282785, -521789670,
        -496165485, -470541300, -444786045, -418965255, -393078930, -367127070, -341109675, -315092280, -289009350, -262860885, -236712420, -210498420, -184218885, -158004885,
        -131659815, -105380280, -79035210, -52690140, -26345070, 0, 26345070, 52690140, 79035210, 105380280, 131659815, 158004885, 184218885, 210498420, 236712420, 262860885,
        289009350, 315092280, 341109675, 367127070, 393078930, 418965255, 444786045, 470541300, 496165485, 521789670, 547282785, 572775900, 598137945, 623368920, 648534360,
        673634265, 698603100, 723440865, 748213095, 772854255, 797364345, 821808900, 846056850, 870239265, 894290610, 918145350, 941934555, 965527155, 988988685, 1012319145,
        1035453000, 1058455785, 1081327500, 1104002610, 1126546650, 1148894085, 1171044915, 1193064675, 1214887830, 1236514380, 1257944325, 1279243200, 1300279935, 1321185600,
        1341829125, 1362341580, 1382591895, 1402645605, 1422502710, 1442163210, 1461561570, 1480763325, 1499702940, 1518445950, 1536992355, 1555276620, 1573364280, 1591124265,
        1608753180, 1626054420, 1643159055, 1660001550, 1676581905, 1692965655, 1709021730, 1724881200, 1740412995, 1755748185, 1770755700, 1785566610, 1800049845, 1814270940,
        1828229895, 1841926710, 1855361385, 1868468385, 1881313245, 1893895965, 1906151010, 1918143915, 1929874680, 1941277770, 1952418720, 1963231995, 1973783130, 1984006590,
        1993902375, 2003536020, 2012907525, 2021951355, 2030667510, 2039055990, 2047182330, 2054980995, 2062451985, 2069660835, 2076542010, 2083095510, 2089321335, 2095285020,
        2100921030, 2106163830, 2111144490, 2115863010, 2120188320, 2124185955, 2127921450, 2131329270, 2134343880, 2137096350, 2139521145, 2141618265, 2143387710, 2144895015,
        2146009110, 2146795530, 2147319810];
    window.synthTable2 = [-2, -8, -12, -17, -23, -27, -32, -37, -42, -46, -52, -57, -61, -66, -72, -76, -80, -86, -91, -95, -100, -105, -110, -114, -119, -124, -128, -133, -138,
        -143, -147, -151, -156, -161, -165, -170, -174, -179, -183, -187, -192, -196, -200, -205, -209, -213, -217, -221, -226, -229, -234, -237, -242, -245, -250, -253, -257,
        -261, -264, -269, -271, -276, -279, -283, -286, -289, -293, -296, -300, -303, -306, -309, -313, -315, -319, -321, -325, -327, -330, -333, -336, -338, -341, -344, -346,
        -349, -351, -353, -356, -358, -360, -363, -364, -367, -369, -370, -373, -374, -376, -378, -379, -381, -383, -384, -385, -387, -389, -389, -391, -391, -393, -394, -395,
        -396, -397, -397, -398, -399, -399, -400, -401, -400, -402, -401, -402, -402, -402, -402, -402, -402, -402, -402, -401, -402, -400, -401, -400, -399, -399, -398, -397,
        -397, -396, -395, -394, -393, -391, -391, -389, -389, -387, -385, -384, -383, -381, -379, -378, -376, -374, -373, -370, -369, -367, -364, -363, -360, -358, -356, -353,
        -351, -349, -346, -344, -341, -338, -336, -333, -330, -327, -325, -321, -319, -315, -313, -309, -306, -303, -300, -296, -293, -289, -286, -283, -279, -276, -271, -269,
        -264, -261, -257, -253, -250, -245, -242, -237, -234, -229, -226, -221, -217, -213, -209, -205, -200, -196, -192, -187, -183, -179, -174, -170, -165, -161, -156, -151,
        -147, -143, -138, -133, -128, -124, -119, -114, -110, -105, -100, -95, -91, -86, -80, -76, -72, -66, -61, -57, -52, -46, -42, -37, -32, -27, -23, -17, -12, -8, -2, 2,
        8, 12, 17, 23, 27, 32, 37, 42, 46, 52, 57, 61, 66, 72, 76, 80, 86, 91, 95, 100, 105, 110, 114, 119, 124, 128, 133, 138, 143, 147, 151, 156, 161, 165, 170, 174, 179, 183,
        187, 192, 196, 200, 205, 209, 213, 217, 221, 226, 229, 234, 237, 242, 245, 250, 253, 257, 261, 264, 269, 271, 276, 279, 283, 286, 289, 293, 296, 300, 303, 306, 309, 313,
        315, 319, 321, 325, 327, 330, 333, 336, 338, 341, 344, 346, 349, 351, 353, 356, 358, 360, 363, 364, 367, 369, 370, 373, 374, 376, 378, 379, 381, 383, 384, 385, 387, 389,
        389, 391, 391, 393, 394, 395, 396, 397, 397, 398, 399, 399, 400, 401, 400, 402, 401, 402, 402, 402, 402, 402, 402, 402, 402, 401, 402, 400, 401, 400, 399, 399, 398, 397,
        397, 396, 395, 394, 393, 391, 391, 389, 389, 387, 385, 384, 383, 381, 379, 378, 376, 374, 373, 370, 369, 367, 364, 363, 360, 358, 356, 353, 351, 349, 346, 344, 341, 338,
        336, 333, 330, 327, 325, 321, 319, 315, 313, 309, 306, 303, 300, 296, 293, 289, 286, 283, 279, 276, 271, 269, 264, 261, 257, 253, 250, 245, 242, 237, 234, 229, 226, 221,
        217, 213, 209, 205, 200, 196, 192, 187, 183, 179, 174, 170, 165, 161, 156, 151, 147, 143, 138, 133, 128, 124, 119, 114, 110, 105, 100, 95, 91, 86, 80, 76, 72, 66, 61, 57
        , 52, 46, 42, 37, 32, 27, 23, 17, 12, 8, 2];

    window.synthModeOutput = 0;
    window.synthModeTrial2 = 1;
    window.synthModeTrial1 = 2;
});﻿describe("MEPH/audio/sbsms/Track.spec.js", 'MEPH.audio.sbsms.Track', function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });
    var createtrackpoint = function () {
        var slice = {};
        var peak = [].interpolate(0, 10);
        var gx = [].interpolate(0, 10, function () {
            return [].interpolate(0, 10), [].interpolate(0, 10);
        });;
        var mag = [].interpolate(0, 10)
        var mag2 = [].interpolate(0, 10);
        var k = 3;
        var N = 4;
        var band = 0;
        var audio = new MEPH.audio.sbsms.TrackPoint(slice, peak, gx, mag, mag2, k, N, band);
        return audio;
    }
    it('can create an Track', function () {
        var p = createtrackpoint();
        var h = 0;
        var index = {};
        var time = {};;
        var bStitch = false;
        //float h, TrackIndexType index, TrackPoint *p, const TimeType &time, bool bStitch
        var audio = new MEPH.audio.sbsms.Track(h, index, p, time, bStitch);

        expect(audio).toBeTruthy();
    });

});﻿/**
 * @class MEPH.audio.sbsms.Subband
 **/

var NDownSample = 256,
    SDownSample = 4,
    subBufSize = 512,
    hSub = NDownSample / (2 * SDownSample);

MEPH.define('MEPH.audio.sbsms.Subband', {
    statics: {
    },
    properties: {
        nMarkLatency: 0,
        nAssignLatency: 0,
        nTrial2Latency: 0,
        nAdjust2Latency: 0,
        nTrial1Latency: 0,
        nAdjust1Latency: 0,
        nRenderLatency: 0,
        nWriteSlack: 0,
        nExtractSlack: 0,
        nAnalyzeSlack: 0,
        nMarkSlack: 0,
        nAssignSlack: 0,
        nTrial2Slack: 0,
        nAdjust2Slack: 0,
        nTrial1Slack: 0,
        nAdjust1Slack: 0,
        nRenderSlack: 0,
        //list<SBSMSRenderer*> renderers;
        renderers: null,
        //RingBuffer<float> stretchRender;
        stretchRender: null,
        //RingBuffer<float> pitchRender;
        pitchRender: null,
        //int inputFrameSize;
        inputFrameSize: 0,
        // RingBuffer<int> outputFrameSize;
        outputFrameSize: null,
        //float totalSizef;
        totalSizef: null,
        //SBSMSQuality *quality;
        quality: null,
        //int channels;
        channels: 0,
        N: 0,
        h: 0,
        band: 0,
        nReadFromOutputFrame: 0,
        nToWriteForGrain: 0,
        res: 0,
        resMask: 0,
        nGrainsPerFrame: 0,
        nToDrop0: 0,
        nToDrop1: 0,
        nToDrop2: 0,
        nToPrepad1: 0,
        nToPrepad0: 0,
        bSynthesize: false,

        nGrainsToAnalyze: null,
        nGrainsToExtract: null,
        nGrainsToMark: null,
        nGrainsToAssign: null,
        nGrainsToAdvance: null,
        nGrainsToTrial2: null,
        nGrainsToAdjust2: null,
        nGrainsToTrial1: null,
        nGrainsToAdjust1: null,
        nGrainsToRender: null,
        nGrainsWritten: null,
        nGrainsMarked: null,
        nGrainsAssigned: null,
        nGrainsTrialed2: null,
        nGrainsAdjusted2: null,
        nGrainsTrialed1: null,
        nGrainsAdjusted1: null,
        nGrainsAdvanced: null,
        nGrainsRendered: null,
        nGrainsRead: null,

        nFramesAnalyzed: null,
        nFramesExtracted: null,
        nFramesMarked: null,
        nFramesAssigned: null,
        nFramesTrialed2: null,
        nFramesAdjusted2: null,
        nFramesTrialed1: null,
        nFramesAdjusted1: null,
        nFramesRendered: null,
        nFramesRead: null,

        //SubBand *parent;
        parent: null,
        //        SubBand *sub;
        sub: null,
        //SampleBufBase *outMixer;
        outMixer: null,
        //SynthRenderer *synthRenderer;
        synthRenderer: null,
        //SMS *sms;
        sms: null,
        //SampleBuf *samplesSubIn;
        samplesSubIn: null,
        //SampleBuf *samplesSubOut;
        samplesSubOut: null,
        //GrainBuf *grains[3];
        grains: null,
        //GrainBuf *analyzedGrains[3][2];
        analyzedGrains: null,
        //GrainBuf *grainsIn;
        grainsIn: null,
        //GrainAllocator *downSampledGrainAllocator;
        downSampledGrainAllocator: null
    },
    //SubBand *parent, int band, int channels, SBSMSQuality *quality, bool bSynthesize
    initialize: function (parent, band, channels, quality, bSynthesize) {
        var me = this;
        if (band < quality.params.bands - 1) {
            me.sub = new SubBand(this, band + 1, channels, quality, bSynthesize);
        } else {
            me.sub = null;
        }
        this.quality = quality;
        this.channels = channels;
        this.parent = parent;
        this.band = band;
        var M = (1 << band);
        var M_MAX = 1 << (quality.params.bands - 1);
        this.N = quality.params.N[band];
        var N0 = quality.params.N0[band];
        var N1 = quality.params.N1[band];
        var N2 = quality.params.N2[band];
        this.res = quality.params.res[band];
        this.resMask = this.res - 1;
        this.bSynthesize = bSynthesize;
        me.nGrainsPerFrame = this.res;
        if (me.sub) me.nGrainsPerFrame *= me.sub.nGrainsPerFrame;
        me.inputFrameSize = M_MAX * quality.params.H;
        h = me.inputFrameSize / (M * me.nGrainsPerFrame);
        me.nToDrop0 = (quality.getMaxPresamples() / M - N0 / 2);
        me.nToDrop1 = (quality.getMaxPresamples() / M - N1 / 2);
        me.nToDrop2 = (quality.getMaxPresamples() / M - N2 / 2);
        me.nToWriteForGrain = (quality.getMaxPresamples() / M + N2 / 2);
        me.nToPrepad1 = N1 / 2;
        me.nToPrepad0 = N0 / 2;
        me.nReadFromOutputFrame = 0;
        me.nFramesAnalyzed = me.nFramesAnalyzed || []
        for (var i = 0; i < 3; i++) {
            me.nFramesAnalyzed.push(0);
        }
        for (var c = 0; c < me.channels; c++) {
            //me.nFramesExtracted[c] = 0;
            me.nFramesExtracted = [].interpolate(0, me.channels, function () { return 0; });
            //me.nFramesMarked[c] = 0;
            me.nFramesMarked = [].interpolate(0, me.channels, function () { return 0; });
            //me.nFramesAssigned[c] = 0;
            me.nFramesAssigned = [].interpolate(0, me.channels, function () { return 0; });
            //me.nFramesTrialed2[c] = 0;
            me.nFramesTrialed2 = [].interpolate(0, me.channels, function () { return 0; });
            //me.nFramesTrialed1[c] = 0;
            me.nFramesTrialed1 = [].interpolate(0, me.channels, function () { return 0; });
            //me.nFramesRendered[c] = 0;
            me.nFramesRendered = [].interpolate(0, me.channels, function () { return 0; });
            //me.nGrainsMarked[c] = 0;
            me.nGrainsMarked = [].interpolate(0, me.channels, function () { return 0; });
            //me.nGrainsAssigned[c] = 0;
            me.nGrainsAssigned = [].interpolate(0, me.channels, function () { return 0; });
            //me.nGrainsTrialed2[c] = 0;
            me.nGrainsTrialed2 = [].interpolate(0, me.channels, function () { return 0; });
            //me.nGrainsTrialed1[c] = 0;
            me.nGrainsTrialed1 = [].interpolate(0, me.channels, function () { return 0; });
            //me.nGrainsAdvanced[c] = 0;
            me.nGrainsAdvanced = [].interpolate(0, me.channels, function () { return 0; });
        }
        me.nGrainsWritten = 0;
        me.nFramesAdjusted2 = 0;
        me.nGrainsAdjusted2 = 0;
        me.nFramesAdjusted1 = 0;
        me.nGrainsAdjusted1 = 0;
        me.nFramesRead = 0;
        me.totalSizef = 0.0;
        me.grains = [].interpolate(0, 3, function () { return 0; });
        if (me.sub) {
            me.samplesSubIn = new SampleBuf(NDownSample / 2);
            me.grainsIn = new GrainBuf(NDownSample, NDownSample / SDownSample, NDownSample, hann);
            me.downSampledGrainAllocator = new GrainAllocator(NDownSample / 2, NDownSample / 2, hann);
        }
        if (band >= minTrial1Band) {
            me.grains[0] = new GrainBuf(N, h, N0, hannpoisson);
        } else {
            me.grains[0] = null;
        }
        if (band >= minTrial2Band) {
            me.grains[1] = new GrainBuf(N, h, N1, hannpoisson);
        } else {
            me.grains[1] = null;
        }
        me.grains[2] = new GrainBuf(N, h, N2, hannpoisson);
        for (var c = 0; c < me.channels; c++) {
            if (band >= minTrial1Band) {
                me.analyzedGrains[0][c] = new GrainBuf(N, h, N0, hannpoisson);
            } else {
                me.analyzedGrains[0][c] = null;
            }
            if (band >= minTrial2Band) {
                me.analyzedGrains[1][c] = new GrainBuf(N, h, N1, hannpoisson);
            } else {
                me.analyzedGrains[1][c] = null;
            }
            me.analyzedGrains[2][c] = new GrainBuf(N, h, N2, hannpoisson);
        }
        //#ifdef MULTITHREADED
        //        pthread_mutex_init(&dataMutex, null);
        //        for(var i=0; i<3; i++) {
        //            pthread_mutex_init(&grainMutex[i], null);
        //        }
        //#endif
        me.sms = new SMS(me.sub ? me.sub.sms : null, N, band, quality.params.bands - 1, h, this.res, N0, N1, N2, channels, me.analyzedGrains[2][0].getWindowFFT());
        var sms = me.sms;
        me.nTrial2Latency = me.sms.getTrial2Latency() / me.nGrainsPerFrame + 1;
        if (sms.getTrial2Latency() % me.nGrainsPerFrame) me.nTrial2Latency++;
        var nAdjust2LatencyGrains = N1 / (2 * h);
        me.nAdjust2Latency = nAdjust2LatencyGrains / me.nGrainsPerFrame + 1;
        if (nAdjust2LatencyGrains % me.nGrainsPerFrame) me.nAdjust2Latency++;
        var nAdjust1LatencyGrains = N0 / (2 * h);
        me.nAdjust1Latency = nAdjust1LatencyGrains / me.nGrainsPerFrame + 1;
        if (nAdjust1LatencyGrains % me.nGrainsPerFrame) me.nAdjust1Latency++;
        if (me.sub) me.nTrial2Latency = Math.max(me.nTrial2Latency, me.sub.nTrial2Latency);
        if (me.sub) me.nAdjust2Latency = Math.max(me.nAdjust2Latency, me.sub.nAdjust2Latency);
        if (me.sub) me.nAdjust1Latency = Math.max(me.nAdjust1Latency, me.sub.nAdjust1Latency);
        me.nMarkLatency = 1;
        me.nAssignLatency = 1;
        me.nTrial1Latency = 1;
        me.nRenderLatency = 1;
        if (band == 0) {
            var s = me.sub;
            while (s) {
                s.nTrial2Latency = me.nTrial2Latency;
                s.nAdjust2Latency = me.nAdjust2Latency;
                s.nAdjust1Latency = me.nAdjust1Latency;
                s = s.me.sub;
            }
        }
        //#ifdef MULTITHREADED
        //nWriteSlack = 6;
        //nAnalyzeSlack = 6;
        //nExtractSlack = 6;
        //nMarkSlack = 6;
        //nAssignSlack = 6;
        //nTrial2Slack = 6;
        //nAdjust2Slack = 6;
        //nTrial1Slack = 6;
        //nAdjust1Slack = 6;
        //nRenderSlack = 6;
        //#else
        me.nWriteSlack = 2;
        me.nAnalyzeSlack = 2;
        me.nExtractSlack = 2;
        me.nMarkSlack = 2;
        me.nAssignSlack = 2;
        me.nTrial2Slack = 2;
        me.nAdjust2Slack = 2;
        me.nTrial1Slack = 2;
        me.nAdjust1Slack = 2;
        me.nRenderSlack = 2;
        //#endif
        me.synthRenderer = null;
        me.outMixer = null;
        me.renderers = [];
        if (me.bSynthesize) {
            me.synthRenderer = new SynthRenderer(channels, M * h);
            me.renderers.push(me.synthRenderer);
            if (me.sub) {
                me.samplesSubOut = new SampleBuf(0);
                me.outMixer = new Mixer(me.synthRenderer, me.samplesSubOut);
            } else {
                me.outMixer = me.synthRenderer;
            }
        }
    },

    //SubBand :: ~SubBand
    destroy: function () {
        var me = this;
        for (var i = 0; i < 3; i++) {
            if (me.grains[i]) {
                delete grains[i];
            }
            for (var c = 0; c < me.channels; c++) {
                if (me.analyzedGrains[i][c]) {
                    delete me.analyzedGrains[i][c];
                }
            }
        }
        delete sms;
        if (me.sub) {
            delete me.sub;
            delete me.grainsIn;
            delete me.samplesSubIn;
            delete me.downSampledGrainAllocator;
            if (me.bSynthesize) {
                delete me.samplesSubOut;
                delete me.outMixer;
            }
        }
        if (me.bSynthesize) delete me.synthRenderer;
    },
    //void SubBand :: //SBSMSRenderer *renderer
    addRenderer: function (renderer) {
        var me = this;
        if (me.sub) me.sub.addRenderer(renderer);
        me.renderers.push(renderer);
    },
    //void SubBand :: //SBSMSRenderer *renderer
    removeRenderer: function (renderer) {
        var me = this;
        if (me.sub) me.sub.removeRenderer(renderer);
        me.renderers.removeWhere(function (x) { return x === renderer; });
    },
    //void SubBand :: 
    setStretch: function (stretch) {
        //#ifdef MULTITHREADED
        //    pthread_mutex_lock(&dataMutex);
        //#endif
        var me = this;
        if (!me.parent) {
            var oFrameSizef = (stretch == 0.0 ? 1.0 : stretch) * inputFrameSize;
            me.totalSizef += oFrameSizef;
            var oFrameSizei = lrintf(me.totalSizef);
            me.totalSizef -= oFrameSizei;
            me.outputFrameSize.write(oFrameSizei);
        }
        me.stretchRender.write(stretch);
        //#ifdef MULTITHREADED
        //        pthread_mutex_unlock(&dataMutex);
        //#endif
        if (me.sub) me.sub.setStretch(stretch);
    },
    //void SubBand :: :float f
    setPitch: function (f) {

        var me = this;
        if (me.sub) me.sub.setPitch(f);
        //#ifdef MULTITHREADED
        //    pthread_mutex_lock(&dataMutex);
        //#endif
        me.pitchRender.write(f);
        //#ifdef MULTITHREADED
        //    pthread_mutex_unlock(&dataMutex);
        //#endif    
    },
    //void SubBand :: int i
    stepAnalyzeFrame: function (i) {
        var me = this;
        if (me.sub) me.sub.stepAnalyzeFrame(i);
        me.nFramesAnalyzed[i]++;
    },
    //void SubBand :: //int c
    stepExtractFrame: function (c) {
        var me = this;
        if (me.sub) me.sub.stepExtractFrame(c);
        me.nFramesExtracted[c]++;
    },
    //void SubBand :: int c
    stepMarkFrame: function (c) {
        var me = this;
        if (me.sub) me.sub.stepMarkFrame(c);
        me.nFramesMarked[c]++;
    },
    //void SubBand :: //int c
    stepAssignFrame: function (c) {
        var me = this;
        if (me.sub) me.sub.stepAssignFrame(c);
        me.nFramesAssigned[c]++;
    },
    //int c
    stepTrial2Frame: function (c) {
        var me = this;
        if (me.sub) me.sub.stepTrial2Frame(c);
        me.nFramesTrialed2[c]++;
    },
    //    void SubBand :: 
    stepAdjust2Frame: function () {
        var me = this;
        if (me.sub) me.sub.stepAdjust2Frame();
        me.nFramesAdjusted2++;
    },
    stepTrial1Frame: function (c) {
        var me = this;
        if (me.sub) me.sub.stepTrial1Frame(c);
        me.nFramesTrialed1[c]++;
    },

    stepAdjust1Frame: function () {
        var me = this;
        if (me.sub) me.sub.stepAdjust1Frame();
        //#ifdef MULTITHREADED
        //    pthread_mutex_lock(&dataMutex);
        //#endif
        me.stretchRender.advance(1);
        me.pitchRender.advance(1);
        //#ifdef MULTITHREADED
        //    pthread_mutex_unlock(&dataMutex);
        //#endif
        me.nFramesAdjusted1++;
    },

    stepRenderFrame: function (c) {
        var me = this;
        if (me.sub) me.sub.stepRenderFrame(c);
        me.nFramesRendered[c]++;
    },

    stepReadFrame: function () {
        var me = this;
        if (me.sub) me.sub.stepReadFrame();
        me.nFramesRead++;
    },

    writeInit: function () {
        var me = this;
        var n = me.getFramesAtFront(0);
        n = Math.min(n, me.getFramesAtFront(1));
        n = Math.min(n, me.getFramesAtFront(2));
        return (n <= me.nWriteSlack);
    },
    //long SubBand :: 
    readInit: function () {
        var me = this;
        var n = me.nFramesRendered[0];
        for (var c = 1; c < me.channels; c++) {
            n = Math.max(0, Math.min(1, Math.min(n, me.nFramesRendered[c] - me.nFramesRead)));
        }
        if (me.sub) n = Math.min(n, me.sub.readInit());
        return n;
    },
    //long SubBand :: //int i, bool bSet, long n
    analyzeInit: function (i, bSet, n) {
        var me = this;
        if (!me.parent) {
            n = me.getFramesAtFront(i);
            for (var c = 0; c < me.channels; c++) {
                n = Math.max(0, Math.min(1, Math.min(n, Math.nAnalyzeSlack - Math.round(me.nFramesAnalyzed[i] - me.nFramesExtracted[c]))));
            }
        }
        if (bSet) {
            me.nGrainsToAnalyze[i] = n * me.nGrainsPerFrame;
            if (me.sub) {
                me.sub.analyzeInit(i, bSet, n);
            }
        }
        return n;
    },
    //long SubBand :: //int c, bool bSet
    extractInit: function (c, bSet) {
        var me = this;
        var n;
        if (me.sub) n = me.res * me.sub.extractInit(c, bSet);
        if (!sub) {
            n = Math.max(0, Math.min(1, me.nExtractSlack + me.nMarkLatency - Math.floor(me.nFramesExtracted[c] - me.nFramesMarked[c])));
            for (var i = 0; i < 3; i++) {
                n = Math.max(0, Math.min(1, Math.min(n, Math.floor(me.nFramesAnalyzed[i] - me.nFramesExtracted[c]))));
            }
        }
        if (bSet) {
            me.nGrainsToExtract[c] = n;
        }
        return n;
    },
    //int c, bool bSet
    markInit: function (c, bSet) {
        var me = this;
        var n;
        if (me.sub) n = me.res * me.sub.markInit(c, bSet);
        if (!sub) n = Math.max(0, Math.min(1, Math.min(Math.floor(me.nFramesExtracted[c] - me.nFramesMarked[c]) - me.nMarkLatency,
                                     me.nMarkSlack + me.nAssignLatency - Math.floor(me.nFramesMarked[c] - me.nFramesAssigned[c]))));
        if (bSet) {
            me.nGrainsToMark[c] = n;
        }
        return n;
    },
    //int c, bool bSet
    assignInit: function (c, bSet) {
        var me = this;
        var n;
        if (me.sub) {
            n = me.res * me.sub.assignInit(c, bSet);
        } else {
            n = Math.max(0, Math.min(1, Math.min(Math.floor(me.nFramesMarked[c] - me.nFramesAssigned[c]) - me.nAssignLatency,
                                  me.nAssignSlack + me.nTrial2Latency - Math.floor(me.nFramesAssigned[c] - me.nFramesTrialed2[c]))));
        }
        if (bSet) {
            me.nGrainsToAdvance[c] = n;
            me.nGrainsToAssign[c] = n;
            if (n) {
                if (me.nFramesAssigned[c] == 0) {
                    me.sms.start(0, c);
                }
            }
        }
        return n;
    },
    //long SubBand :: //int c, bool bSet
    trial2Init: function (c, bSet) {
        var me = this;
        var n;

        if (me.sub) {
            n = me.res * me.sub.trial2Init(c, bSet);
        } else {
            n = Math.max(0, Math.min(1, Math.min(Math.floor(me.nFramesAssigned[c] - me.nFramesTrialed2[c]) - me.nTrial2Latency,
                                  me.nTrial2Slack + me.nAdjust2Latency - Math.floor(me.nFramesTrialed2[c] - me.nFramesAdjusted2))));
        }
        if (bSet) {
            me.nGrainsToTrial2[c] = n;
            me.nGrainsTrialed2[c] = 0;
        }
        return n;
    },
    //long SubBand ::bool bSet 
    adjust2Init: function (bSet) {
        var me = this;
        var n;
        if (me.sub) {
            n = me.res * me.sub.adjust2Init(bSet);
        } else {
            n = 1;
            for (var c = 0; c < me.channels; c++) {
                n = Math.min(n, Math.floor(me.nFramesTrialed2[c] - me.nFramesAdjusted2 - me.nAdjust2Latency));
                n = Math.min(n, me.nAdjust2Slack + me.nTrial1Latency - Math.floor(me.nFramesAdjusted2 - me.nFramesTrialed1[c]));
            }
            n = Math.max(0, n);
        }
        if (bSet) {
            me.nGrainsToAdjust2 = n;
            me.nGrainsAdjusted2 = 0;
        }
        return n;
    },
    //    long SubBand :: //int c, bool bSet
    trial1Init: function (c, bSet) {
        var me = this;
        var n;
        if (me.sub) {
            n = me.res * me.sub.trial1Init(c, bSet);
        } else {
            n = Math.max(0, Math.min(1, Math.min(Math.floor(me.nFramesAdjusted2 - me.nFramesTrialed1[c]) - me.nTrial1Latency,
                                  me.nTrial1Slack + me.nAdjust1Latency - Math.floor(me.nFramesTrialed1[c] - me.nFramesAdjusted1))));
        }
        if (bSet) {
            me.nGrainsToTrial1[c] = n;
            me.nGrainsTrialed1[c] = 0;
        }
        return n;
    },
    //long SubBand :: //
    adjust1Init: function (bSet) {
        var me = this;
        var n;
        if (me.sub) {
            n = me.res * me.sub.adjust1Init(bSet);
        } else {
            n = 1;
            for (var c = 0; c < me.channels; c++) {
                n = Math.min(n, Math.floor(me.nFramesTrialed1[c] - me.nFramesAdjusted1 - me.nAdjust1Latency));
                n = Math.min(n, me.nAdjust1Slack + me.nRenderLatency - Math.floor(me.nFramesAdjusted1 - me.nFramesRendered[c]));
            }
            n = Math.max(0, n);
        }
        if (bSet) {
            me.nGrainsToAdjust1 = n;
            me.nGrainsAdjusted1 = 0;
        }
        return n;
    },
    //long SubBand :: //int c, bool bSet
    renderInit: function (c, bSet) {
        var me = this;
        var n;
        if (me.sub) {
            n = me.res * me.sub.renderInit(c, bSet);
        } else {
            n = Math.max(0, Math.min(1, Math.min(Math.floor(me.nFramesAdjusted1 - me.nFramesRendered[c]) - me.nRenderLatency,
                                  me.nRenderSlack - Math.floor(me.nFramesRendered[c] - me.nFramesRead))));
        }
        if (bSet) {
            me.nGrainsRendered[c] = 0;
            me.nGrainsToRender[c] = n;
        }
        return n;
    },

    analyze: function (i) {
        var me = this;
        if (me.sub) me.sub.analyze(i);
        if (me.grains[i]) {
            var gV = [];
            //#ifdef MULTITHREADED
            //    pthread_mutex_lock(&grainMutex[i]);
            //#endif
            for (var k = me.grains[i].readPos; k < me.grains[i].readPos + me.nGrainsToAnalyze[i]; k++) {
                var g = me.grains[i].read(k);
                gV.push_back(g);
            }
            //#ifdef MULTITHREADED
            //        pthread_mutex_unlock(&grainMutex[i]);
            //#endif

            for (var k = 0; k < me.nGrainsToAnalyze[i]; k++) {
                gV[k].analyze();
            }

            //#ifdef MULTITHREADED
            //        pthread_mutex_lock(&grainMutex[i]);
            //#endif
            for (var k = 0; k < me.nGrainsToAnalyze[i]; k++) {
                for (var c = 0; c < me.channels; c++) {
                    me.analyzedGrains[i][c].write(gV[k]);
                }
            }
            me.grains[i].advance(me.nGrainsToAnalyze[i]);
            //#ifdef MULTITHREADED
            //        pthread_mutex_unlock(&grainMutex[i]);
            //#endif
        }
    },
    //int c
    extract: function (c) {
        var me = this;
        if (me.sub) me.sub.extract(c);
        // vector<grain*> gV[3];
        var gV = [].interpolate(0, 3, function () { return 0; });

        for (var i = 0; i < 3; i++) {
            if (me.grains[i]) {
                //#ifdef MULTITHREADED
                //    pthread_mutex_lock(&grainMutex[i]);
                //#endif    
                for (var k = me.analyzedGrains[i][c].readPos;
                    k < me.analyzedGrains[i][c].readPos + me.nGrainsToExtract[c];
                k++) {
                    var g = me.analyzedGrains[i][c].read(k);
                    gV[i].push_back(g);
                }
                //#ifdef MULTITHREADED
                //        pthread_mutex_unlock(&grainMutex[i]);
                //#endif
            }
        }

        for (var k = 0; k < me.nGrainsToExtract[c]; k++) {
            var g0 = (me.grains[0] ? gV[0][k] : null);
            var g1 = (me.grains[1] ? gV[1][k] : null);
            var g2 = gV[2][k];
            me.sms.add(g0, g1, g2, c);
        }

        for (var i = 0; i < 3; i++) {
            if (me.grains[i]) {
                //#ifdef MULTITHREADED
                //    pthread_mutex_lock(&grainMutex[i]);
                //#endif
                me.analyzedGrains[i][c].advance(me.nGrainsToExtract[c]);
                //#ifdef MULTITHREADED
                //    pthread_mutex_unlock(&grainMutex[i]);
                //#endif
            }
        }
    },
    //int c
    mark: function (c) {
        var me = this;
        var ntodo = me.parent ? 1 : me.nGrainsToMark[c];
        var ndone = 0;
        while (ndone < ntodo) {
            me.sms.mark(nGrainsMarked[c], c);
            if (me.nGrainsMarked[c] & me.resMask || me.res === 1) {
                if (me.sub) me.sub.mark(c);
            }
            ndone++;
            me.nGrainsMarked[c]++;
        }
    },
    //int c
    assign: function (c) {
        var me = this;
        for (var ndone = 0; ndone < me.nGrainsToAssign[c]; ndone++) {
            me.assignStart(c);
            var bCont = true;
            while (bCont) {
                me.assignInit(c);
                me.assignFind(c);
                bCont = me.assignConnect(c);
            }
            me.assignStep(c);
            me.splitMerge(c);
        }
    },

    assignStart: function (c) {
        var me = this;
        if (me.sub && !(me.nGrainsAssigned[c] & me.resMask)) me.sub.assignStart(c);
        me.sms.assignStart(me.nGrainsAssigned[c], c);
    },
    //int c
    assignInit: function (c) {
        var me = this;
        if (me.sub) me.sub.assignInit(c);
        me.sms.assignInit(me.nGrainsAssigned[c], c);
    },
    //int c
    assignFind: function (c) {
        var me = this;
        if (me.sub) me.sub.assignFind(c);
        me.sms.assignFind(me.nGrainsAssigned[c], c);
    },
    //bool SubBand :: //int c
    assignConnect: function (c) {
        var me = this;
        var bCont = false;
        if (me.sub) {
            if (me.sub.assignConnect(c)) {
                bCont = true;
            }
        }
        if (me.sms.assignConnect(me.nGrainsAssigned[c], c, false)) {
            bCont = true;
        }
        return bCont;
    },
    //int c
    assignStep: function (c) {
        var me = this;
        me.sms.assignConnect(me.nGrainsAssigned[c], c, true);
        if (me.sub && !((me.nGrainsAssigned[c] + 1) & me.resMask)) {
            me.sub.assignStep(c);
        }
        me.sms.start(me.nGrainsAssigned[c] + 1, c);
    },
    //int c
    splitMerge: function (c) {
        var me = this;
        me.nGrainsAssigned[c]++;
        if (me.sub && !(me.nGrainsAssigned[c] & me.resMask)) {
            me.sub.splitMerge(c);
        }
        me.sms.splitMerge(c);
    },
    //int c
    advance: function (c) {
        var me = this;
        var ntodo = me.parent ? 1 : me.nGrainsToAdvance[c];
        var ndone = 0;
        while (ndone < ntodo) {
            if (me.sub && !(me.nGrainsAdvanced[c] & resMask)) {
                me.sub.advance(c);
            }
            me.sms.advance(c);
            me.nGrainsMarked[c]--;
            me.nGrainsAssigned[c]--;
            me.nGrainsAdvanced[c]++;
            ndone++;
        }
    },
    //int c
    trial2: function (c) {
        var me = this;
        for (var i = 0; i < me.nGrainsToTrial2[c]; i++) {
            me.trial2Start(c);
            me.trial2Trial(c);
            me.trial2End(c);
        }
    },
    //int c
    trial2Start: function (c) {
        var me = this;
        if (!(me.nGrainsTrialed2[c] & me.resMask)) {
            if (me.sub) me.sub.trial2Start(c);
            me.sms.trial2Start(c);
        }
    },
    // int c 
    trial2Trial: function (c) {
        var me = this;
        if (me.sub && !(me.nGrainsTrialed2[c] & me.resMask)) {
            me.sub.trial2Trial(c);
        }
        me.sms.trial2(c);
    },
    //int c
    trial2End: function (c) {
        var me = this;
        me.nGrainsTrialed2[c]++;
        if (!(me.nGrainsTrialed2[c] & me.resMask)) {
            if (me.sub) me.sub.trial2End(c);
            me.sms.trial2End(c);
        }
    },

    adjust2: function () {
        var me = this;
        var ntodo = me.parent ? 1 : me.nGrainsToAdjust2;
        var ndone = 0;
        while (ndone < ntodo) {
            if (!(me.nGrainsAdjusted2 & me.resMask)) {
                if (me.sub) me.sub.adjust2();
            }
            me.sms.adjust2();
            ndone++;
            me.nGrainsAdjusted2++;
        }
    },
    //int c
    trial1: function (c) {
        var me = this;
        for (var i = 0; i < me.nGrainsToTrial1[c]; i++) {
            me.trial1Start(c);
            me.trial1Trial(c);
            me.trial1End(c);
        }
    },
    //int c 
    trial1Start: function (c) {
        var me = this;
        if (!(me.nGrainsTrialed1[c] & me.resMask)) {
            if (me.sub) me.sub.trial1Start(c);
            me.sms.trial1Start(c);
        }
    },
    //int c
    trial1Trial: function (c) {
        var me = this;
        if (me.sub && !(me.nGrainsTrialed1[c] & me.resMask)) {
            me.sub.trial1Trial(c);
        }
        me.sms.trial1(c);
    },
    //int c 
    trial1End: function (c) {
        var me = this;
        me.nGrainsTrialed1[c]++;
        if (!(me.nGrainsTrialed1[c] & me.resMask)) {
            if (me.sub) me.sub.trial1End(c);
            me.sms.trial1End(c);
        }
    },

    adjust1: function () {
        var me = this;
        //#ifdef MULTITHREADED
        //    pthread_mutex_lock(&dataMutex);
        //#endif
        var stretch = me.stretchRender.read();
        var f0 = me.pitchRender.read(me.pitchRender.readPos);
        var f1;
        if (me.pitchRender.nReadable() >= 2) {
            f1 = me.pitchRender.read(me.pitchRender.readPos + 1);
        } else {
            f1 = f0;
        }
        //#ifdef MULTITHREADED
        //pthread_mutex_unlock(&dataMutex);
        //#endif
        var ntodo = me.parent ? 1 : me.nGrainsToAdjust1;
        var ndone = 0;
        var df = (f1 - f0) / me.nGrainsToAdjust1;
        while (ndone < ntodo) {
            if (!(me.nGrainsAdjusted1 & me.resMask)) {
                if (me.sub) me.sub.adjust1();
            }
            me.sms.adjust1(stretch, f0 + me.nGrainsAdjusted1 * df, f0 + (me.nGrainsAdjusted1 + 1) * df);
            ndone++;
            me.nGrainsAdjusted1++;
        }
    },

    readSubSamples: function () {
        var me = this;
        if (me.sub) me.sub.readSubSamples();
        if (me.sub) {
            //audio fromSub[subBufSize];
            var fromSub = [].interpolate(0, me.subBufSize, function () { return 0; })
            var nFromSub = 0;
            do {
                nFromSub = me.sub.outMixer.read(fromSub, me.subBufSize);
                me.samplesSubOut.write(fromSub, nFromSub);
            } while (nFromSub > 0);
        }
    },
    //long SubBand :: //audio *buf, long n
    read: function (buf, n) {
        var me = this;
        var nRead = 0;
        var nToRead = n;
        me.readSubSamples();
        while (nToRead && nRead < n && me.outputFrameSize.nReadable()) {
            var nToReadFromOutputFrame = me.outputFrameSize.read();
            nToRead = Math.min(n - nRead, nToReadFromOutputFrame - me.nReadFromOutputFrame);
            nToRead = me.outMixer.read(buf + nRead, nToRead);
            me.nReadFromOutputFrame += nToRead;
            nRead += nToRead;
            if (me.nReadFromOutputFrame == nToReadFromOutputFrame) {
                me.nReadFromOutputFrame = 0;
                me.outputFrameSize.advance(1);
                me.stepReadFrame();
            }
        }
        return nRead;
    },
    //long SubBand :: 
    renderSynchronous: function () {
        var me = this;
        //for(list<SBSMSRenderer*>::iterator i = renderers.begin(); i != renderers.end(); ++i) {
        //    SBSMSRenderer *renderer = *i;
        //    renderer.startFrame();
        //}
        [].interpolate(me.renderers.begin(), me.renderers.end(), function (i) {
            renderers[i].startFrame();
        });
        for (var c = 0; c < me.channels; c++) {
            me.renderInit(c, true);
            me.render(c);
            me.stepRenderFrame(c);
        }
        //for(list<SBSMSRenderer*>::iterator i = renderers.begin(); i != renderers.end(); ++i) {
        //    SBSMSRenderer *renderer = *i;
        //    renderer.endFrame();
        //}
        [].interpolate(me.renderers.begin(), me.renderers.end(), function (i) {
            renderers[i].endFrame();
        });
        var samples = me.outputFrameSize.read();
        me.outputFrameSize.advance(1);
        me.stepReadFrame();
        return samples;
    },
    //int c
    render: function (c) {
        var me = this;
        var ntodo = me.parent ? 1 : me.nGrainsToRender[c];
        var ndone = 0;
        var nRenderedTotal = 0;

        while (ndone < ntodo) {
            if (me.sub && !(me.nGrainsRendered[c] & me.resMask)) {
                me.sub.render(c);
            }
            me.sms.render(c, me.renderers);
            me.nGrainsRendered[c]++;
            ndone++;
        }
    },
    //const SampleCountType &samples
    renderComplete: function (samples) {
        var me = this;
        //for(list<SBSMSRenderer*>::iterator i = renderers.begin(); i != renderers.end(); ++i) {
        //    SBSMSRenderer *renderer = *i;
        //    renderer.end(samples);
        //}
        [].interpolate(me.renderers.begin(), renderers.end(), function (i) {
            me.renderers[i].end();
        })
    },
    //long SubBand :: //audio *inBuf, long n, float stretch, float pitch
    write: function (inBuf, n, stretch, pitch) {
        var me = this;
        var nWritten = 0;

        while (nWritten < n) {
            var nToWrite = Math.min(me.nToWriteForGrain, n - nWritten);
            if (me.nToDrop2) {
                nToWrite = Math.min(me.nToDrop2, nToWrite);
                me.nToDrop2 -= nToWrite;
                me.nToDrop1 -= nToWrite;
                me.nToDrop0 -= nToWrite;
            } else {
                if (me.nToDrop1) {
                    nToWrite = Math.min(me.nToDrop1, nToWrite);
                    me.nToDrop1 -= nToWrite;
                    me.nToDrop0 -= nToWrite;
                } else {
                    if (me.nToDrop0) {
                        nToWrite = Math.min(me.nToDrop0, nToWrite);
                    } else if (me.nToPrepad0) {
                        nToWrite = Math.min(me.nToPrepad0, nToWrite);
                    }
                    if (me.nToPrepad1) {
                        nToWrite = Math.min(me.nToPrepad1, nToWrite);
                        me.sms.prepad1(inBuf + nWritten, nToWrite);
                        me.nToPrepad1 -= nToWrite;
                    }
                    if (me.nToDrop0) {
                        me.nToDrop0 -= nToWrite;
                    } else {
                        if (me.nToPrepad0) {
                            me.sms.prepad0(inBuf + nWritten, nToWrite);
                            me.nToPrepad0 -= nToWrite;
                        }
                        //#ifdef MULTITHREADED
                        //        pthread_mutex_lock(&grainMutex[0]);
                        //#endif      
                        if (me.grains[0]) {
                            me.grains[0].write(inBuf + nWritten, nToWrite);
                        }
                        //#ifdef MULTITHREADED
                        //        pthread_mutex_unlock(&grainMutex[0]);
                        //#endif
                    }
                    //#ifdef MULTITHREADED
                    //      pthread_mutex_lock(&grainMutex[1]);
                    //#endif      
                    if (me.grains[1]) {
                        me.grains[1].write(inBuf + nWritten, nToWrite);
                    }
                    //#ifdef MULTITHREADED
                    //      pthread_mutex_unlock(&grainMutex[1]);
                    //#endif
                }
                //#ifdef MULTITHREADED
                //    pthread_mutex_lock(&grainMutex[2]);
                //#endif      
                me.grains[2].write(inBuf + nWritten, nToWrite);
                //#ifdef MULTITHREADED
                //    pthread_mutex_unlock(&grainMutex[2]);
                //#endif
            }
            nWritten += nToWrite;
            me.nToWriteForGrain -= nToWrite;
            if (me.nToWriteForGrain == 0) {
                me.nToWriteForGrain = h;
                if (!me.parent) {
                    if (me.nGrainsWritten == 0) {
                        me.setStretch(stretch);
                        me.setPitch(pitch);
                    }
                    me.nGrainsWritten++;
                    if (me.nGrainsWritten == me.nGrainsPerFrame) {
                        me.nGrainsWritten = 0;
                    }
                }
            }
        }

        if (me.sub) {
            me.grainsIn.write(inBuf, n);
            var nGrainsRead = 0;
            for (var k = me.grainsIn.readPos; k < me.grainsIn.writePos; k++) {
                var g = me.grainsIn.read(k);
                g.analyze();
                var gdown = me.downSampledGrainAllocator.create();
                g.downsample(gdown);
                me.samplesSubIn.write(gdown, hSub);
                me.downSampledGrainAllocator.forget(gdown);
                nGrainsRead++;
            }
            me.grainsIn.advance(nGrainsRead);
            var nWriteToSub = me.samplesSubIn.nReadable();
            var subBuf = me.samplesSubIn.getReadBuf();
            me.nWriteToSub = me.sub.write(subBuf, me.nWriteToSub, stretch, pitch);
            me.samplesSubIn.advance(nWriteToSub);
        }
        return n;
    },
    //bool bRender
    process: function (bRender) {
        var me = this;
        for (var i = 0; i < 3; i++) {
            if (me.analyzeInit(i, true)) {
                me.analyze(i);
                me.stepAnalyzeFrame(i);
            }
        }

        for (var c = 0; c < me.channels; c++) {
            if (me.extractInit(c, true)) {
                me.extract(c);
                me.stepExtractFrame(c);
            }

            if (me.markInit(c, true)) {
                me.mark(c);
                me.stepMarkFrame(c);
            }

            if (me.assignInit(c, true)) {
                me.assign(c);
                me.advance(c);
                me.stepAssignFrame(c);
            }

            if (me.trial2Init(c, true)) {
                me.trial2(c);
                me.stepTrial2Frame(c);
            }

            if (me.adjust2Init(true)) {
                me.adjust2();
                me.stepAdjust2Frame();
            }

            if (me.trial1Init(c, true)) {
                me.trial1(c);
                me.stepTrial1Frame(c);
            }

            if (me.adjust1Init(true)) {
                me.adjust1();
                me.stepAdjust1Frame();
            }

            if (bRender) {
                if (me.renderInit(c, true)) {
                    me.render(c);
                    me.stepRenderFrame(c);
                }
            }
        }
    },
    //long SubBand :: //int i
    getFramesAtFront: function (i) {
        var me = this;
        var n = 65536;
        //#ifdef MULTITHREADED
        //    pthread_mutex_lock(&grainMutex[i]);
        //#endif
        if (me.grains[i]) {
            n = me.grains[i].nReadable() / me.nGrainsPerFrame;
        }
        //#ifdef MULTITHREADED
        //    pthread_mutex_unlock(&grainMutex[i]);
        //#endif
        if (me.sub) n = Math.min(n, me.sub.getFramesAtFront(i));
        return n;
    },
    //long SubBand :: 
    getInputFrameSize: function () {
        var me = this;
        return me.inputFrameSize;
    }

})﻿/**
 * @class MEPH.audio.sbsms.Util
 **/
MEPH.define('MEPH.audio.sbsms.Util', {
    statics: {
        ONOVERTWOPI: 0.15915494309189533576888376337251,
        PI: 3.1415926535897932384626433832795,
        TWOPI: 6.28318530717958647692528676655900576,
        //audio *eo, audio *even, int N
        c2even: function (eo, even, N) {
            var Nover2 = N / 2;
            even[0][0] = eo[0][0];
            even[0][1] = 0.0;
            for (var k = 1; k <= Nover2; k++) {
                var Nk = N - k;
                even[k][0] = 0.5 * (eo[k][0] + eo[Nk][0]);
                even[k][1] = 0.5 * (eo[k][1] - eo[Nk][1]);
            }
        },

        //audio *eo, audio *odd, int N
        c2odd: function (eo, odd, N) {
            var Nover2 = N / 2;
            odd[0][0] = eo[0][1];
            odd[0][1] = 0.0;
            for (var k = 1; k <= Nover2; k++) {
                var Nk = N - k;
                odd[k][0] = 0.5 * (eo[k][1] + eo[Nk][1]);
                odd[k][1] = 0.5 * (eo[Nk][0] - eo[k][0]);
            }
        },
        ///float ph
        canonPI: function (ph) {
            var U = MEPH.audio.sbsms.Util;
            ph -= U.TWOPI * (ph * U.ONEOVERTWOPI);//lrintf(ph * U.ONEOVERTWOPI);
            if (ph < -U.PI) ph += U.TWOPI;
            else if (ph >= U.PI) ph -= U.TWOPI;
            return ph;
        },

        //float ph
        canon2PI: function (ph) {
            var U = MEPH.audio.sbsms.Util;
            ph -= U.TWOPI * (ph * U.ONEOVERTWOPI);//lrintf(ph * ONEOVERTWOPI);
            if (ph < 0.0) ph += U.TWOPI;
            if (ph >= U.TWOPI) ph -= U.TWOPI;
            return ph;
        },


        //float x
        square: function (x) {
            return x * x;
        },
        //t_fft x
        norm2: function (x) {
            var U = MEPH.audio.sbsms.Util;
            return U.square(x[0]) + U.square(x[1]);
        }

    }
}).then(function () {
    window.lrintf = Math.round;
    window.lrint = Math.round;
    window.float2int = Math.floor;
    window.double2int = Math.floor;
})﻿describe("MEPH/audio/sbsms/Subband.spec.js", 'MEPH.audio.sbsms.Subband', 'MEPH.audio.sbsms.SMS', function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    xit('can create an Subband', function () {

        //SubBand *parent, int band, int channels, SBSMSQuality *quality, bool bSynthesize
        var parent = null,
            band = 1,
            channels = 1,
            quality = {
                getMaxPresamples: function () { return 1; },
                params: {
                    bands: 1,
                    N: [].interpolate(0, 10),
                    N0: [].interpolate(0, 10),
                    N1: [].interpolate(0, 10),
                    N2: [].interpolate(0, 10),
                    res: [].interpolate(0, 10, function () { return 1 }),
                }
            }, bSynthesize = false;
        var subband = new MEPH.audio.sbsms.Subband(parent, band, channels, quality, bSynthesize);

        expect(subband).toBeTruthy();
    });

});﻿/**
 * @class MEPH.audio.sbsms.SMS
 **/
MEPH.define('MEPH.audio.sbsms.SynthRenderer', {
    statics: {
    },
    alternateNames: ['SBSMSRenderer', 'SampleBufBase'],
    properties: {
        //        int channels;
        channels: 0,
        //float *synthBuf[2];
        synthBuf: null,
        //int synthBufLength[2];
        synthBufLength: null,
        //ArrayRingBuffer<float> *sines[2];
        sines: null,
        time: null,
        //TimeType time[2];
        n: null,
        //int n[2];

    },
    //int channels, int h
    initialize: function (channels, h) {
        var me = this;
        me.synthBuf = [].interpolate(0, 2, function () { return 0; });
        me.synthBufLength = [].interpolate(0, 2, function () { return 0; });
        me.sines = [].interpolate(0, 2, function () { return 0; });
        me.time = [].interpolate(0, 2, function () { return 0; });;
        me.n = [].interpolate(0, 2, function () { return 0; });;
        var me = this;
        this.channels = channels;
        for (var c = 0; c < channels; c++) {
            me.sines[c] = [];//new ArrayRingBuffer<float>(0);
            me.synthBufLength[c] = h << 4;
            me.synthBuf[c] = [].zeroes(me.synthBufLength[c]);// (float*)malloc(synthBufLength[c]*sizeof(float));
        }
        //#ifdef MULTITHREADED
        //pthread_mutex_init(&bufferMutex,NULL);
        //#endif
    },

    destroy: function () {
        var me = this;
        var channels = me.channels;

        for (var c = 0; c < channels; c++) {
            delete me.sines[c];
            //free(synthBuf[c]);
        }
    },
    //int c, const TimeType &time, int n
    startTime: function (c, time, n) {
        var me = this;
        if (n > me.synthBufLength[c]) {
            //free(me.synthBuf[c]);
            me.synthBufLength[c] = n << 1;
            me.synthBuf[c] = [].zeros(synthBufLength[c]);// (float*)malloc(synthBufLength[c]*sizeof(float));
        }
        this.n[c] = n;
        this.time[c] = time;
        me.synthBuf[c] = [].zeroes(n);//memset(synthBuf[c],0,n*sizeof(float));
    },
    //void SynthRenderer :: //int c, SBSMSTrack *t
    render: function (c, t) {
        var me = this;
        t.synth(me.synthBuf[c], me.time[c], me.n[c], synthModeOutput, c);
    },
    //void SynthRenderer :: 
    //int c
    endTime: function (c) {
        var me = this;
        //#ifdef MULTITHREADED
        //    pthread_mutex_lock(&bufferMutex);
        //#endif
        var n = Math.floor(this.n[c]);
        me.sines[c].grow(n);
        var j = Math.floor(me.sines[c].writePos);
        var dest = me.sines[c].buf;
        var src = me.synthBuf[c];
        for (var k = 0; k < n; k++) {
            dest[j++] += me.src[k];
        }
        me.sines[c].writePos += n;
        //#ifdef MULTITHREADED
        //    pthread_mutex_unlock(&bufferMutex);
        //#endif
    },
    //long SynthRenderer :: //audio *out, long n
    read: function (out, n) {
        //        #ifdef MULTITHREADED
        //    pthread_mutex_lock(&bufferMutex);
        //#endif
        var me = this;
        n = Math.min(n, me.sines[0].nReadable());
        for (var c = 1; c < me.channels; c++) {
            n = Math.min(n, me.sines[c].nReadable());
        }
        for (var c = 0; c < me.channels; c++) {
            var buf = me.sines[c].getReadBuf();
            for (var k = 0; k < n; k++) {
                out[k][c] = buf[k];
            }
            me.sines[c].advance(n);
        }
        //#ifdef MULTITHREADED
        //pthread_mutex_unlock(&bufferMutex);
        //#endif
        return n;
    }


})﻿describe("MEPH/audio/sbsms/SynthRenderer.spec.js", 'MEPH.audio.sbsms.SynthRenderer', function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create an SMS', function () {
        var sms = new MEPH.audio.sbsms.SynthRenderer();

        expect(sms).toBeTruthy();
    });

});﻿/**
 * @class MEPH.audio.sbsms.SMS
 **/
MEPH.define('MEPH.audio.sbsms.SMS', {
    statics: {
    },
    requires: ['MEPH.audio.sbsms.Util'],
    properties: {
        //        list<TrackPoint*> ended[2];
        ended: null,
        //list<TrackPoint*> started[2];
        started: null,
        //int minTrackSize;
        minTrackSize: 0,
        //int peakWidth0;
        peakWidth0: 0,
        //int peakWidth1;
        peakWidth1: 0,
        //int peakWidth2;
        peakWidth2: 0,
        //int minCutSep1;
        minCutSep1: 0,
        //int minCutSep2;
        minCutSep2: 0,
        //int minK;
        minK: 0,
        //int maxK;
        maxK: 0,
        //float peakThresh;
        peakThresh: 0,
        //float maxCost2;
        maxCost2: 0,
        //float maxDF;
        maxDF: 0,
        //float dMCoeff2;
        dMCoeff2: 0,
        //float dNCoeff2;
        dNCoeff2: 0,
        //float maxDFSplitMerge;
        maxDFSplitMerge: 0,
        //float maxCost2SplitMerge;
        maxCost2SplitMerge: 0,
        //float dMCoeff2SplitMerge;
        dMCoeff2SplitMerge: 0,
        //float maxCost2Match;
        maxCost2Match: 0,
        //float maxDFMatch;
        maxDFMatch: 0,
        //float dMCoeff2Match;
        dMCoeff2Match: 0,
        //float maxCost2Stereo;
        maxCost2Stereo: 0,
        //float maxDFStereo;
        maxDFStereo: 0,
        //float dMCoeff2Stereo;
        dMCoeff2Stereo: 0,
        //float maxFMatchM;
        maxFMatchM: 0,
        //float minFMatchL;
        minFMatchL: 0,
        //float minFLo;
        minFLo: 0,
        //float maxFHi;
        maxFHi: 0,
        //float minFMid;
        minFMid: 0,
        //float maxFMid;
        maxFMid: 0,
        //int kStart;
        kStart: 0,
        //int kEnd;
        kEnd: 0,
        //int kLo;
        kLo: 0,
        //int kHi;
        kHi: 0,
        //float mNorm;
        mNorm: 0,
        //float localFavorRatio;
        localFavorRatio: 0,
        //queue<Slice*> adjust2SliceQueue[2];
        adjust2SliceQueue: null,
        //queue<Slice*> adjust1SliceQueue[2];
        adjust1SliceQueue: null,
        //RingBuffer<Slice*> sliceBuffer[2];
        sliceBuffer: null,
        //Slice* sliceM0[2];
        sliceM0: null,
        //Slice* sliceL0[2];
        sliceL0: null,
        //Slice* sliceH0[2];
        sliceH0: null,
        //Slice* sliceM1[2];
        sliceM1: null,
        //Slice* sliceL1[2];
        sliceL1: null,
        //Slice* sliceM2[2];
        sliceM2: null,
        //Slice* sliceH1[2];
        sliceH1: null,
        //audio* x10[2];
        x10: null,
        //audio* x11[2];
        x11: null,
        //float* dmag1[2];
        dmag1: null,
        //float* mag11[2];
        mag11: null,
        //audio* x00[2];
        x00: null,
        //audio* x01[2];
        x01: null,
        //float* dmag0[2];
        dmag0: null,
        //float* mag01[2];
        mag01: null,
        //float *mag2[2];
        mag2: null,
        //audio* x2[2];
        x2: null,
        //float* dec2[2];
        dec2: null,
        //float *peak20;
        peak20: null,
        //float *peak2N;
        peak2N: null,
        //int N;
        N: 0,
        //int Nover2;
        Nover2: 0,
        //SMS *lo;
        lo: null,
        //SMS *hi;
        hi: null,
        //queue<TrackIndexType> trackIndex[2];
        trackIndex: null,
        //queue<float*> mag1Queue[2];
        mag1Queue: null,
        //queue<float*> mag0Queue[2];
        mag0Queue: null,
        //float *trial2Buf[2];
        trial2Buf: null,
        //ArrayRingBuffer<float> *trial2RingBuf[2];
        trial2RingBuf: null,
        //GrainBuf *trial2GrainBuf;
        trial2GrainBuf: null,
        //float *trial1Buf[2];
        trial1Buf: null,
        //ArrayRingBuffer<float> *trial1RingBuf[2];
        trial1RingBuf: null,
        //GrainBuf *trial1GrainBuf;
        trial1GrainBuf: null,
        //list<Track*> assignTracks[2];
        assignTracks: null,
        //list<Track*> renderTracks[2];
        renderTracks: null,
        //TimeType addtime[2];
        addtime: null,
        //TimeType assigntime[2];
        assigntime: null,
        //TimeType trial2time[2];
        trial2time: null,
        //TimeType adjust2time;
        adjust2time: null,
        //TimeType trial1time[2];
        trial1time: null,
        //TimeType adjust1time;
        adjust1time: null,
        //TimeType synthtime[2];
        synthtime: null,
        //queue<int> nRender[2];
        nRender: null,
        //double h2cum;
        h2cum: 0,
        //int channels;
        channels: 0,
        //long res;
        res: null,
        //long resMask;
        resMask: 0,
        //int h;
        h: 0,
        //float M;
        M: 0,
        //double h1;
        h1: 0,
        //int band;  
        band: 0,
        //#ifdef MULTITHREADED
        //pthread_mutex_t sliceMutex[2];
        //pthread_mutex_t magMutex[2];
        //pthread_mutex_t renderMutex[2];
        //pthread_mutex_t trial2Mutex[2];
        //pthread_mutex_t trial1Mutex[2];
        //pthread_mutex_t trackMutex[2];
        //#endif
        //bool bAssignDone[2];
        bAssignDone: null
    },
    //SMS *lo, int N, int band, int bandMax, int h, int res, int N0, int N1, int N2, int channels, audio *peak2
    initialize: function (lo, N, band, bandMax, h, res, N0, N1, N2, channels, peak2) {
        var me = this;
        var U = MEPH.audio.sbsms.Util;
        this.lo = lo;
        if (lo) lo.hi = this;
        this.hi = null;
        this.band = band;
        this.h = h;
        this.h1 = (h << band);
        this.res = res;
        this.resMask = res - 1;
        this.channels = channels;
        this.N = N;
        this.Nover2 = N / 2;
        var pad2 = N / N2;
        var pad1 = N / N1;
        var pad0 = N / N0;
        me.M = (1 << band);
        var M = me.M;
        me.peakThresh = 1e-8;

        var maxDF2 = U.square(0.005 * h) / M;
        me.maxDF = Math.sqrt(maxDF2);
        var maxDF = me.maxDF;
        me.maxCost2 = 0.5 * maxDF2;
        me.dMCoeff2 = 0.002 * maxDF2;

        var maxDF2SplitMerge = Math.square(0.001 * h) / M;
        me.maxDFSplitMerge = Math.sqrt(maxDF2SplitMerge);
        me.maxCost2SplitMerge = 1.0 * maxDF2SplitMerge;
        me.dMCoeff2SplitMerge = 0.006 * maxDF2SplitMerge;

        me.maxDFMatch = .06 / M;
        var maxDFMatch = me.maxDFMatch;
        var maxDF2Match = Math.square(me.maxDFMatch);
        me.dMCoeff2Match = 0.0075 * maxDF2Match;
        me.maxCost2Match = 0.8 * maxDF2Match;

        me.maxDFStereo = .04 / M;
        var maxDF2Stereo = Math.square(me.maxDFStereo);
        me.dMCoeff2Stereo = 0.005 * maxDF2Stereo;
        me.maxCost2Stereo = 1.0 * maxDF2Stereo;

        me.peakWidth0 = lrintf(pad0 * N * 0.0055) + 1;
        var peakWidth0 = me.peakWidth0;
        me.peakWidth1 = lrintf(pad1 * N * 0.0055) + 1;
        me.peakWidth2 = lrintf(pad2 * N * 0.0055) + 1;
        me.minTrackSize = Math.Math.max(384 / (h << band), N2 / h / 2);
        me.minCutSep2 = Math.max(lrintf(0.008 * N), me.peakWidth1);
        me.minCutSep1 = Math.max(lrintf(0.011 * N), me.peakWidth0);
        if (band == bandMax) {
            me.kLo = 1;
        }
        else {
            me.kLo = Math.max(1, lrintf(floor(0.5 * N / lo.N * lo.kHi - maxDFMatch * M / U.TWOPI * N)));
        }
        var kLo = me.kLo;
        if (band == 0) {
            me.kHi = Nover2;
        }
        else {
            me.kHi = Math.max(1, lrintf(0.4785 * N) - peakWidth0 * 2);
        }
        var kHi = me.kHi;
        me.kStart = Math.max(1, kLo - peakWidth0);
        me.kEnd = min(Nover2 - 1, kHi + peakWidth0 * 2);
        var kEnd = me.kEnd;
        var kNorm = U.TWOPI / (M * N);
        me.maxFHi = kHi * kNorm + maxDF;
        me.minFLo = kLo * kNorm - maxDF;
        if (lo) {
            me.maxFMatchM = lo.kHi * U.TWOPI / (lo.N * M * 2) + maxDFMatch;
        }
        else {
            me.maxFMatchM = 0.0;
        }
        var maxFMatchM = me.maxFMatchM;
        me.minFMatchL = kLo * kNorm - maxDFMatch;
        var minFMatchL = me.minFMatchL;
        if (lo) {
            me.maxFMid = lo.kHi * U.TWOPI / (lo.N * M * 2) + maxDF;
        }
        else {
            me.maxFMid = 0.0;
        }
        var maxFMid = me.maxFMid;
        if (lo) {
            lo.minFMid = kLo * kNorm - lo.maxDF;
        }
        if (lo && lo.lo) {
            me.minK = Math.max(1, (lrintf(0.25 * N / lo.lo.N * lo.lo.kHi + peakWidth0)));
        } else {
            me.minK = 1;
        }
        var minK = me.minK;
        me.maxK = Math.min(kEnd, kHi + peakWidth0);
        me.localFavorRatio = 1.1;
        me.mNorm = MScale * MScale * 16.061113032124002 * pad2 / U.square(N);
        //    for(var c=0; c<me.channels; c++) {
        me.bAssignDone = [].interpolate(0, me.channels, function () { return false; });
        me.addtime = [].interpolate(0, me.channels, function () { return 0; });
        me.assigntime = [].interpolate(0, me.channels, function () { return 0; });
        me.trial2time = [].interpolate(0, me.channels, function () { return 0; });
        me.trial1time = [].interpolate(0, me.channels, function () { return 0; });
        me.synthtime = [].interpolate(0, me.channels, function () { return 0; });
        //for(int k=1; k<256; k++) {
        //    trackIndex[c].push(k);
        //}
        me.trackIndex = [].interpolate(0, me.channels, function () {
            return [].interpolate(0, 256);
        });
        me.trial2Buf = [].interpolate(0, me.channels, function () {
            return [].interpolate(0, h * res, function () { return 0; });
        });//[c] = (float*)malloc(h*res*sizeof);
        me.trial2RingBuf = [].interpolate(0, me.channels, function () {
            return [];
        });//[c] = new ArrayRingBuffer<float>(0);
        me.dmag1 = [].interpolate(0, me.channels, function () {
            return [].zeroes(N);
        });// = (float*)malloc(N*sizeof);
        me.mag11 = [].interpolate(0, me.channels, function () {
            return [].zeroes(Nover2 + 1);
        });///[c] = (float*)malloc((Nover2+1)*sizeof);
        me.x10 = [].interpolate(0, me.channels, function () {
            return [].zeroes(N);
        });//[c] = (audio*)malloc(N*sizeof(audio));
        me.x11 = [].interpolate(0, me.channels, function () {
            return [].zeroes(N);
        });//[c] = (audio*)malloc(N*sizeof(audio));
        me.trial1Buf = [].interpolate(0, me.channels, function () {
            return [].zeroes(h * res);
        });//[c] = (float*)malloc(h*res*sizeof);
        me.trial1RingBuf = [].interpolate(0, me.channels, function () {
            return [];
        });//[c] = new ArrayRingBuffer<float>(0);
        me.dmag0 = [].interpolate(0, me.channels, function () {
            return [].zeroes(N);
        });//[c] = (float*)malloc(N*sizeof);
        me.mag01 = [].interpolate(0, me.channels, function () {
            return [].zeroes(Nover2 + 1);
        });//[c] = (float*)malloc((Nover2+1)*sizeof);
        me.x00 = [].interpolate(0, me.channels, function () {
            return [].zeroes(N);
        });//[c] = (audio*)malloc(N*sizeof(audio));
        me.x01 = [].interpolate(0, me.channels, function () {
            return [].zeroes(N);
        });//[c] = (audio*)malloc(N*sizeof(audio));
        me.mag2 = [].interpolate(0, me.channels, function () {
            return [].zeroes(Nover2 + 1);
        });//[c] = (float*)malloc((Nover2+1)*sizeof);
        me.dec2 = [].interpolate(0, me.channels, function () {
            return [].zeroes(N);
        });//[c] = (float*)malloc(N*sizeof);
        me.x2 = [].interpolate(0, me.channels, function () {
            return [].zeroes(N);
        });//[c] = (audio*)malloc(N*sizeof(audio));
        //#ifdef MULTITHREADED
        //      pthread_mutex_init(&renderMutex[c],null);
        //      pthread_mutex_init(&trackMutex[c],null);
        //      pthread_mutex_init(&sliceMutex[c],null);
        //      pthread_mutex_init(&trial2Mutex[c],null);
        //      pthread_mutex_init(&trial1Mutex[c],null);
        //      pthread_mutex_init(&magMutex[c],null);
        //#endif
        //  }
        me.h2cum = 0.0;
        me.adjust2time = 0;
        me.adjust1time = 0;
        me.trial2GrainBuf = new GrainBuf(N, h, N1, hannpoisson);
        me.trial1GrainBuf = new GrainBuf(N, h, N0, hannpoisson);
        me.peak20 = [].interpolate(0, me.channels, function () {
            return [].zeroes(2 * N);
        });// = (float*)calloc(2*N,sizeof);
        me.peak2N = [].zeros(2 * N);
        for (var k = -Nover2; k <= Nover2; k++) {
            peak2N[k + Nover2] = U.norm2(peak2[(k + N) % N]);
        }
    },

    destroy: function () {
    },

    //int c
    trial2Start: function (c) {
        var me = this;
        if (me.band >= minTrial2Band) {
            memset(trial2Buf[c], 0, me.h * me.res * sizeof(float));
        }
    },
    //void SMS :: //int c
    trial2End: function (c) {
        var me = this;
        if (me.band < minTrial2Band) return;
        //#ifdef MULTITHREADED
        //        pthread_mutex_lock(&trial2Mutex[c]);
        //#endif
        me.trial2RingBuf[c].write(trial2Buf[c], me.h * me.res);
        //#ifdef MULTITHREADED
        //        pthread_mutex_unlock(&trial2Mutex[c]);
        //#endif
    },
    //void SMS :: //int c
    trial2: function (c) {
        //#ifdef MULTITHREADED
        //    pthread_mutex_lock(&trackMutex[c]);
        //#endif
        //for(list<Track*>::iterator tt = renderTracks[c].begin(); 
        //    tt != renderTracks[c].end();
        //++tt) {
        var stop = false;
        var trial2time = me.trial2time;
        var renderTracks = me.renderTracks;
        [].interpolate(renderTracks[c].begin(), renderTracks[c].end(), function (tt) {
            if (!stop) {
                var t = (tt);
                if (trial2time[c] >= t.start) {
                    if (trial2time[c] > t.last) {
                    }
                    else {
                        t.updateM(trial2time[c], synthModeTrial2);
                        if (hi && hi.band >= minTrial2Band) {
                            var f = 0.5 * M;
                            t.updateFPH(trial2time[c], synthModeTrial2, h << 1, f, f);
                            t.synth(hi.trial2Buf[c], trial2time[c], h << 1, synthModeTrial2, c);
                        }
                        if (lo && lo.band >= minTrial2Band) {
                            var f = 2.0 * M;
                            t.updateFPH(trial2time[c], synthModeTrial2, h >> 1, f, f);
                            t.synth(lo.trial2Buf[c] + (trial2time[c] & (res * lo.res - 1)) * (h >> 1), trial2time[c], h >> 1, synthModeTrial2, c);
                        }
                        if (band >= minTrial2Band) {
                            var f = M;
                            t.updateFPH(trial2time[c], synthModeTrial2, h, f, f);
                        }
                    }
                } else {
                    stop = true;
                }
            }
        });
        //#ifdef MULTITHREADED
        //        pthread_mutex_unlock(&trackMutex[c]);
        //#endif
        trial2time[c]++;
    },

    //void SMS :: //int c
    trial1Start: function (c) {
        var me = this;
        if (me.band >= minTrial1Band) {
            memset(me.trial1Buf[c], 0, me.h * me.res);
        }
    },
    //int c
    trial1End: function (c) {
        var me = this;
        if (me.band < minTrial1Band) return;
        //#ifdef MULTITHREADED
        //    pthread_mutex_lock(&trial1Mutex[c]);
        //#endif
        me.trial1RingBuf[c].write(trial1Buf[c], me.h * me.res);
        //#ifdef MULTITHREADED
        //    pthread_mutex_unlock(&trial1Mutex[c]);
        //#endif
    },
    //    void SMS ::     int c
    trial1: function (c) {
        //#ifdef MULTITHREADED
        //    pthread_mutex_lock(&trackMutex[c]);
        //#endif
        //for(list<Track*>::iterator tt = renderTracks[c].begin(); 
        //    tt != renderTracks[c].end();
        //++tt) {
        var me = this;
        var trial1time = me.trial1time;
        var M = me.M
        var stop = false;
        var h = me.h;
        var hi = me.hi;
        var lo = me.lo;
        var renderTracks = me.renderTracks;
        var resMask = me.resMask;
        var res = me.res;
        [].interpolate(renderTracks[c].begin(), renderTracks[c].end(), function (tt) {
            var t = (tt);//Track *
            if (stop) return;
            if (trial1time[c] >= t.start) {
                if (trial1time[c] > t.last) {
                }
                else {
                    t.updateM(trial1time[c], synthModeTrial1);
                    if (hi && hi.band >= minTrial1Band) {
                        var f = 0.5 * M;
                        t.updateFPH(trial1time[c], synthModeTrial1, h << 1, f, f);
                        t.synth(hi.trial1Buf[c], trial1time[c], h << 1, synthModeTrial1, c);
                    }
                    if (lo && lo.band >= minTrial1Band) {
                        var f = 2.0 * M;
                        t.updateFPH(trial1time[c], synthModeTrial1, h >> 1, f, f);
                        t.synth(lo.trial1Buf[c] + (trial1time[c] & (res * lo.res - 1)) * (h >> 1), trial1time[c], h >> 1, synthModeTrial1, c);
                    }
                    if (band >= minTrial1Band) {
                        var f = M;
                        t.updateFPH(trial1time[c], synthModeTrial1, h, f, f);
                        t.synth(trial1Buf[c] + (trial1time[c] & resMask) * h, trial1time[c], h, synthModeTrial1, c);
                    }
                }
            } else {
                stop = true;
            }
        });
        //#ifdef MULTITHREADED
        //    pthread_mutex_unlock(&trackMutex[c]);
        //#endif
        trial1time[c]++;
    },
    //void SMS :: 
    adjust2: function () {
        var me = this;
        var slice = [].zeros(2);//Slice* 
        for (var c = 0; c < me.channels; c++) {
            //#ifdef MULTITHREADED
            //      pthread_mutex_lock(&sliceMutex[c]);
            //#endif
            slice[c] = adjust2SliceQueue[c].front(); adjust2SliceQueue[c].pop();
            //#ifdef MULTITHREADED
            //      pthread_mutex_unlock(&sliceMutex[c]);
            //#endif
        }
        if (band >= minTrial2Band) {
            //#ifdef MULTITHREADED
            //    for(int c=0; c<channels; c++) {
            //        pthread_mutex_lock(&trial2Mutex[c]);
            //    }
            //#endif
            me.adjustInit(me.trial2RingBuf, me.trial2GrainBuf);
            //#ifdef MULTITHREADED
            //    for(int c=channels-1; c>=0; c--) {
            //        pthread_mutex_unlock(&trial2Mutex[c]);
            //    }
            //#endif
            me.adjust(me.trial2GrainBuf, me.mag1Queue, me.minCutSep1, me.mag11, me.dmag1,
                me.x11, me.adjust2time, slice);
        }
        if (me.channels == 2) {
            for (var c = 0; c < 2; c++) {
                //for(TrackPoint *pc = slice[c].bottom;
                //    pc;
                //    pc = pc.pn) {
                //    pc.bOwned = false;
                //    pc.cont = null;
                //}
                var pc = slice[c].bottom;
                while (pc) {
                    pc.bOwned = false;
                    pc.cont = null;
                    pc = pc.pn;
                }

            }
            for (var c = 0; c < 2; c++) {
                var c2 = (c == 0 ? 1 : 0);
                var begin = slice[c2].bottom;
                var pc = slice[c].bottom;
                while (pc) {
                    var F;
                    pc.cont = me.nearestForward(begin, pc, F, me.maxCost2Stereo, me.maxDFStereo, me.dMCoeff2Stereo);
                    pc = pc.pn
                }
            }
            //TrackPoint *p0 = slice[0].bottom;
            var p0 = slice[0].bottom;
            while (p0) {
                var p1 = p0.cont;//TrackPoint *
                if (p1 && p1.cont === p0) {
                    p0.dupStereo = p1;
                    p1.dupStereo = p0;
                }
                p0 = p0.pn
            }
        }
        me.adjust2time++;
    },
    //void SMS :: //float stretch, float pitch0, float pitch1
    adjust1: function (stretch, pitch0, pitch1) {
        var me = this;
        var U = MEPH.audio.sbsms.Util;
        var slice = [].zeros(2);// Slice* [2];
        for (var c = 0; c < me.channels; c++) {
            //#ifdef MULTITHREADED
            //    pthread_mutex_lock(&sliceMutex[c]);
            //#endif
            slice[c] = me.adjust1SliceQueue[c].front();
            me.adjust1SliceQueue[c].pop();
            //#ifdef MULTITHREADED
            //    pthread_mutex_unlock(&sliceMutex[c]);
            //#endif
        }
        if (me.band >= minTrial1Band) {
            //#ifdef MULTITHREADED
            //    for(int c=0; c<channels; c++) {
            //        pthread_mutex_lock(&trial1Mutex[c]);
            //    }
            //#endif
            me.adjustInit(me.trial1RingBuf, me.trial1GrainBuf);
            //#ifdef MULTITHREADED
            //    for(int c=channels-1; c>=0; c--) {
            //        pthread_mutex_unlock(&trial1Mutex[c]);
            //    }
            //#endif
            me.adjust(me.trial1GrainBuf, me.mag0Queue, me.minCutSep1,
                me.mag01, me.dmag0, me.x01, me.adjust1time, slice);
        }
        for (var c = 0; c < me.channels; c++) {
            delete slice[c];
        }

        var h2 = stretch * h1;
        me.h2cum += h2;
        var h2i = lrint(me.h2cum);
        me.h2cum -= h2i;
        for (var c = 0; c < me.channels; c++) {
            //#ifdef MULTITHREADED
            //    pthread_mutex_lock(&renderMutex[c]);
            //#endif
            me.nRender[c].push(h2i);
            //#ifdef MULTITHREADED
            //    pthread_mutex_unlock(&renderMutex[c]);
            //#endif
        }
        var dupStereoPostponed = [];//list<TrackPoint*> 
        for (var c = 0; c < me.channels; c++) {
            //#ifdef MULTITHREADED
            //    pthread_mutex_lock(&trackMutex[c]);
            //#endif
            //for(list<Track*>::iterator tt = renderTracks[c].begin(); 
            //    tt != renderTracks[c].end();
            //++tt) {
            var stop = false;
            var renderTracks = me.renderTracks;
            [].interpolate(renderTracks[c].begin(), renderTracks[c].end(), function (tt) {
                if (stop) return;
                var t = (tt);//Track *
                if (me.adjust1time >= t.start) {
                    if (me.adjust1time <= t.last) {
                        var tp = t.updateFPH(me.adjust1time, synthModeOutput, me.h2i,
                            me.pitch0, me.pitch1);//TrackPoint *
                        if (tp) {
                            dupStereoPostponed.push(tp);
                        }
                    }
                } else {
                    stop = true;
                }
            });
            //#ifdef MULTITHREADED
            //    pthread_mutex_unlock(&trackMutex[c]);
            //#endif  
        }
        //for(list<TrackPoint*>::iterator tpi = dupStereoPostponed.begin();
        //    tpi != dupStereoPostponed.end();
        //tpi++) {
        for (var tpi in dupStereoPostponed) {
            var tp = (tpi);//TrackPoint *
            tp.phSynth = U.canon2PI(tp.dupStereo.phSynth + tp.ph - tp.dupStereo.ph);
        }
        me.adjust1time++;
    },
    //int SMS :: //float *dmag, int k0, int maxK
    findCut: function (dmag, k0, maxK) {
        var me = this;
        var U = MEPH.audio.sbsms.Util;
        var k;
        for (k = Math.max(1, k0) ; k <= maxK; k++) {
            var dd0 = dmag[k + 1] - dmag[k];
            if (dd0 > 0.0) {
                var d02 = U.square(dmag[k + 1] + dmag[k]);
                if (dd0 * U.square(dmag[k] + dmag[k - 1]) > (dmag[k] - dmag[k - 1]) * d02
                   &&
                   dd0 * U.square(dmag[k + 2] + dmag[k + 1]) > (dmag[k + 2] - dmag[k + 1]) * d02) {
                    break;
                }
            }
        }
        return k;
    },

    //    void SMS :: //ArrayRingBuffer<float> **trialRingBuf,    GrainBuf *trialGrainBuf
    adjustInit: function (trialRingBuf, trialGrainBuf) {
        var me = this;
        var n = me.trialRingBuf[0].nReadable();
        for (var c = 1; c < me.channels; c++) {
            n = min(n, me.trialRingBuf[c].nReadable());
        }
        var ndone = 0;
        while (n) {
            var abuf = [].zeros(512);//audio[512]
            var ntodo = Math.min(512, n);
            for (var c = 0; c < me.channels; c++) {
                var fbuf = me.trialRingBuf[c].getReadBuf();
                for (var k = 0; k < ntodo; k++) {
                    abuf[k][c] = fbuf[ndone + k];
                }
            }
            for (var c = me.channels; c < 2; c++) {
                for (var k = 0; k < ntodo; k++) {
                    abuf[k][c] = 0.0;
                }
            }
            me.trialGrainBuf.write(abuf, ntodo);
            ndone += ntodo;
            n -= ntodo;
        }
        for (var c = 0; c < me.channels; c++) {
            me.trialRingBuf[c].advance(ndone);
        }
    },
    //    void SMS ::     
    //GrainBuf *trialGrainBuf,
    //queue<float*> *magQueue,
    //int minCutSep,
    //var **_mag1,
    //var **_dmag1,
    //audio **x1,
    //const TimeType &time,
    //Slice **slices
    adjust: function (trialGrainBuf,
                       magQueue,
                       minCutSep,
                       _mag1,
                       _dmag1,
                       x1,
                       time,
                       slices) {
        var me = this;
        var g = trialGrainBuf.read(trialGrainBuf.readPos);//grain *
        g.analyze();
        for (var c = 0; c < me.channels; c++) {
            var slice = slices[c];//Slice *
            var p = slice.bottom;//TrackPoint *
            if (c === 0) {
                c2even(g.x, x1[0], N);
            } else {
                c2odd(g.x, x1[1], N);
            }
            var mag1 = _mag1[c]///float */missing most float *;
            me.calcmags(mag1, x1[c]);
            //#ifdef MULTITHREADED
            //        pthread_mutex_lock(&magMutex[c]);
            //#endif
            var mag0 = magQueue[c].front();
            magQueue[c].pop();
            //#ifdef MULTITHREADED
            //        pthread_mutex_unlock(&magMutex[c]);
            //#endif
            if (p) {
                var dmag = _dmag1[c];
                var cuts = [];//list<int>
                var k3 = Math.min(me.Nover2, me.maxK + 2);

                dmag[0] = mag1[0];
                for (var k = Math.max(1, minK - 2) ; k < k3; k++) {
                    dmag[k] = mag1[k] - mag1[k - 1];
                }
                var k = minK;
                while (true) {
                    k = me.findCut(dmag, k + 1, me.maxK);
                    if (k >= me.maxK) {
                        break;
                    } else {
                        cuts.push(k);
                    }
                }
                var bDone = false;
                while (!bDone) {
                    bDone = true;
                    //for(list<int>::iterator i = cuts.begin();
                    //    i != cuts.end();
                    //++i) {
                    for (var i in cuts) {
                        var k0 = i;
                        var ibad = cuts.last();//list<int>::iterator 
                        var i2 = i;//list<int>::iterator 
                        ++i2;
                        var maxY = 0.0;
                        for (; i2 != cuts.last() ; ++i2) {
                            var k2 = cuts[i2];//dont know
                            if (k2 - k0 >= minCutSep) break;
                            var y = mag0[k2] * mag1[k2];
                            if (y >= maxY) {
                                maxY = y;
                                ibad = i2;
                            }
                            k0 = k2;
                        }
                        if (ibad != cuts.last()) {
                            if (mag0[cuts[i]] * mag1[cuts[i]] > maxY) {
                                ibad = i;
                            }
                            cuts.splice(ibad, 1);
                            bDone = false;
                            break;
                        }
                    }
                }
                cuts.unshift(minK);
                cuts.push(maxK);
                //list<int>::iterator i = cuts.first();
                var i = 0;
                while (p) {
                    var k0 = i;
                    ++i;
                    if (i == cuts.length) break;
                    var k2 = i;
                    if (p.x > k2) continue;
                    var m0 = 0.0;
                    var m1 = 0.0;
                    for (var k = k0; k <= k2; k++) {
                        m0 += mag0[k];
                        m1 += mag1[k];
                    }
                    var s = (m1 > m0 ? Math.sqrt(m0 / m1) : 1.0);
                    while (p && p.x <= k2) {
                        p.m *= s;
                        p = p.pn;
                    }
                }
            }
            //free(mag0);
        }
        me.trialGrainBuf.advance(1);
    },
    //void SMS :: //int c, list<SBSMSRenderer*> &renderers
    render: function (c, renderers) {
        //#ifdef MULTITHREADED
        //        pthread_mutex_lock(&renderMutex[c]);
        //#endif
        var me = this;
        var n = me.nRender[c].front();
        me.nRender[c].pop();
        //#ifdef MULTITHREADED
        //        pthread_mutex_unlock(&renderMutex[c]);
        //#endif
        var time = me.synthtime[c];
        //(list<SBSMSRenderer*>::iterator i = renderers.begin(); i != renderers.end(); ++i) {
        [].interpolate(renderers.begin(), renderers.end(), function (i) {
            var renderer = renderers[i];//SBSMSRenderer *
            renderer.startTime(c, time, n);
        });
        //#ifdef MULTITHREADED
        //        pthread_mutex_lock(&trackMutex[c]);
        //#endif
        //for(list<Track*>::iterator tt = renderTracks[c].begin(); 
        //tt != renderTracks[c].end();) {
        //   var toremove = 
        MEPH.Log('There are probably problems here')
        var stop = false;
        var renderTracks = me.renderTracks;
        var toremove = [];
        [].interpolate(renderTracks[c].begin(), renderTracks[c].end(), function (tt) {
            if (stop) return;
            var t = renderTracks[c][tt];//Track *

            if (t.bEnded && time > t.last) {
                var eraseMe = tt;//list<Track*>::iterator
                ++tt;
                toremove.push(eraseMe);
                //renderTracks[c].splice(eraseMe,1);
                //delete t;
            } else if (time >= t.start) {
                if (time <= t.last) {
                    t.updateM(time, synthModeOutput);
                    //for(list<SBSMSRenderer*>::iterator i = renderers.begin(); i != renderers.end(); ++i) {

                    [].interpolate(renderers.begin(), renderers.end(), function (i) {
                        var renderer = renderers[i];//SBSMSRenderer *
                        renderer.render(c, t);
                    });
                    t.step(time);
                }
                ++tt;
            } else {
                stop = true;
            }
        });
        renderTracks.removeIndices(toremove);
        //#ifdef MULTITHREADED
        //        pthread_mutex_unlock(&trackMutex[c]);
        //#endif  
        //  for(list<SBSMSRenderer*>::iterator i = renderers.begin(); i != renderers.end(); ++i) {
        //for(list<SBSMSRenderer*>::iterator i = renderers.begin(); i != renderers.end(); ++i) {
        [].interpolate(renderers.begin(), renderers.end(), function (i) {
            var renderer = renderers[i];//SBSMSRenderer *  
            renderer.endTime(c);
        });
        synthtime[c]++;
    },
    //    TrackPoint *SMS ::    
    //TrackPoint **begin, TrackPoint *tp0, float *minCost2, float maxCost2, float maxDF, float dMCoeff2, float dNCoeff2
    nearestForward: function (begin, tp0, minCost2, maxCost2, maxDF, dMCoeff2, dNCoeff2) {
        var me = this;
        var U = MEPH.audio.sbsms.Util;
        var minCost2 = TrackPointNoCont;
        var minF = tp0.f - maxDF;
        var maxF = tp0.f + maxDF;
        var maxDF2 = U.square(maxDF);
        while ((begin) && (begin).f < minF) {
            (begin) = (begin).pn;
        }
        var mintp1 = null;//TrackPoint *
        var tp1 = (begin);//TrackPoint *
        while (tp1) {
            if (tp1.bOwned) {
                continue;
            }
            else {
                var df2 = square(tp1.f - tp0.f);
                if (df2 > maxDF2) break;
                var dM2 = dBApprox(tp1.m2, tp0.m2);
                var cost2 = (df2 + dMCoeff2 * dM2);
                if (cost2 > maxCost2) continue;
                if (cost2 < (minCost2)) {
                    (minCost2) = cost2;
                    mintp1 = tp1;
                }
            }
            tp1 = tp1.pn
        }
        return mintp1;
    },
    //TrackPoint *SMS :: 
    //TrackPoint **begin, TrackPoint *tp0, float *minCost2, float maxCost2, float maxDF, float dMCoeff2, float dNCoeff2
    nearestReverse: function (begin, tp0, minCost2, maxCost2, maxDF, dMCoeff2, dNCoeff2) {
        var me = this;
        var U = MEPH.audio.sbsms.Util;
        var minCost2 = TrackPointNoCont;
        var minF = tp0.f - maxDF;
        var maxF = tp0.f + maxDF;
        var maxDF2 = U.square(maxDF);
        while ((begin) && (begin).f > maxF) {
            (begin) = (begin).pp;
        }
        var mintp1 = null;
        var tp1 = (begin);
        while (tp1) {
            if (tp1.bOwned) {
                continue;
            }
            else {
                var df2 = U.square(tp1.f - tp0.f);
                if (df2 > maxDF2) break;
                var dM2 = dBApprox(tp1.m2, tp0.m2);
                var cost2 = (df2 + dMCoeff2 * dM2);
                if (cost2 > maxCost2) continue;
                if (cost2 < (minCost2)) {
                    (minCost2) = cost2;
                    mintp1 = tp1;
                }
            }
            tp1 = tp1.pp;
        }
        return mintp1;
    },
    //TrackPoint *SMS :: 
    //TrackPoint **begin, TrackPoint *tp0, float *minCost2, float maxCost2, float maxDF, float dMCoeff2, float dNCoeff2
    nearestForward2: function (begin, tp0, minCost2, maxCost2, maxDF, dMCoeff2, dNCoeff2) {
        var me = this;
        var U = MEPH.audio.sbsms.Util;
        minCost2 = TrackPointNoCont;//References something outsidefunction,need to adjust

        var minF = tp0.f - maxDF;
        var maxF = tp0.f + maxDF;
        var maxDF2 = U.square(maxDF);
        while ((begin) && (begin).f < minF) {
            (begin) = (begin).pn;
        }
        var mintp1 = null;//TrackPoint *
        var tp1 = (begin);//TrackPoint *
        while (tp1) {
            if (!tp1.owner) continue;
            var df2 = U.square(tp1.f - tp0.f);
            if (df2 > maxDF2) break;
            var dM2 = dBApprox(0.25 * tp1.m2, tp0.m2);
            var cost2 = (df2 + dMCoeff2 * dM2);
            if (cost2 > maxCost2) continue;
            if (cost2 < (minCost2)) {
                (minCost2) = cost2;
                mintp1 = tp1;
            }
            tp1 = tp1.pn
        }
        return mintp1;
    },
    //TrackPoint *SMS :: 
    //TrackPoint **begin, TrackPoint *tp0, float *minCost2, float maxCost2, float maxDF, float dMCoeff2, float dNCoeff2
    nearestReverse2: function (begin, tp0, minCost2, maxCost2, maxDF, dMCoeff2, dNCoeff2) {
        var me = this;
        var U = MEPH.audio.sbsms.Util;
        var minCost2 = TrackPointNoCont;
        var minF = tp0.f - maxDF;
        var maxF = tp0.f + maxDF;
        var maxDF2 = U.square(maxDF);
        while ((begin) && (begin).f > maxF) {
            (begin) = (begin).pp;
        }
        var mintp1 = null;//TrackPoint *
        var tp1 = (begin);//TrackPoint *
        while (tp1) {
            if (!tp1.owner) continue;
            var df2 = U.square(tp1.f - tp0.f);
            if (df2 > maxDF2) break;
            var dM2 = dBApprox(tp1.m2, tp0.m2);
            var cost2 = (df2 + dMCoeff2 * dM2);
            if (cost2 > maxCost2) continue;
            if (cost2 < (minCost2)) {
                (minCost2) = cost2;
                mintp1 = tp1;
            }
            tp1 = tp1.pp
        }
        return mintp1;
    },

    //void SMS :: 
    //TrackPoint *tp0, TrackPoint *tp1, int ilo, int c
    connect: function (tp0, tp1, ilo, c) {
        var me = this;
        var time = me.assigntime[c];//TimeType 
        if (tp0.slice.band == tp1.slice.band) {
            //#ifdef MULTITHREADED
            //    pthread_mutex_lock(&trackMutex[c]);
            //#endif    
            tp0.owner.push(tp1);
            //#ifdef MULTITHREADED
            //    pthread_mutex_unlock(&trackMutex[c]);
            //#endif
        }
        else if (tp0.slice.band < tp1.slice.band) {
            var precursor = tp0.owner;//Track *
            if (ilo === 1) {
                //#ifdef MULTITHREADED
                //        pthread_mutex_lock(&trackMutex[c]);
                //#endif
                precursor.push(tp1);
                precursor.endTrack(true);
                var time = precursor.end / res;//TimeType 
                //#ifdef MULTITHREADED
                //        pthread_mutex_unlock(&trackMutex[c]);
                //#endif
                //#ifdef MULTITHREADED
                //        pthread_mutex_lock(&lo.trackMutex[c]);
                //#endif
                me.lo.createTrack(c, tp1, time, true);
                //#ifdef MULTITHREADED
                //        pthread_mutex_unlock(&lo.trackMutex[c]);
                //#endif
            } else {
                //#ifdef MULTITHREADED
                //        pthread_mutex_lock(&trackMutex[c]);
                //#endif
                var time = precursor.end / res;//TimeType
                precursor.endTrack(true);
                last = precursor.back();//TrackPoint *
                //#ifdef MULTITHREADED
                //        pthread_mutex_unlock(&trackMutex[c]);
                //#endif
                //#ifdef MULTITHREADED
                //        pthread_mutex_lock(&lo.trackMutex[c]);
                //#endif
                var t = lo.createTrack(c, last, time, true);//Track *
                t.push(tp1);
                //#ifdef MULTITHREADED
                //        pthread_mutex_unlock(&lo.trackMutex[c]);
                //#endif
                last.owner = precursor;
            }
        } else {
            var precursor = tp0.owner;//Track *
            //#ifdef MULTITHREADED
            //    pthread_mutex_lock(&trackMutex[c]);
            //#endif
            precursor.push(tp1);
            precursor.endTrack(true);
            time = precursor.end * me.hi.res;//TimeType 
            //#ifdef MULTITHREADED
            //    pthread_mutex_unlock(&trackMutex[c]);
            //#endif
            //#ifdef MULTITHREADED
            //    pthread_mutex_lock(&hi.trackMutex[c]);
            //#endif
            me.hi.createTrack(c, tp1, time, true);
            //#ifdef MULTITHREADED
            //    pthread_mutex_unlock(&hi.trackMutex[c]);
            //#endif
        }
        tp0.bConnected = true;
        tp1.bConnected = true;
        tp0.bOwned = true;
        tp1.bOwned = true;
        if (tp0.dupcont) {
            dup = tp0.dupcont;//TrackPoint *
            if (!dup.owner) {
                dup.bOwned = true;
                dup.bDelete = true;
            }
        }
        dup2 = tp0.dup[2];//TrackPoint *
        if (dup2 && dup2 != tp1 && !dup2.owner) {
            dup2.bOwned = true;
            dup2.bDelete = true;
        }
        for (var d = 0; d < 3; d++) {
            var dup = tp1.dup[d];//TrackPoint *
            if (dup && !dup.owner && (d < 2 || dup.slice.band < tp1.slice.band)) {
                dup.bOwned = true;
                dup.bDelete = true;
            }
        }
    },
    //void SMS :: long offset, int c
    mark: function (offset, c) {
        var me = this;
        me.$mark(offset, 0, c);
        if (offset & me.resMask) {
            me.$mark(offset, 1, c);
        }
    },

    //void SMS :: long offset, long offsetlo, int c
    $mark: function (offset, offsetlo, c) {
        var me = this;
        var lo = me.lo;
        var res = me.res;

        if (!lo) return;
        //#ifdef MULTITHREADED
        //        pthread_mutex_lock(&lo.sliceMutex[c]);
        //#endif
        var sliceL1 = lo.sliceBuffer[c].read(lo.sliceBuffer[c].readPos +
            offset / res +
            offsetlo);//Slice *
        //#ifdef MULTITHREADED
        //        pthread_mutex_unlock(&lo.sliceMutex[c]);
        //#endif
        //#ifdef MULTITHREADED
        //        pthread_mutex_lock(&sliceMutex[c]);
        //#endif
        var sliceM1 = me.sliceBuffer[c].read(me.sliceBuffer[c].readPos + offset);//Slice *
        //#ifdef MULTITHREADED
        //        pthread_mutex_unlock(&sliceMutex[c]);
        //#endif
        var b0 = !(offset & resMask);
        var bDone = false;
        var bLastDitch = false;
        while (!bDone) {
            var nToCont = 0;
            var nCont = 0;
            var rbegin = null;//
            var begin = sliceL1.bottom;//TrackPoint *
            var tp = sliceM1.bottom;//TrackPoint *tp = sliceM1.bottom;
            while (tp) {
                if (tp.bMarked) continue;
                if (tp.f > me.maxFMatchM) {
                    break;
                } else {
                    rbegin = tp;
                }
                var F;

                //refactor
                tp.cont = me.nearestForward(begin, tp, F, me.maxCost2Match, me.maxDFMatch, me.dMCoeff2Match);
                if (tp.cont) nToCont++;
                tp = tp.pn
            }
            if (sliceL1) {
                var tp = sliceL1.top;//TrackPoint *
                while (tp) {
                    if (tp.f < minFLo) break;
                    var F;
                    tp.cont = me.nearestReverse(rbegin, tp, F, maxCost2Match, maxDFMatch, dMCoeff2Match);
                    tp = tp.pp;
                }

            }
            //TrackPoint *tp0 = sliceM1.bottom;
            var tp0 = sliceM1.bottom;
            while (tp0) {
                if (tp0.bMarked) continue;
                if (tp0.f > maxFMatchM) {
                    break;
                }
                //TrackPoint *
                var tp1 = tp0.cont;
                if (tp1) {
                    if (bLastDitch || tp1.cont == tp0) {
                        nCont++;
                        var bAlreadyMarked = false;
                        if (b0) {
                            if (tp1.dup[1] || tp0.dup[1]) {
                                bAlreadyMarked = true;
                            }
                        } else {
                            if (tp1.dup[2 - 2 * offsetlo] || tp0.dup[2 * offsetlo]) {
                                bAlreadyMarked = true;
                            }
                        }
                        if (!bAlreadyMarked) {
                            if (b0) {
                                tp1.dup[1] = tp0;
                                tp0.dup[1] = tp1;
                            } else {
                                tp1.dup[2 - 2 * offsetlo] = tp0;
                                tp0.dup[2 * offsetlo] = tp1;
                            }
                        }
                        tp0.bMarked = true;
                    }
                }
                tp0 = tp0.pn
            }
            bDone = (nToCont == nCont);
            bLastDitch = (!bDone && nCont == 0);
        }
    },
    //void SMS :: long offset, int c
    assignStart: function (offset, c) {
        var me = this;
        me.bAssignDone[c] = false;
        //#ifdef MULTITHREADED
        //pthread_mutex_lock(&sliceMutex[c]);
        //#endif
        me.sliceM0[c] = me.sliceBuffer[c].read(me.sliceBuffer[c].readPos + offset);
        me.sliceM1[c] = me.sliceBuffer[c].read(me.sliceBuffer[c].readPos + offset + 1);
        if (me.res == 2) {
            me.sliceM2[c] = me.sliceBuffer[c].read(me.sliceBuffer[c].readPos + offset + 2);
        } else {
            me.sliceM2[c] = null;
        }
        //#ifdef MULTITHREADED
        //pthread_mutex_unlock(&sliceMutex[c]); 
        //#endif
        //TrackPoint *tp = sliceM0[c].bottom;
        var tp = sliceM0[c].bottom;
        while (tp) {
            if (!tp.owner.bEnded) {
                tp.owner.bEnd = true;
                tp.bConnected = false;
                tp.bOwned = false;
            } else {
                tp.bConnected = true;
                tp.bOwned = true;
            }
            tp = tp.pn;
        }
        //#ifdef MULTITHREADED
        //if(hi) pthread_mutex_lock(&hi.sliceMutex[c]);
        //#endif
        me.sliceH0[c] = me.hi ? me.hi.sliceBuffer[c].read(me.hi.sliceBuffer[c].readPos + (offset + 1) * me.hi.res) : null;
        me.sliceH0[c] = null;
        me.sliceH1[c] = me.hi ? me.hi.sliceBuffer[c].read(me.hi.sliceBuffer[c].readPos + (offset + 1) * me.hi.res) : null;
        //#ifdef MULTITHREADED 
        //if(hi) pthread_mutex_unlock(&hi.sliceMutex[c]);
        //#endif
        //#ifdef MULTITHREADED
        //if(lo) pthread_mutex_lock(&lo.sliceMutex[c]);
        //#endif
        me.sliceL0[c] = me.lo ? me.lo.sliceBuffer[c].read(me.lo.sliceBuffer[c].readPos + offset / me.res + 1) : null;
        me.sliceL0[c] = null;
        me.sliceL1[c] = me.lo ? me.lo.sliceBuffer[c].read(lo.sliceBuffer[c].readPos + offset / me.res + 1) : null;
        //#ifdef MULTITHREADED
        //if(lo) pthread_mutex_unlock(&lo.sliceMutex[c]);
        //#endif
    },
    //void SMS :: long offset, int c
    assignInit: function (offset, c) {
        var me = this;
        //TrackPoint *tp = sliceM1[c].bottom;
        var tp = me.sliceM1[c].bottom;
        while (tp
      ) {
            tp.cont = null;
            tp.contF = TrackPointNoCont;
            tp = tp.pn;
        }
        if (me.sliceM2[c]) {
            //TrackPoint *tp = sliceM2[c].bottom;
            var tp = me.sliceM2[c].bottom;
            while (tp) {
                tp.cont = null;
                tp.contF = TrackPointNoCont;
                tp = tp.pn;
            }
        }
    },
    //void SMS :: //long offset, int c
    assignFind: function (offset, c) {
        var me = this;
        if (me.bAssignDone[c]) return;
        var sliceM0 = this.sliceM0[c];
        //        Slice *
        var sliceM1 = this.sliceM1[c];
        var sliceM2 = this.sliceM2[c];
        var sliceL1 = this.sliceL1[c];
        var sliceH1 = this.sliceH1[c];
        var begin;
        begin = sliceM0.bottom;
        //TrackPoint *tp = sliceM1.bottom;
        var tp = sliceM1.bottom;
        while (tp) {
            if (tp.bOwned) continue;
            var F;
            tp.bConnect = false;
            var minM = nearestForward(begin, tp, F, me.maxCost2, me.maxDF, me.dMCoeff2, me.dNCoeff2);//TrackPoint *
            if (minM && F < tp.contF) {
                tp.cont = minM;
                tp.contF = F;
            }
            tp = tp.pn;
        }
        if (sliceL1) {
            var rbegin = sliceM0.top;//TrackPoint *
            //TrackPoint *tp = sliceL1.top;
            var tp = sliceL1.top;
            while (tp) {
                if (tp.bOwned) continue;
                if (tp.f < me.minFLo) break;
                var F;
                var minL = me.nearestReverse(rbegin, tp, F, me.maxCost2, me.maxDF, me.dMCoeff2, me.dNCoeff2);
                if (minL) {
                    F *= me.localFavorRatio;
                    if (F < tp.contF) {
                        tp.cont = minL;
                        tp.contF = F;
                    }
                }
                tp = tp.pp;
            }
        }
        begin = sliceM0.bottom;
        if (sliceH1) {
            //TrackPoint *tp = sliceH1.bottom;
            var tp = sliceH1.bottom;
            while (tp) {
                if (tp.bOwned) continue;
                if (tp.f > me.maxFHi) break;
                var F;
                //TrackPoint *
                var minH = me.nearestForward(begin, tp, F, me.maxCost2, me.maxDF, me.dMCoeff2, me.dNCoeff2);
                if (minH) {
                    F *= me.localFavorRatio;
                    if (F < tp.contF) {
                        tp.cont = minH;
                        tp.contF = F;
                    }
                }
                tp = tp.pn;
            }
        }
        if (sliceM2 && !(offset & me.resMask)) {
            begin = sliceM1.bottom;
            var tp = sliceM2.bottom;
            while (tp) {
                if (tp.bOwned) continue;
                var F;
                tp.bConnect = false;
                var minM = me.nearestForward(begin, tp, F, me.maxCost2, me.maxDF, me.dMCoeff2);
                if (minM) {
                    tp.cont = minM;
                    tp.contF = F;
                }
                tp = tp.pn;
            }
            if (sliceL1) {
                //TrackPoint *tp = sliceM2.bottom;
                var tp = sliceM2.bottom;
                while (tp) {
                    if (tp.bOwned) continue;
                    if (tp.f > me.maxFMid) break;
                    var F;
                    var rbegin = sliceL1.top;//TrackPoint *
                    var minL = nearestReverse(rbegin, tp, F, me.maxCost2, me.maxDF, me.dMCoeff2);//TrackPoint *
                    if (minL) {
                        F *= me.localFavorRatio;
                        if (F < tp.contF) {
                            tp.cont = minL;
                            tp.contF = F;
                        }
                    }
                    tp = tp.pn;
                }
            }
        }
    },
    //bool SMS :: //long offset, int c, bool bLastDitch
    assignConnect: function (offset, c, bLastDitch) {
        var me = this;
        if (me.bAssignDone[c]) return false;
        var sliceM0 = this.sliceM0[c];
        var sliceM1 = this.sliceM1[c];
        var sliceL1 = this.sliceL1[c];
        var sliceH1 = this.sliceH1[c];
        var nToCont = 0;
        var nCont = 0;
        var b0 = !(offset & me.resMask);
        var ilo;
        if (me.res == 2 && b0) {
            ilo = 0;
        } else {
            ilo = 1;
        }
        //TrackPoint *
        var beginM1 = sliceM1.bottom;
        var beginH1;//TrackPoint *
        if (sliceH1) beginH1 = sliceH1.bottom;
        //TrackPoint *tp = sliceM0.bottom;
        var tp = sliceM0.bottom;
        while (tp) {
            if (tp.bOwned) continue;
            var FM1 = TrackPointNoCont;
            var FL1 = TrackPointNoCont;
            var FH1 = TrackPointNoCont;
            var minM1 = me.nearestForward(beginM1, tp, FM1, me.maxCost2, me.maxDF, me.dMCoeff2, me.dNCoeff2);
            var minL1 = null;
            if (sliceL1 && tp.f < me.maxFMid) {
                var rbeginL1 = sliceL1.top;
                minL1 = me.nearestReverse(rbeginL1, tp, FL1, me.maxCost2, me.maxDF, me.dMCoeff2, me.dNCoeff2);
                FL1 *= me.localFavorRatio;
            }
            var minH1 = null;
            if (sliceH1 && tp.f > me.minFMid) {
                minH1 = me.nearestForward(beginH1, tp, FH1, me.maxCost2, me.maxDF, me.dMCoeff2, me.dNCoeff2);
                FH1 *= localFavorRatio;
            }
            if (minM1 &&
               ((FM1 <= FH1 && FM1 <= FL1)
                || (minL1 && FL1 <= FH1 && FL1 <= FM1 && minL1.dup[ilo] == minM1)
                || (minH1 && FH1 <= FL1 && FH1 <= FM1 && minH1.dup[1] == minM1))) {
                if (ilo == 1 && minL1 && minL1.dup[1] == minM1) {
                    tp.dupcont = minL1;
                } else if (minH1 && minH1.dup[1] == minM1) {
                    tp.dupcont = minH1;
                } else {
                    tp.dupcont = null;
                }
                tp.contF = FM1;
                tp.cont = minM1;
                nToCont++;
            } else if (minL1 && FL1 <= FM1 && FL1 <= FH1) {
                if (minM1 && minL1.dup[ilo] == minM1) {
                    tp.dupcont = minM1;
                } else {
                    tp.dupcont = null;
                }
                tp.contF = FL1;
                tp.cont = minL1;
                nToCont++;
            } else if (minH1 && FH1 <= FM1 && FH1 <= FL1) {
                if (minM1 && minH1.dup[1] == minM1) {
                    tp.dupcont = minM1;
                } else {
                    tp.dupcont = null;
                }
                tp.contF = FH1;
                tp.cont = minH1;
                nToCont++;
            } else {
                tp.cont = null;
            }
            tp = tp.pn;
        }

        //TrackPoint *tp0 = sliceM0.bottom;
        var tp0 = sliceM0.bottom;
        while (tp0) {
            if (tp0.bOwned) continue;
            tp0.bConnect = false;
            var tp1 = tp0.cont;//TrackPoint *
            var time = me.assigntime[c];//TimeType 
            if (tp1 && !tp1.bOwned &&
               (bLastDitch ||
                (tp1.cont == tp0) ||
                ((tp1.cont && tp0.contF <= tp1.cont.contF) &&
                 ((tp1.cont.dup[0] == tp0) ||
                  (tp1.cont.dup[1] == tp0))))) {
                tp1.cont = tp0;
                tp0.bConnect = true;
                tp1.bConnect = true;
            }
            tp0 = tp0.pn
        }
        //TrackPoint *tp0 = sliceM0.bottom;
        var tp0 = sliceM0.bottom;
        while (
            tp0) {
            if (tp0.bOwned) continue;
            var tp1 = tp0.cont;//TrackPoint *
            if (tp0.bConnect && tp1 && !tp1.bOwned && tp1.bConnect && tp1.cont == tp0) {
                var dupcont = tp0.dupcont;//TrackPoint *
                if (dupcont && dupcont.bConnect) {
                    if (!tp1.bConnected && !dupcont.bConnected) {
                        if (!tp0.bConnected && (dupcont.cont == null || tp0.contF <= dupcont.cont.contF)) {
                            nCont++;
                            me.connect(tp0, tp1, ilo, c);
                            tp0.owner.bEnd = false;
                            dupcont.bConnect = false;
                        } else if (dupcont.cont && !dupcont.cont.bConnected) {
                            nCont++;
                            me.connect(dupcont.cont, dupcont, ilo, c);
                            dupcont.cont.owner.bEnd = false;
                            tp1.bConnect = false;
                        }
                    }
                } else if (!tp0.bConnected && !tp1.bConnected) {
                    nCont++;
                    me.connect(tp0, tp1, ilo, c);
                    tp0.owner.bEnd = false;
                }
            }
            tp0 = tp0.pn;
        }
        me.bAssignDone[c] = (nToCont == nCont || bLastDitch);
        return !(me.bAssignDone[c] || nCont == 0);
    },
    //void SMS :: //long offset, int c
    start: function (offset, c) {
        var me = this;
        var renderTracks = me.renderTracks;
        me.started[c].clear();
        me.ended[c].clear();
        //#ifdef MULTITHREADED
        //        pthread_mutex_lock(&trackMutex[c]);
        //#endif
        //for(list<Track*>::iterator tt = assignTracks[c].begin(); 
        //    tt != assignTracks[c].end(); ) {
        var toremove = [];
        [].interpolate(me.assignTracks[c].begin(), me.assignTracks[c].end(), function (tt) {
            var t = me.assignTracks[c][(tt)];//Track *
            var bKeep;
            var jump = false;
            if (t.bEnded) {
                bKeep = ((!t.bRender) && (t.bStitch || t.size() >= me.minTrackSize));
                if (me.assigntime[c] > t.last) {
                    me.returnTrackIndex(c, t);
                    var eraseMe = tt;
                    toremove.push(eraseMe);
                    // moved: me.assignTracks[c].erase(eraseMe);
                } else {
                    ++tt;
                }
            } else if (t.bEnd) {
                bKeep = (t.bStitch || t.size() >= me.minTrackSize);
                if (bKeep) {
                    bKeep = !t.bRender;
                    t.endTrack(false);
                    ended[c].push_back(t.back());
                    ++tt;
                } else {
                    //list<Track*>::iterator eraseMe = tt;
                    //++tt;
                    toremove.push(eraseMe);
                    //assignTracks[c].erase(eraseMe);
                    me.returnTrackIndex(c, t);
                    t.absorb();
                    delete t;
                    jump = true;
                }
            } else {
                bKeep = ((!t.bRender) && (t.bStitch || t.size() >= me.minTrackSize));
                ++tt;
            }
            if (!jump)
                if (bKeep) {
                    var tt0 = renderTracks[c].rbegin();
                    while (tt0 != renderTracks[c].rend()) {
                        var t0 = renderTracks[c][tt0];
                        if (t.start >= t0.start) {
                            break;
                        }
                        tt0++;
                    }
                    renderTracks[c].insert(tt0.base(), t);
                    t.bRender = true;
                }
        });

        me.assignTracks[c].removeIndices(toremove);
        //#ifdef MULTITHREADED
        //        pthread_mutex_unlock(&trackMutex[c]);
        //#endif
        //#ifdef MULTITHREADED
        //        pthread_mutex_lock(&sliceMutex[c]);
        //#endif
        var sliceM0 = sliceBuffer[c].read(sliceBuffer[c].readPos + offset);//Slice *
        me.adjust2SliceQueue[c].push(sliceM0);
        me.adjust1SliceQueue[c].push(sliceM0);
        //#ifdef MULTITHREADED
        //        pthread_mutex_unlock(&sliceMutex[c]); 
        //#endif
        //TrackPoint *tp = sliceM0.bottom;
        var tp = sliceM0.bottom;
        while (tp) {
            var tpn = tp.pn;
            if (tp.bOwned) {
                if (tp.bDelete) {
                    tp.destroy();
                }
            } else {
                var t = me.createTrack(c, tp, me.assigntime[c], false);
                me.started[c].push(tp);
                for (var d = 0; d < 2; d++) {
                    var dup = tp.dup[d];//TrackPoint  *
                    if (dup && !dup.owner) {
                        dup.destroy();
                    }
                }
            }
            tp = tpn;
        }
        me.assigntime[c]++;
    },
    //void SMS :: //int c
    splitMerge: function (c) {
        var me = this;
        var time = me.assigntime[c] - 1;
        //#ifdef MULTITHREADED
        //        pthread_mutex_lock(&trackMutex[c]);
        //#endif
        var sliceM0 = this.sliceM0[c];
        var sliceL0 = this.sliceL0[c];
        var sliceH0 = this.sliceH0[c];
        var sliceM1 = this.sliceM1[c];
        var sliceL1 = this.sliceL1[c];
        var sliceH1 = this.sliceH1[c];
        var rbeginL0 = sliceL0 ? sliceL0.top : null;
        var beginM0 = sliceM0.bottom;
        var beginH0 = sliceH0 ? sliceH0.bottom : null;
        //for(list<TrackPoint*>::iterator i = started[c].begin();
        //    i != started[c].end();
        //++i) {
        [].interpolate(started[c].begin(), started[c].end(), function (i) {
            var tp = started[c][i];
            var F, FL, FH;
            tp.cont = me.nearestForward2(beginM0, tp, F, me.maxCost2SplitMerge,
                me.maxDFSplitMerge, me.dMCoeff2SplitMerge);
            var minL = me.nearestReverse2(rbeginL0, tp, FL, me.maxCost2SplitMerge, me.maxDFSplitMerge, me.dMCoeff2SplitMerge);
            if (minL) {
                FL *= me.localFavorRatio;
                if (FL < F) {
                    tp.cont = minL;
                    F = FL;
                }
            }
            var minH = me.nearestForward2(beginH0, tp, FH, me.maxCost2SplitMerge, me.maxDFSplitMerge, me.dMCoeff2SplitMerge);
            if (minH) {
                FH *= me.localFavorRatio;
                if (FH < F) {
                    tp.cont = minH;
                }
            }
            if (tp.cont) {
                tp.owner.point.insert(tp.owner.point.begin(), tp.cont);
                tp.owner.first--;
                tp.owner.bStitch = true;
                tp.bSplit = true;
                tp.cont.bSplit = true;
                tp.owner.bSplit = true;
                tp.cont.refCount++;
                tp.cont.owner.bStitch = true;
            }
        });

        var rbeginL1 = sliceL1 ? sliceL1.top : null;
        var beginM1 = sliceM1.bottom;
        var beginH1 = sliceH1 ? sliceH1.bottom : null;
        //for(list<TrackPoint*>::iterator i = ended[c].begin();
        //    i != ended[c].end();
        //++i) {
        [].interpolate(me.ended[c].begin(), me.ended[c].end(), function (i) {
            var tp = me.ended[c][i];
            var F, FL, FH;
            tp.cont = me.nearestForward2(beginM1, tp, F, me.maxCost2SplitMerge, me.maxDFSplitMerge, me.dMCoeff2SplitMerge);
            var minL = me.nearestReverse2(rbeginL1, tp, FL, me.maxCost2SplitMerge, me.maxDFSplitMerge, me.dMCoeff2SplitMerge);
            if (minL) {
                FL *= me.localFavorRatio;
                if (FL < F) {
                    tp.cont = minL;
                    F = FL;
                }
            }
            var minH = me.nearestForward2(beginH1, tp, FH, me.maxCost2SplitMerge, me.maxDFSplitMerge, me.dMCoeff2SplitMerge);
            if (minH) {
                FH *= me.localFavorRatio;
                if (FH < F) {
                    tp.cont = minH;
                }
            }
            if (tp.cont) {
                tp.owner.point.insert(tp.owner.point.end(), tp.cont);
                tp.owner.last++;
                tp.owner.bStitch = true;
                tp.bMerge = true;
                tp.cont.bMerge = true;
                tp.owner.bMerge = true;
                tp.cont.refCount++;
                tp.cont.owner.bStitch = true;
            }
        });
        //#ifdef MULTITHREADED
        //        pthread_mutex_unlock(&trackMutex[c]);
        //#endif
    },
    //void SMS :: int c
    advance: function (c) {
        var me = this;
        //#ifdef MULTITHREADED
        //    pthread_mutex_lock(&sliceMutex[c]);
        //#endif
        me.sliceBuffer[c].advance(1);
        //#ifdef MULTITHREADED
        //    pthread_mutex_unlock(&sliceMutex[c]);
        //#endif
    },
    //void SMS :: //grain *g0, grain *g1, grain *g2, int c
    add: function (g0, g1, g2, c) {
        var me = this;
        if (c == 0) {
            if (me.band >= minTrial1Band) {
                c2even(g0.x, me.x00[0], me.N);
            }
            if (me.band >= minTrial2Band) {
                c2even(g1.x, me.x10[0], me.N);
            }
            c2even(g2.x, me.x2[0], me.N);
        } else {
            if (me.band >= minTrial1Band) {
                c2odd(g0.x, me.x00[1], me.N);
            }
            if (me.band >= minTrial2Band) {
                c2odd(g1.x, me.x10[1], me.N);
            }
            c2odd(g2.x, me.x2[1], me.N);
        }

        var mag0;
        if (me.band >= minTrial1Band) {
            mag0 = [].zeros(me.Nover2 + 1);//(float*)malloc((Nover2+1)*sizeof(float));
            me.calcmags(mag0, x00[c]);
        }
        var mag1;
        if (me.band >= minTrial2Band) {
            mag1 = [].zeros(me.Nover2 + 1);//(float*)malloc((Nover2+1)*sizeof(float));
            me.calcmags(mag1, x10[c]);
        }
        var mag2sum = [].zeroes(1024);
        //memset(mag2sum,0,1024*sizeof(float));

        var mag2 = this.mag2[c];
        me.calcmags(mag2sum, g2.x);
        me.calcmags(mag2sum, me.x2[c]);
        me.calcmags(mag2, me.x2[c]);
        //#ifdef MULTITHREADED
        //        pthread_mutex_lock(&magMutex[c]);
        //#endif
        if (me.band >= minTrial1Band) me.mag0Queue[c].push(mag0);
        if (me.band >= minTrial2Band) me.mag1Queue[c].push(mag1);
        //#ifdef MULTITHREADED
        //        pthread_mutex_unlock(&magMutex[c]);
        //#endif
        var magmax = mag2[0];
        for (var k = 1; k <= me.kEnd; k++) {
            if (magmax < mag2[k]) magmax = mag2[k];
        }
        var peakmin = magmax * me.peakThresh;

        var xt2 = 1.0;
        var bTroughN1 = false;
        var bTroughN2 = false;
        var x0 = 1.0;
        var y0 = mag2[1];
        var x1 = 0.0;
        var y1 = 0.0;
        var kEnd = me.kEnd;
        var bX0 = !me.lo;
        var bX1 = false;
        var prev = null;//TrackPoint *

        var slice = new Slice(me.band, me.addtime[c]);//Slice *

        for (var k = 1; k <= me.kEnd; k++) {
            if (mag2[k] > peakmin && mag2[k] > mag2[k - 1] && mag2[k] >= mag2[k + 1]) {
                if (k < me.kLo) {
                    x0 = me.findExtremum(mag2, mag2, k, y0);
                    bX0 = true;
                } else if (k > kHi) {
                    if (!bX1) {
                        x1 = me.findExtremum(mag2, mag2, k, y1);
                        if (prev) {
                            prev.x01 = x1;
                            prev.y01 = y1;
                        }
                        bX1 = true;
                    }
                } else {
                    var p = new TrackPoint(slice, me.peak2N, me.x2[c], mag2, mag2, k, me.N, me.band);//TrackPoint *

                    if (prev) {
                        prev.pn = p;
                        p.pp = prev;
                    } else {
                        slice.bottom = p;
                    }
                    slice.top = p;
                    prev = p;
                    p.xtn2 = me.maxK;
                    bTroughN1 = true;
                    bTroughN2 = true;
                    p.xtp2 = xt2;
                    p.x01 = x0;
                    p.y01 = y0;
                }
            } else if (mag2[k] <= mag2[k - 1] && mag2[k] <= mag2[k + 1]) {
                xt2 = me.findExtremum(mag2, mag2, k, NULL);
                xt2 = Math.max(1.0, xt2);
                xt2 = Math.min(kEnd, xt2);
                if (bTroughN2) {
                    prev.xtn2 = xt2;
                    bTroughN2 = false;
                }
            }
        }
        if (bTroughN2) {
            prev.xtn2 = kEnd;
        }
        if (!bX1 && !hi) {
            x1 = kEnd;
            y1 = mag2[kEnd];
            bX1 = true;
        }
        var dec2 = this.dec2[c];//float *
        // memset(dec2,0,(Nover2+1)*sizeof);
        if (bX0 && prev) {
            var k1 = lrintf(x0);
            var ko1 = k1 > x0 ? -1 : 1;
            var kf1 = k1 > x0 ? k1 - x0 : x0 - k1;
            var k3 = Math.min(kEnd, k1 + me.peakWidth2);
            for (var k = lrintf(slice.bottom.xtp2) ; k <= k3; k++) {
                var m = me.interp2(k - k1, ko1, kf1);
                dec2[k] += m * y0;
            }
        }
        if (bX1 && prev) {
            var k1 = lrintf(x1);
            var ko1 = k1 > x1 ? -1 : 1;
            var kf1 = k1 > x1 ? k1 - x1 : x1 - k1;
            var k3 = lrintf(slice.top.xtn2);
            for (var k = Math.max(0, k1 - me.peakWidth2) ; k <= k3; k++) {
                var m = me.interp2(k - k1, ko1, kf1);
                dec2[k] += m * y1;
            }
        }
        //TrackPoint *p = slice.bottom;
        var p = slice.bottom;
        while (p) {
            var k1 = lrintf(p.x);
            var ko1 = k1 > p.x ? -1 : 1;
            var kf1 = k1 > p.x ? k1 - p.x : p.x - k1;
            var k0 = lrintf(p.xtp2);
            var kf0 = (k0 > p.xtp2 ? k0 - p.xtp2 : p.xtp2 - k0);
            var k2 = lrintf(p.xtn2);
            var kf2 = (k2 > p.xtn2 ? k2 - p.xtn2 : p.xtn2 - k2);
            var m2 = 0.0;
            if (k0 < p.xtp2) {
                m2 += (mag2[k0] + mag2[k0 + 1]) * 0.5 * (1.0 - kf0) + 0.5 * mag2[k0 + 1];
                var i = Math.floor(k0 - k1);
                var m = me.interp2(i, ko1, kf1) * p.y;
                m = Math.min(m, mag2[k0]) * 0.5 * (1.0 + kf0);
                m2 += m;
                dec2[k0] += m;
                m = me.interp2(i + 1, ko1, kf1) * p.y;
                m = Math.min(m, mag2[k0 + 1]) * 0.5 * kf0;
                m2 += m;
                dec2[k0 + 1] += m;
                m = me.interp2(i - 1, ko1, kf1) * p.y;
                m = Math.min(m, mag2[k0 - 1]);
                m2 += m;
                dec2[k0 - 1] += m;
            } else {
                m2 += (mag2[k0] + mag2[k0 - 1]) * 0.5 * kf0 + 0.5 * mag2[k0] + mag2[k0 + 1];
                var i = Math.floor(k0 - k1);
                var m = me.interp2(i, ko1, kf1) * p.y;
                m = Math.min(m, mag2[k0]) * 0.5 * (1.0 - kf0);
                m2 += m;
                dec2[k0] += m;
                m = me.interp2(i - 1, ko1, kf1) * p.y;
                m = Math.min(m, mag2[k0 - 1]) * 0.5 * (2.0 - kf0);
                m2 += m;
                dec2[k0 - 1] += m;
            }
            if (k2 < p.xtn2) {
                m2 += mag2[k2 - 1] + 0.5 * mag2[k2] + 0.5 * kf2 * (mag2[k2] + mag2[k2 + 1]);
                var i = Math.floor(k2 - k1);
                var m = me.interp2(i, ko1, kf1) * p.y;
                m = Math.min(m, mag2[k2]) * 0.5 * (1.0 - kf2);
                m2 += m;
                dec2[k2] += m;
                m = me.interp2(i + 1, ko1, kf1) * p.y;
                m = Math.min(m, mag2[k2 + 1]) * 0.5 * (2.0 - kf2);
                m2 += m;
                dec2[k2 + 1] += m;
            } else {
                m2 += (mag2[k2 - 1] + mag2[k2]) * (1.0 - kf2) * 0.5 + 0.5 * mag2[k2 - 1];
                var i = Math.floor(k2 - k1);
                var m = me.interp2(i, ko1, kf1) * p.y;
                m = Math.min(m, mag2[k2]) * 0.5 * (1.0 + kf2);
                m2 += m;
                dec2[k2] += m;
                m = me.interp2(i - 1, ko1, kf1) * p.y;
                m = Math.min(m, mag2[k2 - 1]) * 0.5 * kf2;
                m2 += m;
                dec2[k2 - 1] += m;
                m = me.interp2(i + 1, ko1, kf1) * p.y;
                m = Math.min(m, mag2[k2 + 1]);
                m2 += m;
                dec2[k2 + 1] += m;
            }
            for (var k = k0 + 2; k < k2 - 1; k++) {
                m2 += mag2[k];
            }
            if (k0 + 1 == k2 - 1) {
                m2 -= mag2[k0 + 1];
            }
            for (var k = max(0, k1 - me.peakWidth2) ; k < k0 - 1; k++) {
                var m = me.interp2(k - k1, ko1, kf1) * p.y;
                m = Math.min(m, mag2[k]);
                m2 += m;
                dec2[k] += m;
            }
            var k3 = Math.floor(min(kEnd, k1 + me.peakWidth2));
            for (var k = k2 + 2; k <= k3; k++) {
                var m = me.interp2(k - k1, ko1, kf1) * p.y;
                m = min(m, mag2[k]);
                m2 += m;
                dec2[k] += m;
            }

            p.m2 = m2;
            p = p.pn
        }
        var m2max = 0.0;
        //TrackPoint *p = slice.bottom;
        var p = slice.bottom;
        while (p) {
            var k1 = lrintf(p.x);
            var ko1 = Math.floor(k1 > p.x ? -1 : 1);
            var kf1 = k1 > p.x ? k1 - p.x : p.x - k1;
            var k0 = lrintf(p.xtp2);
            var kf0 = (k0 > p.xtp2 ? k0 - p.xtp2 : p.xtp2 - k0);
            var k2 = lrintf(p.xtn2);
            var kf2 = (k2 > p.xtn2 ? k2 - p.xtn2 : p.xtn2 - k2);
            var mdec = 0.0;
            if (k0 < p.xtp2) {
                mdec += (dec2[k0] + dec2[k0 + 1]) * 0.5 * (1.0 - kf0) + 0.5 * dec2[k0 + 1];
            } else {
                mdec += (dec2[k0] + dec2[k0 - 1]) * 0.5 * kf0 + 0.5 * dec2[k0] + dec2[k0 + 1];
            }
            if (k2 < p.xtn2) {
                mdec += dec2[k2 - 1] + 0.5 * dec2[k2] + 0.5 * kf2 * (dec2[k2] + dec2[k2 + 1]);
            } else {
                mdec += (dec2[k2 - 1] + dec2[k2]) * (1.0 - kf2) * 0.5 + 0.5 * dec2[k2 - 1];
            }
            for (var k = k0 + 2; k < k2 - 1; k++) {
                mdec += dec2[k];
            }
            if (k0 + 1 == k2 - 1) {
                mdec -= dec2[k0 + 1];
            }

            p.m2 -= mdec;
            p.m2 *= mNorm;
            if (p.m2 > m2max) {
                m2max = p.m2;
            }
            p = p.pn;
        }

        var m2min = m2max * peakThresh;
        //TrackPoint *p = slice.bottom;
        var p = slice.bottom;
        while (p) {
            var pn = p.pn;//TrackPoint *
            if (p.m2 < m2min) {
                if (p.m2 < 0) { p.m2 = 0; }
                p.absorb();
                delete p;
            }
            p = pn;
        }

        //#ifdef MULTITHREADED
        //        pthread_mutex_lock(&sliceMutex[c]);
        //#endif
        me.sliceBuffer[c].write(slice);
        //#ifdef MULTITHREADED
        //        pthread_mutex_unlock(&sliceMutex[c]);
        //#endif
        me.addtime[c]++;
    },
    //    void SMS ::     //audio *buf, long n
    prepad1: function (buf, n) {
        var me = this;
        if (me.band >= minTrial2Band) {
            me.trial2GrainBuf.write(buf, n);
        }
    },
    ///audio *buf, long n
    prepad0: function (buf, n) {
        var me = this;
        if (me.band >= minTrial1Band) {
            me.trial1GrainBuf.write(buf, n);
        }
    },

    getTrial2Latency: function () {
        var me = this;
        return me.minTrackSize;
    },

    //Track *SMS :: 
    //int c, TrackPoint *tp, const TimeType &time, bool bStitch
    createTrack: function (c, tp, time, bStitch) {
        var index;//TrackIndexType
        if (me.trackIndex[c].empty()) {
            index = trackIndexNone;
        } else {
            index = me.trackIndex[c].front();
            me.trackIndex[c].pop();
        }
        var t = new Track(me.h1, index, tp, time, bStitch);//Track *t 
        me.assignTracks[c].push_back(t);
        return t;
    },
    //void SMS :: //int c, Track *t
    returnTrackIndex: function (c, t) {
        var me = this;
        if (t.index != trackIndexNone) {
            me.trackIndex[c].push(t.index);
            t.index = trackIndexNone;
        }
    },
    //float SMS :: //int k, int ko, float kf
    interp2: function (k, ko, kf) {
        var me = this;
        return (1.0 - kf) * me.peak2N[k] + kf * me.peak2N[k + ko];
    },
    //float SMS :: /float *mag, float *mag2, int k, float *y
    findExtremum: function (mag, mag2, k, y) {
        var y0 = mag[k - 1];
        var y1 = mag[k];
        var y2 = mag[k + 1];
        var d = (y0 + y2 - y1 - y1);
        var x = (d == 0.0 ? k : k + 0.5 * (y0 - y2) / d);
        if (y) {
            var ki = lrintf(x);
            var kf = ki < x ? x - ki : ki - x;
            var ki1 = Math.floor(ki < k ? ki + 1 : ki - 1);
            y = ((1.0 - kf) * mag2[ki] + kf * mag2[ki1]);//output:
        }
        return x;
    },
    //void SMS :: float *mag, audio *x
    calcmags: function (mag, x) {
        var me = this;
        var U = MEPH.audio.sbsms.Util;
        for (var k = 0; k <= me.Nover2; k++) {
            mag[k] = U.norm2(x[k]);
        }
    }

}).then(function () {
    window.minTrial2Band = 1;
    window.minTrial1Band = 2;

    window.resampleSincSize = 5286;
    window.resampleSincRes = 128;
    window.resampleSincSamples = 41;
    window.sincTable= [
 0.920381425342433, 0.920302993473145, 0.920067721990721, 0.919675683262634, 0.919126997871811, 0.918421834572361, 0.91756041022763, 0.916542989730571, 0.915369885906517,
 0.914041459398341, 0.912558118534085, 0.910920319177104, 0.909128564558774, 0.907183405093832, 0.905085438178449, 0.902835307971073, 0.900433705156165, 0.897881366690907, 
 0.895179075534992, 0.892327660363588, 0.889327995263616, 0.886180999413434, 0.882887636746086, 0.879448915596223, 0.87586588833086, 0.8721396509641, 0.868271342755988, 
 0.864262145795659, 0.860113284568922, 0.855826025510501, 0.851401676541053, 0.846841586589208, 0.842147145098761, 0.837319781521271, 0.832360964794223, 0.827272202804995, 0.822055041840814,
 0.816711066024967, 0.811241896739414, 0.805649192034132, 0.799934646023336, 0.794099988268876, 0.788146983151029, 0.782077429226949, 0.775893158577015, 0.769596036139359, 0.763187959032823,
 0.756670855868614, 0.750046686050943, 0.74331743906691, 0.736485133765944, 0.729551817629037, 0.722519566028119, 0.715390481475825, 0.708166692865973, 0.700850354705043, 0.693443646334978, 
 0.685948771147588, 0.678367955790895, 0.670703449367724, 0.662957522626847, 0.655132467147014, 0.647230594514183, 0.639254235492289, 0.631205739187853, 0.623087472208794, 0.614901817817741,
 0.606651175080214, 0.598337958007979, 0.589964594697926, 0.581533526466823, 0.573047206982255, 0.56450810139012, 0.555918685439004, 0.54728144460179, 0.538598873194839, 0.529873473495092,
 0.521107754855427, 0.512304232818645, 0.503465428230394, 0.494593866351407, 0.48569207596938, 0.476762588510854, 0.467807937153435, 0.458830655938691, 0.449833278886095, 0.440818339108329,
 0.431788367928309, 0.422745893998278, 0.413693442421282, 0.404633533875401, 0.395568683741051, 0.386501401231699, 0.377434188528327, 0.368369539917981, 0.359309940936732, 0.350257867517365,
 0.341215785142159, 0.332186148001037, 0.323171398155437, 0.314173964708215, 0.305196262979899, 0.296240693691588, 0.287309642154844, 0.278405477468841, 0.269530551725108, 0.260687199220141,
 0.251877735676207, 0.243104457470604, 0.234369640873684, 0.225675541295929, 0.217024392544336, 0.208418406088417, 0.199859770336071, 0.191350649919593, 0.182893184992099, 0.17448949053461,
 0.166141655674063, 0.157851743012483, 0.149621787967589, 0.141453798125034, 0.133349752602549, 0.125311601426209, 0.117341264919035, 0.109440633102171, 0.101611565108827, 0.0938558886112235,
 0.0861753992607111, 0.0785718601412871, 0.0710470012366835, 0.0636025189112218, 0.0562400754046094, 0.0489612983408536, 0.0417677802514581, 0.0346610781130688, 0.027642712899719, 
 0.0207141691498255, 0.0138768945480801, 0.00713229952237053, 0.000481756855863834, -0.00607339868562557,-0.0125318707108654,-0.0188924015449201,-0.0251537725552469,-0.0313148044620756,
 -0.03737435763298,-0.0433313323615559,-0.0491846691301276,-0.054933348856413,-0.0605763931240776,-0.0661128643971269,-0.0715418662180771,-0.0768625433898662,-0.0820740821414636,
 -0.0871757102771481,-0.0921666973094308,-0.0970463545756019,-0.101814035337896,-0.106469134867263,-0.111011090510758,-0.115439381742549,-0.119753530198566,-0.123953099694804,-0.128037696229328,
 -0.132006967967991,-0.135860605213926,-0.13959834036086,-0.143219947830288,-0.146725243992596,-0.150114087072177,-0.153386377036634,-0.156542055470134,-0.159581105431021,-0.162503551293762,-0.165309458575341,-0.167998933746201,-0.170572124025849,-0.173029217163239,-0.175370441202068,-0.177596064231103,-0.179706394119684,-0.181701778238549,-0.183582603166115,-0.185349294380385,-0.187002315936636,-0.188542170131047,-0.189969397150449,-0.191284574708361,-0.192488317667501,-0.193581277648966,-0.194564142628253,-0.195437636518337,-0.19620251874,-0.196859583779615,-0.197409660734602,-0.197853612846779,-0.1981923370238,-0.198426763348949,-0.19855785457948,-0.198586605633759,-0.198514043067442,-0.198341224538922,-0.198069238264313,-0.197699202462185,-0.197232264788348,-0.1966696017609,-0.196012418175829,-0.195261946513421,-0.19441944633574,-0.193486203675456,-0.192463530416289,-0.191352763665353,-0.190155265117665,-0.188872420413117,-0.187505638486185,-0.186056350908662,-0.18452601122571,-0.182916094285512,-0.181228095562824,-0.179463530476727,
 -0.177623933702856,-0.17571085848043,-0.173725875914356,-0.171670574272733,-0.169546558280039,-0.167355448406313,-0.165098880152636,-0.162778503333212,-0.160395981354361,-0.15795299049072,-0.155451219158975,-0.15289236718941,-0.150278145095599,-0.147610273342536,-0.144890481613517,-0.142120508076075,-0.139302098647282,-0.136437006258713,-0.133526990121391,-0.130573814991001,-0.127579250433698,-0.12454507009279,-0.121473050956606,-0.118364972627861,-0.115222616594795,-0.112047765504399,-0.108842202438022,-0.105607710189641,-0.102346070547107,-0.0990590635766376,-0.0957484669108493,-0.0924160550406252,-0.0890635986110882,
 -0.0856928637219669,-0.082305611232631,-0.0789035960720733,-0.0754885665541077,-0.072062263698056,-0.0686264205551892,-0.0651827615411846,-0.0617330017748624,-0.058278846423457,-0.0548219900546751,-0.0513641159957935,-0.0479068957000384,-0.044451988120494,-0.0410010390917734,-0.0375556807196898,-0.0341175307791583,-0.0306881921205521,-0.0272692520847378,-0.0238622819270072,-0.0204688362501168,-0.017090452446647,-0.0137286501508832,-0.0103849307004177,-0.00706077660767134,-0.00375765104151933,-0.000476997319211795,0.00277976159123424,0.00601122355799482,0.00921600776157955,0.0123927551599898,0.0155401289427332,0.0186568149735395,0.0217415222216296,0.0247929831813924,0.0278099542803314,0.0307912162751492,0.0337355746358384,0.0366418599176616,0.0395089281209001,0.0423356610382613,0.0451209665898422,
 0.0478637791455434,0.0505630598348475,0.0532177968438653,0.0558270056995736,0.0583897295411674,0.0609050393784495,0.0633720343372027,0.0657898418914747,0.0681576180827297,0.070474547725818,0.0727398446017178,0.0749527516370186,0.0771125410701129,0.0792185146040738,0.0812700035461998,0.0832663689342141,0.0852070016491116,0.0870913225146552,0.0889187823835221,0.0906888622101165,0.0924010731100602,0.0940549564063881,0.0956500836624715,0.0971860567017111,
 0.0986625076140278,0.10007909874921,0.101435522697154,0.102731502255068,0.103966790381692,0.1051411701386,0.106254454618665,0.107306486861763,0.108297139757793,0.109226315937109,0.110093947648454,0.110899996624499,0.11164445393509,0.112327339828307,0.112948703559463,0.113508623208143,0.11400720548343,0.114444585517426,0.114820926647216,0.11513642018541,0.115391285179402,0.115585768159498,0.115720142876066,0.11579471002586,0.115809796967682,0.11576575742755,0.115662971193528,0.115501843800413,0.115282806204435,0.115006314448161,0.114672849315792,0.114282915979024,
 0.113837043633693,0.113335785127364,0.1127797165781,0.112169436984582,0.111505567827804,0.110788752664544,0.110019656712823,0.109198966429571,0.108327389080707,0.107405652303865,0.106434503663974,0.105414710201933,0.104347057976597,0.103232351600301,0.102071413768163,0.100865084781398,0.0996142220648654,0.0983196996791074,0.0969824078270986,0.0956032523559593,
 0.0941831542538693,0.0927230491424269,0.0912238867646962,0.089686630469191,0.0881122566900392,0.0865017544235756,0.0848561247016157,0.0831763800616523,0.0814635440142294,0.079718650507745,0.0779427433909264,0.076136875873236,0.0743021099834537,0.0724395160266886,0.070550172040069,0.0686351632473628,0.0666955815127786,0.0647325247941936,0.062747096596062,0.0607404054222478,0.0587135642290348,
 0.056667689878554,0.0546039025928779,0.0525233254090291,0.0504270836351378,0.048316304307999,0.0461921156522659,0.044055646541517,0.0419080259614387,0.0397503824753537,0.037583843692335,0.0354095357381317,0.0332285827291375,0.0310421062496354,0.028851224832534,0.0266570534438273,0.024460702970993,0.0222632797155505,0.0200658848899929,0.0178696141193048,0.0156755569472778,0.0134847963478306,
 0.0112984082415343,0.00911746101754993,0.00694301506117043,0.00477612228716621,0.00261782567912161,0.000469158834953931,-0.00166885448120184,-0.00379520078056329,-0.0059088772845451,-0.00800889235270582,-0.0100942659036281,-0.0121640298285632,-0.0142172283976796,-0.0162529186587561,-0.0182701708281668,-0.0202680686740045,-0.0222457098911985,-0.0242022064684846,-0.0261366850470883,-0.0280482872709882,-0.0299361701286295,-0.0317995062859638,
 -0.0336374844106956,-0.0354493094876133,-0.0372342031249026,-0.0389914038513265,-0.0407201674041749,-0.0424197670078825,-0.0440894936432238,-0.0457286563069959,-0.0473365822621031,-0.0489126172779674,-0.0504561258611889,-0.0519664914763842,-0.053443116757141,-0.0548854237070259,-0.0562928538905927,-0.0576648686143374,-0.0590009490975559,-0.0603005966330639,-0.0615633327377405,-0.062788699292866,-0.0639762586742272,-0.065125593871967,-0.0662363086001637,-0.0673080273961252,-0.0683403957093937,-0.0693330799804545,-0.0702857677091563,-0.071198167512846,-0.0720700091742301,-0.0729010436789824,
 -0.0736910432431144,-0.07443980133014,-0.0751471326580581,-0.0758128731961966,-0.0764368801519492,-0.0770190319474562,-0.0775592281862733,-0.0780573896100858,-0.078513458045522,-0.0789273963411314,-0.0792991882945931,-0.0796288385702248,-0.0799163726068679,-0.08016183651623,-0.0803652969717649,-0.0805268410881817,-0.0806465762916719,-0.0807246301809524,-0.0807611503792238,-0.080756304377146,-0.0807102793669423,-0.0806232820677406,-0.0804955385422674,-0.0803272940050135,-0.0801188126219959,-0.0798703773022373,-0.0795822894810978,-0.0792548688955872,-0.0788884533517974,-0.0784833984845914,-0.0780400775096938,-0.0775588809683272,-0.0770402164645425,-0.0764845083953963,
 -0.0758921976741284,-0.0752637414464976,-0.0745996128004336,-0.0739003004691713,-0.0731663085280283,-0.0723981560849959,-0.0715963769653113,-0.0707615193901859,-0.0698941456498595,-0.0689948317711623,-0.0680641671797574,-0.0671027543572484,-0.0661112084933319,-0.065090157133178,-0.0640402398202279,-0.0629621077345898,-0.0618564233272276,-0.0607238599501279,-0.0595651014826367,-0.058380841954162,-0.0571717851634285,-0.0559386442944869,-0.0546821415296655,-0.053403007659665,-0.0521019816909916,-0.0507798104509244,-0.0494372481902171,-0.0480750561837305,-0.046694002329195,-0.045294860744302,-0.0438784113623226,-0.0424454395264524,-0.040996735583082,-0.0395330944741913,-0.038055315329066,-0.0365642010555345,-0.0350605579309239,-0.0335451951929297,-0.032018924630599,-0.030482560175621,-0.0289369174941192,-0.0273828135791425,-0.0258210663440446,-0.0242524942169475,-0.0226779157364766,-0.0210981491489598,-0.0195140120072785,-0.0179263207715556,-0.016335890411869,-0.0147435340131726,-0.0131500623826067,-0.0115562836593809,-0.00996300292740479,-0.00837102183084636,-0.00678113819279113,-0.00519414563717416,-0.00361083321415952,-0.00203198502912983,-0.000458379875457017,0.00110920912878408,0.00267001489999789,0.00422327674398739,0.00576824070645193,0.00730415991891263,0.00883029493991307,0.0103459140913472,0.0118502937897689,0.0133427188725395,0.0148224829186761,0.016288888564263,0.0177412478122899,0.0191788823367922,0.0206011237811589,0.0220073140504912,0.0233968055978847,0.024768961704522,0.02612315675346,0.0274587764969989,0.0287752183175303,0.0300718914817559,0.0313482173881796,0.0326036298077742,0.0338375751177299,0.0350495125281968,0.0362389143019323,0.0374052659667743,0.0385480665208594,0.0396668286305131,0.0407610788207385,0.0418303576582401,0.0428742199269153,0.0438922347957571,0.0448839859791099,0.0458490718892285,0.0467871057810913,0.0476977158894239,0.0485805455578928,0.0494352533604325,0.0502615132146747,0.0510590144874505,0.0518274620923405,0.0525665765792537,0.0532760942160162,0.05395576706196,0.0546053630334999,0.0552246659616955,0.0558134756417962,0.0563716078747733,0.0568988945008436,0.0573951834249974,0.0578603386345438,0.0582942402086914,0.0586967843201877,0.0590678832290408,0.0594074652683551,0.0597154748223121,0.0599918722963358,0.0602366340794796,0.0604497524990823,0.0606312357677403,0.0607811079226447,0.0608994087573431,0.0609861937459786,0.0610415339600736,0.06106551597792,0.0610582417866455,0.0610198286770287,0.0609504091311374,0.0608501307028684,0.0607191558914731,0.0605576620081493,0.060365841035792,0.0601438994819913,0.0598920582253713,0.0596105523553696,0.0592996310055547,0.0589595571805846,0.0585906075769136,0.058193072397353,0.0577672551595986,0.0573134724988378,0.0568320539645518,0.0563233418116318,0.0557876907859302,0.0552254679043692,0.0546370522297332,0.0540228346402718,0.0533832175942438,0.052718614889534,0.0520294514184752,0.0513161629180134,0.0505791957153526,0.0498190064692186,0.0490360619068818,0.0482308385570846,0.0474038224790149,0.0465555089874726,0.0456864023743757,0.0447970156267561,0.0438878701413918,0.0429594954362301,0.0420124288587509,0.0410472152914242,0.0400644068544164,0.0390645626056997,0.0380482482387189,0.0370160357777762,0.0359685032712855,0.0349062344830575,0.0338298185817733,0.0327398498288029,0.0316369272645303,0.0305216543933421,0.0293946388674391,0.0282564921696315,0.0271078292952748,0.025949268433509,0.0247814306479556,0.0236049395570361,0.0224204210140672,0.0212285027872916,0.0200298142400041,0.0188249860109281,0.0176146496949992,0.0163994375247132,0.0151799820521929,0.0139569158321289,0.0127308711057459,0.0115024794859494,0.0102723716438035,0.00904117699648874,0.00780952339689282,0.0065780368249771,0.00534734108107065,0.00411805748123312,0.00289080455483251,0.00166619774448026,0.000444849108462394,-0.000772632974192619,-0.00198564409587129,-0.00319358410962516,-0.00439585741537519,-0.00559187324294384,-0.00678104593178024,-0.00796279520725374,-0.00913654645338902,-0.0103017309819179,-0.0114577862975281,-0.0126041563591889,-0.0137402918374363,-0.0148656503675044,-0.0159796967981879,-0.0170819034363292,-0.0181717502868205,-0.0192487252880176,-0.0203123245424604,-0.021362052542804,-0.0223974223928606,-0.0234179560236593,-0.024423184404432,-0.0254126477484354,-0.0263858957135253,-0.0273424875973972,-0.0282819925274153,-0.0292039896449517,-0.0301080682841611,-0.0309938281451183,-0.0318608794612527,-0.0327088431610127,-0.0335373510236956,-0.0343460458293886,-0.0351345815029585,-0.0359026232520415,-0.0366498476989807,-0.0373759430066653,-0.0380806089982259,-0.0387635572705482,-0.0394245113015638,-0.0400632065512871,-0.040679390556566,-0.0412728230195162,-0.0418432758896181,-0.0423905334394522,-0.042914392334055,-0.043414661693881,-0.0438911631513571,-0.0443437309010235,-0.044772211743252,-0.0451764651215424,-0.0455563631533958,-0.0459117906547692,-0.0462426451581186,-0.046548836924042,-0.0468302889465326,-0.0470869369518625,-0.0473187293911136,-0.0475256274263798,-0.0477076049106652,-0.0478646483615089,-0.0479967569283661,-0.0481039423537814,-0.0481862289283918,-0.048243653439801,-0.0482762651153661,-0.048284125558947,-0.0482673086816636,-0.0482259006267172,-0.0481599996883274,-0.0480697162248445,-0.0479551725660973,-0.0478165029150386,-0.0476538532437558,-0.047467381183913,-0.0472572559116971,-0.0470236580273408,-0.0467667794292976,-0.0464868231831489,-0.0461840033853221,-0.0458585450217043,-0.0455106838212355,-0.0451406661045703,-0.0447487486278968,-0.0443351984220054,-0.0439002926267012,-0.0434443183206557,-0.0429675723467969,-0.0424703611333365,-0.0419530005105377,-0.0414158155233246,-0.0408591402398425,-0.0402833175560728,-0.0396886989966126,-0.0390756445117305,-0.0384445222708086,-0.0377957084522857,-0.0371295870302152,-0.036446549557556,-0.0357469949463107,-0.0350313292446328,-0.0342999654110218,-0.0335533230857263,-0.0327918283594782,-0.0320159135396809,-0.0312260169141752,-0.0304225825127069,-0.0296060598662241,-0.028776903764128,-0.0279355740096047,-0.0270825351731674,-0.026218256344534,-0.0253432108829717,-0.024457876166236,-0.0235627333382326,-0.0226582670555347,-0.0217449652328814,-0.0208233187877915,-0.0198938213844194,-0.0189569691767836,-0.0180132605515006,-0.0170631958701489,-0.016107277211399,-0.015146008113033,-0.0141798933139869,-0.0132094384965427,-0.0122351500287978,-0.0112575347075429,-0.0102770995016708,-0.00929435129624721,-0.00830979663736668,-0.00732394147791956,-0.00633729092439598,-0.00535034898484767,-0.0043636183181326,-0.00337759998456234,-0.00239279319807447,-0.00140969508004874,-0.000428800414884482,0.000549398592542026,0.00152441255742493,0.00249575515346705,0.00346294334909421,0.00442549764133481,0.00538294228725485,0.00633480553283812,0.00728061983920615,0.00821992210606954,0.00915225389230991,0.0100771616335885,0.0109941968568804,0.011902916391837,0.0128028825788794,0.0136936634739278,
 0.0145748330496735,0.0154459713933036,0.0163066649005877,0.0171565064662419,0.0179950956704824,0.0188220389616894,0.019636949835098,0.0204394490074385,0.0212291645874509,0.0220057322421994,0.0227687953591133,0.0235180052036899,0.0242530210727861,0.0249735104434401,0.0256791491171583,0.0263696213596067,0.0270446200356535,0.0277038467397033,0.0283470119212749,0.0289738350057704,0.02958404451039,0.030177378155147,0.0307535829689406,0.0313124153906489,0.0318536413652032,0.0323770364346098,0.0328823858238901,0.0333694845219051,0.0338381373570427,0.0342881590677419,0.0347193743678329,0.0351316180066747,0.0355247348240743,0.0358985797999757,0.0362530180989058,0.0365879251091717,0.0369031864768027,0.0371986981342348,0.0374743663237385,0.0377301076155912,0.0379658489210016,0.038181527499791,0.0383770909628458,0.0385524972693506,0.0387077147188212,0.0388427219379517,0.038957507862301,0.0390520717128379,0.0391264229673738,0.0391805813269093,0.0392145766769267,0.0392284490436607,0.0392222485453834,0.0391960353387427,0.0391498795601926,0.0390838612625587,0.0389980703467861,0.0388926064889138,0.0387675790623279,0.0386231070553441,
 0.0384593189841745,0.038276352801333,0.038074355799542,0.0378534845111942,0.0376139046034402,0.0373557907689584,0.0370793266124798,0.0367847045331337,0.0364721256026844,0.0361417994397319,0.0357939440799517,0.0354287858424473,0.0350465591922946,0.0346475065993586,0.0342318783934602,0.0337999326159794,0.033351934867976,0.0328881581549164,0.0324088827280907,0.0319143959228117,0.0314049919934835,0.030880971945632,0.0303426433649903,0.029790320243732,0.0292243228039485,0.0286449773184645,0.0280526159290918,0.0274475764624172,0.0268302022432251,0.0262008419056547,0.0255598492021924,0.0249075828106016,0.0242444061388932,0.0235706871284385,0.022886798055331,0.0221931153300989,0.021490019295875,0.0207778940251304,0.0200571271150767,0.0193281094818434,0.0185912351535375,0.017846901062294,0.0170955068354215,0.0163374545857532,0.0155731487013096,0.0148029956343802,0.0140274036901342,0.0132467828148645,0.0124615443839753,0.0116721009898197,0.010878866229494,0.0100822544926968,0.00928268074975849,0.00848056033994836,0.00767630876016376,0.00687034145410842,0.00606307360206417,0.00525491991135925,0.00444629440763855,0.00363761022703795,0.00282927940936458,0.00202171269238638,0.00121531930732854,0.000410506775680379,-0.000392319292591773,-0.00119275539932617,-0.0019904003568439,-0.0027848554849301,-0.00357572480602225,-0.00436261523851059,-0.0051451367880615,-0.0059229027368688,-0.00669552983074627,-0.00746263846397085,-0.00822385286178995,-0.00897880126050736,-0.00972711608506233,-0.0104684341240196,-0.0112023967018897,-0.0119286498486974,-0.0126468444667235,-0.0133566364943391,-0.0140576870668615,-0.0147496626743549,-0.0154322353163073,-0.0161050826531121,-0.0167678881542856,-0.0174203412433572,-0.0180621374393646,-0.0186929784948938,-0.0193125725306023,-0.0199206341661661,-0.0205168846475966,-0.0211010519708691,-0.0216728710018125,-0.0222320835922094,-0.0227784386920557,-0.0233116924579366,-0.0238316083574713,-0.0243379572697852,-0.0248305175819706,-0.0253090752814939,-0.0257734240445179,-0.0262233653201023,-0.0266587084102499,-0.0270792705457726,-0.0274848769579454,-0.0278753609459267,-0.0282505639399193,-0.0286103355600531,-0.02895453367097,-0.029283024432094,-0.0295956823435738,-0.029892390287885,-0.0301730395670819,-0.0304375299356923,-0.0306857696292481,-0.0309176753884519,-0.0311331724789745,-0.0313321947068879,-0.0315146844297365,-0.0316805925632501,-0.03182987858371,-0.0319625105259754,-0.0320784649771836,-0.0321777270661381,-0.0322602904484012,-0.0323261572871093,-0.0323753382295314,-0.0324078523793953,-0.0324237272650037,-0.0324229988031694,-0.0324057112589975,-0.0323719172015455,-0.0323216774553951,-0.0322550610481696,-0.0321721451540349,-0.0320730150332222,-0.0319577639676131,-0.0318264931924307,-0.0316793118240799,-0.0315163367841841,-0.0313376927198668,-0.0311435119203262,-0.0309339342297567,-0.0307091069566693,-0.0304691847796661,-0.0302143296497258,-0.0299447106890591,-0.0296605040865921,-0.029361892990141,-0.0290490673953409,-0.0287222240313915,-0.028381566243687,-0.0280273038733983,-0.0276596531340729,-0.0272788364853266,-0.0268850825036951,-0.0264786257507203,-0.0260597066383421,-0.0256285712916748,-0.0251854714092403,-0.0247306641207374,-0.0242644118424243,-0.0237869821301947,-0.0232986475304263,-0.0227996854286841,-0.0222903778963592,-0.021771011535327,-0.0212418773207075,-0.0207032704418132,-0.0201554901413684,-0.019598839553086,-0.0190336255376889,-0.0184601585174618,-0.0178787523094215,-0.017289723957194,-0.0166933935616847,-0.0160900841106333,-0.0154801213071404,-0.0148638333972561,-0.0142415509967193,-0.0136136069169392,-0.0129803359903073,-0.0123420748949298,-0.0116991619788734,-0.011051937084011,-0.0104007413695593,-0.00974591713539885,-0.00908780764526554,-0.00842675694990374,-0.00776310971027038,-0.00709721102088,-0.0064294062333792,-0.00576004078043931,-0.00508946000005613,-0.0044180089603443,-0.00374603228491339,-0.00307387397891339,-0.00240187725583507,-0.00173038436515273,-0.00105973642089168,-0.000390273231208218,0.000277666870936983,0.000943747195927376,0.00160763286437935,0.00226899097268967,0.00292749075716241,0.00358280375663249,0.00423460397351205,0.00488256803317746,0.00552637534162358,0.00616570824130806,0.00680025216511183,0.00742969578834302,0.00805373117871052,0.0086720539441988,0.00928436337877218,0.00989036260584077,0.010489758719422,0.0110822629229305,0.0116675906655331,0.0122454617760051,0.0128156005940267,0.0133777360988594,0.0139316020353439,0.0144769370371622,0.015013484747307,0.0155409939357074,0.0160592186139548,0.0165679181470811,0.0170668573623377,0.0175558066549289,0.0180345420906533,0.0185028455054086,0.0189605046015186,0.0194073130408385,0.0198430705346032,0.0202675829299774,0.0206806622932754,0.0210821269898129,0.0214718017603625,0.0218495177941796,0.0222151127985721,0.0225684310649855,0.022909323531581,0.023237647842281,0.0235532684022619,0.0238560564298757,0.0241458900049818,0.0244226541136733,0.0246862406893854,0.0249365486503725,0.0251734839335446,0.0253969595246556,0.0256068954848355,0.0258032189734641,0.0259858642673823,0.0261547727764399,0.0263098930553838,0.0264511808120857,0.0265785989121173,0.0266921173796785,0.0267917133948868,0.0268773712874393,0.0269490825266584,0.0270068457079359,0.0270506665355912,0.0270805578021602,0.0270965393641366,0.0270986381141831,0.0270868879498387,0.027061329738745,0.0270220112804172,0.0269689872645892,0.0269023192261613,0.0268220754967821,0.0267283311530974,0.0266211679617004,0.02650067432082,0.0263669451987833,0.0262200820692939,0.0260601928435634,0.0258873917993413,0.0257017995068857,0.0255035427519194,0.0252927544556185,0.0250695735916822,0.0248341451005308,0.0245866198006853,0.0243271542973778,0.0240559108884488,0.0237730574675825,0.0234787674249386,0.0231732195452361,0.0228565979033475,0.0225290917574612,0.0221908954398751,0.0218422082454798,0.0214832343179955,0.0211141825340239,0.0207352663849829,0.0203467038569849,0.0199487173087275,0.0195415333474633,0.0191253827031149,0.0187005001006056,0.018267124130473,0.0178254971178374,0.0173758649897937,0.0169184771412997,0.0164535862996304,0.0159814483874738,0.0155023223847373,0.0150164701891418,0.0145241564756738,0.0140256485549719,0.0135212162307227,0.0130111316561379,0.0124956691895912,0.0119751052494879,0.0114497181684446,0.0109197880468538,0.0103855966059087,0.00984742704016562,0.00930556386971926,0.00876029279206605,0.00821190053373426,0.00766067470175299,0.00710690363503945,0.00655087625577791,0.00599288192086684,0.0054332102735096,0.00487215109502279,0.00430999415693893,0.00374702907347535,0.00318354515444554,0.00261983125868588,0.00205617564807024,0.00149286584218636,0.000930188473745678,0.000368429144797911,-0.000192127716177123,-0.00075119899623179,-0.00130850303889563,-0.00186375978403549,-0.00241669090655966,-0.00296701995390177,-0.00351447248221492,-0.00405877619121137,
 -0.00459966105758125,-0.00513685946692752,-0.00567010634415242,-0.00619913928223348,-0.00672369866932763,
 -0.00724352781414226,-0.00775837306951439,-0.00826798395413882,-0.0087721132723888,-0.00927051723217174,-0.00976295556076585,-0.0102491916185829,-0.010728992510805,-0.0112021291968433,-0.011668376597568,-0.012127513700262,-0.0125793236612476,-0.0130235939061431,-0.0134601162277011,-0.0138886868811863,-0.01430910667725,-0.0147211810722588,-0.0151247202560408,-0.0155195392370066,-0.0159054579246124,-0.016282301209127,-0.0166498990386691,-0.0170080864934834,-0.0173567038574233,-0.0176955966866107,-0.0180246158752456,-0.0183436177185377,-0.0186524639727363,-0.0189510219122339,-0.0192391643837213,-0.0195167698573758,-0.0197837224750605,-0.0200399120955206,-0.020285234336558,-0.0205195906141727,-0.0207428881786562,-0.0209550401476275,-0.0211559655360013,-0.0213455892828807,-0.0215238422753687,-0.021690661369293,-0.0218459894068419,-0.0219897752311082,-0.0221219736975437,-0.0222425456823232,-0.022351458087623,-0.0224486838438175,-0.0225342019086017,-0.0226079972630452,-0.0226700609045897,-0.0227203898369986,-0.0227589870572723,-0.0227858615395437,-0.022801028215968,-0.022804507954624,-0.0227963275344473,-0.0227765196172116,-0.0227451227165837,-0.0227021811642712,-0.0226477450732896,-0.0225818702983737,-0.0225046183935598,-0.0224160565669675,-0.022316257632811,-0.0222052999606713,-0.0220832674220598,-0.02195024933431,-0.02180634040183,-0.021651640654752,-0.0214862553850185,-0.0213102950799412,-0.0211238753532741,-0.0209271168738413,-0.0207201452917622,-0.0205030911623162,-0.0202760898674933,-0.0200392815352739,-0.0197928109566856,-0.0195368275006853,-0.0192714850269128,-0.0189969417963675,-0.0187133603800582,-0.0184209075656767,-0.018119754262348,-0.0178100754035098,-0.0174920498479764,-0.0171658602792401,-0.016831693103066,-0.0164897383434382,-0.0161401895369109,-0.0157832436254263,-0.0154191008476533,-0.0150479646289088,-0.01467004146972,-0.0142855408330878,-0.0138946750305117,-0.0134976591068377,-0.0130947107239892,-0.0126860500436456,-0.0122718996089275,-0.0118524842251538,-0.0114280308397327,-0.0109987684212487,-0.0105649278378112,-0.0101267417347275,-0.0096844444115627,-0.0092382716986541,-0.00878846083313997,-0.0083352503345707,-0.00787887988016375,-0.00741959017977004,-0.00695762285061262,-0.00649322029186454,-0.00602662555912889,-0.00555808223888623,-0.00508783432297227,-0.00461612608315054,-0.0041432019458434,-0.00366930636708469,-0.00319468370775774,-0.00271957810918098,-0.00224423336910424,-0.00176889281817742,-0.00129379919695379,-0.000819194533489142,-0.000345320021597831,0.000127584100174339,0.000599278668799195,0.00106952571617924,0.00153808858766556,0.00200473205962055,0.00246922245597072,0.00293132776369035,0.00339081774716058,0.00384746406134855,0.00430104036375061,0.00475132242504707,0.00519808823841396,0.00564111812743961,0.00608019485259522,0.00651510371620631,0.00694563266587838,0.00737157239632471,0.00779271644955021,0.00820886131334328,0.00861980651802962,0.00902535473144288,0.00942531185206835,0.00981948710031542,0.0102076931078787,0.0105897460051442,0.0109654655066033,0.0113346749942337,0.0116972015988115,0.012052876279115,0.0124015338989891,0.0127430133022313,0.013077157385271,0.0134038131676064,0.0137228318599706,0.014034068930197,0.0143373841667557,0.014632641739935,0.01491971026064,0.0151984628367875,0.0154687771272713,0.0157305353934762,0.0159836245483238,0.0162279362028256,0.01646336671013,0.0166898172070445,0.0169071936530183,0.0171154068665722,0.0173143725591621,0.0175040113664656,0.0176842488770823,0.0178550156586383,0.0180162472812887,0.018167884338611,0.018309872465887,0.0184421623557679,0.0185647097713225,0.0186774755564665,0.0187804256437758,0.0188735310596837,0.0189567679270676,0.019030117465229,0.0190935659872729,0.0191471048948949,0.0191907306705839,0.0192244448672514,0.0192482540952976,0.0192621700071291,0.0192662092791391,0.0192603935911679,0.0192447496034598,0.0192193089311318,0.0191841081161767,0.0191391885970174,0.0190845966756357,0.0190203834822978,0.0189466049378991,0.0188633217139549,0.0187705991902617,0.0186685074102565,0.0185571210341025,0.0184365192895309,0.0183067859204682,0.0181680091334815,0.0180202815420732,0.0178637001088602,0.0176983660856705,0.0175243849515933,0.0173418663490196,0.01715092401771,0.016951675726928,0.016744243205679,0.0165287520710933,0.016305331754996,0.0160741154287042,0.0158352399260948,0.0155888456649855,0.0153350765668743,0.0150740799750811,0.0148060065713377,0.0145310102908722,0.0142492482360351,0.0139608805885139,0.0136660705201842,0.0133649841026483,0.0130577902155067,0.0127446604534163,0.0124257690319824,0.0121012926925373,0.0117714106058561,0.0114363042748611,0.0110961574363676,0.010751155961922,0.0104014877577871,0.0100473426641261,0.00968891235343915,0.00932639022830554,0.00895997131848668,0.00858985217744296,0.00821623077831776,0.00783930640944577,0.00745927956943648,0.00707635186189118,0.00669072588980389,0.00630260514970595,0.00591219392560345,0.00551969718276637,0.00512532046142244,0.00472926977040892,0.00433175148083997,0.0039329722198398,0.00353313876439927,0.00313245793540826,0.00273113649191582,0.00232938102567641,0.00192739785602901,0.00152539292516795,0.00112357169385325,0.000722139037616026,0.000321299143509566,-7.87445925439102e-05,-0.000477789667756481,-0.000875634573781077,-0.00127207889726798,-0.00166692341962379,-0.00205997021592246,-0.0024510227529216,-0.00283988598613406,-0.00322636645590846,-0.00361027238247303,-0.00399141375989388,-0.00436960244890573,-0.00474465226856735,-0.00511637908669945,-0.00548460090906132,-0.00584913796722293,-0.00620981280509261,-0.00656645036405622,-0.00691887806669127,-0.00726692589901343,-0.0076104264912184,-0.0079492151968822,-0.00828313017058056,-0.00861201244389523,-0.00893570599976737,-0.00925405784516927,-0.00956691808205708,-0.00987413997657404,-0.0101755800264738,-0.0104710980267317,-0.0107605571333162,-0.011043823925092,-0.0113207684638271,-0.0115912643522783,-0.0118551887903295,-0.012112422629159,-0.0123628504234125,-0.0126063604813613,-0.0128428449130214,-0.0130721996762183,-0.0132943246205751,-0.0135091235294078,-0.0137165041595128,-0.013916378278827,-0.0141086617019519,-0.014293274323524,-0.0144701401494217,-0.014639187325798,-0.0148003481659278,-0.0149535591748634,-0.0150987610718883,-0.0152358988107658,-0.0153649215977745,-0.015485782907529,-0.0155984404965815,-0.0157028564148031,-0.0157989970145448,-0.0158868329575775,-0.0159663392198137,-0.0160374950938136,-0.016100284189079,-0.0161546944301414,-0.0162007180524483,-0.0162383515960573,-0.0162675958971449,-0.0162884560773407,-0.0163009415308957,-0.0163050659096987,-0.0163008471061524,-0.0162883072339218,-0.016267472606573,-0.0162383737141145,-0.0162010451974609,-0.0161555258208357,-0.0161018584421317,-0.0160400899812505,-0.0159702713864408,-0.0158924575986573,-0.0158067075139647,-0.0157130839440085,-0.0156116535745792,-0.0155024869222945,-0.015385658289426,-0.0152612457168996,-0.015129330935495,-0.0149899993152762,-0.0148433398132821,
 -0.0146894449195071,-0.0145284106012046,-0.0143603362455461,-0.0141853246006673,-0.014003481715137,-0.0138149168758828,-0.0136197425446085,-0.0134180742927402,-0.013210030734937,-0.0129957334612042,-0.0127753069676474,-0.0125488785859041,-0.0123165784112954,-0.0120785392297338,-0.0118348964434313,-0.0115857879954438,-0.0113313542930995,-0.0110717381303458,-0.0108070846090634,-0.0105375410593866,-0.0102632569590728,-0.009984383851968,-0.00970107526560753,-0.00941348662799972,-0.00912177518363594,-0.00882609990877025,-0.00852662142601712,-0.0082235019183083,-0.00791690504225832,-0.00760699584098105,-0.00729394065640554,-0.00697790704113637,-0.00665906366990342,-0.00633758025065011,-0.00601362743530315,-0.00568737673027296,-0.0053590004067294,-0.0050286714107004,-0.00469656327303836,-0.00436285001930248,-0.0040277060796026,-0.00369130619844927,-0.0033538253446594,-0.00301543862135968,-0.00267632117613655,-0.00233664811137679,-0.00199659439484433,-0.00165633477053924,-0.00131604366988201,-0.000975895123270568,-0.000636062672051198,-0.000296719280950014,4.19627489923029e-05,0.000379811866940294,0.000716657358192284,0.00105232942947911,0.00138665929358587,0.00171947925326048,0.00205062278436349,0.00237992461822022,0.00270722082313579,0.00303234888503091,0.0033551477871623,0.00367545808888596,0.00399312200342837,0.00430798347462561,0.00461988825259516,0.00492868396830372,0.00523422020699499,0.00553634858044424,0.00583492279800283,0.00612979873640211,0.00642083450828168,0.00670789052941064,0.00699082958457223,0.00726951689207744,0.00754382016688266,0.00781360968227803,0.0080787583301217,0.00833914167959037,0.00859463803442024,0.00884512848861381,0.0090904969805854,0.00933063034572383,0.00956541836734724,0.00979475382602877,0.0100185325472712,0.0102366534475113,0.010449018578432,0.0106555331695659,0.0108561056691723,0.0110506477833682,0.0112390745135014,0.0114213041917481,0.0115972585149209,0.0117668625764763,0.0119300448967067,0.012086737451109,0.0122368756969161,0.0123803985977855,0.0125172486466337,0.0126473718866118,0.0127707179302138,0.0128872399765134,0.0129968948265257,0.0130996428966874,0.0131954482304574,0.0132842785080317,0.0133661050541769,0.0134409028441778,0.013508650507905,0.0135693303320019,0.0136229282601955,0.0136694338917359,0.0137088404779684,0.0137411449170453,0.0137663477467848,0.013784453135684,0.013795468872096,0.0137994063515803,0.0137962805624378,0.0137861100694423,0.0137689169957797,0.0137447270032108,0.0137135692704695,0.0136754764699141,0.0136304847424457,0.0135786336707118,0.013519966250613,0.0134545288611308,0.0133823712324961,0.0133035464127194,0.0132181107325022,0.0131261237685533,0.0130276483053306,0.0129227502952339,0.0128114988172705,0.01269396603422,0.0125702271483237,
 0.0124403603555234,0.0123044467982785,0.0121625705169872,0.0120148184000414,0.0118612801325425,0.0117020481437095,0.0115372175530078,0.0113668861150299,0.01119115416316,0.0110101245520525,0.0108239025989582,0.0106325960239306,0.0104363148889449,0.0102351715359648,0.0100292805239893,0.0098187585651169,0.00960372445965929,0.00938429903034274,0.00916060505563078,0.00893276720220603,0.00870091195664717,0.00846516755633744,0.00822566391964303,0.00798253257539762,0.00773590659173174,0.0074859205042846,0.0072327102438365,0.00697641306340084,0.00671716746481301,0.00645511312485713,0.00619039082096706,0.00592314235654277,0.00565351048592053,0.00538163883903519,0.00510767184581618,0.00483175466035329,0.0045540330848758,0.00427465349357983,0.0039937627563468,0.00371150816239089,0.00342803734387407,0.00314349819952992,0.00285803881833284,0.00257180740325433,0.00228495219514193,0.00199762139676367,0.00170996309705199,0.00142212519558895,0.00113425532736956,0.000846500787880119,0.000559008458531536,0.000271924732482214,-1.46045591101362e-05,-0.000300434220371862,-0.000585419763496916,-0.00086941748099089,-0.00115228451734445,-0.00143387894009652,-0.00171405981025575,-0.00199268725204318,-0.00226962252192313,-0.0025447280768894,-0.0028178676419714,-0.00308890627693019,-0.00335771044210987,-0.00362414806341412,-0.00388808859637569,-0.00414940308928949,-0.00440796424537761,-0.0046636464839576,-0.00491632600058568,-0.00516588082614467,-0.00541219088485123,-0.00565513805115323,-0.00589460620549209,-0.00613048128890367,-0.00636265135643233,-0.00659100662933489,-0.00681543954604841,-0.00703584481190112,-0.00725211944754226,-0.00746416283606952,-0.00767187676883409,-0.00787516548990105,-0.00807393573914805,-0.00826809679398036,-0.00845756050964779,-0.0086422413581431,-0.00882205646566693,-0.00899692564864383,-0.00916677144827267,-0.00933151916359955,-0.00949109688309758,-0.00964543551474288,-0.00979446881457346,-0.00993813341372092,-0.0100763688439045,-0.010209117561378,-0.0103363249693214,-0.0104579394386686,-0.0105739123273658,-0.0106841979980529,-0.0107887538341635,-0.0108875402544387,-0.0109805207258519,-0.0110676617749403,-0.0111489329975425,-0.0112243070669403,-0.0112937597404047,-0.0113572698641464,-0.0114148193766721,-0.0114663933105489,-0.0115119797925796,-0.0115515700423923,-0.0115851583694502,-0.0116127421684842,-0.011634321913358,-0.0116499011493693,-0.0116594864839974,-0.0116630875761036,-0.0116607171235953,-0.0116523908495633,-0.0116381274869016,-0.0116179487614245,-0.01159187937349,-0.011559946978144,-0.0115221821637997,-0.0114786184294646,-0.0114292921605328,-0.0113742426031564,-0.0113135118372135,-0.0112471447478901,-0.0111751889958936,-0.0110976949863162,-0.0110147158361677,-0.010926307340598,-0.0108325279378291,-0.0107334386728173,-0.010629103159669,-0.0105195875428304,-0.010404960457075,-0.0102852929863125,-0.0101606586212424,-0.0100311332158768,-0.00989679494295863,-0.0097577242482986,-0.00961400380405963,-0.00946571846101251,-0.00931295519979207,-0.00915580308117954,-0.00899435319544003,-0.00882869861074312,-0.00865893432069448,-0.00848515719100898,-0.00830746590535331,-0.00812596091038898,-0.00794074436004472,-0.00775192005904976,-0.00755959340575842,-0.00736387133429605,-0.00716486225605968,-0.00696267600060248,-0.00675742375593618,-0.00654921800828116,-0.00633817248129907,-0.00612440207483747,-0.00590802280322156,-0.00568915173312446,-0.00546790692104879,-0.00524440735045367,-0.00501877286855874,-0.00479112412285956,-0.00456158249738753,-0.00433027004874617,-0.00409730944195998,-0.00386282388616572,-0.00362693707018273,-0.00338977309799299,-0.003151456424166,-0.0029121117892613,-0.00267186415524059,-0.00243083864092491,-0.00218916045752725,-0.00194695484429555,-0.00170434700429766,-0.00146146204038147,-0.0012184248913417,-0.000975360268326886,-0.000732392591517812,-0.000489645927108687,-0.000247243924624318,-5.30975460243513e-06,0.000236033953325795,0.000476665171927516,0.000716462537401301,0.000955305409921098,0.00119307393366231,0.00142964909627861,0.00166491278780243,0.00189874785893866,0.00213103817872366,0.00236166869152247,0.00259052547333456,0.00281749578738374,0.00304246813896196,0.00326533232950441,0.00348597950986719,0.00370430223278326,0.00392019450447253,0.00413355183537976,0.00434427129001857,0.00455225153589615,0.00475739289149763,0.00495959737330628,0.00515876874183869,0.00535481254667346,0.00554763617045255,0.00573714887183583,0.00592326182738836,0.00610588817238264,0.0062849430404968,0.00646034360239086,0.0066320091031453,0.00679986089854376,0.00696382249018553,0.00712381955941148,0.00727978000003043,0.00743163394983033,0.00757931382086227,0.00772275432848474,0.00786189251915527,0.00799666779695974,0.00812702194886731,0.00825289916870263,0.00837424607982448,0.00849101175650416,0.0086031477439945,0.00871060807728278,0.00881334929852171,0.00891133047313174,0.00900451320457065,0.00909286164776552,0.00917634252120344,0.00925492511767886,0.00932858131369381,0.00939728557751129,0.00946101497585938,0.00951974917928708,0.00957347046617182,0.00962216372537994,0.00966581645758253,0.00970441877522852,0.009737963401179,0.00976644566600632,0.0097898635039628,0.00980821744762438,0.00982151062121513,0.00982974873261936,0.00983294006408858,0.00983109546165142,0.00982422832323481,0.00981235458550606,0.00979549270944552,0.00977366366466025,0.00974689091245019,0.00971520038763806,0.00967862047917592,0.00963718200954081,0.00959091821293355,0.00953986471229418,0.00948405949514948,0.00942354288830723,0.00935835753141334,0.00928854834938809,0.00921416252375845,0.0091352494629039,0.0090518607712336,0.00896405021731353,0.00887187370096227,0.0087753892193352,0.00867465683201655,0.00856973862514042,0.0084606986745602,0.00834760300808965,0.00823051956683513,0.00810951816564266,0.00798467045268168,0.00785604986818808,0.00772373160239066,0.00758779255264339,0.00744831127978855,0.00730536796377458,0.00715904435855267,0.00700942374627865,0.00685659089084313,0.00670063199075772,0.00654163463142106,0.00637968773679228,0.00621488152049734,0.00604730743639451,0.00587705812862679,0.00570422738118674,0.00552891006702204,0.00535120209670837,0.00517120036671732,0.00498900270730639,0.00480470783005945,0.00461841527510535,0.00443022535804147,0.00424023911659229,0.00404855825702851,0.00385528510037713,0.00366052252844892,0.00346437392971236,0.0032669431450421,0.00306833441336933,0.00286865231726372,0.00266800172847322,0.00246648775345124,0.00226421567889881,0.00206129091734865,0.001857818952821,0.00165390528657631,0.00144965538299551,0.00124517461561208,0.00104056821332573,0.000835941206823879,0.000631398375237409,0.000427044193058939,0.000222982777348388,1.93178352541884e-05,-0.000183847388125652,-0.000386410161515063,-0.000588268318839344,-0.000789320310186792,-0.000989465252327088,-0.00118860297876263,-0.00138663408928657,-0.00158345999902536,-0.00177898298694016,-0.00197310624376432,-0.00216573391935424,-0.00235677116942952,-0.00254612420168104,-0.00273370032122396,-0.00291940797537506,-0.00310315679773186,-0.00328485765153321,-0.00346442267228144,-0.00364176530960462,-0.00381680036834099,-0.00398944404882473,-0.00415961398635617,-0.00432722928983605,-0.00449221057954843,-0.00465448002407309,-0.0048139613763114,-0.00497058000860979,-0.00512426294696376,-0.0052749389042889,-0.00542253831274242,-0.00556699335508204,-0.00570823799504863,-0.00584620800675817,-0.00598084100309234,-0.00611207646307367,-0.00623985575821544,-0.00636412217783413,-0.00648482095331432,-0.00660189928131711,-0.00671530634592089,-0.00682499333968802,-0.00693091348364723,-0.00703302204618568,-0.00713127636084265,-0.00722563584299943,-0.00731606200545875,-0.00740251847290887,-0.007484970995268,-0.00756338745990427,-0.00763773790272864,-0.00770799451815706,-0.00777413166794024,-0.00783612588885893,-0.00789395589928373,-0.00794760260459901,-0.00799704910149072,-0.00804228068109908,-0.00808328483103711,-0.00812005123627679,-0.00815257177890557,-0.00818084053675577,
 -0.00820485378091061,-0.00822460997209095,-0.0082401097559274,-0.008251355957123,-0.00825835357251226,-0.00826110976302289,-0.00825963384454712,-0.00825393727773002,-0.00824403365668277,-0.00822993869662941,-0.0082116702204961,-0.00818924814445231,-0.00816269446241429,-0.00813203322952095,-0.00809729054459371,-0.00805849453159143,-0.0080156753200729,-0.00796886502467894,-0.0079180977236477,-0.00786340943637592,-0.00780483810004095,-0.00774242354529683,-0.0076762074710605,-0.00760623341840202,-0.00753254674355573,-0.00745519459006761,-0.00737422586009549,-0.00728969118487935,-0.00720164289439836,-0.00711013498623295,-0.00701522309364934,-0.00691696445292533,-0.00681541786993564,-0.0067106436860163,-0.00660270374312707,-0.00649166134833156,-0.00637758123761547,-0.0062605295390625,-0.00614057373540916,-0.00601778262599883,-0.0058922262881563,-0.00576397603800424,-0.00563310439074258,-0.00549968502041355,-0.00536379271917322,-0.00522550335609256,-0.00508489383551021,-0.00494204205495889,-0.00479702686268925,-0.00464992801481257,-0.00450082613208717,-0.00434980265636944,-0.00419693980675458,-0.00404232053542953,-0.00388602848326118,-0.00372814793514442,-0.00356876377513224,-0.00340796144137294,-0.00324582688087654,-0.00308244650413554,-0.00291790713962266,-0.00275229598818971,-0.00258570057739144,-0.00241820871575722,-0.00224990844703554,-0.00208088800443331,-0.00191123576487488,-0.00174104020330362,-0.00157038984704899,-0.00139937323028345,-0.0012280788485914,-0.00105659511367404,-0.000885010308212022,-0.000713412540909905,-0.000541889701744389,-0.000370529417438411,-0.000199419007184688,-2.86454386391724e-05,0.000141704715791932,0.000311545322351528,0.000480790728994517,0.000649355808093498,0.000817155998766742,0.000984107348806231,0.00115012655618751,0.00131513101013779,0.00147903883174615,0.00164176891409281,0.00180324096188044,0.00196337553054684,0.00212209406484084,0.00227931893684354,0.00243497348341522,0.00258898204305202,0.00274126999213338,0.00289176378054382,0.00304039096665289,0.00318708025163551,0.00333176151311843,0.00347436583813595,0.00361482555538014,0.00375307426673132,0.00388904687805323,0.00402267962924054,0.00415391012350339,0.00428267735587738,0.00440892174094537,0.00453258513975951,0.00465361088595093,0.00477194381101678,0.0048875302687727,0.00500031815896078,0.00511025695000341,0.00521729770089245,0.005321393082206,0.00542249739624305,0.00552056659626851,0.00561555830486112,0.00570743183135652,0.00579614818837955,0.00588167010745905,0.00596396205371965,0.00604299023964567,0.006118722637912,0.0061911289932778,0.00626018083353982,0.00632585147954145,0.00638811605423505,0.00644695149079577,0.0065023365397841,0.00655425177535714,0.00660267960052678,0.00664760425146518,0.00668901180085765,0.00672689016030345,0.00676122908176597,0.00679202015807388,0.0068192568224754,0.00684293434724847,0.00686304984136987,0.00687960224724698,0.00689259233651608,0.00690202270491214,0.00690789776621478,0.00691022374527592,0.00690900867013539,0.00690426236323048,0.00689599643170657,0.00688422425683606,0.00686896098255334,0.00685022350311395,0.00682803044988654,0.00680240217728674,0.00677336074786232,0.00674092991653943,0.00670513511404041,0.00666600342948348,0.00662356359217583,0.00657784595261114,0.00652888246268357,0.00647670665513047,0.00642135362221613,0.00636285999366974,0.00630126391389078,0.00623660501843537,0.00616892440979761,0.00609826463250009,0.00602466964750847,0.0059481848059844,0.00586885682239295,0.00578673374697901,0.00570186493762922,0.00561430103113523,0.00552409391387439,0.00543129669192503,0.0053359636606324,0.00523815027364322,0.00513791311142525,0.00503530984929013,0.00493039922493699,0.00482324100553433,0.00471389595435921,0.00460242579701116,0.00448889318721966,0.0043733616722642,0.00425589565802507,0.004136560373684,0.00401542183609403,0.00389254681383765,0.00376800279099204,0.00364185793062176,0.00351418103801726,0.00338504152369975,0.00325450936621163,0.00312265507471182,0.00298954965139679,0.00285526455376563,0.00271987165675057,0.00258344321473122,0.00244605182345363,0.00230777038187339,0.0021686720539424,0.00202883023036007,0.00188831849030696,0.00174721056318321,0.00160558029036844,0.00146350158702526,0.00132104840396418,0.00117829468959045,0.0010353143519519,0.000892181220906407,0.000748969010429438,0.000605751281079199,0.000462601402639519,0.000319592516958703,0.000176797501002549,3.42889301410701e-05,-0.000107860958314117,-0.000249580301302546,-0.000390797645920318,-0.000531441985020898,-0.000671442792492635,-0.000810730058197295,-0.000949234322550692,-0.00108688671073022,-0.00122361896649147,-0.00135936348557853,-0.00149405334871076,-0.00162762235413137,-0.00176000504970118,-0.00189113676452272,-0.00202095364007996,-0.00214939266087792,-0.00227639168456902,-0.0024018894715508,-0.00252582571402182,-0.00264814106448246,-0.0027687771636664,-0.00288767666789124,-0.00300478327581456,-0.00312004175458374,-0.00323339796536792,-0.00334479888826015,-0.00345419264653828,-0.00356152853027509,-0.00366675701928568,-0.00376982980540297,-0.00387069981407155,-0.00396932122525004,-0.00406564949361391,-0.00415964136804923,-0.0042512549104298,-0.00434044951367,-0.00442718591904523,-0.00451142623277396,-0.00459313394185402,-0.00467227392914711,-0.00474881248770633,-0.00482271733434035,-0.0048939576224102,-0.00496250395385362,-0.00502832839043273,-0.00509140446420189,-0.00515170718719161,-0.00520921306030623,-0.0052639000814326,-0.00531574775275781,-0.00536473708729396,-0.00541085061460937,-0.00545407238576448,-0.00549438797745298,-0.00553178449534731,-0.00556625057664943,-0.00559777639184753,
 -0.00562635364567969,-0.00565197557730641,-0.00567463695969378,-0.00569433409820979,-0.00571106482843655,-0.00572482851320177,-0.00573562603883286,-0.00574345981063785,-0.00574833374761739,-0.00575025327641265,-0.00574922532449426,-0.00574525831259774,-0.00573836214641151,-0.00572854820752344,-0.00571582934363289,-0.00570021985803501,-0.00568173549838472,-0.00566039344474815,-0.00563621229694942,-0.00560921206122126,-0.00557941413616825,-0.00554684129805166,-0.00551151768540502,-0.00547346878299081,-0.00543272140510751,-0.00538930367825778,-0.00534324502318837,-0.00529457613631248,-0.00524332897052591,-0.00518953671542864,-0.00513323377696331,-0.00507445575648276,-0.00501323942925908,-0.00494962272244652,-0.0048836446925111,-0.00481534550214016,-0.00474476639664476,-0.00467194967986881,-0.00459693868961849,-0.00451977777262569,-0.00444051225906017,-0.00435918843660394,-0.00427585352410332,-0.0041905556448125,-0.00410334379924412,-0.00401426783764162,-0.00392337843208837,-0.00383072704826952,-0.00373636591690094,-0.0036403480048426,-0.00354272698590992,-0.00344355721140095,-0.00334289368035381,-0.00324079200955149,-0.00313730840328953,-0.00303249962292274,-0.00292642295620788,-0.0028191361864577,-0.00271069756152356,-0.00260116576262272,-0.00249059987302637,-0.00237905934662593,-0.00226660397639285,-0.00215329386274949,-0.00203918938186721,-0.00192435115390781,-0.00180884001122575,-0.00169271696654636,-0.00157604318113799,-0.00145887993299307,-0.00134128858503559,-0.00122333055337023,-0.00110506727559064,-0.000986560179161664,-0.000867870649892684,-0.000749060000517654,-0.000630189439397319,-0.000511320039360377,-0.000392512706698102,-0.000273828150328942,-0.000155326851148112,-3.70690315771188e-05,8.08853746707291e-05,0.000198476752594946,0.000315645835666874,0.000432333735328773,0.000548481970218808,0.000664032495107181,0.000778927729529055,0.000893110586101436,0.00100652449850903,0.0011191134491462,0.00123082199640187,0.00134159530157362,0.001451379155399,0.00156012000419063,0.00166776497556304,0.00177426190373947,0.00187955935442585,0.00198360664924134,0.00208635388969324,0.00218775198068548,0.00228775265355017,0.00238630848859078,0.00248337293712777,0.00257890034303573,0.00267284596376264,0.0027651659908224,0.00285581756975022,0.00294475881951347,0.00303194885136837,0.00311734778715523,0.00320091677702331,0.00328261801657889,0.00336241476344813,0.00344027135324884,0.00351615321496371,0.00359002688570914,0.00366186002489375,0.00373162142776056,0.00379928103830807,0.00386480996158482,0.00392818047535296,0.00398936604111683,0.00404834131451196,0.00410508215505164,0.00415956563522717,0.00421177004895933,0.00426167491939793,0.00430926100606804,0.00435451031136012,0.00439740608636304,0.00443793283603874,0.00447607632373735,0.00451182357505271,0.00454516288101758,0.00457608380063932,0.00460457716277593,0.00463063506735364,0.00465425088592729,0.00467541926158465,0.00469413610819695,0.00471039860901749,0.00472420521463094,0.00473555564025633,0.00474445086240651,0.00475089311490802,0.00475488588428478,0.00475643390451008,0.00475554315113093,0.00475222083476989,0.00474647539400919,0.0047383164876626,0.0047277549864407,0.00471480296401554,0.00469947368749088,0.00468178160728458,0.00466174234643012,0.00463937268930397,0.00461469056978683,0.00458771505886558,0.00455846635168474,0.0045269657540549,0.00449323566842705,0.00445729957934127,0.00441918203835878,0.00437890864848652,0.00433650604810388,0.00429200189440092,0.00424542484633809,0.00419680454713777,0.00414617160631751,0.00409355758127593,0.0040389949584418,0.0039825171339971,0.00392415839418544,0.00386395389521697,0.00380193964278122,0.00373815247117977,0.00367263002209005,0.00360541072297291,0.00353653376513537,0.00346603908146142,0.00339396732382295,0.00332035984018316,0.00324525865140576,0.00316870642778174,0.00309074646528777,0.00301142266158806,0.00293077949179369,0.00284886198399182,0.00276571569455874,0.0026813866832694,0.0025959214882174,0.00250936710055862,0.00242177093909173,0.00233318082468987,0.00224364495459622,0.00215321187659778,0.00206193046309074,0.00196984988505084,0.00187701958592308,0.00178348925544365,0.00168930880340844,0.00159452833340149,0.00149919811649696,0.00140336856494826,0.0013070902058786,0.00121041365498514,0.00111338959027166,0.00101606872582252,0.000918501785631088,0.000820739477496859,0.000722832467003396,0.00062483135159124,0.000526786634738467,0.000428748700261665,0.000330767786750949,0.000232893962150942,0.000135177098501165,3.76668468481058e-05,-5.95873876588744e-05,-0.00015653647047473,-0.000253131562157722,-0.00034932414264742,-0.000445066035310076,-0.000540309430740104,-0.000635006910305014,-0.000729111469423506,-0.000822576540564631,-0.000915356015957641,-0.00100740427000084,-0.00109867618135962,-0.00118912715474223,-0.00127871314234389,-0.00136739066494837,-0.00145511683267735,-0.00154184936537829,-0.00162754661264048,-0.00171216757343079,-0.00179567191533962,-0.00187801999342816,-0.00195917286866889,-0.0020390923259702,-0.00211774089177778,-0.00219508185124424,-0.00227107926495982,-0.00234569798523625,-0.00241890367193749,-0.00249066280784943,-0.00256094271358263,-0.00262971156200169,-0.00269693839217459,-0.00276259312283698,-0.00282664656536508,-0.00288907043625251,-0.00294983736908551,-0.00300892092601204,-0.00306629560870053,-0.00312193686878331,-0.00317582111778178,-0.00322792573650879,-0.00327822908394536,-0.00332671050558862,-0.00337335034126783,-0.00341812993242641,-0.00346103162886747,-0.00350203879496073,-0.00354113581530953,-0.00357830809987641,-0.00361354208856589,-0.00364682525526395,-0.00367814611133359,-0.00370749420856603,-0.00373486014158784,-0.0037602355497241,-0.00378361311831824,-0.00380498657950949,-0.00382435071246891,-0.00384170134309564,-0.00385703534317483,-0.00387035062899941,-0.00388164615945781,-0.00389092193359018,-0.00389817898761587,-0.00390341939143523,-0.00390664624460901,-0.00390786367181894,-0.00390707681781324,-0.00390429184184127,-0.00389951591158146,-0.00389275719656734,-0.0038840248611162,-0.00387332905676573,-0.00386068091422367,-0.00384609253483634,
 -0.0038295769815814,-0.00381114826959134,-0.00379082135621343,-0.00376861213061302,-0.00374453740292646,-0.00371861489297091,-0.00369086321851783,-0.00366130188313755,-0.00362995126362248,-0.00359683259699653,-0.00356196796711878,-0.00352538029088928,-0.00348709330406542,-0.00344713154669716,-0.00340552034818985,-0.00336228581200324,-0.00331745479999584,-0.0032710549164236,-0.00322311449160199,-0.00317366256524133,-0.00312272886946436,-0.00307034381151609,-0.00301653845617577,-0.00296134450788043,-0.00290479429257074,-0.00284692073926871,-0.00278775736139795,-0.00272733823785673,-0.0026656979938541,-0.00260287178151994,-0.00253889526029965,-0.00247380457714373,-0.00240763634650355,-0.00234042763014414,-0.00227221591678448,-0.00220303910157702,-0.00213293546543682,-0.00206194365423175,-0.00199010265784497,-0.00191745178912041,-0.00184403066270314,-0.00176987917378505,-0.0016950374767678,-0.00161954596385396,-0.00154344524357734,-0.0014667761192845,-0.00138957956757772,-0.00131189671673157,-0.00123376882509378,-0.00115523725948149,-0.00107634347358468,-0.000997128986387144,-0.000917635360616649,-0.000837904181234896,-0.000757977033978788,-0.000677895483963236,-0.000597701054357152,-0.00051743520514265,-0.000437139311968778,-0.00035685464511021,-0.000276622348541154,-0.000196483419135613,-0.00011647868600357,-3.66487899740423e-05,4.29658367651342e-05,0.000122324990860947,0.000201388717811738,0.000280117331797545,0.000358471435313893,0.000436411938600041,0.000513900078851591,0.000590897439209056,0.000667365967512407,0.000743267994812951,0.000818566253633951,0.000893223895970637,0.000967204511021862,0.00104047214264425,0.0011129913065214,0.00118472700703947,0.00125564475386154,0.00132571057819342,0.00139489104873263,0.00146315328729405,0.00153046498410463,0.00159679441276025,0.00166211044483839,0.00172638256415947,0.00178958088069117,0.00185167614408906,0.00191263975686786,0.00197244378719761,0.00203106098131931,0.00208846477557452,0.00214462930804392,0.00219952942979019,0.0022531407157002,0.00230543947492238,0.00235640276089498,0.00240600838096101,0.0024542349055667,0.00250106167703914,0.00254646881794065,0.00259043723899602,0.00263294864659046,0.00267398554983521,0.00271353126719851,0.00275156993270003,0.00278808650166653,0.00282306675604716,0.00285649730928709,0.00288836561075817,0.00291865994974546,0.00294736945898929,0.0029744841177818,0.00299999475461814,0.00302389304940205,0.00304617153520602,0.00306682359958636,0.00308584348545405,0.00310322629150201,0.00311896797218987,0.00313306533728775,0.00314551605098039,0.00315631863053355,0.00316547244452441,0.00317297771063858,0.00317883549303572,0.00318304769928661,0.00318561707688457,0.00318654720933417,0.00318584251182051,0.00318350822646264,0.00317955041715474,0.00317397596399889,0.00316679255733362,0.00315800869136253,0.00314763365738724,0.00313567753664972,0.00312215119278839,0.00310706626391349,0.00309043515430657,0.00307227102574976,0.00305258778849026,0.00303140009184578,0.00300872331445699,0.00298457355419297,0.00295896761771582,0.002931923009711,0.00290345792178987,0.00287359122107116,0.00284234243844816,0.00280973175654866,0.0027757799973949,0.00274050860977058,0.00270393965630239,0.00266609580026379,0.00262700029210838,0.00258667695574077,0.00254515017453283,0.00250244487709332,0.00245858652279897,0.00241360108709495,0.00236751504657361,0.00232035536383918,0.00227214947216735,0.00222292525996793,0.00217271105505976,0.00212153560876561,0.00206942807983706,0.0020164180182168,0.00196253534864859,0.00190781035414268,0.0018522736593062,0.00179595621354771,0.0017388892741645,0.00168110438932177,0.00162263338093348,0.00156350832745304,0.00150376154658367,0.00144342557791727,0.00138253316551136,0.00132111724041281,0.00125921090313771,0.00119684740611688,0.00113406013611575,0.00107088259663795,0.00100734839032173,0.000943491201338451,0.000879344777802133,0.000814942914198998,0.000750319433846045,0.000685508171388118,0.000620542955341617,0.000555457590694125,0.000490285841569116,0.000425061413963795,0.000359817938569106,0.000294588953680933,0.000229407888210246,0.000164308044801349,9.93225830661221e-05,3.4484502943216e-05,-3.01733718103323e-05,-9.46184099865878e-05,-0.000158818189144902,-0.000222740511673599,-0.000286353420686934,-0.000349625215749474,-0.000412524468420491,-0.000475020037611034,-0.000537081084745967,-0.000598677088724102,-0.00065977786066875,-0.000720353558462379,-0.000780374701058222,-0.000839812182561742,-0.000898637286076073,-0.000956821697304657,-0.00101433751790445,-0.00107115727858425,-0.00112725395194157,-0.00118260096503266,-0.00123717221166939,-0.00129094206443821,-0.00134388538643542,-0.00139597754271322,-0.00144719441143245,-0.00149751239471598,-0.00154690842919921,-0.00159535999627204,-0.00164284513200889,-0.001689342436782,-0.00173483108455442,-0.00177929083184826,-0.0018227020263853,-0.00186504561539609,-0.00190630315359405,-0.00194645681081197,-0.0019854893792978,-0.00202338428066662,-0.00206012557250691,-0.00209569795463822,-0.00213008677501847,-0.00216327803529848,-0.00219525839602226,-0.00222601518147149,-0.00225553638415245,-0.0022838106689244,-0.00231082737676847,-0.00233657652819601,-0.00236104882629575,-0.00238423565941947,-0.00240612910350581,-0.00242672192404204,-0.00244600757766397,-0.00246398021339438,-0.00248063467352028,-0.00249596649410965,-0.00250997190516865,-0.00252264783044025,-0.00253399188684541,-0.00254400238356826,-0.00255267832078691,-0.0025600193880516,-0.00256602596231194,-0.00257069910559561,-0.0025740405623407,-0.002576052756384,-0.00257673878760806,-0.00257610242824963,-0.00257414811887259,-0.00257088096400837,-0.00256630672746716,-0.00256043182732342,-0.00255326333057917,-0.00254480894750898,-0.00253507702569033,-0.00252407654372366,-0.00251181710464613,-0.00249830892904353,-0.00248356284786476,-0.0024675902949436,-0.00245040329923257,-0.00243201447675358,-0.00241243702227061,-0.00239168470068965,-0.00236977183819085,-0.00234671331309871,-0.00232252454649548,-0.00229722149258377,-0.00227082062880381,-0.00224333894571131,-0.00221479393662224,-0.00218520358703004,-0.00215458636380176,-0.00212296120415961,-0.0020903475044537,-0.00205676510873304,-0.00202223429712087,-0.00198677577400133,-0.0019504106560238,-0.00191316045993189,-0.00187504709022398,-0.00183609282665203,-0.00179632031156572,-0.00175575253710895,-0.00171441283227574,-0.00167232484983292,-0.00162951255311623,-0.00158600020270753,-0.00154181234300042,-0.00149697378866115,-0.00145150961099237,-0.00140544512420743,-0.00135880587162187,-0.00131161761177007,-0.00126390630445442,-0.00121569809673419,-0.00116701930886167,-0.001117896420173,-0.00106835605494138,-0.00101842496819956,-0.000968130031539443,-0.000917498218896291,-0.000866556592324564,-0.000815332287772979,-0.000763852500866257,-0.00071214447270082,
 -0.000660235475661517,-0.000608152799267011,-0.00055592373605068,-0.000503575567484774,-0.000451135549954316,-0.000398630900788171,-0.000346088784354618,-0.000293536298227805,-0.000241000459432348,-0.000188508190773214,-0.000136086307257084,-8.37615026124415e-05,-3.15603359146759e-05,2.04907816767024e-05,7.23656000628413e-05,0.0001240380432256,0.000175482222116205,0.000226672447407072,0.000277583242099614,0.000328189353983021,0.000378465767937006,0.000428387718073508,0.000477930699711027,0.000527070481176294,0.00057578311542722,0.000624044951492278,0.000671832645720684,0.000719123172837889,0.000765893836801815,0.000812122281454607,0.000857786500964707,0.000902864850055145,0.000947336054012924,0.000991179218475345,0.00103437383898851,0.00107689981033425,0.00111873743562118,0.00115986743513579,0.00120027095494985,0.00123992957528063,0.00127882531860024,0.00131694065749045,0.00135425852224024,0.00139076230818267,0.00142643588276789,0.00146126359237004,0.00149523026882479,0.00152832123569548,0.00156052231426489,0.00159181982925111,0.001622200614245,0.00165165201686719,0.00168016190364333,0.00170771866459553,0.00173431121754877,0.00175992901215077,0.0017845620336043,0.00180820080611095,0.0018308363960253,0.00185246041471891,0.00187306502115368,0.00189264292416398,0.00191118738444733,0.00192869221626373,0.00194515178884347,0.00196056102750367,0.00197491541447399,0.00198821098943196,0.00200044434974861,0.0020116126504451,0.00202171360386142,0.0020307454790383,0.00203870710081329,0.0020455978486328,0.00205141765508121,0.00205616700412915,0.00205984692910231,0.0020624590103731,0.00206400537277705,0.00206448868275625,0.00206391214523208,0.00206227950020991,0.00205959501911819,0.00205586350088484,0.00205109026775366,0.00204528116084394,0.00203844253545627,0.00203058125612779,0.00202170469144041,0.00201182070858521,0.00200093766768696,0.00198906441589211,0.00197621028122439,0.00196238506621177,0.00194759904128888,0.00193186293797901,0.00191518794185986,0.0018975856853177,0.00187906824009385,0.00185964810962852,0.00183933822120627,0.00181815191790804,0.00179610295037442,0.00177320546838494,0.00174947401225873,0.00172492350408103,0.00169956923876105,0.00167342687492633,0.00164651242565861,0.00161884224907681,0.00159043303877221,0.00156130181410158,0.00153146591034349,0.00150094296872334,0.00146975092631301,0.00143790800581039,0.00140543270520465,0.00137234378733302,0.00133866026933477,0.00130440141200819,0.00126958670907637,0.00123423587636768,0.00119836884091695,0.00116200572999299,0.00112516686005846,0.00108787272566835,0.00105014398831246,0.00101200146520825,0.000973466118049983,0.000934559041719948,0.000895301452967916,0.000855714679064593,0.000815820146435422,0.000775639369280204,0.000735193938184692,0.000694505508730361,0.000653595790107611,0.000612486533739071,0.000571199521918073,0.000529756556468897,0.000488179447433948,0.000446490001794051,0.000404710012227306,0.00036286124591261,0.000320965433382993,0.00027904425743464,0.000237119342097373,0.000195212241671637,0.000153344429837704,0.000111537288842719,6.98120987704314e-05,2.81900268993453e-05,-1.3307882845838e-05,-5.46607203438826e-05,-9.58477196232063e-05,-0.000136848269099311,-0.00017764192169843,-0.00021820840486263,-0.000258527630431677,-0.000298579704396867,-0.000338344936521953,-0.000377803849827059,-0.000416937189930904,-0.00045572593424674,-0.000494151301028183,-0.000532194758260365,-0.000569838032392598,-0.000607063116908157,-0.000643852280727742,-0.000680188076442613,-0.00071605334837345,-0.000751431240451819,-0.000786305203920364,-0.000820659004848588,-0.000854476731460626,-0.000887742801272211,-0.00092044196803358,-0.000952559328475277,-0.00098408032885413,-0.00101499077129672,-0.00104527681993767,-0.00107492500685012,-0.00110392223776623,-0.00113225579758539,-0.00115991335566776,-0.00118688297091152,-0.00121315309661151,-0.00123871258509779,-0.00126355069215219,-0.00128765708120147,-0.00131102182728573,-0.00133363542080036,-0.00135548877101096,-0.00137657320933959,-0.00139688049242181,-0.0014164028049334,-0.00143513276218638,-0.00145306341249335,-0.00147018823930013,-0.00148650116308605,-0.00150199654303181,-0.00151666917845485,-0.00153051431001216,-0.00154352762067078,-0.00155570523644628,-0.00156704372690944,-0.00157754010546189,-0.00158719182938116,-0.00159599679963599,-0.00160395336047267,-0.00161106029877347,-0.00161731684318833,-0.00162272266304074,-0.0016272778670095,-0.00163098300158753,-0.00163383904931939,-0.00163584742681915,-0.00163700998257036,-0.00163732899451001,-0.00163680716739847,-0.00163544762997745,-0.00163325393191825,-0.00163023004056244,-0.00162638033745758,-0.00162170961469021,-0.00161622307101895,-0.00160992630781018,-0.00160282532477919,-0.00159492651553961,-0.00158623666296417,-0.00157676293435966,-0.00156651287645942,-0.00155549441023638,-0.00154371582554014,-0.00153118577556128,-0.00151791327112649,-0.00150390767482801,-0.00148917869499094,-0.00147373637948218,-0.00145759110936466,-0.00144075359240074,-0.00142323485640868,-0.00140504624247599,-0.00138619939803382,-0.00136670626979641,-0.00134657909656967,-0.00132583040193301,-0.00130447298679897,-0.00128251992185438,-0.00125998453988796,-0.00123688042800817,-0.00121322141975631,-0.00118902158711868,-0.0011642952324428,-0.00113905688026205,-0.00111332126903301,-0.00108710334279067,-0.00106041824272541,-0.00103328129868705,-0.00100570802062011,-0.000977714089935322,-0.00094931535082176,-0.000920527801504691,-0.000891367585453493,-0.000861850982544499,-0.000831994400183724,-0.000801814364393843,-0.000771327510870363,-0.000740550576011879,-0.000709500387928816,-0.000678193857435693,-0.000646647969031396,-0.000614879771872516,-0.000582906370744061,-0.000550744917032462,-0.000518412599705564,-0.00048592663630423,-0.000453304263950078,-0.000420562730374023,-0.000387719284970424,-0.00035479116988102,-0.000321795611113349,-0.000288749809698345,-0.000255670932891157,-0.000222576105419947,-0.000189482400786798,-0.000156406832625385,-0.000123366346119315,-9.03778094855688e-05,-5.74580055274083e-05,-2.46236232605249e-05,8.10875038316639e-06,4.07226387702898e-05,7.32016836950175e-05,0.000105529653418793,0.000137690450616703,0.000169668120226624,0.000201446857197505,0.000233011014133184,0.000264345108828066,0.000295433831690941,0.000326262053053822,0.000356814830362236,0.000387077415243467,0.000417035260449873,0.00044667402667381,0.000475979589231275,0.000504938044610982,0.000533535716886269,0.000561759163986836,0.000589595183827354,0.000617030820290652,0.00064405336906253,0.000670650383315963,0.000696809679241917,0.000722519341424928,0.000747767728060642,0.000772543476013703,0.000796835505713404,0.000820633025885535,0.000843925538118381,0.000866702841260925,0.000888955035651854,0.000910672527177615,0.000931846031157871,0.00095246657605724,0.000972525507021732,0.000992014489238878,0.00101092551112014,0.0010292508873049,0.00104698326148488,0.00106411560904814,0.00108064123954212,0.00109655379895475,0.0011118472718135,0.00112651598310146,0.00114055459999043,0.00115395813339071,0.00116672193931726,0.00117884172007231,0.00119031352524443,0.00120113375252423,0.00121129914833667,0.00122080680829065,
 0.00122965417744607,0.00123783905039883,0.00124535957118451,0.00125221423300136,0.00125840187775329,0.00126392169541391,0.00126877322321233,0.00127295634464211,0.00127647128829414,0.00127931862651491,0.00128149927389139,0.001283014485564,0.00128386585536898,0.00128405531381196,0.00128358512587417,0.00128245788865312,0.00128067652883962,0.00127824430003285,0.00127516477989559,0.00127144186715168,0.00126707977842767,0.00126208304494094,0.00125645650903667,0.00125020532057575,0.00124333493317623,0.00123585110031071,0.0012277598712622,0.00121906758694106,0.0012097808755657,0.00119990664820978,0.00118945209421861,0.00117842467649774,0.0011668321266765,0.0011546824401495,0.00114198387099919,0.00112874492680237,0.00111497436332383,0.00110068117910045,0.0010858746099186,0.00107056412318845,0.00105475941221828,0.00103847039039214,0.0010217071852543,0.00100448013250386,0.000986799769902909,0.000968676831101775,0.000950122239384843,0.000931147101340517,0.0009117627004588,0.000891980490660107,0.000871812089758989,0.000851269272866356,0.00083036396573377,0.00080910823804354,0.000787514296648406,0.000765594478764287,0.00074336124511991,0.000720827173067144,0.000698004949655534,0.000674907364674944,0.000651547303669901,0.000627937740929579,0.000604091732456894,0.000580022408920566,0.000555742968593997,0.000531266670284408,0.000506606826256191,0.000481776795151971,0.000456789974915333,0.000431659795718582,0.000406399712899355,0.000381023199909761,0.000355543741281616,0.000329974825611307,0.000304329938567905,0.000278622555928233,0.000252866136642139,0.000227074115931597,0.000201259898427255,0.000175436851345555,0.000149618297710086,0.000123817509620333,9.80477015714137e-05,7.23220238277868e-05,4.665355585432e-05,2.10552998080745e-05,-4.45982590633637e-06,-2.98789930144383e-05,-5.51894696797388e-05,-8.03786267385361e-05,-0.000105433943858797,-0.00013034301562024,-0.000155093557512704,-0.000179673411849814,-0.00020407055359547,-0.000228273096100299,-0.000252269296745275,-0.000276047562490194,-0.00029959645532431,-0.000322904697616544,-0.000345961177363105,-0.00036875495332996,-0.000391275260088007,-0.00041351151293851,-0.000435453312726917,-0.000457090450542803,-0.000478412912303817,-0.000499410883221916,-0.000520074752149767,-0.000540395115805737,-0.000560362782875298,-0.000579968777987699,-0.000599204345565892,-0.000618060953548384,-0.000636530296981365,-0.000654604301479925,-0.000672275126556943,-0.000689535168818291,-0.000706377065023391,-0.000722793695009926,-0.000738778184481572,-0.00075432390765802,-0.000769424489786242,-0.000784073809512325,-0.000798266001112986,-0.000811995456586321,-0.000825256827601124,-0.000838045027304191,-0.000850355231985366,-0.000862182882599891,-0.000873523686147765,-0.00088437361690996,-0.000894728917541413,-0.00090458610002068,-0.000913941946456356,-0.000922793509750267,-0.000931138114117751,-0.000938973355465201,-0.000946297101625169,-0.000953107492449535,-0.00095940293976115,-0.000965182127164484,-0.000970444009715949,-0.000975187813454563,-0.000979413034793724,-0.000983119439774883,-0.000986307063184082,-0.000988976207532292,-0.000991127441900545,-0.000992761600651051,-0.000993879782005379,-0.000994483346490993,-0.000994573915257406,-0.000994153368263331,-0.000993223842336247,-0.00099178772910585,-0.000989847672812951,-0.000987406567995412,-0.000984467557052783,-0.000981034027691368,-0.000977109610251478,-0.000972698174918704,-0.000967803828821116,-0.000962430913014279,-0.000956583999356123,-0.00095026788727365,-0.000943487600423628,-0.000936248383249343,-0.000928555697435623,-0.000920415218264346,-0.000911832830872734,-0.000902814626416679,-0.000893366898141494,-0.000883496137362504,-0.000873209029357859,-0.000862512449176021,-0.00085141345736053,-0.000839919295594453,-0.000828037382267177,-0.000815775307966064,-0.000803140830895734,-0.000790141872227454,-0.000776786511381427,-0.00076308298124471,-0.000749039663327391,-0.000734665082859875,-0.000719967903833962,-0.000704956923990644,-0.000689641069757283,-0.000674029391137055,-0.000658131056553546,-0.000641955347653323,-0.000625511654069285,-0.000608809468147721,-0.000591858379642031,-0.00057466807037584,-0.000557248308878483,-0.000539608944995842,-0.000521759904479256,-0.000503711183555555,-0.000485472843480995,-0.000467055005082172,-0.000448467843286586,-0.000429721581645849,-0.000410826486854523,-0.000391792863267231,-0.000372631047417096,-0.000353351402538234,-0.000333964313095239,-0.000314480179322442,-0.000294909411775696,-0.000275262425899514,-0.000255549636612444,-0.00023578145291323,-0.00021596827251059,-0.000196120476479426,-0.000176248423945934,-0.000156362446804383,-0.000136472844468305,-0.000116589878658459,-9.67237682303544e-05,-7.68846840437216e-05,-5.70827438766377e-05,-3.73280073865604e-05,-1.76304711208226e-05,1.99993642088864e-06,2.15533596699293e-05,4.10200208154243e-05,6.03902245722434e-05,7.96543628875891e-05,9.88029195844659e-05,0.000117826474939476,0.000136715710193024,0.000155461411989631,0.000174054476746553,0.00019248591494857,0.000210746855366906,0.000228828549200576,0.000246722374138184,0.000264419838338276,0.00028191258432668,0.00029919239280896,0.000316251186396444,0.00033308103324404,0.000349674150598494,0.000366022908255491,0.000382119831924034,0.000397957606496918,0.000413529079225828,0.000428827262799762,0.000443845338325565,0.00045857665820947,0.000473014748938413,0.000487153313760161,0.000500986235261103,0.000514507577840938,0.000527711590083255,0.000540592707021129,0.000553145552297088,0.000565364940216666,0.000577245877694798,0.000588783566094627,0.00059997340295804,0.000610810983627539,0.000621292102758917,0.000631412755724494,0.000641169139906554,0.000650557655880657,0.000659574908488804,0.000668217707802125,0.000676483069973211,0.000684368217977891,0.00069187058224664,0.000698987801185635,0.000705717721587661,0.000712058398933015,0.000718008097580768,0.000723565290850654,0.000728728660995955,0.000733497099067867,0.000737869704671835,0.000741845785616332,0.000745424857454791,0.000748606642921268,0.000751391071260577,0.000753778277453638,0.000755768601338869,0.000757362586630487,0.000758560979834606,0.000759364729064122,0.000759774982753388,0.000759793088273753,0.000759420590451042,0.000758659229986178,0.000757510941780111,0.000755977853164323,0.000754062282038195,0.000751766734914573,0.000749093904874909,0.000746046669435407,0.00074262808832562,0.000738841401181018,0.000734690025151058,0.000730177552424333,0.000725307747672431,0.000720084545414129,0.000714512047301645,0.000708594519330652,0.000702336388975791,0.000695742242253508,0.000688816820714019,0.000681565018364236,0.000673991878523528,0.000666102590614281,0.00065790248688911,0.000649397039096707,0.000640591855088355,0.000631492675367041,0.00062210536958124,0.000612435932965378,0.000602490482729133,0.000592275254397531,0.00058179659810402,0.00057106097483868,0.000560074952653592,0.000548845202827616,0.000537378495992672,0.000525681698223757,0.000513761767094866,0.000501625747702958,0.000489280768662212,0.00047673403807084,0.000463992839452548,0.000451064527674926,0.000437956524847057,0.000424676316198432,0.000411231445941475,0.000397629513119953,0.000383878167445365,0.000369985105123653,0.000355958064674343,0.000341804822744478,0.000327533189919382,0.00031315100653253,0.000298666138476795,0.000284086473019086,0.000269419914620704,0.000254674380765407,0.000239857797797613,0.000224978096772517,0.000210043209320516,0.000195061063527882,0.000180039579835931,0.000164986666960563,0.000149910217834334,0.00013481810557314,0.000119718179469377,0.000104618261013641,8.95261399470058e-05,7.4449570345654e-05,5.93962667399167e-05,4.43739002695007e-05,2.93900948769175e-05,1.44524235407681e-05,-4.31595449223616e-07,-1.52545021735662e-05,-3.00088987191677e-05,-4.46874527685018e-05,-5.92829011400602e-05,-7.3788053278475e-05,-8.81957946927382e-05,-0.000102499090340838,-0.00011669098795936,-0.000130764621336393,-0.000144713213526427,-0.000158530080005721,-0.000172208631766647,-0.000185742378349807,-0.000199124930812505,-0.000212350004632196,-0.00022541142254385,-0.000238303117309837,-0.000251019134421297,-0.000263553634729709,-0.000275900897007726,-0.000288055320438154,-0.000300011427029989,-0.000311763863960726,-0.000323307405843803,-0.000334636956920518,-0.000345747553175349,-0.000356634364374106,-0.000367292696023986,-0.000377717991254969,-0.000387905832621729,-0.000397851943825609,-0.000407552191355999,-0.000417002586050548,-0.000426199284573831,-0.000435138590813965,-0.000443816957196748,-0.000452230985917062,-0.000460377430087148,-0.000468253194801565,-0.000475855338118517,-0.000483181071957495,-0.000490227762913035,-0.000496992932984516,-0.000503474260221955,-0.000509669579287852,-0.000515576881935093,-0.000521194317400983,-0.000526520192717614,-0.000531552972938706,-0.000536291281283125,-0.0005407338991954,-0.000544879766323497,-0.000548727980414254,-0.000552277797126791,-0.000555528629764419,-0.000558480048925469,-0.000561131782073551,-0.000563483713027852,-0.000565535881373998,-0.000567288481796188,-0.000568741863331196,-0.000569896528545036,-0.000570753132632961,-0.000571312482443646,-0.000571575535428335,-0.000571543398515829,-0.000571217326914227,-0.000570598722840296,-0.000569689134177504,-0.000568490253063648,-0.000567003914409159,-0.000565232094347103,-0.000563176908616006,-0.000560840610876602,-0.000558225590963676,-0.000555334373074176,-0.000552169613892796,-0.000548734100656311,-0.000545030749157866,-0.000541062601692577,-0.000536832824945712,-0.000532344707824832,-0.000527601659237243,-0.000522607205814143,-0.000517364989582876,-0.000511878765588764,-0.000506152399467916,-0.000500189864972511,-0.000493995241450079,-0.00048757271127824,-0.000480926557256444,-0.000474061159956302,-0.000466980995031985,-0.000459690630492344,-0.000452194723936275,-0.000444498019752994,-0.000436605346288768,-0.000428521612981758,-0.000420251807466637,-0.000411800992650551,-0.000403174303762153,-0.000394376945375264,-0.000385414188409004,-0.000376291367105835,-0.000367013875989376,-0.000357587166803538,-0.000348016745434793,-0.000338308168819116,-0.000328467041835364,-0.000318499014186804,-0.000308409777272385,-0.000298205061049476,-0.00028789063088981,-0.000277472284430191,-0.000266955848419733,-0.000256347175565217,-0.000245652141376339,-0.000234876641012366,-0.000224026586131915,-0.000213107901747537,-0.000202126523086631,-0.000191088392460357,-0.000179999456142179,-0.000168865661257607,-0.000157692952686687,-0.000146487269980865,-0.000135254544295716,-0.000124000695341185,-0.000112731628350718,-0.000101453231070878,-9.01713707729725e-05,-7.88918912880573e-05,-6.76206100668248e-05,-5.63633152658753e-05,-4.51257628616543e-05,-3.39136737935609e-05,-2.2732731137515e-05,-1.1588577311449e-05,-4.86811313915871e-07,1.05670140028143e-05,2.15673946238211e-05,3.25088780256781e-05,4.33860657922279e-05,5.41936161910016e-05,6.49262467088871e-05,7.55787365460706e-05,8.6145929067006e-05,9.6622734207392e-05,0.000107004130835977,0.000117285169070277,0.000127460972545122,0.000137526740632994,0.000147477750615314,0.000157309359803685,0.000167017007610151,0.000176596217565704,0.00018604259928613,0.000195351850384441,0.000204519758329025,0.000213542202246907,0.000222415154671328,0.000231134683232959,0.000239696952294124,0.000248098224525462,0.000256334862424394,0.000264403329774837,0.000272300193047718,0.000280022122741781,0.000287565894664179,0.000294928391150552,0.000302106602224122,0.000309097626693513,0.000315898673188933,0.000322507061136496,0.00032892022167043,0.000335135698482898,0.000341151148611358,0.000346964343163231,0.000352573167977838,0.000357975624225448,0.000363169828943501,0.000368154015509882,0.00037292653405339,0.000377485851801332,0.000381830553364452,0.000385959340959241,0.000389871034567797,0.000393564572035445,0.000397039009106331,0.0004002935193972,0.000403327394309709,0.000406140042881527,0.000408730991576614,
 0.00041109988401501,0.00041324648064257,0.000415170658341089,0.000416872409979226,0.000418351843904798,0.000419609183378899,0.000420644765952442,0.000421459042785672,0.000422052577911267,0.000422426047441668,0.000422580238721292,0.000422516049424304,0.000422234486598678,0.000421736665657269,0.000421023809316662,0.000420097246484597,0.00041895841109675,0.000417608840903734,0.000416050176209156,0.000414284158559614,0.000412312629387525,0.000410137528607722,0.00040776089316874,0.000405184855559753,0.000402411642274163,0.000399443572230807,0.000396283055153818,0.00039293258991216,0.000389394762819914,0.000385672245898332,0.000381767795100793,0.000377684248501704,0.00037342452445052,0.000368991619691937,0.00036438860745344,0.000359618635501352,0.00035468492416652,0.000349590764340821,0.000344339515445694,0.000338934603373839,0.00033337951840533,0.000327677813099311,0.000321833100162537,0.000315849050295926,0.00030972939002039,0.000303477899483179,0.000297098410245953,0.000290594803055835,0.000283971005600701,0.000277230990249963,0.000270378771782053,0.00026341840509992,0.000256353982935729,0.000249189633546102,0.000241929518399064,0.000234577829853977,0.000227138788835771,0.000219616642504624,0.00021201566192238,0.000204340139716987,0.00019659438774611,0.00018878273476121,0.000180909524073276,0.000172979111221486,0.000164995861645939,0.000156964148365684,0.000148888349663314,0.000140772846777168,0.000132622021602488,0.000124440254402532,0.000116231921530969,0.000108001393166544,9.97530310612701e-05,9.14911863031805e-05,8.32201970948495e-05,7.49443865486734e-05,6.66680605000458e-05,5.83955053395394e-05,5.01309858650572e-05,4.18787431550387e-05,3.36429924637897e-05,2.5427921139845e-05,1.72376865684373e-05,9.07641413898225e-06,9.48195238618906e-07,-7.14291472735571e-06,-1.51928982871869e-05,-2.3197777825582e-05,-3.11536174769895e-05,-3.9056524988396e-05,-4.69026535507839e-05,-5.46882035983796e-05,-6.24094245749816e-05,-7.00626166665431e-05,-7.76441324992083e-05,-8.51503788021583e-05,-9.25778180344744e-05,-9.99229699753843e-05,-0.000107182413277144,-0.000114352786980001,-0.000121430791988571,-0.000128413192508979,-0.000135296817446292,-0.000142078561761593,-0.000148755387788244,-0.000155324326506732,-0.000161782478777755,-0.000168127016532938,-0.000174355183922887,-0.000180464298422044,-0.000186451751890066,-0.000192315011589317,-0.00019805162115811,-0.000203659201539462,-0.000209135451865035,-0.000214478150293975,-0.000219685154806484,-0.000224754403951855,-0.000229683917550825,-0.000234471797352043,-0.000239116227642562,-0.00024361547581224,-0.000247967892871911,-0.000252171913925349,-0.000256226058594915,-0.000260128931400936,-0.000263879222094778,-0.000267475705945676,-0.000270917243981399,-0.000274202783182808,-0.00027733135663242,-0.00028030208361713,-0.000283114169685247,-0.000285766906657991,-0.000288259672595703,-0.000290591931718978,-0.000292763234284939,-0.000294773216418979,-0.00029662159990223,-0.000298308191915087,-0.000299832884737118,-0.000301195655403732,-0.000302396565319991,-0.000303435759831934,-0.000304313467755884,-0.000305030000866148,-0.000305585753341585,-0.00030598120117152,-0.000306216901521509,-0.000306293492059488,-0.000306211690242816,-0.000305972292566803,-0.00030557617377527,-0.000305024286033762,-0.000304317658065994,-0.000303457394254184,-0.000302444673703895,-0.000301280749274063,-0.000299966946572862,-0.000298504662920124,-0.000296895366276984,-0.000295140594143504,-0.000293241952424973,-0.000291201114267648,-0.000289019818864695,-0.000286699870233075,-0.000284243135962188,-0.000281651545935046,-0.000278927091022785,-0.000276071821753329,-0.000273087846955029,-0.000269977332376106,-0.000266742499280753,-0.000263385623022736,-0.000259909031597333,-0.000256315104172533,-0.0002526062696003,-0.000248785004908818,-0.000244853833776615,-0.000240815324989414,-0.000236672090880646,-0.00023242678575649,-0.000228082104306389,-0.000223640779999902,-0.00021910558347082,-0.00021447932088949,-0.000209764832324188,-0.000204964990092552,-0.000200082697103894,-0.000195120885193399,-0.00019008251344906,-0.000184970566532297,-0.000179788052993172,-0.000174538003581127,-0.000169223469552129,-0.000163847520973146,-0.000158413245024881,-0.000152923744303642,-0.000147382135123237,-0.000141791545817854,-0.000136155115046731,-0.000130475990101566,-0.000124757325217511,-0.000119002279888661,-0.000113214017188868,-0.000107395702098747,-0.000101550499839755,-9.56815742161737e-05,-8.9792085965815e-05,-8.38851911202859e-05,-7.79640393756771e-05,-7.20317724744153e-05,-6.60915225991129e-05,-6.01464107792395e-05,-5.41995453113257e-05,-4.8254020193526e-05,-4.23129135752554e-05,-3.6379286222704e-05,-3.04561800008946e-05,-2.45466163730381e-05,-1.86535949179281e-05,-1.27800918660038e-05,-6.9290586548193e-06,-1.10342050454853e-06,4.69392498575835e-06,1.04601092206202e-05,1.6192293968531e-05,2.1887672699831e-05,2.75434719013334e-05,3.31569523672129e-05,3.87254104655552e-05,4.4246179379982e-05,4.97166303258814e-05,5.51341737406908e-05,6.04962604476993e-05,6.58003827929482e-05,7.10440757547034e-05,7.62249180250887e-05,8.13405330633889e-05,8.63885901206669e-05,9.13668052352641e-05,9.6272942198768e-05,0.000101104813492143,0.000105860281191626,0.00011053725784408,0.000115133707311479,0.00011964764558422,0.000124077141563023,0.000128420317809118,0.000132675351262483,0.000136840473927933,0.000140913973528842,0.000144894194128284,0.000148779536717474,0.000152568459771325,0.000156259479770981,0.00015985117169324,0.000163342169466755,0.000166731166394932,0.000170016915545461,0.000173198230106457,0.000176273983709174,0.000179243110717271,0.000182104606482673,0.000184857527568029,0.000187500991935842,0.000190034179104279,0.000192456330269823,0.000194766748396795,0.000196964798273909,0.000199049906537954,0.000201021561664791,0.000202879313927801,0.000204622775323984,0.000206251619467897,0.000207765581453664,0.000209164457685255,0.000210448105675328,0.000211616443812851,0.000212669451099813,0.000213607166857295,0.000214429690401231,0.000215137180688158,0.000215729855931309,0.000216207993187386,0.000216571927914394,0.000216822053500895,0.00021695882076709,0.000216982737438119,0.000216894367590012,0.000216694331068704,0.000216383302882574,0.000215962012568937,0.000215431243534989,0.000214791832373643,0.000214044668154779,0.000213190691692376,0.000212230894788063,0.000211166319451582,0.000209998057098713,0.000208727247727179,0.000207355079071099,0.000205882785734526,0.000204311648304645,0.0002026429924452,0.000200878187970726,0.000199018647902181,0.000197065827504565,0.000195021223307131,0.000192886372106789,0.000190662849955323,0.000188352271131036,0.000185956287095444,0.000183476585435659,0.000180914888793067,0.00017827295377898,0.000175552569877859,0.000172755558338776,0.000169883771055775,0.000166939089437739,0.000163923423268465,0.000160838709557554,0.000157686911382826,0.00015447001672486,0.00015119003729435,0.000147849007352939,0.000144448982528169,0.000140992038623225,0.000137480270422103,0.000133915790490909,0.000130300727975883,0.000126637227398849,0.000122927447450727,0.000119173559783752,0.000115377747803056,0.000111542205458249,0.000107669136035655,0.000103760750951826,9.98192685489614e-05,9.58469128929004e-05,9.18459125742598e-05,8.7818499513379e-05,8.3766907769656e-05,7.96933723559266e-05,7.5600128058426e-05,7.14894082630084e-05,6.7363443788134e-05,6.32244617252883e-05,5.90746842873462e-05,5.49163276654788e-05,5.07516008951872e-05,4.65827047319742e-05,4.24118305372229e-05,3.82411591748463e-05,3.40728599191875e-05,2.99090893747362e-05,2.5751990408141e-05,2.16036910930649e-05,1.7466303668328e-05,1.33419235098453e-05,9.23262811685928e-06,5.1404761128809e-06,1.06750626183723e-06,-2.98426350016023e-06,-7.01283701696615e-06,-1.10162408480615e-05,-1.49925251873214e-05,-1.89397647644821e-05,-2.28560597288928e-05,-2.67395365152196e-05,-3.0588348690713e-05,-3.44006777836603e-05,-3.81747340927275e-05,-4.19087574768357e-05,-4.56010181252311e-05,-4.92498173074901e-05,-5.28534881031252e-05,-5.64103961105393e-05,-5.99189401350207e-05,-6.33775528555675e-05,-6.67847014702765e-05,-7.01388883200426e-05,-7.34386514903965e-05,-7.66825653912348e-05,-7.98692413142891e-05,-8.29973279680875e-05,-8.60655119903289e-05,-8.90725184374467e-05,-9.2017111251262e-05,-9.48980937025603e-05,-9.77143088115188e-05,-0.000100464639744859,-0.000103148010189625,-0.000105763384703537,-0.000108309769041847,-0.000110786210460631,-0.000113191797996502,-0.000115525662722708,-0.000117786977981613,-0.000119974959593534,-0.000122088866041986,-0.000124127998635343,-0.000126091701644931,-0.000127979362419654,-0.000129790411477168,-0.000131524322571709,-0.000133180612738637,-0.000134758842315834,-0.000136258614942016,-0.000137679577532133,-0.000139021420229953,-0.000140283876337993,-0.000141466722224963,-0.000142569777210869,-0.000143592903429972,-0.000144536005671797,-0.000145399031200369,-0.000146181969551922,-0.000146884852311273,-0.000147507752867119,-0.000148050786146473,-0.000148514108328524,-0.000148897916538149,-0.000149202448519377,-0.000149427982289073,-0.000149574835771129,-0.000149643366411474,-0.000149633970774194,-0.000149547084119101,-0.000149383179961048,-0.000149142769611348,-0.000148826401701622,-0.000148434661690426,-0.000147968171353023,-0.000147427588254649,-0.00014681360520765,-0.000146126949712865,-0.000145368383385639,-0.000144538701366849,-0.000143638731719352,-0.00014266933481023,-0.000141631402679272,-0.000140525858394076,-0.000139353655392192,-0.000138115776810751,-0.000136813234803966,-0.000135447069848973,-0.000134018350040413,-0.000132528170374222,-0.000130977652021046,-0.000129367941589733,-0.000127700210381361,-0.000125975653634229,-0.000124195489760284,-0.000122360959573422,-0.000120473325510131,-0.000118533870842929,-0.000116543898887054,-0.000114504732200872,-0.000112417711780454,-0.000110284196248804,-0.00010810556104017,-0.000105883197579935,-0.000103618512460518,-0.000101312926613771,-9.89678744803232e-05,-9.65848031763287e-05,-9.41651716580905e-05,-9.17104498849976e-05,-8.92221179812628e-05,-8.67016653968825e-05,-8.41505900682881e-05,-8.15703975791493e-05,-7.89626003217505e-05,-7.63287166594104e-05,-7.36702700903664e-05,-7.09887884135878e-05,-6.82858028969257e-05,-6.55628474480433e-05,-6.2821457788569e-05,-6.00631706318681e-05,-5.72895228648757e-05,-5.45020507343893e-05,-5.17022890382489e-05,-4.88917703218012e-05,-4.60720240800406e-05,-4.32445759658306e-05,-4.04109470046086e-05,-3.75726528159311e-05,-3.47312028422512e-05,-3.18880995853173e-05,-2.90448378505281e-05,-2.62029039996194e-05,-2.33637752120534e-05,-2.05289187554216e-05,-1.76997912652335e-05,-1.48778380343994e-05,-1.20644923127653e-05,-9.26117461698226e-06,-6.46929205104167e-06,-3.69023763779291e-06,-9.25389661709246e-07,1.82388897678174e-06,4.55625139514286e-06,7.27036735044587e-06,9.96492384873171e-06,1.26386257417392e-05,1.52901963107384e-05,1.79183778372582e-05,2.05219321604611e-05,2.30996412209252e-05,2.56503075906517e-05,2.81727549890619e-05,3.06658287848129e-05,3.3128396483204e-05,3.55593481990333e-05,3.7957597114714e-05,4.03220799234942e-05,4.26517572576078e-05,4.49456141012435e-05,4.72026601881683e-05,4.94219303839002e-05,5.16024850522866e-05,5.37434104064079e-05,5.58438188436954e-05,5.79028492651571e-05,5.991966737866e-05,6.18934659861721e-05,6.38234652549182e-05,6.57089129723729e-05,6.75490847850721e-05,6.93432844211934e-05,7.10908438968675e-05,7.27911237062256e-05,7.4443512995159e-05,7.60474297187844e-05,7.76023207826403e-05,7.91076621676173e-05,8.05629590386577e-05,8.19677458372436e-05,8.33215863577353e-05,8.46240738076028e-05,8.58748308515986e-05,8.70735096399619e-05,8.82197918207153e-05,8.93133885361372e-05,9.03540404035137e-05,9.13415174802592e-05,9.2275619213524e-05,9.31561743743901e-05,9.39830409767967e-05,9.47561061813166e-05,9.54752861839191e-05,9.61405260898756e-05,9.67517997729505e-05,9.73091097200466e-05,9.78124868614686e-05,9.82619903869737e-05,9.86577075477993e-05,9.89997534448506e-05,9.92882708032378e-05,9.95234297333714e-05,9.9705427478815e-05,9.98344881511113e-05,9.9910862451795e-05,9.99348273818228e-05,9.99066859386447e-05,9.98267668011501e-05,9.96954240027345e-05,9.95130365927253e-05,9.92800082864198e-05,9.89967671039888e-05,9.86637649985054e-05,9.82814774733607e-05,9.78504031893375e-05,9.73710635616094e-05,9.68440023469432e-05,9.62697852213859e-05,9.56489993487134e-05,9.49822529399338e-05,9.42701748041286e-05,
 9.35134138909306e-05,9.27126388249273e-05,9.18685374322918e-05,9.09818162599413e-05,9.00532000875255e-05,8.90834314325463e-05,8.80732700489246e-05,8.70234924193122e-05,8.59348912414666e-05,8.4808274908995e-05,8.36444669867889e-05,8.24443056814471e-05,8.12086433070261e-05,7.99383457464085e-05,7.86342919086182e-05,7.72973731824044e-05,7.59284928863964e-05,7.45285657161543e-05,7.30985171884367e-05,7.16392830829907e-05,7.01518088821841e-05,6.86370492088033e-05,6.70959672623157e-05,6.55295342539231e-05,6.39387288407062e-05,6.23245365591873e-05,6.06879492586023e-05,5.90299645341967e-05,5.73515851608611e-05,5.56538185273923e-05,5.39376760716902e-05,5.22041727171986e-05,5.04543263108675e-05,4.8689157062949e-05,4.6909686988904e-05,4.51169393537251e-05,4.33119381189442e-05,4.14957073926132e-05,3.96692708825497e-05,3.78336513531005e-05,3.59898700857156e-05,3.41389463435848e-05,3.22818968406223e-05,3.04197352150379e-05,2.8553471507761e-05,2.66841116459819e-05,2.48126569320371e-05,2.2940103537894e-05,2.10674420054833e-05,1.91956567530948e-05,1.73257255880833e-05,1.54586192260934e-05,1.35953008170508e-05,1.17367254781075e-05,9.88383983376397e-06,8.03758156337068e-06,6.19887895622112e-06,4.36865047440966e-06,2.5478043236621e-06,7.37238032308926e-07,-1.06216196140182e-06,-2.8495207135011e-06,-4.6239751698272e-06,-6.38467455271441e-06,-8.1307807387077e-06,-9.86146862713565e-06,-1.15759264994109e-05,-1.32733563689023e-05,-1.49529743212685e-05,-1.66140108451148e-05,-1.82557111528465e-05,-1.98773354916211e-05,-2.14781594442845e-05,-2.30574742201769e-05,-2.46145869357363e-05,-2.61488208847895e-05,-2.76595157984633e-05,-2.91460280946187e-05,-3.06077311167596e-05,-3.20440153623401e-05,-3.34542887004033e-05,-3.48379765785163e-05,-3.61945222189482e-05,-3.75233868040389e-05,-3.8824049650746e-05,-4.00960083743248e-05,-4.13387790411312e-05,-4.25518963105175e-05,-4.37349135658282e-05,-4.48874030344821e-05,-4.60089558971416e-05,-4.70991823859845e-05,-4.81577118720844e-05,-4.91841929419275e-05,-5.01782934630889e-05,-5.11397006390925e-05,-5.20681210535035e-05,-5.29632807032924e-05,-5.38249250215107e-05,-5.46528188893462e-05,-5.5446746637607e-05,-5.62065120377057e-05,-5.69319382822058e-05,-5.76228679550161e-05,-5.82791629913088e-05,-5.89007046272429e-05,-5.94873933395923e-05,
 -6.00391487753712e-05,-6.05559096715516e-05,-6.10376337649892e-05,-6.14842976926593e-05,-6.18958968823238e-05,-6.22724454337409e-05,-6.26139759905511e-05,-6.29205396029613e-05,-6.31922055813587e-05,-6.34290613409974e-05,-6.36312122378911e-05,-6.37987813960626e-05,-6.39319095262928e-05,-6.40307547365266e-05,-6.4095492334089e-05,-6.41263146198697e-05,-6.41234306746412e-05,-6.40870661376763e-05,-6.40174629778309e-05,-6.391487925727e-05,-6.37795888880065e-05,-6.36118813814352e-05,-6.34120615910403e-05,-6.31804494484614e-05,-6.29173796931019e-05,-6.26232015954722e-05,-6.22982786744525e-05,-6.19429884086736e-05,-6.15577219422071e-05,-6.11428837847619e-05,-6.06988915065879e-05,-6.02261754282833e-05,-5.97251783057106e-05,-5.91963550102224e-05,-5.86401722044023e-05,-5.80571080135255e-05,-5.74476516929464e-05,-5.68123032916221e-05,-5.61515733119774e-05,-5.54659823663212e-05,-5.47560608300273e-05,-5.40223484916847e-05,-5.32653942004291e-05,-5.24857555106721e-05,-5.16839983244288e-05,-5.08606965314632e-05,-5.00164316474562e-05,-4.91517924504131e-05,-4.8267374615513e-05,-4.73637803486132e-05,-4.64416180186218e-05,-4.5501501788938e-05,-4.45440512481755e-05,-4.35698910403686e-05,-4.25796504948758e-05,-4.15739632561745e-05,-4.05534669137558e-05,-3.95188026323246e-05,-3.84706147824963e-05,-3.74095505721944e-05,-3.63362596789495e-05,-3.52513938832866e-05,-3.41556067034013e-05,-3.30495530313092e-05,-3.19338887706706e-05,-3.08092704764648e-05,-2.96763549967043e-05,-2.85357991163705e-05,-2.73882592037593e-05,-2.62343908594003e-05,-2.50748485677371e-05,-2.39102853517339e-05,-2.27413524305865e-05,-2.15686988806958e-05,-2.0392971300071e-05,-1.92148134763324e-05,-1.80348660584579e-05,-1.68537662324395e-05,-1.56721474009943e-05,-1.44906388674902e-05,-1.33098655242169e-05,-1.21304475451533e-05,-1.09530000833746e-05,-9.77813297322283e-06,-8.60645043737829e-06,-7.43855079896758e-06,-6.27502619881872e-06,-5.11646231799598e-06,-3.96343810572349e-06,-2.81652551282231e-06,-1.67628923075757e-06,-5.43286436407872e-07,5.81933457334323e-07,1.69882904504592e-06,2.80686716623921e-06,3.90552313671397e-06,4.99428097372264e-06,6.07263361485467e-06,7.14008313057028e-06,8.19614093029787e-06,9.24032796203801e-06,1.02721749054007e-05,1.12912223580112e-05,1.22970210152324e-05,1.32891318431441e-05,1.42671262447348e-05,1.52305862192578e-05,1.61791045147037e-05,1.71122847733627e-05,1.80297416704377e-05,1.89311010456724e-05,1.98160000279816e-05,2.06840871530522e-05,2.15350224739038e-05,2.23684776643877e-05,2.31841361156243e-05,2.39816930253701e-05,2.47608554803058e-05,2.55213425312607e-05,2.62628852613713e-05,2.69852268471836e-05,2.76881226127196e-05,2.83713400765207e-05,2.90346589916937e-05,2.9677871378978e-05,3.03007815528719e-05,3.0903206140848e-05,3.1484974095687e-05,3.20459267009823e-05,3.25859175698492e-05,3.31048126368919e-05,3.36024901434722e-05,3.40788406163417e-05,3.45337668396904e-05,3.49671838206697e-05,3.53790187484599e-05,3.57692109469452e-05,3.61377118210647e-05,3.64844847969168e-05,3.68095052556901e-05,3.71127604615012e-05,3.73942494832179e-05,3.76539831103606e-05,3.78919837631567e-05,3.81082853968512e-05,3.83029334003579e-05,3.84759844893474e-05,3.86275065938727e-05,3.87575787406302e-05,3.8866290929957e-05,3.89537440076728e-05,3.90200495318706e-05,3.90653296347648e-05,3.90897168797088e-05,3.9093354113495e-05,3.90763943140511e-05,3.90390004336481e-05,3.89813452377419e-05,3.89036111395636e-05,3.88059900305833e-05,3.86886831069695e-05,3.85519006921668e-05,3.83958620557194e-05,3.82207952284668e-05,3.80269368142382e-05,3.78145317981768e-05,3.75838333518232e-05,3.73351026350876e-05,3.70686085952445e-05,3.67846277630824e-05,3.64834440463399e-05,3.61653485205641e-05,3.58306392175243e-05,3.54796209113175e-05,3.51126049022989e-05,3.47299087989734e-05,3.43318562979864e-05,3.39187769623452e-05,3.34910059980102e-05,3.30488840289915e-05,3.25927568710847e-05,3.21229753043848e-05,3.16398948447076e-05,3.11438755140624e-05,3.06352816103032e-05,3.01144814760946e-05,2.95818472673267e-05,2.90377547211135e-05,2.84825829235032e-05,2.79167140770348e-05,2.73405332682702e-05,2.67544282354346e-05,2.61587891362892e-05,2.55540083163661e-05,2.49404800776967e-05,2.43186004481496e-05,2.36887669515123e-05,2.30513783784305e-05,2.24068345583368e-05,2.17555361324792e-05,2.10978843281734e-05,2.04342807343983e-05,1.97651270788444e-05,1.9090825006532e-05,1.84117758601162e-05,1.77283804619801e-05,1.70410388982337e-05,1.63501503047186e-05,1.56561126551312e-05,1.495932255136e-05,1.42601750161419e-05,1.35590632881393e-05,1.28563786195292e-05,1.21525100762026e-05,1.14478443406704e-05,1.07427655177589e-05,1.00376549431904e-05,9.33289099512935e-06,8.62884890878591e-06,7.92590059414905e-06,7.22441445693406e-06,6.52475522282227e-06,5.82728376506355e-06,5.13235693551779e-06,4.44032739920081e-06,3.75154347240349e-06,3.06634896445296e-06,2.38508302317038e-06,1.70807998408878e-06,1.03566922349158e-06,3.68175015318385e-07,-2.94083608003316e-07,-9.50792990756429e-07,-1.60164498510903e-06,-2.24633707822957e-06,-2.88457251529726e-06,-3.51606041836508e-06,-4.1405159010472e-06,-4.75766017899044e-06,-5.3672206761039e-06,-5.96893112651197e-06,-6.56253167221256e-06,-7.14776895641407e-06,-7.72439621252695e-06,-8.29217334879925e-06,-8.85086702857723e-06,-9.40025074617521e-06,-9.94010489835156e-06,-1.04702168513777e-05,-1.09903810036992e-05,-1.15003988441811e-05,-1.20000790059446e-05,-1.24892373157939e-05,-1.29676968392356e-05,-1.34352879211057e-05,-1.38918482218078e-05,-1.43372227491768e-05,-1.47712638859842e-05,-1.51938314131016e-05,-1.56047925283423e-05,-1.60040218609995e-05,-1.63914014821138e-05,-1.67668209104844e-05,-1.71301771144641e-05,-1.74813745095637e-05,-1.78203249518961e-05,-1.81469477275018e-05,-1.84611695375892e-05,-1.87629244797279e-05,-1.90521540250401e-05,-1.93288069914307e-05,-1.95928395129016e-05,-1.98442150049985e-05,-2.00829041264386e-05,-2.03088847369704e-05,-2.05221418515167e-05,-2.07226675906579e-05,-2.09104611275098e-05,-2.10855286310533e-05,-2.12478832059766e-05,-2.13975448290908e-05,-2.15345402823792e-05,-2.16589030827471e-05,-2.17706734085351e-05,-2.18698980228636e-05,-2.19566301938759e-05,-2.20309296119499e-05,-2.20928623039478e-05,-2.21425005445764e-05,-2.21799227649299e-05,-2.22052134582896e-05,-2.22184630832555e-05,-2.22197679642845e-05,-2.2209230189713e-05,-2.21869575073415e-05,-2.21530632176586e-05,-2.21076660647849e-05,-2.20508901252157e-05,-2.19828646944433e-05,-2.19037241715403e-05,-2.1813607941786e-05,-2.17126602574166e-05,-2.16010301165839e-05,-2.14788711406045e-05,-2.13463414495824e-05,-2.1203603536491e-05,-2.10508241397953e-05,-2.08881741147018e-05,-2.07158283031179e-05,-2.05339654024071e-05,-2.03427678330235e-05,-2.01424216051101e-05,-1.99331161841466e-05,-1.97150443557299e-05,-1.94884020895713e-05,-1.92533884027966e-05,-1.90102052226299e-05,-1.87590572485474e-05,-1.85001518139831e-05,-1.82336987476685e-05,-1.79599102346913e-05,-1.76790006773523e-05,-1.73911865559027e-05,-1.7096686289245e-05,-1.67957200956739e-05,-1.64885098537403e-05,-1.61752789633143e-05,-1.58562522069298e-05,-1.55316556114829e-05,-1.52017163103648e-05,-1.48666624061034e-05,-1.45267228335893e-05,-1.41821272239585e-05,-1.38331057692082e-05,-1.34798890876143e-05,-1.31227080900243e-05,-1.27617938470932e-05,-1.23973774575348e-05,-1.20296899174529e-05,-1.16589619908198e-05,-1.12854240811699e-05,-1.09093061045694e-05,-1.05308373639279e-05,-1.01502464247116e-05,-9.76776099211927e-06,-9.38360778978138e-06,
 -8.99801244003842e-06,-8.61119934585469e-06,-8.22339157442569e-06,-7.83481074252834e-06,-7.44567690366961e-06,-7.05620843708182e-06,-6.66662193861727e-06,-6.27713211358587e-06,-5.88795167158395e-06,
 -5.49929122336098e-06,-5.11135917976332e-06,-4.72436165279992e-06,-4.33850235886763e-06,-3.95398252417812e-06,-3.57100079241897e-06,-3.18975313468634e-06,-2.81043276172504e-06,-2.43323003850373e-06,-2.05833240115816e-06,-1.685924276333e-06,-1.31618700294526e-06,
 -9.49298756398598e-07,-5.85434475269598e-07,-2.24765790491996e-07,1.32539042944795e-07,4.86315211761806e-07,8.36401407601896e-07,1.18263988767471e-06,1.52487653281903e-06,
 1.86296090296814e-06,2.1967462900115e-06,2.52608976803993e-06,2.85085224096945e-06,3.17089848753367e-06,3.48609720364737e-06,3.79632104212865e-06,4.10144664978819e-06,4.40135470188026e-06,
 4.69592993391713e-06,4.98506117085352e-06,5.26864135364426e-06,5.54656756317972e-06,5.81874104161062e-06,6.08506721106972e-06,6.34545568979961e-06,6.59982030570251e-06,6.84807910732276e-06,
 7.09015437227939e-06,7.32597261316241e-06,7.55546458091406e-06,7.77856526571272e-06,7.99521389537843e-06,8.205353931325e-06,8.40893306208027e-06,8.60590319439753e-06,8.79622044198664e-06,
 8.97984511188938e-06,9.15674168852855e-06,9.32687881545793e-06,9.49022927484591e-06,9.64676996472302e-06,9.79648187402453e-06,9.9393500554642e-06,1.00753635962716e-05,1.02045155868301e-05,1.03268030872496e-05,1.04422270919149e-05,
 1.0550792492045e-05,1.06525080363035e-05,1.07473862895008e-05,1.08354435894281e-05,1.0916700001865e-05,1.09911792738028e-05,1.10589087849281e-05,1.11199194974072e-05,1.11742459040199e-05,1.12219259746839e-05,1.12630011014179e-05,
 1.12975160417894e-05,1.13255188608912e-05,1.13470608718987e-05,1.13621965752502e-05,1.13709835965034e-05,1.13734826229118e-05,1.13697573387741e-05,1.13598743596031e-05,1.13439031651642e-05,1.13219160314341e-05,1.12939879615282e-05,1.12601966156489e-05,1.12206222401028e-05,1.11753475954396e-05,1.11244578837615e-05,
 1.10680406752548e-05,1.10061858339947e-05,1.09389854430728e-05,1.08665337290994e-05,1.07889269861305e-05,1.07062634990703e-05,1.06186434666002e-05,1.05261689236834e-05,1.04289436636974e-05,1.03270731602418e-05,1.02206644886739e-05,1.01098262474198e-05,9.9946684791103e-06,9.87530259159214e-06,9.75184127886139e-06,
 9.62439844196833e-06,9.49308910994118e-06,9.35802936077671e-06,9.21933624254407e-06,9.07712769464879e-06,8.93152246930308e-06,8.78264005324777e-06,8.6306005897712e-06,8.47552480106908e-06,8.31753391098936e-06,8.15674956820604e-06,7.9932937698635e-06,7.82728878573374e-06,7.65885708292867e-06,7.48812125120668e-06,
 7.31520392891465e-06,7.14022772960352e-06,6.96331516935742e-06,6.78458859487235e-06,6.60417011232209e-06,6.42218151704837e-06,6.23874422410882e-06,6.05397919971873e-06,5.86800689361913e-06,
 5.68094717240549e-06,5.49291925384727e-06,5.30404164223008e-06,5.11443206475166e-06,4.9242074089991e-06,4.73348366153649e-06,4.54237584763148e-06,4.35099797214519e-06,4.15946296161273e-06,3.96788260753768e-06,
 3.7763675109258e-06,3.58502702807881e-06,3.39396921767065e-06,3.20330078912824e-06,3.01312705233424e-06,2.82355186867183e-06,2.63467760343009e-06,2.44660507958479e-06,
 2.25943353297212e-06,2.0732605688689e-06,1.88818211999487e-06,1.70429240594667e-06,1.52168389407997e-06,1.3404472618458e-06,1.16067136059361e-06,9.82443180850183e-07,8.05847819080474e-07,
 6.30968445938114e-07,4.57886276012498e-07,2.86680539075395e-07,1.17428452831953e-07,-4.97948028199512e-08,-2.14916110022078e-07,-3.77864435677152e-07,-5.38570852660314e-07,-6.96968559519905e-07,-8.5299289867131e-07,-1.00658137308564e-06,
 -1.15767366147596e-06,-1.30621163198739e-06,-1.45213935439567e-06,-1.59540311081939e-06,-1.73595140495523e-06,-1.87373496984243e-06,-2.00870677416658e-06,-2.14082202711105e-06,-2.27003818176826e-06,-2.39631493712127e-06,-2.51961423860721e-06,-2.63990027727693e-06,-2.75713948756333e-06,
 -2.87130054367384e-06,-2.98235435462072e-06,-3.0902740579069e-06,-3.19503501188303e-06,-3.29661478679242e-06,-3.39499315452328e-06,-3.4901520770861e-06,-3.58207569383478e-06,-3.67075030745277e-06,
 -3.75616436872432e-06,-3.83830846011025e-06,-3.91717527815299e-06,-3.99275961473001e-06,-4.06505833718047e-06,-4.13407036732752e-06,-4.19979665941946e-06,-4.2622401770152e-06,
 -4.32140586883761e-06,-4.37730064362061e-06,-4.42993334397458e-06,-4.47931471929708e-06,-4.52545739775463e-06,-4.56837585736177e-06,-4.60808639618528e-06,-4.6446071017002e-06,
 -4.67795781932549e-06,-4.708160120167e-06,-4.73523726799615e-06,-4.75921418549266e-06,-4.78011741977943e-06,-4.79797510727911e-06,-4.81281693792078e-06,-4.82467411872586e-06,-4.83357933680285e-06,-4.83956672177993e-06,-4.84267180770512e-06,
 -4.84293149444328e-06,-4.84038400859978e-06,-4.8350688640006e-06,-4.82702682175797e-06,-4.81629984995191e-06,-4.80293108295687e-06,-4.7869647804432e-06,-4.76844628608298e-06,
 -4.74742198598981e-06,-4.72393926692185e-06,-4.69804647427729e-06,-4.66979286991169e-06,-4.63922858980587e-06,-4.60640460161349e-06,-4.57137266211669e-06,-4.53418527461856e-06,
 -4.49489564630047e-06,-4.45355764557233e-06,-4.41022575944365e-06,-4.36495505094286e-06,-4.317801116612e-06,-4.26882004410401e-06,-4.21806836990897e-06,-4.16560303723581e-06,
 -4.11148135407526e-06,-4.05576095146995e-06,-3.99849974201672e-06,-3.9397558786259e-06,-3.87958771356254e-06,-3.81805375779311e-06,-3.75521264066175e-06,-3.691123069919e-06,
 -3.6258437921263e-06,-3.55943355345803e-06,-3.49195106092336e-06,-3.42345494402937e-06,-3.35400371690615e-06,-3.28365574091442e-06,-3.21246918775589e-06,-3.14050200310536e-06,
 -3.06781187078387e-06,-2.99445617749092e-06,-2.9204919781143e-06,-2.84597596163407e-06,-2.77096441763785e-06,-2.69551320346391e-06,-2.61967771198731e-06,-2.54351284006418e-06,
 -2.46707295764928e-06,-2.39041187760002e-06,-2.31358282618093e-06,-2.23663841428083e-06,-2.15963060935584e-06,-2.08261070810835e-06,-2.00562930991492e-06,-1.92873629101175e-06,-1.85198077944851e-06,-1.77541113081986e-06,-1.69907490478283e-06,
 -1.62301884236816e-06,-1.54728884409369e-06,-1.47192994888574e-06,-1.39698631381516e-06,-1.32250119465413e-06,-1.24851692725776e-06,-1.17507490977595e-06,
 -1.10221558569852e-06,-1.02997842773779e-06,-9.58401922550402e-07,-8.87523556300847e-07,-8.17379801068637e-07,-7.48006102099267e-07,-6.79436865899722e-07,-6.1170544917867e-07,-5.44844148629826e-07,-4.78884191557767e-07,
 -4.13855727343869e-07,-3.49787819750523e-07,-2.8670844005994e-07,-2.24644461044386e-07,-1.63621651764123e-07,-1.03664673187799e-07,-4.4797074630806e-08,0.0
];

})﻿describe("MEPH/audio/sbsms/SMS.spec.js", 'MEPH.audio.sbsms.SMS', function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    xit('can create an SMS', function () {
        var sms = new MEPH.audio.sbsms.SMS();

        expect(sms).toBeTruthy();
    });

});﻿/**
 * @class MEPH.audio.sbsms.Slice
 **/
MEPH.define('MEPH.audio.sbsms.Slice', {
    statics: {
    },
    properties: {
        //TrackPoint *bottom;
        bottom: null,
        //TrackPoint *top;
        top: null,
        //int band;
        band: 0,
        ///TimeType time;
        time: null
    },

    //int band, const TimeType &time
    initialize: function (band, time) {
        this.band = band;
        this.time = time;
        this.bottom = null;
        this.top = null;
    },
    //void Slice :: 
    //TrackPoint *tp
    remove: function (tp) {
        var me = this;
        if (tp == me.top) {
            me.top = me.top.pp;
        }
        if (tp == me.bottom) {
            me.bottom = me.bottom.pn;
        }
    }
})﻿describe("MEPH/audio/sbsms/Slice.spec.js", 'MEPH.audio.sbsms.Slice', function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create an Slice', function () {
        var audio = new MEPH.audio.sbsms.Slice();

        expect(audio).toBeTruthy();
    });

});﻿/**
 * @class MEPH.audio.sbsms.Util
 **/
MEPH.define('MEPH.audio.sbsms.TrackPoint', {
    requires: ['MEPH.audio.sbsms.Util'],
    statics: {
        TrackPointNoCont: 65535
    },
    properties: {
        //      TrackPoint *pp;
        pp: null,
        //TrackPoint *pn;
        pn: null,
        //TrackPoint *dupcont;
        dupcont: null,
        //TrackPoint *dupStereo;
        dupStereo: null,
        //TrackPoint *cont;
        cont: null,
        //TrackPoint *dup[3];
        dup: null,
        //Track *owner;
        owner: null,
        //Slice *slice;
        slice: null,
        //float *peak;
        peak: 0,
        //float x01;
        x01: 0,
        //float y01;
        y01: 0,
        //float phSynth;
        phSynth: 0,
        //union {
        // float fSynth0;
        fSynth0: 0,
        //  float xtp2;
        xtp2: 0,
        //};
        //union {
        //  float fSynth1;
        fSynth1: 0,
        //float xtn2;
        xtn2: 0,
        //};
        //int refCount;
        refCount: 0,
        //float f;
        f: 0,
        //float x;
        x: 0,
        //float y;
        y: 0,
        //float ph;
        ph: 0,
        //float contF;
        contF: 0,
        //float m;
        m: 0,
        //float m2;
        m2: 0,//
        //bool bJump;
        bJump: false,
        //bool bSyncStereo;
        bSyncStereo: false,
        //bool bConnected;
        bConnected: false,
        //bool bConnect;
        bConnect: false,
        //bool bDelete;
        bDelete: false,
        //bool bOwned;
        bOwned: false,
        //bool bMarked;
        bMarked: false,
        //bool bSplit;
        bSplit: false,
        //bool bMerge;
        bMerge: false

    },
    //Slice *slice, float *peak, audio *gx, float *mag, float *mag2, int k, int N, int band
    initialize: function (slice, peak, gx, mag, mag2, k, N, band) {
        var me = this;
        var U = MEPH.audio.sbsms.Util;
        me.refCount = 0;
        me.dup = [];
        for (var d = 0; d < 3; d++) {
            me.dup[d] = null;
        }
        me.dupStereo = null;
        me.bJump = false;
        me.y01 = 0.0;
        me.pp = null;
        me.pn = null;
        me.bSyncStereo = false;
        me.bConnect = false;
        me.bConnected = false;
        me.bDelete = false;
        me.bOwned = false;
        me.bMarked = false;
        me.bSplit = false;
        me.bMerge = false;
        me.owner = null;
        me.slice = slice;
        me.peak = peak;
        var y0 = mag[k - 1];
        var y1 = mag[k];
        var y2 = mag[k + 1];
        var d = (y0 + y2 - y1 - y1);
        me.x = (d == 0.0 ? k : k + 0.5 * (y0 - y2) / d);
        var ki = me.x;//lrintf(x);
        var ki1;
        var kf;
        if (ki < me.x) {
            ki1 = ki + 1;
            kf = me.x - ki;
        } else {
            ki1 = ki - 1;
            kf = ki - me.x;
        }
        y = ((1.0 - kf) * mag2[ki] + kf * mag2[ki1]);
        f = U.TWOPI * me.x / (N * (1 << band));
        var norm0 = U.square(gx[ki][0]) + U.square(gx[ki][1]);
        var ph0;
        if (norm0 > 0.0) {
            ph0 = Math.atan2(gx[ki][1], gx[ki][0]);
        } else {
            ph0 = 0.0;
        }
        var ph1;
        var norm1 = U.square(gx[ki1][0]) + U.square(gx[ki1][1]);
        if (norm1 > 0.0) {
            ph1 = Math.atan2(gx[ki1][1], gx[ki1][0]);
        } else {
            ph1 = 0.0;
        }
        ph0 += (ki & 1) * U.PI;
        ph1 += (ki1 & 1) * U.PI;
        if (kf < 0.5) {
            ph1 = ph0 + U.canonPI(ph1 - ph0);
        } else {
            ph0 = ph1 + U.canonPI(ph0 - ph1);
        }
        ph = U.canon2PI((1.0 - kf) * ph0 + kf * ph1);
        phSynth = ph;
    },
    absorb: function () {
        var me = this;
        if (me.pp && me.pn) {
            if (me.pp.y * me.peak[(me.pp.x - me.x)] > me.pn.y * me.peak[lrintf(me.pn.x - me.x)]) {
                me.pp.m2 += me.m2;
            } else {
                me.pn.m2 += me.m2;
            }
        } else if (me.pp) {
            if (me.y01 == 0.0 || y01 * me.peak[lrintf(me.x01 - me.x)] < me.pp.y * me.peak[lrintf(me.pp.x - me.x)]) {
                me.pp.m2 += me.m2;
            }
        } else if (me.pn) {
            if (me.y01 == 0.0 || me.y01 * me.peak[lrintf(me.x01 - me.x)] < me.pn.y * me.peak[lrintf(me.pn.x - me.x)]) {
                me.pn.m2 += me.m2;
            }
        }
    },

    destroy:function(){
    },
    //float TrackPoint :: 
    getF: function () {
        var me = this;
        return me.f;
    },
    //float TrackPoint :: 
    getM: function () {
        var me = this;
        return me.y;
    },
    //float TrackPoint :: 
    getPhase: function () {
        var me = this;
        return ph;
    }
})﻿MEPH.define('MEPH.audio.music.theory.data.Voices', {
    statics: {
        voiceList: [{ "name": "@3", "voice": ["00", "07", "12"] }, { "name": "@4", "voice": ["00", "07", "12", "19"] }, { "name": "+ /11", "voice": ["00", "04", "08", "15"] }, { "name": "+ /4", "voice": ["00", "04", "05", "08"] }, { "name": "+", "voice": ["00", "04", "08"] }, { "name": "° /11", "voice": ["00", "03", "06", "15"] }, { "name": "° /2/-13", "voice": ["00", "02", "03", "06", "18"] }, { "name": "° /2/-6", "voice": ["00", "02", "03", "06", "08"] }, { "name": "° /4", "voice": ["00", "03", "05", "06"] }, { "name": "° /9/-13", "voice": ["00", "03", "06", "12", "18"] }, { "name": "° /9/-6", "voice": ["00", "03", "06", "08", "12"] }, { "name": "°", "voice": ["00", "03", "06"] }, { "name": "° 6", "voice": ["00", "03", "06", "09"] }, { "name": "° 6S", "voice": ["00", "05", "06", "09"] }, { "name": "° 7/11", "voice": ["00", "03", "06", "09", "15"] }, { "name": "° 7/-13", "voice": ["00", "03", "06", "09", "18"] }, { "name": "° 7/2", "voice": ["00", "02", "03", "06", "09"] }, { "name": "° 7/4", "voice": ["00", "03", "05", "06", "09"] }, { "name": "° 7/-6", "voice": ["00", "03", "06", "08", "09"] }, { "name": "° 7/9", "voice": ["00", "03", "06", "09", "12"] }, { "name": "° 7", "voice": ["00", "03", "06", "09"] }, { "name": "° 7S", "voice": ["00", "05", "06", "09"] }, { "name": "° M7", "voice": ["00", "03", "06", "0B"] }, { "name": "° S", "voice": ["00", "05", "06"] }, { "name": "11", "voice": ["00", "04", "07", "0A", "12", "15"] }, { "name": "11 +5 c", "voice": ["00", "02", "04", "05", "08", "0A"] }, { "name": "11 +5", "voice": ["00", "04", "08", "0A", "12", "15"] }, { "name": "11 +5+9 c", "voice": ["00", "03", "04", "05", "08", "0A"] }, { "name": "11 +5+9", "voice": ["00", "04", "08", "0A", "13", "15"] }, { "name": "11 +9 c", "voice": ["00", "03", "04", "05", "07", "0A"] }, { "name": "11 +9", "voice": ["00", "04", "07", "0A", "13", "15"] }, { "name": "11 -13 c", "voice": ["00", "02", "04", "05", "07", "08", "0A"] }, { "name": "11 -13", "voice": ["00", "04", "07", "0A", "12", "15", "18"] }, { "name": "11 -5 c", "voice": ["00", "02", "04", "05", "06", "0A"] }, { "name": "11 -5", "voice": ["00", "04", "06", "0A", "12", "15"] }, { "name": "11 -5-9 c", "voice": ["00", "01", "04", "05", "06", "0A"] }, { "name": "11 -5-9", "voice": ["00", "04", "06", "0A", "11", "15"] }, { "name": "11 -9 c", "voice": ["00", "01", "04", "05", "07", "0A"] }, { "name": "11 -9", "voice": ["00", "04", "07", "0A", "11", "15"] }, { "name": "11 -9+9 c", "voice": ["00", "01", "03", "04", "05", "07", "0A"] }, { "name": "11 -9+9", "voice": ["00", "04", "07", "0A", "11", "13", "15"] }, { "name": "11 c", "voice": ["00", "02", "04", "05", "07", "0A"] }, { "name": "13", "voice": ["00", "04", "07", "0A", "12", "15", "19"] }, { "name": "13 +11 c", "voice": ["00", "02", "04", "06", "07", "09", "0A"] }, { "name": "13 +11", "voice": ["00", "04", "07", "0A", "12", "16", "19"] }, { "name": "13 +9 c", "voice": ["00", "03", "04", "05", "07", "09", "0A"] }, { "name": "13 +9", "voice": ["00", "04", "07", "0A", "13", "15", "19"] }, { "name": "13 +9+11 c", "voice": ["00", "03", "04", "06", "07", "09", "0A"] }, { "name": "13 +9+11", "voice": ["00", "04", "07", "0A", "13", "16", "19"] }, { "name": "13 -5-9 c", "voice": ["00", "01", "04", "05", "06", "09", "0A"] }, { "name": "13 -5-9", "voice": ["00", "04", "06", "0A", "11", "15", "19"] }, { "name": "13 -9 c", "voice": ["00", "01", "04", "05", "07", "09", "0A"] }, { "name": "13 -9", "voice": ["00", "04", "07", "0A", "11", "15", "19"] }, { "name": "13 -9+11 c", "voice": ["00", "01", "04", "06", "07", "09", "0A"] }, { "name": "13 -9+11", "voice": ["00", "04", "07", "0A", "11", "16", "19"] }, { "name": "13 -9+9+11 c", "voice": ["00", "01", "03", "04", "06", "07", "09", "0A"] }, { "name": "13 -9+9+11", "voice": ["00", "04", "07", "0A", "11", "13", "16", "19"] }, { "name": "13 c", "voice": ["00", "02", "04", "05", "07", "09", "0A"] }, { "name": "5", "voice": ["00", "07"] }, { "name": "5", "voice": ["00", "17"] }, { "name": "6 S2", "voice": ["00", "02", "07", "09"] }, { "name": "7 /+2/+4/-6", "voice": ["00", "03", "04", "06", "07", "08", "0A"] }, { "name": "7 /+2/+4", "voice": ["00", "03", "04", "06", "07", "0A"] }, { "name": "7 /+2/-6", "voice": ["00", "03", "04", "05", "07", "08", "0A"] }, { "name": "7 /11", "voice": ["00", "04", "07", "0A", "15"] }, { "name": "7 /13", "voice": ["00", "00", "40", "70", "A1", "9undefined"] }, { "name": "7 /-2/+2/+4/-6", "voice": ["00", "01", "03", "04", "06", "07", "08", "0A"] }, { "name": "7 /-2/+2", "voice": ["00", "01", "03", "04", "07", "0A"] }, { "name": "7 /-2/+4/-6", "voice": ["00", "01", "04", "06", "07", "08", "0A"] }, { "name": "7 /-2/+4", "voice": ["00", "01", "04", "06", "07", "0A"] }, { "name": "7 /-2/-6", "voice": ["00", "01", "04", "07", "08", "0A"] }, { "name": "7 /-2", "voice": ["00", "01", "04", "07", "0A"] }, { "name": "7 /4", "voice": ["00", "04", "05", "07", "0A"] }, { "name": "7 /6", "voice": ["00", "04", "07", "09", "0A"] }, { "name": "7", "voice": ["00", "04", "07", "0A"] }, { "name": "7 +5/+2", "voice": ["00", "03", "04", "08", "0A"] }, { "name": "7 +5/-2/+2", "voice": ["00", "01", "03", "04", "08", "0A"] }, { "name": "7 +5/-2/+2/+4", "voice": ["00", "01", "03", "04", "06", "08", "0A"] }, { "name": "7 +5/-2", "voice": ["00", "01", "04", "08", "0A"] }, { "name": "7 +5", "voice": ["00", "04", "08", "0A"] }, { "name": "7 +5+9", "voice": ["00", "04", "08", "0A", "13"] }, { "name": "7 +5-9", "voice": ["00", "04", "08", "0A", "11"] }, { "name": "7 +5-9+9", "voice": ["00", "04", "08", "0A", "11", "13"] }, { "name": "7 +5-9+9+11", "voice": ["00", "04", "08", "0A", "11", "13", "16"] }, { "name": "7 +9 c", "voice": ["00", "03", "04", "07", "0A"] }, { "name": "7 +9", "voice": ["00", "04", "07", "0A", "13"] }, { "name": "7 +9+11", "voice": ["00", "04", "07", "0A", "13", "16"] }, { "name": "7 +9+11-13", "voice": ["00", "04", "07", "0A", "13", "16", "18"] }, { "name": "7 +9-13", "voice": ["00", "04", "07", "0A", "13", "18"] }, { "name": "7 -5/+2", "voice": ["00", "03", "04", "06", "0A"] }, { "name": "7 -5/-2/+2", "voice": ["00", "01", "03", "04", "06", "0A"] }, { "name": "7 -5/-2", "voice": ["00", "01", "04", "06", "0A"] }, { "name": "7 -5", "voice": ["00", "04", "06", "0A"] }, { "name": "7 -5+9", "voice": ["00", "04", "06", "0A", "13"] }, { "name": "7 -5-9", "voice": ["00", "04", "06", "0A", "11"] }, { "name": "7 -5-9+9", "voice": ["00", "04", "06", "0A", "11", "13"] }, { "name": "7 -9 sus4 c", "voice": ["00", "01", "05", "07", "0A"] }, { "name": "7 -9 sus4", "voice": ["00", "05", "07", "0A", "11"] }, { "name": "7 -9", "voice": ["00", "04", "07", "0A", "11"] }, { "name": "7 -9+11", "voice": ["00", "04", "07", "0A", "11", "16"] }, { "name": "7 -9+11-13", "voice": ["00", "04", "07", "0A", "11", "16", "18"] }, { "name": "7 -9+9", "voice": ["00", "04", "07", "0A", "11", "13"] }, { "name": "7 -9+9+11-13", "voice": ["00", "04", "07", "0A", "11", "13", "16", "18"] }, { "name": "7 -9-13", "voice": ["00", "04", "07", "0A", "11", "18"] }, { "name": "7 S2", "voice": ["00", "02", "07", "0A"] }, { "name": "7 sus4", "voice": ["00", "05", "07", "0A"] }, { "name": "9 /+4", "voice": ["00", "04", "06", "07", "0A", "12"] }, { "name": "9 /+4c", "voice": ["00", "02", "04", "06", "07", "0A"] }, { "name": "9", "voice": ["00", "04", "07", "0A", "12"] }, { "name": "9 +11", "voice": ["00", "04", "07", "0A", "12", "16"] }, { "name": "9 +5 c", "voice": ["00", "02", "04", "08", "0A"] }, { "name": "9 +5/+4 c", "voice": ["00", "02", "04", "06", "08", "0A"] }, { "name": "9 +5/+4", "voice": ["00", "04", "06", "08", "0A", "12"] }, { "name": "9 +5", "voice": ["00", "04", "08", "0A", "12"] }, { "name": "9 +5+11", "voice": ["00", "04", "08", "0A", "12", "16"] }, { "name": "9 -5 c", "voice": ["00", "02", "04", "06", "0A"] }, { "name": "9 -5", "voice": ["00", "04", "06", "0A", "12"] }, { "name": "9 c", "voice": ["00", "02", "04", "07", "0A"] }, { "name": "9 sus4 c", "voice": ["00", "02", "05", "07", "0A"] }, { "name": "9 sus4/13", "voice": ["00", "05", "07", "0A", "12", "19"] }, { "name": "9 sus4/6 c", "voice": ["00", "02", "05", "07", "09", "0A"] }, { "name": "9 sus4/6", "voice": ["00", "05", "07", "09", "0A", "12"] }, { "name": "9 sus4", "voice": ["00", "05", "07", "0A", "12"] }, { "name": "aug", "voice": ["00", "04", "08"] }, { "name": "iA1", "voice": ["00", "01"] }, { "name": "iA1", "voice": ["00", "11"] }, { "name": "iA2", "voice": ["00", "03"] }, { "name": "iA2", "voice": ["00", "13"] }, { "name": "iA3", "voice": ["00", "05"] }, { "name": "iA3", "voice": ["00", "15"] }, { "name": "iA4", "voice": ["00", "06"] }, { "name": "iA4", "voice": ["00", "16"] }, { "name": "iA5", "voice": ["00", "08"] }, { "name": "iA5", "voice": ["00", "18"] }, { "name": "iA6", "voice": ["00", "0A"] }, { "name": "iA6", "voice": ["00", "1A"] }, { "name": "iA7", "voice": ["00", "00"] }, { "name": "iA7", "voice": ["00", "10"] }, { "name": "id1", "voice": ["00", "0B"] }, { "name": "id1", "voice": ["00", "1B"] }, { "name": "id2", "voice": ["00", "00"] }, { "name": "id2", "voice": ["00", "10"] }, { "name": "id3", "voice": ["00", "02"] }, { "name": "id3", "voice": ["00", "12"] }, { "name": "id4", "voice": ["00", "04"] }, { "name": "id4", "voice": ["00", "14"] }, { "name": "id5", "voice": ["00", "06"] }, { "name": "id5", "voice": ["00", "16"] }, { "name": "id6", "voice": ["00", "07"] }, { "name": "id6", "voice": ["00", "17"] }, { "name": "id7", "voice": ["00", "09"] }, { "name": "id7", "voice": ["00", "19"] }, { "name": "im2", "voice": ["00", "01"] }, { "name": "iM2", "voice": ["00", "02"] }, { "name": "im2", "voice": ["00", "11"] }, { "name": "iM2", "voice": ["00", "12"] }, { "name": "im3", "voice": ["00", "03"] }, { "name": "iM3", "voice": ["00", "04"] }, { "name": "im3", "voice": ["00", "13"] }, { "name": "iM3", "voice": ["00", "14"] }, { "name": "im6", "voice": ["00", "08"] }, { "name": "iM6", "voice": ["00", "09"] }, { "name": "im6", "voice": ["00", "18"] }, { "name": "iM6", "voice": ["00", "19"] }, { "name": "im7", "voice": ["00", "0A"] }, { "name": "iM7", "voice": ["00", "0B"] }, { "name": "im7", "voice": ["00", "1A"] }, { "name": "iM7", "voice": ["00", "1B"] }, { "name": "iP4", "voice": ["00", "05"] }, { "name": "iP4", "voice": ["00", "15"] }, { "name": "iP5", "voice": ["00", "07"] }, { "name": "iP5", "voice": ["00", "17"] }, { "name": "iU1", "voice": ["00", "00"] }, { "name": "iU1", "voice": ["00", "10"] }, { "name": "Ma /+13", "voice": ["00", "04", "07", "1A"] }, { "name": "Ma /+6", "voice": ["00", "04", "07", "0A"] }, { "name": "Ma /11", "voice": ["00", "04", "07", "15"] }, { "name": "Ma /-13", "voice": ["00", "04", "07", "18"] }, { "name": "Ma /2/11", "voice": ["00", "02", "04", "07", "15"] }, { "name": "Ma /2/4", "voice": ["00", "02", "04", "05", "07"] }, { "name": "Ma /2", "voice": ["00", "02", "04", "07"] }, { "name": "Ma /4", "voice": ["00", "04", "05", "07"] }, { "name": "Ma /-6", "voice": ["00", "04", "07", "08"] }, { "name": "Ma /9/11", "voice": ["00", "04", "07", "12", "15"] }, { "name": "Ma /9/4", "voice": ["00", "04", "05", "07", "12"] }, { "name": "Ma /9/4", "voice": ["00", "04", "07", "12"] }, { "name": "Ma /9", "voice": ["00", "04", "07", "12"] }, { "name": "Ma", "voice": ["00", "04", "07"] }, { "name": "Ma +6+4", "voice": ["00", "04", "06", "07", "0A"] }, { "name": "Ma 11 c", "voice": ["00", "02", "04", "05", "07", "0A"] }, { "name": "Ma 11", "voice": ["00", "04", "07", "0B", "12", "15"] }, { "name": "Ma 11 pc", "voice": ["00", "02", "04", "05", "07", "0B"] }, { "name": "Ma 11+5 c", "voice": ["00", "02", "04", "05", "08", "0B"] }, { "name": "Ma 11+5", "voice": ["00", "04", "08", "0B", "12", "15"] }, { "name": "Ma 11+5+9 c", "voice": ["00", "03", "04", "05", "08", "0B"] }, { "name": "Ma 11+5+9", "voice": ["00", "04", "08", "0B", "13", "15"] }, { "name": "Ma 11+5-9 c", "voice": ["00", "01", "04", "05", "08", "0B"] }, { "name": "Ma 11+5-9", "voice": ["00", "04", "08", "0B", "11", "15"] }, { "name": "Ma 11+9 c", "voice": ["00", "03", "04", "05", "07", "0A"] }, { "name": "Ma 11+9 pc", "voice": ["00", "03", "04", "05", "07", "0B"] }, { "name": "Ma 11+9", "voice": ["00", "04", "07", "0B", "13", "15"] }, { "name": "Ma 11-5 c", "voice": ["00", "02", "04", "05", "06", "0B"] }, { "name": "Ma 11-5", "voice": ["00", "04", "06", "0B", "12", "15"] }, { "name": "Ma 11-5-9 c", "voice": ["00", "01", "04", "05", "06", "0B"] }, { "name": "Ma 11-5-9/-6", "voice": ["00", "04", "06", "08", "0B", "11", "15"] }, { "name": "Ma 11-5-9", "voice": ["00", "04", "06", "0B", "11", "15"] }, { "name": "Ma 11-5-9-13 c", "voice": ["00", "01", "04", "05", "06", "08", "0B"] }, { "name": "Ma 11-5-9-13", "voice": ["00", "04", "06", "0B", "11", "15", "18"] }, { "name": "Ma 11-9 c", "voice": ["00", "01", "04", "05", "07", "0A"] }, { "name": "Ma 11-9 pc", "voice": ["00", "01", "04", "05", "07", "0B"] }, { "name": "Ma 11-9", "voice": ["00", "04", "07", "0B", "11", "15"] }, { "name": "Ma 13 c", "voice": ["00", "02", "04", "05", "07", "09", "0B"] }, { "name": "Ma 13", "voice": ["00", "04", "07", "0B", "12", "15", "19"] }, { "name": "Ma 13 pc", "voice": ["00", "02", "04", "05", "07", "09", "0B"] }, { "name": "Ma 13+11 c", "voice": ["00", "02", "04", "06", "07", "09", "0B"] }, { "name": "Ma 13+11", "voice": ["00", "04", "07", "0B", "12", "16", "19"] }, { "name": "Ma 13+11 pc", "voice": ["00", "02", "04", "06", "07", "09", "0A"] }, { "name": "Ma 13+5 c", "voice": ["00", "02", "03", "05", "08", "09", "0B"] }, { "name": "Ma 13+5", "voice": ["00", "03", "08", "0B", "12", "15", "19"] }, { "name": "Ma 13-5 c", "voice": ["00", "02", "04", "05", "06", "09", "0B"] }, { "name": "Ma 13-5", "voice": ["00", "04", "06", "0B", "12", "15", "19"] }, { "name": "Ma 5/11", "voice": ["00", "07", "15"] }, { "name": "Ma 5/9", "voice": ["00", "07", "12"] }, { "name": "Ma -5", "voice": ["00", "04", "06"] }, { "name": "Ma 5", "voice": ["00", "07"] }, { "name": "Ma 5", "voice": ["00", "17"] }, { "name": "Ma 6 sus4", "voice": ["00", "05", "07", "09"] }, { "name": "Ma 6/11", "voice": ["00", "04", "07", "09", "15"] }, { "name": "Ma 6/2", "voice": ["00", "02", "04", "07", "09"] }, { "name": "Ma 6/4", "voice": ["00", "04", "05", "07", "09"] }, { "name": "Ma 6/9", "voice": ["00", "04", "07", "09", "12"] }, { "name": "Ma 6/9 sus4", "voice": ["00", "05", "07", "09", "12"] }, { "name": "Ma 6/9 sus4 c", "voice": ["00", "02", "05", "07", "09"] }, { "name": "Ma 6/9-5 c", "voice": ["00", "02", "04", "06", "09"] }, { "name": "Ma 6/9-5", "voice": ["00", "04", "06", "09", "12"] }, { "name": "Ma 6", "voice": ["00", "04", "07", "09"] }, { "name": "Ma 6-5", "voice": ["00", "04", "06", "09"] }, { "name": "Ma 7 -5/-2", "voice": ["00", "01", "04", "06", "0B"] }, { "name": "Ma 7/+11", "voice": ["00", "04", "07", "0B", "16"] }, { "name": "Ma 7/+2", "voice": ["00", "03", "04", "07", "0B"] }, { "name": "Ma 7/+4", "voice": ["00", "04", "06", "07", "0B"] }, { "name": "Ma 7/11", "voice": ["00", "04", "07", "0B", "15"] }, { "name": "Ma 7/13", "voice": ["00", "04", "07", "0B", "19"] }, { "name": "Ma 7/4", "voice": ["00", "04", "05", "07", "0B"] }, { "name": "Ma 7/6", "voice": ["00", "04", "07", "09", "0B"] }, { "name": "Ma 7", "voice": ["00", "04", "07", "0B"] }, { "name": "Ma 7+5/+2", "voice": ["00", "03", "04", "08", "0B"] }, { "name": "Ma 7+5/-2", "voice": ["00", "01", "04", "08", "0B"] }, { "name": "Ma 7+5", "voice": ["00", "04", "08", "0B"] }, { "name": "Ma 7+5+9", "voice": ["00", "04", "08", "0B", "13"] }, { "name": "Ma 7+5-9", "voice": ["00", "04", "08", "0B", "11"] }, { "name": "Ma 7+9", "voice": ["00", "04", "07", "0B", "13"] }, { "name": "Ma 7-5/+2", "voice": ["00", "03", "04", "06", "0B"] }, { "name": "Ma 7-5", "voice": ["00", "04", "06", "0B"] }, { "name": "Ma 7-5+5", "voice": ["00", "04", "06", "08", "0B"] }, { "name": "Ma 7-5+9", "voice": ["00", "04", "06", "0B", "13"] }, { "name": "Ma 7-5-9", "voice": ["00", "04", "06", "0B", "11"] }, { "name": "Ma 7-9 c", "voice": ["00", "01", "04", "07", "0A"] }, { "name": "Ma 7-9", "voice": ["00", "04", "07", "0B", "11"] }, { "name": "Ma 7-9 pc", "voice": ["00", "01", "04", "07", "0B"] }, { "name": "Ma 7sus4", "voice": ["00", "05", "07", "0B"] }, { "name": "Ma 9 /+4", "voice": ["00", "04", "06", "07", "0B", "12"] }, { "name": "Ma 9 c", "voice": ["00", "02", "04", "07", "0A"] }, { "name": "Ma 9/-6", "voice": ["00", "04", "07", "08", "0B", "12"] }, { "name": "Ma 9 pc", voice: ["00", "02", "04", "07", "0B"] }, { "name": "Ma 9", "voice": ["00", "04", "07", "0B", "12"] }, { "name": "Ma 9+11 c", "voice": ["00", "02", "04", "06", "07", "0A"] }, { "name": "Ma 9+11 pc", "voice": ["00", "02", "04", "06", "07", "0B"] }, { "name": "Ma 9+11", "voice": ["00", "04", "07", "0B", "12", "16"] }, { "name": "Ma 9+5 c", "voice": ["00", "02", "04", "08", "0B"] }, { "name": "Ma 9+5/+4 c", "voice": ["00", "02", "04", "06", "08", "0B"] }, { "name": "Ma 9+5/+4", "voice": ["00", "04", "06", "08", "0B", "12"] }, { "name": "Ma 9+5", "voice": ["00", "04", "08", "0B", "12"] }, { "name": "Ma 9+5+11", "voice": ["00", "04", "08", "0B", "12", "16"] }, { "name": "Ma 9-13 c", "voice": ["00", "02", "04", "07", "08", "0A"] }, { "name": "Ma 9-13 pc", "voice": ["00", "02", "04", "07", "08", "0B"] }, { "name": "Ma 9-13", "voice": ["00", "04", "07", "0B", "12", "18"] }, { "name": "Ma 9-5 c", "voice": ["00", "02", "04", "06", "0B"] }, { "name": "Ma 9-5", "voice": ["00", "04", "06", "0B", "12"] }, { "name": "Ma 9-5+5 c", "voice": ["00", "02", "04", "06", "08", "0B"] }, { "name": "Ma 9-5+5", "voice": ["00", "04", "06", "08", "0B", "12"] }, { "name": "Ma 9sus4 c", "voice": ["00", "02", "05", "07", "0B"] }, { "name": "Ma 9sus4", "voice": ["00", "05", "07", "0B", "12"] }, { "name": "Ma sus4/9", "voice": ["00", "05", "07", "12"] }, { "name": "Ma sus4", "voice": ["00", "05", "07"] }, { "name": "mi /11", "voice": ["00", "03", "07", "15"] }, { "name": "mi /2", "voice": ["00", "02", "03", "07"] }, { "name": "mi /4", "voice": ["00", "03", "05", "07"] }, { "name": "mi /9", "voice": ["00", "03", "07", "12"] }, { "name": "mi", "voice": ["00", "03", "07"] }, { "name": "mi 11 c", "voice": ["00", "02", "03", "05", "07", "0A"] }, { "name": "mi 11/-6", "voice": ["00", "03", "07", "08", "0A", "12", "15"] }, { "name": "mi 11/6", "voice": ["00", "03", "07", "09", "0A", "12", "15"] }, { "name": "mi 11", "voice": ["00", "03", "07", "0A", "12", "15"] }, { "name": "mi 11+5 c", "voice": ["00", "02", "03", "05", "08", "0A"] }, { "name": "mi 11+5", "voice": ["00", "03", "08", "0A", "12", "15"] }, { "name": "mi 11-13 c", "voice": ["00", "02", "03", "05", "07", "08", "0A"] }, { "name": "mi 11-13", "voice": ["00", "03", "07", "0A", "12", "15", "18"] }, { "name": "mi 11-5 c", "voice": ["00", "02", "03", "05", "06", "0A"] }, { "name": "mi 11-5", "voice": ["00", "03", "06", "0A", "12", "15"] }, { "name": "mi 11-5+5 c", "voice": ["00", "02", "03", "05", "06", "08", "0A"] }, { "name": "mi 11-5+5", "voice": ["00", "03", "06", "08", "0A", "12", "15"] }, { "name": "mi 11-5-13 c", "voice": ["00", "02", "03", "05", "06", "08", "0A"] }, { "name": "mi 11-5-13", "voice": ["00", "03", "06", "0A", "12", "15", "18"] }, { "name": "mi 11-5-9-13 c", "voice": ["00", "01", "03", "05", "06", "08", "0A"] }, { "name": "mi 11-5-9-13", "voice": ["00", "03", "06", "0A", "11", "15", "18"] }, { "name": "mi 11-9", "voice": ["00", "03", "07", "0A", "11", "15"] }, { "name": "mi 13 c", "voice": ["00", "02", "03", "05", "07", "09", "0A"] }, { "name": "mi 13", "voice": ["00", "03", "07", "0A", "12", "15", "19"] }, { "name": "mi 13+5+11 c", "voice": ["00", "02", "03", "06", "08", "09", "0A"] }, { "name": "mi 13+5+11", "voice": ["00", "03", "08", "0A", "12", "16", "19"] }, { "name": "mi 13-5 c", "voice": ["00", "02", "03", "05", "06", "09", "0A"] }, { "name": "mi 13-5", "voice": ["00", "03", "06", "0A", "12", "15", "19"] }, { "name": "mi 13-9 c", "voice": ["00", "01", "03", "05", "07", "09", "0A"] }, { "name": "mi 13-9", "voice": ["00", "03", "07", "0A", "11", "15", "19"] }, { "name": "mi -5", "voice": ["00", "03", "06"] }, { "name": "mi 6/11", "voice": ["00", "03", "07", "09", "15"] }, { "name": "mi 6/2", "voice": ["00", "02", "03", "07", "09"] }, { "name": "mi 6/4", "voice": ["00", "03", "05", "07", "09"] }, { "name": "mi 6/9", "voice": ["00", "03", "07", "09", "12"] }, { "name": "mi 6", "voice": ["00", "03", "07", "09"] }, { "name": "mi 6-5", "voice": ["00", "03", "06", "09"] }, { "name": "mi 7/11/-2", "voice": ["00", "01", "03", "07", "0A", "15"] }, { "name": "mi 7/11", "voice": ["00", "03", "07", "0A", "15"] }, { "name": "mi 7/13", "voice": ["00", "03", "07", "0A", "19"] }, { "name": "mi 7/2", "voice": ["00", "02", "03", "07", "0A"] }, { "name": "mi 7/4/-2", "voice": ["00", "01", "03", "05", "07", "0A"] }, { "name": "mi 7/4/-9", "voice": ["00", "03", "05", "07", "0A", "11"] }, { "name": "mi 7/4", "voice": ["00", "03", "05", "07", "0A"] }, { "name": "mi 7/6", "voice": ["00", "03", "07", "09", "0A"] }, { "name": "mi 7", "voice": ["00", "03", "07", "0A"] }, { "name": "mi 7+5", "voice": ["00", "03", "08", "0A"] }, { "name": "mi 7-5/-13 c", "voice": ["00", "03", "06", "08", "0A"] }, { "name": "mi 7-5/-13", "voice": ["00", "03", "06", "0A", "18"] }, { "name": "mi 7-5", "voice": ["00", "03", "06", "0A"] }, { "name": "mi 7-9 c", "voice": ["00", "01", "03", "07", "0A"] }, { "name": "mi 7-9", "voice": ["00", "03", "07", "0A", "11"] }, { "name": "mi 9/4", "voice": ["00", "03", "05", "07", "0A", "12"] }, { "name": "mi 9", "voice": ["00", "03", "07", "0A", "12"] }, { "name": "mi 9+5 c", "voice": ["00", "02", "03", "08", "0A"] }, { "name": "mi 9+5", "voice": ["00", "03", "08", "0A", "12"] }, { "name": "mi 9-5 c", "voice": ["00", "02", "03", "06", "0A"] }, { "name": "mi 9-5/-13 c", "voice": ["00", "02", "03", "06", "08", "0A"] }, { "name": "mi 9-5/-13", "voice": ["00", "03", "06", "0A", "12", "18"] }, { "name": "mi 9-5", "voice": ["00", "03", "06", "0A", "12"] }, { "name": "mi 9-5+5 c", "voice": ["00", "02", "03", "06", "08", "0A"] }, { "name": "mi 9-5+5", "voice": ["00", "03", "06", "08", "0A", "12"] }, { "name": "mi M11 c", "voice": ["00", "02", "03", "05", "07", "0B"] }, { "name": "mi M11", "voice": ["00", "03", "07", "0B", "12", "15"] }, { "name": "mi M11-5-9 c", "voice": ["00", "01", "03", "05", "06", "0B"] }, { "name": "mi M11-5-9", "voice": ["00", "03", "06", "0B", "11", "15"] }, { "name": "mi M13 c", "voice": ["00", "02", "03", "05", "07", "09", "0B"] }, { "name": "mi M13", "voice": ["00", "03", "07", "0B", "12", "15", "19"] }, { "name": "mi M7", "voice": ["00", "03", "07", "0B"] }, { "name": "mi M7-5-9 c", "voice": ["00", "01", "03", "06", "0B"] }, { "name": "mi M7-5-9", "voice": ["00", "03", "06", "0B", "11"] }, { "name": "mi M9 c", "voice": ["00", "02", "03", "07", "0B"] }, { "name": "mi M9", "voice": ["00", "03", "07", "0B", "12"] }, { "name": "mystic", "voice": ["00", "04", "06", "09", "0A", "12"] }, { "name": "mysticC", "voice": ["00", "02", "04", "06", "09", "0A"] }, { "name": "ø 7", "voice": ["00", "03", "06", "0A"] }, { "name": "Q 3", "voice": ["00", "05", "0A"] }, { "name": "Q 4 c", "voice": ["00", "03", "05", "0A"] }, { "name": "Q 4", "voice": ["00", "05", "0A", "03"] }, { "name": "Q 4", "voice": ["00", "05", "0A", "13"] }, { "name": "Q 5 c", "voice": ["00", "03", "05", "08", "0A"] }, { "name": "Q 5", "voice": ["00", "05", "0A", "13", "18"] }, { "name": "Q 5", "voice": ["00", "05", "0A", "13", "18"] }, { "name": "s 2", "voice": ["00", "02", "07"] }, { "name": "s M7-5", "voice": ["00", "02", "05", "06", "0B"] }, { "name": "sus2/sus4", "voice": ["00", "02", "05", "07"] }]
    }
})﻿describe("MEPH/audio/sbsms/TrackPoint.spec.js", 'MEPH.audio.sbsms.TrackPoint', function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create an TrackPoint', function () {
        var slice = {};
        var peak = [].interpolate(0, 10);
        var gx = [].interpolate(0, 10, function () {
            return [].interpolate(0, 10), [].interpolate(0, 10);
        });;
        var mag = [].interpolate(0, 10)
        var mag2 = [].interpolate(0, 10);
        var k = 3;
        var N = 4;
        var band = 0;
        var audio = new MEPH.audio.sbsms.TrackPoint(slice, peak, gx, mag, mag2, k, N, band);

        expect(audio).toBeTruthy();
    });

});﻿MEPH.define('MEPH.audio.music.theory.Scales', {
    alias: 'theory_scales',
    alternateNames: ['TheoryScales'],
    requires: ['MEPH.audio.music.theory.data.Voices'],
    scripts: ['MEPH.audio.music.theory.data.ChordData'],

    statics: {
        init: function () {
            var Scales = MEPH.audio.music.theory.Scales;
            if (Scales.completedScales) {
                return Scales.completedScales;
            }
            var voices = Scales.getVoices();
            var invertedVoices = Scales.invertVoices(voices);
            Scales.completedScales = Scales.complete(invertedVoices);
            return Scales.completedScales;
        },
        getScales: function () {
            var res = [];
            for (var i in TheoryScales.scales) {
                if (TheoryScales.scales.hasOwnProperty(i)) {
                    TheoryScales.scales[i].id = TheoryScales.scales[i].id || MEPH.GUID();
                    res.push(TheoryScales.scales[i])
                }
            }
            return res;
        },
        getNotesInScale: function (id, from, to) {
            var scale = TheoryScales.getScale(id);
            
            var re = [].interpolate(from, to, function (x) {
                var note = (x - from) % 12;
                var res = scale.base12.first(function (t) { return t === note; });
                if (res !== null) {
                    return x;
                }
                return -1;
            }).where(function (x) { return x !== -1; });
            return re;
        },
        getScale: function (id) {
            var scales = TheoryScales.getScales();
            return scales.first(function (x) { return x.id === id; });
        },
        getChordData: function () {
            var template = MEPH.getTemplate('MEPH.audio.music.theory.data.ChordData').template;
            return JSON.parse(template);
        },
        getVoices: function () {
            return MEPH.audio.music.theory.data.Voices.voiceList;
        },
        createScaleArray: function (scale, shift, mod) {
            var result = [];
            for (var i = 0  ; i < scale.length; i++) {
                result.push((scale[i] + shift) % mod);
            }
            return result;
        },
        getScaleById: function (id) {
            var Scales = MEPH.audio.music.theory.Scales
            bosslist = Scales.bossList();
            for (var i in bosslist) {
                var res = bosslist[i].first(function (x) { return x.id === id; });
                if (res) return res;
            }
            return null;
        },
        bossList: function () {
            var bosslist = {},
                scaleid = 0,
                Scales = MEPH.audio.music.theory.Scales,
                master_scale_list = Scales.scales;
            if (Scales.cachedBossList) {
                return Scales.cachedBossList;
            }
            for (var j in master_scale_list) {
                bosslist[j] = [];
                for (var i = 0 ; i < 12; i++) {
                    var newscale = Scales.createScaleArray(master_scale_list[j].base12, i, 12);
                    bosslist[j].push({
                        id: scaleid++,
                        name: j + " " + i,
                        root: (12 - i % 12) == 12 ? 0 : (12 - i % 12),
                        scale: newscale,
                        base12: master_scale_list[j].base12,
                        base7: master_scale_list[j].base7,
                        official: master_scale_list[j].name
                    });
                }
            }
            Scales.cachedBossList = bosslist;
            return bosslist;
        },
        invertVoices: function (voices) {
            var voiceswithinversions = [];
            for (var i = 0 ; i < voices.length; i++) {
                for (var j = 0 ; j < voices[i].voice.length; j++) {
                    var inversionversion = voices[i].voice.chordInversion(j);
                    inversionversion = inversionversion.parseInt(12)
                    var iv = inversionversion.chordNormalize(12);
                    voiceswithinversions.push({
                        _familyname: voices[i].name,
                        scales: [],
                        name: voices[i].name,
                        inversion: j,
                        voice: iv,
                        isInversion: j != 0
                    });
                }
            }
            return voiceswithinversions
        },
        complete: function (voiceswithinversions) {

            var Scales = MEPH.audio.music.theory.Scales,
                bosslist = Scales.bossList();
            for (var i in bosslist) {
                for (var j = 0 ; j < bosslist[i].length ; j++) {
                    for (var k = 0 ; k < voiceswithinversions.length ; k++) {
                        if (voiceswithinversions[k].voice.isVoiceInScale(bosslist[i][j].scale)) {
                            voiceswithinversions[k].scales.push(bosslist[i][j].id);
                        }
                    }
                }
            }
            return voiceswithinversions;
        },

        scales: {
            majorscale: {
                base12: "024579B".parseAndSlice(),
                base7: "1 2 3 4 5 6 7", name: "Major Scale"
            },
            melodicminorscale: { base12: "023579B".parseAndSlice(), base7: "1 2 -3 4 5 6 7", name: "Melodic Minor" },
            harmonicminor: { base12: "023578B".parseAndSlice(), base7: "1 2 -3 4 5 -6 7", name: "Harmonic Minor" },
            harmonicmajor: { base12: "024578B".parseAndSlice(), base7: "1 2 3 4 5 -6 7", name: "Harmonic Major" },
            lois: { base12: "0236789".parseAndSlice(), base7: "1 2 -3 +4 5 -6 --7", name: "Lois" },
            spanishgypsy: { base12: "014579B".parseAndSlice(), base7: "1 -2 3 4 5 6 7", name: "Spanish Gypsy" },
            byzantine: { base12: "014578B".parseAndSlice(), base7: "1 -2 3 4 5 -6 7", name: "Byzantine" },
            hungarianmajor: { base12: "034679A".parseAndSlice(), base7: "1 +2 3 +4 5 6 -7", name: "Hungarian Major" },
            melaratrangi: { base12: "012578A".parseAndSlice(), base7: "1 -2 --3 4 5 -6 -7", name: "Mela Ratrangi" },
            melaganamurti: { base12: "012578B".parseAndSlice(), base7: "1 -2 --3 4 5 -6 7", name: "Mela Ganamurti" },
            melavanaspati: { base12: "012579A".parseAndSlice(), base7: "1 -2 --3 4 5 6 -7", name: "Mela Vanaspati" },
            melayagapraya: { base12: "0345789".parseAndSlice(), base7: "1 +2 3 4 5 -6 --7", name: "Mela Yagapraya" },
            melaragavardhani: { base12: "034578A".parseAndSlice(), base7: "1 +2 3 4 5 -6 -7", name: "Mela Ragavardhani" },
            melagangeyabhusani: { base12: "034578B".parseAndSlice(), base7: "1 +2 3 4 5 -6 7", name: "Mela Gangeyabhusani" },
            melavagedhisvari: { base12: "034579A".parseAndSlice(), base7: "1 +2 3 4 5 6 -7", name: "Mela Vagedhisvari" },
            melasulini: { base12: "034579B".parseAndSlice(), base7: "1 +2 3 4 5 6 7", name: "Mela Sulini" },
            melachalenata: { base12: "03457AB".parseAndSlice(), base7: "1 +2 3 4 5 +6 7", name: "Mela Chalenata" },
            melasucharitra: { base12: "0346789".parseAndSlice(), base7: "1 +2 3 +4 5 -6 --7", name: "Mela Sucharitra" },
            melajyotisvarupini: { base12: "034678A".parseAndSlice(), base7: "1 +2 3 +4 5 -6 -7", name: "Mela Jyotisvarupini" },
            meladhatuvardhani: { base12: "034678B".parseAndSlice(), base7: "1 +2 3 +4 5 -6 7", name: "Mela Dhatuvardhani" },
            melakanakangi: { base12: "0125789".parseAndSlice(), base7: "1 -2 --3 4 5 -6 --7", name: "Mela Kanakangi" },
            leadingwholetone: { base12: "02468AB".parseAndSlice(), base7: "1 2 3 +4 +5 +6 7", name: "Leading Whole Tone" },
            melamanavati: { base12: "0245789".parseAndSlice(), base7: "1 2 3 4 5 -6 --7", name: "Mela Manavati" },
            blues: { base12: "034567A".parseAndSlice(), base7: "1 -3 3 4 +4 5 -7", name: "Blues" },
            dimmhed7note: { base12: "023569B".parseAndSlice(), base7: "1 2 -3 4 -5 6 7", name: "Dimhed 7 Note" },
            majorpentatonic: { base12: "02479".parseAndSlice(), base7: "1 2 3 5 6", name: "Major Pentatonic Scale" },
            hemitonicpentatonic: { base12: "0459B".parseAndSlice(), base7: "1 3 4 6 7", name: "Hemitonic pentatonic scale" },
            donminant8note: { base12: "0134679A".parseAndSlice(), base7: "1 -2 -3 3 +4 5 6 -7", name: "Dominant 8 note scale" },
            diminished8note: { base12: "0235689B".parseAndSlice(), base7: "1 2 -3 4 +4 +5 6 7", name: "Diminished 8 note scale" },
            wholescale: { base12: "02468A".parseAndSlice(), base7: "1 2 3 +4 +5 +6", name: "Whole scale" },
            majorbebop: { base12: "0245789B".parseAndSlice(), base7: "1 2 3 4 5 +5 6 7", name: "Major bebop scale " },
            dominantbebop: { base12: "024579AB".parseAndSlice(), base7: "1 2 3 4 5 6  -7 7", name: "Dominant bebop scale " },
            augmented: { base12: "03478B".parseAndSlice(), base7: "1 2 3 +4 +5 +6", name: "Augmented scale " },
            prometheus: { base12: "02469A".parseAndSlice(), name: "Prometheus scale", base7: "1 2 3 +4 6 -7" },
            tritone: { base12: "01467A".parseAndSlice(), name: "Tritone scale", base7: "1 -2 3 -5 5 -7" },
            twosemitritone: { base12: "012678".parseAndSlice(), name: "two-semitone tritone scale ", base7: "1 -2 2 +4 5 -6" }
        }
    }
})﻿describe("MEPH/audio/music/theory/Scales.spec.js", 'MEPH.audio.music.theory.Scales', function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create an scales', function () {
        var audio = new MEPH.audio.music.theory.Scales();

        expect(audio).toBeTruthy();
    });

    it('has majorscale static property', function () {
        var audio = MEPH.audio.music.theory.Scales.scales.majorscale;

        expect(audio).toBeTruthy();
    });

    it('can get the chorddata', function () {
        var data = MEPH.audio.music.theory.Scales.getChordData();
        expect(data).toBeTruthy();
    })

    it('can get the voices', function () {
        var data = MEPH.audio.music.theory.Scales.getVoices();
        expect(data).toBeTruthy();
    })

    it('can create a bosslist', function () {
        var data = MEPH.audio.music.theory.Scales.bossList();

        expect(data).toBeTruthy();
    })

    it('can init scales', function () {
        var data = MEPH.audio.music.theory.Scales.init();

        expect(data).toBeTruthy();
    })

    it('can get scale by id ', function () {
        var data = MEPH.audio.music.theory.Scales.init();
        var scale = MEPH.audio.music.theory.Scales.getScaleById(384);
        expect(scale.name).toBe("augmented 0");
    });

    it('can get a list of scales ', function () {
        var scales = TheoryScales.getScales();

        expect(scales).toBeTruthy();
        expect(scales.length > 10).toBeTruthy();
    });

    it('can get a scale ', function () {
        var scale = TheoryScales.getScales();

        var foundscale = TheoryScales.getScale(scale.first().id);
        expect(foundscale).toBeTruthy();
    });

    it('get notes for scale in range', function () {
        var scale = TheoryScales.getScales();

        var foundscale = TheoryScales.getNotesInScale(scale.first().id, 30, 42);

        expect(foundscale).toBeTruthy();
        expect(foundscale.length).toBe(7);
    })
});﻿describe("MEPH/audio/music/theory/Notes.spec.js", 'MEPH.audio.music.theory.Notes', function () {
    var Notes;
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
        Notes = MEPH.audio.music.theory.Notes;
    });

    it('can create an nodes', function () {
        var audio = new MEPH.audio.music.theory.Notes();

        expect(audio).toBeTruthy();
    });

    it('can create an createScaleLib', function () {
        var lib = new MEPH.audio.music.theory.Notes.createScaleLib();

        expect(lib).toBeTruthy();
        expect(lib.length).toBeTruthy();
    });

    it('can get metric ', function () {
        var lib = MEPH.audio.music.theory.Notes.getMetric('+7');

        expect(lib).toBe(12);
    })

    it('has a not library ', function () {
        var lib = MEPH.audio.music.theory.Notes.library;

        expect(lib).toBeTruthy();
    });
    it('can get key', function () {

        var key = Notes.getKey(10, Notes.sharp);
        expect(key).toBe('A' + Notes.sharp);
    });

    it('has signature points ', function () {
        var sig = Notes.signaturePoints;
        expect(sig).toBeTruthy();
    });

    it('can translate a Ab4 to a midi number', function () {
        var midinote = Notes.convertToMidi('Ab4');

        expect(midinote).toBe(56);
    })

    it('can conver midi to a note ', function () {
        var res = Notes.convertToNote(60);
        expect(res).toBe('C/5');
    })

    it('can create an array of midi notes ', function () {
        var result = Notes.midiNotes(39, [1, 3, 5, 7]);
        expect(result[3]).toBe(46)
    });
});﻿MEPH.define('MEPH.audio.music.theory.Notes', {
    statics: {
        metricscale: {
            '1': 0,
            '2': 2,
            '3': 4,
            '4': 5,
            '5': 7,
            '6': 9,
            '7': 11
        },

        generateSignaturePoints: function () {
            var signaturePoints = {}, Notes = MEPH.audio.music.theory.Notes,
                sharp = Notes.sharp, flat = Notes.flat;
            for (var i = 0 ; i < 11 ; i++) {
                var key = Notes.getKey((Notes.library["C"] + i * 7) % 12, sharp);
                if (signaturePoints[key] == undefined) {
                    signaturePoints[key] = { sharps: i };
                }
                else {
                    signaturePoints[key].sharps = i;
                }
                var temp = (Notes.library["C"] - i * 7) % 12;
                if (temp < 0) {
                    temp += 12;
                }
                key = Notes.getKey(temp, flat);
                if (signaturePoints[key] == undefined) {
                    signaturePoints[key] = { flats: i };
                }
                else {
                    signaturePoints[key].flats = i;
                }

            }
            return signaturePoints;
        },
        createScaleLib: function () {
            var scalelib = [];
            var _temp = "BCDEFGA".split("");
            for (var j = 0 ; j < 10; j++)
                for (var i = 0 ; i < _temp.length; i++) {
                    scalelib.push(_temp[i]);
                }
            return scalelib;
        },
        convertToNote: function (note) {
            var key = note % 12,
                foundkey;
            var Notes = MEPH.audio.music.theory.Notes;
            for (var i in Notes.library) {
                if (Notes.library[i] === key) {
                    foundkey = i;
                    break;
                }
            }
            return foundkey + '/' + Math.floor(note / 12)
        },
        convertToMidi: function (note) {
            var Notes = MEPH.audio.music.theory.Notes;
            var res = note.split('').where(function (x) { return isNaN(x); }).join('');
            var key = Notes.library[(res.split('')[0] + (res.split('')[1] === 'b' ? Notes.flat : ''))];

            var octave = parseInt(note.split('').where(function (x) { return !isNaN(x); }).first());
            return octave * 12 + key;
        },
        /**
         * Gets the key
         **/
        getKey: function (value, accidental) {
            var Notes = MEPH.audio.music.theory.Notes;
            for (var i in Notes.library) {
                if (Notes.library[i] == value) {
                    if (i.indexOf(Notes.flat) == -1 && i.indexOf(Notes.sharp) == -1) {
                        return i;
                    }
                    else if (i.indexOf(Notes.sharp) != -1 && accidental == Notes.sharp) {
                        return i;
                    }
                    else if (i.indexOf(Notes.flat) != -1 && accidental == Notes.flat) {
                        return i;
                    }


                }
            }
        },
        getMetric: function (normal) {
            var Notes = MEPH.audio.music.theory.Notes;
            var values = normal.split("");
            var key = null;
            var addition = 0;
            for (var i = 0; i < values.length; i++) {
                if (values[i] == "-") {
                    addition--;
                }
                else if (values[i] == "+") {
                    addition++;
                }
                else {
                    key = parseInt(Notes.metricscale[values[i]]);
                }
            }
            if (key == null) {
                throw 'key not found';
            }
            return key + addition;
        },
        midiNotes: function (bias, steps) {
            return steps.select(function (x) {
                return bias + parseInt(x, 12);
            });
        },
        getOptions: function (note) {
            var Notes = MEPH.audio.music.theory.Notes;
            var results = [];
            for (var i in Notes.library) {
                if (Notes.library[i] == Notes.library[note]) {
                    results.push(i);
                }
            }
            return results;
        },
        fitNotesTo: function (notes, notes2) {
            var results = [],
                Notes = MEPH.audio.music.theory.Notes,
                sharp = Notes.sharp,
                flat = Notes.flat;
            for (var i = 0; i < notes.length; i++) {
                if (notes[i].indexOf(sharp) != -1 || notes[i].indexOf(flat) != -1) {
                    if (notes2.indexOf(notes[i]) == -1) {
                        var options = Notes.getOptions(notes[i]);
                        var added = false;
                        for (var j = options.length; j--;) {
                            if (notes2.indexOf(options[j]) != -1) {
                                results.push(options[j]);
                                added = true;
                                break;
                            }
                        }
                        if (!added) {
                            results.push(notes[i]);
                        }
                    }
                    else {

                        results.push(notes[i]);
                    }
                }
                else {
                    results.push(notes[i]);
                }
            }
            return results;
        },
        containsType: function (array, info) {
            for (var i = array.length; i--;) {
                if (info.equals(array[i].voice)) {
                    return true;
                }
            }
            return false;
        },
        isAccidentaled: function (val, acid) {
            var v = val.split("");
            var count = 0;
            for (var i = 0 ; i < v.length; i++) {
                if (v[i] === acid) {
                    count++;
                }
            }
            return count;
        },
        findLetter: function (num, bias, base7) {
            var Notes = MEPH.audio.music.theory.Notes;
            var result = null;
            for (var i in Notes.library) {
                if (base7 !== undefined) {
                    var flatness = Notes.isAccidentaled(base7, "-");
                    if (flatness) {
                        bias = Notes.flat;
                    }
                    var sharped = Notes.isAccidentaled(base7, "+");
                    if (sharped) {
                        bias = Notes.sharp;
                    }
                }
                if (Notes.library[i] === num) {

                    if (i.indexOf(bias) !== -1) {
                        result = i;
                    }
                    else if (bias === undefined) {
                        result = i;
                    }
                    if (i.indexOf(Notes.sharp) === -1 && i.indexOf(Notes.flat) === -1) {
                        return i;
                    }
                }
            }
            return result;
        },
        convertTo: function (base, offset) {
            var temp = null;
            if (offset < base) {
                temp = (offset + 12) - base;
            }
            else {
                temp = (offset) - base;
            }
            return temp;
        },
        convertToMelody: function (base, offset) {
            var temp = null;
            if (offset < base) {
                temp = (offset) + base;
            }
            else {
                temp = (offset) + base;
            }
            return temp % 12;
        },
        converttoBase12: function (v) {
            return v.toString(12);
        }
    }
}).then(function () {

    var Notes = MEPH.audio.music.theory.Notes;

    if (!Array.prototype)
        Object.defineProperty(Array.prototype, 'convertToMetric ', {
            enumerable: false,
            writable: true,
            configurable: true,
            value: function () {
                var result = [];
                for (var i = 0; i < this.length; i++) {
                    result.push(Notes.getMetric(this[i]));
                }
                return result;
            }
        });


    function htmlDecode(input) {
        var e = document.createElement('div');
        e.innerHTML = input;
        return e.childNodes[0].nodeValue;
    }

    var flat = htmlDecode('&#x266d;');
    var sharp = htmlDecode('&#x266F;');
    var natural = htmlDecode('&#x266E;');
    Notes.sharp = sharp;
    Notes.flat = flat;
    Notes.natural = natural;
    var library = {};
    library["C"] = 0;
    library["B" + sharp] = 12;
    library["C" + sharp] = 1;
    library["D" + flat] = 1;
    library["D"] = 2;
    library["D" + sharp] = 3;
    library["E" + flat] = 3;
    library["E"] = 4;
    library["F" + flat] = 4;
    library["E" + sharp] = 5;
    library["F"] = 5;
    library["F" + sharp] = 6;
    library["G" + flat] = 6;
    library["G"] = 7;
    library["G" + sharp] = 8;
    library["A" + flat] = 8;
    library["A"] = 9;
    library["A" + sharp] = 10;
    library["B" + flat] = 10;
    library["B"] = 11;
    library["C" + flat] = -1;
    Notes.library = library;

    Notes.signaturePoints = Notes.generateSignaturePoints();


    Array.prototype.appendOctave = function (start, copy, octave_offset) {
        var result = [];
        var scalelib = Notes.createScaleLib();
        var lastfound = 1;
        for (var i = 0; i < this.length; i++) {

            var purenote = copy[i].replace(flat, "").replace(sharp, "").replace("#", "").toUpperCase();

            var scaleoffset = Math.floor(scalelib.indexOf(purenote, lastfound) / 7);
            if (scalelib.indexOf(purenote, lastfound) % 7 == 0 && scaleoffset != 0) {
                scaleoffset--;
            }
            lastfound = scalelib.indexOf(purenote, lastfound)
            if (octave_offset) {

                result[i] = (this[i] + "/" + (start + octave_offset[i])).toLowerCase();
            } else
                result[i] = (this[i] + "/" + (start + scaleoffset)).toLowerCase();
        }
        return result;
    }
    Array.prototype.makeDrawable = function (root, bias, start) {
        var result = [];
        for (var i = 0; i < this.length; i++) {
            result.push(Notes.findLetter(Notes.convertToMelody(Notes.library[root], parseInt(this[i])), bias));
        }
        return result.appendOctave(start, result);
    }
    Array.prototype.toLetterNotes = function (root, bias) {
        var result = [];
        for (var i = 0; i < this.length; i++) {
            result.push(Notes.findLetter(Notes.convertToMelody(Notes.library[root], parseInt(this[i])), bias));
        }
        return result;
    }
    Array.prototype.removeEmpties = function () {
        var result = [];
        for (var i = 0; i < this.length; i++) {
            if (this[i] != null && this[i] != "") {
                result.push(this[i]);
            }
        }
        return result;
    }
});﻿describe("MEPH/audio/music/instrument/SoundFontInstrument.spec.js", 'MEPH.audio.music.instrument.SoundFontInstrument',
    'MEPH.audio.Audio', function () {
        beforeEach(function () {
            jasmine.addMatchers(MEPH.customMatchers);
        });

        it('can create an audio sound font instrument', function () {

            var audio = new MEPH.audio.music.instrument.SoundFontInstrument();

            expect(audio).toBeTruthy();
        });

        it('can set a font file , and load it.', function (done) {
            var audio = new MEPH.audio.music.instrument.SoundFontInstrument();
            audio.setFontFile('MEPH.audio.music.instrument.trumpet.Trumpet');
            audio.ready().then(function () {
                expect(audio.getFontResource()).toBeTruthy();
            }).catch(function (e) {
                expect(e).caught();
            }).then(done);
        });

        it('can parse a font file.', function (done) {
            var audio = new MEPH.audio.music.instrument.SoundFontInstrument();
            audio.setFontFile('MEPH.audio.music.instrument.trumpet.Trumpet');
            audio.ready().then(function () {
                return audio.parse()
            }).then(function (x) {

            }).catch(function (e) {
                expect(e).caught();
            }).then(done);
        });

        it('can get the presets from the soundfontinstrument', function (done) {
            var audio = new MEPH.audio.music.instrument.SoundFontInstrument();
            audio.setFontFile('MEPH.audio.music.instrument.trumpet.Trumpet');
            audio.ready().then(function () {
                return audio.prepare()
            }).then(function (x) {
                var presets = audio.presets();
                expect(presets).toBeTruthy();
                expect(presets.length).toBe(1);
            }).catch(function (e) {
                expect(e).caught();
            }).then(done);
        });

        it('can set the sample rate of the sound font', function () {
            var soundfont = new MEPH.audio.music.instrument.SoundFontInstrument();
            var rate = soundfont.samplerate(2000);
            expect(rate).toBe(2000);
        })
        it('can convert a midi note into  a frequency', function () {
            var soundfont = new MEPH.audio.music.instrument.SoundFontInstrument();
            var frequency = soundfont.noteToFrequency(60);
            expect(frequency).toBeTruthy();

        });

        it('can get _noteSampleDecoder', function (done) {
            var audio = new MEPH.audio.music.instrument.SoundFontInstrument();
            audio.setFontFile('MEPH.audio.music.instrument.trumpet.Trumpet');
            audio.ready().then(function () {
                return audio.prepare()
            }).then(function (x) {
                var notesample = audio.notesample();
                var decoder = audio.decoder(notesample);
                expect(decoder).toBeTruthy();
            }).catch(function (e) {
                expect(e).caught();
            }).then(done);
        });

        it('can extract an arraybuffer', function (done) {
            var audio = new MEPH.audio.music.instrument.SoundFontInstrument();
            audio.setFontFile('MEPH.audio.music.instrument.trumpet.Trumpet');
            audio.ready().then(function () {
                return audio.prepare()
            }).then(function (x) {
                audio.samplerate(4000);
                var bytearray = audio.note(60, 100);

                expect(bytearray).toBeTruthy();

            }).catch(function (e) {
                expect(e).caught();
            }).then(done);
        });

        it('can extract an arraybuffer and play it in the audio ', function (done) {
            var soundfont = new MEPH.audio.music.instrument.SoundFontInstrument();
            var audio = new MEPH.audio.Audio();
            soundfont.setFontFile('MEPH.audio.music.instrument.trumpet.Trumpet');
            soundfont.ready().then(function () {
                return soundfont.prepare()
            }).then(function (x) {

                soundfont.samplerate(44100);

                var bytearray = soundfont.note(54, 100);

                expect(bytearray).toBeTruthy();

                return bytearray;
            }).then(function (resource) {
                var source = audio.createContext().createBufferSource();
                source.buffer = resource;
                var promise = new Promise(function (r) {
                    setTimeout(function () {
                        r();
                    }, 50)
                })
                return promise;
            }).catch(function (e) {
                expect(e).caught();
            }).then(done);
        });


        it('can get the presets from the soundfontinstrument', function (done) {
            var soundfont = new MEPH.audio.music.instrument.SoundFontInstrument();
            var audio = new MEPH.audio.Audio();
            soundfont.setFontFile('MEPH.audio.music.instrument.trumpet.ReedOrgan');
            soundfont.ready().then(function () {
                return soundfont.prepare()
            }).then(function (x) {

                soundfont.samplerate(44100);

                var bytearray = soundfont.note(60, 100, 3);

                expect(bytearray).toBeTruthy();

                return bytearray;
            }).then(function (resource) {
                var source = audio.createContext().createBufferSource();
                source.buffer = resource;
                audio.buffer(source).complete();

                audio.getNodes().first().node.start();
                var promise = new Promise(function (r) {
                    setTimeout(function () {
                        r();
                    }, 5000)
                })
                return promise;
            }).catch(function (e) {
                expect(e).caught();
            }).then(done);
        });

        it('can get the presets from the soundfontinstrument', function (done) {
            var soundfont = new MEPH.audio.music.instrument.SoundFontInstrument();
            var audio = new MEPH.audio.Audio();
            soundfont.setFontFile('MEPH.audio.music.instrument.percussion.TR808');
            soundfont.ready().then(function () {
                return soundfont.prepare()
            }).then(function (x) {

                soundfont.samplerate(44100);

                var bytearray = soundfont.note(60, 100);

                expect(bytearray).toBeTruthy();

                return bytearray;
            }).then(function (resource) {
                var source = audio.createContext().createBufferSource();
                source.buffer = resource;
                audio.buffer(source).complete();

                audio.getNodes().first().node.start();
                var promise = new Promise(function (r) {
                    setTimeout(function () {
                        r();
                    }, 1000)
                })
                return promise;
            }).catch(function (e) {
                expect(e).caught();
            }).then(done);
        });

        it('can get name of notes', function (done) {
            var soundfont = new MEPH.audio.music.instrument.SoundFontInstrument();
            var audio = new MEPH.audio.Audio();
            soundfont.setFontFile('MEPH.audio.music.instrument.percussion.TR808');
            soundfont.ready().then(function () {
                return soundfont.prepare()
            }).then(function (x) {

                soundfont.samplerate(44100);
                var chunks = soundfont.sampleChunks();


                expect(chunks.length).toBeTruthy(135);
            }).catch(function (e) {
                expect(e).caught();
            }).then(done);
        });

        it('can create sound processor node ', function (done) {
            var soundfont = new MEPH.audio.music.instrument.SoundFontInstrument();
            var audio = new MEPH.audio.Audio();
            soundfont.setFontFile('MEPH.audio.music.instrument.trumpet.EnglishHorn');
            soundfont.ready().then(function () {
                return soundfont.prepare()
            }).then(function (x) {

                soundfont.samplerate(44100);

                var process = soundfont.nodeprocessor(63, 100);
                audio.processor({
                    size: 1024,
                    process: process
                }).complete();
                return new Promise(function (r) {
                    setTimeout(function () {
                        audio.disconnect();
                        r();
                    }, 10000);
                });
            }).catch(function (e) {
                expect(e).caught();
            }).then(done);
        });
        it('can create sound processor node with no loop ', function (done) {
            var soundfont = new MEPH.audio.music.instrument.SoundFontInstrument();
            var audio = new MEPH.audio.Audio();
            soundfont.setFontFile('MEPH.audio.music.instrument.trumpet.EnglishHorn');
            soundfont.ready().then(function () {
                return soundfont.prepare()
            }).then(function (x) {

                soundfont.samplerate(44100);

                var process = soundfont.nodeprocessor(63, 100, true);
                audio.processor({
                    size: 1024,
                    process: process
                }).complete();
                return new Promise(function (r) {
                    setTimeout(function () {
                        audio.disconnect();
                        r();
                    }, 2000);
                });
            }).catch(function (e) {
                expect(e).caught();
            }).then(done);
        });
    });﻿/**
 * @class MEPH.audio.music.instrument.piano.Trumpet
 * @extend MEPH.audio.music.instrument.Instrument
 * Defines a base class for instruments.
 **/
MEPH.define('MEPH.audio.music.instrument.trumpet.Trumpet', {
    extend: 'MEPH.audio.music.instrument.Instrument',
    requires: ['MEPH.audio.Sequence',
        'MEPH.graph.Graph',
        'MEPH.audio.music.theory.Notes',
        'MEPH.graph.Node',
        'MEPH.audio.Constants',
        'MEPH.audio.graph.node.AudioBufferSourceNode'],
    createSequence: function () {
        var me = this,
          sequence = new MEPH.audio.Sequence();
        me.resources().foreach(function (x) {
           
        });
        sequence.title = 'Trumpet';
        return sequence;
    },
    getResourcesToLoad: function () {
        var me = this;
        var prefix = 'MEPH.audio.music.instrument.trumpet.Trumpet';
        var files = [{
            file: MEPH.getClassPath(prefix) + '.sf2',
            type: 'audio'
        }];

        return files;
    }
});﻿describe("MEPH/audio/music/instrument/trumpet/Trumpet.spec.js", 'MEPH.audio.music.instrument.trumpet.Trumpet', function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create a trumpet ', function () {
        var audio = new MEPH.audio.music.instrument.trumpet.Trumpet();

        expect(audio).toBeTruthy();
    });
});﻿/**
 * @class MEPH.audio.music.instrument.piano.GrandPiano
 * @extend MEPH.audio.music.instrument.Instrument
 * Defines a base class for instruments.
 **/
MEPH.define('MEPH.audio.music.instrument.piano.GrandPiano', {
    extend: 'MEPH.audio.music.instrument.Instrument',
    requires: ['MEPH.audio.Sequence',
        'MEPH.graph.Graph',
        'MEPH.audio.music.theory.Notes',
        'MEPH.graph.Node',
        'MEPH.audio.Constants',
        'MEPH.audio.graph.node.AudioBufferSourceNode'],
    createSequence: function () {
        var me = this,
            sequence = new MEPH.audio.Sequence();
        me.resources().foreach(function (x) {
            var resource = MEPH.audio.Audio.GetSourceBuffer().first(function (t) {
                return t.file === x.file;
            });
            var keysequence = new MEPH.audio.Sequence();
            var split = resource.file.split('.');
            var name = resource.file;
            var notegraph = me.createPianoNoteGraph(resource.id, name);
            keysequence.setDefaultGraph(notegraph.id);
            keysequence.midiNote(MEPH.audio.music.theory.Notes.convertToMidi(x.key));
            var prefix = 'MEPH.audio.music.instrument.piano.mp3.';
            prefix = MEPH.getClassPath(prefix)
            keysequence.title = name.split(prefix).last().split('.mp3').first();
            sequence.add(keysequence, 0);
        });
        sequence.title = 'Grand Piano';
        return sequence;
    },
    createPianoNoteGraph: function (id, name) {

        var graph = new MEPH.graph.Graph(),
            node,
            audiobuffer = new MEPH.audio.graph.node.AudioBufferSourceNode();
        
        node = new MEPH.graph.Node();
        node.setId(MEPH.GUID());
        audiobuffer.id = MEPH.GUID();
        audiobuffer.setNodeInputDefaultValue('source', id)
        node.appendData(audiobuffer);
        node.data = audiobuffer;
        graph.addNode(node);
        var result = graph.saveGraph();
        result.id = result.id || MEPH.GUID();
        result.name = name;
        audiobuffer.destroy();
        MEPH.publish(MEPH.audio.Constants.AUDIO_GRAPH_SAVED, result);
        return result;
    },
    getResourcesToLoad: function () {
        var me = this;
        var prefix = 'MEPH.audio.music.instrument.piano.mp3.';
        var files = [].interpolate(0, 8, function (x) {
            return {
                file: MEPH.getClassPath(prefix + 'A' + x) + '.mp3',
                key: 'A' + x,
                type: 'mp3'
            }
        }).concat([].interpolate(1, 8, function (x) {
            return {
                file: MEPH.getClassPath(prefix + 'Ab' + x) + '.mp3',
                key: 'Ab' + x,
                type: 'mp3'
            }
        })).concat([].interpolate(0, 8, function (x) {
            return {
                file: MEPH.getClassPath(prefix + 'B' + x) + '.mp3',
                key: 'B' + x, type: 'mp3'
            }
        })).concat([].interpolate(0, 8, function (x) {
            return {
                file: MEPH.getClassPath(prefix + 'Bb' + x) + '.mp3',
                key: 'Bb' + x,
                type: 'mp3'
            }
        })).concat([].interpolate(1, 9, function (x) {
            return {
                file: MEPH.getClassPath(prefix + 'C' + x) + '.mp3',
                key: 'C' + x,
                type: 'mp3'
            }
        })).concat([].interpolate(1, 8, function (x) {
            return {
                file: MEPH.getClassPath(prefix + 'D' + x) + '.mp3',
                key: 'D' + x, type: 'mp3'
            }
        })).concat([].interpolate(1, 9, function (x) {
            return {
                file: MEPH.getClassPath(prefix + 'Db' + x) + '.mp3',
                key: 'Db' + x, type: 'mp3'
            }
        })).concat([].interpolate(1, 8, function (x) {
            return {
                file: MEPH.getClassPath(prefix + 'E' + x) + '.mp3',
                key: 'E' + x, type: 'mp3'
            }
        })).concat([].interpolate(1, 8, function (x) {
            return {
                file: MEPH.getClassPath(prefix + 'Eb' + x) + '.mp3',
                key: 'Eb' + x, type: 'mp3'
            }
        })).concat([].interpolate(1, 8, function (x) {
            return {
                file: MEPH.getClassPath(prefix + 'F' + x) + '.mp3',
                key: 'F' + x, type: 'mp3'
            }
        })).concat([].interpolate(1, 8, function (x) {
            return {
                file: MEPH.getClassPath(prefix + 'G' + x) + '.mp3',
                key: 'G' + x, type: 'mp3'
            }
        })).concat([].interpolate(1, 8, function (x) {
            return {
                key: 'Gb' + x,
                file: MEPH.getClassPath(prefix + 'Gb' + x) + '.mp3',
                type: 'mp3'
            }
        }));

        return files.orderBy(function (x, y) {
            return MEPH.audio.music.theory.Notes.convertToMidi(x.key) -
                        MEPH.audio.music.theory.Notes.convertToMidi(y.key)
        });;
    }
})﻿describe("MEPH/audio/music/instrument/piano/GrandPiano.spec.js", 'MEPH.audio.music.instrument.piano.GrandPiano', function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create an audio instrument', function () {
        var audio = new MEPH.audio.music.instrument.piano.GrandPiano();

        expect(audio).toBeTruthy();
    });

    it('an instrument is ready after it is loaded all the resources', function (done) {
        var audio = new MEPH.audio.music.instrument.piano.GrandPiano();
        audio.ready().then(function (ready) {
            expect(ready).toBeTruthy();
            expect(audio.$audios.length).toBeTruthy();
        }).catch(function (e) {
            expect(e).caught();
        }).then(function () {
            done();
        });
    });

    it('can create a sequence', function (done) {
        var audio = new MEPH.audio.music.instrument.piano.GrandPiano();
        audio.ready().then(function (ready) {
            var sequence = audio.createSequence();
            expect(sequence.items()).toBeTruthy();
            expect(sequence.items().length).toBeTruthy();
            expect(sequence.title === 'Grand Piano').toBeTruthy();
        }).catch(function (e) {
            expect(e).caught();
        }).then(function () {
            done();
        });
    });

});﻿describe("MEPH/audio/music/instrument/Instrument.spec.js", 'MEPH.audio.music.instrument.Instrument', function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create an audio instrument', function () {
        
        var audio = new MEPH.audio.music.instrument.Instrument();

        expect(audio).toBeTruthy();
    });

    it('an instrument is ready after it is loaded all the resources', function (done) {
        var audio = new MEPH.audio.music.instrument.Instrument();
        expect(audio.$audios).toBeTruthy();
        audio.ready().then(function (ready) {
            expect(ready).toBeTruthy();
        }).catch(function (e) {
            expect(e).caught();
        }).then(function () {
            done();
        })
    })
});﻿/**
 * @class MEPH.audio.processor.SoundProcessor 
 **/
MEPH.define('MEPH.audio.processor.SoundProcessor', {
    extend: 'MEPH.audio.processor.FIFOProcessor',
    requires: ['MEPH.audio.processor.RateTransposer', 'MEPH.audio.processor.TDStretch'],
    statics: {
        Process: function (signal) {
            var res;
            var processor = new MEPH.audio.processor.SoundProcessor();
            processor.setup();
            processor.setTempo(1.4);
            var buff_size = processor.standardsize;
            var c = 0;
            var oc = 0;
            var channels = 1;
            var buffSizeSamples = buff_size / channels;
            var outputbuff = new Float32Array(buff_size);
            var output = new Float32Array(signal.length);
            while (c < signal.length) {
                var sampleBuffer = signal.subset(c, c + buff_size);

                var numsamples = sampleBuffer.length / channels;
                processor.putSamples(sampleBuffer, numsamples);

                do {
                    nSamples = processor.receiveSamples(outputbuff, buffSizeSamples);
                    [].interpolate(0, nSamples, function (t) {
                        output[t + oc] = outputbuff[t];

                    });
                    oc += nSamples;
                } while (nSamples != 0);

                c += buff_size;
            }
            return output;
        }
    },
    properties: {
        pRateTransposer: null,
        pTDStretch: null,
        tempo: 0,
        standardsize: 2048
    },
    initialize: function (outputBuffer) {
        var me = this;
        var output = new MEPH.audio.processor.FIFOSampleBuffer(1);


        me.pRateTransposer = new MEPH.audio.processor.RateTransposer(output);
        var samplebuff = new MEPH.audio.processor.FIFOSampleBuffer(1);
        var inputbuffer = new MEPH.audio.processor.FIFOSampleBuffer(1);
        me.pTDStretch = new MEPH.audio.processor.TDStretch(samplebuff, inputbuffer);
        me.setOutPipe(me.pTDStretch);
        me.rate = 0;
        me.tempo = 0;
        me.virtualPitch = 1;
        me.virtualRate = 1;
        me.virtualTempo = 1;
        me.calcEffectiveRateAndTempo();

        me.channels = 0;
        me.bSrateSet = false;

    },
    setup: function () {
        var me = this;
        var sampleRate = 44100;
        var channels = 1;
        me.setSampleRate(sampleRate);
        me.setChannels(channels);

        me.setTempoChange(0);
        me.setPitchSemiTones(0);
        me.setRateChange(0);

        //me.setSetting('SETTING_USE_QUICKSEEK', params->quick);
        // me.setSetting('SETTING_USE_AA_FILTER', 128);

    },
    // Sets the number of channels, 1 = mono, 2 = stereo
    setChannels: function (numChannels) {
        var me = this;
        if (numChannels != 1 && numChannels != 2) {
            throw new Error("Illegal number of channels");
        }
        me.channels = numChannels;
        me.pRateTransposer.setChannels(numChannels);
        me.pTDStretch.setChannels(numChannels);
    },

    // Sets new rate control value. Normal rate = 1.0, smaller values
    // represent slower rate, larger faster rates.
    setRate: function (newRate) {
        var me = this;
        me.virtualRate = newRate;
        me.calcEffectiveRateAndTempo();
    },

    // Sets new rate control value as a difference in percents compared
    // to the original rate (-50 .. +100 %)
    setRateChange: function (newRate) {
        var me = this;
        me.virtualRate = 1.0 + 0.01 * newRate;
        me.calcEffectiveRateAndTempo();
    },


    // Sets new tempo control value. Normal tempo = 1.0, smaller values
    // represent slower tempo, larger faster tempo.
    setTempo: function (newTempo) {
        var me = this;
        me.virtualTempo = newTempo;
        me.calcEffectiveRateAndTempo();
    },




    // Sets new tempo control value as a difference in percents compared
    // to the original tempo (-50 .. +100 %)
    setTempoChange: function (newTempo) {
        var me = this;
        me.virtualTempo = 1.0 + 0.01 * newTempo;
        me.calcEffectiveRateAndTempo();
    },

    // Sets new pitch control value. Original pitch = 1.0, smaller values
    // represent lower pitches, larger values higher pitch.
    setPitch: function (newPitch) {
        var me = this;
        me.virtualPitch = newPitch;
        me.calcEffectiveRateAndTempo();
    },


    // Sets pitch change in octaves compared to the original pitch
    // (-1.00 .. +1.00)
    setPitchOctaves: function (newPitch) {
        var me = this;
        me.virtualPitch = Math.exp(0.69314718056 * newPitch);
        me.calcEffectiveRateAndTempo();
    },

    // Sets pitch change in semi-tones compared to the original pitch
    // (-12 .. +12)
    setPitchSemiTones: function (newPitch) {
        var me = this;
        me.setPitchOctaves(newPitch / 12.0);
    },




    setPitchSemiTones: function (newPitch) {
        var me = this;
        me.setPitchOctaves(newPitch / 12.0);
    },



    // Calculates 'effective' rate and tempo values from the
    // nominal control values.
    calcEffectiveRateAndTempo: function () {
        var me = this;
        var oldTempo = me.tempo;
        var oldRate = me.rate;

        me.tempo = me.virtualTempo / me.virtualPitch;
        me.rate = me.virtualPitch * me.virtualRate;
        var TEST_FLOAT_EQUAL = function (a, b) {
            return (Math.abs(a - b) < 1e-10);
        }
        if (!TEST_FLOAT_EQUAL(me.rate, oldRate)) me.pRateTransposer.setRate(me.rate);
        if (!TEST_FLOAT_EQUAL(me.tempo, oldTempo)) me.pTDStretch.setTempo(me.tempo);

        //#ifndef SOUNDTOUCH_PREVENT_CLICK_AT_RATE_CROSSOVER
        if (me.rate <= 1.0) {
            if (me.output != me.pTDStretch) {
                var tempoOut;

                me.assert(me.output === me.pRateTransposer);
                // move samples in the current output buffer to the output of pTDStretch
                tempoOut = me.pTDStretch.getOutput();
                tempoOut.moveSamples(me.output);
                // move samples in pitch transposer's store buffer to tempo changer's input
                me.pTDStretch.moveSamples(me.pRateTransposer.getStore());

                me.output = me.pTDStretch;
            }
        }//#endif
        else {
            if (me.output != me.pRateTransposer) {
                var transOut;

                me.assert(me.output === me.pTDStretch);
                // move samples in the current output buffer to the output of pRateTransposer
                transOut = me.pRateTransposer.getOutput();
                transOut.moveSamples(me.output);
                // move samples in tempo changer's input to pitch transposer's input
                me.pRateTransposer.moveSamples(me.pTDStretch.getInput());

                me.output = me.pRateTransposer;
            }
        }
    },

    // Sets sample rate.
    setSampleRate: function (srate) {
        var me = this;
        me.bSrateSet = true;
        // set sample rate, leave other tempo changer parameters as they are.
        me.pTDStretch.setParameters(srate);
    },
    // Adds 'numSamples' pcs of samples from the 'samples' memory position into
    // the input of the object.
    putSamples: function (samples, nSamples) {
        var me = this;
        if (me.bSrateSet == false) {
            throw new Error("SoundTouch : Sample rate not defined");
        }
        else if (me.channels == 0) {
            throw new Error("SoundTouch : Number of channels not defined");
        }

        // Transpose the rate of the new samples if necessary
        /* Bypass the nominal setting - can introduce a click in sound when tempo/pitch control crosses the nominal value...
        */ if (me.rate === 1.0) {
            // The rate value is same as the original, simply evaluate the tempo changer. 
            me.assert(me.output === me.pTDStretch);
            if (me.pRateTransposer.isEmpty() == 0) {
                // yet flush the last samples in the pitch transposer buffer
                // (may happen if 'rate' changes from a non-zero value to zero)
                me.pTDStretch.moveSamples(me.pRateTransposer);
            }
            me.pTDStretch.putSamples(samples, nSamples);
        }

            // #ifndef SOUNDTOUCH_PREVENT_CLICK_AT_RATE_CROSSOVER
        else
            if (me.rate <= 1.0) {
                // transpose the rate down, output the transposed sound to tempo changer buffer
                me.assert(me.output == me.pTDStretch);
                me.pRateTransposer.putSamples(samples, nSamples);
                me.pTDStretch.moveSamples(me.pRateTransposer);
            }//#endif
            else {
                // evaluate the tempo changer, then transpose the rate up, 
                me.assert(me.output == me.pRateTransposer);
                me.pTDStretch.putSamples(samples, nSamples);
                me.pRateTransposer.moveSamples(me.pTDStretch);
            }
    },

    // Flushes the last samples from the processing pipeline to the output.
    // Clears also the internal processing buffers.
    //
    // Note: This function is meant for extracting the last samples of a sound
    // stream. This function may introduce additional blank samples in the end
    // of the sound stream, and thus it's not recommended to call this function
    // in the middle of a sound stream.
    flush: function () {
        var me = this;
        var i;
        var nUnprocessed;
        var nOut;
        var buff = new Float32Array(64 * 2);   // note: allocate 2*64 to cater 64 sample frames of stereo sound

        // check how many samples still await processing, and scale
        // that by tempo & rate to get expected output sample count
        nUnprocessed = me.numUnprocessedSamples();
        nUnprocessed = Math.floor(nUnprocessed / (tempo * rate) + 0.5);

        nOut = me.numSamples();        // ready samples currently in buffer ...
        nOut += nUnprocessed;       // ... and how many we expect there to be in the end

        // memset(buff, 0, 64 * channels * sizeof(SAMPLETYPE));
        // "Push" the last active samples out from the processing pipeline by
        // feeding blank samples into the processing pipeline until new, 
        // processed samples appear in the output (not however, more than 
        // 8ksamples in any case)
        for (i = 0; i < 128; i++) {
            me.putSamples(buff, 64);
            if (me.numSamples() >= nOut) {
                // Enough new samples have appeared into the output!
                // As samples come from processing with bigger chunks, now truncate it
                // back to maximum "nOut" samples to improve duration accuracy 
                me.adjustAmountOfSamples(nOut);

                // finish
                break;
            }
        }

        // Clear working buffers
        me.pRateTransposer.clear();
        me.pTDStretch.clearInput();
        // yet leave the 'tempoChanger' output intouched as that's where the
        // flushed samples are!
    },
    // Changes a setting controlling the processing system behaviour. See the
    // 'SETTING_...' defines for available setting ID's.
    setSetting: function (settingId, value) {
        var sampleRate, sequenceMs, seekWindowMs, overlapMs;
        var me = this;
        // read current tdstretch routine parameters
        var parameters = {
            sampleRate: null,
            sequenceMs: null,
            seekWindowMs: null,
            overlapMs: null
        };
        me.pTDStretch.getParameters(parameters);


        switch (settingId) {
            case 'SETTING_USE_AA_FILTER':
                // enables / disabless anti-alias filter
                me.pRateTransposer.enableAAFilter((value != 0) ? true : false);
                return true;

            case 'SETTING_AA_FILTER_LENGTH':
                // sets anti-alias filter length
                me.pRateTransposer.getAAFilter().setLength(value);
                return true;

            case 'SETTING_USE_QUICKSEEK':
                // enables / disables tempo routine quick seeking algorithm
                me.pTDStretch.enableQuickSeek((value != 0) ? true : false);
                return true;

            case 'SETTING_SEQUENCE_MS':
                // change time-stretch sequence duration parameter
                me.pTDStretch.setParameters(sampleRate, value, seekWindowMs, overlapMs);
                return true;

            case 'SETTING_SEEKWINDOW_MS':
                // change time-stretch seek window length parameter
                me.pTDStretch.setParameters(sampleRate, sequenceMs, value, overlapMs);
                return true;

            case 'SETTING_OVERLAP_MS':
                // change time-stretch overlap length parameter
                me.pTDStretch.setParameters(sampleRate, sequenceMs, seekWindowMs, value);
                return true;

            default:
                return false;
        }
    },

    // Reads a setting controlling the processing system behaviour. See the
    // 'SETTING_...' defines for available setting ID's.
    //
    // Returns the setting value.
    getSetting: function (settingId) {
        var parameters = {
            sampleRate: null,
            sequenceMs: null,
            seekWindowMs: null,
            overlapMs: null
        };
        var temp;
        var me = this;
        switch (settingId) {
            case 'SETTING_USE_AA_FILTER':
                return me.pRateTransposer.isAAFilterEnabled();

            case 'SETTING_AA_FILTER_LENGTH':
                return me.pRateTransposer.getAAFilter().getLength();

            case 'SETTING_USE_QUICKSEEK':
                return me.pTDStretch.isQuickSeekEnabled();

            case 'SETTING_SEQUENCE_MS':
                me.pTDStretch.getParameters(parameters);
                return parameters.sequenceMs;

            case 'SETTING_SEEKWINDOW_MS':
                me.pTDStretch.getParameters(parameters);
                return parameters.seekWindowMs;

            case 'SETTING_OVERLAP_MS':
                me.pTDStretch.getParameters(parameters);
                return parameters.overlapMs;

            case 'SETTING_NOMINAL_INPUT_SEQUENCE':
                return me.pTDStretch.getInputSampleReq();

            case 'SETTING_NOMINAL_OUTPUT_SEQUENCE':
                return me.pTDStretch.getOutputBatchSize();

            default:
                return 0;
        }
    },

    // Clears all the samples in the object's output and internal processing
    // buffers.
    clear: function () {
        var me = this;
        if (me.pRateTransposer)
            me.pRateTransposer.clear();
        if (me.pTDStretch) me.pTDStretch.clear();
    },


    /// Returns number of samples currently unprocessed.
    numUnprocessedSamples: function () {
        var me = this;
        var psp;
        if (me.pTDStretch) {
            psp = me.pTDStretch.getInput();
            if (psp) {
                return psp.numSamples();
            }
        }
        return 0;
    }

});﻿/**
 * @class MEPH.audio.processor.SoundProcessor 
 **/
MEPH.define('MEPH.audio.processor.FIFOProcessor', {
    extend: 'MEPH.audio.processor.FIFOSamplePipe',
    statics: {
    },
    properties: {
        output: null
    },
    initialize: function (pOutput) {
        var me = this;
        me.output = pOutput || null;
    },
    //This is a guess.
    setOutPipe: function (poutput) {
        var me = this;
        me.assert(me.output === null);
        me.assert(poutput !== null);
        me.output = poutput;
    },
    ptrBegin: function () {
        var me = this;
        return me.output.ptrBegin();
    },

    // Moves samples from the 'other' pipe instance to this instance.
    moveSamples: function (other  ///< Other pipe instance where from the receive the data.
         ) {
        var me = this,
            oNumSamples = other.numSamples();

        me.putSamples(other, oNumSamples, other.ptrBegin());
        other.receiveSamples(oNumSamples);
    },
    /// Output samples from beginning of the sample buffer. Copies requested samples to 
    /// output buffer and removes them from the sample buffer. If there are less than 
    /// 'numsample' samples in the buffer, returns all that available.
    ///
    /// \return Number of samples returned.
    receiveSamples: function (outBuffer, ///< Buffer where to copy output samples.
                                maxSamples                    ///< How many samples to receive at max.
                                ) {
        var me = this;
        if (typeof outBuffer === 'number') {
            return me.$receiveSamples(outBuffer);
        }
        return me.output.receiveSamples(outBuffer, maxSamples);
    },


    /// Adjusts book-keeping so that given number of samples are removed from beginning of the 
    /// sample buffer without copying them anywhere. 
    ///
    /// Used to reduce the number of samples in the buffer when accessing the sample buffer directly
    /// with 'ptrBegin' function.
    $receiveSamples: function (maxSamples   ///< Remove this many samples from the beginning of pipe.
                                ) {
        var me = this;
        return me.output.receiveSamples(maxSamples);
    },

    /// Returns number of samples currently available.
    numSamples: function () {
        var me = this;
        return me.output.numSamples();
    },
    /// Returns nonzero if there aren't any samples available for outputting.
    isEmpty: function () {
        var me = this;
        return me.output.isEmpty();
    },

    /// allow trimming (downwards) amount of samples in pipeline.
    /// Returns adjusted amount of samples
    adjustAmountOfSamples: function (numSamples) {
        var me = this;
        return me.output.adjustAmountOfSamples(numSamples);
    }

});﻿/**
 * @class MEPH.audio.processor.SoundProcessor 
 **/
MEPH.define('MEPH.audio.processor.FIFOSamplePipe', {
    statics: {
    },
    properties: {
        pRateTransposer: null,
        pTDStretch: null,
        tempo: 0
    },
    assert: function (val) {
        if (!val) {
            throw new Error('not true')
        }
    },
    get: function (i) {
        var me = this;
        if (me.buffer)
            return me.buffer[i];
        return me.output.get(i);
    },
    set: function (i, v) {
        var me = this;
        if (me.buffer)
            me.buffer[i] = v;
        if (me.output)
            me.ouput.set(i, v);
    },

    // Moves samples from the 'other' pipe instance to this instance.
    moveSamples: function (other) {
        var me = this;
        var oNumSamples = other.numSamples();

        me.putSamples(other, oNumSamples, other.ptrBegin());
        other.receiveSamples(oNumSamples);
    }
});﻿describe("MEPH/audio/processor/SoundProcessor.spec.js", 'MEPH.audio.processor.SoundProcessor', 'MEPH.audio.Audio', function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create an SoundProcessor', function () {
        var filter = new MEPH.audio.processor.SoundProcessor();

        expect(filter).toBeTruthy();
    });

    it('can process sound ', function () {
        var len = 44100 * 2
        var fs = 44100;

        var signal = (new Float32Array(len)).select(function (i, x) {
            return .9 * Math.cos((x / fs) * 2 * 440 * Math.PI);
        });

        var output = MEPH.audio.processor.SoundProcessor.Process(signal);
        expect(output).toBeTruthy();
    });

    it('can propcess and sound can be played', function () {
        var len = 44100 * 2
        var fs = 44100;
        var sampleRate = fs;
        var signal = (new Float32Array(len)).select(function (i, x) {
            return .9 * Math.cos((x / fs) * 2 * 440 * Math.PI);
        });
        
        var output = MEPH.audio.processor.SoundProcessor.Process(signal);
        var resource = {
            buffer: {
                buffer: {
                    getChannelData: function () {
                        return output;
                    },
                    sampleRate: sampleRate
                },
                channelCount: 1
            }
        };

        var audio = new MEPH.audio.Audio();

        var audioresult = audio.copyToBuffer(resource, 0, len / sampleRate);

        audio.buffer(audioresult.buffer).complete();

        audio.get({ name: 'buffer' }).first().buffer.start();
        // start the source playing
        audio.playbuffer();
        setTimeout(function () {
            audio.disconnect();
        }, 5000)
    })
});﻿/**
 * @class MEPH.audio.processor.TDStretch
 **/
MEPH.define('MEPH.audio.processor.TDStretch', {
    requires: ['MEPH.audio.processor.FIFOSampleBuffer'],
    extend: 'MEPH.audio.processor.FIFOProcessor',
    statics: {
    },
    properties: {
        bQuickSeek: false,
        channels: 1,

        pMidBuffer: null,
        pMidBufferUnaligned: null,
        overlapLength: 0,

        bAutoSeqSetting: true,
        bAutoSeekSetting: true,
        //    outDebt = 0;
        skipFract: 0,

        tempo: 1.0,

        sampleReq: 0,

        seekLength: 0,
        seekWindowLength: 0,
        overlapDividerBits: 0,
        slopingDivider: 0,
        nominalSkip: 0,
        skipFract: 0,
        outputBuffer: null,
        inputBuffer: null,

        sampleRate: 0,
        sequenceMs: 0,
        seekWindowMs: 0,
        overlapMs: 0,
    },
    initialize: function (outputBuffer, inputBuffer) {
        var me = this;
        var DEFAULT_SEQUENCE_MS = 0;
        var DEFAULT_SEEKWINDOW_MS = 0;
        var DEFAULT_OVERLAP_MS = 8;
        me.inputBuffer = inputBuffer;
        me.output = outputBuffer;
        me.setParameters(44100, DEFAULT_SEQUENCE_MS, DEFAULT_SEEKWINDOW_MS, DEFAULT_OVERLAP_MS);
        me.setTempo(1.0);
        me.clear();

    },
    getOutput: function () {
        var me = this;
        return me.output;
    },
    getInput: function () {
        var me = this;
        return me.inputBuffer;

    },
    // Sets routine control parameters. These control are certain time constants
    // defining how the sound is stretched to the desired duration.
    //
    // 'sampleRate' = sample rate of the sound
    // 'sequenceMS' = one processing sequence length in milliseconds (default = 82 ms)
    // 'seekwindowMS' = seeking window length for scanning the best overlapping 
    //      position (default = 28 ms)
    // 'overlapMS' = overlapping length (default = 12 ms)

    setParameters: function (aSampleRate, aSequenceMS,
                              aSeekWindowMS, aOverlapMS) {
        var me = this;
        // accept only positive parameter values - if zero or negative, use old values instead
        if (aSampleRate > 0) this.sampleRate = Math.floor(aSampleRate);
        if (aOverlapMS > 0) this.overlapMs = Math.floor(aOverlapMS);

        if (aSequenceMS > 0) {
            this.sequenceMs = aSequenceMS;
            me.bAutoSeqSetting = false;
        }
        else if (aSequenceMS == 0) {
            // if zero, use automatic setting
            me.bAutoSeqSetting = true;
        }

        if (aSeekWindowMS > 0) {
            me.seekWindowMs = aSeekWindowMS;
            me.bAutoSeekSetting = false;
        }
        else if (aSeekWindowMS == 0) {
            // if zero, use automatic setting
            me.bAutoSeekSetting = true;
        }

        me.calcSeqParameters();

        me.calculateOverlapLength(me.overlapMs);

        // set tempo to recalculate 'sampleReq'
        me.setTempo(me.tempo);

    },
    assert: function (val) {
        if (!val) {
            throw new Error('not true')
        }
    },

    /// Calculates overlapInMsec period length in samples.
    calculateOverlapLength: function (overlapInMsec) {
        var newOvl;
        var me = this;
        me.assert(overlapInMsec >= 0);
        newOvl = (me.sampleRate * overlapInMsec) / 1000;
        if (newOvl < 16) newOvl = 16;

        // must be divisible by 8
        newOvl -= newOvl % 8;

        me.acceptNewOverlapLength(newOvl);
    },

    /// Get routine control parameters, see setParameters() function.
    /// Any of the parameters to this function can be NULL, in such case corresponding parameter
    /// value isn't returned.
    getParameters: function (obj) {
        var USE_AUTO_SEQUENCE_LEN = 0;
        var USE_AUTO_SEEKWINDOW_LEN = 0;
        var me = this;
        //pSampleRate, pSequenceMs, pSeekWindowMs, pOverlapMs
        if (obj.hasOwnProperty('pSampleRate')) {
            obj.pSampleRate = Math.floor(me.sampleRate);
        }

        if (obj.hasOwnProperty('pSequenceMs')) {
            obj.pSequenceMs = (me.bAutoSeqSetting) ? (USE_AUTO_SEQUENCE_LEN) : Math.floor(me.sequenceMs);
        }

        if (obj.hasOwnProperty('pSeekWindowMs')) {
            obj.pSeekWindowMs = (me.bAutoSeekSetting) ? (USE_AUTO_SEEKWINDOW_LEN) : Math.floor(me.seekWindowMs);
        }

        if (obj.hasOwnProperty('pOverlapMs')) {
            me.pOverlapMs = Math.floor(me.overlapMs);
        }
    },

    // Overlaps samples in 'midBuffer' with the samples in 'pInput'
    overlapMono: function (pOutput, pInput, ovlPos, ooffset, ioffset) {
        var i;
        var m1, m2;
        var me = this;

        m1 = 0;
        m2 = me.overlapLength;

        for (i = 0; i < me.overlapLength ; i++) {
            pOutput.set(i + ooffset, (pInput.get(i + ioffset + ovlPos) * m1 + me.pMidBuffer[i] * m2) / me.overlapLength);
            m1 += 1;
            m2 -= 1;
        }
    },

    clearMidBuffer: function () {
        var me = this;
        me.pMidBuffer = new Float32Array(me.overlapLength * 2 + 16)
    },


    clearInput: function () {
        var me = this;
        me.inputBuffer.clear();
        me.clearMidBuffer();
    },


    // Clears the sample buffers
    clear: function () {
        var me = this;
        me.output.clear();
        me.clearInput();
    },

    // Enables/disables the quick position seeking algorithm. Zero to disable, nonzero
    // to enable
    enableQuickSeek: function (enable) {
        var me = this;
        me.bQuickSeek = enable;
    },

    // Returns nonzero if the quick seeking algorithm is enabled.
    isQuickSeekEnabled: function () {
        var me = this;
        return me.bQuickSeek;
    },


    // Seeks for the optimal overlap-mixing position.
    seekBestOverlapPosition: function (ref, refPos) {
        var me = this;
        if (me.bQuickSeek) {
            return me.seekBestOverlapPositionQuick(ref, refPos);
        }
        else {
            return me.seekBestOverlapPositionFull(ref, refPos);
        }
    },
    /// return nominal input sample requirement for triggering a processing batch
    getInputSampleReq: function () {
        var me = this;
        return Math.floor(me.nominalSkip + 0.5);
    },

    /// return nominal output sample amount when running a processing batch
    getOutputBatchSize: function () {
        var me = this;
        return me.seekWindowLength - me.overlapLength;
    },

    // Overlaps samples in 'midBuffer' with the samples in 'pInputBuffer' at position
    // of 'ovlPos'.
    overlap: function (pOutput, pInput, ovlPos, ooffset, ioffset) {
        var me = this;
        if (me.channels == 2) {
            // stereo sound
            throw new Error('no support for stereo.');
        } else {
            // mono sound.
            me.overlapMono(pOutput, pInput, ovlPos, ooffset, ioffset);
        }
    },

    // Seeks for the optimal overlap-mixing position. The 'stereo' version of the
    // routine
    //
    // The best position is determined as the position where the two overlapped
    // sample sequences are 'most alike', in terms of the highest cross-correlation
    // value over the overlapping period
    seekBestOverlapPositionFull: function (ref, refPos) {
        var bestOffs;
        var bestCorr, corr;
        var i;
        var FLT_MIN = 2.2204460492503130808472633361816E-16;
        var me = this;
        bestCorr = FLT_MIN;
        bestOffs = 0;

        // Scans for the best correlation value by testing each possible position
        // over the permitted range.
        for (i = 0; i < me.seekLength; i++) {
            // Calculates correlation value for the mixing position corresponding
            // to 'i'
            corr = me.calcCrossCorr(ref, refPos + me.channels * i, me.pMidBuffer);
            // heuristic rule to slightly favour values close to mid of the range
            var tmp = (2 * i - me.seekLength) / me.seekLength;
            corr = ((corr + 0.1) * (1.0 - 0.25 * tmp * tmp));

            // Checks for the highest correlation value
            if (corr > bestCorr) {
                bestCorr = corr;
                bestOffs = i;
            }
        }
        // clear cross correlation routine state if necessary (is so e.g. in MMX routines).
        me.clearCrossCorrState();

        return bestOffs;
    },

    // Seeks for the optimal overlap-mixing position. The 'stereo' version of the
    // routine
    //
    // The best position is determined as the position where the two overlapped
    // sample sequences are 'most alike', in terms of the highest cross-correlation
    // value over the overlapping period
    seekBestOverlapPositionQuick: function (ref, refPos) {
        var me = this;
        var j;
        var bestOffs;
        var bestCorr, corr;
        var scanCount, corrOffset, tempOffset;
        var _scanOffsets = me.$scanOffsets();
        bestCorr = FLT_MIN;
        bestOffs = Math.floo(_scanOffsets[0][0]);
        corrOffset = 0;
        tempOffset = 0;

        // Scans for the best correlation value using four-pass hierarchical search.
        //
        // The look-up table 'scans' has hierarchical position adjusting steps.
        // In first pass the routine searhes for the highest correlation with 
        // relatively coarse steps, then rescans the neighbourhood of the highest
        // correlation with better resolution and so on.
        for (scanCount = 0; scanCount < 4; scanCount++) {
            j = 0;
            while (_scanOffsets[scanCount][j]) {
                tempOffset = corrOffset + _scanOffsets[scanCount][j];
                if (tempOffset >= seekLength) break;

                // Calculates correlation value for the mixing position corresponding
                // to 'tempOffset'
                corr = me.calcCrossCorr(ref, refPos + me.channels * tempOffset, me.pMidBuffer);
                // heuristic rule to slightly favour values close to mid of the range
                var tmp = Math.floor((2 * tempOffset - me.seekLength) / me.seekLength);
                corr = ((corr + 0.1) * (1.0 - 0.25 * tmp * tmp));

                // Checks for the highest correlation value
                if (corr > bestCorr) {
                    bestCorr = corr;
                    bestOffs = tempOffset;
                }
                j++;
            }
            corrOffset = Math.floor(bestOffs);
        }
        // clear cross correlation routine state if necessary (is so e.g. in MMX routines).
        me.clearCrossCorrState();

        return bestOffs;
    },
    clearCrossCorrState: function () {
    },

    /// Calculates processing sequence length according to tempo setting
    calcSeqParameters: function () {
        var me = this;
        // Adjust tempo param according to tempo, so that variating processing sequence length is used
        // at varius tempo settings, between the given low...top limits
        var AUTOSEQ_TEMPO_LOW = 0.5     // auto setting low tempo range (-50%)
        var AUTOSEQ_TEMPO_TOP = 2.0     // auto setting top tempo range (+100%)

        // sequence-ms setting values at above low & top tempo
        var AUTOSEQ_AT_MIN = 125.0
        var AUTOSEQ_AT_MAX = 50.0
        var AUTOSEQ_K = ((AUTOSEQ_AT_MAX - AUTOSEQ_AT_MIN) / (AUTOSEQ_TEMPO_TOP - AUTOSEQ_TEMPO_LOW))
        var AUTOSEQ_C = (AUTOSEQ_AT_MIN - (AUTOSEQ_K) * (AUTOSEQ_TEMPO_LOW))

        // seek-window-ms setting values at above low & top tempo
        var AUTOSEEK_AT_MIN = 25.0
        var AUTOSEEK_AT_MAX = 15.0
        var AUTOSEEK_K = ((AUTOSEEK_AT_MAX - AUTOSEEK_AT_MIN) / (AUTOSEQ_TEMPO_TOP - AUTOSEQ_TEMPO_LOW))
        var AUTOSEEK_C = (AUTOSEEK_AT_MIN - (AUTOSEEK_K) * (AUTOSEQ_TEMPO_LOW))

        var CHECK_LIMITS = function (x, mi, ma) {
            return (((x) < (mi)) ? (mi) : (((x) > (ma)) ? (ma) : (x)));
        }
        var seq, seek;

        if (me.bAutoSeqSetting) {
            seq = AUTOSEQ_C + AUTOSEQ_K * me.tempo;
            seq = CHECK_LIMITS(seq, AUTOSEQ_AT_MAX, AUTOSEQ_AT_MIN);
            me.sequenceMs = Math.floor(seq + 0.5);
        }

        if (me.bAutoSeekSetting) {
            seek = AUTOSEEK_C + AUTOSEEK_K * me.tempo;
            seek = CHECK_LIMITS(seek, AUTOSEEK_AT_MAX, AUTOSEEK_AT_MIN);
            me.seekWindowMs = Math.floor(seek + 0.5);
        }

        // Update seek window lengths
        me.seekWindowLength = Math.floor((me.sampleRate * me.sequenceMs) / 1000);
        if (me.seekWindowLength < 2 * me.overlapLength) {
            me.seekWindowLength = Math.floor(2 * me.overlapLength);
        }
        me.seekLength = Math.floor((me.sampleRate * me.seekWindowMs) / 1000);
    },

    // Sets new target tempo. Normal tempo = 'SCALE', smaller values represent slower 
    // tempo, larger faster tempo.
    setTempo: function (newTempo) {
        var intskip;
        var me = this;
        me.tempo = newTempo;

        // Calculate new sequence duration
        me.calcSeqParameters();

        // Calculate ideal skip length (according to tempo value) 
        me.nominalSkip = (me.tempo * (me.seekWindowLength - me.overlapLength));
        intskip = Math.floor(me.nominalSkip + 0.5);

        // Calculate how many samples are needed in the 'inputBuffer' to 
        // process another batch of samples
        //sampleReq = max(intskip + overlapLength, seekWindowLength) + seekLength / 2;
        me.sampleReq = Math.max(intskip + me.overlapLength, me.seekWindowLength)
            + me.seekLength;
    },


    // Sets the number of channels, 1 = mono, 2 = stereo
    setChannels: function (numChannels) {
        var me = this;
        me.assert(numChannels > 0);
        if (me.channels == numChannels) return;
        me.assert(numChannels == 1 || numChannels == 2);

        me.channels = numChannels;
        me.inputBuffer.setChannels(channels);
        me.output.setChannels(channels);
    },

    // Processes as many processing frames of the samples 'inputBuffer', store
    // the result into 'outputBuffer'
    processSamples: function () {
        var ovlSkip, offset;
        var temp;
        var me = this,
            channels = me.channels,
        overlapLength = me.overlapLength;
        /* Removed this small optimization - can introduce a click to sound when tempo setting
           crosses the nominal value
        if (tempo == 1.0f) 
        {
            // tempo not changed from the original, so bypass the processing
            processNominalTempo();
            return;
        }
        */

        // Process samples as long as there are enough samples in 'inputBuffer'
        // to form a processing frame.
        while (me.inputBuffer.numSamples() >= me.sampleReq) {
            // If tempo differs from the normal ('SCALE'), scan for the best overlapping
            // position
            offset = me.seekBestOverlapPosition(me.inputBuffer, me.inputBuffer.ptrBegin());

            // Mix the samples in the 'inputBuffer' at position of 'offset' with the 
            // samples in 'midBuffer' using sliding overlapping
            // ... first partially overlap with the end of the previous sequence
            // (that's in 'midBuffer')
            me.overlap(me.output, me.inputBuffer, Math.floor(offset), me.output.ptrEnd(Math.floor(overlapLength)), me.inputBuffer.ptrBegin());

            me.output.putSamples(Math.floor(overlapLength));

            // ... then copy sequence samples from 'inputBuffer' to output:

            // length of sequence
            temp = (me.seekWindowLength - 2 * me.overlapLength);

            // crosscheck that we don't have buffer overflow...
            if (me.inputBuffer.numSamples() < (offset + temp + me.overlapLength * 2)) {
                continue;    // just in case, shouldn't really happen
            }

            me.output.putSamples(me.inputBuffer, Math.floor(temp), me.inputBuffer.ptrBegin() + channels * (offset + overlapLength));

            // Copies the end of the current sequence from 'inputBuffer' to 
            // 'midBuffer' for being mixed with the beginning of the next 
            // processing sequence and so on
            me.assert((offset + temp + overlapLength * 2) <= me.inputBuffer.numSamples());
            me.memcpy(me.pMidBuffer,
                me.inputBuffer.ptrBegin() + channels * (offset + temp + overlapLength),
                me.inputBuffer,
                channels * overlapLength, 0);

            // Remove the processed samples from the input buffer. Update
            // the difference between integer & nominal skip step to 'skipFract'
            // in order to prevent the error from accumulating over time.
            me.skipFract += me.nominalSkip;   // real skip size
            me.ovlSkip = Math.floor(me.skipFract);   // rounded to integer skip
            me.skipFract -= me.ovlSkip;       // maintain the fraction part, i.e. real vs. integer skip
            me.inputBuffer.receiveSamples(Math.floor(me.ovlSkip));
        }
    },

    memcpy: function (buffer, endIndx, samples, count, offset) {
        var me = this;
        offset = offset || 0;
        [].interpolate(endIndx, endIndx + count, function (t, i) {
            buffer[i] = samples.get(t);
        });
    },

    // Adds 'numsamples' pcs of samples from the 'samples' memory position into
    // the input of the object.
    putSamples: function (samples, nSamples) {
        var me = this;
        // Add the samples into the input buffer
        me.inputBuffer.putSamples(samples, nSamples);
        // Process the samples in input buffer
        me.processSamples();
    },


    /// Set new overlap length parameter & reallocate RefMidBuffer if necessary.
    acceptNewOverlapLength: function (newOverlapLength) {
        var me = this;
        var pMidBufferUnaligned;
        var prevOvl;

        me.assert(newOverlapLength >= 0);
        prevOvl = me.overlapLength;
        me.overlapLength = newOverlapLength;

        if (me.overlapLength > prevOvl) {

            pMidBufferUnaligned = new Float32Array(me.overlapLength * 2 + 16);
            // ensure that 'pMidBuffer' is aligned to 16 byte boundary for efficiency
            //( (ulong_ptr)(x) + 15 ) & ~(ulong_ptr)15
            me.pMidBuffer = (pMidBufferUnaligned);

            me.clearMidBuffer();
        }
    },

    calcCrossCorr: function (ref, mixingPos, compare) {
        var corr;
        var norm;
        var i;
        var me = this;
        corr = norm = 0;
        // Same routine for stereo and mono. For Stereo, unroll by factor of 2.
        // For mono it's same routine yet unrollsd by factor of 4.
        for (i = 0; i < me.channels * me.overlapLength; i += 4) {
            corr += ref.get(mixingPos + i) * compare[i] +
                    ref.get(mixingPos + i + 1) * compare[i + 1];

            norm += ref.get(mixingPos + i) * ref.get(mixingPos + i) +
                    ref.get(mixingPos + 1 + 1) * ref.get(mixingPos + 1);

            // unroll the loop for better CPU efficiency:
            corr += ref.get(mixingPos + i + 2) * compare[i + 2] +
                    ref.get(mixingPos + i + 3) * compare[i + 3];

            norm += ref.get(mixingPos + i + 2) * ref.get(mixingPos + i + 2) +
                    ref.get(mixingPos + i + 3) * ref.get(mixingPos + i + 3);
        }

        if (norm < 1e-9) norm = 1.0;    // to avoid div by zero
        return corr / Math.sqrt(norm);
    },
    $scanOffsets: function () {
        return MEPH.audio.processor.TDStretch._scanOffsets;
    }
}).then(function () {
    MEPH.audio.processor.TDStretch._scanOffsets = [
       [124, 186, 248, 310, 372, 434, 496, 558, 620, 682, 744, 806,
           868, 930, 992, 1054, 1116, 1178, 1240, 1302, 1364, 1426, 1488, 0],
       [-100, -75, -50, -25, 25, 50, 75, 100, 0, 0, 0, 0,
           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [-20, -15, -10, -5, 5, 10, 15, 20, 0, 0, 0, 0,
           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [-4, -3, -2, -1, 1, 2, 3, 4, 0, 0, 0, 0,
           0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
       [121, 114, 97, 114, 98, 105, 108, 32, 104, 99, 117, 111,
           116, 100, 110, 117, 111, 115, 0, 0, 0, 0, 0, 0]
    ];
})﻿describe("MEPH/audio/processor/TDStretch.spec.js", 'MEPH.audio.processor.TDStretch', function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create an TDStretch', function () {
        var samplebuff = new MEPH.audio.processor.FIFOSampleBuffer(32);
        var inputbuffer = new MEPH.audio.processor.FIFOSampleBuffer(32);
        var filter = new MEPH.audio.processor.TDStretch(samplebuff, inputbuffer);

        expect(filter).toBeTruthy();
    });
});﻿/**
 * @class MEPH.audio.processor.RateTransposer 
 **/
MEPH.define('MEPH.audio.processor.RateTransposer', {
    extend: 'MEPH.audio.processor.FIFOProcessor',
    requires: ['MEPH.audio.effects.AAFilter', 'MEPH.audio.processor.FIFOSampleBuffer'],
    statics: {
    },
    properties: {
        numChannels: 1,
        bUseAAFilter: true,
        fSlopeCount: 0,
        tempBuffer: null,
        fRate: 0,
        sPrevSampleR: 0,
        sPrevSampleL: 0,
        storeBuffer: null,//dont know if this should be here
        pAAFilter: null
    },
    initialize: function (outputBuffer) {
        var me = this;
        me.storeBuffer = new MEPH.audio.processor.FIFOSampleBuffer(1);
        me.tempBuffer = new MEPH.audio.processor.FIFOSampleBuffer(1);
        me.pAAFilter = new MEPH.audio.effects.AAFilter(32);
        me.great()
    },
    getOutput: function () {
        var me = this;
        return me.outputBuffer || me.output;
    },
    getStore: function () {
        var me = this;
        return me.storeBuffer;
    },
    enableAAFilter: function (newMode) {
        var me = this;
        me.bUseAAFilter = newMode;
    },
    isAAFilterEnabled: function () {
        return this.bUseAAFilter;
    },
    getAAFilter: function () {
        var me = this;
        return me.pAAFilter;
    },
    setRate: function (newRate) {
        var fCutoff, me = this;
        me.fRate = newRate;
        if (newRate > 1) {
            fCutoff = .5 / newRate;
        }
        else {
            fCutoff = .5 * newRate;
        }
        var filter = me.getAAFilter();
        filter.setCutoffFreq(fCutoff);
    },
    putSamples: function (samples, nSamples, samplesIndex) {
        var me = this;
        me.processSamples(samples, nSamples, samplesIndex);
    },
    upsample: function (src, nSamples, srcIndex) {
        var count, sizeTemp, num;
        var storeBuffer = me.storeBuffer;
        var outputBuffer = me.outputBuffer;
        // If the parameter 'uRate' value is smaller than 'SCALE', first transpose
        // the samples and then apply the anti-alias filter to remove aliasing.

        // First check that there's enough room in 'storeBuffer' 
        // (+16 is to reserve some slack in the destination buffer)
        sizeTemp = Math.floor(nSamples / fRate + 16.0);

        // Transpose the samples, store the result into the end of "storeBuffer"
        count = me.transpose(storeBuffer, src, nSamples, storeBuffer.ptrEnd(sizeTemp), srcIndex);
        storeBuffer.putSamples(count);

        // Apply the anti-alias filter to samples in "store output", output the
        // result to "dest"
        num = storeBuffer.numSamples();
        count = me.pAAFilter.evaluate(outputBuffer, storeBuffer, num, me.numChannels, outputBuffer.ptrEnd(num), storeBuffer.ptrBegin());
        outputBuffer.putSamples(count);

        // Remove the processed samples from "storeBuffer"
        storeBuffer.receiveSamples(count);
    },
    downsample: function (src, nSamples, srcIndex) {

        // Transposes down the sample rate, causing the observed playback 'rate' of the
        // sound to increase

        var count, sizeTemp;
        var me = this,
            numChannels = me.numChannels,
            outputBuffer = me.getOutput(),
            tempBuffer = me.tempBuffer,
            storeBuffer = me.storeBuffer;

        // If the parameter 'uRate' value is larger than 'SCALE', first apply the
        // anti-alias filter to remove high frequencies (prevent them from folding
        // over the lover frequencies), then transpose.

        // Add the new samples to the end of the storeBuffer
        storeBuffer.putSamples(src, nSamples, srcIndex);

        // Anti-alias filter the samples to prevent folding and output the filtered 
        // data to tempBuffer. Note : because of the FIR filter length, the
        // filtering routine takes in 'filter_length' more samples than it outputs.
        me.assert(tempBuffer.isEmpty());
        sizeTemp = storeBuffer.numSamples();

        count = me.pAAFilter.evaluate(tempBuffer, storeBuffer, sizeTemp, numChannels, me.tempBuffer.ptrEnd(sizeTemp), storeBuffer.ptrBegin());

        if (count == 0) return;

        // Remove the filtered samples from 'storeBuffer'
        storeBuffer.receiveSamples(count);

        // Transpose the samples (+16 is to reserve some slack in the destination buffer)
        sizeTemp = Math.floor(nSamples / me.fRate + 16.0);
        count = me.transpose(outputBuffer, tempBuffer, count, outputBuffer.ptrEnd(sizeTemp), tempBuffer.ptrBegin());
        outputBuffer.putSamples(count);
    },
    // Transposes sample rate by applying anti-alias filter to prevent folding. 
    // Returns amount of samples returned in the "dest" buffer.
    // The maximum amount of samples that can be returned at a time is set by
    // the 'set_returnBuffer_size' function.
    processSamples: function (src, nSamples, srcIndex) {
        var count;
        var sizeReq;
        var me = this;
        if (nSamples == 0) return;
        me.assert(me.pAAFilter);

        // If anti-alias filter is turned off, simply transpose without applying
        // the filter
        if (me.bUseAAFilter == false) {
            sizeReq = Math.floor(nSamples / me.fRate + 1.0);
            count = me.transpose(me.outputBuffer, src, nSamples, me.outputBuffer.ptrEnd(sizeReq), srcIndex);
            outputBuffer.putSamples(count);
            return;
        }

        // Transpose with anti-alias filter
        if (me.fRate < 1.0) {
            me.upsample(src, nSamples, srcIndex);
        }
        else {
            me.downsample(src, nSamples, srcIndex);
        }
    },
    // Transposes the sample rate of the given samples using linear interpolation. 
    // Returns the number of samples returned in the "dest" buffer
    transpose: function (dest, src, nSamples, destOffset, srcOffset) {
        var me = this;
        if (me.numChannels == 2) {
            throw new Error('Does not support stereo');
        }
        else {
            return me.transposeMono(dest, src, nSamples, destOffset, srcOffset);
        }
    },
    assert: function (val) {
        if (!val) {
            throw new Error('not true')
        }
    },
    // Sets the number of channels, 1 = mono, 2 = stereo
    setChannels: function (nChannels) {
        var me = this;
        me.assert(nChannels > 0);
        if (me.numChannels == nChannels) return;

        me.assert(nChannels == 1 || nChannels == 2);
        me.numChannels = nChannels;

        me.storeBuffer.setChannels(numChannels);
        me.tempBuffer.setChannels(numChannels);
        me.outputBuffer.setChannels(numChannels);

        // Inits the linear interpolation registers
        me.resetRegisters();
    },

    // Clears all the samples in the object
    clear: function () {
        var me = this;
        me.outputBuffer.clear();
        me.storeBuffer.clear();
    },
    isEmpty: function () {
        var res, me = this;;

        //res = FIFOProcessor::isEmpty();
        //if (res == 0) return 0;
        return me.storeBuffer.isEmpty();
    },
    resetRegisters: function () {
        var me = this;
        me.fSlopeCount = 0;
        me.sPrevSampleL = me.sPrevSampleR = 0;
    },

    // Transposes the sample rate of the given samples using linear interpolation. 
    // 'Mono' version of the routine. Returns the number of samples returned in 
    // the "dest" buffer
    transposeMono: function (dest, src, nSamples, destOffset, srcOffset) {
        var i, used;
        var me = this;
        used = 0;
        i = 0;

        // Process the last sample saved from the previous call first...
        while (me.fSlopeCount <= 1.0) {
            dest.set(destOffset + i, ((1.0 - me.fSlopeCount) * me.sPrevSampleL + me.fSlopeCount * src.get(srcOffset + 0)));
            i++;
            me.fSlopeCount += me.fRate;
        }
        me.fSlopeCount -= 1.0;
        var nottrue = false;
        if (nSamples > 1) {
            while (!nottrue) {
                while (me.fSlopeCount > 1.0) {
                    me.fSlopeCount -= 1.0;
                    used++;
                    if (used >= nSamples - 1) {
                        nottrue = true;
                    }
                }
                if (!nottrue) {
                    dest.set(destOffset + i, ((1.0 - me.fSlopeCount) * src.get(srcOffset + used) + me.fSlopeCount * src.get(srcOffset + used + 1)));
                    i++;
                    me.fSlopeCount += me.fRate;
                }
            }
        }
        // Store the last sample for the next round
        me.sPrevSampleL = src.get(srcOffset + nSamples - 1);

        return i;
    }
})﻿describe("MEPH/audio/processor/RateTransposer.spec.js", 'MEPH.audio.processor.RateTransposer', function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create an RateTransposer', function () {
        var filter = new MEPH.audio.processor.RateTransposer();

        expect(filter).toBeTruthy();
    });
});﻿/**
 * @class MEPH.audio.processor.RateTransposer 
 **/
MEPH.define('MEPH.audio.processor.FIFOSampleBuffer', {
    statics: {
    },
    extend: 'MEPH.audio.processor.FIFOSamplePipe',
    properties: {
        sizeInBytes: 0,// reasonable initial value
        buffer: null,
        bufferUnaligned: null,
        samplesInBuffer: 0,
        bufferPos: 0
    },
    assert: function (val) {
        if (!val) {
            throw new Error('not true')
        }
    },
    initialize: function (numChannels) {
        var me = this;
        me.assert(numChannels || 0 > 0);
        me.sizeInBytes = 0; // reasonable initial value
        me.buffer = null;
        me.bufferUnaligned = null;
        me.samplesInBuffer = 0;
        me.bufferPos = 0;
        me.channels = numChannels;
        me.ensureCapacity(32);     // allocate initial capacity 
    },
    setChannels: function (numChannels) {
        var usedBytes;
        var me = this;

        me.assert(numChannels > 0);
        usedBytes = channels * samplesInBuffer;
        me.channels = numChannels;
        me.samplesInBuffer = usedBytes / channels;
    },
    // Returns a pointer to the beginning of the currently non-outputted samples. 
    // This function is provided for accessing the output samples directly. 
    // Please be careful!
    //
    // When using this function to output samples, also remember to 'remove' the
    // outputted samples from the buffer by calling the 
    // 'receiveSamples(numSamples)' function
    ptrBegin: function () {
        var me = this;
        me.assert(me.buffer);
        return me.bufferPos * me.channels;//me.buffer + 
    },


    // Returns a pointer to the end of the used part of the sample buffer (i.e. 
    // where the new samples are to be inserted). This function may be used for 
    // inserting new samples into the sample buffer directly. Please be careful! 
    //
    // Parameter 'slackCapacity' tells the function how much free capacity (in
    // terms of samples) there _at least_ should be, in order to the caller to
    // succesfully insert all the required samples to the buffer. When necessary, 
    // the function grows the buffer size to comply with this requirement.
    //
    // When using this function as means for inserting new samples, also remember 
    // to increase the sample count afterwards, by calling  the 
    // 'putSamples(numSamples)' function.
    ptrEnd: function (slackCapacity) {
        var me = this;
        me.ensureCapacity(me.samplesInBuffer + slackCapacity);
        return me.samplesInBuffer * me.channels;//me.buffer + 
    },

    // if output location pointer 'bufferPos' isn't zero, 'rewinds' the buffer and
    // zeroes this pointer by copying samples from the 'bufferPos' pointer 
    // location on to the beginning of the buffer.
    rewind: function () {
        var me = this;
        if (me.buffer && me.bufferPos) {
            
            //memmove(buffer, ptrBegin(), sizeof(SAMPLETYPE) * channels * samplesInBuffer);
            var newbuffer = new Float32Array(me.buffer.length);
            var ptr = me.ptrBegin();
            [].interpolate(ptr, ptr + me.samplesInBuffer * me.channels, function (t, i) {
                newbuffer[i] = me.buffer[t];
            });
            [].interpolate(0, me.buffer.length, function (t) {
                if (t <= newbuffer.length) {
                    me.buffer[t] = newbuffer[t];
                }
                else {
                    me.buffer[t] = 0;
                }
            });
            me.bufferPos = 0;
        }
    },

    // Adds 'numSamples' pcs of samples from the 'samples' memory position to 
    // the sample buffer.
    putSamples: function (samples, nSamples, offset) {
        offset = offset || 0;
        var me = this;
        if (samples instanceof MEPH.audio.processor.FIFOSamplePipe) {
            me.memcpy(me.ptrEnd(nSamples), samples, nSamples * me.channels, offset);
            me.samplesInBuffer += nSamples;
        }
        else if (samples instanceof Float32Array) {
            me.memcpy(me.ptrEnd(nSamples), samples, nSamples * me.channels, offset);
            me.samplesInBuffer += nSamples;
        }
        else {
            me.$putSamples(samples);
        }
    },
    $putSamples: function (nSamples) {
        var req;
        var me = this;
        req = me.samplesInBuffer + nSamples;
        me.ensureCapacity(req);
        me.samplesInBuffer += nSamples;
    },
    memcpy: function (endIndx, samples, count, offset) {
        var me = this;
        offset = offset || 0;
        [].interpolate(endIndx, endIndx + count, function (t, i) {
            var s = samples instanceof Float32Array ? samples[i + offset] : samples.get(i + offset);
            if (me.buffer instanceof Float32Array) {
                me.buffer[t] = s;
            }
            else {
                me.buffer.set(t, s);
            }
        });
    },
    // Ensures that the buffer has enought capacity, i.e. space for _at least_
    // 'capacityRequirement' number of samples. The buffer is grown in steps of
    // 4 kilobytes to eliminate the need for frequently growing up the buffer,
    // as well as to round the buffer size up to the virtual memory page size.
    ensureCapacity: function (capacityRequirement) {
        var tempUnaligned,
            temp;
        var me = this;

        if (capacityRequirement > me.getCapacity()) {
            // enlarge the buffer in 4kbyte steps (round up to next 4k boundary)
            var temp = new Float32Array(capacityRequirement);
            if (me.samplesInBuffer) {
                var ptr = me.ptrBegin();
                [].interpolate(ptr, me.samplesInBuffer + ptr, function (t, i) {
                    temp[i] = me.buffer[t];
                });
            }
            me.buffer = temp;
            me.bufferPos = 0;
        }
        else {
            // simply rewind the buffer (if necessary)
            me.rewind();
        }
    },

    // Returns the current buffer capacity in terms of samples
    getCapacity: function () {
        var me = this;
        return !me.buffer ? 0 : (me.buffer.length) / me.channels;
        //return me.buffer.length;
    },

    // Returns the number of samples currently in the buffer
    numSamples: function () {
        var me = this; return me.samplesInBuffer;
    },
    // Output samples from beginning of the sample buffer. Copies demanded number
    // of samples to output and removes them from the sample buffer. If there
    // are less than 'numsample' samples in the buffer, returns all available.
    //
    // Returns number of samples copied.
    receiveSamples: function (output, maxSamples, index) {
        var num;
        var me = this;
        if (typeof output === 'number') {
            return me.$receiveSamples(output);

        }
        num = (maxSamples > me.samplesInBuffer) ? me.samplesInBuffer : maxSamples;

        // me.memcpy(me.ptrBegin(), output, me.channels * num);
        // memcpy(output, ptrBegin(), channels * sizeof(SAMPLETYPE) * num);
        me.copymemout(me.ptrBegin(), output, me.channels * num, index)
        return me.$receiveSamples(num);
    },
    copymemout: function (endIndx, samples, count, offset) {
        var me = this;
        offset = offset || 0;
        [].interpolate(endIndx, endIndx + count, function (t, i) {
            var s = me.buffer instanceof Float32Array ? me.buffer[i] : me.buffer.get(i);
            if (samples instanceof Float32Array) {
                samples[t + offset] = s;
            }
            else {
                samples.set(t + offset, s);
            }
        });
    },

    // Removes samples from the beginning of the sample buffer without copying them
    // anywhere. Used to reduce the number of samples in the buffer, when accessing
    // the sample buffer with the 'ptrBegin' function.
    $receiveSamples: function (maxSamples) {
        var me = this;
        if (maxSamples >= me.samplesInBuffer) {
            var temp;

            temp = me.samplesInBuffer;
            me.samplesInBuffer = 0;
            return temp;
        }

        me.samplesInBuffer -= maxSamples;
        me.bufferPos += maxSamples;

        return maxSamples;
    },

    // Returns nonzero if the sample buffer is empty
    isEmpty: function () {
        var me = this;
        return (me.samplesInBuffer == 0) ? 1 : 0;
    },
    clear: function () {
        var me = this;
        me.samplesInBuffer = 0;
        me.bufferPos = 0;
    },
    adjustAmountOfSamples: function (numSamples) {
        if (numSamples < me.samplesInBuffer) {
            me.samplesInBuffer = numSamples;
        }
        return me.samplesInBuffer;
    }
});﻿describe("MEPH/audio/processor/FIFOSampleBuffer.spec.js", 'MEPH.audio.processor.FIFOSampleBuffer', function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create an FIFOSampleBuffer', function () {
        var filter = new MEPH.audio.processor.FIFOSampleBuffer(1);

        expect(filter).toBeTruthy();
    });
});﻿describe("MEPH/audio/graph/AudioGraphReader.spec.js", 'MEPH.audio.graph.AudioGraphReader', function () {
    var graph, seed,
        AudioGraphReader,
        bufferParamGraph,
        playgraph,
        simpleAudio,
        graphwithaudiosource,
        largegraph, splitgraph, feathergraph, deepseed;
    beforeEach(function () {
        AudioGraphReader = MEPH.audio.graph.AudioGraphReader
        jasmine.addMatchers(MEPH.customMatchers);
        splitgraph = { "connections": [{ "id": "1f34b2b2-290d-4683-a8d4-440f12228a8e", "nodes": ["967e519f-22fb-4f93-9356-0b45fddcdd0d", "5ab31ef7-5fab-44b7-bec8-f17117bc0bbe"], "zones": ["fb210bc6-c8ef-4eee-8d3b-2e313f0bdde1", "5f56b925-9814-4a39-b87f-9c34267a20e1"] }, { "id": "c36f9969-7421-4b8b-80f5-3118b7e1dd59", "nodes": ["5ab31ef7-5fab-44b7-bec8-f17117bc0bbe", "379a6d47-9e07-4176-975f-934a294a3a8b"], "zones": ["4b2e4d35-9722-4b8e-bbb2-2e9115dbfd97", "600f3ac3-22aa-4768-9314-9dbd71637c47"] }, { "id": "8e80c0b9-df96-4b4e-96d1-b83f2d3e3788", "nodes": ["5ab31ef7-5fab-44b7-bec8-f17117bc0bbe", "4633bab1-3679-4a50-bbe0-6c258e5780db"], "zones": ["a9a8f13c-d671-4d3b-849e-750fc81433ed", "56c23bb9-f327-489e-abd9-162af923a48b"] }, { "id": "9d41b3e8-759a-41c1-8f9d-3f222267e6d3", "nodes": ["4633bab1-3679-4a50-bbe0-6c258e5780db", "deb5848a-7eb7-4f10-a2b7-36b2954d55fa"], "zones": ["837eb293-c213-4653-bae0-c444c44978ec", "9dc10352-0e14-433f-ad5f-eacc1fdd1600"] }, { "id": "c2d8add4-3a35-457c-9dbe-9eaec95c2ad9", "nodes": ["deb5848a-7eb7-4f10-a2b7-36b2954d55fa", "7d5a756b-76de-41e0-b475-fc2a7ddf42f9"], "zones": ["0f70cca3-6933-4b16-b7cb-f91d242bcfb0", "2e276453-4bd3-4f06-9b15-75e6416b34b9"] }, { "id": "88d09cbb-a34b-4e42-af6c-86978c3309aa", "nodes": ["379a6d47-9e07-4176-975f-934a294a3a8b", "7d5a756b-76de-41e0-b475-fc2a7ddf42f9"], "zones": ["6ee6e111-fb7d-4d58-9959-dedff50c4443", "e1e187f9-500a-479b-b526-0aec78afceba"] }, { "id": "c14136e0-015b-4d01-b841-3cae597bb784", "nodes": ["7d5a756b-76de-41e0-b475-fc2a7ddf42f9", "e917bb96-2d71-4da6-bd82-fc408e722ee6"], "zones": ["97a83e9d-d8e7-40ab-89d6-ddefd919fffa", "7687a91a-826b-4590-83bc-00f62875ec86"] }], "nodes": [{ "id": "967e519f-22fb-4f93-9356-0b45fddcdd0d", "position": { "x": 11, "y": 84, "z": 0 }, "data": { "id": "0afd188b-9237-4fd5-b244-4091b190eda1", "type": "MEPH.audio.graph.node.OscillatorNode", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "762980a4-1e30-4eda-8b39-ef2264f4eb0d", "options": null, "output": false, "isOutput": false }, { "name": "detune", "title": "detune", "type": "Number", "connector": null, "id": "16fbe71e-b2f7-4faf-b74e-34b88494a18e", "options": { "path": "detune.value" }, "output": false, "isOutput": false, "defaultValue": "0.71" }, { "name": "frequency", "title": "frequency", "type": "Number", "connector": null, "id": "1feeb539-f276-49d5-bb17-a7432c167a23", "options": { "path": "frequency.value" }, "output": false, "isOutput": false, "defaultValue": "0.98" }, { "name": "type", "title": "type", "type": "String", "connector": null, "id": "f157ed1d-989c-46fa-a0a1-27e2b28a715d", "options": { "values": ["sine", "square", "sawtooth", "triangle", "custom"] }, "output": false, "isOutput": false }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "fb210bc6-c8ef-4eee-8d3b-2e313f0bdde1", "output": true, "isOutput": false }] } }, { "id": "379a6d47-9e07-4176-975f-934a294a3a8b", "position": { "x": 615, "y": 333, "z": 0 }, "data": { "id": "36e6fafe-3e6c-4835-99f7-7901e1b6fb1a", "type": "MEPH.audio.graph.node.GainNode", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "600f3ac3-22aa-4768-9314-9dbd71637c47", "options": null, "output": false, "isOutput": false }, { "name": "gain", "title": "gain", "type": "Number", "connector": null, "id": "c61cf140-260b-49f5-b10e-9458ba82aac2", "options": { "path": "gain.value" }, "output": false, "isOutput": false, "defaultValue": "0.8" }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "6ee6e111-fb7d-4d58-9959-dedff50c4443", "output": true, "isOutput": false }] } }, { "id": "e917bb96-2d71-4da6-bd82-fc408e722ee6", "position": { "x": 1307, "y": 20, "z": 0 }, "data": { "id": "9bcd808a-33c1-4f87-9c97-871695a2317d", "type": "MEPH.audio.graph.node.PannerNode", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "7687a91a-826b-4590-83bc-00f62875ec86", "options": null, "output": false, "isOutput": false }, { "name": "coneInnerAngle", "title": "coneInnerAngle", "type": "Number", "connector": null, "id": "05d4d993-ba19-4120-924a-0ade0bbbfcdf", "options": null, "output": false, "isOutput": false, "defaultValue": "0.89" }, { "name": "coneOuterAngle", "title": "coneOuterAngle", "type": "Number", "connector": null, "id": "6b49a509-0bda-48f0-abda-efb23f876864", "options": null, "output": false, "isOutput": false, "defaultValue": "0.45" }, { "name": "coneOuterGain", "title": "coneOuterGain", "type": "Number", "connector": null, "id": "d3664cc2-b247-4813-a507-b8439ea902f1", "options": null, "output": false, "isOutput": false, "defaultValue": "0.18" }, { "name": "refDistance", "title": "refDistance", "type": "Number", "connector": null, "id": "c86c3601-528e-4893-8752-891f172aa737", "options": null, "output": false, "isOutput": false, "defaultValue": "0.98" }, { "name": "rolloffFactor", "title": "rolloffFactor", "type": "Number", "connector": null, "id": "cc790729-dce8-417c-a5c1-9842f7297fd1", "options": null, "output": false, "isOutput": false, "defaultValue": "0.98" }, { "name": "panningModel", "title": "panningModel", "type": "String", "connector": null, "id": "b87952e4-14fa-4487-a433-c041259c7c3c", "options": { "values": ["equalpower", "HRTF"] }, "output": false, "isOutput": false }, { "name": "distanceModel", "title": "distanceModel", "type": "String", "connector": null, "id": "bba74419-959b-4b3a-a59f-a8c043554d0a", "options": { "values": ["linear", "inverse", "exponential"] }, "output": false, "isOutput": false }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "da925b6b-2d68-4ff3-a72c-d5c30a56cec6", "output": true, "isOutput": false }] } }, { "id": "deb5848a-7eb7-4f10-a2b7-36b2954d55fa", "position": { "x": 832, "y": 94, "z": 0 }, "data": { "id": "34aebe26-f12c-4619-826c-ed1a10e972e9", "type": "MEPH.audio.graph.node.WaveShaperNode", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "9dc10352-0e14-433f-ad5f-eacc1fdd1600", "options": null, "output": false, "isOutput": false }, { "name": "curve", "title": "curve", "type": "Number", "connector": null, "id": "68bcd590-78c4-4322-8300-d30e677ac69e", "options": null, "output": false, "isOutput": false, "defaultValue": "0.54" }, { "name": "oversample", "title": "oversample", "type": "String", "connector": null, "id": "fe94eaa7-bb2d-427c-93e7-fc4ad2a72cac", "options": { "values": ["none", "2x", "4x"] }, "output": false, "isOutput": false }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "0f70cca3-6933-4b16-b7cb-f91d242bcfb0", "output": true, "isOutput": false }] } }, { "id": "7d5a756b-76de-41e0-b475-fc2a7ddf42f9", "position": { "x": 1037, "y": 51, "z": 0 }, "data": { "id": "29f7391a-962d-4f27-bc47-f7c8986c8c46", "type": "MEPH.audio.graph.node.ChannelMergerNode", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "2e276453-4bd3-4f06-9b15-75e6416b34b9", "options": { "count": 100 }, "output": false, "isOutput": false }, { "name": "buffer2", "title": "buffer2", "type": "AudioBuffer", "connector": null, "id": "e1e187f9-500a-479b-b526-0aec78afceba", "options": null, "output": false, "isOutput": false }, { "name": "buffer3", "title": "buffer3", "type": "AudioBuffer", "connector": null, "id": "0d113614-5ade-4bb7-b8e1-d6ed2c04f18c", "options": null, "output": false, "isOutput": false }, { "name": "buffer4", "title": "buffer4", "type": "AudioBuffer", "connector": null, "id": "e6e35be9-edec-4e19-8985-53be5731d787", "options": null, "output": false, "isOutput": false }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "97a83e9d-d8e7-40ab-89d6-ddefd919fffa", "output": true, "isOutput": false }] } }, { "id": "5ab31ef7-5fab-44b7-bec8-f17117bc0bbe", "position": { "x": 253, "y": 70, "z": 0 }, "data": { "id": "bb9b53dc-dad4-4698-9b03-83ee241cc183", "type": "MEPH.audio.graph.node.ChannelSplitterNode", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "5f56b925-9814-4a39-b87f-9c34267a20e1", "options": null, "output": false, "isOutput": false }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "4b2e4d35-9722-4b8e-bbb2-2e9115dbfd97", "output": true, "isOutput": false }, { "name": "buffer2", "title": "buffer2", "type": "AudioBuffer", "connector": null, "id": "a9a8f13c-d671-4d3b-849e-750fc81433ed", "output": true, "isOutput": false }, { "name": "buffer3", "title": "buffer3", "type": "AudioBuffer", "connector": null, "id": "8404b6fc-4a0c-4c8b-a403-d12568df1d9e", "output": true, "isOutput": false }, { "name": "buffer4", "title": "buffer4", "type": "AudioBuffer", "connector": null, "id": "a17e8d56-1f4e-4e72-9b45-f0b1e86cceaf", "output": true, "isOutput": false }] } }, { "id": "4633bab1-3679-4a50-bbe0-6c258e5780db", "position": { "x": 623, "y": -5, "z": 0 }, "data": { "id": "17c72b3f-40fb-495f-bf7b-7312a6351d1e", "type": "MEPH.audio.graph.node.BiquadFilter", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "56c23bb9-f327-489e-abd9-162af923a48b", "options": null, "output": false, "isOutput": false }, { "name": "q", "title": "q", "type": "Number", "connector": null, "id": "655abdd6-3943-4a08-94e4-eb6035582d39", "options": { "path": "Q.value" }, "output": false, "isOutput": false, "defaultValue": "0.45" }, { "name": "frequency", "title": "frequency", "type": "Number", "connector": null, "id": "09263290-0d91-44b2-ae2c-fa8cf572a67a", "options": { "path": "frequency.value" }, "output": false, "isOutput": false, "defaultValue": "0.36" }, { "name": "detune", "title": "detune", "type": "Number", "connector": null, "id": "2ab8f199-483b-42e6-9870-952a005cae9f", "options": { "path": "detune.value" }, "output": false, "isOutput": false, "defaultValue": "0.98" }, { "name": "gain", "title": "gain", "type": "Number", "connector": null, "id": "2aeac6bf-d685-458b-a2bf-fa7ab0c6e321", "options": { "path": "gain.value" }, "output": false, "isOutput": false, "defaultValue": "0.36" }, { "name": "type", "title": "type", "type": "String", "connector": null, "id": "1b07f544-f3fa-4a92-bbd7-1bb7dbd26016", "options": { "values": ["lowpass", "highpass", "bandpass", "lowshelf", "highshelf", "peaking", "notch", "allpass"] }, "output": false, "isOutput": false }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "837eb293-c213-4653-bae0-c444c44978ec", "output": true, "isOutput": false }] } }] };
        largegraph = { "connections": [{ "id": "e31c3889-8b37-420f-8c38-f3f0e47f1b52", "nodes": ["75418304-a0df-4199-a738-98826665e424", "c7d4b365-2df1-494f-973c-490f0e00caef"], "zones": ["75418304-a0df-4199-a738-98826665e424-bufferoutput-connector", "c7d4b365-2df1-494f-973c-490f0e00caef-bufferinput-connector"] }, { "id": "f39aa42c-aa7d-474d-a40d-1bef9d284c8e", "nodes": ["75418304-a0df-4199-a738-98826665e424", "c7d4b365-2df1-494f-973c-490f0e00caef"], "zones": ["75418304-a0df-4199-a738-98826665e424-buffer2output-connector", "c7d4b365-2df1-494f-973c-490f0e00caef-buffer2input-connector"] }, { "id": "1892e02e-3ec7-4806-b5c3-fb1c7f2a13ee", "nodes": ["c7d4b365-2df1-494f-973c-490f0e00caef", "75418304-a0df-4199-a738-98826665e424"], "zones": ["c7d4b365-2df1-494f-973c-490f0e00caef-buffer3input-connector", "75418304-a0df-4199-a738-98826665e424-buffer3output-connector"] }, { "id": "256de516-77ff-4c0c-9801-51540cfb259d", "nodes": ["75418304-a0df-4199-a738-98826665e424", "c7d4b365-2df1-494f-973c-490f0e00caef"], "zones": ["75418304-a0df-4199-a738-98826665e424-buffer4output-connector", "c7d4b365-2df1-494f-973c-490f0e00caef-buffer4input-connector"] }, { "id": "34431010-b447-4b22-94fd-6b52a73668a3", "nodes": ["7d624fe4-a172-497f-ad58-a83afca33e97", "75418304-a0df-4199-a738-98826665e424"], "zones": ["7d624fe4-a172-497f-ad58-a83afca33e97-bufferoutput-connector", "75418304-a0df-4199-a738-98826665e424-bufferinput-connector"] }, { "id": "33992ef1-be56-4920-81c1-03b1bcd7e57d", "nodes": ["813b4aaa-2315-4378-a7e3-20158a06e7a2", "7d624fe4-a172-497f-ad58-a83afca33e97"], "zones": ["813b4aaa-2315-4378-a7e3-20158a06e7a2-bufferoutput-connector", "7d624fe4-a172-497f-ad58-a83afca33e97-bufferinput-connector"] }, { "id": "fc0c859f-c827-43d4-8719-e38a622ba63c", "nodes": ["1860ca16-c3ff-4ea5-a318-86c12d34074f", "813b4aaa-2315-4378-a7e3-20158a06e7a2"], "zones": ["1860ca16-c3ff-4ea5-a318-86c12d34074f-bufferoutput-connector", "813b4aaa-2315-4378-a7e3-20158a06e7a2-bufferinput-connector"] }, { "id": "d6a6c4f6-170a-425d-a20e-93ff1dfcec63", "nodes": ["c36241d7-cf92-4f04-b692-7edc65fc3a01", "1860ca16-c3ff-4ea5-a318-86c12d34074f"], "zones": ["c36241d7-cf92-4f04-b692-7edc65fc3a01-bufferoutput-connector", "1860ca16-c3ff-4ea5-a318-86c12d34074f-bufferinput-connector"] }, { "id": "720aeb8e-42aa-4720-a1ff-f6e53d1bc66a", "nodes": ["e022d284-b611-431b-a546-9bce37a3b0e0", "87bbba5a-8e16-4deb-8c79-5755754d4fb3"], "zones": ["e022d284-b611-431b-a546-9bce37a3b0e0-bufferoutput-connector", "87bbba5a-8e16-4deb-8c79-5755754d4fb3-bufferinput-connector"] }, { "id": "a9f93b28-0087-40f3-a560-93faa575c26c", "nodes": ["635a8d95-47d9-4cbf-a527-2c3b59d872d1", "e022d284-b611-431b-a546-9bce37a3b0e0"], "zones": ["635a8d95-47d9-4cbf-a527-2c3b59d872d1-bufferoutput-connector", "e022d284-b611-431b-a546-9bce37a3b0e0-bufferinput-connector"] }, { "id": "fb94facd-3253-4222-8cb2-a448039d752b", "nodes": ["f1ccb178-b4ce-4c54-b1ad-941b1fbdf667", "635a8d95-47d9-4cbf-a527-2c3b59d872d1"], "zones": ["f1ccb178-b4ce-4c54-b1ad-941b1fbdf667-bufferoutput-connector", "635a8d95-47d9-4cbf-a527-2c3b59d872d1-bufferinput-connector"] }, { "id": "df2dbf96-c1a0-48f4-8ab8-79ffc1fe43d0", "nodes": ["afd8ab99-754a-46ad-b281-2d1b1790258c", "c7d4b365-2df1-494f-973c-490f0e00caef"], "zones": ["afd8ab99-754a-46ad-b281-2d1b1790258c-bufferinput-connector", "c7d4b365-2df1-494f-973c-490f0e00caef-bufferoutput-connector"] }, { "id": "a5457ea5-324e-4aa2-9683-522bd5c9356e", "nodes": ["afd8ab99-754a-46ad-b281-2d1b1790258c", "f1ccb178-b4ce-4c54-b1ad-941b1fbdf667"], "zones": ["afd8ab99-754a-46ad-b281-2d1b1790258c-bufferoutput-connector", "f1ccb178-b4ce-4c54-b1ad-941b1fbdf667-bufferinput-connector"] }], "nodes": [{ "id": "c7d4b365-2df1-494f-973c-490f0e00caef", "position": { "x": 626, "y": 162, "z": 0 }, "data": { "id": "95822bd5-3256-4c11-889f-cf3d630fb584", "type": "MEPH.audio.graph.node.ChannelMergerNode", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "id": "3ddff32e-ad1a-49cc-bdee-16cf17a8b47a", "options": { "count": 100 }, "output": false, "isOutput": false }, { "name": "buffer2", "title": "buffer2", "type": "AudioBuffer", "id": "789116e4-d9c8-4f65-b112-259a934c84c7", "output": true, "isOutput": false }, { "name": "buffer3", "title": "buffer3", "type": "AudioBuffer", "id": "3d26006e-5209-4154-8886-c2461a91df35", "output": true, "isOutput": false }, { "name": "buffer4", "title": "buffer4", "type": "AudioBuffer", "id": "a7c74baa-e047-4ecf-b42a-c2ac4e8a7961", "output": true, "isOutput": false }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "id": "ce6d0f2f-d7af-453a-b55f-d75734578bc4", "output": true, "isOutput": false }] } }, { "id": "75418304-a0df-4199-a738-98826665e424", "position": { "x": 404, "y": 189, "z": 0 }, "data": { "id": "ef6dab5d-27a2-4a08-b28d-34450720cc44", "type": "MEPH.audio.graph.node.ChannelSplitterNode", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "id": "45d24287-0e3f-4548-ac3c-4e364f0c6da0", "options": null, "output": false, "isOutput": false }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "id": "629884d0-eb78-4860-9df8-fc52333da4fc", "output": true, "isOutput": false }, { "name": "buffer2", "title": "buffer2", "type": "AudioBuffer", "id": "1aa6fa71-69e2-4f08-a745-ed2d4854ef41", "output": true, "isOutput": false }, { "name": "buffer3", "title": "buffer3", "type": "AudioBuffer", "id": "09b2481b-7fbc-4f01-a55c-0bf96ca4b863", "output": true, "isOutput": false }, { "name": "buffer4", "title": "buffer4", "type": "AudioBuffer", "id": "9f1c6316-ae26-4648-9e2f-ef5af63d04a5", "output": true, "isOutput": false }] } }, { "id": "7d624fe4-a172-497f-ad58-a83afca33e97", "position": { "x": 175, "y": 186, "z": 0 }, "data": { "id": "00fc8748-f986-453d-b696-3bc9a762d370", "type": "MEPH.audio.graph.node.BiquadFilter", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "id": "35dc0692-e821-4ad2-9d58-eeda4f794abc", "options": null, "output": false, "isOutput": false }, { "name": "q", "title": "q", "type": "Number", "id": "5b5e5dea-9d0d-45b9-a787-f4e2294eddca", "options": { "path": "Q.value" }, "output": false, "isOutput": false, "defaultValue": "2.14" }, { "name": "frequency", "title": "frequency", "type": "Number", "id": "7ddc0dcd-cd7e-435b-8ad5-2f2a599fe20a", "options": { "path": "frequency.value" }, "output": false, "isOutput": false, "defaultValue": "2.41" }, { "name": "detune", "title": "detune", "type": "Number", "id": "8feaaeaa-09bd-4117-a224-bbc12a226de0", "options": { "path": "detune.value" }, "output": false, "isOutput": false, "defaultValue": "3.3" }, { "name": "gain", "title": "gain", "type": "Number", "id": "2fdbe17d-7634-400d-9987-806da6bef793", "options": { "path": "gain.value" }, "output": false, "isOutput": false, "defaultValue": "3.04" }, { "name": "type", "title": "type", "type": "String", "id": "2236b7f2-d433-4c0a-8727-459c48938c99", "options": { "values": ["lowpass", "highpass", "bandpass", "lowshelf", "highshelf", "peaking", "notch", "allpass"] }, "output": false, "isOutput": false }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "id": "a6f6e4ac-4b17-481c-861e-78d69a77cbcb", "output": true, "isOutput": false }] } }, { "id": "813b4aaa-2315-4378-a7e3-20158a06e7a2", "position": { "x": -63, "y": 222, "z": 0 }, "data": { "id": "d5e763bf-e974-40ae-97bb-5c33518c7519", "type": "MEPH.audio.graph.node.DelayNode", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "id": "58000b4a-d108-4579-89f4-7dca43d0d6bc", "options": null, "output": false, "isOutput": false }, { "name": "delayTime", "title": "delayTime", "type": "Number", "id": "d34070df-a600-4b43-87b6-3a567331b10b", "options": { "path": "delayTime.value" }, "output": false, "isOutput": false, "defaultValue": "3.13" }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "id": "aa83fdb7-e5fc-4a4b-9950-1a76391a96a8", "output": true, "isOutput": false }] } }, { "id": "c36241d7-cf92-4f04-b692-7edc65fc3a01", "position": { "x": -480, "y": 131, "z": 0 }, "data": { "id": "efdbf0ae-d7ab-41e0-b46e-32b0b569072e", "type": "MEPH.audio.graph.node.AudioBufferSourceNode", "nodeInputs": [{ "name": "source", "title": "source", "type": "String", "id": "08cfe668-a636-473c-b0f1-36bda653027e", "options": null, "output": false, "isOutput": false }, { "name": "loop", "title": "loop", "type": "boolean", "id": "05ef0127-f6ec-4b92-b972-2c65df18ca83", "options": null, "output": false, "isOutput": false }, { "name": "loopEnd", "title": "loopEnd", "type": "Number", "id": "9a582f22-9661-4322-9f13-b72001113ca2", "options": null, "output": false, "isOutput": false, "defaultValue": "3.57" }, { "name": "loopStart", "title": "loopStart", "type": "Number", "id": "4dc0cf39-b6b8-4a05-a35f-f48911f929e0", "options": null, "output": false, "isOutput": false, "defaultValue": "3.93" }, { "name": "playbackRate", "title": "playbackRate", "type": "Number", "id": "6f56c083-5f9f-485c-b8e6-01f6d91b0383", "options": { "path": "playbackRate.value" }, "output": false, "isOutput": false, "defaultValue": "3.57" }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "id": "a73a15d9-c1f8-4f23-8567-7cd62efcfc20", "output": true, "isOutput": false }] } }, { "id": "1860ca16-c3ff-4ea5-a318-86c12d34074f", "position": { "x": -273, "y": 185, "z": 0 }, "data": { "id": "ca9e1828-7f15-43c9-9b6a-dd93c7e50665", "type": "MEPH.audio.graph.node.Convolver", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "id": "0330aeea-622b-429d-b455-e142f2fd0dd5", "options": null, "output": false, "isOutput": false }, { "name": "normalize", "title": "normalize", "type": "boolean", "id": "b43558ae-6bcd-4b10-acad-d7b1357f7391", "options": null, "output": false, "isOutput": false }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "id": "919488ab-1dea-4ac7-9df1-81fe2e099309", "output": true, "isOutput": false }] } }, { "id": "afd8ab99-754a-46ad-b281-2d1b1790258c", "position": { "x": 847, "y": 79, "z": 0 }, "data": { "id": "1f274eef-8f64-4654-a664-af86b0f5a7c1", "type": "MEPH.audio.graph.node.DynamicsCompressorNode", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "id": "04afe250-01f4-4beb-8ad7-f4deed45dc26", "options": null, "output": false, "isOutput": false }, { "name": "attack", "title": "attack", "type": "Number", "id": "10d7117f-d648-4830-a815-2d407ae10262", "options": { "path": "attack.value" }, "output": false, "isOutput": false }, { "name": "knee", "title": "knee", "type": "Number", "id": "b003ee10-9f5e-4da9-bd81-4077bc16b5ba", "options": { "path": "knee.value" }, "output": false, "isOutput": false }, { "name": "ratio", "title": "ratio", "type": "Number", "id": "a3717c58-4bc6-4b5e-85c7-606f1a3cbb19", "options": { "path": "ratio.value" }, "output": false, "isOutput": false, "defaultValue": "2.14" }, { "name": "reduction", "title": "reduction", "type": "Number", "id": "88d75feb-c309-4077-b56d-1ff0cb83b01c", "options": { "path": "reduction.value" }, "output": false, "isOutput": false, "defaultValue": "3.04" }, { "name": "release", "title": "release", "type": "Number", "id": "8b0044d5-ac1d-4cdc-9591-c7e682eb1810", "options": { "path": "release.value" }, "output": false, "isOutput": false }, { "name": "threshold", "title": "threshold", "type": "Number", "id": "b962f9e8-d37b-41ca-ae35-341c91d65d09", "options": { "path": "threshold.value" }, "output": false, "isOutput": false, "defaultValue": "3.3" }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "id": "7a9f479f-5a1d-4854-8e10-703de86a2898", "output": true, "isOutput": false }] } }, { "id": "f1ccb178-b4ce-4c54-b1ad-941b1fbdf667", "position": { "x": 1062, "y": 50, "z": 0 }, "data": { "id": "1931ac56-5ba9-4e10-abde-ee8e3feb1904", "type": "MEPH.audio.graph.node.GainNode", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "id": "3ec46630-76f9-47a2-a1b4-053f991121a8", "options": null, "output": false, "isOutput": false }, { "name": "gain", "title": "gain", "type": "Number", "id": "32ef6ea2-86d0-4e4d-b726-009365de5920", "options": { "path": "gain.value" }, "output": false, "isOutput": false, "defaultValue": "7.59" }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "id": "62d40b9c-4f11-40d3-a75e-ab78277fa9aa", "output": true, "isOutput": false }] } }, { "id": "635a8d95-47d9-4cbf-a527-2c3b59d872d1", "position": { "x": 1300, "y": 29, "z": 0 }, "data": { "id": "93947a33-6427-4e60-8738-4a4af852211c", "type": "MEPH.audio.graph.node.OscillatorNode", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "id": "44655c21-8a25-40db-ac36-cd8a907aab85", "options": null, "output": false, "isOutput": false }, { "name": "detune", "title": "detune", "type": "Number", "id": "b4b440ea-8770-49b1-a9a8-3edcd27f0e57", "options": { "path": "detune.value" }, "output": false, "isOutput": false, "defaultValue": "2.05" }, { "name": "frequency", "title": "frequency", "type": "Number", "id": "dd438397-3336-4968-92f7-372712dad26c", "options": { "path": "frequency.value" }, "output": false, "isOutput": false, "defaultValue": "2.32" }, { "name": "type", "title": "type", "type": "String", "id": "b0a734ea-d02e-417a-9d1b-46fac1f596a5", "options": { "values": ["sine", "square", "sawtooth", "triangle", "custom"] }, "output": false, "isOutput": false }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "id": "b8c8a263-3fb3-4530-93db-d27701ab1528", "output": true, "isOutput": false }] } }, { "id": "e022d284-b611-431b-a546-9bce37a3b0e0", "position": { "x": 1556, "y": 26, "z": 0 }, "data": { "id": "fdc7d502-e2ca-49f4-a633-0b91e534e996", "type": "MEPH.audio.graph.node.PannerNode", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "id": "1c9beda4-0d65-460e-828a-3cfd805af448", "options": null, "output": false, "isOutput": false }, { "name": "coneInnerAngle", "title": "coneInnerAngle", "type": "Number", "id": "aa77cf87-6eeb-4671-a3d4-1c1ba81a5e5a", "options": null, "output": false, "isOutput": false, "defaultValue": "3.04" }, { "name": "coneOuterAngle", "title": "coneOuterAngle", "type": "Number", "id": "1a902688-0fbe-421f-8889-ebf1c0ab82b3", "options": null, "output": false, "isOutput": false, "defaultValue": "2.5" }, { "name": "coneOuterGain", "title": "coneOuterGain", "type": "Number", "id": "5b6b08fa-3a34-406d-bd5e-480a5ca577af", "options": null, "output": false, "isOutput": false, "defaultValue": "2.68" }, { "name": "refDistance", "title": "refDistance", "type": "Number", "id": "ff17476a-4246-4010-9346-9c05a4c640d4", "options": null, "output": false, "isOutput": false, "defaultValue": "1.7" }, { "name": "rolloffFactor", "title": "rolloffFactor", "type": "Number", "id": "326a60a0-02e2-46b7-9ccb-ce3a78df4922", "options": null, "output": false, "isOutput": false, "defaultValue": "2.23" }, { "name": "panningModel", "title": "panningModel", "type": "String", "id": "4c4b23bc-3076-4d6a-8aa0-0032099b08ca", "options": { "values": ["equalpower", "HRTF"] }, "output": false, "isOutput": false }, { "name": "distanceModel", "title": "distanceModel", "type": "String", "id": "a03d1c6b-a2ad-4c90-8e8f-e6b30ce2c9cc", "options": { "values": ["linear", "inverse", "exponential"] }, "output": false, "isOutput": false }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "id": "8a9bb31b-cafa-4c0b-b9f6-042c4da4995c", "output": true, "isOutput": false }] } }, { "id": "87bbba5a-8e16-4deb-8c79-5755754d4fb3", "position": { "x": 1784, "y": 93, "z": 0 }, "data": { "id": "22f56325-0ddf-4d56-8076-e146888356ec", "type": "MEPH.audio.graph.node.WaveShaperNode", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "id": "26a6e8e0-5d5d-4462-b141-f7935f9a7b37", "options": null, "output": false, "isOutput": false }, { "name": "curve", "title": "curve", "type": "Number", "id": "d90c7380-e362-4c82-9953-f3fdf951f2cc", "options": null, "output": false, "isOutput": false, "defaultValue": "3.3" }, { "name": "oversample", "title": "oversample", "type": "String", "id": "14758a95-cea4-4031-8fbf-f7b95956c22c", "options": { "values": ["none", "2x", "4x"] }, "output": false, "isOutput": false }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "id": "182232b0-95f8-4a39-a6fd-837d6e0456ad", "output": true, "isOutput": false }] } }] }
        feathergraph = { "connections": [{ "id": "1f34b2b2-290d-4683-a8d4-440f12228a8e", "nodes": ["967e519f-22fb-4f93-9356-0b45fddcdd0d", "5ab31ef7-5fab-44b7-bec8-f17117bc0bbe"], "zones": ["fb210bc6-c8ef-4eee-8d3b-2e313f0bdde1", "5f56b925-9814-4a39-b87f-9c34267a20e1"] }, { "id": "c36f9969-7421-4b8b-80f5-3118b7e1dd59", "nodes": ["5ab31ef7-5fab-44b7-bec8-f17117bc0bbe", "379a6d47-9e07-4176-975f-934a294a3a8b"], "zones": ["4b2e4d35-9722-4b8e-bbb2-2e9115dbfd97", "600f3ac3-22aa-4768-9314-9dbd71637c47"] }, { "id": "8e80c0b9-df96-4b4e-96d1-b83f2d3e3788", "nodes": ["5ab31ef7-5fab-44b7-bec8-f17117bc0bbe", "4633bab1-3679-4a50-bbe0-6c258e5780db"], "zones": ["a9a8f13c-d671-4d3b-849e-750fc81433ed", "56c23bb9-f327-489e-abd9-162af923a48b"] }, { "id": "9d41b3e8-759a-41c1-8f9d-3f222267e6d3", "nodes": ["4633bab1-3679-4a50-bbe0-6c258e5780db", "deb5848a-7eb7-4f10-a2b7-36b2954d55fa"], "zones": ["837eb293-c213-4653-bae0-c444c44978ec", "9dc10352-0e14-433f-ad5f-eacc1fdd1600"] }, { "id": "c2d8add4-3a35-457c-9dbe-9eaec95c2ad9", "nodes": ["deb5848a-7eb7-4f10-a2b7-36b2954d55fa", "7d5a756b-76de-41e0-b475-fc2a7ddf42f9"], "zones": ["0f70cca3-6933-4b16-b7cb-f91d242bcfb0", "2e276453-4bd3-4f06-9b15-75e6416b34b9"] }, { "id": "88d09cbb-a34b-4e42-af6c-86978c3309aa", "nodes": ["379a6d47-9e07-4176-975f-934a294a3a8b", "7d5a756b-76de-41e0-b475-fc2a7ddf42f9"], "zones": ["6ee6e111-fb7d-4d58-9959-dedff50c4443", "e1e187f9-500a-479b-b526-0aec78afceba"] }, { "id": "c14136e0-015b-4d01-b841-3cae597bb784", "nodes": ["7d5a756b-76de-41e0-b475-fc2a7ddf42f9", "e917bb96-2d71-4da6-bd82-fc408e722ee6"], "zones": ["97a83e9d-d8e7-40ab-89d6-ddefd919fffa", "7687a91a-826b-4590-83bc-00f62875ec86"] }, { "id": "37dc3acd-1c4f-4916-8171-0a98d4bf1d99", "nodes": ["967e519f-22fb-4f93-9356-0b45fddcdd0d", "7d5a756b-76de-41e0-b475-fc2a7ddf42f9"], "zones": ["fb210bc6-c8ef-4eee-8d3b-2e313f0bdde1", "0d113614-5ade-4bb7-b8e1-d6ed2c04f18c"] }], "nodes": [{ "id": "967e519f-22fb-4f93-9356-0b45fddcdd0d", "position": { "x": 44, "y": 210, "z": 0 }, "data": { "id": "0afd188b-9237-4fd5-b244-4091b190eda1", "type": "MEPH.audio.graph.node.OscillatorNode", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "762980a4-1e30-4eda-8b39-ef2264f4eb0d", "options": null, "output": false, "isOutput": false }, { "name": "detune", "title": "detune", "type": "Number", "connector": null, "id": "16fbe71e-b2f7-4faf-b74e-34b88494a18e", "options": { "path": "detune.value" }, "output": false, "isOutput": false, "defaultValue": "0.71" }, { "name": "frequency", "title": "frequency", "type": "Number", "connector": null, "id": "1feeb539-f276-49d5-bb17-a7432c167a23", "options": { "path": "frequency.value" }, "output": false, "isOutput": false, "defaultValue": "0.98" }, { "name": "type", "title": "type", "type": "String", "connector": null, "id": "f157ed1d-989c-46fa-a0a1-27e2b28a715d", "options": { "values": ["sine", "square", "sawtooth", "triangle", "custom"] }, "output": false, "isOutput": false }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "fb210bc6-c8ef-4eee-8d3b-2e313f0bdde1", "output": true, "isOutput": false }] } }, { "id": "379a6d47-9e07-4176-975f-934a294a3a8b", "position": { "x": 615, "y": 333, "z": 0 }, "data": { "id": "36e6fafe-3e6c-4835-99f7-7901e1b6fb1a", "type": "MEPH.audio.graph.node.GainNode", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "600f3ac3-22aa-4768-9314-9dbd71637c47", "options": null, "output": false, "isOutput": false }, { "name": "gain", "title": "gain", "type": "Number", "connector": null, "id": "c61cf140-260b-49f5-b10e-9458ba82aac2", "options": { "path": "gain.value" }, "output": false, "isOutput": false, "defaultValue": "0.8" }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "6ee6e111-fb7d-4d58-9959-dedff50c4443", "output": true, "isOutput": false }] } }, { "id": "e917bb96-2d71-4da6-bd82-fc408e722ee6", "position": { "x": 1307, "y": 20, "z": 0 }, "data": { "id": "9bcd808a-33c1-4f87-9c97-871695a2317d", "type": "MEPH.audio.graph.node.PannerNode", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "7687a91a-826b-4590-83bc-00f62875ec86", "options": null, "output": false, "isOutput": false }, { "name": "coneInnerAngle", "title": "coneInnerAngle", "type": "Number", "connector": null, "id": "05d4d993-ba19-4120-924a-0ade0bbbfcdf", "options": null, "output": false, "isOutput": false, "defaultValue": "0.89" }, { "name": "coneOuterAngle", "title": "coneOuterAngle", "type": "Number", "connector": null, "id": "6b49a509-0bda-48f0-abda-efb23f876864", "options": null, "output": false, "isOutput": false, "defaultValue": "0.45" }, { "name": "coneOuterGain", "title": "coneOuterGain", "type": "Number", "connector": null, "id": "d3664cc2-b247-4813-a507-b8439ea902f1", "options": null, "output": false, "isOutput": false, "defaultValue": "0.18" }, { "name": "refDistance", "title": "refDistance", "type": "Number", "connector": null, "id": "c86c3601-528e-4893-8752-891f172aa737", "options": null, "output": false, "isOutput": false, "defaultValue": "0.98" }, { "name": "rolloffFactor", "title": "rolloffFactor", "type": "Number", "connector": null, "id": "cc790729-dce8-417c-a5c1-9842f7297fd1", "options": null, "output": false, "isOutput": false, "defaultValue": "0.98" }, { "name": "panningModel", "title": "panningModel", "type": "String", "connector": null, "id": "b87952e4-14fa-4487-a433-c041259c7c3c", "options": { "values": ["equalpower", "HRTF"] }, "output": false, "isOutput": false }, { "name": "distanceModel", "title": "distanceModel", "type": "String", "connector": null, "id": "bba74419-959b-4b3a-a59f-a8c043554d0a", "options": { "values": ["linear", "inverse", "exponential"] }, "output": false, "isOutput": false }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "da925b6b-2d68-4ff3-a72c-d5c30a56cec6", "output": true, "isOutput": false }] } }, { "id": "deb5848a-7eb7-4f10-a2b7-36b2954d55fa", "position": { "x": 832, "y": 94, "z": 0 }, "data": { "id": "34aebe26-f12c-4619-826c-ed1a10e972e9", "type": "MEPH.audio.graph.node.WaveShaperNode", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "9dc10352-0e14-433f-ad5f-eacc1fdd1600", "options": null, "output": false, "isOutput": false }, { "name": "curve", "title": "curve", "type": "Number", "connector": null, "id": "68bcd590-78c4-4322-8300-d30e677ac69e", "options": null, "output": false, "isOutput": false, "defaultValue": "0.54" }, { "name": "oversample", "title": "oversample", "type": "String", "connector": null, "id": "fe94eaa7-bb2d-427c-93e7-fc4ad2a72cac", "options": { "values": ["none", "2x", "4x"] }, "output": false, "isOutput": false }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "0f70cca3-6933-4b16-b7cb-f91d242bcfb0", "output": true, "isOutput": false }] } }, { "id": "7d5a756b-76de-41e0-b475-fc2a7ddf42f9", "position": { "x": 1037, "y": 51, "z": 0 }, "data": { "id": "29f7391a-962d-4f27-bc47-f7c8986c8c46", "type": "MEPH.audio.graph.node.ChannelMergerNode", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "2e276453-4bd3-4f06-9b15-75e6416b34b9", "options": { "count": 100 }, "output": false, "isOutput": false }, { "name": "buffer2", "title": "buffer2", "type": "AudioBuffer", "connector": null, "id": "e1e187f9-500a-479b-b526-0aec78afceba", "options": null, "output": false, "isOutput": false }, { "name": "buffer3", "title": "buffer3", "type": "AudioBuffer", "connector": null, "id": "0d113614-5ade-4bb7-b8e1-d6ed2c04f18c", "options": null, "output": false, "isOutput": false }, { "name": "buffer4", "title": "buffer4", "type": "AudioBuffer", "connector": null, "id": "e6e35be9-edec-4e19-8985-53be5731d787", "options": null, "output": false, "isOutput": false }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "97a83e9d-d8e7-40ab-89d6-ddefd919fffa", "output": true, "isOutput": false }] } }, { "id": "5ab31ef7-5fab-44b7-bec8-f17117bc0bbe", "position": { "x": 311, "y": 44, "z": 0 }, "data": { "id": "bb9b53dc-dad4-4698-9b03-83ee241cc183", "type": "MEPH.audio.graph.node.ChannelSplitterNode", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "5f56b925-9814-4a39-b87f-9c34267a20e1", "options": null, "output": false, "isOutput": false }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "4b2e4d35-9722-4b8e-bbb2-2e9115dbfd97", "output": true, "isOutput": false }, { "name": "buffer2", "title": "buffer2", "type": "AudioBuffer", "connector": null, "id": "a9a8f13c-d671-4d3b-849e-750fc81433ed", "output": true, "isOutput": false }, { "name": "buffer3", "title": "buffer3", "type": "AudioBuffer", "connector": null, "id": "8404b6fc-4a0c-4c8b-a403-d12568df1d9e", "output": true, "isOutput": false }, { "name": "buffer4", "title": "buffer4", "type": "AudioBuffer", "connector": null, "id": "a17e8d56-1f4e-4e72-9b45-f0b1e86cceaf", "output": true, "isOutput": false }] } }, { "id": "4633bab1-3679-4a50-bbe0-6c258e5780db", "position": { "x": 623, "y": -5, "z": 0 }, "data": { "id": "17c72b3f-40fb-495f-bf7b-7312a6351d1e", "type": "MEPH.audio.graph.node.BiquadFilter", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "56c23bb9-f327-489e-abd9-162af923a48b", "options": null, "output": false, "isOutput": false }, { "name": "q", "title": "q", "type": "Number", "connector": null, "id": "655abdd6-3943-4a08-94e4-eb6035582d39", "options": { "path": "Q.value" }, "output": false, "isOutput": false, "defaultValue": "0.45" }, { "name": "frequency", "title": "frequency", "type": "Number", "connector": null, "id": "09263290-0d91-44b2-ae2c-fa8cf572a67a", "options": { "path": "frequency.value" }, "output": false, "isOutput": false, "defaultValue": "0.36" }, { "name": "detune", "title": "detune", "type": "Number", "connector": null, "id": "2ab8f199-483b-42e6-9870-952a005cae9f", "options": { "path": "detune.value" }, "output": false, "isOutput": false, "defaultValue": "0.98" }, { "name": "gain", "title": "gain", "type": "Number", "connector": null, "id": "2aeac6bf-d685-458b-a2bf-fa7ab0c6e321", "options": { "path": "gain.value" }, "output": false, "isOutput": false, "defaultValue": "0.36" }, { "name": "type", "title": "type", "type": "String", "connector": null, "id": "1b07f544-f3fa-4a92-bbd7-1bb7dbd26016", "options": { "values": ["lowpass", "highpass", "bandpass", "lowshelf", "highshelf", "peaking", "notch", "allpass"] }, "output": false, "isOutput": false }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "837eb293-c213-4653-bae0-c444c44978ec", "output": true, "isOutput": false }] } }] };
        // seed = { "connections": [{ "id": "6634500d-dbe9-494a-abde-0231e7351ea9", "nodes": ["6ffc6b32-90ef-445a-9242-72c11fb90c82", "ee5bda49-d7ea-43a3-83af-6d0c24de1f56"], "zones": ["6ffc6b32-90ef-445a-9242-72c11fb90c82-bufferinput-connector", "ee5bda49-d7ea-43a3-83af-6d0c24de1f56-bufferoutput-connector"] }, { "id": "0b80fbbe-fd76-4164-bf08-5af3f1cee0d5", "nodes": ["6ffc6b32-90ef-445a-9242-72c11fb90c82", "ee5bda49-d7ea-43a3-83af-6d0c24de1f56"], "zones": ["6ffc6b32-90ef-445a-9242-72c11fb90c82-normalizeinput-connector", "ee5bda49-d7ea-43a3-83af-6d0c24de1f56-bufferoutput-connector"] }, { "id": "b799e998-9585-4fa9-a69d-4629ddfe1dda", "nodes": ["6ffc6b32-90ef-445a-9242-72c11fb90c82", "623f508d-97d3-4532-aadf-47b8483bc234"], "zones": ["6ffc6b32-90ef-445a-9242-72c11fb90c82-bufferoutput-connector", "623f508d-97d3-4532-aadf-47b8483bc234-bufferinput-connector"] }, { "id": "588f2211-b68f-4f5a-a272-9ee3f0998407", "nodes": ["623f508d-97d3-4532-aadf-47b8483bc234", "0a90b8ef-75a1-4df7-ab03-4ef23a0b7983"], "zones": ["623f508d-97d3-4532-aadf-47b8483bc234-bufferoutput-connector", "0a90b8ef-75a1-4df7-ab03-4ef23a0b7983-bufferinput-connector"] }, { "id": "d9395206-26db-4132-aadf-3cc932bc69e9", "nodes": ["0a90b8ef-75a1-4df7-ab03-4ef23a0b7983", "ee5bda49-d7ea-43a3-83af-6d0c24de1f56"], "zones": ["0a90b8ef-75a1-4df7-ab03-4ef23a0b7983-attack-connector", "ee5bda49-d7ea-43a3-83af-6d0c24de1f56-bufferoutput-connector"] }, { "id": "dbf6afd6-ee2f-4d44-829b-648a9fe4eed1", "nodes": ["0a90b8ef-75a1-4df7-ab03-4ef23a0b7983", "ee5bda49-d7ea-43a3-83af-6d0c24de1f56"], "zones": ["0a90b8ef-75a1-4df7-ab03-4ef23a0b7983-knee-connector", "ee5bda49-d7ea-43a3-83af-6d0c24de1f56-bufferoutput-connector"] }, { "id": "0ce7919e-6cb4-4f6c-8542-a379d3e52c78", "nodes": ["0a90b8ef-75a1-4df7-ab03-4ef23a0b7983", "ee5bda49-d7ea-43a3-83af-6d0c24de1f56"], "zones": ["0a90b8ef-75a1-4df7-ab03-4ef23a0b7983-ratio-connector", "ee5bda49-d7ea-43a3-83af-6d0c24de1f56-bufferoutput-connector"] }, { "id": "db902eb3-827e-4f9f-a865-aaffa4fb11b4", "nodes": ["623f508d-97d3-4532-aadf-47b8483bc234", "d8a85c16-c09d-4b50-a553-23d493b7633d"], "zones": ["623f508d-97d3-4532-aadf-47b8483bc234-buffer2output-connector", "d8a85c16-c09d-4b50-a553-23d493b7633d-bufferinput-connector"] }, { "id": "db895ac4-c900-4885-862e-94420882b5a6", "nodes": ["0a90b8ef-75a1-4df7-ab03-4ef23a0b7983", "39d00021-74f6-4dca-abaa-01f18633c31a"], "zones": ["0a90b8ef-75a1-4df7-ab03-4ef23a0b7983-bufferoutput-connector", "39d00021-74f6-4dca-abaa-01f18633c31a-bufferinput-connector"] }, { "id": "f299e869-5883-464b-96ad-a4718292da60", "nodes": ["d8a85c16-c09d-4b50-a553-23d493b7633d", "39d00021-74f6-4dca-abaa-01f18633c31a"], "zones": ["d8a85c16-c09d-4b50-a553-23d493b7633d-bufferoutput-connector", "39d00021-74f6-4dca-abaa-01f18633c31a-bufferinput-connector"] }], "nodes": [{ "id": "ee5bda49-d7ea-43a3-83af-6d0c24de1f56", "position": { "x": 146, "y": 262, "z": 0 }, "data": { "id": "1d51ee23-3f12-45e4-82a1-01a33d01cbfd", "type": "MEPH.audio.graph.node.InputNode", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": "6ffc6b32-90ef-445a-9242-72c11fb90c82-bufferinput-connector", "id": "2f586a10-52cd-4607-a830-fe265048ff18", "options": null, "output": false }, { "name": "convolver normalize", "title": "convolver normalize", "type": "boolean", "connector": "6ffc6b32-90ef-445a-9242-72c11fb90c82-normalizeinput-connector", "id": "9c04d317-b752-4823-9b6c-03e10a9d7e38", "options": null, "output": false }, { "name": "dyn attack", "title": "dyn attack", "type": "Number", "connector": "0a90b8ef-75a1-4df7-ab03-4ef23a0b7983-attack-connector", "id": "62b3289e-95ce-49f5-983f-1cb278946d92", "options": null, "output": false }, { "name": "dyn knee", "title": "dyn knee", "type": "Number", "connector": "0a90b8ef-75a1-4df7-ab03-4ef23a0b7983-knee-connector", "id": "de20033b-3c68-4527-8fe9-46ca67d8a96e", "options": null, "output": false }, { "name": "dyn ratio", "title": "dyn ratio", "type": "Number", "connector": "0a90b8ef-75a1-4df7-ab03-4ef23a0b7983-ratio-connector", "id": "c9110427-c987-4935-a66b-53ecf663c847", "options": null, "output": false }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "Anything", "connector": null, "id": "4a29096e-971a-44c3-9c9a-72435c990cb5", "output": true, "isOutput": false }] } }, { "id": "39d00021-74f6-4dca-abaa-01f18633c31a", "position": { "x": 1567, "y": 206, "z": 0 }, "data": { "id": "805bea5b-05eb-425d-ab0c-857aec24ad66", "type": "MEPH.audio.graph.node.OutputNode", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "Anything", "connector": null, "id": "6f624af9-e991-44fd-a238-c0a8322dd133", "options": null, "output": false, "isOutput": false }], "nodeOutputs": [{ "name": "gain output", "title": "gain output", "type": "AudioBuffer", "connector": "0a90b8ef-75a1-4df7-ab03-4ef23a0b7983-bufferoutput-connector", "id": "e525d3be-8e54-473c-9542-4f73c9e2849b", "output": true }, { "name": "dynamic out", "title": "dynamic out", "type": "AudioBuffer", "connector": "d8a85c16-c09d-4b50-a553-23d493b7633d-bufferoutput-connector", "id": "c6227500-909e-4760-b41f-0cc186553bdf", "output": true }] } }, { "id": "6ffc6b32-90ef-445a-9242-72c11fb90c82", "position": { "x": 427, "y": 122, "z": 0 }, "data": { "id": "68ac4d71-5acc-4e32-8e8d-6a6cec6fc206", "type": "MEPH.audio.graph.node.Convolver", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "ad868211-358f-44b3-83dd-cc032f2427f7", "options": null, "output": false, "isOutput": false }, { "name": "normalize", "title": "normalize", "type": "boolean", "connector": null, "id": "23e7c23c-01d9-4235-9ce9-474fe3e4c317", "options": null, "output": false, "isOutput": false }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "649bb2c8-ae1f-40d0-8889-d5900b85db72", "output": true, "isOutput": false }] } }, { "id": "623f508d-97d3-4532-aadf-47b8483bc234", "position": { "x": 685, "y": 122, "z": 0 }, "data": { "id": "39301a5e-4f74-4e76-8604-c92304b86108", "type": "MEPH.audio.graph.node.ChannelSplitterNode", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "007fdfbe-a36e-43d6-931b-a5f8058e0685", "options": null, "output": false, "isOutput": false }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "d39b2505-508c-450d-a03b-2ed7e5e3c709", "output": true, "isOutput": false }, { "name": "buffer2", "title": "buffer2", "type": "AudioBuffer", "connector": null, "id": "811cdbfb-ea1e-4d78-8c27-53079387aac7", "output": true, "isOutput": false }, { "name": "buffer3", "title": "buffer3", "type": "AudioBuffer", "connector": null, "id": "f0ce017c-f558-43ed-ab61-9f5acd18b52e", "output": true, "isOutput": false }, { "name": "buffer4", "title": "buffer4", "type": "AudioBuffer", "connector": null, "id": "78a42222-2dea-4f3c-adc1-f7c135b7fbf6", "output": true, "isOutput": false }] } }, { "id": "0a90b8ef-75a1-4df7-ab03-4ef23a0b7983", "position": { "x": 981, "y": 150, "z": 0 }, "data": { "id": "ddeecf54-7b50-49a0-9ac2-a1ba0b1aef57", "type": "MEPH.audio.graph.node.DynamicsCompressorNode", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "2b2b04d7-eeba-40be-8a31-a3e99bce5ef8", "options": null, "output": false, "isOutput": false }, { "name": "attack", "title": "attack", "type": "Number", "connector": null, "id": "d0adb5da-6185-46b2-b921-4d4c8e9de391", "options": { "path": "attack.value" }, "output": false, "isOutput": false }, { "name": "knee", "title": "knee", "type": "Number", "connector": null, "id": "cc52a4d4-6235-4ba5-bccc-9426ed0889b8", "options": { "path": "knee.value" }, "output": false, "isOutput": false }, { "name": "ratio", "title": "ratio", "type": "Number", "connector": null, "id": "010917da-f370-421c-9d9c-4c01ca7163ef", "options": { "path": "ratio.value" }, "output": false, "isOutput": false }, { "name": "reduction", "title": "reduction", "type": "Number", "connector": null, "id": "dea5195d-e488-4224-8260-9b3ce9e91902", "options": { "path": "reduction.value" }, "output": false, "isOutput": false, "defaultValue": "0.18" }, { "name": "release", "title": "release", "type": "Number", "connector": null, "id": "d944d433-498d-4379-9263-3556f1b39d50", "options": { "path": "release.value" }, "output": false, "isOutput": false }, { "name": "threshold", "title": "threshold", "type": "Number", "connector": null, "id": "927a2ede-783b-48ae-bef2-da2d86fd8ec7", "options": { "path": "threshold.value" }, "output": false, "isOutput": false, "defaultValue": "0.45" }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "080c5c05-a9fd-4d2d-baa9-6d9f55c30faa", "output": true, "isOutput": false }] } }, { "id": "d8a85c16-c09d-4b50-a553-23d493b7633d", "position": { "x": 1202, "y": 48, "z": 0 }, "data": { "id": "866faa00-3713-406e-9a78-ff97c6d0fb48", "type": "MEPH.audio.graph.node.GainNode", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "9f27bba3-98e3-42d3-8074-af49e88f0792", "options": null, "output": false, "isOutput": false }, { "name": "gain", "title": "gain", "type": "Number", "connector": null, "id": "c63af8e0-a216-4efb-aa62-aeb6a7e73045", "options": { "path": "gain.value" }, "output": false, "isOutput": false }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "9d6b1fe4-18cb-46e3-8370-5a101ace1ee2", "output": true, "isOutput": false }] } }] };
        deepseed = { "connections": [{ "id": "737100ff-3477-4d68-a18b-45ff3439750c", "nodes": ["5e90cbee-6f1a-49f8-9518-8d613b214f0b", "7c2621b9-e02a-45fb-a85f-1a423912607c"], "zones": ["17e8b5e3-9d54-4c5f-a25a-52eed6aad94c", "d135f2f1-187a-4728-ba5a-0cbf4b9a7a7c"] }, { "id": "af3d598c-a152-46eb-b648-933263a862da", "nodes": ["7c2621b9-e02a-45fb-a85f-1a423912607c", "81d0c86f-32e6-4c41-975b-37da8e90ada4"], "zones": ["185ce246-c5d0-436f-92e1-b08bc4d6ae43", "30bd6c41-2ef9-4885-a769-dd5a8192a97e"] }], "nodes": [{ "id": "7c2621b9-e02a-45fb-a85f-1a423912607c", "position": { "x": 492, "y": 198, "z": 0 }, "data": { "id": "40dbaf32-4b01-4764-9688-c84c13fa2f78", "type": "MEPH.audio.graph.node.GeneratedNode", "nodeInputs": [{ "name": "bufferinput", "title": "bufferinput", "type": "AudioBuffer", "connector": null, "id": "d929cd4f-6d68-4a06-821e-8bb341328604", "options": null, "output": false, "isOutput": false }, { "name": "q", "title": "q", "type": "Number", "connector": null, "id": "402434e5-1396-410c-bcf6-5f215e16e2a4", "options": null, "output": false, "isOutput": false }, { "name": "frequency", "title": "frequency", "type": "Number", "connector": null, "id": "4f48f894-e1f9-43b2-843f-9abe091a6b18", "options": null, "output": false, "isOutput": false }, { "name": "detune", "title": "detune", "type": "Number", "connector": null, "id": "589ba60e-8aeb-4a0b-9b30-a22a82c8fb84", "options": null, "output": false, "isOutput": false }], "nodeOutputs": [{ "name": "bufferoutput", "title": "bufferoutput", "type": "AudioBuffer", "connector": null, "id": "84b4fb41-1d73-4d78-8f2f-d04e26eba381", "output": true, "isOutput": false }], "subGraph": { "connections": [{ "id": "51e4d9a7-0491-4245-bf3c-40ce38fe6000", "nodes": ["0d7c8393-f5df-4d28-908b-3c2655e5c759", "3945da3b-5700-43d1-a09e-c56027b47651"], "zones": ["d135f2f1-187a-4728-ba5a-0cbf4b9a7a7c", "191c304a-af83-45c6-b93b-f50efed64256"] }, { "id": "a1c5f26e-d358-4de1-aa16-8abcec314324", "nodes": ["0d7c8393-f5df-4d28-908b-3c2655e5c759", "3945da3b-5700-43d1-a09e-c56027b47651"], "zones": ["179f29fa-6ade-477e-bb27-0f16d73c539f", "191c304a-af83-45c6-b93b-f50efed64256"] }, { "id": "789ef443-4899-4ce6-99d0-a4830f47863f", "nodes": ["0d7c8393-f5df-4d28-908b-3c2655e5c759", "3945da3b-5700-43d1-a09e-c56027b47651"], "zones": ["821e7aac-4933-4c02-8a75-66ac48b47b17", "191c304a-af83-45c6-b93b-f50efed64256"] }, { "id": "3cf49bab-10dc-43bd-9e16-fb090c597c6a", "nodes": ["0d7c8393-f5df-4d28-908b-3c2655e5c759", "3945da3b-5700-43d1-a09e-c56027b47651"], "zones": ["53c23498-e159-4bb3-8cbc-dcfe7db32d68", "191c304a-af83-45c6-b93b-f50efed64256"] }, { "id": "096d56c1-2312-4b7e-951b-4b56b0fa84a3", "nodes": ["0d7c8393-f5df-4d28-908b-3c2655e5c759", "79c36468-18ba-405d-8f95-a3928cceed79"], "zones": ["185ce246-c5d0-436f-92e1-b08bc4d6ae43", "454f9c18-f047-47e8-ab29-da1dc5ec8eea"] }], "nodes": [{ "id": "3945da3b-5700-43d1-a09e-c56027b47651", "position": { "x": 0, "y": 0, "z": 0 }, "data": { "id": "6b241096-8024-4f84-ae5b-3e4ea5ff0abb", "type": "MEPH.audio.graph.node.InputNode", "nodeInputs": [{ "name": "bufferinput", "title": "bufferinput", "type": "AudioBuffer", "connector": null, "id": "d135f2f1-187a-4728-ba5a-0cbf4b9a7a7c", "options": null, "output": false, "alternateId": "input_cc2af718_1543_42fb_a715_c331e407001e" }, { "name": "q", "title": "q", "type": "Number", "connector": null, "id": "179f29fa-6ade-477e-bb27-0f16d73c539f", "options": null, "output": false, "alternateId": "input_8cc7bfc9_cc3f_4b87_b3ba_9e0a6b74fff2" }, { "name": "frequency", "title": "frequency", "type": "Number", "connector": null, "id": "821e7aac-4933-4c02-8a75-66ac48b47b17", "options": null, "output": false, "alternateId": "input_e65850d3_b369_42ba_b0ab_85d079487b49" }, { "name": "detune", "title": "detune", "type": "Number", "connector": null, "id": "53c23498-e159-4bb3-8cbc-dcfe7db32d68", "options": null, "output": false, "alternateId": "input_4f648e0a_7ce8_4d09_8d9f_cf78522cea39" }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "Anything", "connector": null, "id": "191c304a-af83-45c6-b93b-f50efed64256", "output": true, "isOutput": false }] } }, { "id": "79c36468-18ba-405d-8f95-a3928cceed79", "position": { "x": 953, "y": 217, "z": 0 }, "data": { "id": "5a46043a-dc5d-46b2-a479-58bb29137be3", "type": "MEPH.audio.graph.node.OutputNode", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "Anything", "connector": null, "id": "454f9c18-f047-47e8-ab29-da1dc5ec8eea", "options": null, "output": false, "isOutput": false }], "nodeOutputs": [{ "name": "bufferoutput", "title": "bufferoutput", "type": "AudioBuffer", "connector": null, "id": "185ce246-c5d0-436f-92e1-b08bc4d6ae43", "output": true, "alternateId": "output_a903165f_c4cb_4422_9ae2_f373b31f07e6" }] } }, { "id": "0d7c8393-f5df-4d28-908b-3c2655e5c759", "position": { "x": 537, "y": 71, "z": 0 }, "data": { "id": "dd2ce35b-bbba-4b22-9141-ae14426c5f16", "type": "MEPH.audio.graph.node.BiquadFilter", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "d135f2f1-187a-4728-ba5a-0cbf4b9a7a7c", "options": null, "output": false, "isOutput": false }, { "name": "q", "title": "q", "type": "Number", "connector": null, "id": "179f29fa-6ade-477e-bb27-0f16d73c539f", "options": { "path": "Q.value" }, "output": false, "isOutput": false }, { "name": "frequency", "title": "frequency", "type": "Number", "connector": null, "id": "821e7aac-4933-4c02-8a75-66ac48b47b17", "options": { "path": "frequency.value" }, "output": false, "isOutput": false }, { "name": "detune", "title": "detune", "type": "Number", "connector": null, "id": "53c23498-e159-4bb3-8cbc-dcfe7db32d68", "options": { "path": "detune.value" }, "output": false, "isOutput": false }, { "name": "gain", "title": "gain", "type": "Number", "connector": null, "id": "757670ce-3cda-4c20-8f03-2b1430c83f62", "options": { "path": "gain.value" }, "output": false, "isOutput": false }, { "name": "type", "title": "type", "type": "String", "connector": null, "id": "06235705-2d4a-434c-aa78-48f27b315c08", "options": { "values": ["lowpass", "highpass", "bandpass", "lowshelf", "highshelf", "peaking", "notch", "allpass"] }, "output": false, "isOutput": false }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "185ce246-c5d0-436f-92e1-b08bc4d6ae43", "output": true, "isOutput": false }] } }] } } }, { "id": "5e90cbee-6f1a-49f8-9518-8d613b214f0b", "position": { "x": 197, "y": 163, "z": 0 }, "data": { "id": "638ece8b-3bce-4bed-a678-1f978ecb2dde", "type": "MEPH.audio.graph.node.Convolver", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "ddb7a792-ac65-463a-8014-05a618e73b81", "options": null, "output": false, "isOutput": false }, { "name": "normalize", "title": "normalize", "type": "boolean", "connector": null, "id": "7ac55034-6e3d-4a6e-81b2-56224e5001f3", "options": null, "output": false, "isOutput": false }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "17e8b5e3-9d54-4c5f-a25a-52eed6aad94c", "output": true, "isOutput": false }] } }, { "id": "81d0c86f-32e6-4c41-975b-37da8e90ada4", "position": { "x": 864, "y": 154, "z": 0 }, "data": { "id": "732ebb14-a2eb-4766-bf7c-9b8e7524acaa", "type": "MEPH.audio.graph.node.BiquadFilter", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "30bd6c41-2ef9-4885-a769-dd5a8192a97e", "options": null, "output": false, "isOutput": false }, { "name": "q", "title": "q", "type": "Number", "connector": null, "id": "310197ba-3f9d-4ddc-857a-04bfff07713d", "options": { "path": "Q.value" }, "output": false, "isOutput": false }, { "name": "frequency", "title": "frequency", "type": "Number", "connector": null, "id": "9d7bf45e-cb8c-42b7-8032-4a9769aebf4f", "options": { "path": "frequency.value" }, "output": false, "isOutput": false }, { "name": "detune", "title": "detune", "type": "Number", "connector": null, "id": "622a2e68-254e-4b3d-96ac-7af686a3840b", "options": { "path": "detune.value" }, "output": false, "isOutput": false }, { "name": "gain", "title": "gain", "type": "Number", "connector": null, "id": "f4e23fe9-6aad-400e-81ac-839abe0666fc", "options": { "path": "gain.value" }, "output": false, "isOutput": false }, { "name": "type", "title": "type", "type": "String", "connector": null, "id": "bf69e26f-49fa-4dfe-883e-396bbef0d65a", "options": { "values": ["lowpass", "highpass", "bandpass", "lowshelf", "highshelf", "peaking", "notch", "allpass"] }, "output": false, "isOutput": false }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "a7ed3adf-082e-4db7-8355-dcae6158a900", "output": true, "isOutput": false }] } }] };
        seed = { "connections": [{ "id": "1fd470e0-e09d-4c65-b512-3f2001227685", "nodes": ["df585831-ac49-443f-bdae-c48fc85183e3", "037a064b-374d-40eb-9648-4e7ca5591baf"], "zones": ["1ca9a3a1-0642-4054-b654-3cc2f896619d", "9c782c6e-2ebf-4afc-9f17-d8e8874e44f5"] }, { "id": "acbbaf26-525e-420b-8ac5-20ef066efd09", "nodes": ["df585831-ac49-443f-bdae-c48fc85183e3", "037a064b-374d-40eb-9648-4e7ca5591baf"], "zones": ["f7f889d7-152c-42fb-b5d4-74a0d802bfcc", "9c782c6e-2ebf-4afc-9f17-d8e8874e44f5"] }, { "id": "c27827d0-b8e2-49d3-b2f6-3ff2827c13f8", "nodes": ["df585831-ac49-443f-bdae-c48fc85183e3", "037a064b-374d-40eb-9648-4e7ca5591baf"], "zones": ["6d7a696b-c1e9-4cf7-8b29-c8213f528b6e", "9c782c6e-2ebf-4afc-9f17-d8e8874e44f5"] }, { "id": "f90a7359-7124-4e01-ade3-b6c394f28a6d", "nodes": ["df585831-ac49-443f-bdae-c48fc85183e3", "037a064b-374d-40eb-9648-4e7ca5591baf"], "zones": ["4905939a-f5ab-44ff-8d8f-1e2973d3eafe", "9c782c6e-2ebf-4afc-9f17-d8e8874e44f5"] }, { "id": "48a4446f-6537-4059-a490-31cede7ac8a1", "nodes": ["df585831-ac49-443f-bdae-c48fc85183e3", "cef80e71-f0b9-45ef-99c6-67ee4554745c"], "zones": ["13d343a0-9cc4-4c7d-8674-25069bdca343", "bfee62ed-9a4f-4fab-875b-3e24c87b8e06"] }], "nodes": [{ "id": "037a064b-374d-40eb-9648-4e7ca5591baf", "position": { "x": 0, "y": 0, "z": 0 }, "data": { "id": "6b241096-8024-4f84-ae5b-3e4ea5ff0abb", "type": "MEPH.audio.graph.node.InputNode", "nodeInputs": [{ "name": "bufferinput", "title": "bufferinput", "type": "AudioBuffer", "connector": null, "id": "1ca9a3a1-0642-4054-b654-3cc2f896619d", "options": null, "output": false }, { "name": "q", "title": "q", "type": "Number", "connector": null, "id": "f7f889d7-152c-42fb-b5d4-74a0d802bfcc", "options": null, "output": false }, { "name": "frequency", "title": "frequency", "type": "Number", "connector": null, "id": "6d7a696b-c1e9-4cf7-8b29-c8213f528b6e", "options": null, "output": false }, { "name": "detune", "title": "detune", "type": "Number", "connector": null, "id": "4905939a-f5ab-44ff-8d8f-1e2973d3eafe", "options": null, "output": false }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "Anything", "connector": null, "id": "9c782c6e-2ebf-4afc-9f17-d8e8874e44f5", "output": true, "isOutput": false }] } }, { "id": "cef80e71-f0b9-45ef-99c6-67ee4554745c", "position": { "x": 953, "y": 217, "z": 0 }, "data": { "id": "5a46043a-dc5d-46b2-a479-58bb29137be3", "type": "MEPH.audio.graph.node.OutputNode", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "Anything", "connector": null, "id": "bfee62ed-9a4f-4fab-875b-3e24c87b8e06", "options": null, "output": false, "isOutput": false }], "nodeOutputs": [{ "name": "bufferoutput", "title": "bufferoutput", "type": "AudioBuffer", "connector": null, "id": "13d343a0-9cc4-4c7d-8674-25069bdca343", "output": true }] } }, { "id": "df585831-ac49-443f-bdae-c48fc85183e3", "position": { "x": 537, "y": 71, "z": 0 }, "data": { "id": "dd2ce35b-bbba-4b22-9141-ae14426c5f16", "type": "MEPH.audio.graph.node.BiquadFilter", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "1ca9a3a1-0642-4054-b654-3cc2f896619d", "options": null, "output": false, "isOutput": false }, { "name": "q", "title": "q", "type": "Number", "connector": null, "id": "f7f889d7-152c-42fb-b5d4-74a0d802bfcc", "options": { "path": "Q.value" }, "output": false, "isOutput": false }, { "name": "frequency", "title": "frequency", "type": "Number", "connector": null, "id": "6d7a696b-c1e9-4cf7-8b29-c8213f528b6e", "options": { "path": "frequency.value" }, "output": false, "isOutput": false }, { "name": "detune", "title": "detune", "type": "Number", "connector": null, "id": "4905939a-f5ab-44ff-8d8f-1e2973d3eafe", "options": { "path": "detune.value" }, "output": false, "isOutput": false }, { "name": "gain", "title": "gain", "type": "Number", "connector": null, "id": "1add0375-f396-4cb0-8f6e-d5f520919856", "options": { "path": "gain.value" }, "output": false, "isOutput": false }, { "name": "type", "title": "type", "type": "String", "connector": null, "id": "35d307d9-097d-4e07-b0e3-f09acbd658d3", "options": { "values": ["lowpass", "highpass", "bandpass", "lowshelf", "highshelf", "peaking", "notch", "allpass"] }, "output": false, "isOutput": false }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "13d343a0-9cc4-4c7d-8674-25069bdca343", "output": true, "isOutput": false }] } }] };
        graph = { "connections": [{ "id": "2e03f500-7256-4143-9e47-7625c6c59667", "nodes": ["e8a0e4c6-572a-4331-b34d-50b88b1510bf", "11b22239-8c50-4bf0-b7ea-3d85f167db92"], "zones": ["40706268-0f92-4d7e-8b3d-f5f684717faa", "24f7cf02-c3c2-4f99-810e-f9d7bbbf05b3"] }, { "id": "24c2e3bb-34c3-4ca2-af73-19ea7928f4ee", "nodes": ["5c2ffb73-bc52-4c5c-8164-785e4caea647", "e8a0e4c6-572a-4331-b34d-50b88b1510bf"], "zones": ["7769ef37-a99c-4891-90d6-f0a0d4ed66c3", "73ad85f2-a0df-4ecd-a24f-876e294dca70"] }, { "id": "6232b715-29f8-4a79-a111-e92ec9084ada", "nodes": ["86db5109-79d4-4ee5-b389-f7979784a6f0", "26ca52a7-f89f-43f7-8c7b-325dd025772d"], "zones": ["d6b482e8-ad73-4e24-82b5-6e4b22ed360e", "3612ea79-4dec-4e96-9bf9-319b51394183"] }, { "id": "341b19c4-0639-465e-b287-6f03a955c6a9", "nodes": ["26ca52a7-f89f-43f7-8c7b-325dd025772d", "ccad36ba-ae1a-4568-bc26-ee475d938f66"], "zones": ["9c7f83bc-260d-46a9-99bc-4ee3e3063112", "b06e72cf-b25e-46b8-b198-3caa6ebbb98d"] }, { "id": "2e69c098-81ab-4d1e-875d-7e9a56f207c5", "nodes": ["26ca52a7-f89f-43f7-8c7b-325dd025772d", "4435c314-ef8d-4b28-9a9d-3c1f5815f9eb"], "zones": ["5ed23b2d-0d1e-4c4a-b045-0390be013432", "d9c7651f-2869-4da4-86b7-fcb3008b047a"] }, { "id": "388b33cc-433d-462e-b01f-923bc8eb8437", "nodes": ["4435c314-ef8d-4b28-9a9d-3c1f5815f9eb", "577171d0-1745-4232-8fec-ac3844e1571f"], "zones": ["31c0712a-b626-474d-9dd9-a33a500db1d2", "0ad5bc7b-86d6-4f65-99d0-97121148993c"] }, { "id": "c2491b46-fcc2-4a66-8113-a4506eb769d2", "nodes": ["ccad36ba-ae1a-4568-bc26-ee475d938f66", "577171d0-1745-4232-8fec-ac3844e1571f"], "zones": ["0f2c4ec2-7343-4ea4-945c-22e694eb5579", "d8d2a21f-3d91-4dc1-be6c-f00ba1a42884"] }, { "id": "34273935-e2f9-49bb-9374-3ca7840e90ea", "nodes": ["577171d0-1745-4232-8fec-ac3844e1571f", "5c2ffb73-bc52-4c5c-8164-785e4caea647"], "zones": ["e7e85736-3639-4d73-b90f-a62cf238e5dc", "e1e47586-0e7e-4518-ac84-9af85b3152b8"] }], "nodes": [{ "id": "ccad36ba-ae1a-4568-bc26-ee475d938f66", "position": { "x": 444, "y": 347, "z": 0 }, "data": { "id": "69b157bf-8e76-4411-8dc9-3f9b566ed130", "type": "MEPH.audio.graph.node.Convolver", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "b06e72cf-b25e-46b8-b198-3caa6ebbb98d", "options": null, "output": false, "isOutput": false }, { "name": "normalize", "title": "normalize", "type": "boolean", "connector": null, "id": "75e88546-da57-4092-a18b-9738a7636efb", "options": null, "output": false, "isOutput": false }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "0f2c4ec2-7343-4ea4-945c-22e694eb5579", "output": true, "isOutput": false }] } }, { "id": "4435c314-ef8d-4b28-9a9d-3c1f5815f9eb", "position": { "x": 449, "y": -1, "z": 0 }, "data": { "id": "3bab508a-5eca-4b5f-9d44-71f9b0795400", "type": "MEPH.audio.graph.node.BiquadFilter", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "d9c7651f-2869-4da4-86b7-fcb3008b047a", "options": null, "output": false, "isOutput": false }, { "name": "q", "title": "q", "type": "Number", "connector": null, "id": "95eec315-2653-4b39-9937-8861ea555d25", "options": { "path": "Q.value" }, "output": false, "isOutput": false, "defaultValue": "0.0001" }, { "name": "frequency", "title": "frequency", "type": "Number", "connector": null, "id": "14b4549f-1db1-472c-9f7b-65230e35b7cb", "options": { "path": "frequency.value" }, "output": false, "isOutput": false, "defaultValue": "440" }, { "name": "detune", "title": "detune", "type": "Number", "connector": null, "id": "2cbf2dec-46e4-4550-a669-a71524c3ccca", "options": { "path": "detune.value" }, "output": false, "isOutput": false, "defaultValue": "13.39" }, { "name": "gain", "title": "gain", "type": "Number", "connector": null, "id": "444b44be-a70b-406a-819c-9644c157ca0c", "options": { "path": "gain.value" }, "output": false, "isOutput": false, "defaultValue": "40" }, { "name": "type", "title": "type", "type": "String", "connector": null, "id": "c3843cf0-4f6a-4d79-b801-41d967972342", "options": { "values": ["lowpass", "highpass", "bandpass", "lowshelf", "highshelf", "peaking", "notch", "allpass"] }, "output": false, "isOutput": false }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "31c0712a-b626-474d-9dd9-a33a500db1d2", "output": true, "isOutput": false }] } }, { "id": "5c2ffb73-bc52-4c5c-8164-785e4caea647", "position": { "x": 880, "y": 27, "z": 0 }, "data": { "id": "f87c6d2d-8d35-4843-a316-a4b19d97f5f2", "type": "MEPH.audio.graph.node.DynamicsCompressorNode", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "e1e47586-0e7e-4518-ac84-9af85b3152b8", "options": null, "output": false, "isOutput": false }, { "name": "attack", "title": "attack", "type": "Number", "connector": null, "id": "5539d191-46e3-4783-8c5f-00b27cd38312", "options": { "path": "attack.value" }, "output": false, "isOutput": false }, { "name": "knee", "title": "knee", "type": "Number", "connector": null, "id": "209738ec-61e0-4bc5-9588-c483fa966ee4", "options": { "path": "knee.value" }, "output": false, "isOutput": false }, { "name": "ratio", "title": "ratio", "type": "Number", "connector": null, "id": "c27d2fc3-3797-4ae9-97fc-beb765f46c66", "options": { "path": "ratio.value" }, "output": false, "isOutput": false, "defaultValue": "13.93" }, { "name": "reduction", "title": "reduction", "type": "Number", "connector": null, "id": "16b448be-f438-45c5-a2fc-b28b28852b73", "options": { "path": "reduction.value" }, "output": false, "isOutput": false, "defaultValue": "-12.68" }, { "name": "release", "title": "release", "type": "Number", "connector": null, "id": "22fd9323-a0f6-436a-b0ad-2064aeb35435", "options": { "path": "release.value" }, "output": false, "isOutput": false, "defaultValue": "0.49" }, { "name": "threshold", "title": "threshold", "type": "Number", "connector": null, "id": "e9e00f9c-14de-40c8-ab46-0be454f7184e", "options": { "path": "threshold.value" }, "output": false, "isOutput": false, "defaultValue": "-47.32" }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "7769ef37-a99c-4891-90d6-f0a0d4ed66c3", "output": true, "isOutput": false }] } }, { "id": "11b22239-8c50-4bf0-b7ea-3d85f167db92", "position": { "x": 1347, "y": 31, "z": 0 }, "data": { "id": "4ee5d636-f683-4513-833f-e0f0a9e15dd1", "type": "MEPH.audio.graph.node.GainNode", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "24f7cf02-c3c2-4f99-810e-f9d7bbbf05b3", "options": null, "output": false, "isOutput": false }, { "name": "gain", "title": "gain", "type": "Number", "connector": null, "id": "15c2cdab-a899-44b8-baf9-d59a7b735409", "options": { "path": "gain.value" }, "output": false, "isOutput": false, "defaultValue": "1" }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "2aa0e054-2cba-4b20-afb8-d1db0ade5193", "output": true, "isOutput": false }] } }, { "id": "86db5109-79d4-4ee5-b389-f7979784a6f0", "position": { "x": 21, "y": 40, "z": 0 }, "data": { "id": "fd5cec5c-de75-405a-a04b-74ccd73a6acc", "type": "MEPH.audio.graph.node.OscillatorNode", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "bb618dce-0eda-4e66-830b-7624dd5e89d8", "options": null, "output": false, "isOutput": false }, { "name": "detune", "title": "detune", "type": "Number", "connector": null, "id": "afa31bcb-22d5-44bd-843c-c11fce14f4fe", "options": { "path": "detune.value" }, "output": false, "isOutput": false, "defaultValue": "0" }, { "name": "frequency", "title": "frequency", "type": "Number", "connector": null, "id": "302e0074-06a7-4700-9f43-dd0d4037b527", "options": { "path": "frequency.value" }, "output": false, "isOutput": false, "defaultValue": "440" }, { "name": "type", "title": "type", "type": "String", "connector": null, "id": "24e2fa35-1c92-432a-96ea-f291329bc3fc", "options": { "values": ["sine", "square", "sawtooth", "triangle", "custom"] }, "output": false, "isOutput": false }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "d6b482e8-ad73-4e24-82b5-6e4b22ed360e", "output": true, "isOutput": false }] } }, { "id": "e8a0e4c6-572a-4331-b34d-50b88b1510bf", "position": { "x": 1111, "y": 36, "z": 0 }, "data": { "id": "11200990-9b39-49a5-90fd-94e1a66400a0", "type": "MEPH.audio.graph.node.PannerNode", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "73ad85f2-a0df-4ecd-a24f-876e294dca70", "options": null, "output": false, "isOutput": false }, { "name": "coneInnerAngle", "title": "coneInnerAngle", "type": "Number", "connector": null, "id": "93d1365c-5e8b-46c7-a333-6306f22ababa", "options": null, "output": false, "isOutput": false, "defaultValue": "292.5" }, { "name": "coneOuterAngle", "title": "coneOuterAngle", "type": "Number", "connector": null, "id": "61d2369b-a1c6-45fe-a5ba-c660a1159cc0", "options": null, "output": false, "isOutput": false, "defaultValue": "173.57" }, { "name": "coneOuterGain", "title": "coneOuterGain", "type": "Number", "connector": null, "id": "699a7323-80f7-40f2-81ea-7cbf2ba408fa", "options": null, "output": false, "isOutput": false, "defaultValue": "93.21" }, { "name": "refDistance", "title": "refDistance", "type": "Number", "connector": null, "id": "8ab0e34d-d5f7-4aad-bd3b-38449dc36c92", "options": null, "output": false, "isOutput": false, "defaultValue": "0.46" }, { "name": "maxDistance", "title": "maxDistance", "type": "Number", "connector": null, "id": "30efd0e2-1a90-432b-b38b-4e2b00e298cb", "options": null, "output": false, "isOutput": false, "defaultValue": "3928.57" }, { "name": "rolloffFactor", "title": "rolloffFactor", "type": "Number", "connector": null, "id": "4dd09e19-2a2a-4ed9-a30e-3d4594cb77ff", "options": null, "output": false, "isOutput": false, "defaultValue": "0.21" }, { "name": "panningModel", "title": "panningModel", "type": "String", "connector": null, "id": "5a72bf1d-db3c-44a9-835b-5ffef1645590", "options": { "values": ["equalpower", "HRTF"] }, "output": false, "isOutput": false }, { "name": "distanceModel", "title": "distanceModel", "type": "String", "connector": null, "id": "2078f921-6fa7-4220-a553-bcd7e252b32a", "options": { "values": ["linear", "inverse", "exponential"] }, "output": false, "isOutput": false }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "40706268-0f92-4d7e-8b3d-f5f684717faa", "output": true, "isOutput": false }] } }, { "id": "26ca52a7-f89f-43f7-8c7b-325dd025772d", "position": { "x": 239, "y": 28, "z": 0 }, "data": { "id": "b8a75b9c-6320-4b56-bb76-24d5a4759f66", "type": "MEPH.audio.graph.node.ChannelSplitterNode", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "3612ea79-4dec-4e96-9bf9-319b51394183", "options": null, "output": false, "isOutput": false }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "9c7f83bc-260d-46a9-99bc-4ee3e3063112", "output": true, "isOutput": false }, { "name": "buffer2", "title": "buffer2", "type": "AudioBuffer", "connector": null, "id": "5ed23b2d-0d1e-4c4a-b045-0390be013432", "output": true, "isOutput": false }, { "name": "buffer3", "title": "buffer3", "type": "AudioBuffer", "connector": null, "id": "523ef346-e5fa-4cd0-b187-272d23b6586f", "output": true, "isOutput": false }, { "name": "buffer4", "title": "buffer4", "type": "AudioBuffer", "connector": null, "id": "f391c491-b502-4080-bbde-90cd9dcffcb2", "output": true, "isOutput": false }] } }, { "id": "577171d0-1745-4232-8fec-ac3844e1571f", "position": { "x": 684, "y": 49, "z": 0 }, "data": { "id": "3dfa751d-ae34-4ee3-bc6b-8e4f70595c58", "type": "MEPH.audio.graph.node.ChannelMergerNode", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "0ad5bc7b-86d6-4f65-99d0-97121148993c", "options": { "count": 100 }, "output": false, "isOutput": false }, { "name": "buffer2", "title": "buffer2", "type": "AudioBuffer", "connector": null, "id": "d8d2a21f-3d91-4dc1-be6c-f00ba1a42884", "options": null, "output": false, "isOutput": false }, { "name": "buffer3", "title": "buffer3", "type": "AudioBuffer", "connector": null, "id": "187e17e6-5ac5-49c6-b775-21d0e3b965a1", "options": null, "output": false, "isOutput": false }, { "name": "buffer4", "title": "buffer4", "type": "AudioBuffer", "connector": null, "id": "5d1e4cbd-a29e-4fc9-bd72-f1c341abc95a", "options": null, "output": false, "isOutput": false }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "e7e85736-3639-4d73-b90f-a62cf238e5dc", "output": true, "isOutput": false }] } }] };

        bufferParamGraph = { "connections": [{ "id": "9035bf90-57eb-4ecd-9800-d14b2e9e7a77", "nodes": ["da525d3e-d4f7-4671-aaa9-1207e93fab16", "d21aafc0-7118-4eaa-8d4e-cf0bd2bb6bfc"], "zones": ["ec0615c9-6bd8-451e-af33-3d6db20c11dc", "fd93a3f5-0d3a-4a75-a7f6-3e995dfacb5e"] }, { "id": "c9cc2f3c-f7da-458b-99a9-f7881c641874", "nodes": ["da525d3e-d4f7-4671-aaa9-1207e93fab16", "d21aafc0-7118-4eaa-8d4e-cf0bd2bb6bfc"], "zones": ["ec0615c9-6bd8-451e-af33-3d6db20c11dc", "3cd076bc-9f1a-4567-8db4-1c4d98f006f3"] }, { "id": "ed01c98c-452b-473f-bd02-93e9a185cb43", "nodes": ["da525d3e-d4f7-4671-aaa9-1207e93fab16", "d21aafc0-7118-4eaa-8d4e-cf0bd2bb6bfc"], "zones": ["ec0615c9-6bd8-451e-af33-3d6db20c11dc", "2cc728ed-a7ee-44e2-ad3a-b9ac41ae20b4"] }, { "id": "8e06430e-23c9-44a4-a189-af00de166687", "nodes": ["da525d3e-d4f7-4671-aaa9-1207e93fab16", "d21aafc0-7118-4eaa-8d4e-cf0bd2bb6bfc"], "zones": ["ec0615c9-6bd8-451e-af33-3d6db20c11dc", "681ac2b1-23bf-4b3b-bf22-ba29867630a2"] }, { "id": "27795021-c7e5-4e20-bdb4-506b0ff5b44e", "nodes": ["da525d3e-d4f7-4671-aaa9-1207e93fab16", "d21aafc0-7118-4eaa-8d4e-cf0bd2bb6bfc"], "zones": ["ec0615c9-6bd8-451e-af33-3d6db20c11dc", "6e9d1d59-a8c0-4078-8f87-9e2f7e748766"] }, { "id": "861a7160-693e-411b-800c-44cf0652f9df", "nodes": ["d21aafc0-7118-4eaa-8d4e-cf0bd2bb6bfc", "d78cc3b4-57f7-4fbe-bd55-538e0925871f"], "zones": ["fae61818-511c-4cac-90ea-72b60c697832", "63f38b9f-604a-4287-aacf-999e4ff9aa6e"] }], "nodes": [{ "id": "d78cc3b4-57f7-4fbe-bd55-538e0925871f", "position": { "x": 807, "y": 38, "z": 0 }, "data": { "id": "e0531a24-775e-4c52-800d-df5553c08b16", "type": "MEPH.audio.graph.node.Convolver", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "63f38b9f-604a-4287-aacf-999e4ff9aa6e", "options": null, "output": false, "isOutput": false }, { "name": "normalize", "title": "normalize", "type": "boolean", "connector": null, "id": "fdc446fa-f3c2-415b-9e5f-a0233c523d24", "options": null, "output": false, "isOutput": false }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "66cec25f-188b-4059-8eb9-4ad9fbaca482", "output": true, "isOutput": false }] } }, { "id": "d21aafc0-7118-4eaa-8d4e-cf0bd2bb6bfc", "position": { "x": 506, "y": 56, "z": 0 }, "data": { "id": "2f681b3c-1baa-4a79-8f4e-f2f961f977c9", "type": "MEPH.audio.graph.node.DynamicsCompressorNode", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "8334fb19-3c90-4647-ac47-0298c9ed2d69", "options": null, "output": false, "isOutput": false }, { "name": "attack", "title": "attack", "type": "Number", "connector": null, "id": "fd93a3f5-0d3a-4a75-a7f6-3e995dfacb5e", "options": { "path": "attack.value" }, "output": false, "isOutput": false }, { "name": "knee", "title": "knee", "type": "Number", "connector": null, "id": "3cd076bc-9f1a-4567-8db4-1c4d98f006f3", "options": { "path": "knee.value" }, "output": false, "isOutput": false }, { "name": "ratio", "title": "ratio", "type": "Number", "connector": null, "id": "2cc728ed-a7ee-44e2-ad3a-b9ac41ae20b4", "options": { "path": "ratio.value" }, "output": false, "isOutput": false }, { "name": "reduction", "title": "reduction", "type": "Number", "connector": null, "id": "681ac2b1-23bf-4b3b-bf22-ba29867630a2", "options": { "path": "reduction.value" }, "output": false, "isOutput": false }, { "name": "release", "title": "release", "type": "Number", "connector": null, "id": "d5e4e968-5786-40c1-a00e-ef874e96f7a6", "options": { "path": "release.value" }, "output": false, "isOutput": false }, { "name": "threshold", "title": "threshold", "type": "Number", "connector": null, "id": "6e9d1d59-a8c0-4078-8f87-9e2f7e748766", "options": { "path": "threshold.value" }, "output": false, "isOutput": false }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "fae61818-511c-4cac-90ea-72b60c697832", "output": true, "isOutput": false }] } }, { "id": "da525d3e-d4f7-4671-aaa9-1207e93fab16", "position": { "x": 174, "y": 97, "z": 0 }, "data": { "id": "2b9ac5dd-4035-43a0-8d88-b2182dc2b557", "type": "MEPH.audio.graph.node.OscillatorNode", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "ab7cb792-aaa8-4f48-8601-89a96d6f2d91", "options": null, "output": false, "isOutput": false }, { "name": "detune", "title": "detune", "type": "Number", "connector": null, "id": "badeaa64-ec06-45d6-afef-8a74a831559b", "options": { "path": "detune.value" }, "output": false, "isOutput": false, "defaultValue": "0.54" }, { "name": "frequency", "title": "frequency", "type": "Number", "connector": null, "id": "30ccecc6-e6a9-4591-a131-a7e558be2b53", "options": { "path": "frequency.value" }, "output": false, "isOutput": false, "defaultValue": "1.16" }, { "name": "type", "title": "type", "type": "String", "connector": null, "id": "df18bab7-d405-4a91-a1b8-1e49a95e7562", "options": { "values": ["sine", "square", "sawtooth", "triangle", "custom"] }, "output": false, "isOutput": false }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "ec0615c9-6bd8-451e-af33-3d6db20c11dc", "output": true, "isOutput": false }] } }] };
        playgraph = { "connections": [{ "id": "a7e181be-a2a3-4290-bde5-1c114fe288fc", "nodes": ["de36aa04-35cf-4cc9-a108-31607b0ba7d3", "3f38b709-1f2a-44b9-b162-f5a564cecdd2"], "zones": ["e0652f4d-6854-4b50-b21c-c02291601607", "d71f8770-f52d-4a29-a4ad-29955044d126"] }, { "id": "9ab5e1b8-9209-498b-a124-66ff1b47d4f4", "nodes": ["3f38b709-1f2a-44b9-b162-f5a564cecdd2", "eb002eeb-a714-4639-a1f8-5cbcbd3fb9e2"], "zones": ["7f1bf8a2-22c9-4de5-99ae-ed07d8cd393f", "be198ad0-ab1c-493d-8014-15b59fbabbc5"] }, { "id": "be781775-b289-49a9-a818-c3148be221d8", "nodes": ["eb002eeb-a714-4639-a1f8-5cbcbd3fb9e2", "c5f6d854-dce8-4420-a48f-17b32c3ac572"], "zones": ["364917b0-7167-4a66-91af-6e995ce6617f", "483515b4-68ba-4513-a687-3f3ffec398eb"] }, { "id": "2d7a8833-4f0f-43d5-861a-f37dbfdb13de", "nodes": ["8befc729-7644-40ee-8a67-5bb52def2cf5", "3f38b709-1f2a-44b9-b162-f5a564cecdd2"], "zones": ["ff27647f-0ac1-46e5-a3d5-88f5c5d3f3a9", "5833c2db-1f1e-4ea6-b605-9b0eda363082"] }, { "id": "2b3beabd-4212-4e27-b60f-87c610a7d458", "nodes": ["8befc729-7644-40ee-8a67-5bb52def2cf5", "eb002eeb-a714-4639-a1f8-5cbcbd3fb9e2"], "zones": ["ff27647f-0ac1-46e5-a3d5-88f5c5d3f3a9", "e90e80ac-3221-41fc-904f-70c5a33f228a"] }, { "id": "115704fe-b5d9-47dc-b8b4-fd8ec678c72b", "nodes": ["8befc729-7644-40ee-8a67-5bb52def2cf5", "eb002eeb-a714-4639-a1f8-5cbcbd3fb9e2"], "zones": ["ff27647f-0ac1-46e5-a3d5-88f5c5d3f3a9", "0a5cf893-7710-41f4-a784-37f8774a97ed"] }], "nodes": [{ "id": "de36aa04-35cf-4cc9-a108-31607b0ba7d3", "position": { "x": -5, "y": 62, "z": 0 }, "data": { "id": "bf3b42a9-ec4e-49e3-907b-66aba85292d6", "type": "MEPH.audio.graph.node.AudioBufferSourceNode", "nodeInputs": [{ "name": "source", "title": "source", "type": "String", "connector": null, "id": "4a357233-cf79-40a2-92ac-1251255a8b4b", "options": null, "output": false, "isOutput": false }, { "name": "loop", "title": "loop", "type": "boolean", "connector": null, "id": "77047ad6-0ded-4e4a-8ac6-568025a6072b", "options": null, "output": false, "isOutput": false }, { "name": "loopEnd", "title": "loopEnd", "type": "Number", "connector": null, "id": "eba09622-1ab3-462c-96e4-8dbfc3dacf02", "options": null, "output": false, "isOutput": false }, { "name": "loopStart", "title": "loopStart", "type": "Number", "connector": null, "id": "9d747461-d0bb-4305-b878-231435364300", "options": null, "output": false, "isOutput": false }, { "name": "playbackRate", "title": "playbackRate", "type": "Number", "connector": null, "id": "c0693199-c14f-4b03-be79-89ab3b7accdd", "options": { "path": "playbackRate.value" }, "output": false, "isOutput": false }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "e0652f4d-6854-4b50-b21c-c02291601607", "output": true, "isOutput": false }] } }, { "id": "3f38b709-1f2a-44b9-b162-f5a564cecdd2", "position": { "x": 515, "y": 20, "z": 0 }, "data": { "id": "9c48aefc-72d5-4e09-b56b-48b9dba300fc", "type": "MEPH.audio.graph.node.ChannelMergerNode", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "d71f8770-f52d-4a29-a4ad-29955044d126", "options": { "count": 100 }, "output": false, "isOutput": false }, { "name": "buffer2", "title": "buffer2", "type": "AudioBuffer", "connector": null, "id": "5833c2db-1f1e-4ea6-b605-9b0eda363082", "options": null, "output": false, "isOutput": false }, { "name": "buffer3", "title": "buffer3", "type": "AudioBuffer", "connector": null, "id": "7657f917-735e-4573-8391-40539059b34b", "options": null, "output": false, "isOutput": false }, { "name": "buffer4", "title": "buffer4", "type": "AudioBuffer", "connector": null, "id": "5a39e788-33e2-423a-b5de-094e1e635dae", "options": null, "output": false, "isOutput": false }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "7f1bf8a2-22c9-4de5-99ae-ed07d8cd393f", "output": true, "isOutput": false }] } }, { "id": "c5f6d854-dce8-4420-a48f-17b32c3ac572", "position": { "x": 1102, "y": 39, "z": 0 }, "data": { "id": "9b2d79db-dcfa-473c-a4e3-046e8b004ac2", "type": "MEPH.audio.graph.node.GainNode", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "483515b4-68ba-4513-a687-3f3ffec398eb", "options": null, "output": false, "isOutput": false }, { "name": "gain", "title": "gain", "type": "Number", "connector": null, "id": "cc943d89-a38b-4df3-b7d0-a2a0dec5fb10", "options": { "path": "gain.value" }, "output": false, "isOutput": false, "defaultValue": "0.1" }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "f95342d9-0f63-4def-ad1c-53243802b8bc", "output": true, "isOutput": false }] } }, { "id": "eb002eeb-a714-4639-a1f8-5cbcbd3fb9e2", "position": { "x": 750, "y": 126, "z": 0 }, "data": { "id": "dd11e7a6-eee6-4205-9687-5b89e04a8dfa", "type": "MEPH.audio.graph.node.DynamicsCompressorNode", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "be198ad0-ab1c-493d-8014-15b59fbabbc5", "options": null, "output": false, "isOutput": false }, { "name": "attack", "title": "attack", "type": "Number", "connector": null, "id": "0a5cf893-7710-41f4-a784-37f8774a97ed", "options": { "path": "attack.value" }, "output": false, "isOutput": false }, { "name": "knee", "title": "knee", "type": "Number", "connector": null, "id": "e90e80ac-3221-41fc-904f-70c5a33f228a", "options": { "path": "knee.value" }, "output": false, "isOutput": false }, { "name": "ratio", "title": "ratio", "type": "Number", "connector": null, "id": "fb29d29b-e012-428d-9652-385c0bc19da0", "options": { "path": "ratio.value" }, "output": false, "isOutput": false }, { "name": "reduction", "title": "reduction", "type": "Number", "connector": null, "id": "e069fda0-cf13-419a-9976-72a4288fbb22", "options": { "path": "reduction.value" }, "output": false, "isOutput": false }, { "name": "release", "title": "release", "type": "Number", "connector": null, "id": "5090839a-4a97-46f5-92a3-a1de28572688", "options": { "path": "release.value" }, "output": false, "isOutput": false }, { "name": "threshold", "title": "threshold", "type": "Number", "connector": null, "id": "95634240-0315-4da3-8e43-e6227d98222b", "options": { "path": "threshold.value" }, "output": false, "isOutput": false }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "364917b0-7167-4a66-91af-6e995ce6617f", "output": true, "isOutput": false }] } }, { "id": "8befc729-7644-40ee-8a67-5bb52def2cf5", "position": { "x": 206, "y": 164, "z": 0 }, "data": { "id": "67b35c74-9235-41a8-9df6-0c012222aae1", "type": "MEPH.audio.graph.node.OscillatorNode", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "0ec23f9b-3c06-4322-8c65-6cbd48854591", "options": null, "output": false, "isOutput": false }, { "name": "detune", "title": "detune", "type": "Number", "connector": null, "id": "65d8e089-0673-461d-9b10-86ebc82d8e0b", "options": { "path": "detune.value" }, "output": false, "isOutput": false }, { "name": "frequency", "title": "frequency", "type": "Number", "connector": null, "id": "c1065cd8-dbdc-4412-adf4-010fab0fd533", "options": { "path": "frequency.value" }, "output": false, "isOutput": false, "defaultValue": "625" }, { "name": "type", "title": "type", "type": "String", "connector": null, "id": "f510e7b1-b287-4acc-b919-2eab7caeae75", "options": { "values": ["sine", "square", "sawtooth", "triangle", "custom"] }, "output": false, "isOutput": false }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "ff27647f-0ac1-46e5-a3d5-88f5c5d3f3a9", "output": true, "isOutput": false }] } }] }
        graphwithaudiosource = { "id": "f38a2b25-843e-4b5c-ae1b-4f14e1d1efaf", "connections": [{ "id": "19bb8e69-17a2-4ddc-86cf-006ec56fbb19", "nodes": ["cf26a618-00dd-40a1-b769-cfa93cde997e", "6c0b0137-86e0-40f0-aa9f-b67191458e33"], "zones": ["d271e5c2-7d12-42b4-b660-9be7a49609a9", "23df3a8f-d16d-4b7a-990b-76f9bcaede74"] }], "nodes": [{ "id": "cf26a618-00dd-40a1-b769-cfa93cde997e", "position": { "x": 232, "y": 127, "z": 0 }, "data": { "id": "9b6ee7e0-eb4f-456b-a1d2-e2b12f2b7801", "type": "MEPH.audio.graph.node.AudioBufferSourceNode", "nodeInputs": [{ "name": "source", "title": "source", "type": "String", "connector": null, "id": "2ecb8414-516e-46b4-8d56-9a55a079d44b", "options": null, "output": false, "isOutput": false }, { "name": "loop", "title": "loop", "type": "boolean", "connector": null, "id": "b0c347bb-40a6-448d-9ae5-47cc1145c7c3", "options": null, "output": false, "isOutput": false }, { "name": "loopEnd", "title": "loopEnd", "type": "Number", "connector": null, "id": "b850936c-3ec6-404b-b17d-b7d140af4ea0", "options": null, "output": false, "isOutput": false }, { "name": "loopStart", "title": "loopStart", "type": "Number", "connector": null, "id": "ac0983ce-157a-4fc0-ab84-84de0eb3b616", "options": null, "output": false, "isOutput": false }, { "name": "playbackRate", "title": "playbackRate", "type": "Number", "connector": null, "id": "d0a0c2b1-c60d-4078-99fd-a6c253807cbe", "options": { "path": "playbackRate.value" }, "output": false, "isOutput": false }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "d271e5c2-7d12-42b4-b660-9be7a49609a9", "output": true, "isOutput": false }] } }, { "id": "6c0b0137-86e0-40f0-aa9f-b67191458e33", "position": { "x": 678, "y": 87, "z": 0 }, "data": { "id": "9c9069ca-d29d-4267-939e-ab43483e83f1", "type": "MEPH.audio.graph.node.BiquadFilter", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "23df3a8f-d16d-4b7a-990b-76f9bcaede74", "options": null, "output": false, "isOutput": false }, { "name": "q", "title": "q", "type": "Number", "connector": null, "id": "12c56c0c-3ea6-4154-b31f-8de9bd1b05e1", "options": { "path": "Q.value" }, "output": false, "isOutput": false }, { "name": "frequency", "title": "frequency", "type": "Number", "connector": null, "id": "1ec71cb2-32d8-4162-9a6d-206ac22bb4ee", "options": { "path": "frequency.value" }, "output": false, "isOutput": false }, { "name": "detune", "title": "detune", "type": "Number", "connector": null, "id": "955b432a-944e-42fa-a13f-3337da2fb72d", "options": { "path": "detune.value" }, "output": false, "isOutput": false }, { "name": "gain", "title": "gain", "type": "Number", "connector": null, "id": "d83fffd4-cbdf-4086-9127-988b7269d75d", "options": { "path": "gain.value" }, "output": false, "isOutput": false }, { "name": "type", "title": "type", "type": "String", "connector": null, "id": "d50dce89-2217-4f3e-985d-087578f16e36", "options": { "values": ["lowpass", "highpass", "bandpass", "lowshelf", "highshelf", "peaking", "notch", "allpass"] }, "output": false, "isOutput": false }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "e5894a2c-0f56-46c8-8d2d-8b289997df77", "output": true, "isOutput": false }] } }] };

        simpleAudio = { "id": "f4f7a30d-c7b2-4e4b-9989-8c43ee1f4209", "connections": [{ "id": "962862bc-f4bc-4cc1-96c2-223a80a87dcb", "nodes": ["82bb3a2e-b147-452e-91a6-11495208c47f", "936accb3-d489-4864-a752-53c1cd184a4d"], "zones": ["642db7fe-8506-44a1-97d6-de5fc44d329e", "7c8c91e7-9f53-4555-88a9-4c3c19f547bb"] }], "nodes": [{ "id": "82bb3a2e-b147-452e-91a6-11495208c47f", "position": { "x": 171, "y": 122, "z": 0 }, "data": { "id": "cf864c48-34db-4adc-807c-d43aeb04c28e", "type": "MEPH.audio.graph.node.AudioBufferSourceNode", "nodeInputs": [{ "name": "source", "title": "source", "type": "String", "connector": null, "id": "c064e68a-00ef-41e7-8453-82253bb16c7e", "options": null, "output": false, "isOutput": false }, { "name": "loop", "title": "loop", "type": "boolean", "connector": null, "id": "db827f9c-401d-4cb0-b711-45697924d22b", "options": null, "output": false, "isOutput": false }, { "name": "loopEnd", "title": "loopEnd", "type": "Number", "connector": null, "id": "d9125666-d1fd-41d1-b489-5122ac876c56", "options": null, "output": false, "isOutput": false }, { "name": "loopStart", "title": "loopStart", "type": "Number", "connector": null, "id": "921a56b8-1e2c-49be-b83c-78abe82d4fd4", "options": null, "output": false, "isOutput": false }, { "name": "playbackRate", "title": "playbackRate", "type": "Number", "connector": null, "id": "8f5d8dae-6628-4994-8e71-1900997f6c0b", "options": { "path": "playbackRate.value" }, "output": false, "isOutput": false }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "642db7fe-8506-44a1-97d6-de5fc44d329e", "output": true, "isOutput": false }] } }, { "id": "936accb3-d489-4864-a752-53c1cd184a4d", "position": { "x": 512, "y": 134, "z": 0 }, "data": { "id": "adc4ac57-e27c-4ce2-837e-e1cbb860e840", "type": "MEPH.audio.graph.node.Convolver", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "7c8c91e7-9f53-4555-88a9-4c3c19f547bb", "options": null, "output": false, "isOutput": false }, { "name": "normalize", "title": "normalize", "type": "boolean", "connector": null, "id": "37bc0811-ffe1-4a36-8b36-185529e30b21", "options": null, "output": false, "isOutput": false }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "614a998a-b0ab-4438-b0d6-2be34eed9ef4", "output": true, "isOutput": false }] } }] };
    });
    it("can create a AudioGraphReader", function () {
        //Arrange

        //Assert
        var reader = new AudioGraphReader();

        expect(reader).toBeTruthy();

    });

    it('can set a graph to be read ', function () {
        var reader = new AudioGraphReader();

        reader.setGraph(graph);

        expect(reader.getGraph()).toBeTruthy();
    });

    it('a graph can get all the nodes from a graph', function () {
        var reader = new AudioGraphReader();
        reader.setGraph(graph);

        var nodes = reader.getNodes();

        expect(nodes.length).toBe(graph.nodes.length);
    });

    it('can get node by id', function () {
        var reader = new AudioGraphReader();
        reader.setGraph(graph);
        var node = reader.getNodeById(graph.nodes.first().id)
        expect(node).toBeTruthy();
    });


    it('can get the root of a graph ', function () {
        var reader = new AudioGraphReader();
        reader.setGraph(graph);
        var node = reader.getRoot();
        expect(node).toBeTruthy();
    });
    it('can detecte if a graph has a single root', function () {
        var reader = new AudioGraphReader();
        reader.setGraph(graph);

        var node = reader.hasSingleRoot();
        expect(node).toBeTruthy();
    });

    it('can get inputs for a node.', function () {
        var reader = new AudioGraphReader();
        reader.setGraph(graph);

        var root = reader.getRoot();
        var inputs = reader.getInputs(root);

        expect(inputs.length).toBeTruthy();

    });

    it('can take inputs and construct the audio node', function () {
        var reader = new AudioGraphReader();
        reader.setGraph(graph);
        var root = reader.getRoot();
        var inputs = reader.getInputs(root);
        var audionode = reader.constructAudioNode(root, inputs);
        expect(audionode).toBeTruthy();
    });

    it('can create a MEPH.audio.graph.node.BiquadFilter node', function () {
        var reader = new AudioGraphReader();
        reader.setGraph(graph);
        var n = graph.nodes.first(function (x) { return x.data.type === 'MEPH.audio.graph.node.BiquadFilter'; });
        var inputs = reader.getInputs(n);

        var audionode = reader.constructAudioNode(n, inputs);

        expect(audionode).toBeTruthy();
        expect(audionode.gain).toBe(40);
        expect(audionode.frequency).toBe(440);
        expect(audionode.type).toBe(null);
        expect(audionode.buffer).toBeTruthy();
        expect(audionode.detune).toBe(13.39);
    });

    it('can create a MEPH.audio.graph.node.PannerNode node', function () {
        var reader = new AudioGraphReader();
        reader.setGraph(graph);
        var n = graph.nodes.first(function (x) { return x.data.type === 'MEPH.audio.graph.node.PannerNode'; });
        var inputs = reader.getInputs(n);

        var audionode = reader.constructAudioNode(n, inputs);

        expect(audionode).toBeTruthy();
        expect(audionode.hasOwnProperty('coneInnerAngle')).toBeTruthy();
        expect(audionode.hasOwnProperty('coneOuterAngle')).toBeTruthy();
        expect(audionode.hasOwnProperty('coneOuterGain')).toBeTruthy();
        expect(audionode.hasOwnProperty('refDistance')).toBeTruthy();
        expect(audionode.hasOwnProperty('rolloffFactor')).toBeTruthy();
        expect(audionode.hasOwnProperty('panningModel')).toBeTruthy();
        expect(audionode.hasOwnProperty('buffer')).toBeTruthy();

    });

    it('can create a MEPH.audio.graph.node.AudioBufferSourceNode', function () {
        //
        var reader = new AudioGraphReader();
        reader.setGraph(largegraph);
        var n = largegraph.nodes.first(function (x) { return x.data.type === 'MEPH.audio.graph.node.AudioBufferSourceNode'; });

        var inputs = reader.getInputs(n);

        var audionode = reader.constructAudioNode(n, inputs);

        expect(audionode).toBeTruthy();
        expect(audionode.hasOwnProperty('source')).toBeTruthy();
        expect(audionode.hasOwnProperty('loop')).toBeTruthy();
        expect(audionode.hasOwnProperty('loopEnd')).toBeTruthy();
        expect(audionode.hasOwnProperty('loopStart')).toBeTruthy();
        expect(audionode.hasOwnProperty('playbackRate')).toBeTruthy();

    });

    it('can create a MEPH.audio.graph.node.ChannelMergerNode ', function () {
        var reader = new AudioGraphReader();
        reader.setGraph(largegraph);
        var n = largegraph.nodes.first(function (x) {
            return x.data.type === 'MEPH.audio.graph.node.ChannelMergerNode';
        });

        var inputs = reader.getInputs(n);

        var audionode = reader.constructAudioNode(n, inputs);

        expect(audionode).toBeTruthy();
        expect(audionode.hasOwnProperty('buffer')).toBeTruthy();
        expect(audionode.hasOwnProperty('buffer2')).toBeTruthy();
        expect(audionode.hasOwnProperty('buffer3')).toBeTruthy();
        expect(audionode.hasOwnProperty('buffer4')).toBeTruthy();
    });

    it('can create a MEPH.audio.graph.node.ChannelSplitterNode', function () {
        var reader = new AudioGraphReader();
        reader.setGraph(largegraph);
        var n = largegraph.nodes.first(function (x) {
            return x.data.type === 'MEPH.audio.graph.node.ChannelSplitterNode';
        });

        var inputs = reader.getInputs(n);

        var audionode = reader.constructAudioNode(n, inputs);

        expect(audionode).toBeTruthy();
        expect(audionode.hasOwnProperty('buffer')).toBeTruthy();
    });

    it('can create a MEPH.audio.graph.node.Convolver', function () {
        var reader = new AudioGraphReader();
        reader.setGraph(largegraph);
        var n = largegraph.nodes.first(function (x) {
            return x.data.type === 'MEPH.audio.graph.node.Convolver';
        });

        var inputs = reader.getInputs(n);

        var audionode = reader.constructAudioNode(n, inputs);

        expect(audionode).toBeTruthy();
        expect(audionode.hasOwnProperty('normalize')).toBeTruthy();
        expect(audionode.hasOwnProperty('buffer')).toBeTruthy();
    });

    it('can create a MEPH.audio.graph.node.DelayNode', function () {
        var reader = new AudioGraphReader();
        reader.setGraph(largegraph);
        var n = largegraph.nodes.first(function (x) {
            return x.data.type === 'MEPH.audio.graph.node.DelayNode';
        });

        var inputs = reader.getInputs(n);

        var audionode = reader.constructAudioNode(n, inputs);

        expect(audionode).toBeTruthy();
        expect(audionode.hasOwnProperty('delayTime')).toBeTruthy();
        expect(audionode.hasOwnProperty('buffer')).toBeTruthy();
    });

    it('can create a MEPH.audio.graph.node.DynamicsCompressorNode', function () {
        var reader = new AudioGraphReader();
        reader.setGraph(largegraph);
        var n = largegraph.nodes.first(function (x) {
            return x.data.type === 'MEPH.audio.graph.node.DynamicsCompressorNode';
        });

        var inputs = reader.getInputs(n);

        var audionode = reader.constructAudioNode(n, inputs);

        expect(audionode).toBeTruthy();
        expect(audionode.hasOwnProperty('attack')).toBeTruthy();
        expect(audionode.hasOwnProperty('knee')).toBeTruthy();
        expect(audionode.hasOwnProperty('ratio')).toBeTruthy();
        expect(audionode.hasOwnProperty('reduction')).toBeTruthy();
        expect(audionode.hasOwnProperty('release')).toBeTruthy();
        expect(audionode.hasOwnProperty('threshold')).toBeTruthy();
        expect(audionode.hasOwnProperty('buffer')).toBeTruthy();
    });

    it('can create a MEPH.audio.graph.node.GainNode', function () {
        var reader = new AudioGraphReader();
        reader.setGraph(largegraph);
        var n = largegraph.nodes.first(function (x) {
            return x.data.type === 'MEPH.audio.graph.node.GainNode';
        });

        var inputs = reader.getInputs(n);

        var audionode = reader.constructAudioNode(n, inputs);

        expect(audionode).toBeTruthy();
        expect(audionode.hasOwnProperty('buffer')).toBeTruthy();
        expect(audionode.hasOwnProperty('gain')).toBeTruthy();
    });

    it('can create a MEPH.audio.graph.node.OscillatorNode', function () {
        var reader = new AudioGraphReader();
        reader.setGraph(largegraph);
        var n = largegraph.nodes.first(function (x) {
            return x.data.type === 'MEPH.audio.graph.node.OscillatorNode';
        });

        var inputs = reader.getInputs(n);

        var audionode = reader.constructAudioNode(n, inputs);

        expect(audionode).toBeTruthy();
        expect(audionode.hasOwnProperty('buffer')).toBeTruthy();
        expect(audionode.hasOwnProperty('frequency')).toBeTruthy();
        expect(audionode.hasOwnProperty('detune')).toBeTruthy();
        expect(audionode.hasOwnProperty('type')).toBeTruthy();
    });


    it('can create a MEPH.audio.graph.node.WaveShaperNode', function () {
        var reader = new AudioGraphReader();
        reader.setGraph(largegraph);
        var n = largegraph.nodes.first(function (x) {
            return x.data.type === 'MEPH.audio.graph.node.WaveShaperNode';
        });

        var inputs = reader.getInputs(n);

        var audionode = reader.constructAudioNode(n, inputs);

        expect(audionode).toBeTruthy();
        expect(audionode.hasOwnProperty('buffer')).toBeTruthy();
        expect(audionode.hasOwnProperty('curve')).toBeTruthy();
        expect(audionode.hasOwnProperty('oversample')).toBeTruthy();
    });


    it('can construct an array of options for creating and audio object', function () {
        var reader = new AudioGraphReader();
        reader.setGraph(graph);
        var audio = reader.constructAudioNodeList();
        expect(audio).toBeTruthy();
    });

    it('can create an audio object ', function () {
        var reader = new AudioGraphReader();
        reader.setGraph(graph);
        var audio = reader.createAudio();
        expect(audio).toBeTruthy();

    });

    it('can create an audio with a splitter and merger ', function () {
        var reader = new AudioGraphReader();
        reader.setGraph(graph);

        var audio = reader.createAudio();
        expect(audio.nodes.length).toBe(graph.nodes.length);
        expect(audio).toBeTruthy();
    });

    it('an audio object can connect up a nodes correctly when the node contains information about where its inputs come from', function () {
        var reader = new AudioGraphReader();
        reader.setGraph(graph);
        var audio = reader.createAudio();
        expect(audio).toBeTruthy();

        expect(audio.nodes.length).toBe(graph.nodes.length);
        audio.complete();
    });


    it('feathergraph: an audio object can connect up a nodes correctly when the node contains information about where its inputs come from', function () {
        var reader = new AudioGraphReader();
        reader.setGraph(graph);
        var audio = reader.createAudio();
        expect(audio).toBeTruthy();

        expect(audio.nodes.length).toBe(graph.nodes.length);
        audio.complete();
    });


    it('can create an audio node from a graph with connections between parameters and buffer outputs', function () {
        var reader = new AudioGraphReader();
        reader.setGraph(bufferParamGraph);

        var audio = reader.createAudio();
        expect(audio).toBeTruthy();

        audio.complete();
    });

    it('can produce a unique version of a graph, meaning the ids are switch , but all is relatively the same', function () {
        var result = AudioGraphReader.cloneUnique(seed);

        expect(result).toBeTruthy();
    })

    it('can produce a unique version of a graph with deep nodes, meaning the ids are switch , but all is relatively the same', function () {
        var result = AudioGraphReader.cloneUnique(deepseed);

        expect(result).toBeTruthy();
    })

    it('can create an audio node from a deep graph', function () {
        var reader = new AudioGraphReader();
        reader.setGraph(deepseed);


        var audio = reader.createAudio();
        expect(audio).toBeTruthy();

        expect(audio.nodes.length).toBe(3);
    });

    it('can create an audio node graphwithaudiosource', function () {
        var reader = new AudioGraphReader();
        reader.setGraph(graphwithaudiosource);
        var audio = reader.createAudio();
        expect(audio).toBeTruthy();

        var buf = audio.get({ type: 'buffer' }).first();
    })

    it('can create an audio node from a graph with connections between parameters and buffer outputs', function () {
        var reader = new AudioGraphReader();
        reader.setGraph(bufferParamGraph);

        var audio = reader.createAudio();
        expect(audio).toBeTruthy();
    })

    it('can get all the nodes from a deep graph', function () {
        var reader = new AudioGraphReader();
        reader.setGraph(deepseed);

        expect(reader.getNodes().length).toBe(3);
    });

    it('can get all the node connections from a deep graph', function () {
        var reader = new AudioGraphReader();
        reader.setGraph(deepseed);

        expect(reader.getConnections().length).toBe(7);
    })

    var audiofile = '../specs/data/The_Creek.mp3', audiofiletyp = 'mp3';

    it('can use audio graph and play sound through it.', function (done) {
        var audio = new MEPH.audio.Audio();

        audio.load(audiofile, audiofiletyp).then(function (resource) {

            var reader = new AudioGraphReader();
            reader.setGraph(playgraph);


            audio = reader.createAudio();

            expect(audio).toBeTruthy();

            audio.complete();

            // start the source playing
            MEPH.audio.Audio.$sourcebuffer.first().buffer.start()
            setTimeout(function () {
                audio.disconnect();
                done();
            }, 4000)

        })

    });
    

    it('can get zone to connect to from another node', function () {
        var reader = new AudioGraphReader();
        var node = reader.getNodeOfType(MEPH.audio.Sequence.defaultSequenceGraphRecipe, 'MEPH.audio.graph.node.InputNode');

        var res = reader.getNodesConnectedToOutputsOf(node, MEPH.audio.Sequence.defaultSequenceGraphRecipe);
        var zone = reader.getZoneToConnectToFromInput(node, res.first(), MEPH.audio.Sequence.defaultSequenceGraphRecipe);
        expect(zone).toBeTruthy();
    });

});﻿describe("MEPH/audio/graph/node/WaveShaperNode.spec.js", 'MEPH.audio.graph.node.WaveShaperNode', function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create a WaveShaperNode node', function () {
        var WaveShaperNode = new MEPH.audio.graph.node.WaveShaperNode();

        expect(WaveShaperNode).toBeTruthy();
    });

    it('has buffer and normalize inputs ', function () {
        var WaveShaperNode = new MEPH.audio.graph.node.WaveShaperNode();

        expect(WaveShaperNode.nodeInputs.some(function (x) { return x.name === 'buffer' })).toBeTruthy();
        expect(WaveShaperNode.nodeInputs.some(function (x) { return x.name === 'curve' })).toBeTruthy();
        expect(WaveShaperNode.nodeInputs.some(function (x) { return x.name === 'oversample' })).toBeTruthy();
    })

    it('has buffer and normalize inputs ', function () {
        var WaveShaperNode = new MEPH.audio.graph.node.WaveShaperNode();

        var output = WaveShaperNode.nodeOutputs.some(function (x) { return x.name === 'buffer' });

        expect(output).toBeTruthy();
    })
});﻿//MEPH.audio.graph.node.SequenceNode
/**
 * @class MEPH.audio.graph.node.SequenceNode
 * @extend MEPH.audio.graph.node.Node
 **/
MEPH.define('MEPH.audio.graph.node.SequenceNode', {
    extend: 'MEPH.audio.graph.node.Node',
    alias: 'sequencenode',
    templates: true,
    properties: {
        sequenceTitle: '',
        sequences: null
    },
    initialize: function () {
        var me = this;

        me.nodecontrols = me.nodecontrols || [];
        me.nodecontrols.push('bufferinput');
        me.nodecontrols.push('bufferoutput');

        me.sequences = me.sequences || MEPH.util.Observable.observable([]);
        me.great()

        me.nodeInputs.push(me.createInput('buffer', MEPH.audio.graph.node.Node.AudioBuffer));
        me.nodeOutputs.push(me.createOutput('buffer', MEPH.audio.graph.node.Node.AudioBuffer));

    },
    onLoaded: function () {
        var me = this;
        me.great()

        me.sequences = me.sequences || MEPH.util.Observable.observable([]);

        me.title = 'Sequence';
        me.sequenceTitle = 'sequence'

    }
});﻿describe("MEPH/audio/graph/node/SequenceNode.spec.js", 'MEPH.audio.graph.node.SequenceNode', function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create a SequenceNode node', function () {
        var SequenceNode = new MEPH.audio.graph.node.SequenceNode();

        expect(SequenceNode).toBeTruthy();
    });

    it('has buffer and normalize inputs ', function () {
        var SequenceNode = new MEPH.audio.graph.node.SequenceNode();

        expect(SequenceNode.nodeOutputs.some(function (x) { return x.name === 'buffer' })).toBeTruthy();
    })

    it('has buffer and normalize inputs ', function () {
        var SequenceNode = new MEPH.audio.graph.node.SequenceNode();

        var output = SequenceNode.nodeOutputs.some(function (x) { return x.name === 'buffer' });

        expect(output).toBeTruthy();
    })
});﻿describe("MEPH/audio/graph/node/PannerNode.spec.js", 'MEPH.audio.graph.node.PannerNode', function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create a PannerNode node', function () {
        var PannerNode = new MEPH.audio.graph.node.PannerNode();

        expect(PannerNode).toBeTruthy();
    });

    it('has buffer and normalize inputs ', function () {
        var PannerNode = new MEPH.audio.graph.node.PannerNode();

        expect(PannerNode.nodeInputs.some(function (x) { return x.name === 'coneInnerAngle' })).toBeTruthy();
        expect(PannerNode.nodeInputs.some(function (x) { return x.name === 'coneOuterAngle' })).toBeTruthy();
        expect(PannerNode.nodeInputs.some(function (x) { return x.name === 'coneOuterGain' })).toBeTruthy();
        expect(PannerNode.nodeInputs.some(function (x) { return x.name === 'distanceModel' })).toBeTruthy();
        expect(PannerNode.nodeInputs.some(function (x) { return x.name === 'panningModel' })).toBeTruthy();
        expect(PannerNode.nodeInputs.some(function (x) { return x.name === 'refDistance' })).toBeTruthy();
        expect(PannerNode.nodeInputs.some(function (x) { return x.name === 'rolloffFactor' })).toBeTruthy();
    })

    it('has buffer and normalize inputs ', function () {
        var PannerNode = new MEPH.audio.graph.node.PannerNode();

        var output = PannerNode.nodeOutputs.some(function (x) { return x.name === 'buffer' });

        expect(output).toBeTruthy();
    })
});﻿describe("MEPH/audio/graph/node/OscillatorNode.spec.js", 'MEPH.audio.graph.node.OscillatorNode', function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create an audio', function () {
        var OscillatorNode = new MEPH.audio.graph.node.OscillatorNode();

        expect(OscillatorNode).toBeTruthy();
    });

    it('has buffer and normalize inputs ', function () {
        var OscillatorNode = new MEPH.audio.graph.node.OscillatorNode();

        expect(OscillatorNode.nodeInputs.some(function (x) { return x.name === 'buffer' })).toBeTruthy();
        expect(OscillatorNode.nodeInputs.some(function (x) { return x.name === 'detune' })).toBeTruthy();
        expect(OscillatorNode.nodeInputs.some(function (x) { return x.name === 'type' })).toBeTruthy();
        expect(OscillatorNode.nodeInputs.some(function (x) { return x.name === 'frequency' })).toBeTruthy();
    })

    it('has buffer and normalize inputs ', function () {
        var OscillatorNode = new MEPH.audio.graph.node.OscillatorNode();

        var output = OscillatorNode.nodeOutputs.some(function (x) { return x.name === 'buffer' });

        expect(output).toBeTruthy();
    })
});﻿describe("MEPH/audio/graph/node/Node.spec.js", 'MEPH.audio.graph.node.Node', function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create an audio', function () {
        var node = new MEPH.audio.graph.node.Node();

        expect(node).toBeTruthy();
    });
});﻿describe("MEPH/audio/graph/node/InputNode.spec.js", 'MEPH.audio.graph.node.InputNode', function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create a InputNode node', function () {
        var InputNode = new MEPH.audio.graph.node.InputNode();

        expect(InputNode).toBeTruthy();
    });

    it('has buffer and normalize inputs ', function () {
        var InputNode = new MEPH.audio.graph.node.InputNode();

        expect(InputNode.nodeOutputs.some(function (x) { return x.name === 'buffer' })).toBeTruthy();
    })

});﻿describe("MEPH/audio/graph/node/GeneratedNode.spec.js", 'MEPH.audio.graph.node.GeneratedNode', function () {
    var seed = { "connections": [{ "id": "6634500d-dbe9-494a-abde-0231e7351ea9", "nodes": ["6ffc6b32-90ef-445a-9242-72c11fb90c82", "ee5bda49-d7ea-43a3-83af-6d0c24de1f56"], "zones": ["6ffc6b32-90ef-445a-9242-72c11fb90c82-bufferinput-connector", "ee5bda49-d7ea-43a3-83af-6d0c24de1f56-bufferoutput-connector"] }, { "id": "0b80fbbe-fd76-4164-bf08-5af3f1cee0d5", "nodes": ["6ffc6b32-90ef-445a-9242-72c11fb90c82", "ee5bda49-d7ea-43a3-83af-6d0c24de1f56"], "zones": ["6ffc6b32-90ef-445a-9242-72c11fb90c82-normalizeinput-connector", "ee5bda49-d7ea-43a3-83af-6d0c24de1f56-bufferoutput-connector"] }, { "id": "b799e998-9585-4fa9-a69d-4629ddfe1dda", "nodes": ["6ffc6b32-90ef-445a-9242-72c11fb90c82", "623f508d-97d3-4532-aadf-47b8483bc234"], "zones": ["6ffc6b32-90ef-445a-9242-72c11fb90c82-bufferoutput-connector", "623f508d-97d3-4532-aadf-47b8483bc234-bufferinput-connector"] }, { "id": "588f2211-b68f-4f5a-a272-9ee3f0998407", "nodes": ["623f508d-97d3-4532-aadf-47b8483bc234", "0a90b8ef-75a1-4df7-ab03-4ef23a0b7983"], "zones": ["623f508d-97d3-4532-aadf-47b8483bc234-bufferoutput-connector", "0a90b8ef-75a1-4df7-ab03-4ef23a0b7983-bufferinput-connector"] }, { "id": "d9395206-26db-4132-aadf-3cc932bc69e9", "nodes": ["0a90b8ef-75a1-4df7-ab03-4ef23a0b7983", "ee5bda49-d7ea-43a3-83af-6d0c24de1f56"], "zones": ["0a90b8ef-75a1-4df7-ab03-4ef23a0b7983-attack-connector", "ee5bda49-d7ea-43a3-83af-6d0c24de1f56-bufferoutput-connector"] }, { "id": "dbf6afd6-ee2f-4d44-829b-648a9fe4eed1", "nodes": ["0a90b8ef-75a1-4df7-ab03-4ef23a0b7983", "ee5bda49-d7ea-43a3-83af-6d0c24de1f56"], "zones": ["0a90b8ef-75a1-4df7-ab03-4ef23a0b7983-knee-connector", "ee5bda49-d7ea-43a3-83af-6d0c24de1f56-bufferoutput-connector"] }, { "id": "0ce7919e-6cb4-4f6c-8542-a379d3e52c78", "nodes": ["0a90b8ef-75a1-4df7-ab03-4ef23a0b7983", "ee5bda49-d7ea-43a3-83af-6d0c24de1f56"], "zones": ["0a90b8ef-75a1-4df7-ab03-4ef23a0b7983-ratio-connector", "ee5bda49-d7ea-43a3-83af-6d0c24de1f56-bufferoutput-connector"] }, { "id": "db902eb3-827e-4f9f-a865-aaffa4fb11b4", "nodes": ["623f508d-97d3-4532-aadf-47b8483bc234", "d8a85c16-c09d-4b50-a553-23d493b7633d"], "zones": ["623f508d-97d3-4532-aadf-47b8483bc234-buffer2output-connector", "d8a85c16-c09d-4b50-a553-23d493b7633d-bufferinput-connector"] }, { "id": "db895ac4-c900-4885-862e-94420882b5a6", "nodes": ["0a90b8ef-75a1-4df7-ab03-4ef23a0b7983", "39d00021-74f6-4dca-abaa-01f18633c31a"], "zones": ["0a90b8ef-75a1-4df7-ab03-4ef23a0b7983-bufferoutput-connector", "39d00021-74f6-4dca-abaa-01f18633c31a-bufferinput-connector"] }, { "id": "f299e869-5883-464b-96ad-a4718292da60", "nodes": ["d8a85c16-c09d-4b50-a553-23d493b7633d", "39d00021-74f6-4dca-abaa-01f18633c31a"], "zones": ["d8a85c16-c09d-4b50-a553-23d493b7633d-bufferoutput-connector", "39d00021-74f6-4dca-abaa-01f18633c31a-bufferinput-connector"] }], "nodes": [{ "id": "ee5bda49-d7ea-43a3-83af-6d0c24de1f56", "position": { "x": 146, "y": 262, "z": 0 }, "data": { "id": "1d51ee23-3f12-45e4-82a1-01a33d01cbfd", "type": "MEPH.audio.graph.node.InputNode", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": "6ffc6b32-90ef-445a-9242-72c11fb90c82-bufferinput-connector", "id": "2f586a10-52cd-4607-a830-fe265048ff18", "options": null, "output": false }, { "name": "convolver normalize", "title": "convolver normalize", "type": "boolean", "connector": "6ffc6b32-90ef-445a-9242-72c11fb90c82-normalizeinput-connector", "id": "9c04d317-b752-4823-9b6c-03e10a9d7e38", "options": null, "output": false }, { "name": "dyn attack", "title": "dyn attack", "type": "Number", "connector": "0a90b8ef-75a1-4df7-ab03-4ef23a0b7983-attack-connector", "id": "62b3289e-95ce-49f5-983f-1cb278946d92", "options": null, "output": false }, { "name": "dyn knee", "title": "dyn knee", "type": "Number", "connector": "0a90b8ef-75a1-4df7-ab03-4ef23a0b7983-knee-connector", "id": "de20033b-3c68-4527-8fe9-46ca67d8a96e", "options": null, "output": false }, { "name": "dyn ratio", "title": "dyn ratio", "type": "Number", "connector": "0a90b8ef-75a1-4df7-ab03-4ef23a0b7983-ratio-connector", "id": "c9110427-c987-4935-a66b-53ecf663c847", "options": null, "output": false }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "Anything", "connector": null, "id": "4a29096e-971a-44c3-9c9a-72435c990cb5", "output": true, "isOutput": false }] } }, { "id": "39d00021-74f6-4dca-abaa-01f18633c31a", "position": { "x": 1567, "y": 206, "z": 0 }, "data": { "id": "805bea5b-05eb-425d-ab0c-857aec24ad66", "type": "MEPH.audio.graph.node.OutputNode", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "Anything", "connector": null, "id": "6f624af9-e991-44fd-a238-c0a8322dd133", "options": null, "output": false, "isOutput": false }], "nodeOutputs": [{ "name": "gain output", "title": "gain output", "type": "AudioBuffer", "connector": "0a90b8ef-75a1-4df7-ab03-4ef23a0b7983-bufferoutput-connector", "id": "e525d3be-8e54-473c-9542-4f73c9e2849b", "output": true }, { "name": "dynamic out", "title": "dynamic out", "type": "AudioBuffer", "connector": "d8a85c16-c09d-4b50-a553-23d493b7633d-bufferoutput-connector", "id": "c6227500-909e-4760-b41f-0cc186553bdf", "output": true }] } }, { "id": "6ffc6b32-90ef-445a-9242-72c11fb90c82", "position": { "x": 427, "y": 122, "z": 0 }, "data": { "id": "68ac4d71-5acc-4e32-8e8d-6a6cec6fc206", "type": "MEPH.audio.graph.node.Convolver", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "ad868211-358f-44b3-83dd-cc032f2427f7", "options": null, "output": false, "isOutput": false }, { "name": "normalize", "title": "normalize", "type": "boolean", "connector": null, "id": "23e7c23c-01d9-4235-9ce9-474fe3e4c317", "options": null, "output": false, "isOutput": false }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "649bb2c8-ae1f-40d0-8889-d5900b85db72", "output": true, "isOutput": false }] } }, { "id": "623f508d-97d3-4532-aadf-47b8483bc234", "position": { "x": 685, "y": 122, "z": 0 }, "data": { "id": "39301a5e-4f74-4e76-8604-c92304b86108", "type": "MEPH.audio.graph.node.ChannelSplitterNode", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "007fdfbe-a36e-43d6-931b-a5f8058e0685", "options": null, "output": false, "isOutput": false }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "d39b2505-508c-450d-a03b-2ed7e5e3c709", "output": true, "isOutput": false }, { "name": "buffer2", "title": "buffer2", "type": "AudioBuffer", "connector": null, "id": "811cdbfb-ea1e-4d78-8c27-53079387aac7", "output": true, "isOutput": false }, { "name": "buffer3", "title": "buffer3", "type": "AudioBuffer", "connector": null, "id": "f0ce017c-f558-43ed-ab61-9f5acd18b52e", "output": true, "isOutput": false }, { "name": "buffer4", "title": "buffer4", "type": "AudioBuffer", "connector": null, "id": "78a42222-2dea-4f3c-adc1-f7c135b7fbf6", "output": true, "isOutput": false }] } }, { "id": "0a90b8ef-75a1-4df7-ab03-4ef23a0b7983", "position": { "x": 981, "y": 150, "z": 0 }, "data": { "id": "ddeecf54-7b50-49a0-9ac2-a1ba0b1aef57", "type": "MEPH.audio.graph.node.DynamicsCompressorNode", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "2b2b04d7-eeba-40be-8a31-a3e99bce5ef8", "options": null, "output": false, "isOutput": false }, { "name": "attack", "title": "attack", "type": "Number", "connector": null, "id": "d0adb5da-6185-46b2-b921-4d4c8e9de391", "options": { "path": "attack.value" }, "output": false, "isOutput": false }, { "name": "knee", "title": "knee", "type": "Number", "connector": null, "id": "cc52a4d4-6235-4ba5-bccc-9426ed0889b8", "options": { "path": "knee.value" }, "output": false, "isOutput": false }, { "name": "ratio", "title": "ratio", "type": "Number", "connector": null, "id": "010917da-f370-421c-9d9c-4c01ca7163ef", "options": { "path": "ratio.value" }, "output": false, "isOutput": false }, { "name": "reduction", "title": "reduction", "type": "Number", "connector": null, "id": "dea5195d-e488-4224-8260-9b3ce9e91902", "options": { "path": "reduction.value" }, "output": false, "isOutput": false, "defaultValue": "0.18" }, { "name": "release", "title": "release", "type": "Number", "connector": null, "id": "d944d433-498d-4379-9263-3556f1b39d50", "options": { "path": "release.value" }, "output": false, "isOutput": false }, { "name": "threshold", "title": "threshold", "type": "Number", "connector": null, "id": "927a2ede-783b-48ae-bef2-da2d86fd8ec7", "options": { "path": "threshold.value" }, "output": false, "isOutput": false, "defaultValue": "0.45" }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "080c5c05-a9fd-4d2d-baa9-6d9f55c30faa", "output": true, "isOutput": false }] } }, { "id": "d8a85c16-c09d-4b50-a553-23d493b7633d", "position": { "x": 1202, "y": 48, "z": 0 }, "data": { "id": "866faa00-3713-406e-9a78-ff97c6d0fb48", "type": "MEPH.audio.graph.node.GainNode", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "9f27bba3-98e3-42d3-8074-af49e88f0792", "options": null, "output": false, "isOutput": false }, { "name": "gain", "title": "gain", "type": "Number", "connector": null, "id": "c63af8e0-a216-4efb-aa62-aeb6a7e73045", "options": { "path": "gain.value" }, "output": false, "isOutput": false }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "9d6b1fe4-18cb-46e3-8370-5a101ace1ee2", "output": true, "isOutput": false }] } }] };

    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create a GeneratedNode node', function () {
        var GeneratedNode = new MEPH.audio.graph.node.GeneratedNode();

        expect(GeneratedNode).toBeTruthy();
    });


    it('can setup the nodeInputs and Outputs from a configuartion', function () {
        var generated = new MEPH.audio.graph.node.GeneratedNode(seed);

        expect(generated.nodeInputs).toBeTruthy();
        expect(generated.nodeOutputs).toBeTruthy();
        expect(generated.nodeInputs.length).toBeTruthy();
        expect(generated.nodeOutputs.length).toBeTruthy();
    });

    it('can generate a template and store it in the framework base on the seed in the constructor', function () {
        var generated = new MEPH.audio.graph.node.GeneratedNode(seed);

        expect(generated.templates.length === 3).toBeTruthy();
    });

    it('can render a generated ndoe', function (done) {
        MEPH.render('MEPH.audio.graph.node.GeneratedNode', 'generatednode', seed).then(function (r) {
            var results = r.res;
            var app = r.app;

            var dom,
                AudioGraph = results.first().classInstance;
            ///Assert
            dom = AudioGraph.getDomTemplate()[0]
            expect(dom).toBeTruthy();
            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    })
});﻿describe("MEPH/audio/graph/node/GainNode.spec.js", 'MEPH.audio.graph.node.GainNode', function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create a GainNode node', function () {
        var GainNode = new MEPH.audio.graph.node.GainNode();

        expect(GainNode).toBeTruthy();
    });

    it('has buffer and normalize inputs ', function () {
        var GainNode = new MEPH.audio.graph.node.GainNode();

        expect(GainNode.nodeInputs.some(function (x) { return x.name === 'buffer' })).toBeTruthy();
        expect(GainNode.nodeInputs.some(function (x) { return x.name === 'gain' })).toBeTruthy();   
        expect(GainNode.nodeOutputs.some(function (x) { return x.name === 'buffer' })).toBeTruthy();
    })

    it('has buffer and normalize inputs ', function () {
        var GainNode = new MEPH.audio.graph.node.GainNode();

        var output = GainNode.nodeOutputs.some(function (x) { return x.name === 'buffer' });

        expect(output).toBeTruthy();
    })
});﻿describe("MEPH/audio/graph/node/DynamicsCompressorNode.spec.js", 'MEPH.audio.graph.node.DynamicsCompressorNode', function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create a DynamicsCompressorNode node', function () {
        var DynamicsCompressorNode = new MEPH.audio.graph.node.DynamicsCompressorNode();

        expect(DynamicsCompressorNode).toBeTruthy();
    });

    it('has buffer and normalize inputs ', function () {
        var DynamicsCompressorNode = new MEPH.audio.graph.node.DynamicsCompressorNode();

        expect(DynamicsCompressorNode.nodeInputs.some(function (x) { return x.name === 'buffer' })).toBeTruthy();
        expect(DynamicsCompressorNode.nodeInputs.some(function (x) { return x.name === 'attack' })).toBeTruthy();
        expect(DynamicsCompressorNode.nodeInputs.some(function (x) { return x.name === 'knee' })).toBeTruthy();
        expect(DynamicsCompressorNode.nodeInputs.some(function (x) { return x.name === 'ratio' })).toBeTruthy();
        expect(DynamicsCompressorNode.nodeInputs.some(function (x) { return x.name === 'reduction' })).toBeTruthy();
        expect(DynamicsCompressorNode.nodeInputs.some(function (x) { return x.name === 'release' })).toBeTruthy();
        expect(DynamicsCompressorNode.nodeInputs.some(function (x) { return x.name === 'threshold' })).toBeTruthy();
    })

    it('has buffer and normalize inputs ', function () {
        var DynamicsCompressorNode = new MEPH.audio.graph.node.DynamicsCompressorNode();

        var output = DynamicsCompressorNode.nodeOutputs.some(function (x) { return x.name === 'buffer' });

        expect(output).toBeTruthy();
    })
});﻿describe("MEPH/audio/graph/node/DelayNode.spec.js", 'MEPH.audio.graph.node.DelayNode', function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create a DelayNode node', function () {
        var DelayNode = new MEPH.audio.graph.node.DelayNode();

        expect(DelayNode).toBeTruthy();
    });

    it('has buffer and normalize inputs ', function () {
        var DelayNode = new MEPH.audio.graph.node.DelayNode();

        var buffer = DelayNode.nodeInputs.some(function (x) { return x.name === 'buffer' });
        var normalize = DelayNode.nodeInputs.some(function (x) { return x.name === 'delayTime' });

        expect(buffer).toBeTruthy();
        expect(normalize).toBeTruthy();
    })

    it('has buffer and normalize inputs ', function () {
        var DelayNode = new MEPH.audio.graph.node.DelayNode();

        var output = DelayNode.nodeOutputs.some(function (x) { return x.name === 'buffer' });

        expect(output).toBeTruthy();
    })
});﻿describe("MEPH/audio/graph/node/Convolver.spec.js", 'MEPH.audio.graph.node.Convolver', function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create a convolver node', function () {
        var convolver = new MEPH.audio.graph.node.Convolver();

        expect(convolver).toBeTruthy();
    });

    it('has buffer and normalize inputs ', function () {
        var convolver = new MEPH.audio.graph.node.Convolver();

        var buffer = convolver.nodeInputs.some(function (x) { return x.name === 'buffer' });
        var normalize = convolver.nodeInputs.some(function (x) { return x.name === 'normalize' });

        expect(buffer).toBeTruthy();
        expect(normalize).toBeTruthy();
    })

    it('has buffer and normalize inputs ', function () {
        var convolver = new MEPH.audio.graph.node.Convolver();

        var output = convolver.nodeOutputs.some(function (x) { return x.name === 'buffer' });

        expect(output).toBeTruthy();
    })
});﻿var pgx = pgx || {};
MEPH.define('MEPH.util.Vector', {
    properties: {
    },
    initialize: function (x, y, z, useBinaryHeap) {
        if (useBinaryHeap)
            this._id = pgx.Vector.Id++;
        if (arguments.length > 0) {
            this._x = x;
            this._y = y;
            this._z = 0;
            if (z != undefined)
                this._z = z;
            if (useBinaryHeap)
                this._adjacentEdges = new BinaryHeap(function (node) {
                    return node.length();
                });
        }
        Object.defineProperty(this, 'x', {
            get: function () {
                return this._x;
            }
        });
        Object.defineProperty(this, 'y', {
            get: function () {
                return this._y;
            }
        });
        Object.defineProperty(this, 'z', {
            get: function () {
                return this._z;
            }
        });
    },
    statics: {
        Create: function (obj) {
            if (Array.isArray(obj) || obj instanceof J3DIVector3) {
                return new MEPH.util.Vector(obj[0], obj[1], obj[2]);
            }
            return new MEPH.util.Vector(obj.x, obj.y, obj.z);
        },
        Lerp: function (thrustAmount, to, percentage) {
            return thrustAmount + (to - thrustAmount) * percentage;
        },
        Lerp2D: function (vect1, vect2, percentage) {
            return new MEPH.util.Vector(MEPH.util.Vector.Lerp(vect1._x, vect2._x, percentage), MEPH.util.Vector.Lerp(vect1._y, vect2._y, percentage))
        },
        Lerp3D: function (vect1, vect2, percentage) {
            return new MEPH.util.Vector(MEPH.util.Vector.Lerp(vect1._x, vect2._x, percentage), MEPH.util.Vector.Lerp(vect1._y, vect2._y, percentage), MEPH.util.Vector.Lerp(vect1._z, vect2._z, percentage))
        },
        Slope: function (p1, p2) {

            var p21 = p2.subtract(p1)
            return p21.y / p21.x;
        },
        Line: function (p1, p2) {
            var slope = MEPH.math.Vector.Slope(p1, p2);
            return {
                p1: new MEPH.math.Vector(0, 0),
                p2: new MEPH.math.Vector(1, slope)
            }
        },
        Zero: function () {
            return new MEPH.util.Vector(0, 0, 0)
        },
        Id: 0
    },
    ToDebug: function () { return "x : " + this._x + "y : " + this._y + "z : " + this._z },
    equals: function (that) {
        if (this._x == that._x && this._y == that._y)
            return true;
        return false;
    },
    equals3d: function (that) {
        if (this._x == that._x && this._y == that._y && this._z == that._z)
            return true;
        return false;
    },
    get_id: function () { return this._id; },
    copy: function () {
        return new pgx.Vector(this._x, this._y, this._z);
    },

    destroy: function (edge) {
        this.remove_adjacentEdge(edge);
    },
    consume: function (that) {
        while (that.get_adjacentEdges().size() > 0) {
            var edge = that.get_adjacentEdges().pop();
            edge.swapVertex(that, this);
            this.add_adjacentEdge(edge);
        }
    },
    add_adjacentEdge: function (edge) {
        this._adjacentEdges.push(edge);
    },
    get_adjacentEdges: function () {
        return this._adjacentEdges;
    },
    remove_adjacentEdge: function (edge) {
        this._adjacentEdges.remove(edge);
    },
    reset: function () {
        this._adjacentEdges.clear();
    },
    length: function () {
        return Math.sqrt(this._x * this._x + this._y * this._y);
    },
    distance: function (that) {
        var x = this._x - that._x;
        var y = this._y - that._y;
        return Math.sqrt(x * x + y * y);
    },
    distanceSquared: function (that) {
        var x = this._x - that._x;
        var y = this._y - that._y;
        var v = Math.sqrt(x * x + y * y);
        return v * v;
    },
    set: function (x, y, z) {
        this.setX(x);
        this.setY(y);
        this.setZ(z);
    },
    setZ: function (z) {
        this._z = z;
    },
    setY: function (y) {
        this._y = y;
    },
    setX: function (x) {
        this._x = x;
    },
    setXY: function (x, y) {
        this.setX(x);
        this.setY(y);
    },
    dot: function (that) {
        return this._x * that._x + this._y * that._y;
    },
    cross: function (that) {
        return this._x * that._y - this._y * that._x;
    },
    unit: function () {
        return this.divide(this.length());
    },
    getVectorOfLength: function (length) {
        return this.divide(this.length() / length);
    },
    unitEquals: function () {
        this.divideEquals(this.length());

        return this;
    },
    add: function (that) {
        return new pgx.Vector(this._x + that._x, this._y + that._y, this._z + that._z);
    },
    addEquals: function (that) {
        this._x += that._x;
        this._y += that._y;

        return this;
    },
    subtract: function (that) {
        return new pgx.Vector(this._x - that._x, this._y - that._y, this._z - that._z);
    },
    subtractEquals: function (that) {
        this._x -= that._x;
        this._y -= that._y;
        return this;
    },
    mapdivide: function (that) {
        return new pgx.Vector(this._x / that._x, this._y / that._y);
    },
    mapmultiply: function (that) {
        return new pgx.Vector(this._x * that._x, this._y * that._y);
    },
    square: function () {
        return this._x * this._x + this._y * this._y;
    },
    multiply: function (scalar) {
        return new pgx.Vector(this._x * scalar, this._y * scalar);
    },
    multiplyEquals: function (scalar) {
        this._x *= scalar;
        this._y *= scalar;
        return this;
    },
    divide: function (scalar) {
        if (scalar == 0) {
            return new pgx.Vector(0, 0);
        }
        return new pgx.Vector(this._x / scalar, this._y / scalar);
    },
    divideEquals: function (scalar) {
        this._x /= scalar;
        this._y /= scalar;
        return this;
    },
    perp: function () {
        return new pgx.Vector(-this._y, this._x);
    },
    perpendicular: function (that) {
        return this.subtract(this.project(that));
    },
    project: function (that) {
        var percent = this.dot(that) / that.dot(that);

        return that.multiply(percent);
    },
    toString: function () {
        return this._x + "," + this._y;
    },
    fromPoints: function (p1, p2) {
        return new Vector2D(
        p2.x - p1.x,
        p2.y - p1.y);
    },
    angleBetween: function (that) {
        return Math.acos(this.dot(that) / (this.length() * that.length()));
    },
    rotate: function (angle) {
        var ca = Math.cos(angle);
        var sa = Math.sin(angle);
        var rx = this._x * ca - this._y * sa;
        var ry = this._x * sa + this._y * ca;
        return new pgx.Vector(rx, ry);
    },
    random: function () {
        return new pgx.Vector(2 * (Math.random() - .5), 2 * (Math.random() - .5));
    }
});﻿/**
 * @class
 * Defines a base class for all controls and views.
 **/
MEPH.define('MEPH.bind.Binder', {
    requires: ['MEPH.util.Dom'],
    statics: {
        events: {
            altered: 'altered',
            domevent: 'domevent'
        },
        isOnPath: function (path1, path2) {
            return path1.indexOf(path2) !== -1;
        }
    },
    properties: {
        MEPHId: 'mephid',
        $bindPromise: null
    },
    initialize: function () {
        var me = this;
        me.$bindPromise = Promise.resolve();
    },
    /**
     * Binds instructions from dom to object.
     * @param {Object} object
     * @param {Object} dom
     **/
    bindObject: function (object, dom) {
        var me = this,
            doms, reverseBindingInformation,
            eventBindingInformation = {},
            bindingInformation = {};

        doms = me.getDomObjectsForBinding(dom);
        doms.foreach(function (dom) {
            var mephid = dom.getAttribute(me.MEPHId);
            if (mephid) {
                Object.defineProperty(object, mephid, {
                    enumerable: false,
                    writable: false,
                    configurable: false,
                    value: dom
                });
            }
            bindingInformation = me.parseDomAttributes(dom);
            me.addObjectDomEvent(dom, object);
            me.addEventListeners(bindingInformation, object, dom);
            if (bindingInformation) {
                reverseBindingInformation = me.reverseInstructions(bindingInformation, object, dom);
                me.addEventListeners(reverseBindingInformation, object, object);
            }

            //if (forceControl) {
            //    instruction.path[0] = 'c$';
            //    result[i] = instructions.select(function (x) { return x.path.join(MEPH.pathDelimiter); }).join(MEPH.pipeString);
            //}
            //else {
            //    result[i] = bindingInformation[i];
            //}
        });
    },
    /**
     * Binds the control package
     * @param {Object} controlPackage
     * @param {Object} controlPackage.classInstance
     * @param {Object} controlPackage.controlObject
     * @param {Object} controlPackage.controlObject.node
     */
    bindControlPackage: function (controlPackage) {
        var me = this,
            Binder = MEPH.bind.Binder,
            trimmedInstrutions,
            dom = controlPackage.controlObject.node,
            reverseBindingInformation,
            eventBindingInformation = me.parseDomAttributes(dom, MEPH.getEventDataBindingPrefixes(), MEPH.defaultEventPrefix),
            bindingInformation = me.parseDomAttributes(dom, null, null, controlPackage.classInstance);

        if (bindingInformation && controlPackage.classInstance.isReferrerable) {
            controlPackage.classInstance.getReferenceConnections().foreach(function (reference) {
                if (reference.type !== 'control' && reference.type !== 'subcontrol') {
                    trimmedInstrutions = me.trimInstructions(bindingInformation, reference.type);
                    if (trimmedInstrutions) {
                        me.addPackageListeners(trimmedInstrutions, reference.obj, controlPackage.classInstance);
                        reverseBindingInformation = me.reverseInstructions(trimmedInstrutions, controlPackage.classInstance, reference.obj);
                        if (reverseBindingInformation) {
                            me.addEventListeners(reverseBindingInformation, controlPackage.classInstance, reference.obj);
                        }
                    }
                }
            });
        }
        if (eventBindingInformation) {
            //for (i in eventBindingInformation) {
            //    controlPackage.classInstance.getDomTemplate().where(function (x) {
            //        return x.nodeType === Dom.elementType;
            //    }).foreach(function (dom) {
            //        if (dom.addEventListener) {
            //            dom.addEventListener(i, function (eventType, evnt) {
            //                evnt.stopPropagation();
            //                controlPackage.classInstance.fire(Binder.events.domevent, {
            //                    eventType: eventType,
            //                    domEvent: evnt
            //                });
            //            }.bind(me, i));
            //        }
            //    })
            //}
            // me.addDomEventListeners(eventBindingInformation, controlPackage.classInstance, controlPackage.classInstance);
        }
    },
    /**
     * Trims the instructions to the minimum
     **/
    trimInstructions: function (bindingInformation, type) {
        var me = this,
            instruction,
            result = false,
            i;

        if (!bindingInformation) {
            return false;
        }

        for (i in bindingInformation) {
            if (bindingInformation.hasOwnProperty(i)) {
                instruction = me.parseInstructionString(bindingInformation[i]).first();

                if (instruction.shortCut && type === instruction.shortCut.type) {
                    result = result || {};
                    result[i] = bindingInformation[i];
                }
            }
        }
        return result;
    },
    addPackageListeners: function (bindingInformation, obj, classInstance) {
        var me = this,
            instruction,
            instructions,
            target,
            types,
            Binder = MEPH.bind.Binder,
            altered = Binder.events.altered,
            bi,
            prop,
            connectables = me.getConnectableTypes(obj),
            i;
        if (!bindingInformation) {
            return;
        }
        obj.on(altered, function (eventType, args) {
            var instructionPath;

            for (i in bindingInformation) {
                if (bindingInformation.hasOwnProperty(i)) {
                    bi = bindingInformation[i];
                    instructions = me.parseInstructionString(bi, obj);
                    instruction = instructions.first();

                    if (connectables.some(function (x) {
                        return x === instruction.shortCut.type;
                    })) {
                        target = me.getConnection(classInstance, instruction.shortCut.type);
                        instructionPath = instruction.path.subset(1).join('.');
                        if (target && Binder.isOnPath(instructionPath, args.path)) {
                            me.executeInstructions(classInstance, instructionPath, altered, instructions, obj, i, false, args);//me, ;
                        }
                    }
                }
            }
        }, obj);
    },
    addObjectDomEvent: function (dom, object) {
        var i,
            me = this,
            Binder = MEPH.bind.Binder,
            eventBindingInformation;

        eventBindingInformation = me.parseDomAttributes(dom, MEPH.getEventDataBindingPrefixes(), MEPH.defaultEventPrefix);
        for (i in eventBindingInformation) {
            dom.addEventListener(i, function (eventType, evnt) {
                object.fire(Binder.events.domevent, {
                    eventType: eventType,
                    domEvent: evnt
                });
            }.bind(me, i));
        }
        me.addDomEventListeners(eventBindingInformation, object, object);
    },
    /**
     * Reverses instructions that do not have pipes.
     * @param {Object} bindingInformation
     * @param {MEPH.control.Control} control
     * @returns {Object}
     */
    reverseInstructions: function (bindingInformation, parentControl, childControl) {
        var me = this,
            i,
            result = {},
            path,
            reference,
            subcontrolPrefix,
            connection,
            referenceType;
        if (!bindingInformation) {
            return false;
        }
        for (i in bindingInformation) {
            if (MEPH.mephHasOwnProperty(bindingInformation, i)) {
                if (bindingInformation[i].indexOf(MEPH.pipeString) === -1) {
                    path = MEPH.Array(bindingInformation[i].trim().split(MEPH.pathDelimiter));
                    referenceType = path.first();

                    if (referenceType) {
                        reference = MEPH.getBindPrefixShortCut(referenceType);
                        if (reference) {
                            connection = parentControl.getConnection(reference.type);
                            subcontrolPrefix = MEPH.getBindPrefixShortCuts().first(function (x) {
                                return x.type === 'self';
                            }).prefix;
                            result[path.subset(1).join(MEPH.pathDelimiter)] = subcontrolPrefix + MEPH.pathDelimiter + i;
                        }
                        //else {
                        //    throw 'MEPH.bind.Binder : no reference type  found with ' + referenceType;
                        //}
                    }
                    else {
                        throw 'MEPH.bind.Binder : no reference type found';
                    }
                }
            }
        }
        return result;
    },
    /**
     * Binds a control to another control using.
     * @param {Object} controlClassInstance
     * @param {Object} subcontrolClassInstance
     * @param {Object} subNode
     */
    bindControl: function (controlClassInstance, subcontrolClassInstance, subNode) {
        var me = this,
            parsedPushInformation,
            eventBindingInformation,
            trimmedInstructions,
            reverseBindingInformation,
            bindingInformation;
        bindingInformation = me.parseDomAttributes(subNode, null, null, subcontrolClassInstance);
        reverseBindingInformation = me.reverseInstructions(bindingInformation, controlClassInstance, subcontrolClassInstance);
        parsedPushInformation = me.parseDomAttributes(subNode, MEPH.getReverseDataBindingPrefixes(), MEPH.defaultReversePrefix);
        MEPH.apply(parsedPushInformation, reverseBindingInformation);
        if (bindingInformation) {
            trimmedInstructions = me.trimInstructions(bindingInformation, 'control');
            me.addEventListeners(trimmedInstructions, controlClassInstance, subcontrolClassInstance);
        }
        if (reverseBindingInformation) {
            me.addEventListeners(reverseBindingInformation, subcontrolClassInstance, controlClassInstance);
        }
    },
    bindDomControl: function (controlPackage, subcontrolPackage, subNode) {
        var me = this,
            i,
            Binder = MEPH.bind.Binder,
            eventBindingInformation;

        eventBindingInformation = me.parseDomAttributes(subNode, MEPH.getEventDataBindingPrefixes(), MEPH.defaultEventPrefix);

        for (i in eventBindingInformation) {
            subcontrolPackage.templateNode.where(function (dom) {
                return dom.nodeType === MEPH.util.Dom.elementType;
            }).foreach(function (dom) {
                dom.addEventListener(i, function (eventType, evnt) {
                    evnt.stopPropagation();
                    if (!evnt.cancelled) {
                        subcontrolPackage.classInstance.fire(Binder.events.domevent, {
                            eventType: eventType,
                            domEvent: evnt
                        });
                    }
                }.bind(me, i));
            });
        }
        me.addDomEventListeners(eventBindingInformation, subcontrolPackage.classInstance, controlPackage.classInstance);
    },
    addDomEventListeners: function (bindingInformation, obj, dom) {
        var me = this, i, bi,
            instructions,
            Binder = MEPH.bind.Binder,
            domevent = Binder.events.domevent;
        if (!bindingInformation) {
            return;
        }
        obj.on(domevent, function (bindingInformation, eventType, args) {
            for (i in bindingInformation) {
                if (args.eventType === i) {
                    if (bindingInformation.hasOwnProperty(i)) {
                        bi = bindingInformation[i];
                        instructions = me.parseInstructionString(bi, obj);
                        me.executeInstructions(dom, null, domevent, instructions, dom, i, true, args);//me, ;
                    }
                }
            }
        }.bind(me, bindingInformation));
        obj.bindingInformations = obj.bindingInformations || [];
        obj.bindingInformations.push(bindingInformation);
    },
    /**
     * Add event listeners to an object that impements has the MEPH.Events.
     * @param {Object} bindingInformation
     * @param {Object} obj
     * @param {Object} dom
     **/
    addEventListeners: function (bindingInformation, obj, dom) {
        var me = this,
            instruction,
            instructions,
            target,
            types,
            Binder = MEPH.bind.Binder,
            altered = Binder.events.altered,
            bi,
            prop,
            connectables = me.getConnectableTypes(obj),
            i;
        if (!bindingInformation) {
            return;
        }
        var objectsToList = [];
        for (var b in bindingInformation) {
            var instruction = me.parseInstructionString(bindingInformation[b], obj);
            if (instruction) {
                var firstinstruction = instruction.first();
                if (firstinstruction) {
                    var type = firstinstruction.shortCut.type;
                    var ref = obj.getReferenceConnections().first(function (x) { return x.type === type; });
                    if (!ref) {
                        continue;
                    }
                    if (!objectsToList.some(function (x) { return x.type === type; })) {
                        objectsToList.push({ type: type, ref: ref.obj, bindingInformation: {} });
                    }
                    var temp = objectsToList.first(function (x) { return x.type === type; });
                    temp.bindingInformation[b] = bindingInformation[b];
                }
            }
        }
        if (objectsToList.length === 0) {
            objectsToList.push({ ref: obj, bindingInformation: bindingInformation });
        }
        objectsToList.foreach(function (temp) {
            //var obj = temp.ref;
            //var bindingInformation = temp.bindingInformation;
            temp.ref.on(altered, function (bindingInformation, eventType, args) {
                var instructionPath;
                try {
                    for (var i in bindingInformation) {
                        var bi = bindingInformation[i];
                        if (bi) {
                            var instructions = me.parseInstructionString(bi, obj);
                            var instruction = instructions.first();

                            if (connectables.some(function (x) {
                                return x === instruction.shortCut.type;
                            })) {
                                var target = me.getConnection(obj, instruction.shortCut.type);
                                instructionPath = instruction.path.subset(1).join('.');
                                if (target && Binder.isOnPath(instructionPath, args.path)) {
                                    me.executeInstructions(dom, instructionPath, altered, instructions, obj, i, false, args);//me, ;
                                }
                            }
                        }
                    }
                }
                catch (e) {
                    console.log(e);
                }
            }.bind(me, temp.bindingInformation), temp.ref);
        })
    },
    /**
     * Gets values of the parameters from the obj
     * @param {Array} parameters
     * @param {Object} obj
     ***/
    getValuesOfParameter: function (parameters, obj) {
        var me = this, results;

        return (parameters || []).select(function (param) {
            var value;
            if (param && param.shortCut && me.getConnection(obj, param.shortCut.type)) {
                if (param.shortCut.type === 'subcontrol') {
                    value = MEPH.getPathValue(param.path.subset(1).join('.'), obj);
                }
                else {
                    value = MEPH.getPathValue(param.path.subset(1).join('.'), me.getConnection(obj, param.shortCut.type));// obj);
                }
                return value;
            }
            else {
                return param.value;
            }
        });
    },
    /**
     * Executes instrucions and applies the results to the dom object.
     * @param {Object} dom
     * @param {String} prop
     * @param {String} eventType
     * @param {Array} instructions
     * @param {Object} obj
     * @return {Promise}
     **/
    executeInstructions: function (dom, prop, eventType, instructions, obj, propertyPath, ignoreSetProperty, eventargs) {
        var me = this,
            numOfInstructions = instructions ? instructions.length : 0,
            promise;
        promise = me.$bindPromise.then(function () {
            var target,
                value,
                instruction = instructions.first()
            //target = me.getConnection(obj, instruction.shortCut.type);
            if (instruction.shortCut.type === 'subcontrol') {
                value = MEPH.getPathValue(instruction.path.subset(1).join('.'), obj);
            }
            else {
                value = MEPH.getPathValue(instruction.path.subset(1).join('.'), me.getConnection(obj, instruction.shortCut.type));// obj);
            }
            return value;
        });

        instructions.foreach(function (instruction, index) {
            var target = me.getConnection(obj, instruction.shortCut.type),
                value;
            promise = promise.then(function (target, index, result) {
                var success,
                    path = instruction.path.subset(1).join('.');
                value = MEPH.getPathValue(path, target);
                if (typeof (value) === 'function') {
                    var paramValues = me.getValuesOfParameter(instruction.params, obj);
                    paramValues = paramValues.concat([result, dom, prop, eventType, instructions, obj, eventargs]);
                    return value.apply(target, paramValues);
                }
                else {
                    if (numOfInstructions > 1) {
                        success = MEPH.setPathValue(target, path, result);
                        if (!success) {
                            throw 'Unable to set path : ' + path;
                        }
                    }
                    return result;
                }
                return MEPH.getPathValue(path, target);
            }.bind(me, target, index))
        });
        if (!ignoreSetProperty) {
            promise = promise.then(function (result) {
                me.setValueOnDom(result, dom, propertyPath);
            });
        }
        promise = promise.catch(function (error) {
            MEPH.Log(error);
            throw error;
        });
        me.$bindPromise = promise;
        return me.$bindPromise;
    },

    /**
     * Sets the value on the dom.
     * @param {Object} value
     * @param {Object} dom
     */
    setValueOnDom: function (value, dom, prop) {
        if (dom) {
            if (MEPH.util.Dom.elementType === dom.nodeType) {
                switch (prop) {
                    case 'type':
                    case 'for':
                    case 'step':
                    case 'max':
                    case 'min':
                        dom.setAttribute(prop, value);
                        break;

                    case 'class':
                        MEPH.util.Array.convert(dom.classList).foreach(function (x) {
                            dom.classList.remove(x);
                        });
                        if (value) {
                            MEPH.Array(value.split(' ')).select(function (x) {
                                return x.trim();
                            }).where(function (x) {
                                return x;
                            }).foreach(function (val) {
                                dom.classList.add(val);
                            });
                        }
                        break;
                    case 'innerHTML':
                        MEPH.setPathValue(dom, prop, value);
                        break;
                    case 'nothing':
                        break;
                    default:
                        dom.setAttribute(prop, value);
                        break;
                }
            }
            else {
                switch (prop) {
                    default:
                        MEPH.setPathValue(dom, prop, value);
                        break;
                }
            }
        }
    },
    getConnection: function (obj, type) {
        var me = this;
        return obj.getConnection(type);
    },
    getConnectableTypes: function (obj) {
        var me = this;
        return obj.getConnectableTypes();
    },
    /**
     * Gets custom alias tag elements of the dom a single level down.
     * @param {Object} dom
     * @param {Number} depth
     * @returns {Array}
     **/
    getSubObjects: function (dom, depth) {
        var me = this,
           result = [],
           template;
        if (depth === 0) {
            return result;
        }
        if (dom.length !== undefined &&
            dom.nodeType !== MEPH.util.Dom.textType &&
            dom.nodeType !== MEPH.util.Dom.commentType) {
            result = MEPH.Array(dom).concatFluentReverse(function (d) {
                return MEPH.Array(me.getSubObjects(d, depth));
            });
        }
        else if (dom.nodeType !== MEPH.util.Dom.elementType) {
            return result;
        }
        else {
            template = MEPH.getTemplateByNode(dom);
            if (template) {
                result.push(dom);
                result = result.concat(me.getSubObjects(dom.childNodes, depth - 1));
            }
            else {
                result = result.concat(me.getSubObjects(dom.childNodes, depth));
            }
        }

        return MEPH.Array(result).where(function (x) { return x; });
    },
    /**
     * Gets dom objects from an Array/Dom object that are not custom alias tags
     * @param {Object/Array} dom
     * @returns {Array}
     **/
    getDomObjectsForBinding: function (dom) {
        var me = this,
            result = [],
            template;

        if (dom.length !== undefined && (dom.nodeName ? dom.nodeName.toLowerCase() !== 'select' : true) &&
            dom.nodeType !== MEPH.util.Dom.textType &&
            dom.nodeType !== MEPH.util.Dom.commentType) {
            result = MEPH.Array(dom).concatFluentReverse(function (d) {
                return me.getDomObjectsForBinding(d);
            });
        }
        else if (dom.nodeType !== MEPH.util.Dom.elementType) {
            return result;
        }
        else {
            template = MEPH.getTemplateByNode(dom);
            if (template) {
                return result;
            }
            else {
                result.push(dom);
                result = result.concat(me.getDomObjectsForBinding(dom.childNodes));
            }
        }

        return MEPH.Array(result);
    },
    /**
     * Parses an instruction string.
     * @param {String} instructionString
     **/
    parseInstructionString: function (instructionString, object) {
        var me = this,
            uniqueId, reference,
            subcontrol,
            instructions;
        instructions = MEPH.Array(instructionString.split(MEPH.pipeString))
             .select(function (x) {
                 return x.trim();
             })
             .select(function (t) {
                 var x = t.split(MEPH.ParameterDelimiter).trim().first();
                 var parameters = t.split(MEPH.ParameterDelimiter).trim().subset(1);
                 var splitPath = MEPH.Array(x.split(MEPH.pathDelimiter)),
                     prefixShortCut,
                     shortCut;
                 shortCut = splitPath.first();
                 subcontrol = MEPH.getBindPrefixShortCuts().first(function (x) {
                     return x.type === 'subcontrol';
                 });

                 if (shortCut.startsWith(subcontrol.prefix)) {
                     uniqueId = shortCut.substr(subcontrol.prefix.length, shortCut.length);
                     shortCut = shortCut.substr(0, subcontrol.prefix.length);
                     splitPath = MEPH.Array([shortCut].concat(splitPath.subset(1)));
                 }
                 prefixShortCut = MEPH.getBindPrefixShortCuts().first(function (x) {
                     return x.prefix === shortCut;
                 });

                 if (object && object.getReferenceConnections) {
                     reference = object.getReferenceConnections().first(function (x) {
                         return x.type === shortCut;
                     });
                     if (reference) {
                         prefixShortCut = reference;
                     }
                 }

                 return {
                     path: splitPath,
                     uniqueId: uniqueId,
                     shortCut: prefixShortCut,
                     params: me.getParameters(t, object)
                 }
             });
        return instructions;
    },
    /**
     * Takes a raw instruction and an object, and will retrieve the parameters.
     * @param {String} rawInstruction
     * @param {Object} object
     **/
    getParameters: function (rawInstruction, object) {
        var me = this, splitPath, uniqueId,
            subcontrol = MEPH.getBindPrefixShortCuts().first(function (x) {
                return x.type === 'subcontrol';
            }),
            results = [],
            parameters = rawInstruction.split(MEPH.ParameterDelimiter).trim().subset(1);

        return parameters.select(function (param) {
            splitPath = param.split(MEPH.pathDelimiter);
            shortCut = splitPath.first();

            if (shortCut.startsWith(subcontrol.prefix)) {
                uniqueId = shortCut.substr(subcontrol.prefix.length, shortCut.length);
                shortCut = shortCut.substr(0, subcontrol.prefix.length);
                splitPath = MEPH.Array([shortCut].concat(splitPath.subset(1)));
            }
            prefixShortCut = MEPH.getBindPrefixShortCuts().first(function (x) {
                return x.prefix === shortCut;
            });

            if (object && object.getReferenceConnections) {
                reference = object.getReferenceConnections().first(function (x) {
                    return x.type === shortCut;
                });
                if (reference) {
                    prefixShortCut = reference;
                }
            }

            return {
                path: splitPath,
                uniqueId: uniqueId,
                shortCut: prefixShortCut,
                value: param
            }

        });
    },
    /**
     * Parses the dom attributes and pulls a object that contains the binding information.
     * @param {Object} dom
     * @returns {Object}
     **/
    parseDomAttributes: function (dom, reverseprefixes, type, instance) {
        var me = this,
            attributes,
            attribute,
            prefixAndProperties,
            prefixes,
            bindingInformation = {};
        prefixes = reverseprefixes || MEPH.getDataBindPrefixes();

        attributes = MEPH.util.Array.convert(dom.attributes || []).select(function (x) { return x.name || x.nodeName; });
        var prefixAndProperties = attributes
            .where(function (x) {
                return x !== (MEPH.defaultDataBindString || x !== MEPH.defaultReversePrefix || x !== MEPH.defaultEventPrefix);
            })
            .select(function (attribute) {
                var propertyName,
                    prefix = prefixes.first(function (x) {
                        return attribute.startsWith(x + MEPH.bindPrefixDelimiter);
                    });
                propertyName = attribute.after(prefix + MEPH.bindPrefixDelimiter);
                return {
                    prefix: prefix,
                    property: propertyName
                }
            });
        if (attributes.some(function (x) { return x === MEPH.defaultDataBindString || x === MEPH.defaultReversePrefix || x !== MEPH.defaultEventPrefix; })) {
            attribute = dom.getAttribute(type || MEPH.defaultDataBindString)

            bindingInformation = attribute ? MEPH.util.Dom.tryParseAttributeJson(attribute) : false;
        }
        if (instance) {
            if (instance.getListOfTransferableAttributes) {
                instance.getListOfTransferableAttributes().where(function (x) {
                    return attributes.some(function (t) { return t === x.name.toLowerCase(); });
                }).foreach(function (x) {
                    prefixAndProperties.push({
                        prefix: '',
                        property: x.name
                    });
                });
            }
            if (instance.getAutoBindProperties && instance.getAutoBindPropertyPath) {
                instance.getAutoBindProperties().where(function (x) {
                    return attributes.some(function (t) { return t === x.property.toLowerCase(); });
                }).foreach(function (x) {
                    //return [{ property: 'customAttr', path: ' isValidatable.value', autoProperty: 'invalid' }];
                    dom.setAttribute(x.autoProperty, instance.getAutoBindPropertyPath(x.property, x.autoProperty));
                    prefixAndProperties.push({
                        prefix: '',
                        property: x.autoProperty
                    });
                });
            }
        }
        prefixAndProperties.foreach(function (prefixAndProperty) {
            var attributeName, attribute;
            attributeName = prefixAndProperty.prefix ?
                            (prefixAndProperty.prefix + MEPH.bindPrefixDelimiter + prefixAndProperty.property) :
                            prefixAndProperty.property;
            attribute = dom.getAttribute(attributeName ? attributeName.toLowerCase() : attributeName);
            if (attribute) {
                bindingInformation = bindingInformation || {};
                bindingInformation[prefixAndProperty.property] = attribute;
            }
        });

        if (bindingInformation && Object.keys(bindingInformation).length > 0) {
            return bindingInformation;
        }
        return false;
    }
}).then(function () {
    MEPH.Binder = new MEPH.bind.Binder();
});﻿/**
 * @class MEPH.math.Vector
 *  Euclidean vector, a geometric entity endowed with magnitude and direction as well as 
 *  a positive-definite inner product; an element of a Euclidean vector space. In physics,
 *  euclidean vectors are used to represent physical quantities that have both magnitude and
 *  direction, such as force, in contrast to scalar quantities, which have no direction.
 *  http://en.wikipedia.org/wiki/Vector_(mathematics_and_physics)
 *
 */
MEPH.define('MEPH.math.Vector', {
    alternateNames: '$Vector',
    requires: ['MEPH.math.J3DIVector3'],
    statics: {
        Id: 0,
        ZeroLength: Math.pow(1, -15),

        Create: function (obj) {
            if (obj instanceof J3DIVector3) {
                return new MEPH.math.Vector(obj[0], obj[1], obj[2]);
            }
            else if (Array.isArray(obj)) {
                return new MEPH.math.Vector(obj);
            }
            return new MEPH.math.Vector(obj.x, obj.y, obj.z);
        },
        ZeroVector: function (dim) {
            return new MEPH.math.Vector([].interpolate(0, dim || 4, function () { return 0; }));
        },
        Slope: function (p1, p2) {

            var p21 = p2.subtract(p1)
            return p21.y / p21.x;
        },
        Line: function (p1, p2) {
            var slope = MEPH.math.Vector.Slope(p1, p2); 
            return {
                p1: new MEPH.math.Vector(0, 0),
                p2: new MEPH.math.Vector(1, slope)
            }
        },

        /**
         * Linear Interpolation between to numbers.
         * @param {Number} thrustAmount
         * @param {Number} to
         * @param {Number} percentage
         **/
        lerp: function (thrustAmount, to, percentage) {
            return thrustAmount + (to - thrustAmount) * percentage;
        },
        /**
         * Linear Interpolation between to vectors of the same dimensions.
         * @param {Number} thrustAmount
         * @param {Number} to
         * @param {Number} percentage
         **/
        Lerp: function (vect1, vect2, percentage) {
            return MEPH.math.Vector.Lerp2D(vect1, vect2, percentage);
        },
        Lerp2D: function (vect1, vect2, percentage) {
            if (vect1.dimensions() === vect2.dimensions()) {
                var res = new MEPH.math.Vector(vect1.vector.select(function (x, index) {
                    return MEPH.math.Vector.lerp(vect1.getIndex(index), vect2.getIndex(index), percentage)
                }));
                return res;
            }
            throw new Error('Vectors must have the same dimensions');
            //return new MEPH.math.Vector(Vector.Lerp(vect1._x, vect2._x, percentage), Vector.Lerp(vect1._y, vect2._y, percentage))
        },
        Lerp3D: function (vect1, vect2, percentage) {
            return Vector.Lerp2D(vect1, vect2, percentage);
        }
    },
    properties: {
        vector: null,
        $shortcuts: null,
        $defaultValue: 0
    },
    initialize: function (x, y, z, useBinaryHeap) {
        if (useBinaryHeap)
            this._id = Vector.Id++;
        var me = this;
        if (Array.isArray(x)) {
            me.vector = x.select(function (x) { return x; });
        }
        else if (arguments.length > 0) {
            me.vector = [x, y, z];
        }
        else me.vector = [];

        me.defineVectorShortcuts();

    },
    defineVectorShortcuts: function () {
        var me = this;
        me.$shortcuts = 'xyzwefglmnopqrstuv';
        var abcd = 'abcd';
        me.$shortcuts.split('').foreach(function (prop, index) {
            if (me[prop] === undefined) {
                Object.defineProperty(me, prop, {
                    get: function (prop, index) {
                        return me.vector[index] || me.$defaultValue;
                    }.bind(me, prop, index),
                    set: function (prop, index, value) {
                        me.vector[index] = value;
                    }.bind(me, prop, index)
                });
            }
        });
        abcd.split('').foreach(function (prop, index) {
            if (me[prop] === undefined) {
                Object.defineProperty(me, prop, {
                    get: function (prop, index) {
                        return me.vector[index] || me.$defaultValue;
                    }.bind(me, prop, index),
                    set: function (prop, index, value) {
                        me.vector[index] = value;
                    }.bind(me, prop, index)
                });
            }
        });
    },
    ToDebug: function () { return "x : " + this._x + "y : " + this._y + "z : " + this._z },
    /**
     * Returns true if that equals this.
     * @param {MEPH.math.Vector} that
     * @return {Boolean}
     */
    equals: function (that) {
        return that.dimensions() === this.dimensions() && this.vector.all(function (x, i) {
            return x === that.getIndex(i);
        });
    },
    firstNonZeroIndex: function () {
        var me = this;
        return me.vector.indexWhere(function (x) { return x; }).first();
    },
    /**
     * Gets the index of the vector.
     * @param {Number} index
     */
    getIndex: function (index) {
        var me = this;
        return me.vector[index] || 0;
    },
    equals3d: function (that) {
        return this.equals(that);
    },

    get_id: function () {
        return this._id;
    },
    /**
     * Copies the vector into a new instance.
     * @returns {MEPH.math.Vector}
     */
    copy: function () {
        return new MEPH.math.Vector(this.vector);
    },

    /**
     * Gets the length of a vector.
     */
    length: function () {
        return Math.sqrt(this.dot(this));
    },
    /**
     * Calculates the distance from this to that.
     * @param {MEPH.math.Vector} that
     **/
    distance: function (that) {
        var res = this.subtract(that);
        return res.length();
    },

    /**
     * Takes the dot product between this and that.
     * @param {MEPH.math.Vector} that
     **/
    dot: function (that) {
        return this.vector.sum(function (x, index) {
            return x * that.getIndex(index);
        })
    },
    /**
     * Cross product (this x that)
     * @param {MEPH.math.Vector} that
     * @return {MEPH.math.Vector}
     **/
    cross: function (that) {
        var me = this, dim = me.dimensions();
        if (that.dimensions() === dim) {
            var index = dim;
            if (dim === 2) {
                return new MEPH.math.Vector([this.getIndex(0) * that.getIndex(1) - this.getIndex(1) * that.getIndex(0)]);
            }
            var result = [].interpolate(0, dim, function (i) {

                var u2 = me.getIndex((i + 1) % dim);
                index = (index - 1);
                if (index < 0) {
                    index = index + dim;
                }
                var v3 = that.getIndex(index);

                index = (index - 1);
                if (index < 0) {
                    index = index + dim;
                }

                var u3 = me.getIndex((i + 2) % dim);
                var v2 = that.getIndex(index);

                var res = (u2 * v3) - (u3 * v2);
                return res;
            });
            return new MEPH.math.Vector(result);
        }
        else {
            throw new Error('MEPH.math.Vector: cross product requires same dimensions');
        }
    },
    /**
     * Creates a unit vector.
     * @returns {MEPH.math.Vector}
     */
    unit: function () {
        return this.divide(this.length());
    },
    /**
     * Creates a vector of length "length".
     * @returns {MEPH.math.Vector}
     */
    getVectorOfLength: function (length) {
        return this.divide(this.length() / length);
    },
    unitEquals: function () {
        this.divideEquals(this.length());

        return this;
    },
    /**
     * Adds a vector.
     * @param {MEPH.math.Vector} that
     */
    add: function (that) {
        return new MEPH.math.Vector(this.vector.select(function (x, index) {
            return x + that.getIndex(index);
        }));
    },
    isZero: function () {
        var me = this;
        return me.length() < Vector.ZeroLength;
    },
    /**
     * Subtracts a vector.
     * @param {MEPH.math.Vector} that
     */
    subtract: function (that) {
        return new MEPH.math.Vector(this.vector.select(function (x, index) {
            return x - that.getIndex(index);
        }));
    },
    /**
     * Gets the dimensions of the vector.
     * @returns {MEPH.math.Vector}
     */
    dimensions: function () {
        var me = this;
        return me.vector.length;
    },

    mapdivide: function (that) {
        return new MEPH.math.Vector(this._x / that._x, this._y / that._y);
    },
    mapmultiply: function (that) {
        return new MEPH.math.Vector(this._x * that._x, this._y * that._y);
    },
    square: function () {
        return this._x * this._x + this._y * this._y;
    },
    /**
     * Multiplies a scalar value across a vector.
     * @param {Number} scalar
     **/
    multiply: function (scalar) {
        var me = this;
        return new MEPH.math.Vector([].interpolate(0, this.dimensions(), function (x) {
            return me.getIndex(x) * scalar;
        }));
    },
    multiplyEquals: function (scalar) {
        this._x *= scalar;
        this._y *= scalar;
        return this;
    },
    /**
     * Divides a scalar value across a vector.
     * @param {Number} scalar
     **/
    divide: function (scalar) {
        var me = this;
        if (scalar == 0) {
            return new MEPH.math.Vector([].interpolate(0, this.dimensions(), function (x) { return 0; }));
        }
        return new MEPH.math.Vector([].interpolate(0, this.dimensions(), function (x) {
            return me.getIndex(x) / scalar;
        }));
    },
    divideEquals: function (scalar) {
        this._x /= scalar;
        this._y /= scalar;
        return this;
    },
    perp: function () {
        return new MEPH.math.Vector(-this._y, this._x);
    },
    perpendicular: function (that) {
        return this.subtract(this.project(that));
    },
    /**
     * Projects that on to this.
     * @param {MEPH.math.Vector} that
     * @return {MEPH.math.Vector}
     */
    project: function (that) {
        var percent = this.dot(that) / that.dot(that);
        return that.multiply(percent);
    },
    /**
     * Rejection that from this.
     * @param {MEPH.math.Vector} that
     * @return {MEPH.math.Vector}
     */
    reject: function (that) {
        var a1 = this.project(that);
        return this.subtract(a1);
    },
    toString: function () {
        return this._x + "," + this._y;
    },
    fromPoints: function (p1, p2) {
        return new MEPH.math.Vector2D(
        p2.x - p1.x,
        p2.y - p1.y);
    },
    angleBetween: function (that) {
        return Math.acos(this.dot(that) / (this.length() * that.length()));
    },
    /**
     * Rotates by angle(2d)
     * @param {Number} angle
     * @return {MEPH.math.Vector}
     **/
    rotate: function (angle) {
        var ca = Math.cos(angle);
        var sa = Math.sin(angle);
        var rx = this.x * ca - this.y * sa;
        var ry = this.x * sa + this.y * ca;
        return new MEPH.math.Vector(rx, ry);
    },
    /**
     * Creates a radom vector.
     * @return {MEPH.math.Vector}
     **/
    random: function () {
        return new MEPH.math.Vector(2 * (Math.random() - .5), 2 * (Math.random() - .5));
    }
}).then(function () {

    $v2 = MEPH.math.Vector;
    MEPH.math.Vector.Zero = new MEPH.math.Vector(0, 0, 0);
});﻿describe("MEPH/audio/graph/node/ChannelSplitterNode.spec.js", 'MEPH.audio.graph.node.ChannelSplitterNode', function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create a ChannelSplitterNode node', function () {
        var ChannelSplitterNode = new MEPH.audio.graph.node.ChannelSplitterNode();

        expect(ChannelSplitterNode).toBeTruthy();
    });

    it('has buffer and normalize inputs ', function () {
        var ChannelSplitterNode = new MEPH.audio.graph.node.ChannelSplitterNode();

        expect(ChannelSplitterNode.nodeInputs.some(function (x) { return x.name === 'buffer' })).toBeTruthy();
    })

    it('has buffer and normalize inputs ', function () {
        var ChannelSplitterNode = new MEPH.audio.graph.node.ChannelSplitterNode();

        var output = ChannelSplitterNode.nodeOutputs.some(function (x) { return x.name === 'buffer' });

        expect(output).toBeTruthy();
    })
});﻿/**
 * @class MEPH.control.Control
 * Defines a base class for all controls and views.
 **/
MEPH.define('MEPH.audio.graph.node.controls.InputCollection', {
    alias: 'inputcollection',
    templates: true,
    scripts: ['MEPH.audio.graph.node.controls.InputCollectionForm'],
    requires: ['MEPH.util.Dom', 'MEPH.util.SVG'],
    extend: 'MEPH.audio.graph.node.controls.AudioControl',
    properties: {
        collection: null
    },
    initialize: function () {
        var me = this;
        me.great()

       me.on('altered', function (type, args) {
            if (args.path === 'collection') {
                me.collection.un(me);
                me.collection.on('changed', me.updateControlList.bind(me), me)
            }
        });
        me.renderer = new MEPH.util.SVG();
    },
    enterValue: function () {
        //var me = this;
        var me = this;
        me.createForm();
    },
    onLoaded: function () {
        var me = this;
        me.great()

        me.getFirstElement().dispatchEvent(MEPH.createEvent('height', { height: me.controlheight }));
    },
    updateControlList: function () {
        var me = this;

        me.renderer.setCanvas(me.collectiongroup);

        me.renderer.clear();
        var step = 15;
        var last = -step;
        me.svgs = me.collection.select(function (x) {
            last += step;
            return {
                text: x.name + ' : ' + x.type,
                shape: MEPH.util.SVG.shapes.text,
                dy: last,
                fill: '#ffffff',
                x: 3
            }
        })
        me.renderer.draw(me.svgs);
        me.controlheight = last + 24;
        me.getFirstElement().dispatchEvent(MEPH.createEvent('height', { height: me.controlheight }));
    },
    addField: function (field) {

        var me = this;
        if (me.collection && me.collection.all(function (x) { return x.name !== field.name; })) {
            me.collection.push(field);
            return true;
        }
        return false

    },
    createForm: function () {
        var me = this;

        var form = MEPH.getTemplate('MEPH.audio.graph.node.controls.InputCollectionForm');
        var element = MEPH.util.Dom.createInputElementOverSvg(me.getFirstElement(), 'div');
        element.innerHTML = form.template;
        var select = element.querySelector('select');
        select.setAttribute('placeholder', 'Input/Output(s)')
        var updateselect = function () {
            MEPH.util.Dom.clearSelect(select);
            me.collection.foreach(function (t) {
                MEPH.util.Dom.addOption(t.name, t.connector, select);
            });
        }
        updateselect();
        Style.width(element, 300)
        var input = element.querySelector('input');
        input.setAttribute('placeholder', 'name');

        var name;
        var type, collectionitem;
        var elements = [{
            setFunc: function (v) {
                if (v && me.collection.all(function (x) { return x.name !== v; })) {
                    if (collectionitem) {
                        collectionitem.name = v;
                        collectionitem.title = v;
                        updateselect();
                        me.updateControlList();
                        select.selectedIndex = me.collection.indexOf(collectionitem);
                    }
                }
            },
            element: input
        }, {
            setFunc: function (v) {
                collectionitem = me.collection.first(function (x) { return x.connector === v; }) || collectionitem;
            },
            element: select
        }];

        MEPH.util.Dom.addSimpleDataEntryToElments(me, elements, element);

    }
})﻿/**
 * @class MEPH.control.Control
 * Defines a base class for all controls and views.
 **/
MEPH.define('MEPH.audio.graph.node.controls.AudioControl', {
    requires: ['MEPH.util.Dom'],
    extend: 'MEPH.audio.graph.node.controls.Control',
    properties: {
        dragareawidth: 0,
        dragareaheight: 0,
        dragareax: null,
        dragareay: null,
        $spaceafterconnector: 0,
        controlheight: 30
    },
    initialize: function () {
        var me = this;
        me.great()
    },
    onLoaded: function () {
        var me = this;
        me.great()
    },
    defineTextX: function () {
        var me = this;
        me.great()

        MEPH.util.Observable.defineDependentProperty('dragareatransform', me, ['texttransform', 'left', 'width', 'connectorxmargin', 'radius', 'bufferx'], function () {
            var result;

            if (me.left) {
                result = me.connectorxmargin + (me.radius || 0) + (me.$spaceafterconnector || 0);
            }
            else {
                result = me.width - me.connectorxmargin - me.radius - (me.$spaceafterconnector || 0);
            }
            me.bufferx = 4;

            me.dragareaheight = me.controlheight || (me.radius * 2) || 0;
            me.dragareawidth = (me.width - me.radius - me.$spaceafterconnector) || 0;
            var x = result;
            var y = parseFloat(me.controlheight / 4) || parseFloat(me.radius || 0);
            me.dragareax = x;
            me.dragareay = y || 0;
            result = 'translate(' + (x || 0) + ',' + (y || 0) + ')';
            return result;
        });
    },
    enterValue: function () {
        //var me = this;
        var me = this;
        var element = Dom.createSimpleDataEntry(me, me.dragarea, 'range', function (val) {
            me.value = val;
        }, me.value);

        element.min = me.minvalue || 0;
        element.max = me.maxvalue || 10;
        element.step = me.increment || .01;
    }
})﻿/**
 * @class MEPH.field.FormField
 * @extends MEPH.control.Control
 * Standard form for a input field.
 **/
MEPH.define('MEPH.field.FormField', {
    alias: 'formfield',
    templates: true,
    extend: 'MEPH.control.Control',
    requires: ['MEPH.util.Observable'],
    properties: {

        /**
         * @property {String} labelText
         * Label text.
         **/
        labelText: null,
        /**
         * @property {String/Array} labelClsBase
         * Base Css classes to apply to the label field.
         */
        labelClsBase: 'meph-label',
        /**
         * @property {String} cls
         * CSS class to apply for this node.
         */
        cls: null,
        /**
         * @property {String} baseComponentCls
         * CSS class to apply for this node.
         */
        baseComponentCls: null,
        /**
         * @property {String/Array} labelClsComponent
         * Base Css classes to apply to the label field.
         */
        labelClsComponent: null,
        /**
         * @property {String/Array} inputCls
         * Css classes to apply to the input field.
         */
        inputCls: null,
        inputCssClass: 'form-control',
        /**
         * Value of the input field
         */
        value: null,
        /**
         * Validation error associated with the field.
         */
        validationError: null,
        /**
         * @property {String} type
         * Type of field, like text, number, phonenumber, email, etc.
         */
        type: null,
        /**
         * @property {String} descriptionText
         * Description text applied to the span following the text.
         */
        descriptionText: null,
        /**
         * @property {String/Array} descriptionCls
         * Css classes applied to the description text.
         */
        descriptionCls: null,
        /**
         * @property {String/Array} defaultValidationErrorCls
         * Defatul css classes applied for validation.
         */
        defaultValidationErrorCls: 'meph-formfield-validation-error'
    },
    initialize: function () {
        var me = this;
        me.callParent.apply(me, arguments);
        me.addAutoBindProperty('value', 'validationError');
        me.addTransferables();
        me.defineDependentProperties();
    },
    raiseEvent: function (event) {
        var me = this;
        var element = me.getFirstElement();
        element.dispatchEvent(MEPH.createEvent(event, { val: me.inputfield.value }));
    },
    /**
     * Gets the auto bind property paths.
     * @param {String} path
     * @param {String} property
     * @returns {String}
     */
    getAutoBindPropertyPath: function (property, autoProperty) {
        var me = this, autoPropSetup, value, pathArray,
            autoProperties = me.getAutoBindProperties();
        autoPropSetup = autoProperties.first(function (x) { return property === x.property && autoProperty === x.autoProperty; });

        if (autoPropSetup) {
            value = me.getInstanceTemplate().getAttribute(autoPropSetup.property);
            if (value) {
                pathArray = value.split('.');
                if (pathArray.length > 1) {
                    pathArray.splice(pathArray.length - 1, 0, MEPH.isValidatablePropertyKey);
                    return pathArray.join(MEPH.pathDelimiter);
                }
            }
        }
        return me.callParent.apply(path);
    },

    /**
     * @private
     * Adds transferable properties.
     **/

    addTransferables: function () {
        var me = this, properties = MEPH.Array(['inputCls',
                                                'descriptionText',
                                                'cls',
                                                'labelText',
                                                'descriptionCls',
                                                'baseComponentCls',
                                                'componentCls',
                                                'inputCssClass',
                                                'labelClsBase',
                                                'labelClsComponent']);

        properties.foreach(function (prop) {
            me.addTransferableAttribute(prop, {
                object: me,
                path: prop
            });
        });

    },
    defineDependentProperties: function () {
        var me = this;
        me.combineClsIntoDepenendProperty('formFieldCls', ['cls', 'inputCssClass', 'baseComponentCls', 'componentCls']);
        me.combineClsIntoDepenendProperty('labelCls', ['labelClsBase', 'labelClsComponent']);
        Observable.defineDependentProperty('validationCls', me, ['validationError'], me.validationErrorChange.bind(me));
    },
    /**
     * Validation changes the validationCls is recalulated.
     **/
    validationErrorChange: function () {
        var me = this;
        if (me.validationError) {
            return me.defaultValidationErrorCls;
        }
        return '';
    }
});﻿
MEPH.define('MEPH.graph.renderer.CanvasRenderer', {
    requires: ['MEPH.util.Renderer'],
    properties: {
    },
    statics: {
        defaultKey: 'default',
        $canvasCache: null,
        defaultOptions: {
            canvas: {
                attributes: {
                    height: 300,
                    width: 400
                }
            }
        },
        cacheDomBag: document.body
    },
    initialize: function () {
        var me = this;
        MEPH.graph.renderer.CanvasRenderer.$canvasCache = MEPH.graph.renderer.CanvasRenderer.$canvasCache ||
            MEPH.util.Observable.observable([]);
        me.$canvasCache = MEPH.graph.renderer.CanvasRenderer.$canvasCache;
        me.renderer = new MEPH.util.Renderer();
    },
    setCanvas: function (canvas) {
        var me = this;
        me.$canvas = canvas;
        me.renderer.setCanvas(canvas);
    },
    drawToCache: function (key, options) {
        key = key || MEPH.graph.renderer.CanvasRenderer.defaultKey;
        var me = this,
            renderer = me.clearCache(key);
        if (!renderer) {
            renderer = me.createCache(key);
        }
        renderer.draw(options);
    },
    drawCached: function (options, key) {
        key = key || MEPH.graph.renderer.CanvasRenderer.defaultKey;
        options = options || {};
        var me = this;
        var cache = me.getCached(key);
        options.shape = pgx.Renderer.shapes.canvas;
        options.canvas = cache.renderer.getCanvas();
        if (cache.renderer) {
            me.renderer.draw(options);
        }
    },
    getCached: function (key) {
        var me = this;
        key = key || MEPH.graph.renderer.CanvasRenderer.defaultKey;
        return me.$canvasCache.first(function (x) { return x.key === key });
    },
    createCache: function (key, renderer, options) {
        var me = this;
        var cacheValues = {
            key: key,
            options: options || me.getDefaultOptions(),
            renderer: renderer || me.getRenderer(),
        }
        me.$canvasCache.push(cacheValues);
        return cacheValues.renderer;
    },
    getDefaultOptions: function () {
        return MEPH.graph.renderer.CanvasRenderer.defaultOptions;
    },
    getRenderer: function () {
        var me = this;
        var renderer = new MEPH.util.Renderer();
        var canvas = me.getCanvas();
        renderer.setCanvas(canvas);
        return renderer;
    },
    getCanvas: function () {
        MEPH.graph.renderer.CanvasRenderer.cacheDomBag = MEPH.graph.renderer.CanvasRenderer.cacheDomBag || document.body;
        var me = this,
            canvas = document.createElement('canvas');
        MEPH.graph.renderer.CanvasRenderer.cacheDomBag.appendChild(canvas);
        me.applyCanvasOptions(canvas);
        return canvas;
    },
    applyCanvasOptions: function (canvas, options) {
        options = options || MEPH.graph.renderer.CanvasRenderer.defaultOptions.canvas.attributes;
        for (var i in options) {
            canvas.setAttribute(i, options[i]);
        }
    },
    clearCache: function (key) {
        var me = this;
        var result = false;
        me.$canvasCache.where(function (x) {
            result = x.renderer;
            return x.key === key;
        }).foreach(function (x) {
            x.renderer.clear();
        });
        return result;
    },
    purgeCache: function () {
        MEPH.graph.renderer.CanvasRenderer.$canvasCache.removeWhere(function (x) {
            x.renderer.destroy(true);
            return true;
        });
    },
    destroy: function (deep) {
        var me = this;
        if (deep) {
            me.purgeCache();
        }
        me.renderer.destroy(deep);
    },
    destroyCache: function (key) {
        MEPH.graph.renderer.CanvasRenderer.$canvasCache.removeWhere(function (x) {
            if (x.key === key) {
                x.renderer.destroy(true);
                return true;
            }
            return false;
        });
    },
    renderNode: function (node, canvas) {
        throw 'not implemented';
    },
    setOptions: function (options) {
        var me = this;
        me.$options = options;
    },
    getOptions: function () {
        var me = this;
        return me.$options;
    },
    render: function () {
        var me = this;
        me.draw(me.getOptions());
    },
    draw: function (options) {
        throw 'must implement this function';
    }
});﻿/**
* @class MEPH.graph.Node
*/
MEPH.define('MEPH.graph.Connection', {
    requires: ['MEPH.math.Vector'],
    properties: {
        $connectionDetectionDepth: 10,
        $selectable: true,
        $deleteable: true
    },
    isSelectable: function (selectable) {
        var me = this;
        if (selectable !== undefined) {
            me.$selectable = selectable;
        }
        return me.$selectable;
    },
    isDeleteable: function (deleteable) {
        var me = this;
        if (deleteable !== undefined) {
            me.$deleteable = deleteable;
        }
        return me.$deleteable;
    },
    initialize: function (options) {
        var me = this;
        MEPH.Events(me);
        me.$zones = [];
        me.nodes = MEPH.util.Observable.observable([])
            .on('afterpush', me.handleNewNodes.bind(me))
            .on('beforepush', me.fire.bind(me, 'beforenodeadded'))
            .on('afterpush', me.fire.bind(me, 'afternodeadded'))
            .on('onpush', me.fire.bind(me, 'nodeadded'))
            .on('onpush', me.fire.bind(me, 'changed'))
            .on('beforesplice', me.fire.bind(me, 'beforenoderemoved'))
            .on('aftersplice', me.fire.bind(me, 'afternoderemoved'))
            .on('onremove', me.fire.bind(me, 'noderemoved'))
            .on('onremove', me.fire.bind(me, 'changed'));
    },
    handleNewNodes: function (type, anodes) {
        var me = this, nodes = [];
        for (var i = 0 ; i < anodes.added.length ; i++) {
            if (nodes.indexOf(anodes.added[i]) === -1) {
                nodes.push(anodes.added[i]);
            }
        }
        if (nodes) {
            nodes.foreach(function (node) {
                node.addConnection(me);
                node.on('removed', me.onNodeRemoved.bind(me, node));
            });
        }
    },
    removed: function () {
        var me = this;
        me.fire('removed', {});
    },
    /**
    * Selects a zone, Override this function for business logic to control which point should be 
    * selected.
    */
    selectZones: function (zones, node) {
        var me = this;
        return me.getZones().where(function (zone) {
            return zone.getNode() === node;
        });
    },
    onNodeRemoved: function (node) {
        var me = this;
        me.removeNode(node);
    },
    setConnectionDetectionDepth: function (depth) {
        var me = this;
        me.$connectionDetectionDepth = depth;
    },
    getConnectionDetectionDepth: function () {
        var me = this;
        return me.$connectionDetectionDepth;
    },
    distanceFrom: function (point) {
        var me = this;
        var target = Vector.Create(point);
        var nodeendpoints = me.calculateEndPoints(me);
        return nodeendpoints.min(function (x) {
            var start = Vector.Create(x.start);
            var end = Vector.Create(x.end);

            var depth = me.getConnectionDetectionDepth();
            return [].interpolate(0, depth, function (t) {
                return Vector.Lerp2D(start, end, t / depth).distance(target);
            }).min();
        });
    },
    calculateEndPoints: function (connection) {
        var me = this;
        var offset = { x: 0, y: 0 };
        var zones = connection.getZones();
        var result = zones.summation(function (zone, current, index) {
            var pos = zone.getPosition();
            if (current) {
                return {
                    x: pos.x + current.x,
                    y: pos.y + current.y
                };
            }
            return {
                x: pos.x,
                y: pos.y
            };
        }) || { x: 0, y: 0 };

        var average = {
            x: (result.x / zones.length),
            y: (result.y / zones.length)
        };

        var nodeendpoints = connection.getZones().select(function (x) {
            var pos = x.getPosition();
            return {
                start: {
                    x: pos.x,
                    y: pos.y
                },
                end: average
            }
        });
        return nodeendpoints;
    },
    setId: function (id) {
        var me = this;
        if (!me.$id) {
            me.$id = id;
        }
    },
    getId: function () {
        var me = this;
        return me.$id;
    },
    addNodes: function (nodes) {
        var me = this;
        if (!Array.isArray(nodes)) {
            nodes = [nodes];
        }
        nodes.foreach(function (node) {
            me.nodes.push(node);
        });
    },
    addZone: function (zone) {
        var me = this;
        var node = zone.getNode();
        if (!me.$zones.first(zone)) {
            me.$zones.push(zone);
        }
    },
    getZones: function () {
        var me = this;
        return me.$zones;
    },
    save: function () {
        var me = this, result = {};
        result.id = me.getId() || me.setId(MEPH.GUID()) || me.getId();
        result.nodes = me.getNodes().select(function (node) { return node.getId(); });
        result.zones = me.getZones().select(function (zone) { return zone.getOptions().id; });
        return result;
    },
    hasZone: function (zone) {
        var me = this;
        return me.getZones().contains(function (x) { return x === zone; });
    },
    hasNode: function (node) {
        var me = this;
        return me.nodes.contains(function (x) { return x === node; })
    },
    addNode: function (node) {
        var me = this;
        if (!me.nodes.contains(function (x) { return x === node; })) {
            me.nodes.push(node);
        }
    },
    getNode: function (node) {
        var me = this;
        return me.nodes.first(function (x) { return x === node; });
    },
    getNodes: function () {
        var me = this;
        return me.nodes;
    },
    removeNode: function (node) {
        var me = this;
        var results = me.nodes.removeWhere(function (x) { return x === node; });
        if (me.nodes.length < 2) {
            me.fire('emptyconnection', me);
        }
    }
});﻿/**
 * @class
 * Reads controls from the dom which should be created, and associated with there js objects. 
 **/
MEPH.define('MEPH.mixins.Observable', {
    requires: ['MEPH.util.Observable'],
    properties: {
    },
    initialize: function () {
        var me = this;
    },
    init: function () {
        var me = this,
          properties = [];
        for (var name in me) {
            if (typeof (me[name]) !== 'function' && (name !== 'requires' &&
                    name !== 'statics' &&
                    name !== 'extend' &&
                    name !== 'templates' &&
                    name !== 'mixins' &&
                    name !== 'templates' &&
                    name !== 'alias' &&
                    name !== '____type' &&
                    name !== 'observable' &&
                    name !== 'properties') && !name.startsWith(MEPH.privatePropertyPrefix)) {
                properties.push(name);
            }
        }
        MEPH.util.Observable.observable(me, properties);
    }
});﻿/**
 * @class
 * Reads controls from the dom which should be created, and associated with there js objects. 
 **/
MEPH.define('MEPH.mixins.Referrerable', {
    properties: {
    },
    initialize: function () {
        var me = this;
    },
    statics: {
        referrerFunctions: {
            isReferrerable: function () { return true; },
            /**
             * Adds the reference to an object
             * @param {String} type
             * @param {Object} obj
             * @param {Boolean} creator
             **/
            addReferenceConnection: function (type, obj, creator) {
                var me = this;
                if (!me.getConnection(type)) {
                    me.$referenceConnections.push({
                        type: type, obj: obj, creator: creator || false
                    });
                    //if (type !== 'view' && type !== 'control' && type !== 'subcontrol' && obj.on) {
                    //    obj.on('altered', function () {
                    //        me.fire.apply(me, arguments);
                    //    });
                    //}
                    me.fire('reference ' + type, { value: obj });
                    if (!me.hasOwnProperty(type)) {
                        Object.defineProperty(me, type, {
                            value: obj
                        });
                    }
                }
            },
            /**
             * Adds a reference to an obj
             * @param {Object} obj
             * @param {String} obj.type
             * @param {Object} obj.obj
             **/
            addReferenceConnectionObj: function (obj) {
                var me = this;
                me.addReferenceConnection(obj.type, obj.obj);
            },
            /**
             * Removes reference connection by type.
             * @param {String} type
             * @returns {Array} removed connections.
             */
            removeReferenceConnection: function (type) {
                var me = this;
                return me.$referenceConnections.removeWhere(function (x) { return x.type === type; });
            },
            /**
             * Gets the reference connections.
             **/
            getReferenceConnections: function () {
                var me = this;
                return me.$referenceConnections;
            },
            getConnectableTypes: function () {
                var me = this,
                    connections = me.getReferenceConnections().select(function (x) { return x.type });;
                return MEPH.Array(connections.concat(MEPH.getBindPrefixShortCuts().select(function (x) { return x.type; }))).unique(function (x) { return x; });
            },
            getConnection: function (type) {
                var me = this,
                    reference;
                if (type === MEPH.control.Control.connectables.control) {
                    return me;
                }
                reference = me.$referenceConnections.first(function (x) { return x.type === type; });
                if (reference) {
                    return reference.obj;
                }
                return null;
            }
        }
    },
    init: function () {
        var me = this,
            i,
            referrerFunctions = MEPH.mixins.Referrerable.referrerFunctions;

        for (i in referrerFunctions) {
            me[i] = referrerFunctions[i].bind(me);
        }
    }
});﻿/**
 * @class MEPH.dom.ControlLoader
 * Reads controls from the dom which should be created, and associated with there js objects. 
 **/
MEPH.define('MEPH.dom.ControlLoader', {
    requires: ['MEPH.util.Dom', 'MEPH.bind.Binder'],
    statics: {
        /**
         * @static
         * Gets the dom nodes of the template.
         * @param {Object} templateInfo
         * @param {String} templateInfo.template
         **/
        getTemplateDom: function (templateInfo) {
            var me = this,
                div = me.getUnattachedDiv(),
                nodes;

            div.innerHTML = templateInfo.template;

            nodes = MEPH.util.Array.convert(div.childNodes);
            return nodes;
        },
        /**
         * @static
         * Generates an attached div.
         * @returns {Object}
         */
        getUnattachedDiv: function () {
            return document.createElement('div');
        }
    },
    properties: {
        MEPHUniqueId: 'mephuniqueid',
        MEPHId: 'mephid'
    },
    initialize: function () {
        var me = this;
    },
    /**
     * Generates bound controls
     * @param {Array} packages
     **/
    generateBoundControls: function (packages) {
        var me = this;
        MEPH.Array(packages);
        return packages.select(function (x) {
            return me.generateBoundControl(x);
        });
    },
    /**
     * Generates a bound control
     * @param {Object} controlPackage
     * @param {Object} controlPackage.controlObject
     * @param {Object} controlPackage.templateNode
     * @param {Object} controlPackage.classInstance
     **/
    generateBoundControl: function (controlPackage) {
        var me = this;
        MEPH.Binder.bindObject(controlPackage.classInstance, controlPackage.templateNode);
        MEPH.Binder.bindControlPackage(controlPackage);
        return controlPackage;
    },
    /**
     * Loads the sub controls of the control packages, and merges the results.
     * @param {Array} controlPackages
     * @param {MEPH.application.Application} application
     * @returns {Promise}
     */
    loadSubControls: function (controlPackages, application) {
        var me = this,
            results,
            promises;
        promises = MEPH.Array(controlPackages).select(function (controlPackage) {
            //return Promise.resolve()
            //    .then(me.loadSubControl.bind(me, controlPackage, application))
            //    .then(me.appendResultsToControl.bind(me, controlPackage, application))
            //    .then(me.processSubControls.bind(me, controlPackage, application))
            results = (me.loadSubControl(controlPackage, application));
            results = (me.appendResultsToControl(controlPackage, application, results));
            return (me.processSubControls(controlPackage, application, results));
        });
        //return Promise.all(promises).then(function () {
        var classInstance = controlPackages.classInstance;
        if (classInstance && classInstance.fire) {
            classInstance.fire('subcontrolsloaded');
        }
        return controlPackages;
        //});
    },
    /**
     * @private 
     * Processes the subcontrols 
     * @param {Object} controlPackage
     * @param {MEPH.application.Application} application
     * @param {Array} subcontrolPackages
     **/
    processSubControls: function (controlPackage, application, subcontrolPackages) {
        var me = this,
            promises;
        //promises = MEPH.Array(subcontrolPackages).select(function (subcontrolPackage) {
        //    controlPackage.classInstance.addSubControl(subcontrolPackage.classInstance);
        //    return Promise.resolve().then(me.processSubControl.bind(me, controlPackage, application, subcontrolPackage));
        //});
        promises = MEPH.Array(subcontrolPackages).select(function (subcontrolPackage) {
            controlPackage.classInstance.addSubControl(subcontrolPackage.classInstance);
            return (me.processSubControl(controlPackage, application, subcontrolPackage));
        });
        //return Promise.all(promises);
        return promises;
    },
    /**
     * @private 
     * Processes a subcontrol.
     * @param {Object} controlPackage
     * @param {MEPH.application.Application} application
     * @param {Object} subcontrolPackages
     **/
    processSubControl: function (controlPackage, application, subcontrolPackage) {
        var me = this,
            nodes;
        return (me.loadSubControls([subcontrolPackage], application));//Promise.resolve().then
    },

    /**
     * Append subcontrols to control package
     **/
    appendResultsToControl: function (controlPackage, application, subcontrolPackages) {
        var me = this,
            promises;

        promises = MEPH.Array(subcontrolPackages).select(function (subControlPackage) {
            return (me.appendResultToControl(controlPackage, application, subControlPackage));//Promise.resolve().then;
        });
        //return Promise.all(promises).then(function () {
        return subcontrolPackages;
        //});
    },
    /**
     * Append result to control.
     * @param {Object} controlPackage
     * @param {MEPH.application.Application} application
     * @param {Object} subcontrolPackage
     * @param {Object} subcontrolPackage.controlObject
     * @param {Object} subcontrolPackage.templateNode
     * @param {Object} subcontrolPackage.classInstance
     * @returns {Promise}
     **/
    appendResultToControl: function (controlPackage, application, subcontrolPackage) {
        var me = this,
            found,
            sco,
            subNode;

        if (subcontrolPackage && subcontrolPackage.controlObject && subcontrolPackage.controlObject.node) {
            sco = subcontrolPackage.controlObject;
            subNode = sco.node;
            found = controlPackage.templateNode.where(function (parentNode) {
                if (parentNode.nodeType === MEPH.util.Dom.textType) { return false; }
                return true;
            }).select(function (parentNode) {
                return (parentNode.querySelector(sco.alias +
                    '[' + me.MEPHUniqueId + '="' + subcontrolPackage.classInstance.getUniqueId() + '"]'));

            }).first();

            if (found === null) {
                found = controlPackage.templateNode.first(function (parentNode) {
                    return parentNode.getAttribute(me.MEPHUniqueId) === subcontrolPackage.classInstance.getUniqueId();
                });
            }
            if (found) {
                
                me.manageConnectionBetween(controlPackage, subcontrolPackage, subNode);
                MEPH.Binder.bindControl(controlPackage.classInstance, subcontrolPackage.classInstance, subNode);
                MEPH.Binder.bindDomControl(controlPackage, subcontrolPackage, subNode);
                subcontrolPackage.templateNode.foreach(function (packNode) {
                    MEPH.util.Dom.insertBefore(subNode, packNode);
                });
                MEPH.util.Dom.removeFromDom(subNode);
            }
            else {
                throw 'subnode not found: MEPH.dom.ControlLoader.js'
            }
            //Replacing the subNode with the generated template nodes will permanantly distore the parents template.
            //So everything should be done by now.
        }
        else {
            throw 'cannot append result to control if custom tag node is gone';
        }
        return controlPackage;
    },
    /**
     * Manages the connectiosn between the control and subcontrol.
     * @param {Object} controlPackage
     * @param {Object} subcontrolPackage
     * @param {Object} subNode
     **/
    manageConnectionBetween: function (controlPackage, subcontrolPackage, subNode) {
        var me = this,
            subClassInstance = subcontrolPackage.classInstance,
            classInstance = controlPackage.classInstance,
            attribute;
        subClassInstance.addReferenceConnection(MEPH.control.Control.connectables.subcontrol, classInstance);
        subClassInstance.addReferenceConnection(MEPH.control.Control.connectables.self, subClassInstance);

        if (!subClassInstance.parent) {
            Object.defineProperty(subClassInstance, 'parent', {
                enumerable: false,
                writable: true,
                configurable: true,
                value: classInstance
            });
        }

        attribute = subNode.getAttribute(me.MEPHId);
        if (attribute) {

            Object.defineProperty(classInstance, attribute, {
                enumerable: false,
                writable: false,
                configurable: false,
                value: subClassInstance
            });

            Object.defineProperty(classInstance, MEPH.privatePropertyPrefix + MEPH.privateClassPrefix + attribute, {
                enumerable: false,
                writable: false,
                configurable: false,
                value: subClassInstance
            });

            Object.defineProperty(classInstance, MEPH.privatePropertyPrefix + attribute, {
                enumerable: false,
                writable: false,
                configurable: false,
                value: subcontrolPackage.templateNode
            });
        }
    },

    /**
     * Load the sub controls of a contrl package, and merge the results.
     * @param {Object} controlPackage
     * @param {MEPH.application.Application} application
     * @returns {Promise}
     **/
    loadSubControl: function (controlPackage, application) {
        var me = this,
            loadControlsResult,
            generatedBoundControlsResult,
            templateNode = controlPackage.templateNode,
            nodes;
        nodes = MEPH.Binder.getSubObjects(templateNode, 1).select(function (x) {
            var templateInfo = MEPH.getTemplateByNode(x);
            return {
                node: x,
                alias: templateInfo.alias
            }
        });;
        //return me.loadControls(nodes, controlPackage.classInstance, application)
        //            .then(me.generateBoundControls.bind(me))
        //.then(function (results) {
        //    return me.loadSubControls(results, application);
        //});
        loadControlsResult = me.loadControls(nodes, controlPackage.classInstance, application)
        generatedBoundControlsResult = me.generateBoundControls(loadControlsResult);
        //.then(function (results) {
        return me.loadSubControls(generatedBoundControlsResult, application);
        //});
    },
    /**
     * Loads the controls
     * @param {Array} controlObjects
     * @returns {Promise}
     */
    loadControls: function (controlObjects, parentControl, application) {
        var me = this,
            promises;
        promises = MEPH.util.Array.create(controlObjects).select(function (controlObject) {
            //return Promise.resolve().then(me.loadControl.bind(me, controlObject, parentControl, application));
            return (me.loadControl(controlObject, parentControl, application));
        })

        //return Promise.all(promises).then(function (result) {
        return me.bindObjectReferences(parentControl, application, promises)
        //});
    },
    /**
     * Binds control objects with references
     * @param {Object} parentControl
     * @param {MEPH.application.Application} application
     * @param {Array} controlPackage
     * @returns {Promise}
     */
    bindObjectReferences: function (parentControl, application, controlPackages) {
        var me = this,
            promises;

        promises = MEPH.Array(controlPackages).select(function (controlPackage) {
            //return Promise.resolve().then(me.bindObjectReference.bind(me, parentControl, application, controlPackage))
            //.then(function (result) {
            //    return result;
            //});
            return me.bindObjectReference(parentControl, application, controlPackage);
        });

        //return Promise.all(promises);
        return promises;
    },
    /**
     * Binds control object with references
     * @param {Object} parentControl
     * @param {MEPH.application.Application} application
     * @param {Object} controlPackage
     * @returns {Promise}
     */
    bindObjectReference: function (parentControl, application, controlPackage) {
        var me = this,
            promise = Promise.resolve(),
            parentReferences,
            controlObject = controlPackage.controlObject,
            referencePacks = [], references
        templateNode = controlPackage.templateNode,
        classInstance = controlPackage.classInstance;

        if (controlObject && templateNode && classInstance) {
            parentReferences = parentControl ? parentControl.getReferenceConnections() : [];
            references = me.getObjectReferences(controlObject.node);//.then(function (references) {

            parentReferences.foreach(function (x) {
                classInstance.addReferenceConnectionObj(x);

                if (!referencePacks.some(function (y) { return x.type === y.type; }) && x.type !== 'control' && x.type !== 'subcontrol') {
                    referencePacks.push({ type: x.type, instance: x.obj });
                }
            });
            if (controlObject.node) {

                var instanceReferences = me.getNodeInstanceReferences(controlObject.node);
                if (instanceReferences.length) {
                    references = references || [];
                    instanceReferences.foreach(function (ref) {
                        references.removeWhere(function (x) {
                            return x.type === ref.type;
                        });
                    });
                    instanceReferences.foreach(function (ref) {
                        references.push(ref);
                    });
                }
            }
            if (references) {
                MEPH.Array(references);
                references.foreach(function (x) {
                    classInstance.removeReferenceConnection(x.type);
                });
                references.foreach(function (ref) {
                    var instance = new ref.classDefinition();
                    if (application) {
                        application.addInstance(instance);
                    }
                    if (!referencePacks.some(function (x) { return x.type === ref.type; }) && ref.type !== 'control' && ref.type !== 'subcontrol') {
                        referencePacks.push({ type: ref.type.type, instance: instance });
                    }
                    classInstance.addReferenceConnection(ref.type, instance, true);
                });
            }
            referencePacks.foreach(function (x) {
                referencePacks.foreach(function (y) {

                    if (x.instance.isReferrerable) {
                        x.instance.addReferenceConnection(y.type, y.instance);
                    }
                });
                if (x.instance.fire) {
                    x.instance.fire('referencesbound');
                }
            });

            if (classInstance.fire) {
                classInstance.fire('referencesbound');
            }

            return controlPackage;
            //});
        }
        else {
            throw 'missing argument : ControlLoader.bindObjectReference';
        }
        // return promise;
    },
    /**
     * @private
     * Gets the node instance.
     */
    getNodeInstanceReferences: function (node) {
        var me = this;
        return MEPH.Array(node.attributes).where(function (x) {
            return x.name.startsWith('ref-');
        }).select(function (x) {
            return {
                type: x.name.split('').subset(4).join(''),
                classDefinition: MEPH.getDefinedClass(node.getAttribute(x.name))
            }
        });;
    },
    /**
     * Returns true if the dom object indicates whether or not it will reference an object.
     * @param {Object} dom
     * @returns {Boolean}
     **/
    hasReferences: function (dom) {
        var dataObjectReferenceAttribute = dom.getAttribute(MEPH.dataObjectReferenceAttribute);
        return dataObjectReferenceAttribute !== null && dataObjectReferenceAttribute !== undefined;
    },
    /**
     * Gets the object references from a dom object which is considered a view.
     * @param {Object} dom
     * @returns {Promise}
     */
    getObjectReferences: function (dom) {
        var me = this,
            Dom = MEPH.util.Dom,
            json,
            prefixObj,
            i,
            template,
            classPathOrAlias,
            json,
            promises = [],
            classInformation,
            types,
            $class,
            type,
            key,
            promise = Promise.resolve(),
            dataObjectReferenceAttribute;
        dataObjectReferenceAttribute = dom.getAttribute(MEPH.dataObjectReferenceAttribute);
        if (dataObjectReferenceAttribute) {
            json = Dom.tryParseAttributeJson(dataObjectReferenceAttribute);
            for (i in json) {
                if (json.hasOwnProperty(i)) {
                    prefixObj = MEPH.getBindPrefixShortCut(i);
                    classPathOrAlias = json[i];
                    classInformation = MEPH.getDefinedClassInformation(classPathOrAlias);
                    $class = MEPH.getPathValue(classInformation ? classInformation.classifiedName : classPathOrAlias);
                    key = i;
                    type = MEPH.getBindPrefixShortCut(key);
                    if (type) {
                        type = type.type;
                    }
                    promises.push({
                        key: key,
                        type: type,
                        classDefinition: $class
                    });

                }
            }
            //promise = promise.then(function () {
            return (promises)
            //});
        }
        else {
            json = null;
            // promise = promise.then(function () { return null; });
            return null;
        }

        return promise
    },
    /**
     * Loads a control.
     * @param {Object} controlObject
     * @param {Object} controlObject.node
     * @param {Object} controlObject.alias
     * @param {MEPH.control.Control} parentControl
     */
    loadControl: function (controlObject, parentControl, application) {
        var me = this,
            result,
            templateInfo = MEPH.getDefinedClassInformation(controlObject.alias) || MEPH.getTemplate(controlObject.alias),
            // templateNodes,
            // templateNode,
            templateDom,
            classInstance,
            promise = Promise.resolve(),
            definedClass;

        if (templateInfo) {
            definedClass = MEPH.getDefinedClass(templateInfo.classifiedName);
            //templateNode = me.getTemplateDom(templateInfo);
            if (definedClass) {
                classInstance = new definedClass(controlObject.injections || null);
                classInstance.setUniqueId(MEPH.GUID());

                if (controlObject.view) {
                    classInstance.addReferenceConnection('view', classInstance, true)
                }

                if (application) {
                    classInstance.setApplication(application);
                    application.addControl(classInstance);
                }
                if (classInstance.fire) {
                    classInstance.fire('init');
                }
                controlObject.node.setAttribute(me.MEPHUniqueId, classInstance.getUniqueId());

                if (classInstance.setInstanceTemplate) {
                    classInstance.setInstanceTemplate(controlObject.node);
                    if (classInstance.fire) {
                        classInstance.fire('setinstancetemplate');
                    }
                }

                //promise = classInstance.getGeneratedTemplateDom().then(function (result) {
                templateDom = classInstance.getGeneratedTemplateDom();
                classInstance.setDomTemplate(templateDom);

                if (classInstance.fire) {
                    classInstance.fire('setdomtemplate');
                }

                result = {
                    controlObject: controlObject,
                    templateNode: templateDom,
                    classInstance: classInstance
                };
                classInstance.setControlObject(result);
                return result;
                // });
                //return promise;
            }
            else {
                //generate a class definition is the template specifies nocode
                throw 'unhandled occurence in ControlLoader.js';
            }
        }
        else {
            throw 'Template information not found';
        }
    },
    /**
     * Gets the dom nodes of the template.
     * @param {Object} templateInfo
     * @param {String} templateInfo.template
     **/
    getTemplateDom: function (templateInfo) {
        var me = this,
            div = me.getUnattachedDiv(),
            nodes;

        div.innerHTML = templateInfo.template;

        nodes = MEPH.util.Array.convert(div.childNodes);

        return nodes;
    },
    /**
     * Generates an attached div.
     * @returns {Object}
     */
    getUnattachedDiv: function () {
        return document.createElement('div');
    }
});﻿describe("MEPH/audio/graph/node/ChannelMergerNode.spec.js", 'MEPH.audio.graph.node.ChannelMergerNode', function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create a ChannelMergerNode node', function () {
        var ChannelMergerNode = new MEPH.audio.graph.node.ChannelMergerNode();

        expect(ChannelMergerNode).toBeTruthy();
    });

    it('has buffer and normalize inputs ', function () {
        var ChannelMergerNode = new MEPH.audio.graph.node.ChannelMergerNode();

        expect(ChannelMergerNode.nodeInputs.some(function (x) { return x.name === 'buffer' })).toBeTruthy();
    })

    it('has buffer and normalize inputs ', function () {
        var ChannelMergerNode = new MEPH.audio.graph.node.ChannelMergerNode();

        var output = ChannelMergerNode.nodeOutputs.some(function (x) { return x.name === 'buffer' });

        expect(output).toBeTruthy();
    })
});﻿/**
 * @class MEPH.audio.graph.node.GainNode
 * @extend MEPH.audio.graph.node.Node
 **/
MEPH.define('MEPH.audio.graph.node.InOutNodeBase', {
    extend: 'MEPH.audio.graph.node.Node',
    requires: ['MEPH.audio.graph.node.controls.InputCollection'],
    templates: false,
    properties: {
        manipulateInput: false
    },
    //initialize: function () {
    //    var me = this;

    //    me.nodecontrols = me.nodecontrols || [];
    //    me.nodecontrols.push('bufferoutput');

    //    me.great()

    //    me.nodeOutputs.push(me.createOutput('buffer', MEPH.audio.graph.node.Node.Anything));

    //},
    setupActiveZones: function (viewport, node) {
        var me = this;
        node.on('connectionadded', me.onNodeChanged.bind(me));
        return me.great()
    },
    onConnectionChanged: function (connection, type, type2, args) {

        var me = this;
        me.onNodeChanged(type, type2, { added: [connection] });
    },
    onNodeChanged: function (type, type2, args) {
        var me = this;


        args.added.where(function (connection) {
            connection.un(me);
            connection.on('changed', me.onConnectionChanged.bind(me, connection), me);
            return connection.getZones().length > 1
        }).foreach(function (connection) {
            var zone = connection.getZones().first(function (x) {
                return x.getOptions().connectortype !== 'Anything'
            });
            if (zone) {
                if (me.manipulateInput) {
                    var res = me.addNodeInput(zone.getOptions().property, zone.getOptions().connectortype, zone.getOptions().id);
                    if (res) {
                        connection.on('removed', function () {
                            me.removeNodeInput(res);
                        });
                    }
                }
                else {
                    var res = me.addNodeOutput(zone.getOptions().property, zone.getOptions().connectortype, zone.getOptions().id);
                    if (res) {
                        connection.on('removed', function () {
                            me.removeNodeOutput(res);
                        });
                    }
                }
            }
        });

    },
    onLoaded: function () {
        var me = this;
        me.great()
        me.title = 'Input(s)';

        me.fire('altered', { path: 'nodeOutputs' })
    }

});﻿/**
 * @class MEPH.util.Renderer
 * String
 */
MEPH.define('MEPH.util.Renderer', {
    requires: ['MEPH.util.Vector'],
    properties: {
    },
    setCanvas: function (canvas) {
        var me = this;
        me.$context = null;
        me.$canvas = canvas;
    },
    getCanvas: function () {
        var me = this;
        return me.$canvas;
    },
    getContext: function () {
        var me = this;
        me.$context = me.$context || me.getCanvas().getContext('2d');
        return me.$context;
    },
    draw: function (args) {
        var me = this,
            context = me.getContext();
        if (!Array.isArray(args)) {
            args = [args];
        }
        args.foreach(function (options, index) {
            context.save();
            options = me.applyDefaults(options);
            switch (options.shape) {
                case MEPH.util.Renderer.shapes.rectangle:
                    me.drawRectangle(options);
                    break;
                case MEPH.util.Renderer.shapes.circle:
                    me.drawCircle(options);
                    break;
                case MEPH.util.Renderer.shapes.text:
                    me.drawText(options);
                    break;
                case MEPH.util.Renderer.shapes.line:
                    me.drawLine(options);
                    break;
                case MEPH.util.Renderer.shapes.canvas:
                    me.drawCanvas(options);
                    break;
                case MEPH.util.Renderer.shapes.polygon:
                    me.drawPolygon(options);
                    break;
                case MEPH.util.Renderer.shapes.none:
                    break;
                default:
                    throw 'undefined shape type';

            }
            context.restore();
        });

        return true;
    },
    clear: function () {
        try {
            var me = this,
                canvas = me.getCanvas(),
                context = me.getContext();
            context.clearRect(0, 0, canvas.width, canvas.height);
        }
        catch (e) {
            return false;
        }
        return true;
    },
    setFillStyle: function (options, context) {
        context.fillStyle = options.fillStyle || "rbg(0,0,0)";
        if (options.gradientFillStyle) {
            var gfs = options.gradientFillStyle;
            var gradient = context.createLinearGradient(gfs.x0, gfs.y0, gfs.x1, gfs.y1);
            gfs.colorStops.foreach(function (x, index) {
                gradient.addColorStop(x.stop, x.color);
            });
            context.fillStyle = gradient;
        }
    },
    drawRectangle: function (options) {
        var me = this,
            context = me.getContext();
        me.setFillStyle(options, context);
        context.lineWidth = options.lineWidth !== undefined ? options.lineWidth : 1;
        context.strokeStyle = options.strokeStyle !== undefined ? options.strokeStyle : "rbg(0,0,0)";
        context.roundRect(options.x, options.y, options.width, options.height, options.radius || 0, options.fill || false, options.stroke || false);

    },
    drawPolygon: function (options) {
        var me = this,
            context = me.getContext();
        context.strokeStyle = options.strokeStyle;
        me.setFillStyle(options, context);
        context.beginPath();
        context.moveTo(options.lt.x, options.lt.y);
        context.lineTo(options.rt.x, options.rt.y);
        context.lineTo(options.rb.x, options.rb.y);
        context.lineTo(options.lb.x, options.lb.y);
        context.closePath();
        context.fill();
    },
    drawLine: function (options) {
        var me = this,
            context = me.getContext();
        var point2 = new MEPH.util.Vector(options.end.x, options.end.y);
        var point = new MEPH.util.Vector(options.start.x, options.start.y);
        //var f = MEPH.util.Vector.Lerp2D(point, point2, .25).rotate(.13);
        //var g = MEPH.util.Vector.Lerp2D(point, point2, .75).rotate(-.13);
        context.beginPath();
        context.strokeStyle = options.strokeStyle;
        //context.fillStyle = options.fillStyle;
        me.setFillStyle(options, context);
        context.moveTo(options.start.x, options.start.y);
        context.lineWidth = options.lineWidth;
        context.lineTo(options.end.x, options.end.y);
        context.stroke();
    },
    drawBezier: function (options) {
        var me = this,
            context = me.getContext();
        var point2 = new MEPH.util.Vector(options.end.x, options.end.y);
        var point = new MEPH.util.Vector(options.start.x, options.start.y);
        var f = MEPH.util.Vector.Lerp2D(point, point2, .25).rotate(.13);
        var g = MEPH.util.Vector.Lerp2D(point, point2, .75).rotate(-.13);
        context.beginPath();
        context.strokeStyle = options.strokeStyle;
        me.setFillStyle(options, context);
        context.moveTo(options.start.x, options.start.y);
        context.lineWidth = options.lineWidth;
        context.bezierCurveTo(f._x, f._y, g._x, g._y, options.end.x, options.end.y);
        context.stroke();
    },
    drawCircle: function (options) {
        var me = this,
            context = me.getContext();
        context.strokeStyle = options.strokeStyle;
        me.setFillStyle(options, context);
        context.beginPath();
        context.arc(options.x, options.y, options.radius, 0, Math.PI * 2, true);
        context.closePath();
        context.stroke();
        context.fill();
    },
    drawCanvas: function (options) {
        var me = this,
            context = me.getContext();
        if (options.center) {
            context.drawImage(options.canvas,
                                     0,
                                     0,
                                     options.canvas.width,
                                     options.canvas.height,
                                    -options.canvas.width / 2,
                                    -options.canvas.height / 2,
                                     options.canvas.width,
                                     options.canvas.height);
        }
        else if (options.positioned) {
            context.drawImage(options.canvas,
                                   options.x,
                                   options.y);
        }
        else if (options.simple) {
            context.putImageData(options.canvas, 0, 0);
        }
        else {
            context.drawImage(options.canvas,
                                     0,
                                     0,
                                     options.canvas.width,
                                     options.canvas.height,
                                        0,
                                        0,
                                     options.canvas.width,
                                     options.canvas.height);
        }
    },
    drawText: function (options) {
        var me = this,
            context = me.getContext();
        context.font = options.font;
        me.setFillStyle(options, context);
        context.textAlign = options.textAlign;
        context.textBaseline = options.textBaseline;
        context.fillText(options.text, options.x, options.y, options.maxWidth);
    },
    applyDefaults: function (options) {
        options = options || {};
        for (var i in MEPH.util.Renderer.defaultShapeOptions) {
            if (options[i] === undefined) {
                options[i] = MEPH.util.Renderer.defaultShapeOptions[i];
            }
        }
        return options;
    },
    destroy: function (removeCanvas) {
        var me = this;
        if (removeCanvas) {
            var canvas = me.getCanvas();
            if (canvas) {
                canvas.parentNode.removeChild(canvas);
            }
        }
    },
    statics: {
        shapes: {
            rectangle: 'rectangle',
            circle: 'circle',
            text: 'text',
            line: 'line',
            canvas: 'canvas',
            polygon: 'polygon',
            none: 'none'
        },
        defaultShapeOptions: {
            x: 50,
            y: 50,
            width: 100,
            height: 100,
            radius: 100,
            textBaseline: "middle",
            maxWidth: 1000,
            fillStyle: '#ff0000',
            strokeStyle: '#0000ff',
            fill: '#ff0000',
            font: '22px Verdana',
            stroke: true
        }
    }
});


/** 
* Draws a rounded rectangle using the current state of the canvas.  
* If you omit the last three params, it will draw a rectangle  
* outline with a 5 pixel border radius  
* @param {Number} x The top left x coordinate 
* @param {Number} y The top left y coordinate  
* @param {Number} width The width of the rectangle  
* @param {Number} height The height of the rectangle 
* @param {Object} radius All corner radii. Defaults to 0,0,0,0; 
* @param {Boolean} fill Whether to fill the rectangle. Defaults to false. 
* @param {Boolean} stroke Whether to stroke the rectangle. Defaults to true. 
*/
CanvasRenderingContext2D.prototype.roundRect = function (x, y, width, height, radius, fill, stroke) {
    // var x = _x - (width / 2);
    // var y = _y - (height / 2);
    var cornerRadius = { upperLeft: 0, upperRight: 0, lowerLeft: 0, lowerRight: 0 };
    if (typeof stroke == "undefined") {
        stroke = true;
    }
    if (typeof radius === "object") {
        for (var side in radius) {
            cornerRadius[side] = radius[side];
        }
    }
    else if (typeof (radius) === "number") {
        for (var side in cornerRadius) {
            cornerRadius[side] = radius;
        }
    }

    this.beginPath();
    this.moveTo(x + cornerRadius.upperLeft, y);
    this.lineTo(x + width - cornerRadius.upperRight, y);
    this.quadraticCurveTo(x + width, y, x + width, y + cornerRadius.upperRight);
    this.lineTo(x + width, y + height - cornerRadius.lowerRight);
    this.quadraticCurveTo(x + width, y + height, x + width - cornerRadius.lowerRight, y + height);
    this.lineTo(x + cornerRadius.lowerLeft, y + height);
    this.quadraticCurveTo(x, y + height, x, y + height - cornerRadius.lowerLeft);
    this.lineTo(x, y + cornerRadius.upperLeft);
    this.quadraticCurveTo(x, y, x + cornerRadius.upperLeft, y);
    this.closePath();
    if (stroke) {
        this.stroke();
    }
    if (fill) {
        this.fill();
    }
}
﻿/**k
 * @class MEPH.util.SVG
 * String
 */
MEPH.define('MEPH.util.SVG', {
    requires: ['MEPH.util.Vector'],
    statics: {
        shapes: {
            rectangle: 'rectangle',
            circle: 'circle',
            text: 'text',
            line: 'line',
            canvas: 'canvas',
            bezier: 'bezier'
        },
        defaultShapeOptions: {
            x: 50,
            y: 50,
            'stroke-dasharray': '',
            width: 100,
            height: 100,
            radius: 100,
            textBaseline: "middle",
            maxWidth: 1000,
            fillStyle: '#000000',
            strokeStyle: '#000000',
            fill: '#000000',
            strokeWidth: '2px',
            font: '22px Verdana',
            stroke: true
        }
    },
    properties: {
        batchdraw: false,
        parts: null
    },
    initialize: function () {
        var me = this;
        me.parts = [];
        me.unused = [];
    },
    setCanvas: function (svg) {
        var me = this;
        me.$svg = svg;
    },
    getCanvas: function () {
        var me = this;
        return me.$svg;
    },
    getContext: function () {
        var me = this;
        me.$svg = me.$svg || me.getCanvas();
        return me.$svg;
    },
    draw: function (args) {
        var me = this,
            pool = [],
            result = [],
            context = me.getContext();
        if (!Array.isArray(args)) {
            args = [args];
        }
        if (me.batchdraw) {
            pool = me.parts.select();
        };

        args.foreach(function (options, index) {
            options = me.applyDefaults(options);
            switch (options.shape) {
                case MEPH.util.Renderer.shapes.rectangle:
                    var res = pool.removeFirstWhere(function (x) {
                        x.options.shape === options.shape;
                    }).first();
                    result = result.concat(me.drawRectangle(options, res ? res.shape : null));
                    break;
                case MEPH.util.SVG.shapes.bezier:
                case MEPH.util.SVG.shapes.line:
                    result = result.concat(me.drawLine(options));
                    break;
                case MEPH.util.SVG.shapes.text:
                    result = result.concat(me.drawText(options));
                    break;
                case MEPH.util.SVG.shapes.circle:
                    result = result.concat(me.drawCircle(options));
                    break;
            }
        });
        if (me.batchdraw)
            pool.foreach(function (x) {
                me.remove(x);
            })
        result.foreach(function (t) {
            me.parts.push(t);
        })
        return result;
    },
    remove: function (obj) {
        var me = this;
        var p = me.parts.removeWhere(function (x) { return x === obj; });

        p.foreach(function (t) {
            if (t.shape.parentNode)
                t.shape.parentNode.removeChild(t.shape);
        })
    },
    /**
     * Clears the svg canvas of all objects
     */
    clear: function () {
        var me = this, canvas = me.getCanvas();
        canvas.childNodes.select().foreach(function (x) {
            if (x.parentNode)
                x.parentNode.removeChild(x);
        })
    },
    drawRectangle: function (options, el) {
        var me = this,
                  canvas, shape,
                  add, line;

        canvas = me.getCanvas();
        var svgns = "http://www.w3.org/2000/svg";
        if (!el) {
            add = true;
        }
        else {
            shape = el.shape;
            options = me.applyDefaults(options);
        }
        shape = shape || document.createElementNS(svgns, "rect");
        
        shape.setAttributeNS(null, "x", options.x);
        shape.setAttributeNS(null, "y", options.y);
        shape.setAttributeNS(null, "width", options.width);
        shape.setAttributeNS(null, "height", options.height);
        shape.setAttributeNS(null, "stroke", options.strokeStyle);
        shape.setAttributeNS(null, "stroke-width", options.strokeWidth);
        shape.setAttributeNS(null, "fill", options.fillStyle);

        if (add) {
            canvas.appendChild(shape);
        }
        return {
            shape: shape, options: options
        };
    },
    drawText: function (options) {
        var shape;

        var svgns = "http://www.w3.org/2000/svg";
        shape = document.createElementNS(svgns, 'text');
        shape.innerHTML = options.text;
        if (options.hasOwnProperty('x'))
            shape.setAttribute('x', options.x);
        if (options.hasOwnProperty('y'))
            shape.setAttribute('y', options.y);

        if (options.hasOwnProperty('dx'))
            shape.setAttribute('dx', options.dx);
        if (options.hasOwnProperty('dy'))
            shape.setAttribute('dy', options.dy);
        if (options.hasOwnProperty('fill'))
            shape.setAttribute('fill', options.fill);
        var me = this;
        var canvas = me.getCanvas();
        canvas.appendChild(shape);
        return {
            shape: shape, options: options
        };
    },
    drawLine: function (options, el) {
        var me = this,
            d, canvas, shape,
            add, line;

        canvas = me.getCanvas();
        var svgns = "http://www.w3.org/2000/svg";
        if (!el) {
            add = true;
        }
        else {
            shape = el.shape;
            options = me.applyDefaults(options);
        }
        shape = shape || document.createElementNS(svgns, "path");
        if (options.shape === MEPH.util.SVG.shapes.line) {
            d = 'M' + options.start.x + ' ' + options.start.y + ' L' + options.end.x + ' ' + options.end.y;
        }
        else if (options.shape === MEPH.util.SVG.shapes.bezier) {
            d = 'M' + options.start.x + ', ' + options.start.y + ' C ' + options.bezier1.x + ' ' + options.bezier1.y +
            ', ' + options.bezier2.x + ' ' + options.bezier2.y + ', ' + options.end.x + ' ' + options.end.y;
        }
        shape.setAttributeNS(null, "d", d);
        if (options['stroke-dasharray']) {
            shape.setAttributeNS(null, 'stroke-dasharray', options['stroke-dasharray']);
        }
        if (options.fill !== 'css')
            shape.setAttributeNS(null, "fill", options.fill);


        if (options.strokeStyle !== 'css')
            shape.setAttributeNS(null, "style", "stroke:" + options.strokeStyle + "; stroke-width:" + options.strokeWidth + ";");

        if (options.class) {
            shape.classList.add(options.class);
        }

        if (add) {
            canvas.appendChild(shape);
        }
        return {
            shape: shape, options: options
        };
    },
    drawCircle: function (options, el) {
        var me = this,
                  canvas, shape,
                  add, line;

        canvas = me.getCanvas();
        var svgns = "http://www.w3.org/2000/svg";
        if (!el) {
            add = true;
        }
        else {
            shape = el.shape;
            options = me.applyDefaults(options);
        }
        shape = shape || document.createElementNS(svgns, "circle");
        // cx="50" cy="50" r="40" stroke="black" stroke-width="3" fill="red"

        shape.setAttributeNS(null, "cx", options.x);
        shape.setAttributeNS(null, "cy", options.y);
        shape.setAttributeNS(null, "r", options.radius);
        shape.setAttributeNS(null, "stroke", options.stroke);
        shape.setAttributeNS(null, "stroke-width", options.strokeWidth);
        shape.setAttributeNS(null, "fill", options.fill);

        if (add) {
            canvas.appendChild(shape);
        }
        return {
            shape: shape, options: options
        };
    },
    applyDefaults: function (options) {
        options = options || {
        };
        for (var i in MEPH.util.SVG.defaultShapeOptions) {
            if (options[i] === undefined) {
                options[i] = MEPH.util.SVG.defaultShapeOptions[i];
            }
        }
        return options;
    }
});﻿/**
 * @class MEPH.control.Control
 * Defines a base class for all controls and views.
 **/
MEPH.define('MEPH.audio.graph.node.controls.AudioSelect', {
    alias: 'audioselect',
    templates: true,
    requires: ['MEPH.util.Dom'],
    properties: {
        titlekey: null,
        valuekey: null,
        source: null
    },
    extend: 'MEPH.audio.graph.node.controls.AudioControl',
    enterValue: function () {
        //var me = this;
        var me = this, source = (me.source || []).where().select(function (x) {
            if (typeof x === 'object') {
                return {
                    title: (x ? x[me.titlekey] || x.title : 'untitled').substring(0, 30),
                    value: (x ? x[me.valuekey] || x.value : null)
                }
            }
            else {
                return {
                    title: x,
                    value: x
                }
            }
        });
        var element = Dom.createSimpleSelectData(me, me.dragarea, function (val) {
            me.value = val;
            var res = source.first(function (x) { return x.value === val; });
            if (res) {
                me.title = res.title;
            }
            else {
                me.title = null;
            }
            me.getFirstElement().dispatchEvent(MEPH.createEvent('updated', { value: me.value }));
        }, me.value, source);

    }
})﻿/**
 * @class MEPH.control.Control
 * Defines a base class for all controls and views.
 **/
MEPH.define('MEPH.audio.graph.node.controls.AudioRange', {
    alias: 'audiorange',
    templates: true,
    requires: ['MEPH.util.Dom'],
    extend: 'MEPH.audio.graph.node.controls.AudioControl',
    enterValue: function () {
        //var me = this;
        var me = this;
        var element = Dom.createSimpleDataEntry(me, me.dragarea, 'range', function (val) {
            me.value = val;
            me.getFirstElement().dispatchEvent(MEPH.createEvent('updated', { value: me.value }));
        }, me.value);

        element.min = me.minvalue || 0;
        element.max = me.maxvalue || 10;
        element.value = me.default || 0;
        element.step = me.increment || .01;
    }
})﻿/**
 * @class MEPH.control.Control
 * Defines a base class for all controls and views.
 **/
MEPH.define('MEPH.audio.graph.node.Node', {
    requires: ['MEPH.util.Observable',
        'MEPH.graph.ActiveZone',
        'MEPH.util.Dom',
        'MEPH.audio.graph.node.controls.AudioRange',
        'MEPH.audio.graph.node.controls.AudioSelect',
        'MEPH.util.Style',
        'MEPH.audio.graph.node.controls.Control'],
    alias: 'audionode',
    templates: true,
    extend: 'MEPH.control.Control',
    statics: {
        AudioBuffer: 'AudioBuffer',
        Boolean: 'Boolean',
        Number: 'Number',
        Anything: 'Anything',
        String: 'String',
        Float32Array: 'Float32Array'
    },
    properties: {
        title: null,
        type: null,
        id: null,
        //x: null,
        y: null,
        sx: null,
        sy: null,
        refresh: 0,
        hideConnector: null,
        booleanSource: null,
        bufferTitle: '',
        normalizefill: '',
        normalizeTitle: '',
        numberFill: '',
        stringFill: '',
        controlverticalpadding: 4,
        inputoutputverticalpadding: 10,
        nodeInputs: null,
        nodeOutputs: null,
        booleanFill: '',
        audioBufferFill: '',
        bodyy: null,
        menuheightspace: 0,
        inputsy: 0,
        bodyry: 1,
        bodyrx: 1,
        bodystrokewidth: null,
        bodyfill: null,
        footerheight: null,
        headerfill: null,
        nodewidth: null,
        titlepadding: null,
        inputradius: 0,
        inputstroke: null,
        bodystroke: null,
        headerheight: null,
        titlepaddingtop: null
    },
    initialize: function () {
        var me = this;
        me.nodecontrols = me.nodecontrols || [];
        me.nodeInputs = MEPH.util.Observable.observable([]);
        me.nodeOutputs = MEPH.util.Observable.observable([]);
        me.id = MEPH.GUID();
        me.great()


        me.defineNodeDependentProperties();
    },
    /**
     * Gets the relative position of an element to the node.
     * @param {Object} el
     * @return {Object}
     **/
    getRelPosition: function (el) {
        var me = this;
        // viewport.connectionFlow.zone
        var top = me.svg;
        var transform = me.svg.getTransformToElement(el)
        var result = {
            x: transform.e,
            y: transform.f
        }
        return result;
    },
    /**
     * Setup the active control zones.
     * @param {Object} viewport
     * @param {Object} node
     ***/

    setupActiveControlZones: function (viewport, node) {
        var me = this;

        if (me.nodecontrols)
            me.nodecontrols.foreach(function (x) {
                me.setActiveControlZone(x, viewport, node);
            });
    },
    getCorrespondingMatch: function (x) {
        var me = this;
        var input = me.nodeInputs.first(function (t) {
            return t.name + 'input' === x || t.name === x;
        });

        input = input || me.nodeOutputs.first(function (t) {
            return t.name + 'output' === x || t.name === x;
        });

        var res = me.getCorrespondingControl(x);

        if (res && !input) {
            return me.getInputNodeObject(res);
        }
        return input;
    },
    getCorrespondingControls: function () {
        var me = this;

        me.$correspondingcontrols = me.$correspondingcontrols || [];
        return me.$correspondingcontrols;
    },
    getCorrespondingControl: function (nodeput) {
        var me = this;
        return me.getCorrespondingControls().first(function (x) {
            if (typeof nodeput === 'string')
                return x.name === nodeput;

            return x.inout === nodeput;
        })
    },
    addCorrespondingControl: function (name, input) {
        var me = this;
        me.getCorrespondingControls().push({
            name: name, inout: input
        });
    },
    getInputNodeObject: function (res) {
        return res.inout;
    },
    setActiveControlZone: function (x, viewport, node) {
        var me = this;

        viewport = viewport || me.$viewport;
        node = node || me.$node;
        if (me[x]) {
            var input = me.getCorrespondingMatch(x);
            var zone = viewport.requestZone(node, {
                managed: true,
                id: input.id,//node.getId() + '-' + x + '-connector',
                type: MEPH.graph.ActiveZone.type.connector,
                property: x,
                dom: me[x].connector,
                connectortype: input.type
            });
            zone.$options.option = {
                canConnect: me.canConnect.bind(me),
                isOutput: !me[x].left
            };
        }
    },
    onLoaded: function () {
        var me = this;
        me.nodex = 0;
        me.bodyrx = 10;
        me.bodyry = 10;
        me.bodystrokewidth = 2;
        me.bodyy = 0;
        me.title = me.title || 'Node';
        me.nodewidth = me.nodewidth || 170;
        me.titlepadding = 15;
        me.footerheight = 15;
        me.headerheight = 24;
        me.titlepaddingtop = 17;
        me.booleanFill = me.booleanFill || '#FAF332';
        me.audioBufferFill = me.audioBufferFill || '#3AF3F2';
        me.numberFill = '#3e3e11';
        me.stringFill = '#de31f1';
        me.bodyfill = "rgb(90,90,90)";
        me.headerfill = "rgb(79,79,79)";
        me.inputradius = me.inputradius || 8;
        me.inputstroke = 'black';
        me.bodystroke = "rgb(234,168,68)";
        if (me.bufferoutput)
            me.bufferoutput.left = false;
        me.bufferTitle = 'buffer';
        me.booleanSource = ['true', 'false'];
        me.normalizeTitle = 'normalize';
        me.applyNodeInputsAndOutputs();
        //setTimeout(function () {
        //    me.nodeg.setAttributeNS(null, "id", "node" + (me.id || MEPH.GUID()));
        //}, 1000)
    },
    applyNodeInputsAndOutputs: function () {
        var me = this;
        me.nodeInputs.foreach(function (input) {
            input.canConnect = me.canConnect.bind(me);
            input.isOutput = false;
            if (me[input.name] && input.defaultValue) {
                me[input.name].value = input.defaultValue;
            }
        });
        me.nodeOutputs.foreach(function (input) {
            input.canConnect = me.canConnect.bind(me);
            input.isOutput = false;
            if (me[input.name] && input.defaultValue) {
                me[input.name].value = input.defaultValue;
            }
        });
    },
    involvedInConnections: function (zone) {
        var me = this;
        return me.graph.getConnections().where(function (x) {
            return x.getZones().contains(zone);
        });
    },
    inAConnection: function (zone1, zone2) {

        var me = this;
        return me.graph.getConnections().where(function (x) {
            return x.getZones().contains(zone1) && x.getZones().contains(zone2);
        }).length > 0;
    },
    isOutput: function (zone) {
        return zone.isOutput();
    },
    checkZoneTypeCompatibility: function (zone1, zone2) {
        var me = this;
        if (me.getZoneType(zone1) === MEPH.audio.graph.node.Node.String ||
            me.getZoneType(zone2) === MEPH.audio.graph.node.Node.String) {
            return me.getZoneType(zone1) === me.getZoneType(zone2);
        }
        return true;
    },
    canConnect: function (zone1, zone2) {
        var me = this;

        if (zone1.getNode() === zone2.getNode()) {
            return false;
        }
        if (me.isOutput(zone1) !== !me.isOutput(zone2)) {
            return false;
        }
        if (!(me.getZoneType(zone1) === 'Anything' || me.getZoneType(zone2) === 'Anything'))
            if (!me.isOutput(zone1) && me.involvedInConnections(zone1).length > 0) {//
                return false;
            }

        if (!me.checkZoneTypeCompatibility(zone1, zone2)) {
            return false;
        }
        if (me.inAConnection(zone1, zone2)) {
            return false;
        }
        return true;
    },
    removeNodeOutput: function (output) {
        var me = this;
        me.nodeOutputs.removeWhere(function (t) { return t === output; });
    },
    removeNodeInput: function (input) {
        var me = this;
        me.nodeInputs.removeWhere(function (t) { return t === input; });
    },
    addNodeInput: function (name, type, id) {
        var me = this;
        if (!me.nodeInputs.some(function (x) { return x.id === id; })) {
            var res = me.createInput(name, type)
            res.id = id;
            me.nodeInputs.push(res);
            return res;
        }
        return false;
    },
    addNodeOutput: function (name, type, id) {
        var me = this;
        if (!me.nodeOutputs.some(function (x) { return x.id === id; })) {
            var res = me.createOutput(name, type)
            res.id = id;
            me.nodeOutputs.push(res);
            return res;
        }
        return false;
    },
    getZoneType: function (zone) {
        var me = this;
        if (zone && zone.$options && zone.$options.option) {
            return zone.$options.connectortype;
        }
        return null;
    },
    setupActiveZones: function (viewport, node) {
        var me = this;
        me.$viewport = viewport;
        me.$node = node;
        me.setupActiveHeaderZone(viewport, node);
        me.setupActiveControlZones(viewport, node);
    },
    setupConnectingListeners: function () {


    },
    updatedValue: function (prop) {
        var me = this;
        var value = MEPH.Array(arguments).last().domEvent.value;
        me.setNodeInputDefaultValue(prop, value);
    },
    setNodeInputDefaultValue: function (prop, value) {
        var me = this;
        var input = me.nodeInputs.first(function (t) {
            return t.name === prop;
        });

        input = input || me.nodeOutputs.first(function (t) {
            return t.name === prop;
        });

        if (input) {
            input.defaultValue = value;
        }
    },
    /**
     * Setup the active header zone.
     * @param {Object} viewport
     * @param {Object} node
     ***/
    setupActiveHeaderZone: function (viewport, node) {
        var me = this;
        viewport.requestZone(node, {
            managed: true,
            id: node.getId() + '-header',
            type: MEPH.graph.ActiveZone.type.header,
            dom: me.body
        });

        me.don('mousedown', [me.body, me.container, me.inputs], function () {
            me.svg.parentNode.appendChild(me.svg);
        }, me);
        me.don('close', [me.svg], function (e) {
        });
        me.graphnode = node;
        me.graphnode.on('removed', function () {
            me.closeNode();
        })
    },
    closeNode: function () {
        var me = this;
        if (me.graph && me.graphnode)
            me.graph.removeNode(me.graphnode);
        me.destroy();
    },
    defineNodeDependentProperties: function () {
        var me = this;
        me.definePositionProperty();
        me.defineNodeHeightProperty();
        me.definerHeaderBufferProperties();
        me.defineBodyHeightProperty();
        me.defineBodyWidthProperty();
        me.defineBodyXProperty();
        me.defineTitleProperties();
    },
    definePositionProperty: function () {

    },
    heightchanged: function () {
        var me = this;
        me.refresh += 1;
    },
    defineNodeHeightProperty: function () {
        var me = this;
        me.nodecontrols = me.nodecontrols || [];
        var noncontrols = ['headerheight', 'footerheight', 'refresh'];
        var nodeheightdp = me.nodecontrols.concat(noncontrols);

        MEPH.util.Observable.defineDependentProperty('nodeheight', me, nodeheightdp, function () {
            var result = (me.titlepaddingtop || 0);
            nodeheightdp.foreach(function (t, i) {
                var temp = t;
                if (!noncontrols.some(function (z) { return z === t; })) {
                    temp += '.height';
                }
                result += parseFloat(MEPH.getPathValue(temp, me) || 0);
            })
            result += (me.controlverticalpadding || 0) * me.nodecontrols.length;
            result += (me.inputoutputverticalpadding || 0);
            Style.height(me.svg, result);
            return result;
        });
        MEPH.util.Observable.defineDependentProperty('inputoutputposition', me, ['headerbuffer'], function () {
            var result = parseFloat(me.headerbuffer || 0);
            result += (me.inputoutputverticalpadding || 0);
            return result;
        });
        me.controlsOffsets(me.nodecontrols);

    },
    defineTitleProperties: function () {
        var me = this;

        MEPH.util.Observable.defineDependentProperty('menutransform', me, ['headerbuffer', 'inputsx', 'menuheight'], function () {
            var result = parseFloat(me.headerbuffer || 0) - parseFloat(me.menuheight || 0);

            return 'translate(' + (me.inputsx || 0) + ',' + (result) + ')';
        });

        MEPH.util.Observable.defineDependentProperty('inputtransform', me, ['inputoutputposition', 'inputsx', 'inputsy'], function () {
            var result = 'translate(' + (me.inputsx || 0) + ',' + ((me.inputoutputposition || 0) + (me.inputsy || 0)) + ')';

            return result;
        });

        MEPH.util.Observable.defineDependentProperty('titlex', me, ['titlepadding', 'titlepaddingtop'], function () {
            var result = (me.titlepadding || 0);

            return result;
        });

        MEPH.util.Observable.defineDependentProperty('titley', me, ['titlepadding', 'titlepaddingtop'], function () {
            var result = (me.titlepaddingtop || 0);

            return result;
        });
    },
    defineBodyXProperty: function () {
        var me = this;
        ///bodyheight
        MEPH.util.Observable.defineDependentProperty('inputsx', me, ['inputradius'], function () {
            var result = (me.inputradius || 0)
            return result;
        });

        MEPH.util.Observable.defineDependentProperty('nodex', me, ['inputradius'], function () {
            var result = (me.inputradius || 0)
            return result;
        });

        MEPH.util.Observable.defineDependentProperty('bodyx', me, ['nodex', 'bodystrokewidth'], function () {
            var result = (parseFloat(me.nodex) || 0) + (me.bodystrokewidth || 0);
            return result;
        });

        MEPH.util.Observable.defineDependentProperty('iconX', me, ['nodewidth', 'bodystrokewidth'], function () {
            var result = (parseFloat(me.nodewidth) || 0) + (me.bodystrokewidth || 0);
            return result - 12;
        });
        MEPH.util.Observable.defineDependentProperty('iconY', me, ['titley'], function () {
            return 5;
        });


    },
    defineBodyHeightProperty: function () {
        var me = this;

        MEPH.util.Observable.defineDependentProperty('bodyheight', me, ['nodeheight', 'headerheight', 'footerheight'], function () {
            var result = me.nodeheight - (me.headerheight || 0) - (me.footerheight || 0);
            return result;
        });
    },
    controlsOffsets: function (offsets) {
        //var offsets = ['buffery'];
        var me = this;
        [].interpolate(0, offsets.length + 1, function (x) {
            if (x) {
                MEPH.util.Observable.defineDependentProperty(offsets[x - 1] + 'y', me, offsets.subset(0, x - 1).concat(['headerbuffer', 'refresh']), function (osets) {
                    var result = 0;

                    osets.foreach(function (t) {
                        var temp = t + '.height';
                        var vv = MEPH.getPathValue(temp, me);
                        result += parseFloat(vv || 0) + (me.controlverticalpadding || 0);
                    });
                    return result;
                }.bind(me, offsets.subset(0, x - 1)));
            }
        })
    },
    getControlVerticalOffset: function (name) {
        var me = this;
        var offsets = me.nodecontrols.subset(0, me.nodecontrols.indexWhere(function (x) { return x === name; }).first());

        offsets = offsets.concat(['headerbuffer']);
        var sum = 0;
        offsets.foreach(function (t) {
            var temp = t + '.height';
            var vv = MEPH.getPathValue(temp, me);
            sum += parseFloat(vv || 0) + (me.controlverticalpadding || 0);
        });
        return sum;
    },
    defineBodyWidthProperty: function () {
        var me = this;

        MEPH.util.Observable.defineDependentProperty('bodywidth', me, ['inputradius', 'nodewidth', 'bodystrokewidth'], function () {
            var result = me.nodewidth - (me.bodystrokewidth * 2 || 0);
            Style.width(me.svg, (parseFloat(me.nodewidth) || 0) + (parseFloat(me.inputradius) * 2 || 0));
            return result;
        });
    },
    /**
     * Defines the header buffer property
     */
    definerHeaderBufferProperties: function () {
        var me = this;

        MEPH.util.Observable.defineDependentProperty('menuheight', me, ['menuheightspace'], function () {
            var result = me.menuheightspace || 0;
            return result;
        });

        MEPH.util.Observable.defineDependentProperty('headerbuffer', me, ['headerheight', 'menuheight'], function () {
            var result = 0;
            ['menuheight', 'headerheight'].foreach(function (x) {
                if (me[x]) {
                    result += me[x];
                }
            });
            return result;
        });
    },
    createInput: function (name, type, options) {
        return {
            name: name.nodename(),
            title: name,
            type: type,
            connector: null,
            id: MEPH.GUID(),
            options: options || null,
            output: false
        }
    },
    createOutput: function (name, type) {
        return {
            name: name.nodename(),
            title: name,
            type: type,
            connector: null,
            id: MEPH.GUID(),
            output: true
        }
    }
});﻿/**
* @class MEPH.graph.ActiveZone
*/
MEPH.define('MEPH.graph.ActiveZone', {
    properties: {
        raiseZIndex: 12,
        textPopupTemplate: '<div activezone="holder"><input type="text" activezone="texttemplate" /></div>'
    },
    initialize: function () {
        var me = this;
        MEPH.Events(me);
    },
    statics: {
        canCreateConnection: function (zone1, zone2) {
            var result = true;
            if (zone1.$options &&
                zone1.$options.option &&
                zone1.$options.option.canConnect
                ) {
                result = result && zone1.$options.option.canConnect(zone1, zone2);
            }
            if (zone2.$options &&
                zone2.$options.option &&
                zone2.$options.option.canConnect
                ) {
                result = result && zone2.$options.option.canConnect(zone2, zone1);
            }
            return result;
        },
        type:
            {
                'connector': 'connector',
                color: 'color',
                select: 'select',
                header: 'header',
                custom: 'custom',
                title: 'title'
            }
    },
    onTitleZoneClick: function (type, domAndMouseEvnt) {
        var me = this, template;

        switch (me.$options.option.type) {
            case 'custom':
                template = me.$options.option.generator(me, domAndMouseEvnt);
                break;
            default:
                template = me.createTextPopup(domAndMouseEvnt, ['title', 'variable']);
                break;
        }
        if (template) {
            template.az.addEventListener('activezoneblur', function () {
                template.az.parentNode.removeChild(template.az);
                me.getNode().fire('move', {});
                // MEPH.cancelBubble(e);
            });
        }
    },
    onColorZoneClick: function (type, domAndMouseEvnt) {
        var me = this, template;

        switch (me.$options.option.type) {
            case 'custom':
                template = me.$options.option.generator(me, domAndMouseEvnt);
                break;
            default:
                template = me.createTextPopup(domAndMouseEvnt, 'value');
                break;
        }
        if (template) {
            template.az.addEventListener('activezoneblur', function () {
                template.az.parentNode.removeChild(template.az);
                me.getNode().fire('move', {});
            });
        }
    },
    isEnumerable: function () {
        var me = this;
        if (me.getOptions() && me.getOptions().option) {
            return me.getOptions().option.enumerable
        }
        return false;
    },
    isMatching: function () {
        var me = this;
        if (me.getOptions() && me.getOptions().option) {
            return me.getOptions().option.matchingoutput;
        }
        return false;
    },
    createTextPopup: function (domAndMouseEvnt, prop) {
        var me = this;
        var domtext = document.createElement('div');
        var divchild = document.body.appendChild(domtext);
        divchild.innerHTML = me.textPopupTemplate;
        if (!Array.isArray(prop)) {
            prop = [prop];
        }
        var az = divchild.querySelector('[activezone="holder"]');
        az.style.position = 'fixed';
        az.style.zIndex = 10000;
        az.style.top = domAndMouseEvnt.evt.clientY + 'px';
        az.style.left = domAndMouseEvnt.evt.clientX + 'px';
        var azt = divchild.querySelector('[activezone="texttemplate"]');
        azt.addEventListener('change', function () {
            me.fire('change', {});
        });
        azt.addEventListener('blur', function () {
            prop.foreach(function (x) {
                me.$options.option[x] = azt.value;
            });
            me.getDom().setAttribute('title', azt.value);
            azt.dispatchEvent(MEPH.createEvent('activezoneblur', { bubbles: true }));
        });
        azt.value = me.$options.option[prop.first()];
        document.body.appendChild(divchild.firstChild);
        azt.focus();
        return { az: az, azt: azt };
    },
    setGraphViewPort: function (graphviewport) {
        var me = this;
        me.$graphviewport = graphviewport;
        me.$graphviewport.on('moved', me.onViewPortChange.bind(me));
        me.$graphviewport.on('change', me.onViewPortChange.bind(me));
    },
    getGraphViewPort: function (graphviewport) {
        var me = this;
        return me.$graphviewport;
    },
    isDraggable: function () {
        var me = this;
        return me.$draggable;
    },
    setZoneType: function (type) {
        var me = this;
        me.$zoneType = type;
    },
    getZoneType: function () {
        var me = this;
        return me.$zoneType;
    },
    isConnector: function () {
        var me = this;
        return me.getZoneType() === pgx.ActiveZone.type.connector;
    },
    setOptions: function (options) {
        var me = this;
        me.$options = options;
        me.setDomTitle();
    },
    getOptions: function () {
        var me = this;
        return me.$options;
    },
    onViewPortChange: function () {
        var me = this, pos = me.getGraphViewPort().getPosition();
        me.setRelativePosition(pos.x, pos.y, pos.z);//setPosition(pos.x, pos.y, pos.z);
    },
    onClick: function (e) {
        var me = this;
        if (me.$clickable) {
            me.fire('click', { dom: me.getDom(), evt: e });
        }
        //MEPH.cancelBubble(e);
    },
    onMouseDown: function (e) {
        var me = this;
        if (me.$draggable) {
            me.fire('activezone_dragstart', { dom: me.getDom(), evt: e });
        }
        //MEPH.cancelBubble(e);
    },
    setDom: function (dom) {
        var me = this;
        me.$dom = dom;
        var graphviewport = me.getGraphViewPort();
        if (graphviewport && (!me.getOptions() || !me.getOptions().managed)) {
            graphviewport.getDock().appendChild(dom);
        }
        if (me.$clickable) {
            Style.cursor(dom, 'pointer');
        }

        me.interactivity();

        if ((!me.getOptions() || !me.getOptions().managed)) {
            Style.position(dom, 'absolute');
            Style.zIndex(dom, me.raiseZIndex);
        }

        me.$dom.addEventListener('mousedown', me.onMouseDown.bind(me));
        me.$dom.addEventListener('click', me.onClick.bind(me));
        me.setDomTitle();
        me.ignoreMouse();

    },
    ignoreMouse: function (value) {
        var me = this;
        if (me.getDom() && (value || me.$ignoreMouse)) {
            me.getDom().style.pointerEvents = 'none';
        }

        else if (value !== undefined) {
            me.$ignoreMouse = value;
        }
    },
    setDomTitle: function () {
        var me = this;
        if (me.getDom() && me.$options && me.$options.option && me.$options.option) {
            switch (me.getZoneType()) {
                case ActiveZone.type.color:
                    me.$dom.setAttribute('title', me.$options.option.value);
                    break;
                case ActiveZone.type.title:
                    me.$dom.setAttribute('title', me.$options.option.title);
                    break;
            }
        }
    },
    setNode: function (node) {
        var me = this;
        me.$node = node;
        if (node && node.addZone)
            node.addZone(me);

    },
    getNode: function () {
        var me = this;
        return me.$node;
    },
    getId: function () {
        var me = this;
        return me.id;
    },
    getDom: function () {
        var me = this;
        return me.$dom;
    },
    destroy: function () {
        var me = this;
        if (me.getDom() && me.getDom().parentNode && (!me.getOptions() || !me.getOptions().managed)) {
            me.getDom().parentNode.removeChild(me.getDom());
        }
        me.fire('destroy', me);
    },
    isOutput: function () {
        var me = this;
        if ((me.getOptions() && me.getOptions().managed)) {
            return me.getOptions().option.isOutput;
        }
        return me.getNode().isOutput(me.getOptions().option);
    },

    clickable: function (notclickable) {
        var me = this;
        me.$clickable = notclickable !== undefined ? notclickable : true;
        var dom = me.getDom();
        if (dom) {
            Style.cursor(dom, 'pointer');
        }
        me.setDomTitle();
    },
    draggable: function (notdraggable) {
        var me = this;
        me.$draggable = notdraggable !== undefined ? notdraggable : true;
        me.interactivity();
    },
    interactivity: function () {
        var me = this;
        if (!me.$draggable && me.getDom()) {
            //me.getDom().style.pointerEvents = 'none';
        }
    },
    setRelativePosition: function (x, y, z) {
        var me = this,
            dom = me.getDom();
        me.$relativeposition = new J3DIVector3(x, y, z);
    },
    setPosition: function (x, y, z, override) {
        var me = this,
            _x = 0,
            _y = 0,
            dom = me.getDom();
        me.$position = new J3DIVector3(x, y, z);
        if (me.$relativeposition) {
            //_x += me.$relativeposition[0];
            //_y += me.$relativeposition[1];
        }
        if (me.$$$timeout) {
            clearTimeout(me.$$$timeout);
        }
        if (dom && (!me.stoppedMoveAbility || override) && (!me.getOptions() || !me.getOptions().managed)) {
            // me.$$$timeout = setTimeout(function () {
            Style.translate(dom, (x + _x), (y + _y));
            //}, 100);
        }
    },
    getPosition: function () {
        var me = this;
        if (me.$position) {
            return {
                x: me.$position[0],
                y: me.$position[1],
                z: me.$position[2]
            }
        }
        return null;
    }
});﻿/*global MEPH*/

/**
* @class
*
* This is a convenient way of defining an input control
* color css selector when using the MEPH.iconfont.IconFont#color selector syntax.
*/
MEPH.define('MEPH.input.Input', {
    alias: 'm_input',
    extend: 'MEPH.field.FormField',
    templates: true,
    properties: {
        step: null,
        disabled: null,
        max: null,
        maxlength: null,
        min: null,
        pattern: null,
        readonly: null,
        required: null,
        placeholder: null,
        name: null,
        size: null
    },
    initialize: function () {
        var me = this,
            properties = MEPH.Array(['value']);

        me.callParent.apply(me, arguments);
        properties.foreach(function (prop) {
            me.addTransferableAttribute(prop, {
                object: me,
                path: prop
            });
        });
    },
    onLoaded: function () {
        var me = this;
        me.callParent.apply(me, arguments);
        me.fire('altered', { path: 'type', references: [] });
    }
});﻿/**
* @class MEPH.graph.GraphRenderer
*/
MEPH.define('MEPH.graph.GraphRenderer', {
    requires: ['MEPH.util.Observable'],
    properties: {
        connectionCanvasZIndex: 2,
        maxSelectionDistance: 30,
        nodeCanvasZIndex: 3
    },
    initialize: function () {
        var me = this;
        me.$canvases = MEPH.util.Observable.observable([]);
        me.$selectedConnections = [];
        me.animationComplete = true;
    },
    setViewPort: function (viewport) {
        var me = this;
        me.$viewport = viewport;
        viewport.setRenderer(me);
        me.$viewport.on('moved', me.onViewPortChange.bind(me));
        me.$viewport.on('change', me.onViewPortChange.bind(me));
        me.$viewport.on('viewportconnectionflow', me.onViewPortConnectionFlow.bind(me));
        me.$viewport.on('viewportconnectionflowclear', me.onViewPortConnectionFlow.bind(me));
        me.$viewport.on('mousemove', me.onMouseMoveOverViewPort.bind(me));
    },
    use: function (what) {
        var me = this;
        switch (what) {
            case 'viewport':
                var viewport = me.getViewPort();
                me.setCanvasBag(viewport.getCanvasBag());
                break;
            default:
                throw 'use somethin with a canvas.'
        }
    },
    setCanvasBag: function (dom) {
        var me = this;
        me.$canvasBag = dom;
        me.$canvasBag.addEventListener('resize', me.onCanvasBagResize.bind(me));
    },
    getCanvasBag: function () {
        var me = this;
        return me.$canvasBag || null;
    },
    onCanvasBagResize: function () {
        me.resizeCanvases();
    },
    resizeCanvases: function () {
    },
    setGraph: function (graph) {
        var me = this;
        me.$graph = graph;
    },
    getGraph: function (graph) {
        var me = this;
        return me.$graph;
    },
    onViewPortChange: function () {
        var me = this;
        me.requestAnimationFrame();
    },
    requestAnimationFrame: function () {
        var me = this;

        if (me.requestedAnimation !== undefined) {
            cancelAnimationFrame(me.requestedAnimation);
        }

        me.requestedAnimation = requestAnimationFrame(function () {
            me.render();
            me.requestedAnimation = undefined;
        });
        return Promise.resolve();
    },
    setNodeRenderer: function (renderer) {
        var me = this;
        me.$nodeRenderer = renderer;
    },
    getNodeRenderer: function () {
        var me = this;
        return me.$nodeRenderer;
    },
    setConnectionRenderer: function (renderer) {
        var me = this;
        me.$connectionRenderer = renderer;
    },
    getConnectionRenderer: function () {
        var me = this;
        return me.$connectionRenderer;
    },
    getConnections: function () {
        var me = this;
        return me.getGraph().getConnections();
    },
    getNodes: function () {
        var me = this;
        return me.getGraph().getNodes();
    },
    generateCanvas: function (bucket, isconnectioncanvas) {
        var me = this,
        canvas = document.createElement('canvas');
        var viewportsize = me.getViewPort().getCanvasSize();
        bucket = bucket || me.getCanvasBag();
        bucket.appendChild(canvas);
        canvas.height = viewportsize.height;
        canvas.width = viewportsize.width;
        canvas.style.position = 'absolute';
        canvas.style.zIndex = isconnectioncanvas ? me.connectionCanvasZIndex : me.nodeCanvasZIndex;
        me.$canvases.push(canvas);
        return canvas;
    },
    getCanvases: function () {
        var me = this;
        if (me.$canvases.length === 0) {
            me.generateCanvas();
        }
        return me.$canvases;
    },
    render: function () {
        var me = this,
            canvases = me.getCanvases();
        me.clearCanvases();

        me.getNodes().where(function (x) {
            return !x.isHidden();
        }).foreach(function (x) {
            me.renderNode(x);
        });
        if (me.getConnectionRenderer()) {
            me.getConnections().foreach(function (x) {
                me.renderConnection(x);
            });
        }
        me.renderConnectionFlow();

    },
    clear: function () {
        var me = this;
        me.getNodes().removeWhere(function () { return true; });
        me.getConnections().removeWhere(function () { return true; });
    },
    onMouseMoveOverViewPort: function (ee) {
        var me = this;
        me.clearCanvas(me.getViewPortEffects());
        var tempee = me.getRelPosition(ee);
        me.renderViewPortEffects(me.getViewPortEffects(), tempee);
    },
    getRelPosition: function (ee) {
        var me = this,
            viewport = me.getViewPort();
        var xy = viewport.getXY(ee);
        var dompos = viewport.maskDomPosition();
        return {
            x: xy.x - dompos.x,
            y: xy.y - dompos.y
        };
    },
    onViewPortConnectionFlow: function (ee) {
        var me = this;
        me.clearCanvas(me.getFlowCanvas());
        me.renderConnectionFlow(ee);
    },
    renderConnectionFlow: function () {
        var me = this,
          canvases = me.getCanvases();
        var viewport = me.getViewPort();

        if (viewport.connectionFlow &&
            viewport.connectionFlow.state === MEPH.graph.GraphViewPort.start_connection) {
            var connectionRenderer = me.getConnectionRenderer();
            var connectioncanvas = me.getFlowCanvas();

            if (connectioncanvas) {
                connectionRenderer.render(connectioncanvas, [{
                    start: viewport.getMousePosition(),
                    end: viewport.connectionFlow.zone.getPosition(),
                    zone: viewport.connectionFlow.zone,
                    viewport: viewport
                }]);
            }
        }
    },
    renderViewPortEffects: function (canvas, ee) {
        var me = this,
            connectionRenderer = me.getConnectionRenderer();
        if (connectionRenderer) {
            var connection = me.getGraph().getConnections().minSelect(function (connection) {
                return connection.distanceFrom(ee)
            });
            if (connection) {
                Style.zIndex(canvas, me.connectionCanvasZIndex);
                if (connection.distanceFrom(ee) < me.maxSelectionDistance) {
                    connectionRenderer.renderConnection(connection, canvas, me.getViewPort().getPosition(), me.getClosetConnectionOptions(connection));
                }
            }
            me.getSelectedConnections().foreach(function (x) {
                connectionRenderer.renderConnection(x, canvas, me.getViewPort().getPosition(), me.getSelectedConnectionsOptions(x));
            });
        }
    },
    getSelectedConnections: function () {
        var me = this;
        return me.getViewPort().getSelectedConnections();
    },
    getSelectedConnectionsOptions: function (connection) {
        return {
            lineWidth: 2,
            strokeStyle: 'red'
        }
    },
    getClosetConnectionOptions: function () {
        return {
            lineWidth: 4,
            strokeStyle: 'orange'
        }
    },
    getFlowCanvas: function () {
        var me = this;
        return me.getNthCanvas(3, me.connectionCanvasZIndex);
    },
    getViewPortEffects: function () {
        var me = this;
        return me.getNthCanvas(4, me.connectionCanvasZIndex);
    },
    getNthCanvas: function (nth, zindex) {
        var me = this,
         canvases = me.getCanvases();
        var connectioncanvas = canvases.nth(nth);
        if (!connectioncanvas) {
            me.generateCanvas(null, true);
            connectioncanvas = canvases.nth(nth);
            if (connectioncanvas)
                connectioncanvas.style.zIndex = zindex;
        }
        return connectioncanvas;
    },
    renderConnection: function (connection) {
        var me = this,
            connectionRenderer = me.getConnectionRenderer(),
            canvases = me.getCanvases();
        var canvas = canvases.first();

        var connectioncanvas = canvases.second();
        if (!connectioncanvas) {
            me.generateCanvas(null, true);
            connectioncanvas = canvases.second();
            connectioncanvas.style.zIndex = me.connectionCanvasZIndex;
        }

        if (connectionRenderer) {
            Style.zIndex(connectioncanvas, me.connectionCanvasZIndex);
            connectionRenderer.renderConnection(connection, connectioncanvas, me.getViewPort().getPosition());
        }
    },
    renderNode: function (node) {
        var me = this,
            nodeRenderer = me.getNodeRenderer(),
            connectionRenderer = me.getConnectionRenderer(),
            canvases = me.getCanvases();
        var canvas = canvases.first();
        nodeRenderer.renderNode(node, canvas, me.getViewPort().getPosition());
    },
    clearCanvas: function (canvas) {
        var context;
        if (canvas) {
            context = canvas.getContext('2d');
            context.clearRect(0, 0, canvas.width, canvas.height);
        }
    },
    clearCanvases: function () {
        var me = this;
        me.getCanvases().foreach(function (canvas) {
            me.clearCanvas(canvas);
        });
    },
    getViewPort: function () {
        var me = this;
        return me.$viewport;
    }
});﻿/**
* @class MEPH.graph.Graph
* Creates a graph.
*/
MEPH.define('MEPH.graph.renderer.BlenderNode', {
    requires: ['MEPH.util.Renderer',
                'MEPH.graph.ActiveZone'],
    extend: "MEPH.graph.renderer.CanvasRenderer",
    properties: {
        rowHeight: 26,
        colorBoxWidth: 30,
        offsetFromLeft: 10,
        labelFontSize: 15,
        rowTopPadding: 0,
        labelPaddingLeft: 10,
        labelPaddingRight: 20,
        colorBoxRadius: 4,
        selectBoxOffset: -10,
        connectorOffsetTop: 10,
        colorBoxHeight: 20,
        connectorRadius: 4,
        rowBottomPadding: 0,
        offsetFromTop: 34,
        headerHeight: 30,
        headerWidth: 198,
        titleWidth: 85,
        nodeWidth: 200,
        drawCanvas: true
    },
    initialize: function (graphviewport) {
        var me = this;
        MEPH.Events(me);
        me.$graphviewport = graphviewport;
        me.callParent.apply(me, arguments);
    },
    renderNode: function (node, canvas, offset) {
        var me = this;
        var position = node.getPosition();
        var title = node.getTitle();
        me.renderer.setCanvas(canvas);
        me.draw({
            x: position.x + offset.x,
            y: position.y + offset.y,
            title: title,
            node: node,
            nodeInputs: node.getNodeInputs(),
            nodeOutputs: node.getNodeOutputs()
        });
    },
    getColorByType: function (option) {
        var fillstyle, me = this;
        fillstyle = me.getColor(option.languageType);
        return fillstyle;
    },
    getColor: function (languageType) {
        var me = this;

        switch (languageType) {
            case 'array':
                return 'CornflowerBlue';
            case 'function':
                return 'red';
            case 'context':
            case 'then':
            case 'else':
                return 'green';
            case 'number':
            case 'variable':
            case 'bool':
            case 'string':
                return 'blue';
            case 'operator':
                return 'purple';
            default:
                return 'yellow';
        }
    },
    requestZone: function (node, options) {
        var me = this;
        debugger
        if (!options.customonly) {
            me.$graphviewport.requestZone(node, options);
        }
    },
    colorLabel: function (x, y, option, right) {
        var me = this, fillstyle;
        fillstyle = me.getColorByType(option);
        var node = option.node;
        var text = {
            text: option.title.substr(0, 20),
            textAlign: option.textAlign,
            shape: 'text',
            textBaseline: "top",
            font: me.labelFontSize + 'px Verdana',
            fillStyle: 'black',
            x: x + (right ? -(me.colorBoxWidth + me.labelPaddingRight) : me.colorBoxWidth + me.labelPaddingLeft),
            y: y
        }
        var _x = x + (right ? -(me.colorBoxWidth + me.labelPaddingLeft) : 0);
        var _y = y;
        if (!(option.node && option.node.$data && option.node.$data.customonly)) {
            var zone = me.$graphviewport.requestZone(node, {
                id: option.id + '-title',
                type: MEPH.graph.ActiveZone.type.title,
                option: option,
                x: _x + (right ? -(me.colorBoxWidth + me.labelPaddingRight) : me.colorBoxWidth + me.labelPaddingLeft),
                height: me.colorBoxHeight,
                width: me.titleWidth,
                y: _y
            });
            me.$graphviewport.requestZone(node, {
                id: option.id + '-color',
                type: MEPH.graph.ActiveZone.type.color,
                option: option,
                x: _x,
                height: me.colorBoxHeight,
                width: me.colorBoxWidth,
                y: _y
            });
        }
        return [{
            x: _x,
            y: _y,
            shape: 'rectangle',
            strokeStyle: null,
            fillStyle: fillstyle,
            radius: me.colorBoxRadius,
            height: me.colorBoxHeight,
            width: me.colorBoxWidth
        }, text]
    },
    createOutOptions: function (node, array, x, y) {
        var result = [], me = this;
        array.foreach(function (option, index) {
            var fillstyle;
            option.node = node;
            option.textAlign = 'end';
            var _y = y + me.connectorOffsetTop + (index * (me.rowHeight + me.rowTopPadding));
            var _x = x + me.nodeWidth;
            result = result.concat(me.colorLabel(me.nodeWidth + x, y + (index * (me.rowHeight + me.rowTopPadding)), option, true));
            result.push({
                fillStyle: me.getColorByType(option),// fillstyle,
                strokeStyle: 'black',
                shape: MEPH.util.Renderer.shapes.circle,
                radius: me.connectorRadius,
                y: _y,
                x: _x
            });

            me.$graphviewport.requestZone(node, {
                id: option.id,
                option: option,
                type: MEPH.graph.ActiveZone.type.connector,
                radius: me.connectorRadius,
                width: me.connectorRadius * 2,
                height: me.connectorRadius * 2,
                x: _x - me.connectorRadius,
                y: _y - me.connectorRadius
            });
        });
        return result;
    },
    createInOptions: function (node, array, x, y) {
        var result = [], me = this;
        array.foreach(function (option, index) {
            var fillstyle;
            option.textAlign = 'start';
            option.node = node;
            result = result.concat(me.colorLabel(x, y + (index * (me.rowHeight + me.rowTopPadding)), option));
            var _y = y + me.connectorOffsetTop + (index * (me.rowHeight + me.rowTopPadding));
            var _x = x + (-me.offsetFromLeft);
            result.push({
                fillStyle: me.getColorByType(option),// fillstyle,
                strokeStyle: 'black',
                shape: MEPH.util.Renderer.shapes.circle,
                radius: me.connectorRadius,
                y: _y,
                x: _x
            });

            me.$graphviewport.requestZone(node, {
                id: option.id,
                option: option,
                radius: me.connectorRadius,
                type: MEPH.graph.ActiveZone.type.connector,
                width: me.connectorRadius * 2,
                height: me.connectorRadius * 2,
                x: _x - me.connectorRadius,
                y: _y - me.connectorRadius
            });
        });
        return result;
    },
    draw: function (options) {
        // Create Linear Gradients
        var me = this, temp = me.options(options);
        var node = options.node;
        var text = {
            text: options.title,
            shape: 'text',
            font: '17px Verdana',
            fillStyle: 'black',
            x: options.x + 30 || 0,
            y: options.y + 13 || 0
        }
        if (!me.rendered) {
            //   me.rendered = true;

            var inoptions = node.$data.customonly ? [] : me.createInOptions(node, options.nodeInputs, options.x + me.offsetFromLeft, options.y + me.offsetFromTop + options.nodeOutputs.length * me.rowHeight);
            var outoptions = node.$data.customonly ? [] : me.createOutOptions(node, options.nodeOutputs, options.x, options.y + me.offsetFromTop);
            var _x = options.x + 1;
            var _y = options.y + 1;
            var headerOptions = {
                shape: 'rectangle',
                fillStyle: null,
                gradientFillStyle: {
                    x0: options.x,
                    y0: options.y,
                    x1: options.x,
                    y1: options.y + 25,
                    colorStops: [{ stop: 0, color: "#A5A5A5" },
                    { stop: 0.4, color: "#A5A5A5" },
                    { stop: 0.5, color: "#A5A5A5" },
                    { stop: 1, color: "#A5A5A5" }]
                },
                x: _x || 0,
                y: _y || 0,
                strokeStyle: "",
                lineWidth: 0,
                width: me.headerWidth,
                height: me.headerHeight,
                radius: { upperLeft: 10, upperRight: 10, lowerLeft: 0, lowerRight: 0 }
            };
            var selectBoxOffsetOptions = {
                shape: 'rectangle',
                fillStyle: null,
                gradientFillStyle: {
                    x0: options.x,
                    y0: options.y,
                    x1: options.x,
                    y1: options.y + 25,
                    colorStops: [{ stop: 0, color: "#00A5A5" },
                    { stop: 0.4, color: "#A5A500" },
                    { stop: 0.5, color: "#A5A5A5" },
                    { stop: 1, color: "#A500A5" }]
                },
                x: (_x + me.headerWidth + me.selectBoxOffset) || 0,
                y: _y || 0,
                strokeStyle: "",
                lineWidth: 0,
                width: me.selectBoxWidth || 10,
                height: me.selectBoxHeight || 10,
                radius: { upperLeft: 2, upperRight: 10, lowerLeft: 0, lowerRight: 2 }
            };

            if (node.getId() && !node.$data.customonly) {

                me.$graphviewport.requestZone(node, {
                    id: node.getId() + '-header',
                    type: MEPH.graph.ActiveZone.type.header,
                    radius: me.connectorRadius,
                    width: me.headerWidth,
                    height: me.headerHeight,
                    x: _x,
                    y: _y
                });

                me.$graphviewport.requestZone(node, {
                    id: node.getId() + '-selectBox',
                    type: MEPH.graph.ActiveZone.type.select,
                    radius: me.connectorRadius,
                    width: me.selectBoxWidth || 10,
                    height: me.selectBoxHeight || 10,
                    x: (_x + me.headerWidth + me.selectBoxOffset) || 0,
                    y: _y || 0
                });
            }
            if (options.node.$data && options.node.$data.template) {
                me.$graphviewport.requestZone(node, {
                    id: node.getId() + '-template',
                    type: MEPH.graph.ActiveZone.type.custom,
                    template: options.node.$data.template,
                    x: _x,
                    y: _y
                });
            }
            headerOptions = me.options(headerOptions, options);
        }
        if (me.drawCanvas) {
            me.renderer.draw([temp, headerOptions, selectBoxOffsetOptions, text].concat(inoptions).concat(outoptions));
        }
        return true;
    },
    options: function (options, temp) {
        var me = this;
        temp = temp || {
            shape: 'rectangle',
            fillStyle: '#727272',
            x: 8,
            y: 8,
            strokeStyle: "#F15800",
            lineWidth: 1,
            width: me.nodeWidth,
            height: me.offsetFromTop + (options.nodeInputs.length + options.nodeOutputs.length) * me.rowHeight,
            radius: 10
        };
        for (var i in options) {
            temp[i] = options[i];
        }
        return temp;
    }
});﻿/**
* @class MEPH.graph.Graph
* Creates a graph.
*/
MEPH.define('MEPH.graph.renderer.ConnectionRenderer', {
    requires: ['MEPH.util.Renderer'],
    extend: "MEPH.graph.renderer.CanvasRenderer",
    properties: {
        singleNodePosition: null
    },
    initialize: function () {
        var me = this;
        MEPH.Events(me);
        me.singleNodePosition = { x: 100, y: 100 };
        me.callParent.apply(me, arguments);
    },
    draw: function (options, endpoints, overridingoptions) {
        var me = this,
            temp;
        overridingoptions = overridingoptions || {};
        var items = endpoints.select(function (x) {
            temp = me.options(options);
            temp = me.options(overridingoptions);
            temp.start = x.start
            temp.end = x.end;
            return temp;
        });
        return me.renderer.draw(items);
    },
    calculateEndPoints: function (nodes, offset, connection) {
        var me = this;
        offset = offset || { x: 0, y: 0 };
        var zones = connection.getZones();
        var result = zones.summation(function (zone, current, index) {
            var pos = zone.getPosition();
            if (current) {
                return {
                    x: pos.x + current.x,
                    y: pos.y + current.y
                };
            }
            return {
                x: pos.x,
                y: pos.y
            };
        }) || { x: 0, y: 0 };

        var average = {
            x: (result.x / zones.length),
            y: (result.y / zones.length)
        };

        var nodeendpoints = connection.getZones().select(function (x) {
            var pos = x.getPosition();
            return {
                start: {
                    x: pos.x,
                    y: pos.y
                },
                end: average
            }
        });
        return nodeendpoints;
    },
    render: function (canvas, endpoints, overridingoptions) {
        var me = this;
        me.renderer.setCanvas(canvas);
        me.draw({}, endpoints, overridingoptions);
    },
    renderConnection: function (connection, canvas, offset, overridingoptions) {
        var me = this;
        var nodes = connection.getNodes();
        var endpoints = me.calculateEndPoints(nodes, offset, connection);
        me.render(canvas, endpoints, overridingoptions);
        return true;
    },
    options: function (options) {
        var temp = {
            shape: MEPH.util.Renderer.shapes.line,
            fillStyle: 'grey',
            x: 10,
            y: 10,
            width: 200,
            height: 100,
            radius: 4
        }
        for (var i in options) {
            temp[i] = options[i];
        }
        return temp;
    },
    drawToCache: function (key, options) {
        options = options || {};
        var me = this,
            temp = me.options(options);
        me.callParent.apply(me, [key, temp]);
    }
});﻿/**
* @class MEPH.graph.Graph
* Creates a graph.
*/
MEPH.define('MEPH.graph.ConnectionHandler', {
    requires: ['MEPH.graph.Connection'],
    properties: {
    },
    initialize: function () {
    },
    setGraph: function (graph) {
        var me = this;
        me.$graph = graph;
    },
    getGraph: function () {
        var me = this;
        return me.$graph;
    },
    generateConnection: function () {
        var connection = new MEPH.graph.Connection();
        return connection;
    },
    createConnection: function (zones) {
        try {
            var me = this,
                connection = me.generateConnection();
            zones.foreach(function (x, index) {
                connection.addZone(x);
                connection.addNode(x.getNode());
                x.getNode().addConnection(connection);
            })
            var graph = me.getGraph();
            if (graph) {
                graph.addConnection(connection);
            }
        }
        catch (e) {
            return false;
        }
        return connection;
    }
});﻿/// <reference path="GraphViewPort.js" />
/**
* @class MEPH.graph.GraphViewPort
*/
MEPH.define('MEPH.graph.GraphViewPort', {
    requires: ['MEPH.math.J3DIVector3',
                'MEPH.graph.ActiveZone',
                'MEPH.util.Style'],
    properties: {
        noViewPortDrag: false,
        maskDownZIndex: 10,
        maskUpZIndex: 20,
        isDestroyed: false,
        connectionFlow: null,
        maxSelectionDistance: 30,
        cancelDragging: false,
        boundaries: null,
        templates: null,
        selectConnectionOnClick: false,
        resizeDelay: 1000,
        boundaryRetensionSpeed: .91,
        fullwindow: false
    },
    statics: {
        start_connection: 'start_connection',

        create: function (graph, size, selector, holder) {;
            selector = selector || 'body';
            var graphviewport = new MEPH.graph.GraphViewPort();
            var graphrenderer = new MEPH.graph.GraphRenderer();
            var connectionrenderer = new MEPH.graph.renderer.ConnectionRenderer();
            var blenderNode = new MEPH.graph.renderer.BlenderNode(graphviewport);

            var connectionHandler = new MEPH.graph.ConnectionHandler();
            connectionHandler.setGraph(graph);
            graphviewport.setConnectionHandler(connectionHandler);

            graphviewport.setup(selector, size);
            graphrenderer.setNodeRenderer(blenderNode);
            graphrenderer.setConnectionRenderer(connectionrenderer);
            graphrenderer.setGraph(graph);
            graphrenderer.setViewPort(graphviewport);
            graphrenderer.use('viewport');
            graphviewport.setGraph(graph);
            graphrenderer.render();
            if (holder && document.querySelector(holder)) {
                graphviewport.setHolder(holder);
                graphviewport.resize();
                window.addEventListener('resize', function () {
                    graphviewport.resize();
                });
            }
            graphviewport.selectConnectionOnClick = true;
            return graphviewport;
        }
    },
    initialize: function () {
        var me = this;
        MEPH.Events(me);
        me.$activeZones = MEPH.util.Observable.observable([]);
        me.$templates = [];
        me.$selectedConnections = MEPH.util.Observable.observable([]).on('onpush', me.onSelectedConnectionAdded.bind(me));
        me.setPosition(0, 0, 0);
    },
    onSelectedConnectionAdded: function (type, options) {
        var me = this;
        var _connections = options.added;
        var connections = [].interpolate(0, _connections.length, function (x) {
            return _connections[x];
        });
        connections.foreach(function (connection) {
            connection.on('removed', function () {
                me.getSelectedConnections().removeWhere(function (x) { return x === connection; });
            });
        });
    },
    setGraph: function (graph) {
        var me = this;
        me.$graph = graph;
        me.$graph.$viewport = me;
        me.$graph.on('change', me.onGraphChange.bind(me));
        return me;
    },
    destroy: function () {
        var me = this;
        var dock = me.getDock();
        if (dock && dock.parentNode) {
            dock.parentNode.removeChild(dock);
        }
        me.isDestroyed = true;
    },
    onGraphChange: function (args) {
        var me = this;
        args.viewport = {
            position: me.getPosition()
        };
        me.fire('change', args);
    },
    getGraph: function () {
        var me = this;
        return me.$graph;
    },
    setRenderer: function (renderer) {
        var me = this;
        me.$renderer = renderer;
    },

    getRenderer: function () {
        var me = this;
        return me.$renderer;
    },
    refresh: function () {
        var me = this;
        me.onGraphChange({});
    },
    setup: function (selector, options) {
        var me = this;
        var target = document.querySelector(selector);
        var dock = document.createElement('div');
        var canvas = document.createElement(options && options.element ? options.element : 'canvas');
        canvas.style.position = 'absolute';
        canvas.style.zIndex = 3;
        options = options || { height: 400, width: 450 };
        target.appendChild(dock);
        dock.appendChild(canvas);
        me.setCanvas(canvas);
        me.setCanvasSize({ height: options.height, width: options.width });
        me.setDock(dock);
        me.applyMask(dock);
    },
    setHolder: function (holder) {
        var me = this;
        if (typeof (holder) === 'string') {
            holder = document.querySelector(holder);
        }
        me.holder = holder;
    },
    setPosition: function (x, y, z) {
        var me = this;
        if (me.isMoving(x, y, z)) {
            me.$position = new J3DIVector3(x, y, z);
            me.fire('moved', { node: me });
        }
    },
    isMoving: function (x, y, z) {
        var me = this, position = me.getPosition();
        if (position) {
            return !(position.x == x && position.y == y && position.z == z);
        }
        return true;
    },
    getPosition: function () {
        var me = this;
        if (me.$position) {
            return {
                x: me.$position[0],
                y: me.$position[1],
                z: me.$position[2]
            }
        }
        return null;
    },
    getRelPosition: function (ee) {
        var me = this,
            viewport = me;
        var xy = viewport.getXY(ee);
        var dompos = viewport.maskDomPosition();
        return {
            x: xy.x - dompos.x,
            y: xy.y - dompos.y
        };
    },
    onClick: function (ee) {
        var me = this;
        var relpos = me.getRelPosition(ee);
        var connection = me.getGraph().getConnections().minSelect(function (connection) {
            return connection.distanceFrom(relpos)
        });
        if (connection) {
            if (connection.distanceFrom(relpos) < me.maxSelectionDistance) {
                me.selectionConnection(connection);
            }
        }
    },
    onDblClick: function () {

        var me = this;
        if (me.connectionFlow && me.connectionFlow.state === MEPH.graph.GraphViewPort.start_connection) {
            me.connectionFlow = null;
            me.fire('viewportconnectionflowclear', {});
        }
    },
    onConnectorClick: function (activezone) {
        var me = this;
        if (me.connectionFlow == null) {
            me.connectionFlow = {
                zone: activezone,
                state: MEPH.graph.GraphViewPort.start_connection
            }
            me.fire('startconnection', { zone: activezone });
        }
        else if (me.connectionFlow && me.connectionFlow.state === MEPH.graph.GraphViewPort.start_connection) {
            var connectionHandler = me.getConnectionHandler()
            if (connectionHandler) {
                if (MEPH.graph.ActiveZone.canCreateConnection(me.connectionFlow.zone, activezone)) {
                    var result = connectionHandler.createConnection([me.connectionFlow.zone, activezone]);
                    if (result) {
                        me.connectionFlow = null;
                        me.fire('viewportconnectionflowcomplete', {});
                    }
                }
            }
        }
    },
    createConnection: function (zones) {
        var me = this,
            connectionHandler = me.getConnectionHandler();
        if (connectionHandler) {
            return connectionHandler.createConnection(zones);
        }
        return null;
    },
    getConnectionHandler: function () {
        var me = this;
        return me.$connectionHandler;
    },
    setConnectionHandler: function (handler) {
        var me = this;
        me.$connectionHandler = handler;
        return me;
    },
    requestZone: function (node, options) {
        var activezone,
            me = this;
        activezone = me.getActiveZones().first(function (x) {
            return x.id == options.id;
        })
        if (!activezone) {
            activezone = new ActiveZone();
            activezone.setNode(node);
            activezone.setGraphViewPort(me);
            activezone.setZoneType(options.type);
            activezone.setOptions(options);
            switch (options.type) {
                case ActiveZone.type.color:
                    activezone.on('click', activezone.onColorZoneClick.bind(activezone));
                    activezone.on('change', me.onActiveZoneChange.bind(me));
                    activezone.clickable();
                    break;
                case ActiveZone.type.title:
                    activezone.on('click', activezone.onTitleZoneClick.bind(activezone));
                    activezone.clickable();
                    break;
                case ActiveZone.type.connector:
                    activezone.on('click', me.onConnectorClick.bind(me, activezone));
                    activezone.clickable();
                    break;
                case ActiveZone.type.select:
                    activezone.clickable();
                    break;
                case ActiveZone.type.header:
                    activezone.draggable();
                    break;
                case ActiveZone.type.custom:
                    break
            }
            activezone.on('activezone_dragstart', me.activeZoneDrag.bind(me, activezone, node));
            var dom = me.createZoneDom(options, node);
            activezone.setDom(dom);
            activezone.on('destroy', function (zone) {
                me.getActiveZones().removeWhere(function (x) { return x === zone; });
            });
            me.getActiveZones().push({
                zone: activezone,
                id: options.id
            });
            me.fire('newactivezone', { id: options.id, zone: activezone });
        }

        else {
            activezone = activezone.zone;
        }
        activezone.ignoreCanvas = me.ignoreCanvas;
        activezone.setPosition(options.x, options.y, 0);
        return activezone;
    },
    activeZoneDrag: function (activezone, node, type, ee) {
        var me = this;
        Style.zIndex(me.getMask(), me.maskUpZIndex);

        if (!me.isDraggingNode) {
            me.setDragData(ee.evt);
            me.isDraggingNode = {
                activezone: activezone,
                node: node,
                startPos: node.getPosition()
            }
        }
    },
    addTemplate: function (selector) {
        var me = this;
        me.$templates.push(selector);
    },
    getTemplates: function () {
        var me = this;
        return me.$templates;
    },
    createZoneDom: function (options, graphnode) {
        var template,
            me = this,
            div = document.createElement('div'),
            dom;

        switch (options.type) {
            case ActiveZone.type.custom:
                template = options.template.selector;
                // me.getTemplates().first(function (x) { return x === options.template.selector; });
                if (template) {
                    dom = document.querySelector(template);
                    var newnode = dom.content.cloneNode(true);
                    div.classList.add('custom');
                    div.appendChild(newnode);
                    if (options.template) {
                        for (var i in options.template.style) {
                            div.style[i] = options.template.style[i];
                        }
                        if (options.template.promise && typeof (options.template.promise) === 'function') {
                            options.template.promise(div, newnode, graphnode);
                        }
                        if (options.template.handlers) {
                            for (var selector in options.template.handlers) {
                                var handlers = options.template.handlers[selector];
                                ConvertToList(div.querySelectorAll(selector))
                                    .foreach(function (item) {
                                        for (var evt in handlers) {
                                            item.addEventListener(evt, handlers[evt].bind(me, graphnode));
                                        }
                                    });
                            }
                        }
                    }
                }

                break;
            default:
                Style.width(div, options.width);
                Style.height(div, options.height);
                Style.backgroundColor(div, 'rgba(1,1,1,0)');
                Style.translate(div, options.x, options.y);
                Style.position(div, 'absolute');
                break;
        }
        return div;
    },
    getActiveZones: function () {
        var me = this;
        return me.$activeZones;
    },
    clear: function () {
        var me = this;
        me.getActiveZones().removeWhere(function () { return true; });
        me.getSelectedConnections().removeWhere(function () { return true; });
        me.getRenderer().clear();
    },
    setDock: function (dock) {
        var me = this;
        if (dock.style) {
            dock.style.overflow = 'hidden';
        }
        me.$dock = dock;
    },
    getCanvasBag: function () {
        var me = this;
        return me.getDock();
    },
    getDock: function () {
        var me = this;
        return me.$dock || null;
    },
    setCanvas: function (canvas) {
        var me = this;
        if (me.$canvas) {
            me.$canvas.parentNode.removeChild(me.$canvas);
        }
        me.$canvas = canvas;
        return me;
    },
    getCanvas: function () {
        var me = this;
        return me.$canvas;
    },
    applyMask: function (target) {
        var me = this,
            size = me.getCanvasSize();
        me.$mask = me.$mask || document.createElement('div');
        me.$mask.style.height = size.height + 'px';
        me.$mask.style.width = size.width + 'px';
        Style.zIndex(me.$mask, me.maskDownZIndex);
        me.$mask.style.position = 'absolute';
        (target || document.body).appendChild(me.$mask);
        me.$mask.addEventListener('mousedown', me.onMaskMouseDown.bind(me));
        me.$mask.addEventListener('mouseup', me.onMaskMouseUp.bind(me));
        me.$mask.addEventListener('mouseout', me.onMaskMouseOut.bind(me));
        me.$mask.addEventListener('mousemove', me.onMaskMouseMove.bind(me));
        me.$mask.addEventListener('dblclick', me.onDblClick.bind(me));
        me.$mask.addEventListener('click', me.onClick.bind(me));
        window.addEventListener('resize', function () {
            if (me.resizeTimout) {
                clearTimeout(me.resizeTimout);
            }
            me.resizeTimout = setTimeout(me.onResizeEvent.bind(me), me.resizeDelay);
        });
        me.on('startdrag', me.onStartDrag.bind(me));
        me.on('stopdrag', me.onStopDrag.bind(me));
        me.on('viewportmove', me.onViewPortMove.bind(me));
        me.on('nodedragging', me.onNodeDragging.bind(me));
        me.on('nodedragging', me.hoverConnection.bind(me));
    },
    getCenter: function () {
        var me = this, size;
        size = me.getCanvasSize();

        return {
            x: size.width / 2 + me.getPosition().x,
            y: size.height / 2 + me.getPosition().y,
        }
    },
    resize: function (size) {
        var me = this;
        if (me.holder) {
            size = size || Style.size(me.holder);
        }
        size = size || Style.windowSize();
        me.setCanvasSize(size);
        Style.width(me.getMask(), size.width);
        Style.height(me.getMask(), size.height);
        me.getRenderer().getCanvases().foreach(function (x) {
            Style.width(x, size.width);
            Style.height(x, size.height);
        });
    },
    onResizeEvent: function () {
        var me = this;
        if (me.fullwindow) {
            var size = Style.windowSize();
            me.setCanvasSize(Style.windowSize());
            Style.width(me.getMask(), size.width);
            Style.height(me.getMask(), size.height);
            me.getRenderer().getCanvases().foreach(function (x) {
                Style.width(x, size.width);
                Style.height(x, size.height);
            });
        }
    },
    onViewPortMove: function (type, ee) {
        var me = this;
        var xy = me.getXY(ee);
        var relPos = me.calculateRelativePosition(xy.x, xy.y);
        me.setDragData(ee);
        me.setPosition(me.dragdata.startPos.x + relPos.x, me.dragdata.startPos.y + relPos.y, 0);
    },
    hoverConnection: function (type, ee) {
        var me = this;
        var connection = me.getGraph().getConnections().minSelect(function (connection) {
            return connection.distanceFrom(ee)
        });
        if (connection) {
            if (connection.distanceFrom(ee) < me.maxSelectionDistance) {
                var xy = me.getXY(ee);
                me.fire('nodeoverconnection', {
                    node: me.isDraggingNode.node,
                    connection: connection,
                    xy: xy
                });
            }
        }
    },
    onNodeDragging: function (type, ee) {
        var me = this;
        var node = me.isDraggingNode.node;
        var xy = me.getXY(ee);
        var dragdata = me.dragdata;

        var relPos = { x: xy.x - dragdata.x, y: xy.y - dragdata.y };
        node.setPosition(me.isDraggingNode.startPos.x + relPos.x, me.isDraggingNode.startPos.y + relPos.y, 0);
    },
    getXY: function (ee) {
        var me = this,
            offset = { x: 0, y: 0 },
            currentTarget = ee.currentTarget;
        //if (currentTarget) {
        //    offset = Style.getOffset(ee.currentTarget, me.getMask());
        //}
        return {
            x: ((ee.pageX !== undefined ? ee.pageX : ee.x) || 0) + offset.x,
            y: ((ee.pageX !== undefined ? ee.pageY : ee.y) || 0) + offset.y
        }
    },
    selectionConnection: function (connection) {
        var me = this;
        if (me.getSelectedConnections().first(connection)) {
            me.removeSelectedConnection(connection);
            connection.fire('unselected', connection);
        }
        else {
            me.addSelectedConnection(connection);
            connection.fire('selected', connection);
        }
    },
    addSelectedConnection: function (connection) {
        var me = this;
        me.$selectedConnections.push(connection);
    },
    removeSelectedConnections: function () {
        var me = this;
        var result = me.getSelectedConnections().select(function (x) { return x; }).foreach(function (x) {
            me.removeSelectedConnection(x);
        });
        return result;
    },
    removeSelectedConnection: function (connection) {
        var me = this;
        me.getSelectedConnections().removeWhere(function (x) { return x === connection; });
    },
    getSelectedConnections: function () {
        var me = this;
        return me.$selectedConnections;
    },
    calculateRelativePosition: function (x, y) {
        var me = this;
        if (me.dragdata) {
            return { x: x - me.dragdata.x, y: y - me.dragdata.y };
        }
        return { x: 0, y: 0 };
    },
    onStartDrag: function (type, ee) {
        var me = this;
        if (!me.cancelDragging && !me.noViewPortDrag) {
            me.isDragging = true;
            me.setDragData(ee);
            Style.zIndex(me.$mask, me.maskUpZIndex);
        }
    },
    setDragData: function (ee) {
        var me = this;
        me.dragdata = me.dragdata || {};
        var xy = me.getXY(ee);
        me.dragdata.startPos = me.getPosition();
        me.dragdata.x = xy.x;
        me.dragdata.y = xy.y;
    },
    getMousePosition: function () {
        var me = this;
        return me.mousePosition || { x: 0, y: 0 };
    },
    maskDomPosition: function () {
        var me = this;
        var pos = Style.getOffset(me.getMask(), null);
        return pos;
    },
    onActiveZoneChange: function () {
        var me = this;
        me.fire('change', {});
    },
    onMaskMouseMove: function (ee) {
        var me = this;
        me.calculateMousePosition(ee);
        if (me.isDragging) {
            me.fire('viewportmove', ee);
        }
        else if (me.isDraggingNode) {
            me.fire('nodedragging', ee);
        }
        else if (me.connectionFlow) {
            me.fire('viewportconnectionflow', ee);
        }
        else {
            me.fire('mousemove', ee);
        }
    },
    calculateMousePosition: function (ee) {
        var me = this;
        var xy = me.getXY(ee);
        var dompos = me.maskDomPosition();
        var pos = me.getPosition();
        me.mousePosition = {
            x: xy.x - dompos.x,
            y: xy.y - dompos.y
        };

    },
    onMaskMouseOut: function (ee) {
        var me = this;
        if (me.isDragging) {
            me.isDragging = false;
            me.dragdata = null;
            me.fire('canceldrag', ee);
        }
    },
    onStopDrag: function (type, ee) {
        var me = this;
        if (me.isDragging) {
            me.isDragging = false;
            me.fire('stopdrag', ee);
            me.handleBoundaries();
        }
    },
    handleBoundaries: function () {
        var me = this,
            targetx,
            targety,
            position;

        if (me.boundaries) {
            position = me.getPosition();
            if (me.boundaries.xmin > position.x) {
                targetx = me.boundaries.xmin;
            }
            else if (me.boundaries.xmax < position.x) {
                targetx = me.boundaries.xmax;
            }

            if (me.boundaries.ymin > position.y) {
                targety = me.boundaries.ymin;
            }
            else if (me.boundaries.ymax < position.y) {
                targety = me.boundaries.ymax;
            }

            me.animateBoundary(targetx, targety);
        }
    },
    animateBoundary: function (x, y) {
        var me = this,
            position = me.getPosition();
        x = x === undefined ? position.x : x;
        y = y === undefined ? position.y : y;
        me.setPosition(x, y, 0);

    },
    onMaskMouseDown: function (ee) {
        var me = this;
        if (!me.isDragging) {
            me.fire('startdrag', ee);
        }
    },
    onMaskMouseUp: function (ee) {
        var me = this;
        if (me.isDragging || me.isDraggingNode) {
            me.dragdata = null;
            me.isDraggingNode = null;
            Style.zIndex(me.$mask, me.maskDownZIndex);
            me.fire('stopdrag', ee);
        }
    },
    getMask: function () {
        var me = this;
        return me.$mask;
    },
    getCanvasSize: function () {
        var me = this,
            canvas = me.getCanvas();
        return {
            height: canvas.height,
            width: canvas.width
        }
    },
    setCanvasSize: function (args) {
        var me = this,
            canvas = me.getCanvas();
        Style.height(canvas, args.height);
        Style.width(canvas, args.width);
    }
});
﻿describe("MEPH/audio/graph/node/BiquadFilter.spec.js", 'MEPH.audio.graph.node.BiquadFilter', function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create a BiquadFilter node', function () {
        var BiquadFilter = new MEPH.audio.graph.node.BiquadFilter();

        expect(BiquadFilter).toBeTruthy();
    });

    it('has buffer and normalize inputs ', function () {
        var BiquadFilter = new MEPH.audio.graph.node.BiquadFilter();

        var buffer = BiquadFilter.nodeInputs.some(function (x) { return x.name === 'q' });
        var normalize = BiquadFilter.nodeInputs.some(function (x) { return x.name === 'frequency' });

        expect(BiquadFilter.nodeInputs.some(function (x) { return x.name === 'gain' })).toBeTruthy();
        expect(BiquadFilter.nodeInputs.some(function (x) { return x.name === 'type' })).toBeTruthy();
        expect(BiquadFilter.nodeInputs.some(function (x) { return x.name === 'buffer' })).toBeTruthy();
        expect(BiquadFilter.nodeInputs.some(function (x) { return x.name === 'detune' })).toBeTruthy();
        expect(buffer).toBeTruthy();
        expect(normalize).toBeTruthy();
    })

    it('has buffer and normalize inputs ', function () {
        var BiquadFilter = new MEPH.audio.graph.node.BiquadFilter();

        var output = BiquadFilter.nodeOutputs.some(function (x) { return x.name === 'buffer' });

        expect(output).toBeTruthy();
    })
});﻿/**
 * @class MEPH.control.Control
 * Defines a base class for all controls and views.
 **/
MEPH.define('MEPH.control.Control', {
    requires: ['MEPH.dom.ControlLoader',
                'MEPH.mixins.Referrerable',
                'MEPH.util.Dom',
                'MEPH.mixins.Injections',
                'MEPH.mobile.services.MobileServices',
                'MEPH.util.Observable',
                'MEPH.util.Style',
               'MEPH.mixins.Observable'],
    mixins: {
        observable: 'MEPH.mixins.Observable',
        referrerable: 'MEPH.mixins.Referrerable',
        injectable: 'MEPH.mixins.Injections'
    },
    statics: {
        operations: {
            inject: 'inject'
        },
        connectables: {
            control: 'control',
            view: 'view',
            presenter: 'presenter',
            viewmodel: 'viewmodel',
            model: 'model',
            controller: 'controller',
            html: 'html',
            self: 'self',
            subcontrol: 'subcontrol'
        }
    },
    properties: {
        $subscriptions: null,
        $listOfTransferableAttributes: null,
        $domTemplate: null,
        $controls: null,
        loaded: false,
        afterloaded: false,
        $referenceConnections: null,
        application: null,
        instanceTemplate: null,
        $uniqueId: null,
        injectControls: null,
        $window: null,
        $removeHomePageCls: 'meph-view-remove',
        applicationLoaded: false,
        $isDestroyed: false,
        data: null,
        componentCls: null,
        $autoBindProperties: null,
        id: null
    },
    initialize: function () {
        var me = this;
        me.$controls = [];
        me.$autoBindProperties = [];
        me.$listOfTransferableAttributes = [];
        me.mixins.referrerable.init.apply(me);
        me.mixins.observable.init.apply(me);
        me.mixins.injectable.init.apply(me);
        me.$referenceConnections = MEPH.Array([{
            type: MEPH.control.Control.connectables.control, obj: me
        }]);
        me.$subscriptions = [];

        me.addTransferableAttribute('MEPHId', {
            object: me,
            path: 'id'
        });

        me.on('setinstancetemplate', me.handleInstanceTemplate.bind(me));
        me.on('setdomtemplate', me.handleDomTemplate.bind(me));
        me.on('load', me.setLoadProperties.bind(me));
        me.on('afterload', me.setAfterLoadedProperties.bind(me));
        me.on('load', me.initDataBinding.bind(me));
        me.on('load', me.applyTransferableAttribute.bind(me));
        me.on('load', me.onLoaded.bind(me));

        //if (me.injections) {
        //    me.$inj = {};
        //    Promise.all(me.injections.select(function (injection) {
        //        return MEPH.MobileServices.get(injection).then(function (provider) {
        //            me.$inj[injection] = provider;
        //        });
        //    })).then(function () {
        //        me.onInjectionsComplete();
        //    });
        //}
    },
    broadCast: function (arg1, arg2) {
        var me = this;

        MEPH.publish(arg1, arg2);
    },
    getTemplateEl: function (tep) {
        var form = MEPH.getTemplate(tep);
        var el = MEPH.util.Dom.createCenteredElement();
        el.innerHTML = form.template;
        return el;
    },

    /**
     * Gets the properties that will be automatically bound.
     * @returns {Array}
     **/
    getAutoBindProperties: function () {
        //[{ property: 'customAttr', path: 'p$. isValidatable.value', autoProperty: 'invalid' }];
        var me = this;
        return me.$autoBindProperties;
    },
    /**
     * Adds auto property to be bound on the existence of the property.
     * @param {string} property
     * @param {String} autoProperty
     * @param {String} append
     */
    addAutoBindProperty: function (property, autoProperty) {
        var me = this;
        me.getAutoBindProperties().push({
            property: property,
            autoProperty: autoProperty
        });
    },
    getAutoBindPropertyPath: function (path) {
        return path;
    },
    setLoadProperties: function () {
        var me = this;
        me.loaded = true;
    },
    setAfterLoadedProperties: function () {
        var me = this;
        me.afterloaded = true;
    },
    onLoaded: function () { },
    /**
     * Gets list of attributes thta will transfer
     **/
    getListOfTransferableAttributes: function () {
        var me = this;
        return me.$listOfTransferableAttributes;
    },
    /**
     * Adds attributes and configurations.
     * @param {String} attributeName
     * @param {Object} attributeOptions
     * @param {Object} attributeOptions.selector
     **/
    addTransferableAttribute: function (attributeName, attributeOptions) {
        var me = this;
        if (!me.getListOfTransferableAttributes().some(function (x) { return x.name === attributeName; })) {
            me.getListOfTransferableAttributes().push({ name: attributeName, options: attributeOptions });
        }
    },
    subscription: function (id) {
        var me = this;
        me.$subscriptions.push(id);
    },
    /**
     * @private
     * Transfers values to the dom template.
     **/
    applyTransferableAttribute: function () {
        var me = this, isShortCut,
            type;
        MEPH.Array(me.getInstanceTemplate().attributes).select(function (prop) { return prop.name; }).foreach(function (prop) {
            var prefix = MEPH.getDataBindPrefixes().first(function (x) {
                return prop.indexOf(x + MEPH.bindPrefixDelimiter) !== -1;
            });
            if (prefix) {
                prefix += MEPH.bindPrefixDelimiter;
                var path = prop.substring(prefix.length, prop.length);
                me.addTransferableAttribute(path, {
                    object: me,
                    path: path
                });
            }
        })
        me.getListOfTransferableAttributes().foreach(function (transferrableConfig) {
            var value = me.getInstanceTemplate().getAttribute(transferrableConfig.name);

            if (value === null || value === undefined) {
                value = MEPH.getDataBindPrefixes().selectFirst(function (x) {
                    return me.getInstanceTemplate().getAttribute(x + MEPH.bindPrefixDelimiter + transferrableConfig.name);
                });
            }

            if (value !== null) {
                me.getDomTemplate().where(function (x) { return x.nodeType === Dom.elementType; }).foreach(function (dom) {
                    var options = transferrableConfig.options;
                    if (options.selector) {
                        if (dom.parentNode) {
                            MEPH.Array(dom.parentNode.querySelectorAll(options.selector)).where(function (otherdom) {
                                return otherdom == dom;
                            }).foreach(function (subdom) {
                                subdom.setAttribute(transferrableConfig.name, value)
                            });
                        }
                        MEPH.Array(dom.querySelectorAll(options.selector)).foreach(function (subdom) {
                            subdom.setAttribute(transferrableConfig.name, value)
                        });
                    }
                    else if (options.object && options.path) {
                        isShortCut = false;
                        if (value) {
                            type = MEPH.Array(value.split(MEPH.pathDelimiter)).first();

                            if (MEPH.getBindPrefixShortCut(type)) {
                                isShortCut = true
                            }
                        }
                        if (!isShortCut) {
                            MEPH.setPathValue(options.object, options.path, value);
                        }
                    }
                });
            }
        });
    },
    /**
     * Sets the unique id.
     * @param {String} id
     **/
    setUniqueId: function (id) {
        var me = this;
        me.$uniqueId = id;
    },
    /**
     * Gets the unique id.
     * @returns {String}
     */
    getUniqueId: function () {
        var me = this;
        return me.$uniqueId;
    },
    /**
     * Adds a sub control to the internal list of controls.
     * @param {MEPH.control.Control} subcontrol
     **/
    addSubControl: function (subcontrol) {
        var me = this;
        me.$controls.push(subcontrol);
    },
    /**
     * Gets the sub cnotrols.
     * @returns {Array}
     **/
    getSubControls: function () {
        var me = this;
        return me.$controls;
    },
    initDataBinding: function () {
        var me = this;
        me.getReferenceConnections().where(function (x) { return x.creator; }).foreach(function (x) {
            if (x.obj[MEPH.isObservablePropertyKey]) {
                x.obj.fire('altered', { path: '', references: [] });
            }
        });
    },
    initComponent: function () {
    },
    /**
     * Handles the instance template.
     * @returns {Promise}
     **/
    handleInstanceTemplate: function () {
        var promise = Promise.resolve();
        return promise;
    },
    filterEvents: function (template) {
        var srcelement = MEPH.Array(arguments).last().domEvent.srcElement;
        return !!MEPH.util.Dom.isDomDescendant(srcelement, template);
    },
    cancelEvent: function () {
        var evntArgs = MEPH.util.Array.convert(arguments).last();
        evntArgs.domEvent.preventDefault();
        evntArgs.domEvent.cancelBubble = true;
        evntArgs.domEvent.stopPropagation();
        evntArgs.domEvent.cancelled = true;
        console.log('cancel event')
        return false;
    },
    handleDomTemplate: function () {
        var me = this,
            nodes, out = {},
            template;

        if (me.injectControls) {
            template = me.getInstanceTemplate();
            if (template) {
                nodes = MEPH.Array(MEPH.Array(template.childNodes).select(function (x) { return x; }).reverse()).foreach(function (x) {
                    var comment = me.getLocationForInjection(me.injectControls, x, out);
                    if (out.childrenOnly) {
                        MEPH.Array(MEPH.Array(x.childNodes).select(function (x) { return x; }).reverse()).foreach(function (child) {
                            Dom.insertBefore(comment, child);
                        });
                    }
                    else {
                        Dom.insertBefore(comment, x);
                    }
                });
            }
        }
    },
    /**
     * @private
     */
    setControlObject: function (controlobject) {
        var me = this;
        me.$controlobject = controlobject;
    },
    /**
     * @private
     */
    getControlObject: function () {
        var me = this;
        return me.$controlobject;
    },
    /**
     * @param {MEPH.control.Control} control
     * @param {Object} dom
     **/
    loadSubControl: function (control, dom) {
        var me = this;
        return me.application.loadSubControls([control.getControlObject()])
    },
    /**
     * Executes the view transitions.
     * @param {Object} view 
     * @param {Object} options
     * @param {String} options.remove
     * @param {String} options.add
     * @returns {Promise}
     **/
    viewTransition: function (view, options) {
        var me = this;
        return new Promise(function (resolve, fail) {
            var timoutRef,
                animationComplete = function () {
                    clearTimeout(timoutRef);
                    me.dun(me, 'webkitTransitionEnd');
                    me.dun(me, 'transitionend');
                    resolve();
                };
            me.don('webkitTransitionEnd', view, animationComplete);
            me.don('transitionend', view, animationComplete);
            if (options.maxTime || MEPH.MaxTransitionTime) {
                timoutRef = setTimeout(animationComplete, options.maxTime || MEPH.MaxTransitionTime);
            }
            if (options.remove) {
                MEPH.Array(options.remove.split(' ')).foreach(function (remove) {
                    view.classList.remove(remove);
                });
            }
            if (options.add) {
                MEPH.Array(options.add.split(' ')).foreach(function (add) {
                    view.classList.add(add);
                });
            }
        });
    },
    /**
     * Gets teh location for injecfion of the node.
     * @param {Object} injectionInstructions
     * @param {Object} injectionInstructions.location
     * @returns {Object} 
     **/
    getLocationForInjection: function (injectionInstructions, node, out) {
        var me = this,
            name = node.nodeName.toLowerCase(),
            commentName,
            template;

        if (injectionInstructions.location && typeof injectionInstructions.location === 'string') {
            template = me.getDomTemplate();
            comment = me.getCommentByName(template, injectionInstructions.location);
            return comment;
        }
        else if (injectionInstructions.location && typeof injectionInstructions.location === 'object') {
            template = me.getDomTemplate();
            commentName = injectionInstructions.location[name];
            comment = me.getCommentByName(template, commentName);
            if (out) {
                out.childrenOnly = true;
            }
            return comment
        }
        return null;
    },
    /**
     * Sets the dom template instance.
     * @param {Object} dom
     **/
    setDomTemplate: function (dom) {
        var me = this;
        me.$domTemplate = MEPH.Array(dom);
    },
    /**
     * Gets the dom template for the instance.
     **/
    getDomTemplate: function () {
        var me = this;
        return me.$domTemplate;
    },
    getFirstElement: function () {
        var me = this;
        return me.getDomTemplate().first(function (x) { return x.nodeType === Dom.elementType; });
    },
    /**
     * Gets the dom elements which meet the selector specification.
     * @param {String} selector
     * @returns {Array}
     **/
    querySelectorAll: function (selector) {
        var me = this;
        return (me.getDomTemplate()).select(function (x) {
            var result = [],
                dom = x;

            if (dom.parentNode) {
                MEPH.Array(dom.parentNode.querySelectorAll(selector)).where(function (otherdom) {
                    return otherdom === dom;
                }).foreach(function (subdom) {
                    if (subdom) {
                        result.push(subdom);
                    }
                });
            }
            if (x.nodeType === Dom.elementType) {
                MEPH.Array((x.querySelectorAll(selector))).foreach(function (x) {
                    if (x) {
                        result.push(x);
                    }
                });

            }
            return result;
        }).concatFluentReverse(function (x) { return x; });
    },
    hide: function () {
        var me = this;
        me.getDomTemplate().foreach(function (t) {
            if (t) {
                Style.hide(t);
            }
        })
    },
    show: function () {
        var me = this;
        me.getDomTemplate().foreach(function (t) {
            if (t) {
                Style.show(t);
            }
        })
    },
    /**
     * Gets the dom element which meet the selector specification.
     * @param {String} selector
     * @returns {Object}
     **/
    querySelector: function (selector) {
        var me = this;
        return (me.getDomTemplate()).selectFirst(function (x) {
            var temp,
                dom = x;

            if (x.nodeType === Dom.elementType) {
                temp = x.querySelector(selector);
                if (temp) {
                    return temp;
                }
            }
            if (dom.parentNode) {
                return MEPH.Array(dom.parentNode.querySelectorAll(selector)).first(function (otherdom) {
                    return otherdom === dom;
                })
            }
            return null;
        });
    },
    /**
     * Renders a control.
     * @param {String} classifiedName
     * @param {Object} dom
     * @param {MEPH.control.Control} parent
     * @param {Object} attributes
     * @returns {Promise}
     **/
    renderControl: function (classifiedName, dom, parent, attributes, injections) {
        var me = this, template,
            application;

        application = me.getApplication();
        if (application) {
            template = MEPH.createTemplateNode(classifiedName);
            if (template && template.node && attributes) {
                for (var i in attributes) {
                    template.node.setAttribute(i, attributes[i]);
                }
            }
            template.injections = injections || null;
            return application.loadViewObject([template], dom, parent);
        }

        return Promise.resolve().then(function () {
            throw new Error('application is not present');
        });
    },
    /**
     * Returns true if the control has been destroyed.
     **/
    isDestroyed: function () {
        var me = this;
        return me.$isDestroyed;
    },
    /**
     * Destroys the control.
     */
    destroy: function () {
        var me = this, i,
               domTemplaate = me.getDomTemplate();
        if (me.$isDestroyed) {
            return;
        }
        me.fire('beforedestroy', me);
        if (!Array.isArray(domTemplaate)) {
            domTemplaate = ([domTemplaate]);
        }
        MEPH.Array(domTemplaate);
        me.$controls.removeWhere(function (control) {
            control.destroy();
            return true;
        });
        me.$isDestroyed = true;
        domTemplaate.foreach(function (x) {
            if (x && x.parentNode && x.parentNode.removeChild) {
                x.parentNode.removeChild(x);
            }
        });
        me.fire('destroy', me);
        for (i in me) {
            if (MEPH.IsEventable(me[i])) {
                me[i].un(null, me);
            }
        }
        me.$referenceConnections.foreach(function (x) {
            if (MEPH.IsEventable(x)) {
                x.obj.un(null, me);
                x.obj.dun(null, me);
            }
        });

        MEPH.unsubscribe(me.$subscriptions);

        me.un();
        me.dun();
    },

    /**
     * Combines the clsProperties into the new property.
     * @param {String} property
     * @param {Array} clsProperties
     */
    combineClsIntoDepenendProperty: function (property, clsProperties) {
        var me = this;
        MEPH.util.Observable.defineDependentProperty(property, me, clsProperties, function (clsProperties) {
            var result = [];
            MEPH.Array(clsProperties).foreach(function (prop) {
                if (me[prop]) {
                    result.push(me[prop]);
                }
            })
            return result.join(' ');
        }.bind(me, clsProperties));
    },

    getApplication: function () {
        var me = this;
        return me.application;
    },
    /**
     * @private
     * Sets the application of the control
     * @param {MEPH.application.Application} application
     **/
    setApplication: function (application) {
        var me = this;
        me.application = application;
        me.application.on(MEPH.Constants.applicationReady, function () {
            me.applicationLoaded = true;
        });
        //me.fire('altered', { path: 'application', references: [me] });
    },


    /**
     * Gets the template associated with this control.
     **/
    getTemplates: function () {
        var me = this;
        return MEPH.Array(me.templates);
    },
    /**
     * Creates a new instance of the templates array.
     **/
    uniqueTemplates: function () {
        var me = this;
        me.templates = me.templates.select();
    },
    /**
     * Adds a template to the list.
     **/
    addTemplate: function (classifiedName) {
        var me = this;
        me.templates.push(classifiedName);
    },
    getBindableProperties: function () {

    },
    toggleBoolean: function (data, prop) {
        var me = this;
        data[prop] = !!!data[prop];
    },

    /**
     * Generates a dom object from the templates.
     */
    generateDomTemplate: function () {
        var me = this,
            instructions,
            dom;
        //return Promise.resolve().then(function () {
        instructionGroups = me.getOrdereredConstructionInstructions();
        instructionGroups.foreach(function (instructionGroup) {
            if (me.hasInstructions(instructionGroup)) {
                //apply instructions to dom
                MEPH.util.Array.create(instructionGroup.instructions).foreach(function (instruction) {
                    me.applyInstructionGroup(dom, instruction);
                });
            }
            else {
                //set dom to template./
                //Base templates/classes shouldnt have instructions.
                //At least not right now.
                dom = MEPH.dom.ControlLoader.getUnattachedDiv();
                MEPH.util.Array.create(instructionGroup.nodes).foreach(function (node) {
                    dom.appendChild(node);
                });
            }
        });
        return dom;
        //  });
    },
    /**
     * Gets generated template dom.
     * @returns {Promise}
     **/
    getGeneratedTemplateDom: function () {
        //var me = this;
        //return me.generateDomTemplate().then(function (dom) {
        //    return Promise.resolve().then(function () {
        //        return me.getTemplateDom(dom);
        //    });
        //});
        var dom,
            me = this;
        dom = me.generateDomTemplate();
        //.then(function (dom) {
        //    return Promise.resolve().then(function () {
        return me.getTemplateDom(dom);
        //    });
        //});
    },
    /**
     * Generates an attached div.
     * @returns {Object}
     */
    getUnattachedDiv: function () {
        return document.createElement('div');
    },
    /**
     * Gets the dom nodes of the template.
     * @param {Object} templateInfo
     * @param {String} templateInfo.template
     **/
    getTemplateDom: function (domtemplate) {
        var me = this,
    div, nodes;

        div = me.getUnattachedDiv()
        div.appendChild(domtemplate);
        nodes = MEPH.util.Array.convert(domtemplate.childNodes);

        return nodes;
    },
    /**
     * Gets the dom objects to bind.
     */
    getDomObjectsToBind: function (domTemplate) {
        var me = this,
            promise,
            aliases = MEPH.getAllAliases(),
            dataBindPrefixes = MEPH.getDataBindPrefixes();
        promise = Promise.resolve().then(function () {
            return dataBindPrefixes.concatFluentReverse(function (x) {
                return MEPH.util.Array.convert(domTemplate.querySelectorAll('[' + x + ']'));
            }).unique(function (x) {
                return x;
            });
        });
        return promise;
    },
    /**
     * Sets the instance template.
     * @param {Array} nodes;
     **/
    setInstanceTemplate: function (nodes) {
        var me = this;
        me.instanceTemplate = nodes;
    },
    getInstanceTemplate: function () {
        var me = this;
        return me.instanceTemplate || null;
    },
    /**
     * Apply instructions to dom object.
     * @param {Object} dom
     * @param {Object} instructionGroup
     **/
    applyInstructionGroup: function (dom, instruction) {
        var me = this,
            instructionGroup = instruction.startGroupComment
        control = MEPH.control.Control;
        switch (instructionGroup.operation) {
            case control.operations.inject:
                return me.injectDom(dom, instruction.startGroupComment, instruction.domObjects);
            default:
                return false;
        }
    },
    /**
     * Inject dom objects into the dom.
     * @param {Object} dom
     * @param {Object} instructionGroup
     * @param {Array} domObjects
     **/
    injectDom: function (dom, instructionGroup, domObjects) {
        var me = this, Dom = MEPH.util.Dom,
            parsedComment,
            comments;

        MEPH.Array(domObjects);
        //comments = MEPH.util.Array.convert(Dom.getComments(dom));
        //comment = comments.first(function (comment) {
        //    var parsedComment = Dom.tryParse(comment);
        //    if (parsedComment && parsedComment.name === instructionGroup.position) {
        //        return comment;
        //    }
        //    return false;
        //});
        comment = me.getCommentByName(dom, instructionGroup.position);
        if (comment) {
            parsedComment = Dom.tryParse(comment);
            domObjects.foreach(function (domObject) {
                if (instructionGroup.before) {
                    Dom.insertBefore(comment, domObject);
                }
                else {
                    Dom.insertAfter(comment, domObject);
                }
            });
            return true;
        }
        return false;
    },
    getCommentByName: function (dom, name) {
        var me = this, Dom = MEPH.util.Dom,
           parsedComment,
           comments;

        comments = MEPH.util.Array.convert(Dom.getComments(dom));
        comment = comments.first(function (comment) {
            var parsedComment = Dom.tryParse(comment);
            if (parsedComment && parsedComment.name === name) {
                return comment;
            }
            return false;
        });
        return comment;
    },
    /**
     * If a template has instructions, it returns true else false.
     * @param {String} template
     */
    hasInstructions: function (templateGroup) {
        var me = this;
        return templateGroup.instructions.length > 0;
    },
    /**
     * Gets template instructions.
     * @param {String} template
     */
    getTemplateInstructions: function (template) {
        var me = this,
            result = MEPH.util.Array.create(),
            childNodes,
            templateInfo;

        templateInfo = MEPH.getDefinedTemplate(template);
        childNodes = MEPH.dom.ControlLoader.getTemplateDom(templateInfo);

        return {
            instructions: me.getCommentGroups(childNodes),
            nodes: childNodes,
            template: template
        };
    },
    /**
     * Extracts the dom and instructions requir ed to create the final dom element.
     */
    getOrdereredConstructionInstructions: function () {
        var me = this,
            result;
        result = MEPH.util.Array.create(me.getTemplates()).select(me.getTemplateInstructions.bind(me));
        return result;
    },
    /**
     * Gets the dom objects group withing comments.
     * @param {Array} orderedNodes
     **/
    getCommentGroups: function (orderedNodes) {
        var me = this,
            Dom = MEPH.util.Dom,
            result = MEPH.util.Array.create(),
            parsedResult,
            group = null;
        orderedNodes.foreach(function (node, index) {

            if (group === null) {
                group = {
                    domObjects: MEPH.util.Array.create(),
                    start: null,
                    end: null
                };
            }

            if (Dom.isComment(node)) {
                parsedResult = Dom.tryParse(node);
                if (parsedResult && parsedResult.instruction) {
                    if (parsedResult.close) {
                        if (group.start === null) {
                            throw 'Incorrect template format: close without a matching start.';
                        }
                        group.end = true;
                        group.endGroupComment = parsedResult;
                        result.push(group);
                        group = null;
                    }
                    else {
                        if (group.start !== null) {
                            throw 'Incorrect template format: start has already been added';
                        }
                        group.start = true;
                        group.startGroupComment = parsedResult;
                    }
                }
            }
            else if (group === null) {
                //
            }
            else {
                group.domObjects.push(node);
            }
        });
        return result;
    }
});﻿/**
 * @class MEPH.audio.graph.node.WaveShaperNode
 * @extend MEPH.audio.graph.node.Node
 **/
MEPH.define('MEPH.audio.graph.node.WaveShaperNode', {
    extend: 'MEPH.audio.graph.node.Node',
    alias: 'waveshaper',
    templates: true,
    properties: {
        curveTitle: '',
        oversampleTitle: '',
        oversampletypes: null,
        oversamplevalue: null,
        curvevalue: null
    },
    initialize: function () {
        var me = this;

        me.nodecontrols = me.nodecontrols || [];
        me.nodecontrols.push('bufferoutput');
        me.nodecontrols.push('bufferinput');
        me.nodecontrols.push('curve');
        me.nodecontrols.push('oversample');

        me.great()


        me.nodeInputs.push(me.createInput('buffer', MEPH.audio.graph.node.Node.AudioBuffer));
        me.nodeInputs.push(me.createInput('curve', MEPH.audio.graph.node.Node.Number));
        me.oversampletypes = ['none', '2x', '4x'];
        me.nodeInputs.push(me.createInput('oversample', MEPH.audio.graph.node.Node.String, {
            values: me.oversampletypes.select()
        }));


        me.nodeOutputs.push(me.createOutput('buffer', MEPH.audio.graph.node.Node.AudioBuffer));
    },
    onLoaded: function () {
        var me = this;
        me.great()
        me.oversampletypes = me.oversampletypes.select()
        me.title = 'Wave Shaper';
        me.curveTitle = 'curve';
        me.oversampleTitle = 'oversample';
    }
});﻿/**
 * @class MEPH.audio.graph.node.PannerNode
 * @extend MEPH.audio.graph.node.Node
 **/
MEPH.define('MEPH.audio.graph.node.PannerNode', {
    extend: 'MEPH.audio.graph.node.Node',
    alias: 'panner',
    templates: true,
    properties: {
        coneInnerAngleTitle: '',
        coneOuterAngleTitle: '',
        coneOuterGainTitle: '',
        refDistanceTitle: '',
        rolloffFactorTitle: '',
        panningModelTitle: '',
        distanceModelTypes: null,
        panningModelvalue: null,
        rolloffFactorvalue: null,
        refDistancevalue: null,
        coneOuterGainvalue: null,
        coneOuterAnglevalue: null,
        coneInnerAnglevalue: null
    },
    initialize: function () {
        var me = this;

        me.nodecontrols = me.nodecontrols || [];
        me.nodecontrols.push('bufferoutput');
        me.nodecontrols.push('bufferinput');
        me.nodecontrols.push('coneInnerAngle');
        me.nodecontrols.push('coneOuterAngle');
        me.nodecontrols.push('coneOuterGain');
        me.nodecontrols.push('refDistance');
        me.nodecontrols.push('maxDistance');
        me.nodecontrols.push('rolloffFactor');
        me.nodecontrols.push('panningModel');

        me.great()

        me.nodeInputs.push(me.createInput('buffer', MEPH.audio.graph.node.Node.AudioBuffer));
        me.nodeInputs.push(me.createInput('coneInnerAngle', MEPH.audio.graph.node.Node.Number));
        me.nodeInputs.push(me.createInput('coneOuterAngle', MEPH.audio.graph.node.Node.Number));
        me.nodeInputs.push(me.createInput('coneOuterGain', MEPH.audio.graph.node.Node.Number));
        me.nodeInputs.push(me.createInput('refDistance', MEPH.audio.graph.node.Node.Number));
        me.nodeInputs.push(me.createInput('maxDistance', MEPH.audio.graph.node.Node.Number));
        me.nodeInputs.push(me.createInput('rolloffFactor', MEPH.audio.graph.node.Node.Number));
        me.nodeInputs.push(me.createInput('panningModel', MEPH.audio.graph.node.Node.String, {
            values: ['equalpower', 'HRTF']
        }));

        me.distanceModelTypes = ['linear', 'inverse', 'exponential'];
        me.nodeInputs.push(me.createInput('distanceModel', MEPH.audio.graph.node.Node.String, {
            values: me.distanceModelTypes.select()
        }));


        me.nodeOutputs.push(me.createOutput('buffer', MEPH.audio.graph.node.Node.AudioBuffer));
         
    },
    onLoaded: function () {
        var me = this;
        me.great()

        me.title = 'Panner';
        me.distanceModelTypes = me.distanceModelTypes.select();
        me.coneInnerAngleTitle = 'cone inner angle';
        me.coneOuterAngleTitle = 'cone outer angle';
        me.coneOuterGainTitle = 'cone outer gain';
        me.refDistanceTitle = 'ref distance';
        me.rolloffFactorTitle = 'rolloff factor';
        me.panningModelTitle = 'panning model';
    }
});﻿/**
 * @class MEPH.audio.graph.node.OscillatorNode
 * @extend MEPH.audio.graph.node.Node
 **/
MEPH.define('MEPH.audio.graph.node.OscillatorNode', {
    extend: 'MEPH.audio.graph.node.Node',
    alias: 'oscillator',
    templates: true,
    properties: {
        detuneTitle: '',
        frequencyTitle: '',
        typefieldTitle: '',
        typesource: null,
        detunevalue: null,
        frequencyvalue: null,
        typeinputvalue: null
    },
    initialize: function () {
        var me = this;

        me.nodecontrols = me.nodecontrols || [];
        me.nodecontrols.push('bufferoutput');
        me.nodecontrols.push('frequency');
        me.nodecontrols.push('detune');
        me.nodecontrols.push('typeinput');

        me.great()

        me.typesource = ['sine', 'square', 'sawtooth', 'triangle', 'custom'];
        me.nodeInputs.push(me.createInput('buffer', MEPH.audio.graph.node.Node.AudioBuffer));
        me.nodeInputs.push(me.createInput('detune', MEPH.audio.graph.node.Node.Number, { path: 'detune.value' }));
        me.nodeInputs.push(me.createInput('frequency', MEPH.audio.graph.node.Node.Number, { path: 'frequency.value' }));
        me.nodeInputs.push(me.createInput('type', MEPH.audio.graph.node.Node.String, {
            values: me.typesource.select()
        }));

        me.nodeOutputs.push(me.createOutput('buffer', MEPH.audio.graph.node.Node.AudioBuffer)); 
    },
    onLoaded: function () {
        var me = this;
        me.great()
        me.typesource = me.typesource.select();
        me.title = 'Oscillator';
        me.typefieldTitle = 'type';
        me.detuneTitle = 'detune';;
        me.frequencyTitle = 'frequency';
    }
});﻿/**
 * @class MEPH.audio.graph.node.AudioBufferSourceNode
 * @extend MEPH.audio.graph.node.Node
 **/
MEPH.define('MEPH.audio.graph.node.AudioBufferSourceNode', {
    extend: 'MEPH.audio.graph.node.Node',
    requires: ['MEPH.audio.Audio', 'MEPH.audio.AudioResources'],
    alias: 'audiobuffersource',
    templates: true,
    injections: ['audioResources'],
    properties: {
        loopTitle: 'Q',
        loopEndTitle: 'loop',
        loopStartTitle: 'detune',
        playbackRateTitle: 'gain',
        sourceTitle: '',
        sourcevalue: null,
        loopvalue: null,
        loopEndvalue: null,
        loopStartvalue: null,
        playbackRatevalue: null,
        audiobuffersources: null
    },
    initialize: function () {
        var me = this;
        me.nodecontrols = me.nodecontrols || [];
        me.nodecontrols.push('bufferoutput');
        me.nodecontrols.push('sourceinput');
        me.nodecontrols.push('loop');
        me.nodecontrols.push('loopEnd');
        me.nodecontrols.push('loopStart');
        me.nodecontrols.push('playbackRate');
        me.great()
        me.nodeInputs.push(me.createInput('source', MEPH.audio.graph.node.Node.String));
        me.nodeInputs.push(me.createInput('loop', MEPH.audio.graph.node.Node.Boolean));
        me.nodeInputs.push(me.createInput('loopEnd', MEPH.audio.graph.node.Node.Number));
        me.nodeInputs.push(me.createInput('loopStart', MEPH.audio.graph.node.Node.Number));
        me.nodeInputs.push(me.createInput('playbackRate', MEPH.audio.graph.node.Node.Number, { path: 'playbackRate.value' }));
        me.nodeOutputs.push(me.createOutput('buffer', MEPH.audio.graph.node.Node.AudioBuffer));
    },
    onResourcesUpdated: function () {
        var me = this;
        me.audiobuffersources = me.audiobuffersources || MEPH.util.Observable.observable([]);
        if (me.audiobuffersources)
            me.audiobuffersources.clear();
        if (me.$inj.audioResources) {
            me.audiobuffersources.push.apply(me.audiobuffersources, me.$inj.audioResources.getResources());
        }
    },
    onInjectionsComplete: function () {
        var me = this;
        me.onResourcesUpdated();
    },
    onLoaded: function () {
        var me = this;
        me.audiobuffersources = MEPH.util.Observable.observable([]);
        me.subscription(MEPH.subscribe(MEPH.audio.AudioResources.RESOURCE_MANAGER_UPDATE, me.onResourcesUpdated.bind(me)));
        me.onResourcesUpdated();
        me.great()
        me.title = 'Audio Buffer Source';
        me.hideConnector = true;
        me.sourceTitle = 'source';
        me.loopTitle = 'loop';
        me.loopEndTitle = 'loop end';
        me.loopStartTitle = 'loop start';
        me.playbackRateTitle = 'playback rate';
    }
});﻿/**
 * @class MEPH.audio.graph.node.GainNode
 * @extend MEPH.audio.graph.node.Node
 **/
MEPH.define('MEPH.audio.graph.node.GainNode', {
    extend: 'MEPH.audio.graph.node.Node',
    alias: 'gain',
    templates: true,
    properties: {
        gainTitle: '',
        gainvalue: null
    },
    initialize: function () {
        var me = this;

        me.nodecontrols = me.nodecontrols || [];
        me.nodecontrols.push('bufferoutput');
        me.nodecontrols.push('bufferinput');
        me.nodecontrols.push('gain');

        me.great()
        me.nodeInputs.push(me.createInput('buffer', MEPH.audio.graph.node.Node.AudioBuffer));
        me.nodeInputs.push(me.createInput('gain', MEPH.audio.graph.node.Node.Number, { path: 'gain.value' }));

        me.nodeOutputs.push(me.createOutput('buffer', MEPH.audio.graph.node.Node.AudioBuffer));
         
    },
    onLoaded: function () {
        var me = this;
        me.great()
        me.title = 'Gain';

        me.gainTitle = 'Volume';

    }

});﻿/**
 * @class MEPH.audio.graph.node.DynamicsCompressorNode
 * @extend MEPH.audio.graph.node.Node
 **/
MEPH.define('MEPH.audio.graph.node.DynamicsCompressorNode', {
    extend: 'MEPH.audio.graph.node.Node',
    alias: 'dynamicscompressor',
    templates: true,
    properties: {
        attackTitle: '',
        kneeTitle: '',
        ratioTitle: '',
        reductionTitle: '',
        releaseTitle: '',
        thresholdTitle: '',
        attackvalue: null,
        kneevalue: null,
        ratiovalue: null,
        reductionvalue: null,
        releasevalue: null,
        thresholdvalue: null
    },
    initialize: function () {
        var me = this;

        me.nodecontrols = me.nodecontrols || [];
        me.nodecontrols.push('bufferoutput');
        me.nodecontrols.push('bufferinput');
        me.nodecontrols.push('attack');
        me.nodecontrols.push('knee');
        me.nodecontrols.push('release');
        me.nodecontrols.push('ratio');
        me.nodecontrols.push('reduction');
        me.nodecontrols.push('threshold');

        me.great()
        me.nodeInputs.push(me.createInput('buffer', MEPH.audio.graph.node.Node.AudioBuffer));
        me.nodeInputs.push(me.createInput('attack', MEPH.audio.graph.node.Node.Number, { path: 'attack.value' }));
        me.nodeInputs.push(me.createInput('knee', MEPH.audio.graph.node.Node.Number, { path: 'knee.value' }));
        me.nodeInputs.push(me.createInput('ratio', MEPH.audio.graph.node.Node.Number, { path: 'ratio.value' })); 
        me.nodeInputs.push(me.createInput('reduction', MEPH.audio.graph.node.Node.Number, { path: 'reduction.value' }));
        me.nodeInputs.push(me.createInput('release', MEPH.audio.graph.node.Node.Number, { path: 'release.value' }));
        me.nodeInputs.push(me.createInput('threshold', MEPH.audio.graph.node.Node.Number, { path: 'threshold.value' }));

        me.nodeOutputs.push(me.createOutput('buffer', MEPH.audio.graph.node.Node.AudioBuffer)); 
    },
    onLoaded: function () {
        var me = this;
        me.title = 'Dynamics Compressor';
        me.attackTitle = 'attack';
        me.kneeTitle = 'knee';
        me.ratioTitle = 'ratio';
        me.reductionTitle = 'reduction';
        me.releaseTitle = 'release';
        me.thresholdTitle = 'threshold';
        me.great()
    }
});﻿/**
* @class MEPH.graph.SVGGraphRenderer
*/
MEPH.define('MEPH.graph.SVGGraphRenderer', {
    requires: ['MEPH.util.Observable'],
    statics: {
        graphtemplates: null
    },
    extend: 'MEPH.graph.GraphRenderer',
    initialize: function () {
        var me = this;
        me.great()
        MEPH.graph.SVGGraphRenderer.graphtemplates = [];
    },
    clearCanvas: function (canvas) {
        var context;
        if (canvas && canvas.getContext) {
            context = canvas.getContext('2d');
            context.clearRect(0, 0, canvas.width, canvas.height);
        }
    },
    setViewPort: function () {
        var me = this;
        me.great()

        me.$viewport.on('viewportconnectionflowcomplete', me.onFlowClear.bind(me));
        me.$viewport.on('viewportconnectionflowclear', me.onFlowClear.bind(me));
    },
    onFlowClear: function () {
        var me = this;
        var connectionRenderer = me.getConnectionRenderer();
        if (connectionRenderer) {
            connectionRenderer.clearFlow();
        }
    },
    generateCanvas: function (bucket, isconnectioncanvas) {
        var me = this;//,
        //canvas = document.createElement('svg');

        //var viewportsize = me.getViewPort().getCanvasSize();
        //bucket = bucket || me.getCanvasBag();
        //bucket.appendChild(canvas);
        //canvas.height = viewportsize.height;
        //canvas.width = viewportsize.width;
        //canvas.style.position = 'absolute';
        //if (me.createdCanvas) {
        //    canvas.style.zIndex = isconnectioncanvas ? me.connectionCanvasZIndex : 1;
        //}
        //else
        //    canvas.style.zIndex = isconnectioncanvas ? me.connectionCanvasZIndex : 1;
        //me.createdCanvas = true;
        //me.$canvases.push(canvas);

        return me.getViewPort().getCanvas();
    },
    /**
     * Renders view port effects to canvas.
     * @param {Object} canvas
     * @param {Object} ee
     */
    renderViewPortEffects: function (canvas, ee) {
        var me = this,
            connectionRenderer = me.getConnectionRenderer();
        if (connectionRenderer) {
            connectionRenderer.render(canvas, ee, me.getGraph().getConnections(), me.$viewport);
        }
    },
    getFlowCanvas: function () {
        var me = this;
        return me.getViewPort().getGCanvas();
    },
    getViewPortEffects: function () {
        var me = this;
        return me.getViewPort().getGCanvas();
    },
    /**
     * Registers a svg template by the alias name.
     * @param {String} alias
     **/
    registerTemplate: function (alias) {
        var me = this;
        MEPH.graph.SVGGraphRenderer.graphtemplates.push(alias);
    },
    /**
     * Gets the template by alias.
     * @param {String} alias
     **/
    getTemplate: function (alias) {
        var me = this;
        var template = MEPH.graph.SVGGraphRenderer.graphtemplates.first(function (x) {
            return x === alias
        });
        if (template) {
            var res = MEPH.getTemplateByAlias(alias);
            if (res) {
                return res.template;
            }
        }
        return null;
    },
    render: function () {
        var me = this;

        var nodes = me.getNodes();

        me.getNodeRenderer().render(nodes);

        me.getConnectionRenderer().render(me.getViewPort().getCanvas(), null, me.getConnections(), me.getViewPort());
    }
});﻿/**
 * @class MEPH.audio.graph.node.ChannelSplitterNode
 * @extend MEPH.audio.graph.node.Node
 **/
MEPH.define('MEPH.audio.graph.node.ChannelSplitterNode', {
    extend: 'MEPH.audio.graph.node.Node',
    alias: 'channelsplitter',
    templates: true,
    properties: {
    },
    initialize: function () {
        var me = this;

        me.nodecontrols = me.nodecontrols || [];
        me.nodecontrols.push('bufferoutput');
        me.nodecontrols.push('buffer2output');
        me.nodecontrols.push('buffer3output');
        me.nodecontrols.push('buffer4output');
        me.nodecontrols.push('bufferinput');

        me.great()
        me.nodeInputs.push(me.createInput('buffer', MEPH.audio.graph.node.Node.AudioBuffer));
        me.nodeOutputs.push(me.createOutput('buffer', MEPH.audio.graph.node.Node.AudioBuffer));
        me.nodeOutputs.push(me.createOutput('buffer2', MEPH.audio.graph.node.Node.AudioBuffer));
        me.nodeOutputs.push(me.createOutput('buffer3', MEPH.audio.graph.node.Node.AudioBuffer));
        me.nodeOutputs.push(me.createOutput('buffer4', MEPH.audio.graph.node.Node.AudioBuffer)); 
    },
    onLoaded: function () {
        var me = this;
        me.great()
        me.buffer2output.left = false;
        me.buffer3output.left = false;
        me.buffer4output.left = false;
        me.title = 'Channel Splitter';

    }
});﻿/**
 * @class MEPH.audio.graph.node.GeneratedNode
 * @extend MEPH.audio.graph.node.Node
 **/
MEPH.define('MEPH.audio.graph.node.GeneratedNode', {
    extend: 'MEPH.audio.graph.node.Node',
    alias: 'generatednode',
    templates: true,
    requires: ['MEPH.audio.graph.AudioGraphReader'],
    scripts: ['MEPH.audio.graph.node.generated.Range',
                'MEPH.audio.graph.node.generated.Select',
                'MEPH.audio.graph.node.generated.Control'],
    properties: {
    },
    initialize: function (seed) {
        var me = this, input, output;

        me.nodecontrols = me.nodecontrols || [];
        if (seed) {
            seed = MEPH.audio.graph.AudioGraphReader.cloneUnique(seed);
            me.subGraph = seed;
            input = seed.nodes.first(function (x) {
                return x.data.type === 'MEPH.audio.graph.node.InputNode';
            });

            output = seed.nodes.first(function (x) {
                return x.data.type === 'MEPH.audio.graph.node.OutputNode';
            });

            if (input && output) {

                input = input.data;
                output = output.data;

                output.nodeOutputs.foreach(function (inp) {
                    var iname = 'output_' + MEPH.GUID().nodename();
                    inp.alternateId = iname;
                    me.addCorrespondingControl(iname, inp)
                    me.nodecontrols.push(iname);
                });

                input.nodeInputs.foreach(function (inp) {
                    var iname = 'input_' + MEPH.GUID().nodename();
                    inp.alternateId = iname;
                    me.addCorrespondingControl(iname, inp)
                    me.nodecontrols.push(iname);

                });

                me.$input = input;
                me.$output = output;

                me.generateInputTemplate(input, output);
                me.generateProperties(input, output);
            }
        }
        //me.nodecontrols.push('bufferoutput');
        //me.nodecontrols.push('bufferinput');
        //me.nodecontrols.push('gain');

        me.great()
        if (input && output) {
            input.nodeInputs.foreach(function (inp) {
                me.nodeInputs.push(me.createInput(inp.name, inp.type));
            });

            output.nodeOutputs.foreach(function (inp) {
                me.nodeOutputs.push(me.createOutput(inp.name, inp.type));
            });
        }
        //
        //me.nodeOutputs.push(me.createOutput('buffer', MEPH.audio.graph.node.Node.AudioBuffer));

    },
    /**
     * Generates properties
     * @param {Object} input
     * @oaram {Object} output
     */
    generateProperties: function (input, output, set) {
        var me = this;
        input.nodeInputs.foreach(function (x) {
            var temp = me.getCorrespondingControl(x);

            var dict = {
                title: temp.name.nodename() + 'Title',
                y: temp.name.nodename() + 'y',
                types: temp.name.nodename() + 'types',
                isoutput: temp.name.nodename() + 'isoutput'
            }
            for (var i in dict) {
                me[dict[i]] = null;
            }
        })
        input.nodeInputs.concat(output.nodeOutputs).unique(function (x) {
            return x.name.nodename();
        }).select(function (x) {
            var temp = me.getCorrespondingControl(x);
            var dict = {
                title: temp.name.nodename() + 'Title',
                y: temp.name.nodename() + 'y',
                types: temp.name.nodename() + 'types',
                isoutput: temp.name.nodename() + 'isoutput'
            }

            for (var i in dict) {
                me[dict] = null;
            }
        });
    },
    setGeneratedProperties: function (input, output) {
        var me = this;
        input.nodeInputs.concat(output.nodeOutputs).select(function (x) {
            var temp = me.getCorrespondingControl(x);

            me[temp.name.nodename()].left = !!!x.output;
            me[temp.name.nodename()].title = x.title;

        });
    },
    /**
     * Generates the input templaet for the generated node.
     * @param {Object} input
     * @param {Object} output
     **/
    generateInputTemplate: function (input, output) {
        var me = this;
        me.uniqueTemplates();
        var completeTemplate = input.nodeInputs.select(function (x) {
            var templateinfo = me.getGenNodeTemplateForType(x.type);
            var temp = me.getCorrespondingControl(x);
            var dict = {
                id: temp.name.nodename(),
                title: 'c$.' + temp.name.nodename() + 'Title',
                y: 'c$.' + temp.name.nodename() + 'y',
                types: 'c$.' + temp.name.nodename() + 'types'
            }
            return me.parseAndReplace(dict, templateinfo);
        }).join('') + output.nodeOutputs.select(function (x) {
            var templateinfo = me.getGenNodeTemplateForType(x.type, 'MEPH.audio.graph.node.generated.Control');
            var temp = me.getCorrespondingControl(x);
            var dict = {
                id: temp.name.nodename(),
                title: 'c$.' + temp.name.nodename() + 'Title',
                y: 'c$.' + temp.name.nodename() + 'y',
                types: 'c$.' + temp.name.nodename() + 'types'
            }
            return me.parseAndReplace(dict, templateinfo);
        }).join('');


        completeTemplate = '<!-- "instruction": true, "name" : "genop", "operation" : "inject" , "position" : "inputs", "before" : true -->' +
        completeTemplate + '<!-- "instruction": true, "name" : "genop", "close": true -->';
        var alias = 'GeneratedNodeTemplate' + MEPH.GUID().replace(new RegExp("-", 'g'), '_');
        var constructedTemplate = {
            alias: alias,
            classifiedName: alias,
            type: MEPH.templateType,
            template: completeTemplate
        }
        MEPH.addTemplateInformation(constructedTemplate);

        me.addTemplate(alias);
    },
    /**
     * Parse and replace the template parts in with the dictionary values.
     * @param {Object} dic
     * @param {Object} templateinfo
     * @returns {String}
     **/
    parseAndReplace: function (dic, templateinfo) {
        var me = this, template;
        template = templateinfo.template;
        for (var i in dic) {
            if (dic.hasOwnProperty(i)) {
                var re = new RegExp("{{{" + i + "}}}", 'g');
                template = template.replace(re, dic[i]);
            }
        }
        return template;
    },
    getGenNodeTemplateForType: function (type, override) {
        var template;
        if (override) {
            template = MEPH.getDefinedTemplate(override);
        }
        else
            switch (type) {
                case MEPH.audio.graph.node.Node.Number:
                    template = MEPH.getDefinedTemplate('MEPH.audio.graph.node.generated.Range');
                    break;
                case MEPH.audio.graph.node.Node.String:
                    template = MEPH.getDefinedTemplate('MEPH.audio.graph.node.generated.Select');
                    break;
                default:
                    template = MEPH.getDefinedTemplate('MEPH.audio.graph.node.generated.Control');
                    break
            }
        return template;
    },
    onLoaded: function () {
        var me = this;
        me.great()
        me.title = 'Generated Node';
        me.setGeneratedProperties(me.$input, me.$output);

        me.refresh++;
    }

});﻿/**
 * @class MEPH.audio.graph.node.ChannelMergerNode
 * @extend MEPH.audio.graph.node.Node
 **/
MEPH.define('MEPH.audio.graph.node.ChannelMergerNode', {
    extend: 'MEPH.audio.graph.node.Node',
    alias: 'channelmerger',
    templates: true,
    initialize: function () {
        var me = this;

        me.nodecontrols = me.nodecontrols || [];
        me.nodecontrols.push('bufferoutput');
        me.nodecontrols.push('bufferinput');
        me.nodecontrols.push('buffer2input');
        me.nodecontrols.push('buffer3input');
        me.nodecontrols.push('buffer4input');

        me.great()

        me.nodeInputs.push(me.createInput('buffer', MEPH.audio.graph.node.Node.AudioBuffer, { count: 100 }));
        me.nodeInputs.push(me.createInput('buffer2', MEPH.audio.graph.node.Node.AudioBuffer));
        me.nodeInputs.push(me.createInput('buffer3', MEPH.audio.graph.node.Node.AudioBuffer));
        me.nodeInputs.push(me.createInput('buffer4', MEPH.audio.graph.node.Node.AudioBuffer));

        me.nodeOutputs.push(me.createOutput('buffer', MEPH.audio.graph.node.Node.AudioBuffer)); 
    },
    onLoaded: function () {
        var me = this;
        me.great()
        me.title = 'Channel Merger';
    }
});﻿/**
 * @class MEPH.audio.graph.node.BiquadFilter
 * @extend MEPH.audio.graph.node.Node
 **/
MEPH.define('MEPH.audio.graph.node.BiquadFilter', {
    extend: 'MEPH.audio.graph.node.Node',
    requires: ['MEPH.audio.graph.node.controls.AudioRange', 'MEPH.audio.graph.node.controls.AudioSelect'],
    alias: 'biquadfilter',
    templates: true,
    properties: {
        qTitle: '',
        frequencyTitle: '',
        detuneTitle: '',
        gainTitle: '',
        typeTitle: '',
        biquadtypes: null,
        qvalue: null,
        frequencyvalue: null,
        detunevalue: null,
        gainvalue: null,
        tyepeinputvalue: null
    },
    initialize: function () {
        var me = this;
        me.nodecontrols = me.nodecontrols || [];
        me.nodecontrols.push('bufferoutput');
        me.nodecontrols.push('bufferinput');
        me.nodecontrols.push('q');
        me.nodecontrols.push('frequency');
        me.nodecontrols.push('detune');
        me.nodecontrols.push('gain');
        me.nodecontrols.push('typeinput');
        me.great()
        var types = ['lowpass', 'highpass', 'bandpass', 'lowshelf', 'highshelf', 'peaking', 'notch', 'allpass'];
        me.nodeInputs.push(me.createInput('buffer', MEPH.audio.graph.node.Node.AudioBuffer));
        me.nodeInputs.push(me.createInput('q', MEPH.audio.graph.node.Node.Number, { path: 'Q.value' }));
        me.nodeInputs.push(me.createInput('frequency', MEPH.audio.graph.node.Node.Number, { path: 'frequency.value' }));
        me.nodeInputs.push(me.createInput('detune', MEPH.audio.graph.node.Node.Number, { path: 'detune.value' }));
        me.nodeInputs.push(me.createInput('gain', MEPH.audio.graph.node.Node.Number, { path: 'gain.value' }));
        me.nodeInputs.push(me.createInput('type', MEPH.audio.graph.node.Node.String, {
            values: types
        }));
        me.types = types;
        me.nodeOutputs.push(me.createOutput('buffer', MEPH.audio.graph.node.Node.AudioBuffer)); 
    },
    onLoaded: function () {
        var me = this;
        me.great()
        me.title = 'Biquad Filter';

        me.qTitle = 'Q';
        me.frequencyTitle = 'frequency';
        me.detuneTitle = 'detune';
        me.gainTitle = 'gain';
        me.typeTitle = 'type';
        me.biquadtypes = me.types.select();
    }
});﻿/**
* @class MEPH.graph.Graph
* Creates a graph.
*/
MEPH.define('MEPH.graph.renderer.svg.ConnectionRenderer', {
    requires: ['MEPH.util.Renderer', 'MEPH.util.SVG', 'MEPH.util.Dom'],
    extend: "MEPH.graph.renderer.ConnectionRenderer",
    properties: {
        singleNodePosition: null,
        controlpointstroke: '#ff0021',
        controlpointstrokewidth: 3,
        controlpointfill: 'blue',
        $connectioncache: null
    },
    initialize: function () {
        var me = this;
        MEPH.Events(me);
        me.$connectioncache = [];
        me.singleNodePosition = { x: 100, y: 100 };
        me.callParent.apply(me, arguments);
        me.svgrenderer = new MEPH.util.SVG();
    },

    draw: function (options, endpoints, overridingoptions) {
        var me = this,
            temp;
        overridingoptions = overridingoptions || {};
        var items = endpoints.select(function (x) {
            temp = me.options(options);
            temp = me.options(overridingoptions);
            temp.start = x.start
            temp.end = x.end;
            return temp;
        });
        return me.renderer.draw(items);
    },
    calculateEndPoints: function (nodes, offset, connection) {
        var me = this;
        offset = offset || { x: 0, y: 0 };
        var zones = connection.getZones();
        var result = zones.summation(function (zone, current, index) {
            var pos = zone.getPosition();
            if (current) {
                return {
                    x: pos.x + current.x,
                    y: pos.y + current.y
                };
            }
            return {
                x: pos.x,
                y: pos.y
            };
        }) || { x: 0, y: 0 };

        var average = {
            x: (result.x / zones.length),
            y: (result.y / zones.length)
        };

        var nodeendpoints = connection.getZones().select(function (x) {
            var pos = x.getPosition();
            return {
                start: {
                    x: pos.x,
                    y: pos.y
                },
                end: average
            }
        });
        return nodeendpoints;
    },
    addEventsToConnection: function (viewport, obj) {
        var me = this, connection = obj.connection;
        me.don('mouseover', obj.path.shape, function (ee) {
            var xy = viewport.getXY(ee);

            viewport.fire('nodeoverconnection', {
                node: viewport.isDraggingNode ? viewport.isDraggingNode.node : null,
                connection: connection,
                xy: xy
            });
        }, obj);
        connection.on('selected', function (obj) {
            obj.path.shape.classList.add('selected');
        }.bind(me, obj));
        connection.on('unselected', function (obj) {
            obj.path.shape.classList.remove('selected');
        }.bind(me, obj));
        me.don('click', obj.path.shape, function (obj) {
            viewport.selectionConnection(obj.connection)
        }.bind(me, obj), obj);

        connection.on('removed', function (obj) {
            me.svgrenderer.remove(obj.path);
            me.dun(obj);
            me.$connectioncache.removeWhere(function (x) { return x === obj; });
        }.bind(me, obj));

    },
    /**
     * Renders connections
     * @param {Object} canvas
     * @param {Object} ee
     * @param {Array} connections
     **/
    render: function (canvas, ee, connections, viewport) {
        var me = this;
        if (connections && connections.length && canvas && viewport) {
            var unrenderedconnections = connections.where(function (x) {
                return !me.$connectioncache.some(function (t) { return t.connection === x; })
            });
            var vp = viewport.getPosition();

            unrenderedconnections.foreach(function (connection) {
                var obj = {
                    connection: connection,
                    path: me.createPath(canvas).first()
                };
                me.addEventsToConnection(viewport, obj);
                me.$connectioncache.push(obj);
            });
            if (me.$connectioncache.length > 0) {
                me.$connectioncache.foreach(function (connectionObj) {
                    var connection = connectionObj.connection;
                    var path = connectionObj.path;
                    if (connection.$zones.length > 1) {
                        var dom = connection.$zones.first().$dom;
                        var dom2 = connection.$zones.second().$dom;
                        var pos = Dom.getRelativeSvgPosition(dom, canvas.parentElement, 'center');
                        var pos2 = Dom.getRelativeSvgPosition(dom2, canvas.parentElement, 'center');

                        if (!(MEPH.equals(path.options.start, pos) && MEPH.equals(path.options.end, pos2))) {
                            path.options.start = pos;
                            path.options.end = pos2;

                            me.svgrenderer.drawLine(path.options, path);
                            path.shape.parentNode.insertBefore(path.shape, path.shape.parentNode.firstChild);
                        }
                    }
                });
            }
        }
        else if (canvas && ee && !connections) {
            //render connection flow
            if (!me.connectionflowpath) {
                me.connectionflowpath = me.createPath(canvas).first();
                me.don('dblclick', me.connectionflowpath.shape, function () {
                    me.dun(me.connectionflowpath.shape);
                    t.viewport.onDblClick();
                }, me.connectionflowpath.shape);
            }

            var t = ee.first();
            var pos = Dom.getRelativeSvgPosition(t.zone.$dom, canvas.parentElement, 'center');

            me.connectionflowpath.options.start = t.start;
            me.connectionflowpath.options.end = pos;
            me.connectionflowpath.shape.classList.add('preconnection')
            me.svgrenderer.drawLine(me.connectionflowpath.options, me.connectionflowpath);
            if (me.connectionflowpath.shape.parentNode) {
                me.connectionflowpath.shape.parentNode.insertBefore(me.connectionflowpath.shape, me.connectionflowpath.shape.parentNode.firstChild);
            }
        }
    },
    clearFlow: function () {
        var me = this;
        if (me.connectionflowpath) {
            me.svgrenderer.remove(me.connectionflowpath);
            me.connectionflowpath = null;
        }
    },
    /**
     * Creates an svg path and adds it to the canvas.
     * @param {Object} canvas
     **/
    createPath: function (canvas, start, end) {
        var me = this;
        me.svgrenderer.setCanvas(canvas);
        return me.svgrenderer.draw({
            name: 'line',
            shape: MEPH.util.SVG.shapes.line,
            end: { x: 0, y: 0 },
            start: { x: 0, y: 0 },
            strokeStyle: "css",
            fill: "css",
            strokeWidth: me.controlpointstrokewidth,
            'class': 'connection'
        })
    },
    renderConnection: function (connection, canvas, offset, overridingoptions) {
        var me = this;
        var nodes = connection.getNodes();
        var endpoints = me.calculateEndPoints(nodes, offset, connection);
        me.render(canvas, endpoints, overridingoptions);
        return true;
    },
    options: function (options) {
        var temp = {
            shape: MEPH.util.Renderer.shapes.line,
            fillStyle: 'grey',
            x: 10,
            y: 10,
            width: 200,
            height: 100,
            radius: 4
        }
        for (var i in options) {
            temp[i] = options[i];
        }
        return temp;
    },
    drawToCache: function (key, options) {
        options = options || {};
        var me = this,
            temp = me.options(options);
        me.callParent.apply(me, [key, temp]);
    }
});﻿/**
* @class MEPH.graph.Graph
* Creates a graph.
*/
MEPH.define('MEPH.graph.renderer.svg.BlenderNodeRenderer', {
    requires: ['MEPH.util.SVG',
                'MEPH.graph.ActiveZone'],
    properties: {
        rowHeight: 26,
        colorBoxWidth: 30,
        offsetFromLeft: 10,
        labelFontSize: 15,
        rowTopPadding: 0,
        labelPaddingLeft: 10,
        labelPaddingRight: 20,
        colorBoxRadius: 4,
        selectBoxOffset: -10,
        connectorOffsetTop: 10,
        colorBoxHeight: 20,
        connectorRadius: 4,
        rowBottomPadding: 0,
        offsetFromTop: 34,
        headerHeight: 30,
        headerWidth: 198,
        titleWidth: 85,
        nodeWidth: 200,
        drawCanvas: true
    },
    initialize: function (graphviewport) {
        var me = this;
        MEPH.Events(me);
        me.$graphviewport = graphviewport;
    },
    renderNode: function (node, canvas, offset) {
        var me = this;
        var position = node.getPosition();
        var title = node.getTitle();
        me.renderer.setCanvas(canvas);
        me.draw({
            x: position.x + offset.x,
            y: position.y + offset.y,
            title: title,
            node: node,
            nodeInputs: node.getNodeInputs(),
            nodeOutputs: node.getNodeOutputs()
        });
    },
    getColorByType: function (option) {
        var fillstyle, me = this;
        fillstyle = me.getColor(option.languageType);
        return fillstyle;
    },
    getColor: function (languageType) {
        var me = this;

        switch (languageType) {
            case 'array':
                return 'CornflowerBlue';
            case 'function':
                return 'red';
            case 'context':
            case 'then':
            case 'else':
                return 'green';
            case 'number':
            case 'variable':
            case 'bool':
            case 'string':
                return 'blue';
            case 'operator':
                return 'purple';
            default:
                return 'yellow';
        }
    },
    requestZone: function (node, options) {
        var me = this;
        if (!options.customonly) {
            me.$graphviewport.requestZone(node, options);
        }
    },
    colorLabel: function (x, y, option, right) {
        var me = this, fillstyle;
        fillstyle = me.getColorByType(option);
        var node = option.node;
        var text = {
            text: option.title.substr(0, 20),
            textAlign: option.textAlign,
            shape: 'text',
            textBaseline: "top",
            font: me.labelFontSize + 'px Verdana',
            fillStyle: 'black',
            x: x + (right ? -(me.colorBoxWidth + me.labelPaddingRight) : me.colorBoxWidth + me.labelPaddingLeft),
            y: y
        }
        var _x = x + (right ? -(me.colorBoxWidth + me.labelPaddingLeft) : 0);
        var _y = y;
        if (!(option.node && option.node.$data && option.node.$data.customonly)) {
            var zone = me.$graphviewport.requestZone(node, {
                id: option.id + '-title',
                type: MEPH.graph.ActiveZone.type.title,
                option: option,
                x: _x + (right ? -(me.colorBoxWidth + me.labelPaddingRight) : me.colorBoxWidth + me.labelPaddingLeft),
                height: me.colorBoxHeight,
                width: me.titleWidth,
                y: _y
            });
            me.$graphviewport.requestZone(node, {
                id: option.id + '-color',
                type: MEPH.graph.ActiveZone.type.color,
                option: option,
                x: _x,
                height: me.colorBoxHeight,
                width: me.colorBoxWidth,
                y: _y
            });
        }
        return [{
            x: _x,
            y: _y,
            shape: 'rectangle',
            strokeStyle: null,
            fillStyle: fillstyle,
            radius: me.colorBoxRadius,
            height: me.colorBoxHeight,
            width: me.colorBoxWidth
        }, text]
    },
    createOutOptions: function (node, array, x, y) {
        var result = [], me = this;
        array.foreach(function (option, index) {
            var fillstyle;
            option.node = node;
            option.textAlign = 'end';
            var _y = y + me.connectorOffsetTop + (index * (me.rowHeight + me.rowTopPadding));
            var _x = x + me.nodeWidth;
            result = result.concat(me.colorLabel(me.nodeWidth + x, y + (index * (me.rowHeight + me.rowTopPadding)), option, true));
            result.push({
                fillStyle: me.getColorByType(option),// fillstyle,
                strokeStyle: 'black',
                shape: MEPH.util.Renderer.shapes.circle,
                radius: me.connectorRadius,
                y: _y,
                x: _x
            });

            me.$graphviewport.requestZone(node, {
                id: option.id,
                option: option,
                type: MEPH.graph.ActiveZone.type.connector,
                radius: me.connectorRadius,
                width: me.connectorRadius * 2,
                height: me.connectorRadius * 2,
                x: _x - me.connectorRadius,
                y: _y - me.connectorRadius
            });
        });
        return result;
    },
    createInOptions: function (node, array, x, y) {
        var result = [], me = this;
        array.foreach(function (option, index) {
            var fillstyle;
            option.textAlign = 'start';
            option.node = node;
            result = result.concat(me.colorLabel(x, y + (index * (me.rowHeight + me.rowTopPadding)), option));
            var _y = y + me.connectorOffsetTop + (index * (me.rowHeight + me.rowTopPadding));
            var _x = x + (-me.offsetFromLeft);
            result.push({
                fillStyle: me.getColorByType(option),// fillstyle,
                strokeStyle: 'black',
                shape: MEPH.util.Renderer.shapes.circle,
                radius: me.connectorRadius,
                y: _y,
                x: _x
            });

            me.$graphviewport.requestZone(node, {
                id: option.id,
                option: option,
                radius: me.connectorRadius,
                type: MEPH.graph.ActiveZone.type.connector,
                width: me.connectorRadius * 2,
                height: me.connectorRadius * 2,
                x: _x - me.connectorRadius,
                y: _y - me.connectorRadius
            });
        });
        return result;
    },
    /**
     * Renders the nodes.
     * @param {Array} nodes
     */
    render: function (nodes) {
        var me = this;
        if (nodes) {
            var unrendered = nodes.where(function (x) { return !x[' blendersvgid']; });
            unrendered.foreach(function (x) {
                me.setBlenderSVGID(x);
                x.$data.setupActiveZones(me.$graphviewport, x)
            });
            
            nodes.foreach(function (node) {
                var position = node.getPosition();
                var offset = me.$graphviewport.getPosition();
                node.$data.sx = position.x + offset.x;
                node.$data.sy = position.y + offset.y;
            });
        }
    },
    setBlenderSVGID: function (node) {
        var me = this;
        node[' blendersvgid'] = MEPH.GUID();
    },
    draw: function (options) {
        // Create Linear Gradients
        var me = this, temp = me.options(options);
        var node = options.node;
        var text = {
            text: options.title,
            shape: 'text',
            font: '17px Verdana',
            fillStyle: 'black',
            x: options.x + 30 || 0,
            y: options.y + 13 || 0
        }
        if (!me.rendered) {
            //   me.rendered = true;

            var inoptions = node.$data.customonly ? [] : me.createInOptions(node, options.nodeInputs, options.x + me.offsetFromLeft, options.y + me.offsetFromTop + options.nodeOutputs.length * me.rowHeight);
            var outoptions = node.$data.customonly ? [] : me.createOutOptions(node, options.nodeOutputs, options.x, options.y + me.offsetFromTop);
            var _x = options.x + 1;
            var _y = options.y + 1;
            var headerOptions = {
                shape: 'rectangle',
                fillStyle: null,
                gradientFillStyle: {
                    x0: options.x,
                    y0: options.y,
                    x1: options.x,
                    y1: options.y + 25,
                    colorStops: [{ stop: 0, color: "#A5A5A5" },
                    { stop: 0.4, color: "#A5A5A5" },
                    { stop: 0.5, color: "#A5A5A5" },
                    { stop: 1, color: "#A5A5A5" }]
                },
                x: _x || 0,
                y: _y || 0,
                strokeStyle: "",
                lineWidth: 0,
                width: me.headerWidth,
                height: me.headerHeight,
                radius: { upperLeft: 10, upperRight: 10, lowerLeft: 0, lowerRight: 0 }
            };
            var selectBoxOffsetOptions = {
                shape: 'rectangle',
                fillStyle: null,
                gradientFillStyle: {
                    x0: options.x,
                    y0: options.y,
                    x1: options.x,
                    y1: options.y + 25,
                    colorStops: [{ stop: 0, color: "#00A5A5" },
                    { stop: 0.4, color: "#A5A500" },
                    { stop: 0.5, color: "#A5A5A5" },
                    { stop: 1, color: "#A500A5" }]
                },
                x: (_x + me.headerWidth + me.selectBoxOffset) || 0,
                y: _y || 0,
                strokeStyle: "",
                lineWidth: 0,
                width: me.selectBoxWidth || 10,
                height: me.selectBoxHeight || 10,
                radius: { upperLeft: 2, upperRight: 10, lowerLeft: 0, lowerRight: 2 }
            };

            if (node.getId() && !node.$data.customonly) {

                me.$graphviewport.requestZone(node, {
                    id: node.getId() + '-header',
                    type: MEPH.graph.ActiveZone.type.header,
                    radius: me.connectorRadius,
                    width: me.headerWidth,
                    height: me.headerHeight,
                    x: _x,
                    y: _y
                });

                me.$graphviewport.requestZone(node, {
                    id: node.getId() + '-selectBox',
                    type: MEPH.graph.ActiveZone.type.select,
                    radius: me.connectorRadius,
                    width: me.selectBoxWidth || 10,
                    height: me.selectBoxHeight || 10,
                    x: (_x + me.headerWidth + me.selectBoxOffset) || 0,
                    y: _y || 0
                });
            }
            if (options.node.$data && options.node.$data.template) {
                me.$graphviewport.requestZone(node, {
                    id: node.getId() + '-template',
                    type: MEPH.graph.ActiveZone.type.custom,
                    template: options.node.$data.template,
                    x: _x,
                    y: _y
                });
            }
            headerOptions = me.options(headerOptions, options);
        }
        if (me.drawCanvas) {
            me.renderer.draw([temp, headerOptions, selectBoxOffsetOptions, text].concat(inoptions).concat(outoptions));
        }
        return true;
    },
    options: function (options, temp) {
        var me = this;
        temp = temp || {
            shape: 'rectangle',
            fillStyle: '#727272',
            x: 8,
            y: 8,
            strokeStyle: "#F15800",
            lineWidth: 1,
            width: me.nodeWidth,
            height: me.offsetFromTop + (options.nodeInputs.length + options.nodeOutputs.length) * me.rowHeight,
            radius: 10
        };
        for (var i in options) {
            temp[i] = options[i];
        }
        return temp;
    }
});﻿MEPH.define('MEPH.input.Text', {
    alias: 'textfield',
    extend: 'MEPH.input.Input',
    properties: {
        type: 'text'
    }
});﻿/**
 * @class MEPH.control.Control
 * Defines a base class for all controls and views.
 **/
MEPH.define('MEPH.audio.graph.node.Convolver', {
    extend: 'MEPH.audio.graph.node.Node',
    alias: 'convolver',
    templates: true,
    injections: ['audioResources'],
    requires: ['MEPH.audio.graph.node.controls.Control'],
    properties: {
        normalizeinputvalue: null,
        audiobuffersources: null
    },
    initialize: function () {
        var me = this;

        me.nodecontrols = me.nodecontrols || [];
        me.nodecontrols.push('bufferoutput');
        me.nodecontrols.push('bufferinput');
        me.nodecontrols.push('normalize');
        me.nodecontrols.push('convobuffer');
        me.great()
        me.nodeInputs.push(me.createInput('buffer', MEPH.audio.graph.node.Node.AudioBuffer));
        me.nodeInputs.push(me.createInput('normalize', MEPH.audio.graph.node.Node.Boolean));
        me.nodeInputs.push(me.createInput('convobuffer', MEPH.audio.graph.node.Node.String, { path: 'buffer' }));
        me.nodeOutputs.push(me.createOutput('buffer', MEPH.audio.graph.node.Node.AudioBuffer));
    },
    onResourcesUpdated: function () {
        var me = this;
        me.audiobuffersources = me.audiobuffersources || MEPH.util.Observable.observable([]);
        if (me.audiobuffersources)
            me.audiobuffersources.clear();
        if (me.$inj.audioResources) {
            me.audiobuffersources.push.apply(me.audiobuffersources, me.$inj.audioResources.getResources(true));
        }
    },
    onInjectionsComplete: function () {
        var me = this;
        me.onResourcesUpdated();
    },
    onLoaded: function () {
        var me = this;
        me.audiobuffersources = MEPH.util.Observable.observable([]);
        me.subscription(MEPH.subscribe(MEPH.audio.AudioResources.RESOURCE_MANAGER_UPDATE, me.onResourcesUpdated.bind(me)));
        me.onResourcesUpdated();
        //me.inputsy = 0;
        me.title = 'Convolver';
        me.great()
    }
});﻿/**
* @class MEPH.graph.Graph
* Creates a graph.
*/
MEPH.define('MEPH.graph.SVGGraph', {
    extend: 'MEPH.graph.Graph',
    initialize: function () {
        var me = this;
        me.great()
        me.on('nodeadded', function (type, evtfunc, args) {

            args.added.foreach(function (x) {
                //                me.setBlenderSVGID(x);
                x.$data.setupActiveZones(me.$viewport, x);
                x.$data.graph = x.$data.graph || me;
            });
        })
    },
    /**
     * Loads a graph from a json string.
     * @param {String} result
     * @param {Object} control
     * @return {Promise}
     **/
    load: function (result, control) {
        var me = this;
        result = JSON.parse(result);

        me.clear();
        var svg = me.$viewport.getGCanvas();
        return Promise.all(result.nodes.select(function (nodeinfo) {
            return control.renderControl(nodeinfo.data.type, svg, control).then(function (t) {
                var res = t.first();
                node = new MEPH.graph.Node();
                node.setId(nodeinfo.id);
                node.appendData(res.classInstance);
                res.classInstance.nodeInputs.clear();
                res.classInstance.nodeOutputs.clear();
                nodeinfo.data.nodeInputs.foreach(function (x) { res.classInstance.nodeInputs.push(x); });
                nodeinfo.data.nodeOutputs.foreach(function (x) { res.classInstance.nodeOutputs.push(x); });
                control.addNode(node);
                node.setPosition(nodeinfo.position.x, nodeinfo.position.y, nodeinfo.position.z);
                res.classInstance.applyNodeInputsAndOutputs();
                return node;
            })
        })).then(function (nodes) {

            me.$loadedGraph = result;

            var connections = result.connections.select(function (connection) {
                var newconnection = new MEPH.graph.Connection();
                newconnection.setId(connection.id);
                nodes.where(function (x) {
                    return connection.nodes.contains(function (y) { return y == x.getId(); })
                })
                .foreach(function (x) {
                    newconnection.addNodes(x);
                });;
                newconnection.getNodes().foreach(function (x) {
                    x.getZones().where(function (z) {
                        return connection.zones.contains(z.getOptions().id);
                    }).foreach(function (zones) {
                        newconnection.addZone(zones);
                    });;
                });
                me.addConnection(newconnection)
            });
        });
    }
});﻿/**
 * @class MEPH.list.List
 * @extends MEPH.control.Control
 *  Example
 *   
 *               <list data-bind='"source": "ct$.listsource"'>
 *                   <template 
 *                       name="u4m_controls_examples_list">
 *                           <div class="meph-application-menu-categories-item-details" >
 *                               <span>Name</span>
 *                               <span data-bind='"innerHTML": "c$.data.name"'></span>
 *                           </div>
 *                   </template>
 *               </list>
 *   
 */
MEPH.define('MEPH.list.List', {
    extend: 'MEPH.control.Control',
    requires: ['MEPH.util.Dom'],
    templates: true,
    alias: 'list',
    properties: {
        templateNodeName: 'template',
        listTemplates: null,
        listspace: '[listspace]',
        namespacePrefix: 'MEPH.generated.template',
        boundSource: null,
        source: null,
        updateQueue: null,
        updatePromise: null,
        renderingInProgress: false
    },
    initialize: function () {
        var me = this;
        me.callParent.apply(me, arguments);
        me.listTemplates = [];
        me.boundSource = [];
        me.updateQueue = [];
        me.templateSelectionFunctions = [];
        me.setupEventHandlers();
        me.updatePromise = Promise.resolve();
    },
    /**
     * @private
     * Sets up event handlers.
     **/
    setupEventHandlers: function () {
        var me = this;
        me.on('altered', function (type, options) {

            if (options.path === 'source') {
                me.removeListListeners(options.old);
                me.addListListeners(options.value);
                me.renderList();
            }
        }, me);
        //me.on('setinstancetemplate', me.handleInstanceTemplate.bind(me));
        me.$templatesCreated;
        me.templateCreationPromise = new Promise(function (resolve, fail) {
            me.$templatesCreated = resolve;
        });
    },
    addListListeners: function (obj) {
        var me = this;
        if (obj && Array.isArray(obj) && obj.on) {
            obj.on('changed', me.updateList.bind(me), me);
        }
    },
    /**
     * Remove list listeners.
     * @param {Object} obj
     **/
    removeListListeners: function (obj) {
        var me = this;
        if (obj && Array.isArray(obj) && obj.un) {
            obj.un(null, me);
        }
    },
    /**
     * @private
     * Handles the dom template.
     */
    handleDomTemplate: function () {
    },
    /**
     * @private
     * Item clicked handler
     **/
    itemClicked: function (value, dom, prop, eventType, instructions, obj, eventargs) {
        var me = this,
            result,
            target;

        target = eventargs.domEvent.srcElement || eventargs.domEvent.target;
        result = me.boundSource.first(function (info) {
            return me.getDomElements(info).first(function (node) {
                return node === target || MEPH.util.Dom.isDomDescendant(node, target) || MEPH.util.Dom.isDomDescendant(target, node);
            });
        });
        if (result) {
            me.getListSpace().dispatchEvent(MEPH.createEvent('itemclicked', {
                data: result.dataItem
            }));
        }
    },
    /**
     * @private
     * Handles the set of an instance template, and will scrape for templates.
     */
    handleInstanceTemplate: function () {
        var me = this,
            nodes,
            created = 0,
            promise = Promise.resolve(),
            template = me.getInstanceTemplate();
        MEPH.Array(me.listTemplates).removeWhere(function (x) { return x; })
        nodes = MEPH.Array(template.childNodes).where(function (x) {
            return x.nodeName.toLowerCase() === me.templateNodeName.toLowerCase();
        }).foreach(function (x) {
            created++;
            promise = promise.then(function () {
                return me.generateClassForTemplate(x);
            });
            me.listTemplates.push(x);
        });
        if (created) {
            promise = promise.then(function () { me.$templatesCreated(); });
        }
        return promise
    },
    /**
     * Gets the name space of the node.
     * @param {Object} node
     * @returns {String}
     **/
    getNameSpace: function (node) {
        var me = this,
            namespace,
            name = node.getAttribute('name'),
        namespace = me.namespacePrefix.split('.');
        namespace.push(name);
        return namespace;

    },
    /**
     * Generate clas for template.
     * @param {String} name
     * @returns {Promise}
     ***/
    generateClassForTemplate: function (node) {
        var me = this, template,
            name = node.getAttribute('name'),
            namespace,
            $class;

        namespace = me.getNameSpace(node);

        $class = MEPH.getDefinedClass(namespace.join('.'));
        template = MEPH.getTemplate(namespace.join('.'));
        if (!template) {
            template = {
                alias: name,
                classifiedName: namespace.join('.'),
                path: namespace.join('.'),
                template: node.innerHTML,
                type: MEPH.templateType
            };
            MEPH.addTemplateInformation(template);
        }
        if (!$class) {
            return MEPH.createClass(namespace.join('.'), MEPH.GUID(), 'MEPH.control.Control', true, {
                initialize: function () {
                    var template = this;
                    Object.defineProperty(template, 'list', {
                        get: function () {
                            return me;
                        },
                        set: function () {
                        }
                    });
                    template.callParent.apply(template, arguments);
                }
            });
        }
        return Promise.resolve().then(function () {
            return $class;
        });
    },
    /**
     * @private
     * Gets information associated with the data item.
     * @param {Object} dataItem
     **/
    getBoundSourceInfo: function (dataItem) {
        var me = this,
            foundItem = me.boundSource.first(function (x) { return x.dataItem === dataItem; });
        return foundItem;
    },
    getBoundSourceIndex: function (dataItem) {
        var me = this,
            source = me.getBoundSourceInfo(dataItem);
        return me.boundSource.indexOf(source);
    },
    /**
     * Gets previous bound source.
     * @param {Object} boundSource
     * @return {Object}
     **/
    getPreviousBoundSource: function (boundSource) {
        var me = this,
            previous,
            currentIndex;

        currentIndex = me.source.indexOf(boundSource.dataItem);
        if (currentIndex === -1 || currentIndex === 0) {
            return null;
        }
        previous = me.source[currentIndex - 1];

        return me.getBoundSourceInfo(previous);
    },
    /**
     * Updates the list.
     * @param {String} type
     * @param {Object} options
     * @param {Array} options.added
     * @param {Array} options.removed
     **/
    updateList: function (type, options) {
        var me = this,
            nextUpdate;

        //if (!me.renderinginprogress) {
        //    me.renderinginprogress = true;
        options.removed.foreach(function (removeDataItem) {
            var foundItem = me.boundSource.first(function (x) { return x.dataItem === removeDataItem; });
            if (foundItem) {
                me.updatePromise = me.updatePromise.then(function () {
                    return me.removeItem(foundItem).then(function (x) {
                        x.renderResult.foreach(function (y) {
                            y.classInstance.destroy();
                        });
                    }).then(function (x) {
                        me.boundSource.removeWhere(function (t) {
                            return t === foundItem;
                        });
                    });
                });
            }
        });
        options.added.foreach(function (addedDataItem) {
            me.updatePromise = me.updatePromise.then(function () {
                return me.renderItem(addedDataItem);
            }).then(function (item) {
                return me.positionAddDataItem(addedDataItem);
            });;
        });

        me.updatePromise = me.updatePromise.then(function () {
            me.renderinginprogress = false;
            if (me.updateQueue.length) {
                nextUpdate = me.updateQueue.pop();
                return me.updateList(null, nextUpdate);
            }
            else {
                me.fire('updatecomplete', me);
            }
        });
    },
    /**
     * Get last dom element.
     * @param {Object} boundSource
     **/
    getLastDomElement: function (boundSource) {
        var me = this;
        return me.getDomElements(boundSource).last();
    },
    /**
     * Gets the dom elements.
     * @param {Object} boundSource
     * @returns {Array}
     **/
    getDomElements: function (boundSource) {
        return boundSource.renderResult.first().templateNode;
    },
    /**
     * Positions the added dataitem in the list dom.
     * @param {Object} addedDataItem
     * @returns {Promise}
     **/
    positionAddDataItem: function (addedDataItem) {
        var sourceIndex, me = this,
                       info,
                       previousSource,
                       lastelement,
                       index = me.getBoundSourceIndex(addedDataItem);
        sourceIndex = me.source.indexOf(addedDataItem);

        if (index !== sourceIndex) {

            info = me.getBoundSourceInfo(addedDataItem);
            previousSource = me.getPreviousBoundSource(info);
            if (previousSource) {
                lastelement = me.getLastDomElement(previousSource);
                me.getDomElements(info).foreach(function (el) {
                    Dom.insertAfter(lastelement, el);
                    lastelement = el;
                });
                me.boundSource.removeWhere(function (x) { return x === info; });
                me.boundSource.splice(sourceIndex, 0, info);
            }
        }

        return Promise.resolve().then(function () { return addedDataItem; });
    },
    /**
     * Renders the list.
     * @returns {Promise}
     **/
    renderList: function () {
        var me = this,
            promise = Promise.resolve();
        promise = me.clearList().then(function () {
            promise = me.render().then(function () {
                me.renderingInProgress = false;
            });
            return promise;
        });
        me.fire('render', {
            renderComplete: promise
        });

        return promise;
    },
    /**
     * @private
     * Render the list. Do not execute this directly.
     * @returns {Promise}
     **/
    render: function () {
        var me = this;

        return me.templateCreationPromise.then(function () {
            var promise = Promise.resolve();
            MEPH.Array(me.source).foreach(function (item) {
                promise = promise.then(function () {
                    return me.renderItem(item);
                });
            });
            me.source.foreach(function (item) {
                promise = promise.then(function (item) {
                    return me.positionAddDataItem(item);
                });;
            });
            return promise;
        });
    },
    /**
     * Clears the list.
     * @returns {Promise}
     **/
    clearList: function () {
        var me = this,
            promise = Promise.resolve();
        me.boundSource.foreach(function (item) {
            promise = promise.then(function () {
                return me.removeItem(item).then(function (x) {
                    x.renderResult.foreach(function (y) {
                        y.classInstance.destroy();
                    });
                });
            })
        });

        return promise.then(function () {
            me.boundSource.removeWhere(function () {
                return true;
            })
        });;
    },
    /**
     * Removes an item visually.
     * @returns {Promise}
     **/
    removeItem: function (item) {
        var me = this;
        return Promise.resolve().then(function () {
            return item;
        });
    },
    /**
     * Renders an item.
     * @protected
     * @param {Object} dataItem
     * @returns {Promise}
     */
    renderItem: function (dataItem) {
        var me = this,
            dataTemplate,
            listspace;
        listspace = me.getListSpace();
        dataTemplate = me.getTemplateForDataItem(dataItem);
        if (typeof (dataTemplate) === 'string') {
            namespace = dataTemplate.split('.');
        }
        else {
            namespace = me.getNameSpace(dataTemplate);
        }
        return me.renderControl(namespace.join('.'), listspace, me).then(function (result) {

            me.boundSource.push({ renderResult: result, dataItem: dataItem });
            return result;
        }).then(function (result) {
            result.first().classInstance.data = dataItem;
            result.first().classInstance.fire('databound');
            return result;
        });
    },
    clickedItem: function () {
        var me = this;
    },
    /**
     * Gets the template for dataitem.
     * @param {Object} data
     * @returns {Object}
     **/
    getTemplateForDataItem: function (data) {
        var me = this,
            outsideFunction,
            template;
        me.templateSelectionFunctions.first(function (x) {
            outsideFunction = x(data);
            return outsideFunction;
        });
        if (outsideFunction) {
            return outsideFunction;
        }
        template = me.getListTemplates().first(function (x) {
            return x;
        });
        return template;
    },
    appendTemplateSelectionFunction: function (tempSelect) {
        var me = this;
        if (!me.templateSelectionFunctions.some(function (x) { return x === tempSelect; }))
            return me.templateSelectionFunctions.push(tempSelect);
    },
    removeTemplateSelectionFunction: function (tempSelect) {
        var me = this;
        return me.templateSelectionFunctions.removeWhere(function (x) {
            return x === tempSelect;
        });
    },
    /**
     * Gets list space.
     * @returns {Object}
     */
    getListSpace: function () {
        var me = this;
        return me.getDomTemplate().first(function (x) {
            return x.querySelector && x.querySelector(me.listspace);
        }).querySelector(me.listspace);
    },
    /**
     * Gets the list templates.
     * @returns {Array}
     **/
    getListTemplates: function () {
        var me = this;
        return me.listTemplates;
    },
    /**
     * @inheritdoc
     */
    destroy: function () {
        var me = this;


        if (me.boundSource) {

            me.boundSource.foreach(function (item) {
                item.dataItem.un(null, me);
                item.dataItem.dun(null, me);
                item.renderResult.foreach(function (result) {
                    result.classInstance.destroy();
                });
            });
        }
        me.callParent.apply(me, arguments);
    }
});﻿/**
* @class MEPH.graph.GraphViewPort
*/
MEPH.define('MEPH.graph.SVGGraphViewPort', {
    requires: ['MEPH.math.J3DIVector3',
                'MEPH.graph.ActiveZone',
                'MEPH.util.Style'],
    extend: 'MEPH.graph.GraphViewPort',
    properties: {
        maskDownZIndex: 1
    },
    createZoneDom: function (options, graphnode) {
        return options.dom;
    },

    setup: function (selector, options) {
        var me = this;
        var target = document.querySelector(selector);
        var dock = document.createElement('div');
        var canvas = document.createElementNS("http://www.w3.org/2000/svg", 'svg');
        var newElement = document.createElementNS("http://www.w3.org/2000/svg", 'g'); //Create a path in SVG's namespace
        canvas.appendChild(newElement);
        me.setGCanvas(newElement);
        canvas.style.position = 'absolute';
        canvas.style.zIndex = 3;
        options = options || { height: 400, width: 450 };
        target.appendChild(dock);
        dock.appendChild(canvas);
        me.setCanvas(canvas);
        me.setCanvasSize({ height: options.height, width: options.width });
        me.setDock(dock);
        me.applyMask(dock);
    },
    onClick: function (ee) {
        // handle directly with the mouse click on svg path;
    },
    hoverConnection: function () {
        // handled directly with mouse over on svg path.
    },
    applyMask: function (target) {
        var me = this,
            svg = me.getCanvas();

        svg.addEventListener('mousedown', me.onMaskMouseDown.bind(me));
        svg.addEventListener('mousemove', me.onSVGMaskMouseMove.bind(me));
        me.great()
        //me.$mask.addEventListener('mouseup', me.onMaskMouseUp.bind(me));
        //me.$mask.addEventListener('mouseout', me.onMaskMouseOut.bind(me));
        //me.$mask.addEventListener('dblclick', me.onDblClick.bind(me));
        //me.$mask.addEventListener('click', me.onClick.bind(me));

    },
    onSVGMaskMouseMove: function (ee) {
        var me = this;

        me.calculateMousePosition(ee);
        if (me.getCanvas() === ee.srcElement) {
            if (!(me.isDragging || me.isDraggingNode || me.connectionFlow)) {

                me.fire('mousemove', ee);
            }
            else if (me.connectionFlow) {
                me.fire('viewportconnectionflow', ee);
            }
        }
    },
    onMaskMouseDown: function (ee) {
        if (this.getCanvas() === ee.srcElement) {
            var me = this;
            me.great()
        }
    },
    getGCanvas: function () {
        var me = this;
        return me.gcanvas;
    },

    setGCanvas: function (g) {
        var me = this;
        me.gcanvas = g;
    }
})﻿/**
 * @class MEPH.audio.graph.node.DelayNode
 * @extend MEPH.audio.graph.node.Node
 **/
MEPH.define('MEPH.audio.graph.node.DelayNode', {
    extend: 'MEPH.audio.graph.node.Node',
    alias: 'delay',
    templates: true,
    properties: {
        delayTimeTitle: '',
        delayTimevalue: null
    },
    initialize: function () {
        var me = this;

        me.nodecontrols = me.nodecontrols || [];
        me.nodecontrols.push('bufferoutput');
        me.nodecontrols.push('bufferinput');
        me.nodecontrols.push('delayTime');

        me.great()
        me.nodeInputs.push(me.createInput('buffer', MEPH.audio.graph.node.Node.AudioBuffer));
        me.nodeInputs.push(me.createInput('delayTime', MEPH.audio.graph.node.Node.Number, { path: 'delayTime.value' }));
        me.nodeOutputs.push(me.createOutput('buffer', MEPH.audio.graph.node.Node.AudioBuffer)); 
    },
    onLoaded: function () {
        var me = this;
        me.great()
        me.title = 'Delay';

        me.delayTimeTitle = 'delay';

    }
});﻿/**
 * @class MEPH.button.Button
 * Buton
 */
MEPH.define('MEPH.button.Button', {
    alias: 'mephbutton',
    requires: ['MEPH.util.Dom'],
    templates: true,
    statics: {
        buttonClickEvent: 'buttonClickEvent'
    },
    properties: {
        injectControls: {
            location: 'insidebutton'
        },
        defaultCls: ''
    },
    extend: 'MEPH.control.Control',
    initialize: function () {
        var me = this;
        me.buttonClsProperties = me.buttonClsProperties || [];
        me.buttonClsProperties.push('defaultCls');
        me.callParent.apply(me, arguments);
        me.addTransferableAttribute('class', {
            selector: 'button'
        });
        me.on('load', me.initializeDomEvents.bind(me));
        me.defineButtonDependentProperties();
    },
    hide: function(){
        var me = this;
        Style.hide(me.button);  
    },
    initializeDomEvents: function () {
        var me = this, button;
        button = me.getButtonDom();
        me.don('click', button, me.fireButtonClicked.bind(me, 'click'));
    },
    defineButtonDependentProperties: function () {
        var me = this;
        MEPH.util.Observable.defineDependentProperty('buttonCls', me, me.buttonClsProperties, function () {
            var result = [];
            me.buttonClsProperties.foreach(function (x) {
                if (me[x] && me.handleButtonClsChange) {
                    result.push(me.handleButtonClsChange(x));
                }
            });
            return result.join(' ');
        });
    },
    handleButtonClsChange: function (x) {
        var me = this;
        return me[x];
    },
    getButtonDom: function () {
        var me = this;
        return me.getDomTemplate().first(function (x) { return x.nodeType === MEPH.util.Dom.elementType; });
    },
    fireButtonClicked: function (type, evnt) {
        var me = this,
            button = me.getButtonDom();
        evnt.stopPropagation();
        button.dispatchEvent(MEPH.createEvent(MEPH.button.Button.buttonClickEvent, { evt: evnt }));
    }
});﻿/**
 * @class MEPH.graph.GraphControl
 * @extends MEPH.control.Control
 * Graph control.
 **/
MEPH.define('MEPH.graph.GraphControl', {
    alias: 'graph',
    templates: true,
    requires: ['MEPH.graph.GraphViewPort',
        'MEPH.graph.Graph',
                'MEPH.graph.ConnectionHandler',
                'MEPH.graph.renderer.ConnectionRenderer',
                'MEPH.graph.renderer.BlenderNode',
                'MEPH.graph.GraphRenderer'],
    extend: 'MEPH.control.Control',
    properties: {
        id: null
    },
    initialize: function () {
        var me = this;
        me.graph = me.graph || new MEPH.graph.Graph();
        me.callParent.apply(me, arguments);
    },
    onLoaded: function () {
        var me = this;
        me.id = 'graph' + MEPH.GUID();
        me.querySelectorAll('div.graphBody').first().parentNode.setAttribute('id', me.id);
        setTimeout(function () {
            MEPH.graph.GraphControl.create(me.graph || new MEPH.graph.Graph(), null, '#' + me.id + ' div.graphBody', '#' + me.id);
        }, 10);
    },
    addNode: function (node) {
        var me = this;
        me.graph.addNode(node);
    },
    getNodes: function () {
        var me = this;
        return me.graph.getNodes();
    },
    statics: {
        create: function (graph, size, selector, holder) {;
            selector = selector || 'body';
            var graphviewport = new MEPH.graph.GraphViewPort();
            var graphrenderer = new MEPH.graph.GraphRenderer();
            var connectionrenderer = new MEPH.graph.renderer.ConnectionRenderer();
            var blenderNode = new MEPH.graph.renderer.BlenderNode(graphviewport);

            var connectionHandler = new MEPH.graph.ConnectionHandler();
            connectionHandler.setGraph(graph);
            graphviewport.setConnectionHandler(connectionHandler);

            graphviewport.setup(selector, size);
            graphrenderer.setNodeRenderer(blenderNode);
            graphrenderer.setConnectionRenderer(connectionrenderer);
            graphrenderer.setGraph(graph);
            graphrenderer.setViewPort(graphviewport);
            graphrenderer.use('viewport');
            graphviewport.setGraph(graph);
            graphrenderer.render();
            if (holder && document.querySelector(holder)) {
                graphviewport.setHolder(holder);
                graphviewport.resize();
                window.addEventListener('resize', function () {
                    graphviewport.resize();
                });
            }
            graphviewport.selectConnectionOnClick = true;
            return graphviewport;
        }
    }
});﻿/*
 struct sfModList
 {
     SFModulator sfModSrcOper;
     SFGenerator sfModDestOper;
     SHORT modAmount;
     SFModulator sfModAmtSrcOper;
     SFTransform sfModTransOper;
 };*/

MEPH.define("MEPH.audio.soundfont.chunks.data.ModulatorRecord", {
    requires: [],
    extend: "MEPH.audio.soundfont.SFObject",
    statics: {
    },
    properties: {
        sourceOperator: 0,//:int;
        destinationOperator: 0,//:int;
        amountOperator: 0,//:int;
        amountSourceOperator: 0,//:int;
        transformOperator: 0,//:int;
    },
    initialize: function () {
        this.callParent("Modulator");
    }
});
﻿describe("MEPH/audio/graph/node/AudioBufferSourceNode.spec.js", 'MEPH.audio.graph.node.AudioBufferSourceNode', function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create a AudioBufferSourceNode node', function () {
        var AudioBufferSourceNode = new MEPH.audio.graph.node.AudioBufferSourceNode();

        expect(AudioBufferSourceNode).toBeTruthy();
    });

    it('has buffer and normalize inputs ', function () {
        var AudioBufferSourceNode = new MEPH.audio.graph.node.AudioBufferSourceNode();

        expect(AudioBufferSourceNode.nodeInputs.some(function (x) { return x.name === 'source' })).toBeTruthy();
        expect(AudioBufferSourceNode.nodeInputs.some(function (x) { return x.name === 'loop' })).toBeTruthy();
        expect(AudioBufferSourceNode.nodeInputs.some(function (x) { return x.name === 'loopEnd' })).toBeTruthy();
        expect(AudioBufferSourceNode.nodeInputs.some(function (x) { return x.name === 'loopStart' })).toBeTruthy();
        expect(AudioBufferSourceNode.nodeInputs.some(function (x) { return x.name === 'playbackRate' })).toBeTruthy();
        expect(AudioBufferSourceNode.nodeOutputs.some(function (x) { return x.name === 'buffer' })).toBeTruthy();
    })

    it('has buffer and normalize inputs ', function () {
        var AudioBufferSourceNode = new MEPH.audio.graph.node.AudioBufferSourceNode();

        var output = AudioBufferSourceNode.nodeOutputs.some(function (x) { return x.name === 'buffer' });

        expect(output).toBeTruthy();
    })
});﻿/**
 * @class MEPH.control.Control
 * Defines a base class for all controls and views.
 **/
MEPH.define('MEPH.audio.graph.node.controls.Control', {
    alias: 'nodecontrol',
    templates: true,
    extend: 'MEPH.control.Control',
    properties: {
        fill: null,
        radius: null,
        title: null,
        value: null,
        x: 0,
        y: 0,
        hideconnector: null,
        connectorxmargin: 3,
        fontsize: null,
        stroke: null,
        bufferx: null,
        left: true,
        width: 200,
        fresh: 0,
        margin: 4,
        controlheight: 0
    },
    initialize: function () {
        var me = this;
        me.great()
    },
    onLoaded: function () {
        var me = this;
        me.fontsize = me.fontsize || '12px';
        me.great()
        me.defineTextX();
    },
    /**
     * Defines the header buffer property
     */
    defineTextX: function () {
        var me = this;


        MEPH.util.Observable.defineDependentProperty('controlradius', me, ['hideconnector', 'radius', 'fresh'], function () {
            var result = me.hideconnector ? 0 : parseFloat(me.radius) || 0;

            return result;
        });

        MEPH.util.Observable.defineDependentProperty('height', me, ['fontsize', 'radius', 'controlheight', 'fresh'], function () {
            var result = parseFloat(me.fontsize) || 0;
            var radius = parseFloat(me.radius) || 0

            return Math.max(radius * 2, result, (parseFloat(me.controlheight) || 0)) + me.margin + me.margin;
        });

        MEPH.util.Observable.defineDependentProperty('titlevalue', me, ['title', 'value', 'fresh'], function () {
            var result = (me.title || '') + (me.value !== undefined && me.value !== null ? " : " + me.value : '');
            return result.substring(0, 30);
        });
        MEPH.util.Observable.defineDependentProperty('textx', me, ['left', 'width', 'connectorxmargin', 'radius', 'bufferx', 'fresh'], function () {
            var result;
            if (me.left) {
                result = me.connectorxmargin + (me.radius || 0) + (me.bufferx || 0);
            }
            else {
                result = me.width - me.connectorxmargin - me.radius - (me.bufferx || 0);
            }
            return result;
        });
        MEPH.util.Observable.defineDependentProperty('texttransform', me, ['left', 'width', 'connectorxmargin', 'radius', 'bufferx', 'fresh'], function () {
            var result;
            if (me.left) {
                result = me.connectorxmargin + (me.radius || 0) + (me.bufferx || 0);
            }
            else {
                result = me.width - me.connectorxmargin - me.radius - (me.bufferx || 0);
            }
            var x = result;
            var y = parseFloat(me.height / 2) || parseFloat(me.radius || 0);
            result = 'translate(' + (x || 0) + ',' + (y || 0) + ')';
            return result;
        });



        MEPH.util.Observable.defineDependentProperty('connectortransform', me, ['radius', 'left', 'width', 'connectorxmargin', 'radius', 'bufferx', 'fresh'], function () {
            var result;
            if (me.left) {
                result = 0;
            }
            else {
                result = me.width + (me.radius || 0) / 2;
            }
            var x = result;
            var y = parseFloat(me.height / 2) || parseFloat(me.radius || 0);
            var result = 'translate(' + (x || 0) + ',' + (y || 0) + ')';

            return result;
        });

        MEPH.util.Observable.defineDependentProperty('anchor', me, ['left', 'fresh'], function () {
            var result;
            if (!me.left) {
                result = 'end';
            }
            else {
                result = 'start';
            }
            return result;
        });


    },
    refresh: function () {
        var me = this;
        me.fresh += 1
    }
});﻿/*
    A "bag" is a subchunk that contains an arbitrary number of data records. Each record in the bag contains a
    generator index and a modulator index. The generator index represents the index of the first generator operator
    that belongs to the InstrumentZone or PresetZone associated with the bag record. The modulator index represents the
    first modulator operator that belongs to the InstrumentZone or PresetZone associated with the bag record.

    It can be a tricky concept to grasp. Look at the processGenerator() function of the ZonesSubchunk class to see
    how the generator and modulator operators are assigned to the appropriate zone.
*/
/*
 struct sfPresetBag
 {
     WORD wGenNdx;
     WORD wModNdx;
 };
 */
MEPH.define("MEPH.audio.soundfont.chunks.data.BagRecord", {
    requires: [],
    extend: 'MEPH.audio.soundfont.SFObject',
    statics: {
    },
    properties: {
        generatorIndex: 0,//:int;
        modulatorIndex: 0,//:int;
    },
    initialize: function () {
        this.callParent("Bag");
    }
});﻿


MEPH.define("MEPH.audio.soundfont.chunks.data.ZonesSubchunk", {
    requires: ['MEPH.audio.soundfont.chunks.data.operators.Operator',
                'MEPH.audio.soundfont.chunks.data.GeneratorRecord',
                'MEPH.audio.soundfont.utils.SFByteArray'],
    extend: 'MEPH.audio.soundfont.chunks.Subchunk',
    statics: {
    },
    initialize: function (type, source, chunkSize, recordSize)//:String    //:SFByteArray   //:uint //:int
    {
        this.callParent(type, source, chunkSize, recordSize);
    },
    getZoneRecord: function (index)//int //:ZoneRecord
    {
        return this.getRecord(index);// as ZoneRecord;
    },

    /* A "bag" is a subchunk that contains an arbitrary number of data records. Each record in the bag contains a
    generator index and a modulator index. The generator index represents the index of the first generator operator
    that belongs to the InstrumentZone or PresetZone associated with the bag record. By navigating through the
    given generators subchunk we construct Generators and Operators, assigning the Operators to the appropriate
    Generator and the Genrators to the appropriate Zone. */
    processGenerators: function (generators, bags)//:GeneratorsSubchunk  //:BagsSubchunk  //:void
    {
        var numBags = bags.getNumRecords();//:int bags[prototype][prototype][Methods].getNumRecords
        var numOperators = generators.getNumRecords();//:int 
        for (var i = 0; i < this.getNumRecords() ; i++)//:int 
        {
            var record = this.getZoneRecord(i);//:ZoneRecord 
            var nextRecord = (i < this.getNumRecords() - 1) ? this.getZoneRecord(i + 1) : null; //:ZoneRecord 
            var generatorStart = record.index;//:int 
            // The index of last generator of the current ZoneRecord is one less than the index of the first
            // generator of the next ZoneRecord -- unless this is the last ZoneRecord. In that case, the index of
            // the last generator is one less than the total number of records contained in the bags subchunk.
            var generatorEnd = (nextRecord != null) ? nextRecord.index : numBags;//:int 
            for (var j = generatorStart; j < generatorEnd; j++)//:int 
            {
                var generator = new GeneratorRecord();//:GeneratorRecord 
                var bag = bags.getBag(j); //:BagRecord 
                var nextBag = (j < numBags - 1) ? bags.getBag(j + 1) : null;//:BagRecord 
                var operatorStart = bag.generatorIndex;//:int 
                var operatorEnd = (nextBag != null) ? nextBag.generatorIndex : numOperators;//:int 
                var numUsedOperators = 0;//:int 
                for (var k = operatorStart; k < operatorEnd; k++)//:int 
                {
                    var operator = generators.getOperator(k);//:Operator 
                    // We ignore any unused operator types
                    if (!operator.getIsUnusedType()) {
                        generator.operators[operator.id] = operator;
                        ++numUsedOperators;
                    }
                }
                // If all the operators for this generator are unused types, we don't want to
                // add it to our preset
                if (numUsedOperators > 0) {
                    record.addGenerator(generator);
                }
            }
        }
    }
});
﻿/**
 * A zone is a portion of either an instrument or a preset that corresponds to a given keyRange/velocityRange pair.
 * Presets contain PresetZones and Instruments contain InstrumentZones.
 *
 * PresetZones contain an Instrument property plus any generated properties that modify that Instrument.
 * InstrumentZones contain a Sample property plus any generated properties that modify that Sample.
 */

MEPH.define("MEPH.audio.soundfont.Zone", {
    requires: ['MEPH.audio.soundfont.chunks.data.Range'],
    extend: 'MEPH.audio.soundfont.SoundPropertyObject',
    statics: {

        PROPERTY_NAMES: [],//:Array = 

        DEFAULTS: {},//:Object =  ;
    },
    properties: {
        // Ranges
        keyRange: null,///:Range = 

        velRange: null//:Range = ;
    },
    initialize: function (type)//:String
    {
        this.keyRange = new MEPH.audio.soundfont.chunks.data.Range("keyRange", 0, 127);
        this.velRange = new MEPH.audio.soundfont.chunks.data.Range("velocityRange", 0, 127);
        this.callParent(type);
        if (Zone.PROPERTY_NAMES.length == 0) {
            this.initStaticConstants(Zone.PROPERTY_NAMES, Zone.DEFAULTS);
        }
    },
    fits: function (keyNum, velocity)//:int //:int  //:Boolean
    {
        return keyNum >= this.keyRange.low && keyNum <= this.keyRange.high &&
            velocity >= this.velRange.low && velocity <= this.velRange.high;
    },
    getPropertyNames: function ()//:Array
    {
        return Zone.PROPERTY_NAMES.slice();
    },
    isDefault: function (prop)//:String //:Boolean
    {
        if (prop == "keyRange" || prop == "velRange") {
            debugger;
            return Zone.DEFAULTS[prop].low == this[prop].low && Zone.DEFAULTS[prop].high == this[prop].high;
        }
        return this.callParent((prop)) || (Zone.PROPERTY_NAMES.indexOf(prop) != -1 && Zone.DEFAULTS[prop] == this[prop]);
    }
});﻿describe("MEPH/audio/graph/node/controls/Control.spec.js", 'MEPH.audio.graph.node.controls.Control', function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create a control node', function () {
        var control = new MEPH.audio.graph.node.controls.Control();

        expect(control).toBeTruthy();
    });
});﻿/**
 * @class MEPH.audio.graph.node.PannerNode
 * @extend MEPH.audio.graph.node.Node
 **/
MEPH.define('MEPH.audio.graph.AudioGraph', {
    templates: true,
    alias: 'audiograph',
    extend: 'MEPH.graph.GraphControl',
    requires: ['MEPH.button.Button',
        'MEPH.audio.graph.node.DelayNode',
        'MEPH.graph.SVGGraphViewPort',
        'MEPH.list.List',
        'MEPH.graph.SVGGraph',
        'MEPH.util.Style',
        'MEPH.audio.graph.node.Convolver',
        'MEPH.util.Dom',
        'MEPH.input.Text',
        'MEPH.graph.renderer.svg.BlenderNodeRenderer',
    'MEPH.graph.renderer.svg.ConnectionRenderer',
    'MEPH.audio.graph.node.BiquadFilter',
    'MEPH.audio.graph.node.ChannelMergerNode',
    'MEPH.audio.graph.node.GeneratedNode',
    'MEPH.audio.graph.node.ChannelSplitterNode',
    'MEPH.graph.SVGGraphRenderer',
    'MEPH.audio.graph.node.DynamicsCompressorNode',
    'MEPH.audio.graph.node.GainNode',
    'MEPH.audio.graph.node.AudioBufferSourceNode',
    'MEPH.audio.graph.node.OutputNode',
    'MEPH.audio.graph.node.InputNode',
    'MEPH.audio.graph.node.OscillatorNode',
    'MEPH.audio.graph.node.PannerNode',
    'MEPH.audio.graph.node.WaveShaperNode',
    'MEPH.audio.AudioResources'
    ],
    scripts: ['MEPH.audio.graph.AudioGraphNameChange'],
    properties: {
        graphsources: null
    },
    injections: ['audioResources'],
    initialize: function () {
        var me = this;
        me.graph = new MEPH.graph.SVGGraph();
        MEPH.subscribe(MEPH.audio.AudioResources.RESOURCE_MANAGER_UPDATE, me.updateGraphList.bind(me));
        MEPH.subscribe('opengraphinstance', me.openGraphInstanceHandler.bind(me));;
        me.great()
    },
    statics: {
        screate: function (graph, size, selector, holder) {;
            selector = selector || 'body';
            var graphviewport = new MEPH.graph.SVGGraphViewPort();
            var graphrenderer = new MEPH.graph.SVGGraphRenderer();
            var connectionrenderer = new MEPH.graph.renderer.svg.ConnectionRenderer();
            var blenderNode = new MEPH.graph.renderer.svg.BlenderNodeRenderer(graphviewport);

            var connectionHandler = new MEPH.graph.ConnectionHandler();
            connectionHandler.setGraph(graph);
            graphviewport.setConnectionHandler(connectionHandler);

            graphviewport.setup(selector, size);
            graphrenderer.setNodeRenderer(blenderNode);
            graphrenderer.setConnectionRenderer(connectionrenderer);
            graphrenderer.setGraph(graph);
            graphrenderer.setViewPort(graphviewport);
            graphrenderer.use('viewport');
            graphviewport.setGraph(graph);
            graphrenderer.render();
            if (holder && document.querySelector(holder)) {
                graphviewport.setHolder(holder);
                graphviewport.resize();
                window.addEventListener('resize', function () {
                    graphviewport.resize();
                });
            }
            graphviewport.selectConnectionOnClick = true;
            return graphviewport;
        }
    },
    openGraphInstanceHandler: function (type, name) {
        var me = this;

        var graph = me.graphsources.first(function (x) { return x.name === name; });
        me.graph.clear();
        var strgraph = JSON.stringify(graph);
        return me.graph.load(strgraph, me);
    },
    onLoaded: function () {
        var me = this;
        me.id = 'graph' + MEPH.GUID();
        me.graphsources = MEPH.util.Observable.observable([]);
        me.querySelectorAll('div.graphBody').first().parentNode.setAttribute('id', me.id);
        me.graphviewport = MEPH.audio.graph.AudioGraph.screate(me.graph || new MEPH.graph.SVGGraph(), {
            element: 'svg'
        }, '#' + me.id + ' div.graphBody', '#' + me.id);

        me.don('click', document.body, function (evt) {
            if (!MEPH.util.Dom.isDomDescendant(document.activeElement, me.audiographpopup)) {
                me.closepopup();
            }
        }, me);
    },
    resize: function () {
        var me = this;
        me.graphviewport.resize();
    },
    removeSelectedConnections: function () {
        var me = this;
        me.graph.removeConnections(me.graphviewport.getSelectedConnections().select());
        me.graphviewport.removeSelectedConnections();
    },
    updateGraphList: function () {
        var me = this;
        if (me.$inj && me.$inj.audioResources) {

            me.graphsources.clear();
            me.graphsources.push.apply(me.graphsources, me.$inj.audioResources.getGraphs());
        }
    },
    openGraphInstance: function (name) {
        var me = this;
        MEPH.publish('opengraphinstance', name);
    },
    openGraph: function () {
        var me = this;
        if (!me.openedonce) {
            me.openedonce = true;
            document.body.appendChild(me.audiographpopup);
            MEPH.util.Dom.centerElement(me.audiographpopup);
        }
        me.popupopen = true;
        Style.show(me.audiographpopup);
        MEPH.util.Dom.centerElement(me.audiographpopup);
    },
    closepopup: function () {
        var me = this;
        me.popupopen = false;
        Style.hide(me.audiographpopup);
    },
    saveGraph: function () {
        var me = this;
        var savedgraph = me.graph.save();
        var result = {
            id: me.graph.id || MEPH.GUID(),
            connections: savedgraph.connections.select(),
            nodes: savedgraph.nodes.select(function (x) {
                var res = {
                    id: x.id,
                    position: x.position,
                    data: {
                        id: x.data.id,
                        type: x.data.____type,
                        nodeInputs: x.data.nodeInputs.select(),
                        nodeOutputs: x.data.nodeOutputs.select(),
                    }
                }
                if (x.data.subGraph) {
                    res.data.subGraph = JSON.parse(JSON.stringify(x.data.subGraph))
                }
                return res;
            })
        }
        return result;
    },
    nameGraph: function (graph) {
        var me = this;
        return new Promise(function (r, f) {
            var tempEl = me.getTemplateEl('MEPH.audio.graph.AudioGraphNameChange');
            var input = tempEl.querySelector('input');

            var value;
            Dom.addSimpleDataEntryToElments(me, [{
                element: input,
                setFunc: function (val) {
                    value = val;
                }
            }], tempEl, function () {
                if (value) {
                    graph.name = value;
                    r(graph);
                }
            })

            input.focus();
        });
    },
    save: function () {
        var me = this;
        return JSON.stringify(me.saveGraph());
    },
    /**
     * Loads a graph.
     **/
    loadGraph: function (graph) {
        var me = this;
        return me.graph.load(graph, me);
    },
    /**
     * Add convolver audio node.
     * @return {Promise}
     **/
    addConvolver: function () {
        var me = this,
            node;
        return me.addAudioNode('MEPH.audio.graph.node.Convolver');
    },
    addCustom: function () {

        var me = this;
        var seed = { "connections": [{ "id": "1fd470e0-e09d-4c65-b512-3f2001227685", "nodes": ["df585831-ac49-443f-bdae-c48fc85183e3", "037a064b-374d-40eb-9648-4e7ca5591baf"], "zones": ["1ca9a3a1-0642-4054-b654-3cc2f896619d", "9c782c6e-2ebf-4afc-9f17-d8e8874e44f5"] }, { "id": "acbbaf26-525e-420b-8ac5-20ef066efd09", "nodes": ["df585831-ac49-443f-bdae-c48fc85183e3", "037a064b-374d-40eb-9648-4e7ca5591baf"], "zones": ["f7f889d7-152c-42fb-b5d4-74a0d802bfcc", "9c782c6e-2ebf-4afc-9f17-d8e8874e44f5"] }, { "id": "c27827d0-b8e2-49d3-b2f6-3ff2827c13f8", "nodes": ["df585831-ac49-443f-bdae-c48fc85183e3", "037a064b-374d-40eb-9648-4e7ca5591baf"], "zones": ["6d7a696b-c1e9-4cf7-8b29-c8213f528b6e", "9c782c6e-2ebf-4afc-9f17-d8e8874e44f5"] }, { "id": "f90a7359-7124-4e01-ade3-b6c394f28a6d", "nodes": ["df585831-ac49-443f-bdae-c48fc85183e3", "037a064b-374d-40eb-9648-4e7ca5591baf"], "zones": ["4905939a-f5ab-44ff-8d8f-1e2973d3eafe", "9c782c6e-2ebf-4afc-9f17-d8e8874e44f5"] }, { "id": "48a4446f-6537-4059-a490-31cede7ac8a1", "nodes": ["df585831-ac49-443f-bdae-c48fc85183e3", "cef80e71-f0b9-45ef-99c6-67ee4554745c"], "zones": ["13d343a0-9cc4-4c7d-8674-25069bdca343", "bfee62ed-9a4f-4fab-875b-3e24c87b8e06"] }], "nodes": [{ "id": "037a064b-374d-40eb-9648-4e7ca5591baf", "position": { "x": 0, "y": 0, "z": 0 }, "data": { "id": "6b241096-8024-4f84-ae5b-3e4ea5ff0abb", "type": "MEPH.audio.graph.node.InputNode", "nodeInputs": [{ "name": "bufferinput", "title": "bufferinput", "type": "AudioBuffer", "connector": null, "id": "1ca9a3a1-0642-4054-b654-3cc2f896619d", "options": null, "output": false }, { "name": "q", "title": "q", "type": "Number", "connector": null, "id": "f7f889d7-152c-42fb-b5d4-74a0d802bfcc", "options": null, "output": false }, { "name": "frequency", "title": "frequency", "type": "Number", "connector": null, "id": "6d7a696b-c1e9-4cf7-8b29-c8213f528b6e", "options": null, "output": false }, { "name": "detune", "title": "detune", "type": "Number", "connector": null, "id": "4905939a-f5ab-44ff-8d8f-1e2973d3eafe", "options": null, "output": false }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "Anything", "connector": null, "id": "9c782c6e-2ebf-4afc-9f17-d8e8874e44f5", "output": true, "isOutput": false }] } }, { "id": "cef80e71-f0b9-45ef-99c6-67ee4554745c", "position": { "x": 953, "y": 217, "z": 0 }, "data": { "id": "5a46043a-dc5d-46b2-a479-58bb29137be3", "type": "MEPH.audio.graph.node.OutputNode", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "Anything", "connector": null, "id": "bfee62ed-9a4f-4fab-875b-3e24c87b8e06", "options": null, "output": false, "isOutput": false }], "nodeOutputs": [{ "name": "bufferoutput", "title": "bufferoutput", "type": "AudioBuffer", "connector": null, "id": "13d343a0-9cc4-4c7d-8674-25069bdca343", "output": true }] } }, { "id": "df585831-ac49-443f-bdae-c48fc85183e3", "position": { "x": 537, "y": 71, "z": 0 }, "data": { "id": "dd2ce35b-bbba-4b22-9141-ae14426c5f16", "type": "MEPH.audio.graph.node.BiquadFilter", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "1ca9a3a1-0642-4054-b654-3cc2f896619d", "options": null, "output": false, "isOutput": false }, { "name": "q", "title": "q", "type": "Number", "connector": null, "id": "f7f889d7-152c-42fb-b5d4-74a0d802bfcc", "options": { "path": "Q.value" }, "output": false, "isOutput": false }, { "name": "frequency", "title": "frequency", "type": "Number", "connector": null, "id": "6d7a696b-c1e9-4cf7-8b29-c8213f528b6e", "options": { "path": "frequency.value" }, "output": false, "isOutput": false }, { "name": "detune", "title": "detune", "type": "Number", "connector": null, "id": "4905939a-f5ab-44ff-8d8f-1e2973d3eafe", "options": { "path": "detune.value" }, "output": false, "isOutput": false }, { "name": "gain", "title": "gain", "type": "Number", "connector": null, "id": "1add0375-f396-4cb0-8f6e-d5f520919856", "options": { "path": "gain.value" }, "output": false, "isOutput": false }, { "name": "type", "title": "type", "type": "String", "connector": null, "id": "35d307d9-097d-4e07-b0e3-f09acbd658d3", "options": { "values": ["lowpass", "highpass", "bandpass", "lowshelf", "highshelf", "peaking", "notch", "allpass"] }, "output": false, "isOutput": false }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "13d343a0-9cc4-4c7d-8674-25069bdca343", "output": true, "isOutput": false }] } }] };

        return me.addAudioNode('MEPH.audio.graph.node.GeneratedNode', seed)
    },
    addOutput: function () {
        var me = this;
        return me.addAudioNode('MEPH.audio.graph.node.OutputNode');
    },
    addInput: function () {
        var me = this;
        return me.addAudioNode('MEPH.audio.graph.node.InputNode');
    },
    addAudioSource: function () {
        var me = this,
            node;
        return me.addAudioNode('MEPH.audio.graph.node.AudioBufferSourceNode');
    },
    addDelay: function () {
        var me = this;

        return me.addAudioNode('MEPH.audio.graph.node.DelayNode');
    },
    addBiquadFilter: function () {
        var me = this;

        return me.addAudioNode('MEPH.audio.graph.node.BiquadFilter');
    },
    addChannelMerger: function () {
        var me = this;

        return me.addAudioNode('MEPH.audio.graph.node.ChannelMergerNode');
    },
    addChannelSplitter: function () {
        var me = this;

        return me.addAudioNode('MEPH.audio.graph.node.ChannelSplitterNode');

    },
    addDynamicsCompressor: function () {
        var me = this;

        return me.addAudioNode('MEPH.audio.graph.node.DynamicsCompressorNode');
    },
    addGain: function () {
        var me = this;

        return me.addAudioNode('MEPH.audio.graph.node.GainNode');
    },
    addOscillator: function () {
        var me = this;
        return me.addAudioNode('MEPH.audio.graph.node.OscillatorNode');
    },
    addPanner: function () {
        var me = this;

        return me.addAudioNode('MEPH.audio.graph.node.PannerNode');
    },
    addWaveShaper: function () {
        var me = this;

        return me.addAudioNode('MEPH.audio.graph.node.WaveShaperNode');
    },
    /**
     * Add audio node.
     * @param {String} nodedata
     * @return {Promise}
     **/
    addAudioNode: function (nodedata, injections) {
        var me = this,
            svg = me.graphviewport.getGCanvas(),
            node;

        return me.renderControl(nodedata, svg, me, null, injections).then(function (t) {
            var res = t.first();
            node = new MEPH.graph.Node();
            node.setId(MEPH.GUID());
            node.appendData(res.classInstance);
            me.addNode(node);
        })
    }
});﻿/*The SHDR chunk is a required sub-chunk listing all samples within the smpl sub-chunk and any referenced ROM samples. 
It is always a multiple of forty-six bytes in length, and contains one record for each sample plus a terminal record 
according to the structure:
    struct sfSample 
    {
        CHAR achSampleName[20]; 
        DWORD dwStart; 
        DWORD dwEnd; 
        DWORD dwStartloop; 
        DWORD dwEndloop; 
        DWORD dwSampleRate; 
        BYTE byOriginalPitch; 
        CHAR chPitchCorrection; 
        WORD wSampleLink; 
        SFSampleLink sfSampleType;
    };
*/


MEPH.define("MEPH.audio.soundfont.chunks.data.SamplesSubchunk", {
    requires: ['MEPH.audio.soundfont.utils.SFByteArray'],
    extend: 'MEPH.audio.soundfont.chunks.Subchunk',
    statics: {
        RECORD_SIZE: 46//:int = ;
    },

    initialize: function (source, chunkSize)//:SFByteArray //  :uint
    {
        this.callParent("SamplesSubchunk", source, chunkSize, SamplesSubchunk.RECORD_SIZE);
    },

    getSampleRecord: function (index)//:int  //:SampleRecord
    {
        return this.getRecord(index)// as SampleRecord;
    },

    setBytes: function (value)//:SFByteArray //:void
    {
        for (var i = 0 ; i < this.records.length ; i++)//:SampleRecord
        {
            var record = this.records[i];
            record.bytes = value;
        }
    },

    createRecord: function (bytes)//:SFByteArray // :Object
    {
        var record = new SampleRecord();//:SampleRecord 

        record.id = this.getNumRecords();
        record.name = bytes.readString(20);
        record.start = bytes.readDWord() * 2;
        record.end = bytes.readDWord() * 2;
        record.loopStart = bytes.readDWord() * 2;
        record.loopEnd = bytes.readDWord() * 2;
        record.sampleRate = bytes.readDWord();
        record.originalPitch = bytes.readUnsignedByte();
        record.pitchCorrection = bytes.readByte();
        record.sampleLink = bytes.readWord();
        record.sampleType = bytes.readWord();
        return record;
    }
});
﻿
MEPH.define("MEPH.audio.soundfont.chunks.data.ModulatorsSubchunk", {
    requires: ['MEPH.audio.soundfont.utils.SFByteArray',
                'MEPH.audio.soundfont.chunks.data.ModulatorRecord'],
    extend: 'MEPH.audio.soundfont.chunks.Subchunk',
    statics: {
        RECORD_SIZE: 10
    },

    initialize: function (source, chunkSize)//:SFByteArray   /:uint
    {
        this.callParent("ModulatorsSubchunk", source, chunkSize, ModulatorsSubchunk.RECORD_SIZE);
    },
    createRecord: function (bytes)//:SFByteArray //:Object
    {
        var record = new ModulatorRecord();//:ModulatorRecord 
        record.sourceOperator = bytes.readWord();
        record.destinationOperator = bytes.readWord();
        record.amountOperator = bytes.readShort();
        record.amountSourceOperator = bytes.readWord();
        record.transformOperator = bytes.readWord();
        return record;
    }
});
﻿/*
    The PBAG sub-chunk is a required sub-chunk listing all preset zones within the SoundFont compatible file. It is always
    a multiple of four bytes in length, and contains one record for each preset zone plus one record for a terminal zone
    according to the structure:
        struct sfPresetBag
        {
            WORD wGenNdx;
            WORD wModNdx;
        };
    The first zone in a given preset is located at that preset’s wPresetBagNdx. The number of zones in the preset is
    determined by the difference between the next preset’s wPresetBagNdx and the current wPresetBagNdx.

    The WORD wGenNdx is an index to the preset’s zone list of generators in the PGEN sub-chunk, and the wModNdx is an
    index to its list of modulators in the PMOD sub-chunk. Because both the generator and modulator lists are in the
    same order as the preset header and zone lists, these indices will be monotonically increasing with increasing preset
    zones. The size of the PMOD sub-chunk in bytes will be equal to ten times the terminal preset’s wModNdx plus ten and
    the size of the PGEN sub-chunk in bytes will be equal to four times the terminal preset’s wGenNdx plus four. If the
    generator or modulator indices are non-monotonic or do not match the size of the respective PGEN or PMOD sub-chunks,
    the file is structurally defective and should be rejected at load time.

    If a preset has more than one zone, the first zone may be a global zone. A global zone is determined by the fact that
    the last generator in the list is not an Instrument generator. All generator lists must contain at least one generator
    with one exception - if a global zone exists for which there are no generators but only modulators. The modulator
    lists can contain zero or more modulators.

    If a zone other than the first zone lacks an Instrument generator as its last generator, that zone should be ignored.
    A global zone with no modulators and no generators should also be ignored.

    If the PBAG sub-chunk is missing, or its size is not a multiple of four bytes, the file should be rejected as
    structurally unsound.

    The IBAG sub-chunk is a required sub-chunk listing all instrument zones within the SoundFont compatible file. It is
    always a multiple of four bytes in length, and contains one record for each instrument zone plus one record for
    a terminal zone according to the structure:
        struct sfInstBag
        {
            WORD wInstGenNdx;
            WORD wInstModNdx;
        };
    The first zone in a given instrument is located at that instrument’s wInstBagNdx. The number of zones in the instrument
    is determined by the difference between the next instrument’s wInstBagNdx and the current wInstBagNdx.

    The WORD wInstGenNdx is an index to the instrument zone’s list of generators in the IGEN sub-chunk, and the
    wInstModNdx is an index to its list of modulators in the IMOD sub-chunk. Because both the generator and modulator
    lists are in the same order as the instrument and zone lists, these indices will be monotonically increasing with
    increasing zones. The size of the IMOD sub-chunk in bytes will be equal to ten times the terminal instrument’s
    wModNdx plus ten and the size of the IGEN sub-chunk in bytes will be equal to four times the terminal instrument’s
    wGenNdx plus four. If the generator or modulator indices are non-monotonic or do not match the size of the respective
    IGEN or IMOD sub-chunks, the file is structurally defective and should be rejected at load time.

    If an instrument has more than one zone, the first zone may be a global zone. A global zone is determined by the fact
    that the last generator in the list is not a sampleID generator. All generator lists must contain at least one generator
    with one exception - if a global zone exists for which there are no generators but only modulators. The modulator lists
    can contain zero or more modulators.

    If a zone other than the first zone lacks a sampleID generator as its last generator, that zone should be ignored. A
    global zone with no modulators and no generators should also be ignored.

    If the IBAG sub-chunk is missing, or its size is not a multiple of four bytes, the file should be rejected as
    structurally unsound.
*/


MEPH.define("MEPH.audio.soundfont.chunks.data.BagsSubchunk", {
    requires: ['MEPH.audio.soundfont.utils.SFByteArray',
                'MEPH.audio.soundfont.chunks.data.BagRecord'],
    extend: 'MEPH.audio.soundfont.chunks.Subchunk',
    statics: {

        RECORD_SIZE: 4,//:int = 
    },

    initialize: function (source, chunkSize)//:SFByteArray   //:uint
    {
        this.callParent("Bags", source, chunkSize, BagsSubchunk.RECORD_SIZE);
    },

    getBag: function (index)//:int //:BagRecord
    {
        return this.getRecord(index);// as BagRecord;
    },

    getBags: function ()//:Array
    {
        return this.records;
    },
    createRecord: function (bytes)//:SFByteArray   //:Object
    {
        var record = new BagRecord();//:BagRecord 
        record.generatorIndex = bytes.readWord();
        record.modulatorIndex = bytes.readWord();
        return record;
    }
});
﻿/*
    The PHDR sub-chunk is a required sub-chunk listing all presets within the SoundFont compatible file. It is always
    a multiple of thirty-eight bytes in length, and contains a minimum of two records, one record for each preset and
    one for a terminal record.

    The terminal sfPresetHeader record should never be accessed, and exists only to provide a terminal wPresetBagNdx
    with which to determine the number of zones in the last preset. All other values are conventionally zero, with
    the exception of achPresetName, which can optionally be “EOP” indicating end of presets.

    If the PHDR sub-chunk is missing, or contains fewer than two records, or its size is not a multiple of 38 bytes,
    the file should be rejected as structurally unsound.
*/

MEPH.define("MEPH.audio.soundfont.chunks.data.PresetsSubchunk", {
    requires: ['MEPH.audio.soundfont.chunks.data.PresetRecord',
                'MEPH.audio.soundfont.utils.SFByteArray'
    ],
    extend: 'MEPH.audio.soundfont.chunks.data.ZonesSubchunk',
    statics: {
        END_OF_PRESETS_TAG: "EOP",//:String = ;
        RECORD_SIZE: 38,//:int = ;
    },
    initialize: function (source, chunkSize)//:SFByteArray   //:uint
    {
        this.callParent("PresetsSubchunk", source, chunkSize, PresetsSubchunk.RECORD_SIZE);
    },
    createRecord: function (bytes)//:SFByteArray  //:Object
    {
        var record = new PresetRecord();//:PresetRecord 
        record.id = this.getNumRecords();
        record.name = bytes.readString(20);
        record.preset = bytes.readWord();
        record.bank = bytes.readWord();
        record.index = bytes.readWord();
        record.library = bytes.readDWord();
        record.genre = bytes.readDWord();
        record.morphology = bytes.readDWord();
        return record;
    }
});
﻿/**
 * An InstrumentZone contains a Sample property plus any generated properties that modify that Sample.
 */

MEPH.define("MEPH.audio.soundfont.InstrumentZone", {
    requires: ['MEPH.audio.soundfont.chunks.data.SampleRecord'],
    extend: "MEPH.audio.soundfont.Zone",
    statics: {
        PROPERTY_NAMES: [],//:Array = ;
        DEFAULTS: {}//:Object = ;
    },
    properties: {
        sampleID: -1,//:int = ;
        sample: null,//:SampleRecord;
        // Tuning
        overridingRootKey: -1,//:int = ;
        velocity: -1,//:int = ;
        keyNum: -1,//:int = ;
        // Sample offsets
        startAddrsOffset: 0,//:int = ;
        endAddrsOffset: 0,//;
        startLoopAddrsOffset: 0,//:int = ;
        endLoopAddrsOffset: 0,//:int = ;
        startAddrsCoarseOffset: 0,//:int = ;
        endAddrsCoarseOffset: 0,//:int = ;
        startLoopAddrsCoarseOffset: 0,//:int = ;
        endLoopAddrsCoarseOffset: 0,//:int = ;
        // Sample mode & link
        sampleMode: 0,//:int = ;
        sampleLink: 0,//:int = ;
        // In a category by inself
        exclusiveClass: 0,//:int = 
    },
    initialize: function () {
        this.callParent("InstrumentZone");
        if (InstrumentZone.PROPERTY_NAMES.length == 0) {
            this.initStaticConstants(InstrumentZone.PROPERTY_NAMES, InstrumentZone.DEFAULTS);
        }
    },

    getPropertyNames: function ()///:Array
    {
        return InstrumentZone.PROPERTY_NAMES.slice();
    },

    isDefault: function (prop)//:String  //:Boolean
    {
        return this.callParent((prop)) || (InstrumentZone.PROPERTY_NAMES.indexOf(prop) != -1 && InstrumentZone.DEFAULTS[prop] == this[prop]);
    }
});
﻿

MEPH.define("MEPH.audio.soundfont.chunks.data.ZoneRecord", {
    requires: [],
    extend: 'MEPH.audio.soundfont.SFObject',
    statics: {
    },
    properties: {
        id: 0,//int,
        name: "",//:String;
        index: 0,//:int;
        generators: null,//= [ ];
        modulators: null,//:Array = [ ];
    },
    initialize: function (type)//:String
    {
        this.modulators = [];
        this.generators = [];
        this.callParent(type);
        this.nonSerializedProperties.push("generators", "moderators");
    },
    addGenerator: function (generator)//:GeneratorRecord //:void
    {
        this.generators.push(generator);
    },

    addModulatator: function (modulator)//:ModulatorRecord //:void
    {
        this.modulators.push(modulator);
    }
});
﻿/*
    The inst sub-chunk is a required sub-chunk listing all instruments within the SoundFont compatible file. It is
    always a multiple of twenty-two bytes in length, and contains a minimum of two records, one record for each
    instrument and one for a terminal record according to the structure:
        struct sfInst
        {
            CHAR achInstName[20];
            WORD wInstBagNdx;
        };
    The ASCII character field achInstName contains the name of the instrument expressed in ASCII, with unused
    terminal characters filled with zero valued bytes. Instrument names are case-sensitive. A unique name should
    always be assigned to each instrument in the SoundFont compatible bank to enable identification. However, if
    a bank is read containing the erroneous state of instruments with identical names, the instruments should not
    be discarded. They should either be preserved as read or preferably uniquely renamed.
*/



MEPH.define("MEPH.audio.soundfont.chunks.data.InstrumentsSubchunk", {
    requires: ['MEPH.audio.soundfont.utils.SFByteArray',
                'MEPH.audio.soundfont.chunks.data.InstrumentRecord'],
    extend: 'MEPH.audio.soundfont.chunks.data.ZonesSubchunk',
    statics: {
        END_OF_INSTRUMENTS_TAG: "EOI",//:String = ;
        RECORD_SIZE: 22//:int = ;
    },
    initialize: function (source, chunkSize)//:SFByteArray    //:uint
    {
        this.callParent("InstrumentsSubchunk", source, chunkSize, InstrumentsSubchunk.RECORD_SIZE);
    },

    createRecord: function (bytes)//:SFByteArray //:Object
    {
        var record = new InstrumentRecord();//:InstrumentRecord 
        record.id = this.records.length;
        record.name = bytes.readString(20);
        record.index = bytes.readWord();
        return record;
    }
});
﻿/**
 * An PresetZone contains an Instrument property plus any generated properties that modify that Instrument.
 */


MEPH.define("MEPH.audio.soundfont.PresetZone", {
    requires: [],
    extend: 'MEPH.audio.soundfont.Zone',
    statics: {
        PROPERTY_NAMES: [],//:Array = ;
        DEFAULTS: {},//:Object = ;
    },
    properties: {
        // The SoundFont specifications define the property name for the index of the instrument as "instrument."
        // To prevent confusion, we change that to "instrumentID" and let "instrument" refer to the instrument
        // object corresponding to that index.
        instrumentID: -1,//:int =  ;
        instrument: null//:Instrument;
    },
    initialize: function () {
        this.callParent("PresetZone");
        if (PresetZone.PROPERTY_NAMES.length == 0) {
            this.initStaticConstants(PresetZone.PROPERTY_NAMES, PresetZone.DEFAULTS);
        }
    },

    /**
     * Finds a zone that can play the specified key and velocity. If it can't find an exact match, it chooses the
     * closest non-match. KeyNum is the main determiner and velocity is the tie-breaker.
     */
    getInstrumentZone: function (keyNum, velocity)//:int //:int //:InstrumentZone
    {
        return this.instrument.getInstrumentZone(keyNum, velocity);
    },

    getPropertyNames: function ()//:Array
    {
        return PresetZone.PROPERTY_NAMES.slice();
    },

    toXML: function ()//:XML
    {
        //    var xml:XML = super.toXML();
        //    if (instrument != null)
        //    {
        //        xml.appendChild(instrument.toXML());
        //    }
        //    return xml;
        return "preset zone";
    },
    isDefault: function (prop)//:String //:Boolean
    {
        return this.callParent((prop)) || (PresetZone.PROPERTY_NAMES.indexOf(prop) != -1 && PresetZone.DEFAULTS[prop] == this[prop]);
    }
});
﻿/*
    A SoundFont Generator represents a list of operators that modify the properties of an InstrumentZone or a
    PresetZone. These operators are contained in the Instrument Generators subchunk and the Preset Generators subchunk.
    (Note: There is no "InstrumentGeneratorRecord" or "PresetGeneratorRecord" class, only the "GeneratorRecord" class
    which does double duty.)
*/

MEPH.define("MEPH.audio.soundfont.chunks.data.GeneratorRecord", {
    requires: ['MEPH.audio.soundfont.chunks.data.operators.KeyRange',
                'MEPH.audio.soundfont.chunks.data.operators.Operator',
                'MEPH.audio.soundfont.chunks.data.operators.RangeOperator',
                'MEPH.audio.soundfont.chunks.data.operators.SampleID'],
    extend: 'MEPH.audio.soundfont.SFObject',
    statics: {
    },
    properties: {
        operators: null //:Dictionary  = new Dictionary(false);
    },

    initialize: function () {
        this.operators = {};
        this.callParent("Generator");
        this.nonSerializedProperties.push("operators");
    },

    setOperator: function (operator)//:Operator //:void
    {
        this.operators[operator.id] = operator;
    },

    getOperator: function (type)//:int //:Operator
    {
        return (this.operators.hasOwnProperty(type)) ? this.operators[type] : null;
    },

    getSampleID: function ()//:int
    {
        if (this.operators.hasOwnProperty(Operator.SAMPLE_ID)) {
            var operator = this.operators[Operator.SAMPLE_ID];//:Operator 
            return operator.amount;
        }
        return -1;
    },

    getInstrumentID: function ()//:int
    {
        if (this.operators.hasOwnProperty(Operator.INSTRUMENT)) {
            var operator = this.operators[Operator.INSTRUMENT];//:Operator 
            return operator.amount;
        }
        return -1;
    },

    getKeyRange: function ()//:Range
    {
        if (this.operators.hasOwnProperty(Operator.KEY_RANGE)) {
            var operator = this.operators[Operator.KEY_RANGE];//:RangeOperator 
            return operator.values;
        }
        return null;
    },

    getVelocityRange: function ()//:Range
    {
        if (this.operators.hasOwnProperty(Operator.VEL_RANGE)) {
            var operator = this.operators[Operator.VEL_RANGE];//:RangeOperator 
            return operator.values;
        }
        return null;
    }
});
﻿/**
 * ZoneContainer is the base class for Preset and Instrument. It defines the common elements of these two classes. The
 * most important of these is the zones array which contains definitions for specified keyRange/velocityRange pairs.
 */


MEPH.define("MEPH.audio.soundfont.ZoneContainer", {
    requires: ['MEPH.audio.soundfont.chunks.data.ZoneRecord',
                'MEPH.audio.soundfont.chunks.data.GeneratorRecord',
                "MEPH.audio.soundfont.Zone",
                'MEPH.audio.soundfont.chunks.data.operators.Operator',
                'MEPH.audio.soundfont.chunks.data.operators.RangeOperator'],
    extend: 'MEPH.audio.soundfont.SFObject',
    statics: {
    },
    properties: {
        /**
         * The lower-level data for this ZoneContainer. It contains the samples, generators and modulators which the
         * buildZones method uses to compile the zones for this container.
         */
        record: null,//:ZoneRecord;
        /**
         * The class which represents an individual zone in this container. (For Preset it is PresetZone. For Instrument
         * it is InstrumentZone.)
         */
        _zoneClass: null,//:Class = Zone;
        /**
         * The "Global Zone" is a concept from the SoundFont specs. It represents the defaults for this particular
         * container.
         */
        _globalZone: null,//:Zone;
        /**
         * An array containing the zones for this container. It is empty until the buildZones populates it.
         */
        _zones: null//Array = [];

    },

    initialize: function (type, record, zoneClass)//:String, //:ZoneRecord, //:Class
    {
        this._zones = [];
        this._zoneClass = Zone;
        this.callParent(type);
        this.nonSerializedProperties.push("record");
        this._zoneClass = zoneClass;
        this.record = record;
    },

    getId: function ()//:int
    {
        return this.record.id;
    },

    getName: function ()//:String
    {
        return this.record.name;
    },

    getIndex: function ()//:int
    {
        return this.record.index;
    },

    /**
     * Finds an zone that can play the specified key and velocity. If it can't find an exact match, it chooses the
     * closest non-match. KeyNum is the first priority and velocity is the tie-breaker.
     */
    getZone: function (keyNum, velocity)//:int //:int // :Zone
    {
        var closestVelDistance = 128;//:int 
        var closestKeyDistance = 128;//:int 
        var closestZone;//:Zone
        for (var i = 0; i < this._zones.length ; i++)//:Zone
        {
            var zone = this._zones[i];
            if (zone.fits(keyNum, velocity)) {
                return zone;
            }
            var keyDistance = Math.abs(keyNum - zone.keyRange.low);//:int 
            keyDistance = Math.min(keyDistance, Math.abs(keyNum - zone.keyRange.high));
            var velDistance = Math.abs(velocity - zone.velRange.low);//:int 
            velDistance = Math.min(velDistance, Math.abs(velocity - zone.velRange.high));
            if (keyDistance < closestKeyDistance) {
                closestKeyDistance = keyDistance;
                closestVelDistance = velDistance;
                closestZone = zone;
            }
            else if (keyDistance == closestKeyDistance) {
                if (velDistance < closestVelDistance) {
                    closestVelDistance = velDistance;
                    closestZone = zone;
                }
            }
        }
        return closestZone;
    },

    /**
     * This method uses the samples, generators and modulators from the ZoneRecord data to populate the zones array.
     */
    buildZones: function (records)//:Array //:void
    {
        if (this.record.generators)
            for (var i = 0 ; i < this.record.generators.length ; i++)//:GeneratorRecord
            {
                var generator = this.record.generators[i];
                this.buildZone(generator, records);
            }
    },

    toXML: function ()//:XML
    {
        //var xml:XML = new XML("<" + type + "/>");
        //xml.@id = this.id;
        //xml.@index = this.index;
        //xml.@name = this.name;
        //var zonesXML:XML = <zones/>;
        //var zones:Array = _zones.slice();
        //if (_globalZone != null)
        //{
        //    zones.unshift(_globalZone);
        //}
        //for each (var zone:Zone in zones)
        //{
        //    zonesXML.appendChild(zone.toXML());
        //}
        //xml.appendChild(zonesXML);
        //return xml;
        return "overridden zonecontainer";
    },

    /**
     * A helper method for creating a zone. Subclasses can override this method to define how zones should be built.
     * It uses the _zoneClass property to know what class to instantiate when creating a zone.
     */
    buildZone: function (generator, records)//:GeneratorRecord //:Array //:Zone
    {
        var zone = new this._zoneClass();//:Zone 
        if (generator.operators) {
            for (var i in generator.operators)//:Operator
            {
                var operator = generator.operators[i];
                if (operator instanceof RangeOperator) {
                    zone[operator.getName()] = operator.getValues();//RangeOperator(
                }
                else if (!operator.getIsUnusedType()) {
                    zone[operator.getName()] = operator.amount;
                }
            }
        }
        return zone;
    }
});﻿describe("MEPH/audio/graph/AudioGraph.spec.js", 'MEPH.audio.graph.AudioGraph', function () {

    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it("can create a AudioGraph", function () {
        //Arrange

        //Assert
        var input = new MEPH.audio.graph.AudioGraph();

        expect(input).toBeTruthy();

    });

    it('can render a AudioGraph', function (done) {
        MEPH.render('MEPH.audio.graph.AudioGraph', 'audiograph').then(function (r) {
            var results = r.res;
            var app = r.app;

            var dom,
                AudioGraph = results.first().classInstance;
            ///Assert
            dom = AudioGraph.getDomTemplate()[0]
            expect(dom).toBeTruthy();
            if (app) {
                app.removeSpace();
            }
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });

    it('can add a convolver AudioGraph', function (done) {
        MEPH.render('MEPH.audio.graph.AudioGraph', 'audiograph').then(function (r) {
            var results = r.res;
            var app = r.app;

            var dom,
                AudioGraph = results.first().classInstance;
            ///Assert
            dom = AudioGraph.getDomTemplate()[0];

            AudioGraph.addConvolver();
            expect(dom).toBeTruthy();

            return new Promise(function (r) {
                setTimeout(function () {
                    var d = AudioGraph.graph;
                    if (app) {
                        app.removeSpace();
                    }
                    r();
                }, 5000)
            });
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });

    it('can save an audio graph with nodes only ', function (done) {
        MEPH.render('MEPH.audio.graph.AudioGraph', 'audiograph').then(function (r) {
            var results = r.res;
            var app = r.app;

            var dom,
                AudioGraph = results.first().classInstance;
            ///Assert
            dom = AudioGraph.getDomTemplate()[0];

            return AudioGraph.addConvolver().then(function () {
                var d = AudioGraph.graph;

                var result = AudioGraph.saveGraph();
                var node = result.nodes.first();
                expect(result.connections).toBeTruthy();
                expect(node.data).toBeTruthy();
                expect(node.id).toBeTruthy();
                expect(node.position).toBeTruthy();
                expect(node.data.type).toBeTruthy();
                expect(node.data.nodeOutputs).toBeTruthy();
                expect(node.data.nodeInputs).toBeTruthy();
                if (app) {
                    app.removeSpace();
                }
            });
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });

    it('can save more than one node', function (done) {
        MEPH.render('MEPH.audio.graph.AudioGraph', 'audiograph').then(function (r) {
            var results = r.res;
            var app = r.app;

            var dom,
                AudioGraph = results.first().classInstance;
            ///Assert
            dom = AudioGraph.getDomTemplate()[0];

            return Promise.all([AudioGraph.addConvolver(), AudioGraph.addConvolver()]).then(function () {
                var d = AudioGraph.graph;

                var result = AudioGraph.saveGraph();
                var node = result.nodes.first();
                expect(node.data).toBeTruthy();
                expect(node.id).toBeTruthy();
                expect(node.position).toBeTruthy();
                expect(node.data.type).toBeTruthy();
                expect(node.data.nodeOutputs).toBeTruthy();
                expect(node.data.nodeInputs).toBeTruthy();
                if (app) {
                    app.removeSpace();
                }
            });
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });

    it('can save to a json string', function (done) {
        MEPH.render('MEPH.audio.graph.AudioGraph', 'audiograph').then(function (r) {
            var results = r.res;
            var app = r.app;

            var dom,
                AudioGraph = results.first().classInstance;
            ///Assert
            dom = AudioGraph.getDomTemplate()[0];

            return Promise.all([AudioGraph.addConvolver()]).then(function () {
                var d = AudioGraph.graph;

                var result = AudioGraph.save();
                var res = JSON.parse(result);
                expect(res).toBeTruthy();
                if (app) {
                    app.removeSpace();
                }
            });
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });


    it('can load a graph', function (done) {
        MEPH.render('MEPH.audio.graph.AudioGraph', 'audiograph').then(function (r) {
            var results = r.res;
            var app = r.app;

            var dom,
                AudioGraph = results.first().classInstance;
            ///Assert
            dom = AudioGraph.getDomTemplate()[0];

            return Promise.all([AudioGraph.addConvolver()]).then(function () {
                var d = AudioGraph.graph;
                var result = AudioGraph.save();
                var res = JSON.parse(result);
                return AudioGraph.loadGraph(result).then(function () {
                    expect(res).toBeTruthy();
                    if (app) {
                        app.removeSpace();
                    }
                });
            });
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });

    it('can load a graph with connections', function (done) {
        MEPH.render('MEPH.audio.graph.AudioGraph', 'audiograph').then(function (r) {
            var results = r.res;
            var app = r.app;

            var dom,
                AudioGraph = results.first().classInstance;
            ///Assert
            dom = AudioGraph.getDomTemplate()[0];

            return Promise.all([AudioGraph.addConvolver()]).then(function () {
                return new Promise(function (r) {
                    setTimeout(function () {

                        var d = AudioGraph.graph;
                        var node = d.getNodes().first();
                        var zones = node.getZones().subset(0, 2);
                        var connections = AudioGraph.graphviewport.createConnection(zones);
                        var result = AudioGraph.save();
                        var res = JSON.parse(result);
                        return AudioGraph.loadGraph(result).then(function () {
                            expect(res).toBeTruthy();
                            if (app) {
                                app.removeSpace();
                            }
                            r();
                        });
                    }, 1000)
                })
            });
        }).catch(function (error) {
            expect(error || new Error('did not render as expected')).caught();
        }).then(function () {
            done();
        });
    });
});﻿/**
 * @class MEPH.audio.AudioResources
 * Audio resources are tracked from this service.
 **/
MEPH.define('MEPH.audio.effects.FIRFilter', {
    requires: [],
    statics: {
    },
    properties: {
        resultDivFactor: 0,
        resultDivider: 0,
        length: 0,
        lengthDiv8: 0,
        filterCoeffs: null
    },
    initialize: function () {
    },
    assert: function (val) {
        if (!val) {
            throw new Error('not true')
        }
    },
    getLength: function () {
        var me = this;
        return me.length;
    },
    evaluate: function (dest, src, numSamples, numChannels, destIndx, srcIndx) {
        var me = this;
        me.assert(numChannels == 1 || numChannels == 2);
        var length = me.length;

        me.assert(me.length > 0);
        me.assert(me.lengthDiv8 * 8 === length);
        if (numSamples < length) return 0;
        if (numChannels == 2) {
            throw new Error('NOt handling stereo');
        } else {
            return me.evaluateFilterMono(dest, src, numSamples, destIndx, srcIndx);
        }
    },
    evaluateFilterMono: function (dest, src, numSamples, destIndx, srcIndx) {
        var i, j, end;
        var sum;
        var me = this;
        // when using floating point samples, use a scaler instead of a divider
        // because division is much slower operation than multiplying.
        var dScaler = 1.0 / me.resultDivider;

        var length = me.length;
        var filterCoeffs = me.filterCoeffs;
        me.assert(length != 0);

        end = numSamples - length;
        for (j = 0; j < end; j++) {
            sum = 0;
            for (i = 0; i < length; i += 4) {
                // loop is unrolled by factor of 4 here for efficiency
                sum += src.get(i + 0 + srcIndx) * filterCoeffs[i + 0] +
                       src.get(i + 1 + srcIndx) * filterCoeffs[i + 1] +
                       src.get(i + 2 + srcIndx) * filterCoeffs[i + 2] +
                       src.get(i + 3 + srcIndx) * filterCoeffs[i + 3];
            }
            sum *= dScaler;
            dest.set(j + destIndx, sum);
            srcIndx++;
        }
        return end;
    },
    setCoefficients: function (coeffs, newLength, uResultDivFactor) {
        var me = this;

        me.assert(newLength > 0);
        if (newLength % 8) throw new Error("FIR filter length not divisible by 8");
        me.lengthDiv8 = newLength / 8;
        me.length = me.lengthDiv8 * 8;
        me.assert(me.length === newLength);

        var length = me.length;

        me.resultDivFactor = uResultDivFactor;
        me.resultDivider = Math.pow(2.0, Math.floor(me.resultDivFactor));

        me.filterCoeffs = null;
        me.filterCoeffs = new Float32Array(length);
        coeffs.foreach(function (i, index) {
            me.filterCoeffs[index] = i;
        })
    }
});﻿/*
    A data structure representing the low and high byte values of a ValueGenerator
*/

MEPH.define("MEPH.audio.soundfont.chunks.data.Range", {
    requires: [],
    extend: 'MEPH.audio.soundfont.SFObject',
    statics: {
    },
    properties: {
        low: 0,//:int;
        high: 0//:int;
    },
    initialize: function (type, low, high)//:String //:int  //:int
    {
        this.callParent(type);

        this.low = low;
        this.high = high;
    }
});﻿/**
* @class MEPH.ioc.Container
* IOC container.
*/
MEPH.define('MEPH.ioc.Container', {
    alternateNames: 'MEPH.IOC',
    statics: {
        /**
         * @private
         * Service definitions.
         **/
        serviceDefinitions: [],
        /**
         * Registers a service.
         * @param {Object} config
         * @param {String} config.name
         * @param {String} config.type
         * @param {Object} config.config
         */
        register: function (config) {
            MEPH.Array(MEPH.IOC.serviceDefinitions);
            return Promise.resolve().then(function () {
                return MEPH.IOC.hasService(config.name);
            }).then(function (hasService) {
                changed = hasService;
                MEPH.IOC.serviceDefinitions.removeWhere(function (x) {
                    return x.name === config.name;
                });
            }).then(function () {
                MEPH.IOC.serviceDefinitions.push(config);
            }).then(function () {
                if (changed) {
                    MEPH.publish(MEPH.Constants.serviceTypeChanged, config.name, config.type);
                }
            });

        },
        clearServices: function () {
            MEPH.IOC.serviceDefinitions.removeWhere(function (x) {
                return true;
            });
        },
        /**
         * Unregisters a service.
         * @param {String} serviceName
         **/
        unregister: function (serviceName) {
            MEPH.IOC.serviceDefinitions.removeWhere(function (x) {
                return x.name === serviceName; s
            });
        },
        getServices: function () {
            return MEPH.Array(MEPH.IOC.serviceDefinitions);
        },
        /**
         * Returns if there is a registered service will that name.
         * @param {String} name
         * @returns {Boolean}
         */
        hasService: function (name) {
            MEPH.Array(MEPH.IOC.serviceDefinitions);
            return MEPH.IOC.serviceDefinitions.some(function (x) {
                return x.name === name;
            });
        }
    }
});﻿/**
         * @author Andre Michelle
         * @transformed by Andrew Porter
         */
MEPH.define("MEPH.audio.soundfont.utils.PCMStrategy", {
    requires: [],
    
    properties: {

        _compressionType: null,//Object; 
        _samplingRate: 0,//Number;
        _numChannels: 0,//uint;
        _bits: 0// uint;
    },
    initialize: function (compressionType, samplingRate, numChannels, bits)//: Object  //: Number //: uint //: uint 
    {
        this._compressionType = compressionType;
        this._samplingRate = samplingRate;
        this._numChannels = numChannels;
        this._bits = bits;
    },

    supports: function (info)//: FormatInfo  //: Boolean
    {
        return this._compressionType == info.compressionType &&
                this._samplingRate == info.samplingRate &&
                this._numChannels == info.numChannels &&
                this._bits == info.bits;
    },

    getCompressionType: function ()//: Object
    {
        return this._compressionType;
    },

    getSamplingRate: function ()//: Number
    {
        return this._samplingRate;
    },

    getNumChannels: function ()//: uint
    {
        return this._numChannels;
    },
    getBits: function ()//: uint
    {
        return this._bits;
    },
    getBlockAlign: function ()//: uint
    {
        return (this._numChannels * this._bits) >> 3;
    }
});﻿/**
 * SoundPropertyObject is the base class for Zone and NoteSample. It contains the properties that can be added to a
 * note or a zone by a generator. Another way to look at it is a SoundFontParser sound object consists of a sample
 * waveform and a series of properties that modify it. These properties are contained in the generator subchunks of
 * the data chunk.
 */

MEPH.define("MEPH.audio.soundfont.SoundPropertyObject", {
    requires: [],
    extend: 'MEPH.audio.soundfont.SFObject',
    statics: {
        PROPERTY_NAMES: [],//:Array = ;
        DEFAULTS: {}//:Object = ;
    },
    properties: {

        // Tuning
        coarseTune: 0,//:int = ;
        fineTune: 0,//:int = ;
        scaleTuning: 100,//:int = ;
        // Envelopes
        delayVolEnv: -12000,//:int = ;
        attackVolEnv: -12000,//:int = ;
        holdVolEnv: -12000,//:int = ;
        decayVolEnv: -12000,//:int = ;
        sustainVolEnv: 0,//:int = ;
        releaseVolEnv: -12000,//:int = ;
        delayModEnv: -12000,//:int = ;
        attackModEnv: -12000,//:int = ;
        holdModEnv: -12000,//:int = ;
        decayModEnv: -12000,//:int = ;
        sustainModEnv: 0,//:int = ;
        releaseModEnv: -12000,//:int = ;
        // Keynum envelope modifications
        keyNumToModEnvHold: 0,//:int = ;
        keyNumToModEnvDecay: 0,//:int = ;
        keyNumToVolEnvHold: 0,//:int = ;
        keyNumToVolEnvDecay: 0,//;
        // Modulation envelope relation to pitch and filter
        modEnvToPitch: 0,//:int = ;
        modEnvToFilterFc: 0,//public var ;
        // Low pass filter properties
        initialFilterFc: 13500,//:int = ;
        initialFilterQ: 0,//:int = ;
        // Effects
        pan: 0,//:int = ;
        initialAttenuation: 0,//:int = ;
        chorusEffectsSend: 0,//:int = ;
        reverbEffectsSend: 0,//:int = ;
        // LFOs (Low Frequency Modulators)
        delayModLFO: -12000,//:int = ;
        freqModLFO: 0,//:int = ;
        modLfoToPitch: 0,//:int = ;
        modLfoToFilterFc: 0,//:int = ;
        modLfoToVolume: 0,//:int = ;
        delayVibLFO: -12000,//:int = ;
        freqVibLFO: 0,//:int = ;
        vibLfoToPitch: 0//int = ;

    },
    initialize: function (type)//:String
    {
        this.callParent(type);
        if (SoundPropertyObject.PROPERTY_NAMES.length == 0) {
            this.initStaticConstants(SoundPropertyObject.PROPERTY_NAMES, SoundPropertyObject.DEFAULTS);
        }
    },
    getPropertyNames: function ()//:Array
    {
        return SoundPropertyObject.PROPERTY_NAMES.slice();
    },

    // To keep the size of serialized the representation of SoundPropertyObjects to a minimum, only non-default
    // values are serialized.
    isDefault: function (prop)//:String //:Boolean
    {
        return SoundPropertyObject.PROPERTY_NAMES.indexOf(prop) != -1 && SoundPropertyObject.DEFAULTS[prop] == this[prop];
    },

    // To keep the size of serialized the representation of SoundPropertyObjects to a minimum, only non-default
    // values are serialized.
    includePropertyInSerialization: function (propertyName)//:String //:Boolean
    {
        return !this.isDefault(propertyName) && this.callParent((propertyName));
    },

    // We could manually write out a constant that containes the default values of the propetties of this class.
    // Instead we let the class do it for us based on the initial values of the public properties defined above.
    // Nifty little hack, eh?
    initStaticConstants: function (propertyNames, defaults)//:Array //:Object  //:void
    {
        var props = this.getPropertyNames().concat(this.getPropertyNames(false));
        for (var i = 0 ; i < props.length ; i++)//:String 
        {
            var prop = props[i];
            this.propertyNames.push(prop);
            defaults[prop] = this[prop];
        }
    }
});
﻿/*
    The sdta-list chunk in a SoundFont 2 compatible file contains a single optional smpl sub-chunk which contains
    all the RAM based sound data associated with the SoundFont compatible bank. The smpl sub- chunk is of arbitrary
    length, and contains an even number of bytes.

    The smpl sub-chunk, if present, contains one or more “samples” of digital audio information in the form of linearly
    coded sixteen bit, signed, little endian (least significant byte first) words. Each sample is followed by a minimum
    of forty-six zero valued sample data points. These zero valued data points are necessary to guarantee that any
    reasonable upward pitch shift using any reasonable interpolator can loop on zero data at the end of the sound.
*/

MEPH.define("MEPH.audio.soundfont.chunks.samples.SamplesChunk", {
    requires: [ 'MEPH.audio.soundfont.utils.SFByteArray',
                'MEPH.audio.soundfont.chunks.data.operators.Operator'],
    extend: 'MEPH.audio.soundfont.chunks.Chunk',
    statics: {
        SAMPLE_TAG: "smpl",//:String = ;
        SAMPLE_DATA_TAG: "sdta",//:String = ;
        SAMPLE_24_TAG: "sm24",//:String = ;
    },
    properties: {
        _offset: 0,//:uint = ;
        _bytes: null,//:SFByteArray
        _sample24Bytes: null,//:SFByteArray;
    },
    initialize: function (source)//:SFByteArray = null
    {
        this.callParent("SamplesChunk", source);
        this.nonSerializedProperties.push("length");
    },

    getOffset: function ()//:uint
    {
        return this._offset;
    },

    getBytes: function ()//:SFByteArray
    {
        return this._bytes;
    },

    getLength: function ()//:uint
    {
        return this._bytes.length;
    },

    parse: function (value)//:SFByteArray //:void
    {
        this._format = value.readString(4);
        this._chunkSize = value.readDWord();
        if (this._format == SamplesChunk.SAMPLE_TAG) {
            this._offset = value.position;
            this._bytes = new SFByteArray();
            value.readBytes(this._bytes, 0, this._chunkSize);
        }
        else {
            this.trace("ERROR! Samples::set bytes: unrecognized type:", _format);
        }
    }
});﻿/*
    The INFO-list chunk in a SoundFont 2 compatible file contains three mandatory and a variety of optional sub-chunks.
    The INFO-list chunk gives basic information about the SoundFont compatible bank that is contained in the file.
*/



MEPH.define("MEPH.audio.soundfont.chunks.info.InfoChunk", {
    requires: ['MEPH.audio.soundfont.utils.SFByteArray'],
    extend: 'MEPH.audio.soundfont.chunks.Chunk',
    statics: {
        INFO_TAG: "INFO",//:String = ;
        RIFF_VERSION_TAG: "ifil",//:String = ;
        TARGET_ENGINE_TAG: "isng",//:String = ;
        BANK_NAME_TAG: "INAM",//:String = ;
        ROM_NAME_TAG: "irom",//:String = ;
        ROM_VERSION_TAG: "iver",//:String = ;
        CREATION_DATE_TAG: "ICRD",//:String = ;
        ENGINEERS_TAG: "IENG",//:String = ;
        PRODUCT_TAG: "IPRD",//:String = ;
        COPYRIGHT_TAG: "ICOP",//:String = ;
        COMMENTS_TAG: "ICMT",//:String = ;
        TOOLS_TAG: "ISFT"//:String = ;
    },
    properties: {
        properties: null,//:Object = ;
    },
    initialize: function (source)//:SFByteArray = null
    {
        this.properties = {};
        this.callParent("InfoChunk", source);
    },

    parse: function (value)//:SFByteArray //:void
    {
        while (value.bytesAvailable() > 0) {
            this._format = value.readString(4);
            this._chunkSize = value.readDWord();
            switch (this._format) {
                case InfoChunk.RIFF_VERSION_TAG:
                    {
                        var version =//:Object 
                        {
                            major: value.readWord(),
                            minor: value.readWord()
                        };
                        this.properties["version"] = version;
                        break;
                    }
                case InfoChunk.ROM_VERSION_TAG:
                    {
                        var romVersion =//:Object 
                        {
                            major: value.readWord(),
                            minor: value.readWord()
                        };
                        this.properties["romVersion"] = romVersion;
                        break;
                    }
                case InfoChunk.TARGET_ENGINE_TAG:
                    {
                        this.properties["targetEngine"] = value.readString(this._chunkSize);
                        break;
                    }
                case InfoChunk.BANK_NAME_TAG:
                    {
                        this.properties["bankName"] = value.readString(this._chunkSize);
                        break;
                    }
                case InfoChunk.ROM_NAME_TAG:
                    {
                        this.properties["romName"] = value.readString(this._chunkSize);
                        break;
                    }
                case InfoChunk.CREATION_DATE_TAG:
                    {
                        this.properties["creationDate"] = value.readString(this._chunkSize);
                        break;
                    }
                case InfoChunk.ENGINEERS_TAG:
                    {
                        this.properties["engineers"] = value.readString(this._chunkSize);
                        break;
                    }
                case InfoChunk.PRODUCT_TAG:
                    {
                        this.properties["product"] = value.readString(this._chunkSize);
                        break;
                    }
                case InfoChunk.COPYRIGHT_TAG:
                    {
                        this.properties["copyright"] = value.readString(this._chunkSize);
                        break;
                    }
                case InfoChunk.COMMENTS_TAG:
                    {
                        this.properties["comments"] = value.readString(this._chunkSize);
                        break;
                    }
                case InfoChunk.TOOLS_TAG:
                    {
                        this.properties["tools"] = value.readString(this._chunkSize);
                        break;
                    }
                    // If we find a "LIST" tag, we've gone too far. So we need to set the byteArray position
                    // back and then scram.
                case Chunk.LIST_TAG:
                    {
                        value.position -= 8;
                        return;
                        break;
                    }
                default:
                    {
                        this.raiseError("Info::set bytes: Unrecognized tag! format: " + this._format);
                        break;
                    }
            }
        }
    }
});﻿
/*
struct sfSample
{
    CHAR achSampleName[20];
    DWORD dwStart;
    DWORD dwEnd;
    DWORD dwStartloop;
    DWORD dwEndloop;
    DWORD dwSampleRate;
    BYTE byOriginalKey;
    CHAR chPitchCorrection;
    WORD wSampleLink;
    SFSampleLink sfSampleType;
};
*/
MEPH.define("MEPH.audio.soundfont.chunks.data.SampleRecord", {
    requires: ['MEPH.audio.soundfont.utils.SFByteArray'],
    extend: 'MEPH.audio.soundfont.SFObject',
    statics: {


        MONO: 0x1,//:int = ;
        RIGHT: 0x2,//:int = ;
        LEFT: 0x4,//:int = ;
        ROM_MONO: 0x8001,//:int = ;
        ROM_RIGHT: 0x8002,//:int = ;
        ROM_LEFT: 0x8004,//:int = ;
        // Unsupported types:
        LINKED: 0x8,//:int = ;
        ROM_LINKED: 0x8008,//:int = ;
    },
    properties: {
        id: 0,//:int;
        name: "",//String;
        start: 0,//uint;
        end: 0,//uint;
        loopStart: 0,//uint;
        loopEnd: 0,//uint;
        sampleRate: 0,//uint;
        originalPitch: 0,//int;
        pitchCorrection: 0,//int;
        sampleLink: 0,//int;
        bytes: null,//SFByteArray;

        _sampleType: 0,//int;
    },
    initialize: function () {
        this.callParent("SampleRecord");
        this.nonSerializedProperties.push("sampleData", "bytes");
    },
    getSampleType: function ()//:int
    {
        return this._sampleType;
    },
    setSampleType: function (value)//:void
    {
        if (value == SampleRecord.LINKED || value == SampleRecord.ROM_LINKED) {
            this.raiseError("Unsupported SampleType: " + value);
        }
        this._sampleType = value;
    },
    getNumChannels: function ()//:int
    {
        return (this.sampleType == SampleRecord.MONO || this.sampleType == SampleRecord.ROM_MONO) ? 1 : 2;
    },
    getSampleData: function ()//:ByteArray
    {
        var data = new ByteArray(this.end - this.start);//:ByteArray 
        data.endian = Endian.LITTLE_ENDIAN;
        data.writeBytes(this.bytes, this.start, this.end - this.start);
        data.position = 0;
        return data;
    }
});
﻿/**
 * @class MEPH.audio.soundfont.Instrument
 * @extend MEPH.audio.soundfont.ZoneContainer
 * Instrument represents the parsed and compiled contents of a SoundFont instrument element. It contains "zone"
 * definitions for determining which sample waveforms and dsp properties to use to create a specified keyNum abd
 * velocity. The data property contains the InstrumentRecord which represents the lower-level data for the
 * instrument (without any generators and modulators.)
 */
MEPH.define("MEPH.audio.soundfont.Instrument", {
    requires: ["MEPH.audio.soundfont.chunks.data.InstrumentRecord",
                "MEPH.audio.soundfont.chunks.data.GeneratorRecord",
                "MEPH.audio.soundfont.chunks.data.operators.RangeOperator",
                "MEPH.audio.soundfont.InstrumentZone",
                "MEPH.audio.soundfont.chunks.data.operators.Operator"],
    extend: "MEPH.audio.soundfont.ZoneContainer",
    statics: {
    },
    initialize: function (record)//:InstrumentRecord
    {
        this.callParent("Instrument", record, InstrumentZone);
    },

    /**
     * Finds a zone that can play the specifies key and velocity. If it can't find an exact match, it chooses the
     * closest non-match. KeyNum is the main determiner and velocity is the tie-breaker.
     */
    getInstrumentZone: function (keyNum, velocity)//:int  //:int  //:InstrumentZone
    {
        return this.getZone(keyNum, velocity)// as InstrumentZone;
    },

    buildZone: function (generator, records)//:GeneratorRecord //:Array //:Zone
    {
        var zone = this.callParent(generator, records);//:Zone 
        var sampleID = generator.getSampleID();//:int 
        if (sampleID == -1) {
            this._globalZone = zone;
        }
        else {
            zone.sample = records[sampleID];
            this._zones.push(zone);
        }
        return zone;
    }
});
﻿
/*
    struct sfInst
    {
        CHAR achInstName[20];
        WORD wInstBagNdx;
    };
    */

MEPH.define("MEPH.audio.soundfont.chunks.data.InstrumentRecord", {
    requires: [],
    extend: 'MEPH.audio.soundfont.chunks.data.ZoneRecord',
    statics: {
    },
    initialize: function () {
        this.callParent("InstrumentRecord");
    }
});
﻿/**
 * Preset represents the parsed and compiled contents of a SoundFont preset element. It contains "zone" definitions
 * for determining which instrument element to use to create a specified keyNum abd velocity. The record property
 * contains the PresetRecord which represents the lower-level data for the instrument (without any generators and
 * modulators.)
 */



MEPH.define("MEPH.audio.soundfont.Preset", {
    requires: ['MEPH.audio.soundfont.chunks.data.PresetRecord',
                'MEPH.audio.soundfont.chunks.data.GeneratorRecord',
                'MEPH.audio.soundfont.PresetZone',
                'MEPH.audio.soundfont.chunks.data.operators.Operator',
                'MEPH.audio.soundfont.chunks.data.InstrumentsSubchunk',
                'MEPH.audio.soundfont.chunks.data.GeneratorsSubchunk',
                'MEPH.audio.soundfont.chunks.data.operators.RangeOperator'],
    extend: 'MEPH.audio.soundfont.ZoneContainer',
    statics: {
    },
    initialize: function (record)//:PresetRecord
    {
        this.callParent("Preset", record, PresetZone);
    },
    getBank: function ()//:int
    {//new PresetRecord
        return (this.record).bank;
    },

    getPresetID: function ()//:int
    {//new PresetRecord
        return (this.record).preset;
    },


    /**
     * Finds an instrument zone that matches the specifies key and velocity. If it can't find an exact match, it
     * chooses the closest non-match. KeyNum is the first priority and velocity is the tie-breaker. (This is
     * basically a convenience method to provide access to Instrument::getInstrumentZone without the hassle of
     * locating the proper preset zone first.)
     */
    getInstrumentZone: function (keyNum, velocity)//:int //:int  //:InstrumentZone
    {
        var presetZone = this.getPresetZone(keyNum, velocity);//:PresetZone 
        return presetZone.getInstrumentZone(keyNum, velocity);
    },

    /**
     * Finds a preset zone that matches the specifies key and velocity. If it can't find an exact match, it chooses
     * the closest non-match. KeyNum is the first priority and velocity is the tie-breaker.
     */
    getPresetZone: function (keyNum, velocity)//:int  //:int  //:PresetZone
    {
        return this.getZone(keyNum, velocity);// as PresetZone;
    },
    toXML: function ()//:XML
    {
        return "preset override";
    },
    buildZone: function (generator, records)//:GeneratorRecord  //:Array //:Zone
    {
        var zone = this.callParent(generator, records);//:Zone 
        var instrumentID = generator.getInstrumentID();//:int 
        if (instrumentID == -1) {
            this._globalZone = zone;
        }
        else {
            zone.instrument = records[instrumentID];
            this._zones.push(zone);
        }
        return zone;
    }
});
﻿/*
    struct sfPresetHeader
    {
        CHAR achPresetName[20];
        WORD wPreset;
        WORD wBank;
        WORD wPresetBagNdx;
        DWORD dwLibrary;
        DWORD dwGenre;
        DWORD dwMorphology;
    };

    The ASCII character field achPresetName contains the name of the preset expressed in ASCII, with unused
    terminal characters filled with zero valued bytes. Preset names are case sensitive. A unique name should
    always be assigned to each preset in the SoundFont compatible bank to enable identification. However, if a
    bank is read containing the erroneous state of presets with identical names, the presets should not be
    discarded. They should either be preserved as read or preferably uniquely renamed.

    The WORD wPreset contains the MIDI Preset Number and the WORD wBank contains the MIDI Bank Number which
    apply to this preset. Note that the presets are not ordered within the SoundFont compatible bank. Presets
    should have a unique set of wPreset and wBank numbers. However, if two presets have identical values of both
    wPreset and wBank, the first occurring preset in the PHDR chunk is the active preset, but any others with
    the same wBank and wPreset values should be maintained so that they can be renumbered and used at a later
    time. The special case of a General MIDI percussion bank is handled conventionally by a wBank value of 128.
    If the value in either field is not a valid MIDI value of zero through 127, or 128 for wBank, the preset
    cannot be played but should be maintained.

    The WORD wPresetBagNdx is an index to the preset’s zone list in the PBAG sub-chunk. Because the preset zone
    list is in the same order as the preset header list, the preset bag indices will be monotonically increasing
    with increasing preset headers. The size of the PBAG sub-chunk in bytes will be equal to four times the
    terminal preset’s wPresetBagNdx plus four. If the preset bag indices are non-monotonic or if the terminal
    preset’s wPresetBagNdx does not match the PBAG sub-chunk size, the file is structurally defective and should
    be rejected at load time. All presets except the terminal preset must have at least one zone; any preset with
    no zones should be ignored.

    The DWORDs dwLibrary, dwGenre and dwMorphology are reserved for future implementation in a preset library
    management function and should be preserved as read, and created as zero.
*/
MEPH.define("MEPH.audio.soundfont.chunks.data.PresetRecord", {
    requires: [],
    extend: 'MEPH.audio.soundfont.chunks.data.ZoneRecord',
    statics: {
    },
    properties: {

        preset: 0,//:int;
        bank: 0,//int;
        // These next 3 are unused in the SoundFont 2.1 Specification:
        library: 0,//uint;
        genre: 0,//:uint;
        morphology: 0,//:uint;
    },
    initialize: function () {
        this.callParent("PresetRecord");
    }
});
﻿/*
    The articulation data within a SoundFont 2 compatible file is contained in nine mandatory sub-chunks. This data
    is named “hydra” after the mythical nine-headed beast. The structure has been designed for interchange purposes;
    it is not optimized for either run-time synthesis or for on-the-fly editing. It is reasonable and proper for
    SoundFont compatible client programs to translate to and from the hydra structure as they read and write SoundFont
    compatible files.
*/

MEPH.define("MEPH.audio.soundfont.chunks.data.DataChunk", {
    requires: ['MEPH.audio.soundfont.chunks.samples.SamplesChunk',
        'MEPH.audio.soundfont.chunks.data.PresetsSubchunk',
        'MEPH.audio.soundfont.chunks.data.GeneratorsSubchunk',
        'MEPH.audio.soundfont.chunks.data.BagsSubchunk',
        'MEPH.audio.soundfont.chunks.data.InstrumentsSubchunk',
        'MEPH.audio.soundfont.chunks.data.ModulatorsSubchunk',
        'MEPH.audio.soundfont.chunks.data.SamplesSubchunk',
                'MEPH.audio.soundfont.utils.SFByteArray'],
    extend: 'MEPH.audio.soundfont.chunks.Chunk',
    statics: {
        DATA_TAG: "pdta",//:String = 
        PRESET_TAG: "phdr",//:String = ;
        PRESET_BAG_TAG: "pbag",//:String = ;
        PRESET_MODULATOR_TAG: "pmod",//:String = ;
        PRESET_GENERATOR_TAG: "pgen",//:String = ;
        INSTRUMENT_TAG: "inst",//:String = ;
        INSTRUMENT_BAG_TAG: "ibag",//:String = ;
        INSTRUMENT_MODULATOR_TAG: "imod",//:String = ;
        INSTRUMENT_GENERATOR_TAG: "igen",//:String = ;
        SAMPLE_HEADER_TAG: "shdr",//:String = ;
        END_OF_SAMPLES_TAG: "EOS",//:String = ;
    },
    properties: {
        presetsSubchunk: undefined,//:PresetsSubchunk;
        presetBags: undefined,//BagsSubchunk;
        presetModulators: undefined,//:ModulatorsSubchunk;
        presetGenerators: undefined,//:GeneratorsSubchunk;
        instrumentsSubchunk: undefined,//:InstrumentsSubchunk;
        instrumentBags: undefined,//:BagsSubchunk;
        instrumentModulators: undefined,//:ModulatorsSubchunk;
        instrumentGenerators: undefined,//:GeneratorsSubchunk;
        samplesSubchunk: undefined,//:SamplesSubchunk;
    },
    initialize: function (source)//:SFByteArray = null
    {
        this.callParent("DataChunk", source);
        this.nonSerializedProperties.push("numSamples");
    },
    getNumSamples: function ()//:Number
    {
        return this.getSampleRecords().numRecords;
    },
    getPresetRecords: function ()//:Array
    {
        return this.presetsSubchunk.records;
    },
    getInstrumentRecords: function ()//:Array
    {
        return this.instrumentsSubchunk.records;
    },
    getSampleRecords: function () {
        return this.samplesSubchunk.records;
    },
    setSampleBytes: function (value)//:SamplesChunk:void
    {
        this.samplesSubchunk.setBytes(value.getBytes());
    },
    getSampleRecord: function (index)//:int :SampleRecord
    {
        return this.samplesSubchunk.getSampleRecord(index);
    },
    parse: function (bytes)//:SFByteArray :void
    {
        while (bytes.bytesAvailable() > 7) {
            this._format = bytes.readString(4);
            this._chunkSize = bytes.readDWord();
            var _chunkSize = this._chunkSize;
            var _format = this._format;
            switch (_format) {
                case DataChunk.PRESET_TAG:
                    {
                        this.presetsSubchunk = new PresetsSubchunk(bytes, _chunkSize);
                        break;
                    }
                case DataChunk.PRESET_BAG_TAG:
                    {
                        this.presetBags = new BagsSubchunk(bytes, _chunkSize);
                        break;
                    }
                case DataChunk.PRESET_MODULATOR_TAG:
                    {
                        this.presetModulators = new ModulatorsSubchunk(bytes, _chunkSize);
                        break;
                    }
                case DataChunk.PRESET_GENERATOR_TAG:
                    {
                        this.presetGenerators = new GeneratorsSubchunk(bytes, _chunkSize);
                        break;
                    }
                case DataChunk.INSTRUMENT_TAG:
                    {
                        this.instrumentsSubchunk = new InstrumentsSubchunk(bytes, _chunkSize);
                        break;
                    }
                case DataChunk.INSTRUMENT_BAG_TAG:
                    {
                        this.instrumentBags = new BagsSubchunk(bytes, _chunkSize);
                        break;
                    }
                case DataChunk.INSTRUMENT_MODULATOR_TAG:
                    {
                        this.instrumentModulators = new ModulatorsSubchunk(bytes, _chunkSize);
                        break;
                    }
                case DataChunk.INSTRUMENT_GENERATOR_TAG:
                    {
                        this.instrumentGenerators = new GeneratorsSubchunk(bytes, _chunkSize);
                        break;
                    }
                case DataChunk.SAMPLE_HEADER_TAG:
                    {
                        this.samplesSubchunk = new SamplesSubchunk(bytes, _chunkSize);
                        break;
                    }
                case DataChunk.END_OF_SAMPLES_TAG:
                default:
                    {
                        break;
                    }
            }
        }
        this.updateSamplesAndPresets();
    },
    updateSamplesAndPresets: function ()//:void
    {
        this.instrumentsSubchunk.processGenerators(this.instrumentGenerators, this.instrumentBags);
        this.presetsSubchunk.processGenerators(this.presetGenerators, this.presetBags);
    }
});
﻿describe("MEPH/audio/effects/FIRFilter.spec.js", 'MEPH.audio.effects.FIRFilter', function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create an FIRFilter', function () {
        var filter = new MEPH.audio.effects.FIRFilter();

        expect(filter).toBeTruthy();
    });
});﻿/**
 * @class MEPH.audio.AudioResources
 * Audio resources are tracked from this service.
 **/
MEPH.define('MEPH.audio.effects.AAFilter', {
    requires: ['MEPH.audio.effects.FIRFilter'],
    statics: {
        TWOPI: Math.PI * 2,
        PI: Math.PI
    },
    properties: {
        pFIR: null,
        cutoffFreq: .5
    },
    initialize: function (len) {
        var me = this;
        me.pFIR = new MEPH.audio.effects.FIRFilter();
        me.setLength(len);
    },
    setCutoffFreq: function (newCutoffFreq) {
        var me = this;
        me.cutoffFreq = newCutoffFreq;
        me.calculateCoeffs();
    },
    getLength: function () {
        var me = this;
        return me.pFIR.getLength();
    },
    setLength: function (len) {
        var me = this;
        me.length = len;
        me.calculateCoeffs();
    },
    assert: function (val) {
        if (!val) {
            throw new Error('not true')
        }
    },
    calculateCoeffs: function () {
        var i;
        var me = this;
        var cntTemp, temp, tempCoeff, h, w;
        var fc2, wc;
        var scaleCoeff, sum;
        var work;
        var coeffs;
        var cutoffFreq = me.cutoffFreq;
        var length = me.length;
        me.assert(length >= 2);
        me.assert(length % 4 == 0);
        me.assert(cutoffFreq >= 0);
        me.assert(cutoffFreq <= 0.5);

        work = new Float32Array(length);
        coeffs = new Float32Array(length);

        fc2 = 2.0 * cutoffFreq;
        wc = Math.PI * fc2;
        tempCoeff = Math.PI * 2 / length;

        sum = 0;
        for (i = 0; i < length; i++) {
            cntTemp = i - (length / 2);

            temp = cntTemp * wc;
            if (temp != 0) {
                h = fc2 * Math.sin(temp) / temp;                     // sinc function
            }
            else {
                h = 1.0;
            }
            w = 0.54 + 0.46 * Math.cos(tempCoeff * cntTemp);       // hamming window

            temp = w * h;
            work[i] = temp;

            // calc net sum of coefficients 
            sum += temp;
        }

        // ensure the sum of coefficients is larger than zero
        me.assert(sum > 0);

        // ensure we've really designed a lowpass filter...
        me.assert(work[length / 2] > 0);
        me.assert(work[length / 2 + 1] > -1e-6);
        me.assert(work[length / 2 - 1] > -1e-6);

        // Calculate a scaling coefficient in such a way that the result can be
        // divided by 16384
        scaleCoeff = 16384.0 / sum;

        for (i = 0; i < length; i++) {
            // scale & round to nearest integer
            temp = work[i] * scaleCoeff;
            temp += (temp >= 0) ? 0.5 : -0.5;
            // ensure no overfloods
            me.assert(temp >= -32768 && temp <= 32767);
            coeffs[i] = temp;
        }

        // Set coefficients. Use divide factor 14 => divide result by 2^14 = 16384
        me.pFIR.setCoefficients(coeffs, length, 14);
    },
    evaluate: function (dest, src, numSamples, numChannels, destIndx, srcIndx) {
        var me = this;
        return me.pFIR.evaluate(dest, src, numSamples, numChannels, destIndx, srcIndx);
    }
});﻿
/* Substitution Generators are generators which substitute a value for a note-on parameter. Two Substitution Generators
 * are currently defined, overridingKeyNumber and overridingVelocity. */

MEPH.define("MEPH.audio.soundfont.chunks.data.operators.SubstitutionOperator", {
    requires: [],
    extend: 'MEPH.audio.soundfont.chunks.data.operators.Operator',
    statics: {
    },
    initialize: function (type, amount)//:int  //:int = 0
    {
        this.callParent(type, amount || 0);
    }
});
﻿/* A Range Generator defines a range of note-on parameters outside of which the zone is undefined. Two Range Generators
 * are currently defined, keyRange and velRange. */


MEPH.define("MEPH.audio.soundfont.chunks.data.operators.RangeOperator", {
    requires: ['MEPH.audio.soundfont.chunks.data.Range'],
    extend: "MEPH.audio.soundfont.chunks.data.operators.Operator",
    statics: {
    },
    properties: {
        high: 0//:int;

    },
    initialize: function (type, values)//:int    //:Array
    {
        this.callParent(type, values[0]);
        this.high = values[1];
    },
    getLow: function ()//:int
    {
        return this.amount;
    },

    getValues: function ()//:Range
    {
        return new MEPH.audio.soundfont.chunks.data.Range(this.type, this.getLow(), this.high);
    }
});
﻿/* An Index Generator’s amount is an index into another data structure. The only two Index Generators are Instrument
 * and sampleID. */



MEPH.define("MEPH.audio.soundfont.chunks.data.operators.IndexOperator", {
    extend: "MEPH.audio.soundfont.chunks.data.operators.Operator",
    requires: [],
    statics: {
    },
    initialize: function (type, amount)//:int  //:int = 0
    {
        this.callParent(type, amount || 0);
    }
});
﻿/**
     * @author Andre Michelle
     * @transformed by Andrew Porter
     */
MEPH.define("MEPH.audio.soundfont.utils.PCM8BitMono44Khz", {
    requires: ['MEPH.audio.soundfont.NoteSample'],
    extend: "MEPH.audio.soundfont.utils.PCMStrategy",

    statics: {},
    properties: {

        //import tonfall.core.Signal;
        _signed: false,// Boolean;

    },
    initialize: function (signed, compressionType)//: Boolean //: Object = null 
    {
        compressionType = compressionType || null;
        this.callParent(compressionType, 44100.0, 1, 8);
        this._signed = signed || false;
    },

    readFrameInSignal: function (data, dataOffset, signal, position) //: ByteArray : Number //: Signal //: Number  //: void
    {
        data.position = dataOffset + position;
        signal.l =
        signal.r = data.readByte() / 0x7F;
    },

    read32BitStereo44KHz: function (data, dataOffset, target, length, startPosition)//: ByteArray   //: Number //: ByteArray   //: Number  //: Number : void
    {
        data.position = dataOffset + startPosition;

        var amplitude;//: Number;

        var i; //int;

        if (this._signed) {
            for (i = 0 ; i < length ; ++i) {
                amplitude = data.readByte() / 0x7F;

                target.writeFloat(amplitude);
                target.writeFloat(amplitude);
            }
        }
        else {
            for (i = 0 ; i < length ; ++i) {
                amplitude = (data.readUnsignedByte() - 0x7F) / 0x7F;

                target.writeFloat(amplitude);
                target.writeFloat(amplitude);
            }
        }
    },

    write32BitStereo44KHz: function (data, target, numSamples) //: ByteArray  //: ByteArray  //: uint : void
    {
        var amplitude;//: Number;

        var i;//: int;

        if (this._signed) {
            for (i = 0 ; i < numSamples ; ++i) {
                amplitude = (data.readFloat() + data.readFloat()) * 0.5;

                if (amplitude > 1.0)
                    target.writeByte(0x7F);
                else
                    if (amplitude < -1.0)
                        target.writeByte(-0x7F);
                    else
                        target.writeByte(amplitude * 0x7F);
            }
        }
        else {
            for (i = 0 ; i < numSamples ; ++i) {
                amplitude = (data.readFloat() + data.readFloat()) * 0.5;

                if (amplitude > 1.0)
                    target.writeByte(0xFF);
                else
                    if (amplitude < -1.0)
                        target.writeByte(0x00);
                    else
                        target.writeByte(amplitude * 0x7F + 0x7F);
            }
        }
    }
});﻿/**
     * @author Andre Michelle
     * @transformed by Andrew Porter
     */
MEPH.define("MEPH.audio.soundfont.utils.PCM16BitMono44Khz", {
    requires: ['MEPH.audio.soundfont.NoteSample'],
    extend: "MEPH.audio.soundfont.utils.PCMStrategy",
    properties: {
    },
    statics: {},
    initialize: function (compressionType, samplerate)//: Object = null 
    {
        if (!compressionType) {
            compressionType = null;
        }
        this.callParent(compressionType, samplerate || 44100.0, 1, 16);
    },
    read32BitStereo44KHz: function (data, dataOffset, target, length, startPosition) //: ByteArray //: Number //: ByteArray //: Number //: Number //: void
    {
        data.position = dataOffset + (startPosition << 1);

        for (var i = 0 ; i < length ; ++i) {
            var amplitude = data.readShort() * 3.051850947600e-05; // DIV 0x7FFF
            target.writeFloat(amplitude);
            target.writeFloat(amplitude);
        }
    },
    stream32BitStereo44KHz: function (data, dataOffset, target, sample, startPosition) //: ByteArray //: Number //: Array[Float32Array] //: Number //: Number //: void
    {
        // data.position = dataOffset + (startPosition << 1);
        // var amplitude = data.readShort() * 3.051850947600e-05; // DIV 0x7FFF
        // target[sample] = Math.random() - .5;
        // target[sample] = amplitude;
    },
    write32BitStereo44KHz: function (data, target, numSamples)//: ByteArray  //: ByteArray  //: uint   : void
    {
        for (var i = 0 ; i < numSamples ; ++i) {
            var amplitude = (data.readFloat() + data.readFloat()) * 0.5;

            if (amplitude > 1.0) {
                target.writeShort(0x7FFF);
            }
            else {
                if (amplitude < -1.0) {
                    target.writeShort(-0x7FFF);
                }
                else {
                    target.writeShort(amplitude * 0x7FFF);
                }
            }
        }
    }
});﻿
/**
 * @author Andre Michelle
 */
MEPH.define("MEPH.audio.soundfont.utils.PCMDecoder", {
    requires: ['MEPH.audio.soundfont.NoteSample',
                'MEPH.audio.soundfont.utils.SFByteArray',
                //"MEPH.audio.soundfont.utils.PCMDecoder",
                "MEPH.audio.soundfont.utils.PCM16BitMono44Khz"],
    extend: "MEPH.audio.soundfont.SFObject",
    properties: {
        _bytes: null,//ByteArray;
        _strategy: null, //IPCMIOStrategy;
    },
    initialize: function (bytes, strategy)//: ByteArray  //: IPCMIOStrategy 
    {
        if (null == bytes)
            throw new Error('bytes must not be null');
        this._bytes = bytes;
        this._strategy = strategy;
    },

    getSeconds: function () {
        return this.getNumSamples() / this._strategy.samplingRate;
    },

    /**
     * @return number of samples converted to target samplingRate (In Flash only 44100Hz)
     */
    getNumSamples: function (targetRate)//: Number = 44100.0  // : Number
    {
        targetRate = targetRate || 44100.0;

        if (this._strategy.samplingRate == targetRate) {
            return this.getNumSamples();
        }
        else {
            return Math.floor(this.getNumSamples() * targetRate / this._strategy.samplingRate);
        }
    },

    /**
     * Decodes audio from format into Flashplayer sound properties (stereo,float,44100Hz)
     * 
     * @return The number of samples has been read
     */
    extract: function (target, length, startPosition)//:ByteArray  //:Number  //:Number = -1.0  //: Number
    {
        if (startPosition >= this.getNumSamples())
            return 0.0;
        if (startPosition + length > this.getNumSamples()) {
            length = this.getNumSamples() - startPosition;
        }

        this._strategy.read32BitStereo44KHz(this._bytes, this.getDataOffset(), target, length, startPosition);

        return length;
    },

    /**
     * Decodes audio from format into Float32Array sound properties (stereo,float,44100Hz)
     * 
     * @return The number of samples has been read
     */
    stream: function (target, pos, startPosition)//:Array[Float32Array]  //:Number  //:Number = -1.0  //: Number
    {
        //var length;
        //if (startPosition >= this.getNumSamples())
        //    return 0.0;
        //if (startPosition  > this.getNumSamples()) {
        //    length = this.getNumSamples() - startPosition;
        //}

        //this._strategy.stream32BitStereo44KHz(this._bytes, this.getDataOffset(), target, pos, startPosition);

        //return length;
    },

    getSupported: function ()//: Boolean
    {
        return null != this._strategy;
    },

    getCompressionType: function ()//: *
    {
        return this._strategy.getCompressionType();
    },

    getNumSamples: function ()//: Number
    {
        if (this._bytes instanceof SFByteArray) {
            return this._bytes._source.byteLength / this._strategy.getBlockAlign();
        }
        return this._bytes.length / this._strategy.getBlockAlign();
    },

    getSamplingRate: function ()//: Number
    {
        return this._strategy.getSamplingRate();
    },

    getNumChannels: function ()//: int
    {
        return this._strategy.getNumChannels();
    },

    getBits: function ()//: int
    {
        return this._strategy.getBits();
    },

    getBlockAlign: function ()//: int
    {
        return this._strategy.getBlockAlign();
    },

    getDataOffset: function ()// : Number
    {
        return 0;
    },

    getBytes: function () //: ByteArray
    {
        return this._bytes;
    },
    dispose: function () //: void
    {
        this._bytes = null;
    },

    toString: function ()//: String
    {
        return '[Decoder strategy: ' + this._strategy + ', numSamples: ' + this.getNumSamples() + ']';
    }
});﻿/**
 * NoteSample represents a sample waveform and a series of properties that modify it. These properties are generated
 * by the getNoteSample() function of the SoundFont class. It should provide all the ingredients necessary to
 * produce a musical note for a given keyNum/velocity pair.
 */


MEPH.define("MEPH.audio.soundfont.NoteSample", {
    requires: ['MEPH.audio.soundfont.chunks.data.SampleRecord',
                //"MEPH.audio.soundfont.NoteSample",
                'MEPH.audio.soundfont.utils.SFByteArray'],
    extend: 'MEPH.audio.soundfont.SoundPropertyObject',
    statics: {
        PROPERTY_NAMES: [],//:Array = 
        DEFAULTS: {},//:Object = ;
    },
    properties: {
        // Tuning
        overridingRootKey: -1,//:int = ;
        velocity: -1,//:int = ;
        keyNum: -1,//:int = ;
        // Sample offsets
        startAddrsOffset: 0,///:int = ;
        endAddrsOffset: 0,//:int = ;
        startLoopAddrsOffset: 0,//:int = ;
        endLoopAddrsOffset: 0,//:int = ;
        startAddrsCoarseOffset: 0,//:int = ;
        endAddrsCoarseOffset: 0,//:int = ;
        startLoopAddrsCoarseOffset: 0,//:int = ;
        endLoopAddrsCoarseOffset: 0,//:int = ;
        // Sample mode & link
        sampleMode: 0,//:int = ;
        sampleLink: 0,//:int = ;
        // In a category by inself
        exclusiveClass: 0,//

        sample: null,//:SampleRecord;

        _sampleData: null,//:ByteArray;

    },
    initialize: function (sample, keyNum, velocity)//:SampleRecord  //:int //:int
    {
        this.callParent("NoteSample");
        this.sample = sample;
        if (NoteSample.PROPERTY_NAMES.length == 0) {
            this.initStaticConstants(NoteSample.PROPERTY_NAMES, NoteSample.DEFAULTS);
        }
        this.generateSampleData(sample);
        this.keyNum = keyNum;
        this.velocity = velocity;
    },
    // Fill the _sampleData ByteArray with values from the sample waveform.
    generateSampleData: function (sample)//:SampleRecord //:void
    {
        var arraybuffer = new ArrayBuffer(this.getEnd() - this.getStart());
        this._sampleData = new SFByteArray(arraybuffer);
        //this._sampleData.endian = Endian.LITTLE_ENDIAN;
        this._sampleData.copy(sample.bytes, this.getStart(), this.getEnd() - this.getStart());
        this._sampleData.position = 0;
    },

    getSampleData: function ()//:ByteArray
    {
        return this._sampleData;
    },

    isDefault: function (prop)//:String //function :Boolean
    {
        return NoteSample.PROPERTY_NAMES.indexOf(prop) != -1 && NoteSample.DEFAULTS[prop] == this[prop];
    },
    // The multiplier to apply to the sample to produce the desired note for the given MIDI keyNum.
    getTransposition: function (keyNum)//:int //:Number
    {
        return this.noteToFrequency(keyNum) / this.rootFrequency;
    },
    /**
     * Note: note can contain a fractional portion. That way any cents-based adjustments can be added to the base midi
     * note int value
     */
    noteToFrequency: function (note)//:Number = 60:Number
    {
        if (note == null || note == undefined) {
            note = 60;
        }
        return 440 * Math.pow(2.0, (note - 69) / 12);
    },

    // The keyNum that represents the note for the original recorded sample.
    getRootKey: function ()//:int
    {
        return (this.isDefault("overridingRootKey")) ? this.sample.originalPitch : this.overridingRootKey;
    },

    // The rootKey modified by any coarse and fine correction values.
    getRootFrequency: function ()//:Number
    {
        return this.noteToFrequency(this.rootKey + this.sample.pitchCorrection * 0.1 + this.coarseTune + this.fineTune * 0.01);
    },

    getLength: function ()//:uint
    {
        return this.end - this.start;
    },

    getStart: function ()//:uint
    {
        return this.sample.start + this.startAddrsCoarseOffset * 32768 + this.startAddrsOffset;
    },

    getEnd: function ()//:uint
    {
        return this.sample.end + this.endAddrsCoarseOffset * 32768 + this.endAddrsOffset;
    },

    getNumChannels: function ()//:int
    {
        return this.sample.numChannels;
    },

    getLinkedSampleIndex: function ()//:int
    {
        return (this.numChannels == 2) ? this.sample.sampleLink : -1;
    },

    getLoopStart: function ()//:uint
    {
        return this.sample.loopStart + this.startLoopAddrsCoarseOffset * 32768 + this.startLoopAddrsOffset;
    },

    getLoopEnd: function ()//:uint
    {
        return this.sample.loopEnd + this.endLoopAddrsCoarseOffset * 32768 + this.endLoopAddrsOffset;
    }
});
﻿/*
 * Copyright (C) 2009 Apple Inc. All Rights Reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

// J3DI (Jedi) - A support library for WebGL.

/*
    J3DI Math Classes. Currently includes:

        J3DIMatrix4 - A 4x4 Matrix
*/

/*
    J3DIMatrix4 class

    This class implements a 4x4 matrix. It has functions which duplicate the
    functionality of the OpenGL matrix stack and glut functions. On browsers
    that support it, CSSMatrix is used to accelerate operations.

    IDL:

    [
        Constructor(in J3DIMatrix4 matrix),                 // copy passed matrix into new J3DIMatrix4
        Constructor(in sequence[float] array)               // create new J3DIMatrix4 with 16 floats (row major)
        Constructor()                                       // create new J3DIMatrix4 with identity matrix
    ]
    interface J3DIMatrix4 {
        void load(in J3DIMatrix4 matrix);                   // copy the values from the passed matrix
        void load(in sequence[float] array);                // copy 16 floats into the matrix
        sequence[float] getAsArray();                       // return the matrix as an array of 16 floats
        Float32Array getAsFloat32Array();             // return the matrix as a Float32Array with 16 values
        void setUniform(in WebGLRenderingContext ctx,       // Send the matrix to the passed uniform location in the passed context
                        in WebGLUniformLocation loc,
                        in boolean transpose);
        void makeIdentity();                                // replace the matrix with identity
        void transpose();                                   // replace the matrix with its transpose
        void invert();                                      // replace the matrix with its inverse

        void translate(in float x, in float y, in float z); // multiply the matrix by passed translation values on the right
        void translate(in J3DVector3 v);                    // multiply the matrix by passed translation values on the right
        void scale(in float x, in float y, in float z);     // multiply the matrix by passed scale values on the right
        void scale(in J3DVector3 v);                        // multiply the matrix by passed scale values on the right
        void rotate(in float angle,                         // multiply the matrix by passed rotation values on the right
                    in float x, in float y, in float z);    // (angle is in degrees)
        void rotate(in float angle, in J3DVector3 v);       // multiply the matrix by passed rotation values on the right
                                                            // (angle is in degrees)
        void multiply(in CanvasMatrix matrix);              // multiply the matrix by the passed matrix on the right
        void divide(in float divisor);                      // divide the matrix by the passed divisor
        void ortho(in float left, in float right,           // multiply the matrix by the passed ortho values on the right
                   in float bottom, in float top,
                   in float near, in float far);
        void frustum(in float left, in float right,         // multiply the matrix by the passed frustum values on the right
                     in float bottom, in float top,
                     in float near, in float far);
        void perspective(in float fovy, in float aspect,    // multiply the matrix by the passed perspective values on the right
                         in float zNear, in float zFar);
        void lookat(in J3DVector3 eye,                      // multiply the matrix by the passed lookat
                in J3DVector3 center,  in J3DVector3 up);   // values on the right
         bool decompose(in J3DVector3 translate,            // decompose the matrix into the passed vector
                        in J3DVector3 rotate,
                        in J3DVector3 scale,
                        in J3DVector3 skew,
                        in sequence[float] perspective);
    }

    [
        Constructor(in J3DVector3 vector),                  // copy passed vector into new J3DVector3
        Constructor(in sequence[float] array)               // create new J3DVector3 with 3 floats from array
        Constructor(in float x, in float y, in float z)     // create new J3DVector3 with 3 floats
        Constructor()                                       // create new J3DVector3 with (0,0,0)
    ]
    interface J3DVector3 {
        void load(in J3DVector3 vector);                    // copy the values from the passed vector
        void load(in sequence[float] array);                // copy 3 floats into the vector from array
        void load(in float x, in float y, in float z);      // copy 3 floats into the vector
        sequence[float] getAsArray();                       // return the vector as an array of 3 floats
        Float32Array getAsFloat32Array();             // return the matrix as a Float32Array with 16 values
        void multMatrix(in J3DIMatrix4 matrix);             // multiply the vector by the passed matrix (on the right)
        float vectorLength();                               // return the length of the vector
        float dot();                                        // return the dot product of the vector
        void cross(in J3DVector3 v);                        // replace the vector with vector x v
        void divide(in float divisor);                      // divide the vector by the passed divisor
    }
*/
/**
* @class MEPH.math.J3DIVector3
*  [
*        Constructor(in J3DVector3 vector),                  // copy passed vector into new J3DVector3
*        Constructor(in sequence[float] array)               // create new J3DVector3 with 3 floats from array
*        Constructor(in float x, in float y, in float z)     // create new J3DVector3 with 3 floats
*        Constructor()                                       // create new J3DVector3 with (0,0,0)
*    ]
*    interface J3DVector3 {
*        void load(in J3DVector3 vector);                    // copy the values from the passed vector
*        void load(in sequence[float] array);                // copy 3 floats into the vector from array
*        void load(in float x, in float y, in float z);      // copy 3 floats into the vector
*        sequence[float] getAsArray();                       // return the vector as an array of 3 floats
*        Float32Array getAsFloat32Array();             // return the matrix as a Float32Array with 16 values
*        void multMatrix(in J3DIMatrix4 matrix);             // multiply the vector by the passed matrix (on the right)
*        float vectorLength();                               // return the length of the vector
*        float dot();                                        // return the dot product of the vector
*        void cross(in J3DVector3 v);                        // replace the vector with vector x v
*        void divide(in float divisor);                      // divide the vector by the passed divisor
*    }
*/
MEPH.define('MEPH.math.J3DIVector3', {
    alternateNames: 'J3DIVector3',
    //
    // J3DIVector3
    //
    initialize: function (x, y, z) {
        this.load(x, y, z);
    },

    load: function (x, y, z) {
        if (typeof x == 'object' && "length" in x) {
            this[0] = x[0];
            this[1] = x[1];
            this[2] = x[2];
        }
        else if (typeof x == 'number') {
            this[0] = x;
            this[1] = y;
            this[2] = z;
        }
        else {
            this[0] = 0;
            this[1] = 0;
            this[2] = 0;
        }
    },
    getAsArray: function () {
        return [this[0], this[1], this[2]];
    },

    getAsFloat32Array: function () {
        return new Float32Array(this.getAsArray());
    },

    vectorLength: function () {
        return Math.sqrt(this[0] * this[0] + this[1] * this[1] + this[2] * this[2]);
    },

    divide: function (divisor) {
        this[0] /= divisor; this[1] /= divisor; this[2] /= divisor;
    },

    cross: function (v) {
        this[0] = this[1] * v[2] - this[2] * v[1];
        this[1] = -this[0] * v[2] + this[2] * v[0];
        this[2] = this[0] * v[1] - this[1] * v[0];
    },


    dot: function (v) {
        return this[0] * v[0] + this[1] * v[1] + this[2] * v[2];
    },

    combine: function (v, ascl, bscl) {
        this[0] = (ascl * this[0]) + (bscl * v[0]);
        this[1] = (ascl * this[1]) + (bscl * v[1]);
        this[2] = (ascl * this[2]) + (bscl * v[2]);
    },

    multVecMatrix: function (matrix) {
        var x = this[0];
        var y = this[1];
        var z = this[2];

        this[0] = matrix.$matrix.m41 + x * matrix.$matrix.m11 + y * matrix.$matrix.m21 + z * matrix.$matrix.m31;
        this[1] = matrix.$matrix.m42 + x * matrix.$matrix.m12 + y * matrix.$matrix.m22 + z * matrix.$matrix.m32;
        this[2] = matrix.$matrix.m43 + x * matrix.$matrix.m13 + y * matrix.$matrix.m23 + z * matrix.$matrix.m33;
        var w = matrix.$matrix.m44 + x * matrix.$matrix.m14 + y * matrix.$matrix.m24 + z * matrix.$matrix.m34;
        if (w != 1 && w != 0) {
            this[0] /= w;
            this[1] /= w;
            this[2] /= w;
        }
    },

    toString: function () {
        return "[" + this[0] + "," + this[1] + "," + this[2] + "]";
    }
});﻿/* Value Generators are generators whose value directly affects a signal processing parameter. Most generators are
 * value generators. */


MEPH.define("MEPH.audio.soundfont.chunks.data.operators.ValueOperator", {
    requires: [],
    extend: 'MEPH.audio.soundfont.chunks.data.operators.Operator',
    statics: {
    },
    properties: {},
    initialize: function (type, amount)//:int     //:int = 0
    {
        this.callParent(type, amount);
    }
});
﻿/* Sample Generators are generators which directly affect a sample’s properties. These generators are undefined at the
 * preset level. The currently defined Sample Generators are the eight address offset generators, the sampleModes
 * generator, the Overriding Root Key generator and the Exclusive Class generator. */





MEPH.define("MEPH.audio.soundfont.chunks.data.operators.SampleOperator", {
    requires: [],
    extend: "MEPH.audio.soundfont.chunks.data.operators.Operator",
    statics: {
    },
    initialize: function (type, amount)//:int  //:int = 0
    {
        this.callParent(type, amount || 0);
    }
});
﻿/*
    The RIFF (Resource Interchange File Format) is a tagged file structure developed for multimedia resource files,
    and is described in some detail in the Microsoft Windows SDK Multimedia Programmer’s Reference. The tagged-file
    structure is useful because it helps prevent compatibility problems which can occur as the file definition changes
    over time. Because each piece of data in the file is identified by a standard header, an application that does
    not recognize a given data element can skip over the unknown information.

    A RIFF file is constructed from a basic building block called a “chunk.” In ‘C’ syntax, a chunk is defined:

    typedef DWORD FOURCC;    // Four-character code

    typedef struct
    {
        FOURCC DWORD BYTE
        ckID;    // A chunk ID identifies the type of data within the chunk.
        ckSize;    // The size of the chunk data in bytes, excluding any pad byte.
        ckDATA[ckSize];    // The actual data plus a pad byte if req’d to word align.
    };
    Two types of chunks, the “RIFF” and “LIST” chunks, may contain nested chunks called sub-chunks as their data.
*/


MEPH.define("MEPH.audio.soundfont.chunks.Chunk", {
    requires: ['MEPH.audio.soundfont.utils.SFByteArray'],
    extend: 'MEPH.audio.soundfont.SFObject',
    statics: {

        /// import com.ferretgodmother.soundfont.utils.SFByteArray;
        /// import com.ferretgodmother.soundfont.SFObject;

        RIFF_TAG: "RIFF",//:String = 
        LIST_TAG: "LIST",//:String = 
    },
    properties: {
        _format: null,//protected var ;
        _chunkSize: 0//:uint;
    },
    initialize: function (type, source)//:SFByteArray = null
    {
        this.callParent(type);
        if (source != null) {
            this.parse(source);
        }
    },
    parse: function (value)//:SFByteArray :void
    {
        // ABSTRACT
    }
});
﻿/**
 * @class MEPH.mobile.services.MobileServices
 * A class for requesting object resources.
 */
MEPH.define('MEPH.mobile.services.MobileServices', {
    alternateNames: 'MEPH.MobileServices',
    requires: ['MEPH.ioc.Container'],
    statics: {
        cache: [],
        /**
         * Gets an instance of the requested service.
         * @param {String} serviceName
         */
        get: function (serviceName) {

            var result,
                cache = MEPH.Array(MEPH.MobileServices.cache),
                serviceConfig = MEPH.IOC.getServices().first(function (x) {
                    return x.name === serviceName;
                });
            if (!serviceConfig) {
                return Promise.resolve().then(function () { return null; });
            }
            if (serviceConfig.static) {
                result = cache.first(function (x) { return x.name === serviceName; });
                if (result) {
                    return Promise.resolve().then(function () { return result.instance; });
                }
            }
            return MEPH.MobileServices.createInstance(serviceConfig).then(function (instance) {
                if (serviceConfig.static) {
                    cache.push({
                        name: serviceConfig.name,
                        config: serviceConfig.config,
                        type: serviceConfig.type,
                        instance: instance
                    });
                }
                return instance;
            });
        },
        add: function (instance, serviceConfig) {
            var cache = MEPH.Array(MEPH.MobileServices.cache);
            MEPH.IOC.register(serviceConfig);
            cache.push({
                name: serviceConfig.name,
                config: serviceConfig.config,
                type: serviceConfig.type,
                instance: instance
            });
        },
        /**
         * Creates an instance based on the config.
         **/
        createInstance: function (config) {
            return Promise.resolve().then(function () {
                return MEPH.create(config.type).then(function ($class) {
                    var instance = new $class(config.config);
                    return instance;
                })
            });
        }
    }
});﻿/**
 * SoundFont represents the parsed and compiled contents of a SoundFont (sf2) file. It abstracts the SoundFont
 * structure to make it easier to access the elements you will usually want: the presets and instruments. You can
 * also use the getNoteSample function to access the sample data for a specified keyNum and velocity. The data
 * property contains the SoundFontChunk which provides access to the lower-level data of the file.
 */

MEPH.define("MEPH.audio.soundfont.SoundFont", {
    requires: ['MEPH.audio.soundfont.chunks.data.DataChunk',
               'MEPH.audio.soundfont.chunks.data.PresetRecord',
                'MEPH.audio.soundfont.Preset',
                'MEPH.audio.soundfont.NoteSample',
                'MEPH.audio.soundfont.chunks.SoundFontChunk',
                'MEPH.audio.soundfont.chunks.data.InstrumentRecord',
                'MEPH.audio.soundfont.Instrument',
                'MEPH.audio.soundfont.chunks.data.SampleRecord'],
    extend: 'MEPH.audio.soundfont.SFObject',
    properties: {
        _instruments: null,//:Array = 8
        _presets: null,//:Array = 
        _selectedPreset: undefined,//Preset;
        _data: undefined, // SoundFontChunk;
    },
    initialize: function (data) //:SoundFontChunk
    {
        this._instruments = [];
        this._presets = [];
        this.callParent("SoundFont");
        this.nonSerializedProperties.push("data");
        this.setData(data);
    },
    getSelectedPreset: function ()//:Preset
    {
        return this._selectedPreset;
    },

    getPresets: function ()//:Array
    {
        return this._presets.slice();
    },

    getInstruments: function ()//:Array
    {
        return this._instruments.slice();
    },

    getData: function ()//:SoundFontChunk
    {
        return this._data;
    },

    setData: function (value)//:SoundFontChunk // :void
    {
        this._data = value;
        this.buildInstruments(this._data.dataChunk);
        this.buildPresets(this._data.dataChunk);
    },

    // Construct a NoteSample object for the given keyNum/velocity pair.
    getNoteSample: function (keyNum, velocity)// :int// :int// :NoteSample
    {
        var presetZone = this.getPresetZone(keyNum, velocity);//:PresetZone 
        if (presetZone != null) {
            var instrumentZone = presetZone.getInstrumentZone(keyNum, velocity);//:InstrumentZone 
            if (instrumentZone != null) {
                var sample = this._data.getSampleRecord(instrumentZone.sampleID);//:SampleRecord 
                var noteSample = new NoteSample(sample, keyNum, velocity); //:NoteSample 
                for (var prop in NoteSample.PROPERTY_NAMES) //:String 
                {
                    // Instrument generators replace the corresponding properties of the sample
                    noteSample[prop] = instrumentZone[prop];
                    // Preset generators are added to the corresponding properties of the sample + Instrument generator
                    if (presetZone.hasOwnProperty(prop)) {
                        noteSample[prop] += presetZone[prop];
                    }
                }
                return noteSample;
            }
        }
        return null;
    },

    getInstrumentZone: function (keyNum, velocity)//:int //:int //:InstrumentZone
    {
        var presetZone = this.getPresetZone(keyNum, velocity);//:PresetZone 
        return (presetZone != null) ? presetZone.getInstrumentZone(keyNum, velocity) : null;
    },

    getPresetZone: function (keyNum, velocity)//:int ///:int //:PresetZone
    {
        return (this.getSelectedPreset() != null) ? this.getSelectedPreset().getPresetZone(keyNum, velocity) : null;
    },

    selectPreset: function (presetID)//:int // :void
    {
        this._selectedPreset = this.getPreset(presetID);
    },

    getPreset: function (presetID)//:int //:Preset
    {
        for (var i = 0; i < this._presets.length ; i++)//:Preset
        {
            var preset = this._presets[i];
            if (preset.getPresetID() == presetID) {
                return preset;
            }
        }
        return null;
    },
    getPresetIds: function () {
        var me = this;
        return me._presets.select(function (x) {
            return x.getPresetID();
        })
    },
    buildInstruments: function (dataChunk) //:DataChunk //:void
    {
        for (var i = 0  ; i < dataChunk.getInstrumentRecords().length ; i++)//:InstrumentRecord
        {
            var record = dataChunk.getInstrumentRecords()[i];
            var instrument = new Instrument(record);//Instrument 
            instrument.buildZones(dataChunk.getSampleRecords());
            this._instruments.push(instrument);
        }
    },

    buildPresets: function (dataChunk)//:DataChunk //:void
    {
        for (var i = 0 ; i < dataChunk.getPresetRecords().length ; i++)//:PresetRecord
        {
            var record = dataChunk.getPresetRecords()[i];
            var preset = new Preset(record);//:Preset 
            preset.buildZones(this.getInstruments());
            this._presets.push(preset);
        }
    }
});
﻿/*
    A SoundFont 2 compatible RIFF file comprises three chunks: an INFO-list chunk containing a number of required and
    optional sub-chunks describing the file, its history, and its intended use, an sdta-list chunk comprising a single
    sub-chunk containing any referenced digital audio samples, and a pdta-list chunk containing nine sub-chunks which
    define the articulation of the digital audio data.
*/

MEPH.define("MEPH.audio.soundfont.chunks.SoundFontChunk", {
    requires: ['MEPH.audio.soundfont.utils.SFByteArray',
    'MEPH.audio.soundfont.chunks.data.DataChunk',
    'MEPH.audio.soundfont.chunks.info.InfoChunk',
    'MEPH.audio.soundfont.chunks.samples.SamplesChunk',
    'MEPH.audio.soundfont.chunks.data.SampleRecord'],
    extend: 'MEPH.audio.soundfont.chunks.Chunk',
    statics: {
        SOUND_FONT_BANK_TAG: "sfbk",//:String =  ;
    },
    properties: {
        infoChunk: null,//:InfoChunk;
        samplesChunk: null,//:SamplesChunk;
        dataChunk: null,//:DataChunk;
    },
    initialize: function (source)//:SFByteArray = null
    {
        this.callParent("SoundFontChunk", source);
    },

    getPresetRecords: function ()//:Array
    {
        return this.dataChunk.getPresetRecords();
    },
    getInstrumentRecords: function ()//:Array
    {
        return this.dataChunk.getInstrumentRecords();
    },

    getSampleRecords: function ()//:Array
    {
        return this.dataChunk.getSampleRecords();
    },

    getNumSamples: function ()//:Number
    {
        return this.dataChunk.getNumSamples();
    },

    getSampleRecord: function (index)// :int //:SampleRecord
    {
        return this.dataChunk.getSampleRecord(index);
    },

    parse: function (bytes)//:SFByteArray //:void
    {
        var format = bytes.readString(4);//:String 
        var chunkSize = bytes.readDWord();//:uint 
        if (format != Chunk.RIFF_TAG) {
            throw new Error("SoundFontParser::Incorrect format: " + format);
        }
        var type = bytes.readString(4);//:String 
        if (type != SoundFontChunk.SOUND_FONT_BANK_TAG) {
            throw new Error("SoundFontParser::Incorrect type: " + type);
        }
        while (bytes.bytesAvailable() > 7) {
            format = bytes.readString(4);
            chunkSize = bytes.readDWord();
            if (format == Chunk.LIST_TAG) {
                type = bytes.readString(4);
                switch (type) {
                    case InfoChunk.INFO_TAG:
                        {
                            this.infoChunk = new InfoChunk(bytes);
                            break;
                        }
                    case SamplesChunk.SAMPLE_DATA_TAG:
                        {
                            this.samplesChunk = new SamplesChunk(bytes);
                            break;
                        }
                    case DataChunk.DATA_TAG:
                        {
                            this.dataChunk = new DataChunk(bytes);
                            break;
                        }
                }
            }
        }
        this.dataChunk.setSampleBytes(this.samplesChunk);
    }
});(function(global) {
  'use strict';

  //
  // Utilities
  //

  /**
   * @param {number} a The number to test.
   * @param {number} min The minimum value in the range, inclusive.
   * @param {number} max The maximum value in the range, inclusive.
   * @return {boolean} True if a >= min and a <= max.
   */
  function inRange(a, min, max) {
    return min <= a && a <= max;
  }

  /**
   * @param {number} n The numerator.
   * @param {number} d The denominator.
   * @return {number} The result of the integer division of n by d.
   */
  function div(n, d) {
    return Math.floor(n / d);
  }


  //
  // Implementation of Encoding specification
  // http://dvcs.w3.org/hg/encoding/raw-file/tip/Overview.html
  //

  //
  // 3. Terminology
  //

  //
  // 4. Encodings
  //

  /** @const */ var EOF_byte = -1;
  /** @const */ var EOF_code_point = -1;

  /**
   * @constructor
   * @param {Uint8Array} bytes Array of bytes that provide the stream.
   */
  function ByteInputStream(bytes) {
    /** @type {number} */
    var pos = 0;

    /** @return {number} Get the next byte from the stream. */
    this.get = function() {
      return (pos >= bytes.length) ? EOF_byte : Number(bytes[pos]);
    };

    /** @param {number} n Number (positive or negative) by which to
     *      offset the byte pointer. */
    this.offset = function(n) {
      pos += n;
      if (pos < 0) {
        throw new Error('Seeking past start of the buffer');
      }
      if (pos > bytes.length) {
        throw new Error('Seeking past EOF');
      }
    };

    /**
     * @param {Array.<number>} test Array of bytes to compare against.
     * @return {boolean} True if the start of the stream matches the test
     *     bytes.
     */
    this.match = function(test) {
      if (test.length > pos + bytes.length) {
        return false;
      }
      var i;
      for (i = 0; i < test.length; i += 1) {
        if (Number(bytes[pos + i]) !== test[i]) {
          return false;
        }
      }
      return true;
    };
  }

  /**
   * @constructor
   * @param {Array.<number>} bytes The array to write bytes into.
   */
  function ByteOutputStream(bytes) {
    /** @type {number} */
    var pos = 0;

    /**
     * @param {...number} var_args The byte or bytes to emit into the stream.
     * @return {number} The last byte emitted.
     */
    this.emit = function(var_args) {
      /** @type {number} */
      var last = EOF_byte;
      var i;
      for (i = 0; i < arguments.length; ++i) {
        last = Number(arguments[i]);
        bytes[pos++] = last;
      }
      return last;
    };
  }

  /**
   * @constructor
   * @param {string} string The source of code units for the stream.
   */
  function CodePointInputStream(string) {
    /**
     * @param {string} string Input string of UTF-16 code units.
     * @return {Array.<number>} Code points.
     */
    function stringToCodePoints(string) {
      /** @type {Array.<number>} */
      var cps = [];
      // Based on http://www.w3.org/TR/WebIDL/#idl-DOMString
      var i = 0, n = string.length;
      while (i < string.length) {
        var c = string.charCodeAt(i);
        if (!inRange(c, 0xD800, 0xDFFF)) {
          cps.push(c);
        } else if (inRange(c, 0xDC00, 0xDFFF)) {
          cps.push(0xFFFD);
        } else { // (inRange(cu, 0xD800, 0xDBFF))
          if (i === n - 1) {
            cps.push(0xFFFD);
          } else {
            var d = string.charCodeAt(i + 1);
            if (inRange(d, 0xDC00, 0xDFFF)) {
              var a = c & 0x3FF;
              var b = d & 0x3FF;
              i += 1;
              cps.push(0x10000 + (a << 10) + b);
            } else {
              cps.push(0xFFFD);
            }
          }
        }
        i += 1;
      }
      return cps;
    }

    /** @type {number} */
    var pos = 0;
    /** @type {Array.<number>} */
    var cps = stringToCodePoints(string);

    /** @param {number} n The number of bytes (positive or negative)
     *      to advance the code point pointer by.*/
    this.offset = function(n) {
      pos += n;
      if (pos < 0) {
        throw new Error('Seeking past start of the buffer');
      }
      if (pos > cps.length) {
        throw new Error('Seeking past EOF');
      }
    };


    /** @return {number} Get the next code point from the stream. */
    this.get = function() {
      if (pos >= cps.length) {
        return EOF_code_point;
      }
      return cps[pos];
    };
  }

  /**
   * @constructor
   */
  function CodePointOutputStream() {
    /** @type {string} */
    var string = '';

    /** @return {string} The accumulated string. */
    this.string = function() {
      return string;
    };

    /** @param {number} c The code point to encode into the stream. */
    this.emit = function(c) {
      if (c <= 0xFFFF) {
        string += String.fromCharCode(c);
      } else {
        c -= 0x10000;
        string += String.fromCharCode(0xD800 + ((c >> 10) & 0x3ff));
        string += String.fromCharCode(0xDC00 + (c & 0x3ff));
      }
    };
  }

  /**
   * @constructor
   * @param {string} message Description of the error.
   */
  function EncodingError(message) {
    this.name = 'EncodingError';
    this.message = message;
    this.code = 0;
  }
  EncodingError.prototype = Error.prototype;

  /**
   * @param {boolean} fatal If true, decoding errors raise an exception.
   * @param {number=} opt_code_point Override the standard fallback code point.
   * @return {number} The code point to insert on a decoding error.
   */
  function decoderError(fatal, opt_code_point) {
    if (fatal) {
      throw new EncodingError('Decoder error');
    }
    return opt_code_point || 0xFFFD;
  }

  /**
   * @param {number} code_point The code point that could not be encoded.
   */
  function encoderError(code_point) {
    throw new EncodingError('The code point ' + code_point +
                            ' could not be encoded.');
  }

  /**
   * @param {string} label The encoding label.
   * @return {?{name:string,labels:Array.<string>}}
   */
  function getEncoding(label) {
    label = String(label).trim().toLowerCase();
    if (Object.prototype.hasOwnProperty.call(label_to_encoding, label)) {
      return label_to_encoding[label];
    }
    return null;
  }

  /** @type {Array.<{encodings: Array.<{name:string,labels:Array.<string>}>,
   *      heading: string}>} */
  var encodings = [
    {
      'encodings': [
        {
          'labels': [
            'unicode-1-1-utf-8',
            'utf-8',
            'utf8'
          ],
          'name': 'utf-8'
        }
      ],
      'heading': 'The Encoding'
    },
    {
      'encodings': [
        {
          'labels': [
            'cp864',
            'ibm864'
          ],
          'name': 'ibm864'
        },
        {
          'labels': [
            'cp866',
            'ibm866'
          ],
          'name': 'ibm866'
        },
        {
          'labels': [
            'csisolatin2',
            'iso-8859-2',
            'iso-ir-101',
            'iso8859-2',
            'iso_8859-2',
            'l2',
            'latin2'
          ],
          'name': 'iso-8859-2'
        },
        {
          'labels': [
            'csisolatin3',
            'iso-8859-3',
            'iso_8859-3',
            'iso-ir-109',
            'l3',
            'latin3'
          ],
          'name': 'iso-8859-3'
        },
        {
          'labels': [
            'csisolatin4',
            'iso-8859-4',
            'iso_8859-4',
            'iso-ir-110',
            'l4',
            'latin4'
          ],
          'name': 'iso-8859-4'
        },
        {
          'labels': [
            'csisolatincyrillic',
            'cyrillic',
            'iso-8859-5',
            'iso_8859-5',
            'iso-ir-144'
          ],
          'name': 'iso-8859-5'
        },
        {
          'labels': [
            'arabic',
            'csisolatinarabic',
            'ecma-114',
            'iso-8859-6',
            'iso_8859-6',
            'iso-ir-127'
          ],
          'name': 'iso-8859-6'
        },
        {
          'labels': [
            'csisolatingreek',
            'ecma-118',
            'elot_928',
            'greek',
            'greek8',
            'iso-8859-7',
            'iso_8859-7',
            'iso-ir-126'
          ],
          'name': 'iso-8859-7'
        },
        {
          'labels': [
            'csisolatinhebrew',
            'hebrew',
            'iso-8859-8',
            'iso-8859-8-i',
            'iso-ir-138',
            'iso_8859-8',
            'visual'
          ],
          'name': 'iso-8859-8'
        },
        {
          'labels': [
            'csisolatin6',
            'iso-8859-10',
            'iso-ir-157',
            'iso8859-10',
            'l6',
            'latin6'
          ],
          'name': 'iso-8859-10'
        },
        {
          'labels': [
            'iso-8859-13'
          ],
          'name': 'iso-8859-13'
        },
        {
          'labels': [
            'iso-8859-14',
            'iso8859-14'
          ],
          'name': 'iso-8859-14'
        },
        {
          'labels': [
            'iso-8859-15',
            'iso_8859-15'
          ],
          'name': 'iso-8859-15'
        },
        {
          'labels': [
            'iso-8859-16'
          ],
          'name': 'iso-8859-16'
        },
        {
          'labels': [
            'koi8-r',
            'koi8_r'
          ],
          'name': 'koi8-r'
        },
        {
          'labels': [
            'koi8-u'
          ],
          'name': 'koi8-u'
        },
        {
          'labels': [
            'csmacintosh',
            'mac',
            'macintosh',
            'x-mac-roman'
          ],
          'name': 'macintosh'
        },
        {
          'labels': [
            'iso-8859-11',
            'tis-620',
            'windows-874'
          ],
          'name': 'windows-874'
        },
        {
          'labels': [
            'windows-1250',
            'x-cp1250'
          ],
          'name': 'windows-1250'
        },
        {
          'labels': [
            'windows-1251',
            'x-cp1251'
          ],
          'name': 'windows-1251'
        },
        {
          'labels': [
            'ascii',
            'ansi_x3.4-1968',
            'csisolatin1',
            'iso-8859-1',
            'iso8859-1',
            'iso_8859-1',
            'l1',
            'latin1',
            'us-ascii',
            'windows-1252'
          ],
          'name': 'windows-1252'
        },
        {
          'labels': [
            'cp1253',
            'windows-1253'
          ],
          'name': 'windows-1253'
        },
        {
          'labels': [
            'csisolatin5',
            'iso-8859-9',
            'iso-ir-148',
            'l5',
            'latin5',
            'windows-1254'
          ],
          'name': 'windows-1254'
        },
        {
          'labels': [
            'cp1255',
            'windows-1255'
          ],
          'name': 'windows-1255'
        },
        {
          'labels': [
            'cp1256',
            'windows-1256'
          ],
          'name': 'windows-1256'
        },
        {
          'labels': [
            'windows-1257'
          ],
          'name': 'windows-1257'
        },
        {
          'labels': [
            'cp1258',
            'windows-1258'
          ],
          'name': 'windows-1258'
        },
        {
          'labels': [
            'x-mac-cyrillic',
            'x-mac-ukrainian'
          ],
          'name': 'x-mac-cyrillic'
        }
      ],
      'heading': 'Legacy single-byte encodings'
    },
    {
      'encodings': [
        {
          'labels': [
            'chinese',
            'csgb2312',
            'csiso58gb231280',
            'gb2312',
            'gbk',
            'gb_2312',
            'gb_2312-80',
            'iso-ir-58',
            'x-gbk'
          ],
          'name': 'gbk'
        },
        {
          'labels': [
            'gb18030'
          ],
          'name': 'gb18030'
        },
        {
          'labels': [
            'hz-gb-2312'
          ],
          'name': 'hz-gb-2312'
        }
      ],
      'heading': 'Legacy multi-byte Chinese (simplified) encodings'
    },
    {
      'encodings': [
        {
          'labels': [
            'big5',
            'big5-hkscs',
            'cn-big5',
            'csbig5',
            'x-x-big5'
          ],
          'name': 'big5'
        }
      ],
      'heading': 'Legacy multi-byte Chinese (traditional) encodings'
    },
    {
      'encodings': [
        {
          'labels': [
            'cseucpkdfmtjapanese',
            'euc-jp',
            'x-euc-jp'
          ],
          'name': 'euc-jp'
        },
        {
          'labels': [
            'csiso2022jp',
            'iso-2022-jp'
          ],
          'name': 'iso-2022-jp'
        },
        {
          'labels': [
            'csshiftjis',
            'ms_kanji',
            'shift-jis',
            'shift_jis',
            'sjis',
            'windows-31j',
            'x-sjis'
          ],
          'name': 'shift_jis'
        }
      ],
      'heading': 'Legacy multi-byte Japanese encodings'
    },
    {
      'encodings': [
        {
          'labels': [
            'cseuckr',
            'csksc56011987',
            'euc-kr',
            'iso-ir-149',
            'korean',
            'ks_c_5601-1987',
            'ks_c_5601-1989',
            'ksc5601',
            'ksc_5601',
            'windows-949'
          ],
          'name': 'euc-kr'
        },
        {
          'labels': [
            'csiso2022kr',
            'iso-2022-kr'
          ],
          'name': 'iso-2022-kr'
        }
      ],
      'heading': 'Legacy multi-byte Korean encodings'
    },
    {
      'encodings': [
        {
          'labels': [
            'utf-16',
            'utf-16le'
          ],
          'name': 'utf-16'
        },
        {
          'labels': [
            'utf-16be'
          ],
          'name': 'utf-16be'
        }
      ],
      'heading': 'Legacy utf-16 encodings'
    }
  ];

  var name_to_encoding = {};
  var label_to_encoding = {};
  encodings.forEach(function(category) {
    category.encodings.forEach(function(encoding) {
      name_to_encoding[encoding.name] = encoding;
      encoding.labels.forEach(function(label) {
        label_to_encoding[label] = encoding;
      });
    });
  });

  //
  // 5. Indexes
  //

  /**
   * @param {number} pointer The |pointer| to search for.
   * @param {Array.<?number>} index The |index| to search within.
   * @return {?number} The code point corresponding to |pointer| in |index|,
   *     or null if |code point| is not in |index|.
   */
  function indexCodePointFor(pointer, index) {
    return (index || [])[pointer] || null;
  }

  /**
   * @param {number} code_point The |code point| to search for.
   * @param {Array.<?number>} index The |index| to search within.
   * @return {?number} The first pointer corresponding to |code point| in
   *     |index|, or null if |code point| is not in |index|.
   */
  function indexPointerFor(code_point, index) {
    var pointer = index.indexOf(code_point);
    return pointer === -1 ? null : pointer;
  }

  /** @type {Object.<string, (Array.<number>|Array.<Array.<number>>)>} */
  var indexes = global['encoding-indexes'] || {};

  /**
   * @param {number} pointer The |pointer| to search for in the gb18030 index.
   * @return {?number} The code point corresponding to |pointer| in |index|,
   *     or null if |code point| is not in the gb18030 index.
   */
  function indexGB18030CodePointFor(pointer) {
    if ((pointer > 39419 && pointer < 189000) || (pointer > 1237575)) {
      return null;
    }
    var /** @type {number} */ offset = 0,
        /** @type {number} */ code_point_offset = 0,
        /** @type {Array.<Array.<number>>} */ index = indexes['gb18030'];
    var i;
    for (i = 0; i < index.length; ++i) {
      var entry = index[i];
      if (entry[0] <= pointer) {
        offset = entry[0];
        code_point_offset = entry[1];
      } else {
        break;
      }
    }
    return code_point_offset + pointer - offset;
  }

  /**
   * @param {number} code_point The |code point| to locate in the gb18030 index.
   * @return {number} The first pointer corresponding to |code point| in the
   *     gb18030 index.
   */
  function indexGB18030PointerFor(code_point) {
    var /** @type {number} */ offset = 0,
        /** @type {number} */ pointer_offset = 0,
        /** @type {Array.<Array.<number>>} */ index = indexes['gb18030'];
    var i;
    for (i = 0; i < index.length; ++i) {
      var entry = index[i];
      if (entry[1] <= code_point) {
        offset = entry[1];
        pointer_offset = entry[0];
      } else {
        break;
      }
    }
    return pointer_offset + code_point - offset;
  }

  //
  // 7. The encoding
  //

  // 7.1 utf-8

  /**
   * @constructor
   * @param {{fatal: boolean}} options
   */
  function UTF8Decoder(options) {
    var fatal = options.fatal;
    var /** @type {number} */ utf8_code_point = 0,
        /** @type {number} */ utf8_bytes_needed = 0,
        /** @type {number} */ utf8_bytes_seen = 0,
        /** @type {number} */ utf8_lower_boundary = 0;

    /**
     * @param {ByteInputStream} byte_pointer The byte stream to decode.
     * @return {?number} The next code point decoded, or null if not enough
     *     data exists in the input stream to decode a complete code point.
     */
    this.decode = function(byte_pointer) {
      var bite = byte_pointer.get();
      if (bite === EOF_byte) {
        if (utf8_bytes_needed !== 0) {
          return decoderError(fatal);
        }
        return EOF_code_point;
      }
      byte_pointer.offset(1);

      if (utf8_bytes_needed === 0) {
        if (inRange(bite, 0x00, 0x7F)) {
          return bite;
        }
        if (inRange(bite, 0xC2, 0xDF)) {
          utf8_bytes_needed = 1;
          utf8_lower_boundary = 0x80;
          utf8_code_point = bite - 0xC0;
        } else if (inRange(bite, 0xE0, 0xEF)) {
          utf8_bytes_needed = 2;
          utf8_lower_boundary = 0x800;
          utf8_code_point = bite - 0xE0;
        } else if (inRange(bite, 0xF0, 0xF4)) {
          utf8_bytes_needed = 3;
          utf8_lower_boundary = 0x10000;
          utf8_code_point = bite - 0xF0;
        } else {
          return decoderError(fatal);
        }
        utf8_code_point = utf8_code_point * Math.pow(64, utf8_bytes_needed);
        return null;
      }
      if (!inRange(bite, 0x80, 0xBF)) {
        utf8_code_point = 0;
        utf8_bytes_needed = 0;
        utf8_bytes_seen = 0;
        utf8_lower_boundary = 0;
        byte_pointer.offset(-1);
        return decoderError(fatal);
      }
      utf8_bytes_seen += 1;
      utf8_code_point = utf8_code_point + (bite - 0x80) *
          Math.pow(64, utf8_bytes_needed - utf8_bytes_seen);
      if (utf8_bytes_seen !== utf8_bytes_needed) {
        return null;
      }
      var code_point = utf8_code_point;
      var lower_boundary = utf8_lower_boundary;
      utf8_code_point = 0;
      utf8_bytes_needed = 0;
      utf8_bytes_seen = 0;
      utf8_lower_boundary = 0;
      if (inRange(code_point, lower_boundary, 0x10FFFF) &&
          !inRange(code_point, 0xD800, 0xDFFF)) {
        return code_point;
      }
      return decoderError(fatal);
    };
  }

  /**
   * @constructor
   * @param {{fatal: boolean}} options
   */
  function UTF8Encoder(options) {
    var fatal = options.fatal;
    /**
     * @param {ByteOutputStream} output_byte_stream Output byte stream.
     * @param {CodePointInputStream} code_point_pointer Input stream.
     * @return {number} The last byte emitted.
     */
    this.encode = function(output_byte_stream, code_point_pointer) {
      var code_point = code_point_pointer.get();
      if (code_point === EOF_code_point) {
        return EOF_byte;
      }
      code_point_pointer.offset(1);
      if (inRange(code_point, 0xD800, 0xDFFF)) {
        return encoderError(code_point);
      }
      if (inRange(code_point, 0x0000, 0x007f)) {
        return output_byte_stream.emit(code_point);
      }
      var count, offset;
      if (inRange(code_point, 0x0080, 0x07FF)) {
        count = 1;
        offset = 0xC0;
      } else if (inRange(code_point, 0x0800, 0xFFFF)) {
        count = 2;
        offset = 0xE0;
      } else if (inRange(code_point, 0x10000, 0x10FFFF)) {
        count = 3;
        offset = 0xF0;
      }
      var result = output_byte_stream.emit(
          div(code_point, Math.pow(64, count)) + offset);
      while (count > 0) {
        var temp = div(code_point, Math.pow(64, count - 1));
        result = output_byte_stream.emit(0x80 + (temp % 64));
        count -= 1;
      }
      return result;
    };
  }

  name_to_encoding['utf-8'].getEncoder = function(options) {
    return new UTF8Encoder(options);
  };
  name_to_encoding['utf-8'].getDecoder = function(options) {
    return new UTF8Decoder(options);
  };

  //
  // 8. Legacy single-byte encodings
  //

  /**
   * @constructor
   * @param {Array.<number>} index The encoding index.
   * @param {{fatal: boolean}} options
   */
  function SingleByteDecoder(index, options) {
    var fatal = options.fatal;
    /**
     * @param {ByteInputStream} byte_pointer The byte stream to decode.
     * @return {?number} The next code point decoded, or null if not enough
     *     data exists in the input stream to decode a complete code point.
     */
    this.decode = function(byte_pointer) {
      var bite = byte_pointer.get();
      if (bite === EOF_byte) {
        return EOF_code_point;
      }
      byte_pointer.offset(1);
      if (inRange(bite, 0x00, 0x7F)) {
        return bite;
      }
      var code_point = index[bite - 0x80];
      if (code_point === null) {
        return decoderError(fatal);
      }
      return code_point;
    };
  }

  /**
   * @constructor
   * @param {Array.<?number>} index The encoding index.
   * @param {{fatal: boolean}} options
   */
  function SingleByteEncoder(index, options) {
    var fatal = options.fatal;
    /**
     * @param {ByteOutputStream} output_byte_stream Output byte stream.
     * @param {CodePointInputStream} code_point_pointer Input stream.
     * @return {number} The last byte emitted.
     */
    this.encode = function(output_byte_stream, code_point_pointer) {
      var code_point = code_point_pointer.get();
      if (code_point === EOF_code_point) {
        return EOF_byte;
      }
      code_point_pointer.offset(1);
      if (inRange(code_point, 0x0000, 0x007F)) {
        return output_byte_stream.emit(code_point);
      }
      var pointer = indexPointerFor(code_point, index);
      if (pointer === null) {
        encoderError(code_point);
      }
      return output_byte_stream.emit(pointer + 0x80);
    };
  }

  (function() {
    ['ibm864', 'ibm866', 'iso-8859-2', 'iso-8859-3', 'iso-8859-4',
     'iso-8859-5', 'iso-8859-6', 'iso-8859-7', 'iso-8859-8', 'iso-8859-10',
     'iso-8859-13', 'iso-8859-14', 'iso-8859-15', 'iso-8859-16', 'koi8-r',
     'koi8-u', 'macintosh', 'windows-874', 'windows-1250', 'windows-1251',
     'windows-1252', 'windows-1253', 'windows-1254', 'windows-1255',
     'windows-1256', 'windows-1257', 'windows-1258', 'x-mac-cyrillic'
    ].forEach(function(name) {
      var encoding = name_to_encoding[name];
      var index = indexes[name];
      encoding.getDecoder = function(options) {
        return new SingleByteDecoder(index, options);
      };
      encoding.getEncoder = function(options) {
        return new SingleByteEncoder(index, options);
      };
    });
  }());

  //
  // 9. Legacy multi-byte Chinese (simplified) encodings
  //

  // 9.1 gbk

  /**
   * @constructor
   * @param {boolean} gb18030 True if decoding gb18030, false otherwise.
   * @param {{fatal: boolean}} options
   */
  function GBKDecoder(gb18030, options) {
    var fatal = options.fatal;
    var /** @type {number} */ gbk_first = 0x00,
        /** @type {number} */ gbk_second = 0x00,
        /** @type {number} */ gbk_third = 0x00;
    /**
     * @param {ByteInputStream} byte_pointer The byte stream to decode.
     * @return {?number} The next code point decoded, or null if not enough
     *     data exists in the input stream to decode a complete code point.
     */
    this.decode = function(byte_pointer) {
      var bite = byte_pointer.get();
      if (bite === EOF_byte && gbk_first === 0x00 &&
          gbk_second === 0x00 && gbk_third === 0x00) {
        return EOF_code_point;
      }
      if (bite === EOF_byte &&
          (gbk_first !== 0x00 || gbk_second !== 0x00 || gbk_third !== 0x00)) {
        gbk_first = 0x00;
        gbk_second = 0x00;
        gbk_third = 0x00;
        decoderError(fatal);
      }
      byte_pointer.offset(1);
      var code_point;
      if (gbk_third !== 0x00) {
        code_point = null;
        if (inRange(bite, 0x30, 0x39)) {
          code_point = indexGB18030CodePointFor(
              (((gbk_first - 0x81) * 10 + (gbk_second - 0x30)) * 126 +
               (gbk_third - 0x81)) * 10 + bite - 0x30);
        }
        gbk_first = 0x00;
        gbk_second = 0x00;
        gbk_third = 0x00;
        if (code_point === null) {
          byte_pointer.offset(-3);
          return decoderError(fatal);
        }
        return code_point;
      }
      if (gbk_second !== 0x00) {
        if (inRange(bite, 0x81, 0xFE)) {
          gbk_third = bite;
          return null;
        }
        byte_pointer.offset(-2);
        gbk_first = 0x00;
        gbk_second = 0x00;
        return decoderError(fatal);
      }
      if (gbk_first !== 0x00) {
        if (inRange(bite, 0x30, 0x39) && gb18030) {
          gbk_second = bite;
          return null;
        }
        var lead = gbk_first;
        var pointer = null;
        gbk_first = 0x00;
        var offset = bite < 0x7F ? 0x40 : 0x41;
        if (inRange(bite, 0x40, 0x7E) || inRange(bite, 0x80, 0xFE)) {
          pointer = (lead - 0x81) * 190 + (bite - offset);
        }
        code_point = pointer === null ? null :
            indexCodePointFor(pointer, indexes['gbk']);
        if (pointer === null) {
          byte_pointer.offset(-1);
        }
        if (code_point === null) {
          return decoderError(fatal);
        }
        return code_point;
      }
      if (inRange(bite, 0x00, 0x7F)) {
        return bite;
      }
      if (bite === 0x80) {
        return 0x20AC;
      }
      if (inRange(bite, 0x81, 0xFE)) {
        gbk_first = bite;
        return null;
      }
      return decoderError(fatal);
    };
  }

  /**
   * @constructor
   * @param {boolean} gb18030 True if decoding gb18030, false otherwise.
   * @param {{fatal: boolean}} options
   */
  function GBKEncoder(gb18030, options) {
    var fatal = options.fatal;
    /**
     * @param {ByteOutputStream} output_byte_stream Output byte stream.
     * @param {CodePointInputStream} code_point_pointer Input stream.
     * @return {number} The last byte emitted.
     */
    this.encode = function(output_byte_stream, code_point_pointer) {
      var code_point = code_point_pointer.get();
      if (code_point === EOF_code_point) {
        return EOF_byte;
      }
      code_point_pointer.offset(1);
      if (inRange(code_point, 0x0000, 0x007F)) {
        return output_byte_stream.emit(code_point);
      }
      var pointer = indexPointerFor(code_point, indexes['gbk']);
      if (pointer !== null) {
        var lead = div(pointer, 190) + 0x81;
        var trail = pointer % 190;
        var offset = trail < 0x3F ? 0x40 : 0x41;
        return output_byte_stream.emit(lead, trail + offset);
      }
      if (pointer === null && !gb18030) {
        return encoderError(code_point);
      }
      pointer = indexGB18030PointerFor(code_point);
      var byte1 = div(div(div(pointer, 10), 126), 10);
      pointer = pointer - byte1 * 10 * 126 * 10;
      var byte2 = div(div(pointer, 10), 126);
      pointer = pointer - byte2 * 10 * 126;
      var byte3 = div(pointer, 10);
      var byte4 = pointer - byte3 * 10;
      return output_byte_stream.emit(byte1 + 0x81,
                                     byte2 + 0x30,
                                     byte3 + 0x81,
                                     byte4 + 0x30);
    };
  }

  name_to_encoding['gbk'].getEncoder = function(options) {
    return new GBKEncoder(false, options);
  };
  name_to_encoding['gbk'].getDecoder = function(options) {
    return new GBKDecoder(false, options);
  };

  // 9.2 gb18030
  name_to_encoding['gb18030'].getEncoder = function(options) {
    return new GBKEncoder(true, options);
  };
  name_to_encoding['gb18030'].getDecoder = function(options) {
    return new GBKDecoder(true, options);
  };

  // 9.3 hz-gb-2312

  /**
   * @constructor
   * @param {{fatal: boolean}} options
   */
  function HZGB2312Decoder(options) {
    var fatal = options.fatal;
    var /** @type {boolean} */ hzgb2312 = false,
        /** @type {number} */ hzgb2312_lead = 0x00;
    /**
     * @param {ByteInputStream} byte_pointer The byte stream to decode.
     * @return {?number} The next code point decoded, or null if not enough
     *     data exists in the input stream to decode a complete code point.
     */
    this.decode = function(byte_pointer) {
      var bite = byte_pointer.get();
      if (bite === EOF_byte && hzgb2312_lead === 0x00) {
        return EOF_code_point;
      }
      if (bite === EOF_byte && hzgb2312_lead !== 0x00) {
        hzgb2312_lead = 0x00;
        return decoderError(fatal);
      }
      byte_pointer.offset(1);
      if (hzgb2312_lead === 0x7E) {
        hzgb2312_lead = 0x00;
        if (bite === 0x7B) {
          hzgb2312 = true;
          return null;
        }
        if (bite === 0x7D) {
          hzgb2312 = false;
          return null;
        }
        if (bite === 0x7E) {
          return 0x007E;
        }
        if (bite === 0x0A) {
          return null;
        }
        byte_pointer.offset(-1);
        return decoderError(fatal);
      }
      if (hzgb2312_lead !== 0x00) {
        var lead = hzgb2312_lead;
        hzgb2312_lead = 0x00;
        var code_point = null;
        if (inRange(bite, 0x21, 0x7E)) {
          code_point = indexCodePointFor((lead - 1) * 190 +
                                         (bite + 0x3F), indexes['gbk']);
        }
        if (bite === 0x0A) {
          hzgb2312 = false;
        }
        if (code_point === null) {
          return decoderError(fatal);
        }
        return code_point;
      }
      if (bite === 0x7E) {
        hzgb2312_lead = 0x7E;
        return null;
      }
      if (hzgb2312) {
        if (inRange(bite, 0x20, 0x7F)) {
          hzgb2312_lead = bite;
          return null;
        }
        if (bite === 0x0A) {
          hzgb2312 = false;
        }
        return decoderError(fatal);
      }
      if (inRange(bite, 0x00, 0x7F)) {
        return bite;
      }
      return decoderError(fatal);
    };
  }

  /**
   * @constructor
   * @param {{fatal: boolean}} options
   */
  function HZGB2312Encoder(options) {
    var fatal = options.fatal;
    var hzgb2312 = false;
    /**
     * @param {ByteOutputStream} output_byte_stream Output byte stream.
     * @param {CodePointInputStream} code_point_pointer Input stream.
     * @return {number} The last byte emitted.
     */
    this.encode = function(output_byte_stream, code_point_pointer) {
      var code_point = code_point_pointer.get();
      if (code_point === EOF_code_point) {
        return EOF_byte;
      }
      code_point_pointer.offset(1);
      if (inRange(code_point, 0x0000, 0x007F) && hzgb2312) {
        code_point_pointer.offset(-1);
        hzgb2312 = false;
        return output_byte_stream.emit(0x7E, 0x7D);
      }
      if (code_point === 0x007E) {
        return output_byte_stream.emit(0x7E, 0x7E);
      }
      if (inRange(code_point, 0x0000, 0x007F)) {
        return output_byte_stream.emit(code_point);
      }
      if (!hzgb2312) {
        code_point_pointer.offset(-1);
        hzgb2312 = true;
        return output_byte_stream.emit(0x7E, 0x7B);
      }
      var pointer = indexPointerFor(code_point, indexes['gbk']);
      if (pointer === null) {
        return encoderError(code_point);
      }
      var lead = div(pointer, 190) + 1;
      var trail = pointer % 190 - 0x3F;
      if (!inRange(lead, 0x21, 0x7E) || !inRange(trail, 0x21, 0x7E)) {
        return encoderError(code_point);
      }
      return output_byte_stream.emit(lead, trail);
    };
  }

  name_to_encoding['hz-gb-2312'].getEncoder = function(options) {
    return new HZGB2312Encoder(options);
  };
  name_to_encoding['hz-gb-2312'].getDecoder = function(options) {
    return new HZGB2312Decoder(options);
  };

  //
  // 10. Legacy multi-byte Chinese (traditional) encodings
  //

  // 10.1 big5

  /**
   * @constructor
   * @param {{fatal: boolean}} options
   */
  function Big5Decoder(options) {
    var fatal = options.fatal;
    var /** @type {number} */ big5_lead = 0x00,
        /** @type {?number} */ big5_pending = null;

    /**
     * @param {ByteInputStream} byte_pointer The byte steram to decode.
     * @return {?number} The next code point decoded, or null if not enough
     *     data exists in the input stream to decode a complete code point.
     */
    this.decode = function(byte_pointer) {
      // NOTE: Hack to support emitting two code points
      if (big5_pending !== null) {
        var pending = big5_pending;
        big5_pending = null;
        return pending;
      }
      var bite = byte_pointer.get();
      if (bite === EOF_byte && big5_lead === 0x00) {
        return EOF_code_point;
      }
      if (bite === EOF_byte && big5_lead !== 0x00) {
        big5_lead = 0x00;
        return decoderError(fatal);
      }
      byte_pointer.offset(1);
      if (big5_lead !== 0x00) {
        var lead = big5_lead;
        var pointer = null;
        big5_lead = 0x00;
        var offset = bite < 0x7F ? 0x40 : 0x62;
        if (inRange(bite, 0x40, 0x7E) || inRange(bite, 0xA1, 0xFE)) {
          pointer = (lead - 0x81) * 157 + (bite - offset);
        }
        if (pointer === 1133) {
          big5_pending = 0x0304;
          return 0x00CA;
        }
        if (pointer === 1135) {
          big5_pending = 0x030C;
          return 0x00CA;
        }
        if (pointer === 1164) {
          big5_pending = 0x0304;
          return 0x00EA;
        }
        if (pointer === 1166) {
          big5_pending = 0x030C;
          return 0x00EA;
        }
        var code_point = (pointer === null) ? null :
            indexCodePointFor(pointer, indexes['big5']);
        if (pointer === null) {
          byte_pointer.offset(-1);
        }
        if (code_point === null) {
          return decoderError(fatal);
        }
        return code_point;
      }
      if (inRange(bite, 0x00, 0x7F)) {
        return bite;
      }
      if (inRange(bite, 0x81, 0xFE)) {
        big5_lead = bite;
        return null;
      }
      return decoderError(fatal);
    };
  }

  /**
   * @constructor
   * @param {{fatal: boolean}} options
   */
  function Big5Encoder(options) {
    var fatal = options.fatal;
    /**
     * @param {ByteOutputStream} output_byte_stream Output byte stream.
     * @param {CodePointInputStream} code_point_pointer Input stream.
     * @return {number} The last byte emitted.
     */
    this.encode = function(output_byte_stream, code_point_pointer) {
      var code_point = code_point_pointer.get();
      if (code_point === EOF_code_point) {
        return EOF_byte;
      }
      code_point_pointer.offset(1);
      if (inRange(code_point, 0x0000, 0x007F)) {
        return output_byte_stream.emit(code_point);
      }
      var pointer = indexPointerFor(code_point, indexes['big5']);
      if (pointer === null) {
        return encoderError(code_point);
      }
      var lead = div(pointer, 157) + 0x81;
      //if (lead < 0xA1) {
      //  return encoderError(code_point);
      //}
      var trail = pointer % 157;
      var offset = trail < 0x3F ? 0x40 : 0x62;
      return output_byte_stream.emit(lead, trail + offset);
    };
  }

  name_to_encoding['big5'].getEncoder = function(options) {
    return new Big5Encoder(options);
  };
  name_to_encoding['big5'].getDecoder = function(options) {
    return new Big5Decoder(options);
  };


  //
  // 11. Legacy multi-byte Japanese encodings
  //

  // 11.1 euc.jp

  /**
   * @constructor
   * @param {{fatal: boolean}} options
   */
  function EUCJPDecoder(options) {
    var fatal = options.fatal;
    var /** @type {number} */ eucjp_first = 0x00,
        /** @type {number} */ eucjp_second = 0x00;
    /**
     * @param {ByteInputStream} byte_pointer The byte stream to decode.
     * @return {?number} The next code point decoded, or null if not enough
     *     data exists in the input stream to decode a complete code point.
     */
    this.decode = function(byte_pointer) {
      var bite = byte_pointer.get();
      if (bite === EOF_byte) {
        if (eucjp_first === 0x00 && eucjp_second === 0x00) {
          return EOF_code_point;
        }
        eucjp_first = 0x00;
        eucjp_second = 0x00;
        return decoderError(fatal);
      }
      byte_pointer.offset(1);

      var lead, code_point;
      if (eucjp_second !== 0x00) {
        lead = eucjp_second;
        eucjp_second = 0x00;
        code_point = null;
        if (inRange(lead, 0xA1, 0xFE) && inRange(bite, 0xA1, 0xFE)) {
          code_point = indexCodePointFor((lead - 0xA1) * 94 + bite - 0xA1,
                                         indexes['jis0212']);
        }
        if (!inRange(bite, 0xA1, 0xFE)) {
          byte_pointer.offset(-1);
        }
        if (code_point === null) {
          return decoderError(fatal);
        }
        return code_point;
      }
      if (eucjp_first === 0x8E && inRange(bite, 0xA1, 0xDF)) {
        eucjp_first = 0x00;
        return 0xFF61 + bite - 0xA1;
      }
      if (eucjp_first === 0x8F && inRange(bite, 0xA1, 0xFE)) {
        eucjp_first = 0x00;
        eucjp_second = bite;
        return null;
      }
      if (eucjp_first !== 0x00) {
        lead = eucjp_first;
        eucjp_first = 0x00;
        code_point = null;
        if (inRange(lead, 0xA1, 0xFE) && inRange(bite, 0xA1, 0xFE)) {
          code_point = indexCodePointFor((lead - 0xA1) * 94 + bite - 0xA1,
                                         indexes['jis0208']);
        }
        if (!inRange(bite, 0xA1, 0xFE)) {
          byte_pointer.offset(-1);
        }
        if (code_point === null) {
          return decoderError(fatal);
        }
        return code_point;
      }
      if (inRange(bite, 0x00, 0x7F)) {
        return bite;
      }
      if (bite === 0x8E || bite === 0x8F || (inRange(bite, 0xA1, 0xFE))) {
        eucjp_first = bite;
        return null;
      }
      return decoderError(fatal);
    };
  }

  /**
   * @constructor
   * @param {{fatal: boolean}} options
   */
  function EUCJPEncoder(options) {
    var fatal = options.fatal;
    /**
     * @param {ByteOutputStream} output_byte_stream Output byte stream.
     * @param {CodePointInputStream} code_point_pointer Input stream.
     * @return {number} The last byte emitted.
     */
    this.encode = function(output_byte_stream, code_point_pointer) {
      var code_point = code_point_pointer.get();
      if (code_point === EOF_code_point) {
        return EOF_byte;
      }
      code_point_pointer.offset(1);
      if (inRange(code_point, 0x0000, 0x007F)) {
        return output_byte_stream.emit(code_point);
      }
      if (code_point === 0x00A5) {
        return output_byte_stream.emit(0x5C);
      }
      if (code_point === 0x203E) {
        return output_byte_stream.emit(0x7E);
      }
      if (inRange(code_point, 0xFF61, 0xFF9F)) {
        return output_byte_stream.emit(0x8E, code_point - 0xFF61 + 0xA1);
      }

      var pointer = indexPointerFor(code_point, indexes['jis0208']);
      if (pointer === null) {
        return encoderError(code_point);
      }
      var lead = div(pointer, 94) + 0xA1;
      var trail = pointer % 94 + 0xA1;
      return output_byte_stream.emit(lead, trail);
    };
  }

  name_to_encoding['euc-jp'].getEncoder = function(options) {
    return new EUCJPEncoder(options);
  };
  name_to_encoding['euc-jp'].getDecoder = function(options) {
    return new EUCJPDecoder(options);
  };

  // 11.2 iso-2022-jp

  /**
   * @constructor
   * @param {{fatal: boolean}} options
   */
  function ISO2022JPDecoder(options) {
    var fatal = options.fatal;
    /** @enum */
    var state = {
      ASCII: 0,
      escape_start: 1,
      escape_middle: 2,
      escape_final: 3,
      lead: 4,
      trail: 5,
      Katakana: 6
    };
    var /** @type {number} */ iso2022jp_state = state.ASCII,
        /** @type {boolean} */ iso2022jp_jis0212 = false,
        /** @type {number} */ iso2022jp_lead = 0x00;
    /**
     * @param {ByteInputStream} byte_pointer The byte stream to decode.
     * @return {?number} The next code point decoded, or null if not enough
     *     data exists in the input stream to decode a complete code point.
     */
    this.decode = function(byte_pointer) {
      var bite = byte_pointer.get();
      if (bite !== EOF_byte) {
        byte_pointer.offset(1);
      }
      switch (iso2022jp_state) {
        default:
        case state.ASCII:
          if (bite === 0x1B) {
            iso2022jp_state = state.escape_start;
            return null;
          }
          if (inRange(bite, 0x00, 0x7F)) {
            return bite;
          }
          if (bite === EOF_byte) {
            return EOF_code_point;
          }
          return decoderError(fatal);

        case state.escape_start:
          if (bite === 0x24 || bite === 0x28) {
            iso2022jp_lead = bite;
            iso2022jp_state = state.escape_middle;
            return null;
          }
          if (bite !== EOF_byte) {
            byte_pointer.offset(-1);
          }
          iso2022jp_state = state.ASCII;
          return decoderError(fatal);

        case state.escape_middle:
          var lead = iso2022jp_lead;
          iso2022jp_lead = 0x00;
          if (lead === 0x24 && (bite === 0x40 || bite === 0x42)) {
            iso2022jp_jis0212 = false;
            iso2022jp_state = state.lead;
            return null;
          }
          if (lead === 0x24 && bite === 0x28) {
            iso2022jp_state = state.escape_final;
            return null;
          }
          if (lead === 0x28 && (bite === 0x42 || bite === 0x4A)) {
            iso2022jp_state = state.ASCII;
            return null;
          }
          if (lead === 0x28 && bite === 0x49) {
            iso2022jp_state = state.Katakana;
            return null;
          }
          if (bite === EOF_byte) {
            byte_pointer.offset(-1);
          } else {
            byte_pointer.offset(-2);
          }
          iso2022jp_state = state.ASCII;
          return decoderError(fatal);

        case state.escape_final:
          if (bite === 0x44) {
            iso2022jp_jis0212 = true;
            iso2022jp_state = state.lead;
            return null;
          }
          if (bite === EOF_byte) {
            byte_pointer.offset(-2);
          } else {
            byte_pointer.offset(-3);
          }
          iso2022jp_state = state.ASCII;
          return decoderError(fatal);

        case state.lead:
          if (bite === 0x0A) {
            iso2022jp_state = state.ASCII;
            return decoderError(fatal, 0x000A);
          }
          if (bite === 0x1B) {
            iso2022jp_state = state.escape_start;
            return null;
          }
          if (bite === EOF_byte) {
            return EOF_code_point;
          }
          iso2022jp_lead = bite;
          iso2022jp_state = state.trail;
          return null;

        case state.trail:
          iso2022jp_state = state.lead;
          if (bite === EOF_byte) {
            return decoderError(fatal);
          }
          var code_point = null;
          var pointer = (iso2022jp_lead - 0x21) * 94 + bite - 0x21;
          if (inRange(iso2022jp_lead, 0x21, 0x7E) &&
              inRange(bite, 0x21, 0x7E)) {
            code_point = (iso2022jp_jis0212 === false) ?
                indexCodePointFor(pointer, indexes['jis0208']) :
                indexCodePointFor(pointer, indexes['jis0212']);
          }
          if (code_point === null) {
            return decoderError(fatal);
          }
          return code_point;

        case state.Katakana:
          if (bite === 0x1B) {
            iso2022jp_state = state.escape_start;
            return null;
          }
          if (inRange(bite, 0x21, 0x5F)) {
            return 0xFF61 + bite - 0x21;
          }
          if (bite === EOF_byte) {
            return EOF_code_point;
          }
          return decoderError(fatal);
      }
    };
  }

  /**
   * @constructor
   * @param {{fatal: boolean}} options
   */
  function ISO2022JPEncoder(options) {
    var fatal = options.fatal;
    /** @enum */
    var state = {
      ASCII: 0,
      lead: 1,
      Katakana: 2
    };
    var /** @type {number} */ iso2022jp_state = state.ASCII;
    /**
     * @param {ByteOutputStream} output_byte_stream Output byte stream.
     * @param {CodePointInputStream} code_point_pointer Input stream.
     * @return {number} The last byte emitted.
     */
    this.encode = function(output_byte_stream, code_point_pointer) {
      var code_point = code_point_pointer.get();
      if (code_point === EOF_code_point) {
        return EOF_byte;
      }
      code_point_pointer.offset(1);
      if ((inRange(code_point, 0x0000, 0x007F) ||
           code_point === 0x00A5 || code_point === 0x203E) &&
          iso2022jp_state !== state.ASCII) {
        code_point_pointer.offset(-1);
        iso2022jp_state = state.ASCII;
        return output_byte_stream.emit(0x1B, 0x28, 0x42);
      }
      if (inRange(code_point, 0x0000, 0x007F)) {
        return output_byte_stream.emit(code_point);
      }
      if (code_point === 0x00A5) {
        return output_byte_stream.emit(0x5C);
      }
      if (code_point === 0x203E) {
        return output_byte_stream.emit(0x7E);
      }
      if (inRange(code_point, 0xFF61, 0xFF9F) &&
          iso2022jp_state !== state.Katakana) {
        code_point_pointer.offset(-1);
        iso2022jp_state = state.Katakana;
        return output_byte_stream.emit(0x1B, 0x28, 0x49);
      }
      if (inRange(code_point, 0xFF61, 0xFF9F)) {
        return output_byte_stream.emit(code_point - 0xFF61 - 0x21);
      }
      if (iso2022jp_state !== state.lead) {
        code_point_pointer.offset(-1);
        iso2022jp_state = state.lead;
        return output_byte_stream.emit(0x1B, 0x24, 0x42);
      }
      var pointer = indexPointerFor(code_point, indexes['jis0208']);
      if (pointer === null) {
        return encoderError(code_point);
      }
      var lead = div(pointer, 94) + 0x21;
      var trail = pointer % 94 + 0x21;
      return output_byte_stream.emit(lead, trail);
    };
  }

  name_to_encoding['iso-2022-jp'].getEncoder = function(options) {
    return new ISO2022JPEncoder(options);
  };
  name_to_encoding['iso-2022-jp'].getDecoder = function(options) {
    return new ISO2022JPDecoder(options);
  };

  // 11.3 shift_jis

  /**
   * @constructor
   * @param {{fatal: boolean}} options
   */
  function ShiftJISDecoder(options) {
    var fatal = options.fatal;
    var /** @type {number} */ shiftjis_lead = 0x00;
    /**
     * @param {ByteInputStream} byte_pointer The byte stream to decode.
     * @return {?number} The next code point decoded, or null if not enough
     *     data exists in the input stream to decode a complete code point.
     */
    this.decode = function(byte_pointer) {
      var bite = byte_pointer.get();
      if (bite === EOF_byte && shiftjis_lead === 0x00) {
        return EOF_code_point;
      }
      if (bite === EOF_byte && shiftjis_lead !== 0x00) {
        shiftjis_lead = 0x00;
        return decoderError(fatal);
      }
      byte_pointer.offset(1);
      if (shiftjis_lead !== 0x00) {
        var lead = shiftjis_lead;
        shiftjis_lead = 0x00;
        if (inRange(bite, 0x40, 0x7E) || inRange(bite, 0x80, 0xFC)) {
          var offset = (bite < 0x7F) ? 0x40 : 0x41;
          var lead_offset = (lead < 0xA0) ? 0x81 : 0xC1;
          var code_point = indexCodePointFor((lead - lead_offset) * 188 +
                                             bite - offset, indexes['jis0208']);
          if (code_point === null) {
            return decoderError(fatal);
          }
          return code_point;
        }
        byte_pointer.offset(-1);
        return decoderError(fatal);
      }
      if (inRange(bite, 0x00, 0x80)) {
        return bite;
      }
      if (inRange(bite, 0xA1, 0xDF)) {
        return 0xFF61 + bite - 0xA1;
      }
      if (inRange(bite, 0x81, 0x9F) || inRange(bite, 0xE0, 0xFC)) {
        shiftjis_lead = bite;
        return null;
      }
      return decoderError(fatal);
    };
  }

  /**
   * @constructor
   * @param {{fatal: boolean}} options
   */
  function ShiftJISEncoder(options) {
    var fatal = options.fatal;
    /**
     * @param {ByteOutputStream} output_byte_stream Output byte stream.
     * @param {CodePointInputStream} code_point_pointer Input stream.
     * @return {number} The last byte emitted.
     */
    this.encode = function(output_byte_stream, code_point_pointer) {
      var code_point = code_point_pointer.get();
      if (code_point === EOF_code_point) {
        return EOF_byte;
      }
      code_point_pointer.offset(1);
      if (inRange(code_point, 0x0000, 0x0080)) {
        return output_byte_stream.emit(code_point);
      }
      if (code_point === 0x00A5) {
        return output_byte_stream.emit(0x5C);
      }
      if (code_point === 0x203E) {
        return output_byte_stream.emit(0x7E);
      }
      if (inRange(code_point, 0xFF61, 0xFF9F)) {
        return output_byte_stream.emit(code_point - 0xFF61 + 0xA1);
      }
      var pointer = indexPointerFor(code_point, indexes['jis0208']);
      if (pointer === null) {
        return encoderError(code_point);
      }
      var lead = div(pointer, 188);
      var lead_offset = lead < 0x1F ? 0x81 : 0xC1;
      var trail = pointer % 188;
      var offset = trail < 0x3F ? 0x40 : 0x41;
      return output_byte_stream.emit(lead + lead_offset, trail + offset);
    };
  }

  name_to_encoding['shift_jis'].getEncoder = function(options) {
    return new ShiftJISEncoder(options);
  };
  name_to_encoding['shift_jis'].getDecoder = function(options) {
    return new ShiftJISDecoder(options);
  };

  //
  // 12. Legacy multi-byte Korean encodings
  //

  // 12.1 euc-kr

  /**
   * @constructor
   * @param {{fatal: boolean}} options
   */
  function EUCKRDecoder(options) {
    var fatal = options.fatal;
    var /** @type {number} */ euckr_lead = 0x00;
    /**
     * @param {ByteInputStream} byte_pointer The byte stream to decode.
     * @return {?number} The next code point decoded, or null if not enough
     *     data exists in the input stream to decode a complete code point.
     */
    this.decode = function(byte_pointer) {
      var bite = byte_pointer.get();
      if (bite === EOF_byte && euckr_lead === 0) {
        return EOF_code_point;
      }
      if (bite === EOF_byte && euckr_lead !== 0) {
        euckr_lead = 0x00;
        return decoderError(fatal);
      }
      byte_pointer.offset(1);
      if (euckr_lead !== 0x00) {
        var lead = euckr_lead;
        var pointer = null;
        euckr_lead = 0x00;

        if (inRange(lead, 0x81, 0xC6)) {
          var temp = (26 + 26 + 126) * (lead - 0x81);
          if (inRange(bite, 0x41, 0x5A)) {
            pointer = temp + bite - 0x41;
          } else if (inRange(bite, 0x61, 0x7A)) {
            pointer = temp + 26 + bite - 0x61;
          } else if (inRange(bite, 0x81, 0xFE)) {
            pointer = temp + 26 + 26 + bite - 0x81;
          }
        }

        if (inRange(lead, 0xC7, 0xFD) && inRange(bite, 0xA1, 0xFE)) {
          pointer = (26 + 26 + 126) * (0xC7 - 0x81) + (lead - 0xC7) * 94 +
              (bite - 0xA1);
        }

        var code_point = (pointer === null) ? null :
            indexCodePointFor(pointer, indexes['euc-kr']);
        if (pointer === null) {
          byte_pointer.offset(-1);
        }
        if (code_point === null) {
          return decoderError(fatal);
        }
        return code_point;
      }

      if (inRange(bite, 0x00, 0x7F)) {
        return bite;
      }

      if (inRange(bite, 0x81, 0xFD)) {
        euckr_lead = bite;
        return null;
      }

      return decoderError(fatal);
    };
  }

  /**
   * @constructor
   * @param {{fatal: boolean}} options
   */
  function EUCKREncoder(options) {
    var fatal = options.fatal;
    /**
     * @param {ByteOutputStream} output_byte_stream Output byte stream.
     * @param {CodePointInputStream} code_point_pointer Input stream.
     * @return {number} The last byte emitted.
     */
    this.encode = function(output_byte_stream, code_point_pointer) {
      var code_point = code_point_pointer.get();
      if (code_point === EOF_code_point) {
        return EOF_byte;
      }
      code_point_pointer.offset(1);
      if (inRange(code_point, 0x0000, 0x007F)) {
        return output_byte_stream.emit(code_point);
      }
      var pointer = indexPointerFor(code_point, indexes['euc-kr']);
      if (pointer === null) {
        return encoderError(code_point);
      }
      var lead, trail;
      if (pointer < ((26 + 26 + 126) * (0xC7 - 0x81))) {
        lead = div(pointer, (26 + 26 + 126)) + 0x81;
        trail = pointer % (26 + 26 + 126);
        var offset = trail < 26 ? 0x41 : trail < 26 + 26 ? 0x47 : 0x4D;
        return output_byte_stream.emit(lead, trail + offset);
      }
      pointer = pointer - (26 + 26 + 126) * (0xC7 - 0x81);
      lead = div(pointer, 94) + 0xC7;
      trail = pointer % 94 + 0xA1;
      return output_byte_stream.emit(lead, trail);
    };
  }

  name_to_encoding['euc-kr'].getEncoder = function(options) {
    return new EUCKREncoder(options);
  };
  name_to_encoding['euc-kr'].getDecoder = function(options) {
    return new EUCKRDecoder(options);
  };

  // 12.2 iso-2022-kr

  /**
   * @constructor
   * @param {{fatal: boolean}} options
   */
  function ISO2022KRDecoder(options) {
    var fatal = options.fatal;
    /** @enum */
    var state = {
      ASCII: 0,
      escape_start: 1,
      escape_middle: 2,
      escape_end: 3,
      lead: 4,
      trail: 5
    };
    var /** @type {number} */ iso2022kr_state = state.ASCII,
        /** @type {number} */ iso2022kr_lead = 0x00;
    /**
     * @param {ByteInputStream} byte_pointer The byte stream to decode.
     * @return {?number} The next code point decoded, or null if not enough
     *     data exists in the input stream to decode a complete code point.
     */
    this.decode = function(byte_pointer) {
      var bite = byte_pointer.get();
      if (bite !== EOF_byte) {
        byte_pointer.offset(1);
      }
      switch (iso2022kr_state) {
        default:
        case state.ASCII:
          if (bite === 0x0E) {
            iso2022kr_state = state.lead;
            return null;
          }
          if (bite === 0x0F) {
            return null;
          }
          if (bite === 0x1B) {
            iso2022kr_state = state.escape_start;
            return null;
          }
          if (inRange(bite, 0x00, 0x7F)) {
            return bite;
          }
          if (bite === EOF_byte) {
            return EOF_code_point;
          }
          return decoderError(fatal);
        case state.escape_start:
          if (bite === 0x24) {
            iso2022kr_state = state.escape_middle;
            return null;
          }
          if (bite !== EOF_byte) {
            byte_pointer.offset(-1);
          }
          iso2022kr_state = state.ASCII;
          return decoderError(fatal);
        case state.escape_middle:
          if (bite === 0x29) {
            iso2022kr_state = state.escape_end;
            return null;
          }
          if (bite === EOF_byte) {
            byte_pointer.offset(-1);
          } else {
            byte_pointer.offset(-2);
          }
          iso2022kr_state = state.ASCII;
          return decoderError(fatal);
        case state.escape_end:
          if (bite === 0x43) {
            iso2022kr_state = state.ASCII;
            return null;
          }
          if (bite === EOF_byte) {
            byte_pointer.offset(-2);
          } else {
            byte_pointer.offset(-3);
          }
          iso2022kr_state = state.ASCII;
          return decoderError(fatal);
        case state.lead:
          if (bite === 0x0A) {
            iso2022kr_state = state.ASCII;
            return decoderError(fatal, 0x000A);
          }
          if (bite === 0x0E) {
            return null;
          }
          if (bite === 0x0F) {
            iso2022kr_state = state.ASCII;
            return null;
          }
          if (bite === EOF_byte) {
            return EOF_code_point;
          }
          iso2022kr_lead = bite;
          iso2022kr_state = state.trail;
          return null;
        case state.trail:
          iso2022kr_state = state.lead;
          if (bite === EOF_byte) {
            return decoderError(fatal);
          }
          var code_point = null;
          if (inRange(iso2022kr_lead, 0x21, 0x46) &&
              inRange(bite, 0x21, 0x7E)) {
            code_point = indexCodePointFor((26 + 26 + 126) *
                (iso2022kr_lead - 1) +
                26 + 26 + bite - 1,
                indexes['euc-kr']);
          } else if (inRange(iso2022kr_lead, 0x47, 0x7E) &&
              inRange(bite, 0x21, 0x7E)) {
            code_point = indexCodePointFor((26 + 26 + 126) * (0xC7 - 0x81) +
                (iso2022kr_lead - 0x47) * 94 +
                (bite - 0x21),
                indexes['euc-kr']);
          }
          if (code_point !== null) {
            return code_point;
          }
          return decoderError(fatal);
      }
    };
  }

  /**
   * @constructor
   * @param {{fatal: boolean}} options
   */
  function ISO2022KREncoder(options) {
    var fatal = options.fatal;
    /** @enum */
    var state = {
      ASCII: 0,
      lead: 1
    };
    var /** @type {boolean} */ iso2022kr_initialization = false,
        /** @type {number} */ iso2022kr_state = state.ASCII;
    /**
     * @param {ByteOutputStream} output_byte_stream Output byte stream.
     * @param {CodePointInputStream} code_point_pointer Input stream.
     * @return {number} The last byte emitted.
     */
    this.encode = function(output_byte_stream, code_point_pointer) {
      var code_point = code_point_pointer.get();
      if (code_point === EOF_code_point) {
        return EOF_byte;
      }
      if (!iso2022kr_initialization) {
        iso2022kr_initialization = true;
        output_byte_stream.emit(0x1B, 0x24, 0x29, 0x43);
      }
      code_point_pointer.offset(1);
      if (inRange(code_point, 0x0000, 0x007F) &&
          iso2022kr_state !== state.ASCII) {
        code_point_pointer.offset(-1);
        iso2022kr_state = state.ASCII;
        return output_byte_stream.emit(0x0F);
      }
      if (inRange(code_point, 0x0000, 0x007F)) {
        return output_byte_stream.emit(code_point);
      }
      if (iso2022kr_state !== state.lead) {
        code_point_pointer.offset(-1);
        iso2022kr_state = state.lead;
        return output_byte_stream.emit(0x0E);
      }
      var pointer = indexPointerFor(code_point, indexes['euc-kr']);
      if (pointer === null) {
        return encoderError(code_point);
      }
      var lead, trail;
      if (pointer < (26 + 26 + 126) * (0xC7 - 0x81)) {
        lead = div(pointer, (26 + 26 + 126)) + 1;
        trail = pointer % (26 + 26 + 126) - 26 - 26 + 1;
        if (!inRange(lead, 0x21, 0x46) || !inRange(trail, 0x21, 0x7E)) {
          return encoderError(code_point);
        }
        return output_byte_stream.emit(lead, trail);
      }
      pointer = pointer - (26 + 26 + 126) * (0xC7 - 0x81);
      lead = div(pointer, 94) + 0x47;
      trail = pointer % 94 + 0x21;
      if (!inRange(lead, 0x47, 0x7E) || !inRange(trail, 0x21, 0x7E)) {
        return encoderError(code_point);
      }
      return output_byte_stream.emit(lead, trail);
    };
  }

  name_to_encoding['iso-2022-kr'].getEncoder = function(options) {
    return new ISO2022KREncoder(options);
  };
  name_to_encoding['iso-2022-kr'].getDecoder = function(options) {
    return new ISO2022KRDecoder(options);
  };


  //
  // 13. Legacy utf-16 encodings
  //

  // 13.1 utf-16

  /**
   * @constructor
   * @param {boolean} utf16_be True if big-endian, false if little-endian.
   * @param {{fatal: boolean}} options
   */
  function UTF16Decoder(utf16_be, options) {
    var fatal = options.fatal;
    var /** @type {?number} */ utf16_lead_byte = null,
        /** @type {?number} */ utf16_lead_surrogate = null;
    /**
     * @param {ByteInputStream} byte_pointer The byte stream to decode.
     * @return {?number} The next code point decoded, or null if not enough
     *     data exists in the input stream to decode a complete code point.
     */
    this.decode = function(byte_pointer) {
      var bite = byte_pointer.get();
      if (bite === EOF_byte && utf16_lead_byte === null &&
          utf16_lead_surrogate === null) {
        return EOF_code_point;
      }
      if (bite === EOF_byte && (utf16_lead_byte !== null ||
                                utf16_lead_surrogate !== null)) {
        return decoderError(fatal);
      }
      byte_pointer.offset(1);
      if (utf16_lead_byte === null) {
        utf16_lead_byte = bite;
        return null;
      }
      var code_point;
      if (utf16_be) {
        code_point = (utf16_lead_byte << 8) + bite;
      } else {
        code_point = (bite << 8) + utf16_lead_byte;
      }
      utf16_lead_byte = null;
      if (utf16_lead_surrogate !== null) {
        var lead_surrogate = utf16_lead_surrogate;
        utf16_lead_surrogate = null;
        if (inRange(code_point, 0xDC00, 0xDFFF)) {
          return 0x10000 + (lead_surrogate - 0xD800) * 0x400 +
              (code_point - 0xDC00);
        }
        byte_pointer.offset(-2);
        return decoderError(fatal);
      }
      if (inRange(code_point, 0xD800, 0xDBFF)) {
        utf16_lead_surrogate = code_point;
        return null;
      }
      if (inRange(code_point, 0xDC00, 0xDFFF)) {
        return decoderError(fatal);
      }
      return code_point;
    };
  }

  /**
   * @constructor
   * @param {boolean} utf16_be True if big-endian, false if little-endian.
   * @param {{fatal: boolean}} options
   */
  function UTF16Encoder(utf16_be, options) {
    var fatal = options.fatal;
    /**
     * @param {ByteOutputStream} output_byte_stream Output byte stream.
     * @param {CodePointInputStream} code_point_pointer Input stream.
     * @return {number} The last byte emitted.
     */
    this.encode = function(output_byte_stream, code_point_pointer) {
      function convert_to_bytes(code_unit) {
        var byte1 = code_unit >> 8;
        var byte2 = code_unit & 0x00FF;
        if (utf16_be) {
          return output_byte_stream.emit(byte1, byte2);
        }
        return output_byte_stream.emit(byte2, byte1);
      }
      var code_point = code_point_pointer.get();
      if (code_point === EOF_code_point) {
        return EOF_byte;
      }
      code_point_pointer.offset(1);
      if (inRange(code_point, 0xD800, 0xDFFF)) {
        encoderError(code_point);
      }
      if (code_point <= 0xFFFF) {
        return convert_to_bytes(code_point);
      }
      var lead = div((code_point - 0x10000), 0x400) + 0xD800;
      var trail = ((code_point - 0x10000) % 0x400) + 0xDC00;
      convert_to_bytes(lead);
      return convert_to_bytes(trail);
    };
  }

  name_to_encoding['utf-16'].getEncoder = function(options) {
    return new UTF16Encoder(false, options);
  };
  name_to_encoding['utf-16'].getDecoder = function(options) {
    return new UTF16Decoder(false, options);
  };

  // 13.2 utf-16be
  name_to_encoding['utf-16be'].getEncoder = function(options) {
    return new UTF16Encoder(true, options);
  };
  name_to_encoding['utf-16be'].getDecoder = function(options) {
    return new UTF16Decoder(true, options);
  };


  // NOTE: currently unused
  /**
   * @param {string} label The encoding label.
   * @param {ByteInputStream} input_stream The byte stream to test.
   */
  function detectEncoding(label, input_stream) {
    if (input_stream.match([0xFF, 0xFE])) {
      input_stream.offset(2);
      return 'utf-16';
    }
    if (input_stream.match([0xFE, 0xFF])) {
      input_stream.offset(2);
      return 'utf-16be';
    }
    if (input_stream.match([0xEF, 0xBB, 0xBF])) {
      input_stream.offset(3);
      return 'utf-8';
    }
    return label;
  }

  /**
   * @param {string} label The encoding label.
   * @param {ByteInputStream} input_stream The byte stream to test.
   */
  function consumeBOM(label, input_stream) {
    if (input_stream.match([0xFF, 0xFE]) && label === 'utf-16') {
      input_stream.offset(2);
      return;
    }
    if (input_stream.match([0xFE, 0xFF]) && label == 'utf-16be') {
      input_stream.offset(2);
      return;
    }
    if (input_stream.match([0xEF, 0xBB, 0xBF]) && label == 'utf-8') {
      input_stream.offset(3);
      return;
    }
  }

  //
  // Implementation of Text Encoding Web API
  //

  /** @const */ var DEFAULT_ENCODING = 'utf-8';

  /**
   * @constructor
   * @param {string=} opt_encoding The label of the encoding;
   *     defaults to 'utf-8'.
   * @param {{fatal: boolean}=} options
   */
  function TextEncoder(opt_encoding, options) {
    if (!this || this === global) {
      return new TextEncoder(opt_encoding, options);
    }
    opt_encoding = opt_encoding ? String(opt_encoding) : DEFAULT_ENCODING;
    options = Object(options);
    /** @private */
    this._encoding = getEncoding(opt_encoding);
    if (this._encoding === null || (this._encoding.name !== 'utf-8' &&
                                    this._encoding.name !== 'utf-16' &&
                                    this._encoding.name !== 'utf-16be'))
      throw new TypeError('Unknown encoding: ' + opt_encoding);
    /** @private @type {boolean} */
    this._streaming = false;
    /** @private */
    this._encoder = null;
    /** @private @type {{fatal: boolean}=} */
    this._options = { fatal: Boolean(options.fatal) };

    if (Object.defineProperty) {
      Object.defineProperty(
          this, 'encoding',
          { get: function() { return this._encoding.name; } });
    } else {
      this.encoding = this._encoding.name;
    }

    return this;
  }

  TextEncoder.prototype = {
    /**
     * @param {string=} opt_string The string to encode.
     * @param {{stream: boolean}=} options
     */
    encode: function encode(opt_string, options) {
      opt_string = opt_string ? String(opt_string) : '';
      options = Object(options);
      // TODO: any options?
      if (!this._streaming) {
        this._encoder = this._encoding.getEncoder(this._options);
      }
      this._streaming = Boolean(options.stream);

      var bytes = [];
      var output_stream = new ByteOutputStream(bytes);
      var input_stream = new CodePointInputStream(opt_string);
      while (input_stream.get() !== EOF_code_point) {
        this._encoder.encode(output_stream, input_stream);
      }
      if (!this._streaming) {
        var last_byte;
        do {
          last_byte = this._encoder.encode(output_stream, input_stream);
        } while (last_byte !== EOF_byte);
        this._encoder = null;
      }
      return new Uint8Array(bytes);
    }
  };


  /**
   * @constructor
   * @param {string=} opt_encoding The label of the encoding;
   *     defaults to 'utf-8'.
   * @param {{fatal: boolean}=} options
   */
  function TextDecoder(opt_encoding, options) {
    if (!this || this === global) {
      return new TextDecoder(opt_encoding, options);
    }
    opt_encoding = opt_encoding ? String(opt_encoding) : DEFAULT_ENCODING;
    options = Object(options);
    /** @private */
    this._encoding = getEncoding(opt_encoding);
    if (this._encoding === null)
      throw new TypeError('Unknown encoding: ' + opt_encoding);

    /** @private @type {boolean} */
    this._streaming = false;
    /** @private */
    this._decoder = null;
    /** @private @type {{fatal: boolean}=} */
    this._options = { fatal: Boolean(options.fatal) };

    if (Object.defineProperty) {
      Object.defineProperty(
          this, 'encoding',
          { get: function() { return this._encoding.name; } });
    } else {
      this.encoding = this._encoding.name;
    }

    return this;
  }

  // TODO: Issue if input byte stream is offset by decoder
  // TODO: BOM detection will not work if stream header spans multiple calls
  // (last N bytes of previous stream may need to be retained?)
  TextDecoder.prototype = {
    /**
     * @param {ArrayBufferView=} opt_view The buffer of bytes to decode.
     * @param {{stream: boolean}=} options
     */
    decode: function decode(opt_view, options) {
      if (opt_view && !('buffer' in opt_view && 'byteOffset' in opt_view &&
                        'byteLength' in opt_view)) {
        throw new TypeError('Expected ArrayBufferView');
      } else if (!opt_view) {
        opt_view = new Uint8Array(0);
      }
      options = Object(options);

      if (!this._streaming) {
        this._decoder = this._encoding.getDecoder(this._options);
      }
      this._streaming = Boolean(options.stream);

      var bytes = new Uint8Array(opt_view.buffer,
                                 opt_view.byteOffset,
                                 opt_view.byteLength);
      var input_stream = new ByteInputStream(bytes);

      if (!this._BOMseen) {
        // TODO: Don't do this until sufficient bytes are present
        this._BOMseen = true;
        consumeBOM(this._encoding.name, input_stream);
      }

      var output_stream = new CodePointOutputStream(), code_point;
      while (input_stream.get() !== EOF_byte) {
        code_point = this._decoder.decode(input_stream);
        if (code_point !== null && code_point !== EOF_code_point) {
          output_stream.emit(code_point);
        }
      }
      if (!this._streaming) {
        do {
          code_point = this._decoder.decode(input_stream);
          if (code_point !== null && code_point !== EOF_code_point) {
            output_stream.emit(code_point);
          }
        } while (code_point !== EOF_code_point &&
                 input_stream.get() != EOF_byte);
        this._decoder = null;
      }
      return output_stream.string();
    }
  };

  global['TextEncoder'] = TextEncoder;//global['TextEncoder'] || 
  global['TextDecoder'] = TextDecoder;//global['TextDecoder'] || 
}(this));
MEPH.define('MEPH.audio.external.stringencoding.encoding', {});self["encoding-indexes"] = {
  "big5":[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 17392, 19506, 17923, 17830, 17784, 160359, 19831, 17843, 162993, 19682, 163013, 15253, 18230, 18244, 19527, 19520, 148159, 144919, 160594, 159371, 159954, 19543, 172881, 18255, 17882, 19589, 162924, 19719, 19108, 18081, 158499, 29221, 154196, 137827, 146950, 147297, 26189, 22267, null, 32149, 22813, 166841, 15860, 38708, 162799, 23515, 138590, 23204, 13861, 171696, 23249, 23479, 23804, 26478, 34195, 170309, 29793, 29853, 14453, 138579, 145054, 155681, 16108, 153822, 15093, 31484, 40855, 147809, 166157, 143850, 133770, 143966, 17162, 33924, 40854, 37935, 18736, 34323, 22678, 38730, 37400, 31184, 31282, 26208, 27177, 34973, 29772, 31685, 26498, 31276, 21071, 36934, 13542, 29636, 155065, 29894, 40903, 22451, 18735, 21580, 16689, 145038, 22552, 31346, 162661, 35727, 18094, 159368, 16769, 155033, 31662, 140476, 40904, 140481, 140489, 140492, 40905, 34052, 144827, 16564, 40906, 17633, 175615, 25281, 28782, 40907, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 12736, 12737, 12738, 12739, 12740, 131340, 12741, 131281, 131277, 12742, 12743, 131275, 139240, 12744, 131274, 12745, 12746, 12747, 12748, 131342, 12749, 12750, 256, 193, 461, 192, 274, 201, 282, 200, 332, 211, 465, 210, null, 7870, null, 7872, 202, 257, 225, 462, 224, 593, 275, 233, 283, 232, 299, 237, 464, 236, 333, 243, 466, 242, 363, 250, 468, 249, 470, 472, 474, 476, 252, null, 7871, null, 7873, 234, 609, 9178, 9179, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 172969, 135493, null, 25866, null, null, 20029, 28381, 40270, 37343, null, null, 161589, 25745, 20250, 20264, 20392, 20822, 20852, 20892, 20964, 21153, 21160, 21307, 21326, 21457, 21464, 22242, 22768, 22788, 22791, 22834, 22836, 23398, 23454, 23455, 23706, 24198, 24635, 25993, 26622, 26628, 26725, 27982, 28860, 30005, 32420, 32428, 32442, 32455, 32463, 32479, 32518, 32567, 33402, 33487, 33647, 35270, 35774, 35810, 36710, 36711, 36718, 29713, 31996, 32205, 26950, 31433, 21031, null, null, null, null, 37260, 30904, 37214, 32956, null, 36107, 33014, 133607, null, null, 32927, 40647, 19661, 40393, 40460, 19518, 171510, 159758, 40458, 172339, 13761, null, 28314, 33342, 29977, null, 18705, 39532, 39567, 40857, 31111, 164972, 138698, 132560, 142054, 20004, 20097, 20096, 20103, 20159, 20203, 20279, 13388, 20413, 15944, 20483, 20616, 13437, 13459, 13477, 20870, 22789, 20955, 20988, 20997, 20105, 21113, 21136, 21287, 13767, 21417, 13649, 21424, 13651, 21442, 21539, 13677, 13682, 13953, 21651, 21667, 21684, 21689, 21712, 21743, 21784, 21795, 21800, 13720, 21823, 13733, 13759, 21975, 13765, 163204, 21797, null, 134210, 134421, 151851, 21904, 142534, 14828, 131905, 36422, 150968, 169189, 16467, 164030, 30586, 142392, 14900, 18389, 164189, 158194, 151018, 25821, 134524, 135092, 134357, 135412, 25741, 36478, 134806, 134155, 135012, 142505, 164438, 148691, null, 134470, 170573, 164073, 18420, 151207, 142530, 39602, 14951, 169460, 16365, 13574, 152263, 169940, 161992, 142660, 40302, 38933, null, 17369, 155813, 25780, 21731, 142668, 142282, 135287, 14843, 135279, 157402, 157462, 162208, 25834, 151634, 134211, 36456, 139681, 166732, 132913, null, 18443, 131497, 16378, 22643, 142733, null, 148936, 132348, 155799, 134988, 134550, 21881, 16571, 17338, null, 19124, 141926, 135325, 33194, 39157, 134556, 25465, 14846, 141173, 36288, 22177, 25724, 15939, null, 173569, 134665, 142031, 142537, null, 135368, 145858, 14738, 14854, 164507, 13688, 155209, 139463, 22098, 134961, 142514, 169760, 13500, 27709, 151099, null, null, 161140, 142987, 139784, 173659, 167117, 134778, 134196, 157724, 32659, 135375, 141315, 141625, 13819, 152035, 134796, 135053, 134826, 16275, 134960, 134471, 135503, 134732, null, 134827, 134057, 134472, 135360, 135485, 16377, 140950, 25650, 135085, 144372, 161337, 142286, 134526, 134527, 142417, 142421, 14872, 134808, 135367, 134958, 173618, 158544, 167122, 167321, 167114, 38314, 21708, 33476, 21945, null, 171715, 39974, 39606, 161630, 142830, 28992, 33133, 33004, 23580, 157042, 33076, 14231, 21343, 164029, 37302, 134906, 134671, 134775, 134907, 13789, 151019, 13833, 134358, 22191, 141237, 135369, 134672, 134776, 135288, 135496, 164359, 136277, 134777, 151120, 142756, 23124, 135197, 135198, 135413, 135414, 22428, 134673, 161428, 164557, 135093, 134779, 151934, 14083, 135094, 135552, 152280, 172733, 149978, 137274, 147831, 164476, 22681, 21096, 13850, 153405, 31666, 23400, 18432, 19244, 40743, 18919, 39967, 39821, 154484, 143677, 22011, 13810, 22153, 20008, 22786, 138177, 194680, 38737, 131206, 20059, 20155, 13630, 23587, 24401, 24516, 14586, 25164, 25909, 27514, 27701, 27706, 28780, 29227, 20012, 29357, 149737, 32594, 31035, 31993, 32595, 156266, 13505, null, 156491, 32770, 32896, 157202, 158033, 21341, 34916, 35265, 161970, 35744, 36125, 38021, 38264, 38271, 38376, 167439, 38886, 39029, 39118, 39134, 39267, 170000, 40060, 40479, 40644, 27503, 63751, 20023, 131207, 38429, 25143, 38050, null, 20539, 28158, 171123, 40870, 15817, 34959, 147790, 28791, 23797, 19232, 152013, 13657, 154928, 24866, 166450, 36775, 37366, 29073, 26393, 29626, 144001, 172295, 15499, 137600, 19216, 30948, 29698, 20910, 165647, 16393, 27235, 172730, 16931, 34319, 133743, 31274, 170311, 166634, 38741, 28749, 21284, 139390, 37876, 30425, 166371, 40871, 30685, 20131, 20464, 20668, 20015, 20247, 40872, 21556, 32139, 22674, 22736, 138678, 24210, 24217, 24514, 141074, 25995, 144377, 26905, 27203, 146531, 27903, null, 29184, 148741, 29580, 16091, 150035, 23317, 29881, 35715, 154788, 153237, 31379, 31724, 31939, 32364, 33528, 34199, 40873, 34960, 40874, 36537, 40875, 36815, 34143, 39392, 37409, 40876, 167353, 136255, 16497, 17058, 23066, null, null, null, 39016, 26475, 17014, 22333, null, 34262, 149883, 33471, 160013, 19585, 159092, 23931, 158485, 159678, 40877, 40878, 23446, 40879, 26343, 32347, 28247, 31178, 15752, 17603, 143958, 141206, 17306, 17718, null, 23765, 146202, 35577, 23672, 15634, 144721, 23928, 40882, 29015, 17752, 147692, 138787, 19575, 14712, 13386, 131492, 158785, 35532, 20404, 131641, 22975, 33132, 38998, 170234, 24379, 134047, null, 139713, 166253, 16642, 18107, 168057, 16135, 40883, 172469, 16632, 14294, 18167, 158790, 16764, 165554, 160767, 17773, 14548, 152730, 17761, 17691, 19849, 19579, 19830, 17898, 16328, 150287, 13921, 17630, 17597, 16877, 23870, 23880, 23894, 15868, 14351, 23972, 23993, 14368, 14392, 24130, 24253, 24357, 24451, 14600, 14612, 14655, 14669, 24791, 24893, 23781, 14729, 25015, 25017, 25039, 14776, 25132, 25232, 25317, 25368, 14840, 22193, 14851, 25570, 25595, 25607, 25690, 14923, 25792, 23829, 22049, 40863, 14999, 25990, 15037, 26111, 26195, 15090, 26258, 15138, 26390, 15170, 26532, 26624, 15192, 26698, 26756, 15218, 15217, 15227, 26889, 26947, 29276, 26980, 27039, 27013, 15292, 27094, 15325, 27237, 27252, 27249, 27266, 15340, 27289, 15346, 27307, 27317, 27348, 27382, 27521, 27585, 27626, 27765, 27818, 15563, 27906, 27910, 27942, 28033, 15599, 28068, 28081, 28181, 28184, 28201, 28294, 166336, 28347, 28386, 28378, 40831, 28392, 28393, 28452, 28468, 15686, 147265, 28545, 28606, 15722, 15733, 29111, 23705, 15754, 28716, 15761, 28752, 28756, 28783, 28799, 28809, 131877, 17345, 13809, 134872, 147159, 22462, 159443, 28990, 153568, 13902, 27042, 166889, 23412, 31305, 153825, 169177, 31333, 31357, 154028, 31419, 31408, 31426, 31427, 29137, 156813, 16842, 31450, 31453, 31466, 16879, 21682, 154625, 31499, 31573, 31529, 152334, 154878, 31650, 31599, 33692, 154548, 158847, 31696, 33825, 31634, 31672, 154912, 15789, 154725, 33938, 31738, 31750, 31797, 154817, 31812, 31875, 149634, 31910, 26237, 148856, 31945, 31943, 31974, 31860, 31987, 31989, 31950, 32359, 17693, 159300, 32093, 159446, 29837, 32137, 32171, 28981, 32179, 32210, 147543, 155689, 32228, 15635, 32245, 137209, 32229, 164717, 32285, 155937, 155994, 32366, 32402, 17195, 37996, 32295, 32576, 32577, 32583, 31030, 156368, 39393, 32663, 156497, 32675, 136801, 131176, 17756, 145254, 17667, 164666, 32762, 156809, 32773, 32776, 32797, 32808, 32815, 172167, 158915, 32827, 32828, 32865, 141076, 18825, 157222, 146915, 157416, 26405, 32935, 166472, 33031, 33050, 22704, 141046, 27775, 156824, 151480, 25831, 136330, 33304, 137310, 27219, 150117, 150165, 17530, 33321, 133901, 158290, 146814, 20473, 136445, 34018, 33634, 158474, 149927, 144688, 137075, 146936, 33450, 26907, 194964, 16859, 34123, 33488, 33562, 134678, 137140, 14017, 143741, 144730, 33403, 33506, 33560, 147083, 159139, 158469, 158615, 144846, 15807, 33565, 21996, 33669, 17675, 159141, 33708, 33729, 33747, 13438, 159444, 27223, 34138, 13462, 159298, 143087, 33880, 154596, 33905, 15827, 17636, 27303, 33866, 146613, 31064, 33960, 158614, 159351, 159299, 34014, 33807, 33681, 17568, 33939, 34020, 154769, 16960, 154816, 17731, 34100, 23282, 159385, 17703, 34163, 17686, 26559, 34326, 165413, 165435, 34241, 159880, 34306, 136578, 159949, 194994, 17770, 34344, 13896, 137378, 21495, 160666, 34430, 34673, 172280, 34798, 142375, 34737, 34778, 34831, 22113, 34412, 26710, 17935, 34885, 34886, 161248, 146873, 161252, 34910, 34972, 18011, 34996, 34997, 25537, 35013, 30583, 161551, 35207, 35210, 35238, 35241, 35239, 35260, 166437, 35303, 162084, 162493, 35484, 30611, 37374, 35472, 162393, 31465, 162618, 147343, 18195, 162616, 29052, 35596, 35615, 152624, 152933, 35647, 35660, 35661, 35497, 150138, 35728, 35739, 35503, 136927, 17941, 34895, 35995, 163156, 163215, 195028, 14117, 163155, 36054, 163224, 163261, 36114, 36099, 137488, 36059, 28764, 36113, 150729, 16080, 36215, 36265, 163842, 135188, 149898, 15228, 164284, 160012, 31463, 36525, 36534, 36547, 37588, 36633, 36653, 164709, 164882, 36773, 37635, 172703, 133712, 36787, 18730, 166366, 165181, 146875, 24312, 143970, 36857, 172052, 165564, 165121, 140069, 14720, 159447, 36919, 165180, 162494, 36961, 165228, 165387, 37032, 165651, 37060, 165606, 37038, 37117, 37223, 15088, 37289, 37316, 31916, 166195, 138889, 37390, 27807, 37441, 37474, 153017, 37561, 166598, 146587, 166668, 153051, 134449, 37676, 37739, 166625, 166891, 28815, 23235, 166626, 166629, 18789, 37444, 166892, 166969, 166911, 37747, 37979, 36540, 38277, 38310, 37926, 38304, 28662, 17081, 140922, 165592, 135804, 146990, 18911, 27676, 38523, 38550, 16748, 38563, 159445, 25050, 38582, 30965, 166624, 38589, 21452, 18849, 158904, 131700, 156688, 168111, 168165, 150225, 137493, 144138, 38705, 34370, 38710, 18959, 17725, 17797, 150249, 28789, 23361, 38683, 38748, 168405, 38743, 23370, 168427, 38751, 37925, 20688, 143543, 143548, 38793, 38815, 38833, 38846, 38848, 38866, 38880, 152684, 38894, 29724, 169011, 38911, 38901, 168989, 162170, 19153, 38964, 38963, 38987, 39014, 15118, 160117, 15697, 132656, 147804, 153350, 39114, 39095, 39112, 39111, 19199, 159015, 136915, 21936, 39137, 39142, 39148, 37752, 39225, 150057, 19314, 170071, 170245, 39413, 39436, 39483, 39440, 39512, 153381, 14020, 168113, 170965, 39648, 39650, 170757, 39668, 19470, 39700, 39725, 165376, 20532, 39732, 158120, 14531, 143485, 39760, 39744, 171326, 23109, 137315, 39822, 148043, 39938, 39935, 39948, 171624, 40404, 171959, 172434, 172459, 172257, 172323, 172511, 40318, 40323, 172340, 40462, 26760, 40388, 139611, 172435, 172576, 137531, 172595, 40249, 172217, 172724, 40592, 40597, 40606, 40610, 19764, 40618, 40623, 148324, 40641, 15200, 14821, 15645, 20274, 14270, 166955, 40706, 40712, 19350, 37924, 159138, 40727, 40726, 40761, 22175, 22154, 40773, 39352, 168075, 38898, 33919, 40802, 40809, 31452, 40846, 29206, 19390, 149877, 149947, 29047, 150008, 148296, 150097, 29598, 166874, 137466, 31135, 166270, 167478, 37737, 37875, 166468, 37612, 37761, 37835, 166252, 148665, 29207, 16107, 30578, 31299, 28880, 148595, 148472, 29054, 137199, 28835, 137406, 144793, 16071, 137349, 152623, 137208, 14114, 136955, 137273, 14049, 137076, 137425, 155467, 14115, 136896, 22363, 150053, 136190, 135848, 136134, 136374, 34051, 145062, 34051, 33877, 149908, 160101, 146993, 152924, 147195, 159826, 17652, 145134, 170397, 159526, 26617, 14131, 15381, 15847, 22636, 137506, 26640, 16471, 145215, 147681, 147595, 147727, 158753, 21707, 22174, 157361, 22162, 135135, 134056, 134669, 37830, 166675, 37788, 20216, 20779, 14361, 148534, 20156, 132197, 131967, 20299, 20362, 153169, 23144, 131499, 132043, 14745, 131850, 132116, 13365, 20265, 131776, 167603, 131701, 35546, 131596, 20120, 20685, 20749, 20386, 20227, 150030, 147082, 20290, 20526, 20588, 20609, 20428, 20453, 20568, 20732, 20825, 20827, 20829, 20830, 28278, 144789, 147001, 147135, 28018, 137348, 147081, 20904, 20931, 132576, 17629, 132259, 132242, 132241, 36218, 166556, 132878, 21081, 21156, 133235, 21217, 37742, 18042, 29068, 148364, 134176, 149932, 135396, 27089, 134685, 29817, 16094, 29849, 29716, 29782, 29592, 19342, 150204, 147597, 21456, 13700, 29199, 147657, 21940, 131909, 21709, 134086, 22301, 37469, 38644, 37734, 22493, 22413, 22399, 13886, 22731, 23193, 166470, 136954, 137071, 136976, 23084, 22968, 37519, 23166, 23247, 23058, 153926, 137715, 137313, 148117, 14069, 27909, 29763, 23073, 155267, 23169, 166871, 132115, 37856, 29836, 135939, 28933, 18802, 37896, 166395, 37821, 14240, 23582, 23710, 24158, 24136, 137622, 137596, 146158, 24269, 23375, 137475, 137476, 14081, 137376, 14045, 136958, 14035, 33066, 166471, 138682, 144498, 166312, 24332, 24334, 137511, 137131, 23147, 137019, 23364, 34324, 161277, 34912, 24702, 141408, 140843, 24539, 16056, 140719, 140734, 168072, 159603, 25024, 131134, 131142, 140827, 24985, 24984, 24693, 142491, 142599, 149204, 168269, 25713, 149093, 142186, 14889, 142114, 144464, 170218, 142968, 25399, 173147, 25782, 25393, 25553, 149987, 142695, 25252, 142497, 25659, 25963, 26994, 15348, 143502, 144045, 149897, 144043, 21773, 144096, 137433, 169023, 26318, 144009, 143795, 15072, 16784, 152964, 166690, 152975, 136956, 152923, 152613, 30958, 143619, 137258, 143924, 13412, 143887, 143746, 148169, 26254, 159012, 26219, 19347, 26160, 161904, 138731, 26211, 144082, 144097, 26142, 153714, 14545, 145466, 145340, 15257, 145314, 144382, 29904, 15254, 26511, 149034, 26806, 26654, 15300, 27326, 14435, 145365, 148615, 27187, 27218, 27337, 27397, 137490, 25873, 26776, 27212, 15319, 27258, 27479, 147392, 146586, 37792, 37618, 166890, 166603, 37513, 163870, 166364, 37991, 28069, 28427, 149996, 28007, 147327, 15759, 28164, 147516, 23101, 28170, 22599, 27940, 30786, 28987, 148250, 148086, 28913, 29264, 29319, 29332, 149391, 149285, 20857, 150180, 132587, 29818, 147192, 144991, 150090, 149783, 155617, 16134, 16049, 150239, 166947, 147253, 24743, 16115, 29900, 29756, 37767, 29751, 17567, 159210, 17745, 30083, 16227, 150745, 150790, 16216, 30037, 30323, 173510, 15129, 29800, 166604, 149931, 149902, 15099, 15821, 150094, 16127, 149957, 149747, 37370, 22322, 37698, 166627, 137316, 20703, 152097, 152039, 30584, 143922, 30478, 30479, 30587, 149143, 145281, 14942, 149744, 29752, 29851, 16063, 150202, 150215, 16584, 150166, 156078, 37639, 152961, 30750, 30861, 30856, 30930, 29648, 31065, 161601, 153315, 16654, 31131, 33942, 31141, 27181, 147194, 31290, 31220, 16750, 136934, 16690, 37429, 31217, 134476, 149900, 131737, 146874, 137070, 13719, 21867, 13680, 13994, 131540, 134157, 31458, 23129, 141045, 154287, 154268, 23053, 131675, 30960, 23082, 154566, 31486, 16889, 31837, 31853, 16913, 154547, 155324, 155302, 31949, 150009, 137136, 31886, 31868, 31918, 27314, 32220, 32263, 32211, 32590, 156257, 155996, 162632, 32151, 155266, 17002, 158581, 133398, 26582, 131150, 144847, 22468, 156690, 156664, 149858, 32733, 31527, 133164, 154345, 154947, 31500, 155150, 39398, 34373, 39523, 27164, 144447, 14818, 150007, 157101, 39455, 157088, 33920, 160039, 158929, 17642, 33079, 17410, 32966, 33033, 33090, 157620, 39107, 158274, 33378, 33381, 158289, 33875, 159143, 34320, 160283, 23174, 16767, 137280, 23339, 137377, 23268, 137432, 34464, 195004, 146831, 34861, 160802, 23042, 34926, 20293, 34951, 35007, 35046, 35173, 35149, 153219, 35156, 161669, 161668, 166901, 166873, 166812, 166393, 16045, 33955, 18165, 18127, 14322, 35389, 35356, 169032, 24397, 37419, 148100, 26068, 28969, 28868, 137285, 40301, 35999, 36073, 163292, 22938, 30659, 23024, 17262, 14036, 36394, 36519, 150537, 36656, 36682, 17140, 27736, 28603, 140065, 18587, 28537, 28299, 137178, 39913, 14005, 149807, 37051, 37015, 21873, 18694, 37307, 37892, 166475, 16482, 166652, 37927, 166941, 166971, 34021, 35371, 38297, 38311, 38295, 38294, 167220, 29765, 16066, 149759, 150082, 148458, 16103, 143909, 38543, 167655, 167526, 167525, 16076, 149997, 150136, 147438, 29714, 29803, 16124, 38721, 168112, 26695, 18973, 168083, 153567, 38749, 37736, 166281, 166950, 166703, 156606, 37562, 23313, 35689, 18748, 29689, 147995, 38811, 38769, 39224, 134950, 24001, 166853, 150194, 38943, 169178, 37622, 169431, 37349, 17600, 166736, 150119, 166756, 39132, 166469, 16128, 37418, 18725, 33812, 39227, 39245, 162566, 15869, 39323, 19311, 39338, 39516, 166757, 153800, 27279, 39457, 23294, 39471, 170225, 19344, 170312, 39356, 19389, 19351, 37757, 22642, 135938, 22562, 149944, 136424, 30788, 141087, 146872, 26821, 15741, 37976, 14631, 24912, 141185, 141675, 24839, 40015, 40019, 40059, 39989, 39952, 39807, 39887, 171565, 39839, 172533, 172286, 40225, 19630, 147716, 40472, 19632, 40204, 172468, 172269, 172275, 170287, 40357, 33981, 159250, 159711, 158594, 34300, 17715, 159140, 159364, 159216, 33824, 34286, 159232, 145367, 155748, 31202, 144796, 144960, 18733, 149982, 15714, 37851, 37566, 37704, 131775, 30905, 37495, 37965, 20452, 13376, 36964, 152925, 30781, 30804, 30902, 30795, 137047, 143817, 149825, 13978, 20338, 28634, 28633, 28702, 28702, 21524, 147893, 22459, 22771, 22410, 40214, 22487, 28980, 13487, 147884, 29163, 158784, 151447, 23336, 137141, 166473, 24844, 23246, 23051, 17084, 148616, 14124, 19323, 166396, 37819, 37816, 137430, 134941, 33906, 158912, 136211, 148218, 142374, 148417, 22932, 146871, 157505, 32168, 155995, 155812, 149945, 149899, 166394, 37605, 29666, 16105, 29876, 166755, 137375, 16097, 150195, 27352, 29683, 29691, 16086, 150078, 150164, 137177, 150118, 132007, 136228, 149989, 29768, 149782, 28837, 149878, 37508, 29670, 37727, 132350, 37681, 166606, 166422, 37766, 166887, 153045, 18741, 166530, 29035, 149827, 134399, 22180, 132634, 134123, 134328, 21762, 31172, 137210, 32254, 136898, 150096, 137298, 17710, 37889, 14090, 166592, 149933, 22960, 137407, 137347, 160900, 23201, 14050, 146779, 14000, 37471, 23161, 166529, 137314, 37748, 15565, 133812, 19094, 14730, 20724, 15721, 15692, 136092, 29045, 17147, 164376, 28175, 168164, 17643, 27991, 163407, 28775, 27823, 15574, 147437, 146989, 28162, 28428, 15727, 132085, 30033, 14012, 13512, 18048, 16090, 18545, 22980, 37486, 18750, 36673, 166940, 158656, 22546, 22472, 14038, 136274, 28926, 148322, 150129, 143331, 135856, 140221, 26809, 26983, 136088, 144613, 162804, 145119, 166531, 145366, 144378, 150687, 27162, 145069, 158903, 33854, 17631, 17614, 159014, 159057, 158850, 159710, 28439, 160009, 33597, 137018, 33773, 158848, 159827, 137179, 22921, 23170, 137139, 23137, 23153, 137477, 147964, 14125, 23023, 137020, 14023, 29070, 37776, 26266, 148133, 23150, 23083, 148115, 27179, 147193, 161590, 148571, 148170, 28957, 148057, 166369, 20400, 159016, 23746, 148686, 163405, 148413, 27148, 148054, 135940, 28838, 28979, 148457, 15781, 27871, 194597, 150095, 32357, 23019, 23855, 15859, 24412, 150109, 137183, 32164, 33830, 21637, 146170, 144128, 131604, 22398, 133333, 132633, 16357, 139166, 172726, 28675, 168283, 23920, 29583, 31955, 166489, 168992, 20424, 32743, 29389, 29456, 162548, 29496, 29497, 153334, 29505, 29512, 16041, 162584, 36972, 29173, 149746, 29665, 33270, 16074, 30476, 16081, 27810, 22269, 29721, 29726, 29727, 16098, 16112, 16116, 16122, 29907, 16142, 16211, 30018, 30061, 30066, 30093, 16252, 30152, 30172, 16320, 30285, 16343, 30324, 16348, 30330, 151388, 29064, 22051, 35200, 22633, 16413, 30531, 16441, 26465, 16453, 13787, 30616, 16490, 16495, 23646, 30654, 30667, 22770, 30744, 28857, 30748, 16552, 30777, 30791, 30801, 30822, 33864, 152885, 31027, 26627, 31026, 16643, 16649, 31121, 31129, 36795, 31238, 36796, 16743, 31377, 16818, 31420, 33401, 16836, 31439, 31451, 16847, 20001, 31586, 31596, 31611, 31762, 31771, 16992, 17018, 31867, 31900, 17036, 31928, 17044, 31981, 36755, 28864, 134351, 32207, 32212, 32208, 32253, 32686, 32692, 29343, 17303, 32800, 32805, 31545, 32814, 32817, 32852, 15820, 22452, 28832, 32951, 33001, 17389, 33036, 29482, 33038, 33042, 30048, 33044, 17409, 15161, 33110, 33113, 33114, 17427, 22586, 33148, 33156, 17445, 33171, 17453, 33189, 22511, 33217, 33252, 33364, 17551, 33446, 33398, 33482, 33496, 33535, 17584, 33623, 38505, 27018, 33797, 28917, 33892, 24803, 33928, 17668, 33982, 34017, 34040, 34064, 34104, 34130, 17723, 34159, 34160, 34272, 17783, 34418, 34450, 34482, 34543, 38469, 34699, 17926, 17943, 34990, 35071, 35108, 35143, 35217, 162151, 35369, 35384, 35476, 35508, 35921, 36052, 36082, 36124, 18328, 22623, 36291, 18413, 20206, 36410, 21976, 22356, 36465, 22005, 36528, 18487, 36558, 36578, 36580, 36589, 36594, 36791, 36801, 36810, 36812, 36915, 39364, 18605, 39136, 37395, 18718, 37416, 37464, 37483, 37553, 37550, 37567, 37603, 37611, 37619, 37620, 37629, 37699, 37764, 37805, 18757, 18769, 40639, 37911, 21249, 37917, 37933, 37950, 18794, 37972, 38009, 38189, 38306, 18855, 38388, 38451, 18917, 26528, 18980, 38720, 18997, 38834, 38850, 22100, 19172, 24808, 39097, 19225, 39153, 22596, 39182, 39193, 20916, 39196, 39223, 39234, 39261, 39266, 19312, 39365, 19357, 39484, 39695, 31363, 39785, 39809, 39901, 39921, 39924, 19565, 39968, 14191, 138178, 40265, 39994, 40702, 22096, 40339, 40381, 40384, 40444, 38134, 36790, 40571, 40620, 40625, 40637, 40646, 38108, 40674, 40689, 40696, 31432, 40772, 131220, 131767, 132000, 26906, 38083, 22956, 132311, 22592, 38081, 14265, 132565, 132629, 132726, 136890, 22359, 29043, 133826, 133837, 134079, 21610, 194619, 134091, 21662, 134139, 134203, 134227, 134245, 134268, 24807, 134285, 22138, 134325, 134365, 134381, 134511, 134578, 134600, 26965, 39983, 34725, 134660, 134670, 134871, 135056, 134957, 134771, 23584, 135100, 24075, 135260, 135247, 135286, 26398, 135291, 135304, 135318, 13895, 135359, 135379, 135471, 135483, 21348, 33965, 135907, 136053, 135990, 35713, 136567, 136729, 137155, 137159, 20088, 28859, 137261, 137578, 137773, 137797, 138282, 138352, 138412, 138952, 25283, 138965, 139029, 29080, 26709, 139333, 27113, 14024, 139900, 140247, 140282, 141098, 141425, 141647, 33533, 141671, 141715, 142037, 35237, 142056, 36768, 142094, 38840, 142143, 38983, 39613, 142412, null, 142472, 142519, 154600, 142600, 142610, 142775, 142741, 142914, 143220, 143308, 143411, 143462, 144159, 144350, 24497, 26184, 26303, 162425, 144743, 144883, 29185, 149946, 30679, 144922, 145174, 32391, 131910, 22709, 26382, 26904, 146087, 161367, 155618, 146961, 147129, 161278, 139418, 18640, 19128, 147737, 166554, 148206, 148237, 147515, 148276, 148374, 150085, 132554, 20946, 132625, 22943, 138920, 15294, 146687, 148484, 148694, 22408, 149108, 14747, 149295, 165352, 170441, 14178, 139715, 35678, 166734, 39382, 149522, 149755, 150037, 29193, 150208, 134264, 22885, 151205, 151430, 132985, 36570, 151596, 21135, 22335, 29041, 152217, 152601, 147274, 150183, 21948, 152646, 152686, 158546, 37332, 13427, 152895, 161330, 152926, 18200, 152930, 152934, 153543, 149823, 153693, 20582, 13563, 144332, 24798, 153859, 18300, 166216, 154286, 154505, 154630, 138640, 22433, 29009, 28598, 155906, 162834, 36950, 156082, 151450, 35682, 156674, 156746, 23899, 158711, 36662, 156804, 137500, 35562, 150006, 156808, 147439, 156946, 19392, 157119, 157365, 141083, 37989, 153569, 24981, 23079, 194765, 20411, 22201, 148769, 157436, 20074, 149812, 38486, 28047, 158909, 13848, 35191, 157593, 157806, 156689, 157790, 29151, 157895, 31554, 168128, 133649, 157990, 37124, 158009, 31301, 40432, 158202, 39462, 158253, 13919, 156777, 131105, 31107, 158260, 158555, 23852, 144665, 33743, 158621, 18128, 158884, 30011, 34917, 159150, 22710, 14108, 140685, 159819, 160205, 15444, 160384, 160389, 37505, 139642, 160395, 37680, 160486, 149968, 27705, 38047, 160848, 134904, 34855, 35061, 141606, 164979, 137137, 28344, 150058, 137248, 14756, 14009, 23568, 31203, 17727, 26294, 171181, 170148, 35139, 161740, 161880, 22230, 16607, 136714, 14753, 145199, 164072, 136133, 29101, 33638, 162269, 168360, 23143, 19639, 159919, 166315, 162301, 162314, 162571, 163174, 147834, 31555, 31102, 163849, 28597, 172767, 27139, 164632, 21410, 159239, 37823, 26678, 38749, 164207, 163875, 158133, 136173, 143919, 163912, 23941, 166960, 163971, 22293, 38947, 166217, 23979, 149896, 26046, 27093, 21458, 150181, 147329, 15377, 26422, 163984, 164084, 164142, 139169, 164175, 164233, 164271, 164378, 164614, 164655, 164746, 13770, 164968, 165546, 18682, 25574, 166230, 30728, 37461, 166328, 17394, 166375, 17375, 166376, 166726, 166868, 23032, 166921, 36619, 167877, 168172, 31569, 168208, 168252, 15863, 168286, 150218, 36816, 29327, 22155, 169191, 169449, 169392, 169400, 169778, 170193, 170313, 170346, 170435, 170536, 170766, 171354, 171419, 32415, 171768, 171811, 19620, 38215, 172691, 29090, 172799, 19857, 36882, 173515, 19868, 134300, 36798, 21953, 36794, 140464, 36793, 150163, 17673, 32383, 28502, 27313, 20202, 13540, 166700, 161949, 14138, 36480, 137205, 163876, 166764, 166809, 162366, 157359, 15851, 161365, 146615, 153141, 153942, 20122, 155265, 156248, 22207, 134765, 36366, 23405, 147080, 150686, 25566, 25296, 137206, 137339, 25904, 22061, 154698, 21530, 152337, 15814, 171416, 19581, 22050, 22046, 32585, 155352, 22901, 146752, 34672, 19996, 135146, 134473, 145082, 33047, 40286, 36120, 30267, 40005, 30286, 30649, 37701, 21554, 33096, 33527, 22053, 33074, 33816, 32957, 21994, 31074, 22083, 21526, 134813, 13774, 22021, 22001, 26353, 164578, 13869, 30004, 22000, 21946, 21655, 21874, 134209, 134294, 24272, 151880, 134774, 142434, 134818, 40619, 32090, 21982, 135285, 25245, 38765, 21652, 36045, 29174, 37238, 25596, 25529, 25598, 21865, 142147, 40050, 143027, 20890, 13535, 134567, 20903, 21581, 21790, 21779, 30310, 36397, 157834, 30129, 32950, 34820, 34694, 35015, 33206, 33820, 135361, 17644, 29444, 149254, 23440, 33547, 157843, 22139, 141044, 163119, 147875, 163187, 159440, 160438, 37232, 135641, 37384, 146684, 173737, 134828, 134905, 29286, 138402, 18254, 151490, 163833, 135147, 16634, 40029, 25887, 142752, 18675, 149472, 171388, 135148, 134666, 24674, 161187, 135149, null, 155720, 135559, 29091, 32398, 40272, 19994, 19972, 13687, 23309, 27826, 21351, 13996, 14812, 21373, 13989, 149016, 22682, 150382, 33325, 21579, 22442, 154261, 133497, null, 14930, 140389, 29556, 171692, 19721, 39917, 146686, 171824, 19547, 151465, 169374, 171998, 33884, 146870, 160434, 157619, 145184, 25390, 32037, 147191, 146988, 14890, 36872, 21196, 15988, 13946, 17897, 132238, 30272, 23280, 134838, 30842, 163630, 22695, 16575, 22140, 39819, 23924, 30292, 173108, 40581, 19681, 30201, 14331, 24857, 143578, 148466, null, 22109, 135849, 22439, 149859, 171526, 21044, 159918, 13741, 27722, 40316, 31830, 39737, 22494, 137068, 23635, 25811, 169168, 156469, 160100, 34477, 134440, 159010, 150242, 134513, null, 20990, 139023, 23950, 38659, 138705, 40577, 36940, 31519, 39682, 23761, 31651, 25192, 25397, 39679, 31695, 39722, 31870, 39726, 31810, 31878, 39957, 31740, 39689, 40727, 39963, 149822, 40794, 21875, 23491, 20477, 40600, 20466, 21088, 15878, 21201, 22375, 20566, 22967, 24082, 38856, 40363, 36700, 21609, 38836, 39232, 38842, 21292, 24880, 26924, 21466, 39946, 40194, 19515, 38465, 27008, 20646, 30022, 137069, 39386, 21107, null, 37209, 38529, 37212, null, 37201, 167575, 25471, 159011, 27338, 22033, 37262, 30074, 25221, 132092, 29519, 31856, 154657, 146685, null, 149785, 30422, 39837, 20010, 134356, 33726, 34882, null, 23626, 27072, 20717, 22394, 21023, 24053, 20174, 27697, 131570, 20281, 21660, 21722, 21146, 36226, 13822, 24332, 13811, null, 27474, 37244, 40869, 39831, 38958, 39092, 39610, 40616, 40580, 29050, 31508, null, 27642, 34840, 32632, null, 22048, 173642, 36471, 40787, null, 36308, 36431, 40476, 36353, 25218, 164733, 36392, 36469, 31443, 150135, 31294, 30936, 27882, 35431, 30215, 166490, 40742, 27854, 34774, 30147, 172722, 30803, 194624, 36108, 29410, 29553, 35629, 29442, 29937, 36075, 150203, 34351, 24506, 34976, 17591, null, 137275, 159237, null, 35454, 140571, null, 24829, 30311, 39639, 40260, 37742, 39823, 34805, null, 34831, 36087, 29484, 38689, 39856, 13782, 29362, 19463, 31825, 39242, 155993, 24921, 19460, 40598, 24957, null, 22367, 24943, 25254, 25145, 25294, 14940, 25058, 21418, 144373, 25444, 26626, 13778, 23895, 166850, 36826, 167481, null, 20697, 138566, 30982, 21298, 38456, 134971, 16485, null, 30718, null, 31938, 155418, 31962, 31277, 32870, 32867, 32077, 29957, 29938, 35220, 33306, 26380, 32866, 160902, 32859, 29936, 33027, 30500, 35209, 157644, 30035, 159441, 34729, 34766, 33224, 34700, 35401, 36013, 35651, 30507, 29944, 34010, 13877, 27058, 36262, null, 35241, 29800, 28089, 34753, 147473, 29927, 15835, 29046, 24740, 24988, 15569, 29026, 24695, null, 32625, 166701, 29264, 24809, 19326, 21024, 15384, 146631, 155351, 161366, 152881, 137540, 135934, 170243, 159196, 159917, 23745, 156077, 166415, 145015, 131310, 157766, 151310, 17762, 23327, 156492, 40784, 40614, 156267, 12288, 65292, 12289, 12290, 65294, 8231, 65307, 65306, 65311, 65281, 65072, 8230, 8229, 65104, 65105, 65106, 183, 65108, 65109, 65110, 65111, 65372, 8211, 65073, 8212, 65075, 9588, 65076, 65103, 65288, 65289, 65077, 65078, 65371, 65373, 65079, 65080, 12308, 12309, 65081, 65082, 12304, 12305, 65083, 65084, 12298, 12299, 65085, 65086, 12296, 12297, 65087, 65088, 12300, 12301, 65089, 65090, 12302, 12303, 65091, 65092, 65113, 65114, 65115, 65116, 65117, 65118, 8216, 8217, 8220, 8221, 12317, 12318, 8245, 8242, 65283, 65286, 65290, 8251, 167, 12291, 9675, 9679, 9651, 9650, 9678, 9734, 9733, 9671, 9670, 9633, 9632, 9661, 9660, 12963, 8453, 175, 65507, 65343, 717, 65097, 65098, 65101, 65102, 65099, 65100, 65119, 65120, 65121, 65291, 65293, 215, 247, 177, 8730, 65308, 65310, 65309, 8806, 8807, 8800, 8734, 8786, 8801, 65122, 65123, 65124, 65125, 65126, 65374, 8745, 8746, 8869, 8736, 8735, 8895, 13266, 13265, 8747, 8750, 8757, 8756, 9792, 9794, 8853, 8857, 8593, 8595, 8592, 8594, 8598, 8599, 8601, 8600, 8741, 8739, 65295, 65340, 8725, 65128, 65284, 65509, 12306, 65504, 65505, 65285, 65312, 8451, 8457, 65129, 65130, 65131, 13269, 13212, 13213, 13214, 13262, 13217, 13198, 13199, 13252, 176, 20825, 20827, 20830, 20829, 20833, 20835, 21991, 29929, 31950, 9601, 9602, 9603, 9604, 9605, 9606, 9607, 9608, 9615, 9614, 9613, 9612, 9611, 9610, 9609, 9532, 9524, 9516, 9508, 9500, 9620, 9472, 9474, 9621, 9484, 9488, 9492, 9496, 9581, 9582, 9584, 9583, 9552, 9566, 9578, 9569, 9698, 9699, 9701, 9700, 9585, 9586, 9587, 65296, 65297, 65298, 65299, 65300, 65301, 65302, 65303, 65304, 65305, 8544, 8545, 8546, 8547, 8548, 8549, 8550, 8551, 8552, 8553, 12321, 12322, 12323, 12324, 12325, 12326, 12327, 12328, 12329, 21313, 21316, 21317, 65313, 65314, 65315, 65316, 65317, 65318, 65319, 65320, 65321, 65322, 65323, 65324, 65325, 65326, 65327, 65328, 65329, 65330, 65331, 65332, 65333, 65334, 65335, 65336, 65337, 65338, 65345, 65346, 65347, 65348, 65349, 65350, 65351, 65352, 65353, 65354, 65355, 65356, 65357, 65358, 65359, 65360, 65361, 65362, 65363, 65364, 65365, 65366, 65367, 65368, 65369, 65370, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 963, 964, 965, 966, 967, 968, 969, 12549, 12550, 12551, 12552, 12553, 12554, 12555, 12556, 12557, 12558, 12559, 12560, 12561, 12562, 12563, 12564, 12565, 12566, 12567, 12568, 12569, 12570, 12571, 12572, 12573, 12574, 12575, 12576, 12577, 12578, 12579, 12580, 12581, 12582, 12583, 12584, 12585, 729, 713, 714, 711, 715, 9216, 9217, 9218, 9219, 9220, 9221, 9222, 9223, 9224, 9225, 9226, 9227, 9228, 9229, 9230, 9231, 9232, 9233, 9234, 9235, 9236, 9237, 9238, 9239, 9240, 9241, 9242, 9243, 9244, 9245, 9246, 9247, 9249, 8364, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 19968, 20057, 19969, 19971, 20035, 20061, 20102, 20108, 20154, 20799, 20837, 20843, 20960, 20992, 20993, 21147, 21269, 21313, 21340, 21448, 19977, 19979, 19976, 19978, 20011, 20024, 20961, 20037, 20040, 20063, 20062, 20110, 20129, 20800, 20995, 21242, 21315, 21449, 21475, 22303, 22763, 22805, 22823, 22899, 23376, 23377, 23379, 23544, 23567, 23586, 23608, 23665, 24029, 24037, 24049, 24050, 24051, 24062, 24178, 24318, 24331, 24339, 25165, 19985, 19984, 19981, 20013, 20016, 20025, 20043, 23609, 20104, 20113, 20117, 20114, 20116, 20130, 20161, 20160, 20163, 20166, 20167, 20173, 20170, 20171, 20164, 20803, 20801, 20839, 20845, 20846, 20844, 20887, 20982, 20998, 20999, 21000, 21243, 21246, 21247, 21270, 21305, 21320, 21319, 21317, 21342, 21380, 21451, 21450, 21453, 22764, 22825, 22827, 22826, 22829, 23380, 23569, 23588, 23610, 23663, 24052, 24187, 24319, 24340, 24341, 24515, 25096, 25142, 25163, 25166, 25903, 25991, 26007, 26020, 26041, 26085, 26352, 26376, 26408, 27424, 27490, 27513, 27595, 27604, 27611, 27663, 27700, 28779, 29226, 29238, 29243, 29255, 29273, 29275, 29356, 29579, 19993, 19990, 19989, 19988, 19992, 20027, 20045, 20047, 20046, 20197, 20184, 20180, 20181, 20182, 20183, 20195, 20196, 20185, 20190, 20805, 20804, 20873, 20874, 20908, 20985, 20986, 20984, 21002, 21152, 21151, 21253, 21254, 21271, 21277, 20191, 21322, 21321, 21345, 21344, 21359, 21358, 21435, 21487, 21476, 21491, 21484, 21486, 21481, 21480, 21500, 21496, 21493, 21483, 21478, 21482, 21490, 21489, 21488, 21477, 21485, 21499, 22235, 22234, 22806, 22830, 22833, 22900, 22902, 23381, 23427, 23612, 24040, 24039, 24038, 24066, 24067, 24179, 24188, 24321, 24344, 24343, 24517, 25098, 25171, 25172, 25170, 25169, 26021, 26086, 26414, 26412, 26410, 26411, 26413, 27491, 27597, 27665, 27664, 27704, 27713, 27712, 27710, 29359, 29572, 29577, 29916, 29926, 29976, 29983, 29992, 29993, 30000, 30001, 30002, 30003, 30091, 30333, 30382, 30399, 30446, 30683, 30690, 30707, 31034, 31166, 31348, 31435, 19998, 19999, 20050, 20051, 20073, 20121, 20132, 20134, 20133, 20223, 20233, 20249, 20234, 20245, 20237, 20240, 20241, 20239, 20210, 20214, 20219, 20208, 20211, 20221, 20225, 20235, 20809, 20807, 20806, 20808, 20840, 20849, 20877, 20912, 21015, 21009, 21010, 21006, 21014, 21155, 21256, 21281, 21280, 21360, 21361, 21513, 21519, 21516, 21514, 21520, 21505, 21515, 21508, 21521, 21517, 21512, 21507, 21518, 21510, 21522, 22240, 22238, 22237, 22323, 22320, 22312, 22317, 22316, 22319, 22313, 22809, 22810, 22839, 22840, 22916, 22904, 22915, 22909, 22905, 22914, 22913, 23383, 23384, 23431, 23432, 23429, 23433, 23546, 23574, 23673, 24030, 24070, 24182, 24180, 24335, 24347, 24537, 24534, 25102, 25100, 25101, 25104, 25187, 25179, 25176, 25910, 26089, 26088, 26092, 26093, 26354, 26355, 26377, 26429, 26420, 26417, 26421, 27425, 27492, 27515, 27670, 27741, 27735, 27737, 27743, 27744, 27728, 27733, 27745, 27739, 27725, 27726, 28784, 29279, 29277, 30334, 31481, 31859, 31992, 32566, 32650, 32701, 32769, 32771, 32780, 32786, 32819, 32895, 32905, 32907, 32908, 33251, 33258, 33267, 33276, 33292, 33307, 33311, 33390, 33394, 33406, 34411, 34880, 34892, 34915, 35199, 38433, 20018, 20136, 20301, 20303, 20295, 20311, 20318, 20276, 20315, 20309, 20272, 20304, 20305, 20285, 20282, 20280, 20291, 20308, 20284, 20294, 20323, 20316, 20320, 20271, 20302, 20278, 20313, 20317, 20296, 20314, 20812, 20811, 20813, 20853, 20918, 20919, 21029, 21028, 21033, 21034, 21032, 21163, 21161, 21162, 21164, 21283, 21363, 21365, 21533, 21549, 21534, 21566, 21542, 21582, 21543, 21574, 21571, 21555, 21576, 21570, 21531, 21545, 21578, 21561, 21563, 21560, 21550, 21557, 21558, 21536, 21564, 21568, 21553, 21547, 21535, 21548, 22250, 22256, 22244, 22251, 22346, 22353, 22336, 22349, 22343, 22350, 22334, 22352, 22351, 22331, 22767, 22846, 22941, 22930, 22952, 22942, 22947, 22937, 22934, 22925, 22948, 22931, 22922, 22949, 23389, 23388, 23386, 23387, 23436, 23435, 23439, 23596, 23616, 23617, 23615, 23614, 23696, 23697, 23700, 23692, 24043, 24076, 24207, 24199, 24202, 24311, 24324, 24351, 24420, 24418, 24439, 24441, 24536, 24524, 24535, 24525, 24561, 24555, 24568, 24554, 25106, 25105, 25220, 25239, 25238, 25216, 25206, 25225, 25197, 25226, 25212, 25214, 25209, 25203, 25234, 25199, 25240, 25198, 25237, 25235, 25233, 25222, 25913, 25915, 25912, 26097, 26356, 26463, 26446, 26447, 26448, 26449, 26460, 26454, 26462, 26441, 26438, 26464, 26451, 26455, 27493, 27599, 27714, 27742, 27801, 27777, 27784, 27785, 27781, 27803, 27754, 27770, 27792, 27760, 27788, 27752, 27798, 27794, 27773, 27779, 27762, 27774, 27764, 27782, 27766, 27789, 27796, 27800, 27778, 28790, 28796, 28797, 28792, 29282, 29281, 29280, 29380, 29378, 29590, 29996, 29995, 30007, 30008, 30338, 30447, 30691, 31169, 31168, 31167, 31350, 31995, 32597, 32918, 32915, 32925, 32920, 32923, 32922, 32946, 33391, 33426, 33419, 33421, 35211, 35282, 35328, 35895, 35910, 35925, 35997, 36196, 36208, 36275, 36523, 36554, 36763, 36784, 36802, 36806, 36805, 36804, 24033, 37009, 37026, 37034, 37030, 37027, 37193, 37318, 37324, 38450, 38446, 38449, 38442, 38444, 20006, 20054, 20083, 20107, 20123, 20126, 20139, 20140, 20335, 20381, 20365, 20339, 20351, 20332, 20379, 20363, 20358, 20355, 20336, 20341, 20360, 20329, 20347, 20374, 20350, 20367, 20369, 20346, 20820, 20818, 20821, 20841, 20855, 20854, 20856, 20925, 20989, 21051, 21048, 21047, 21050, 21040, 21038, 21046, 21057, 21182, 21179, 21330, 21332, 21331, 21329, 21350, 21367, 21368, 21369, 21462, 21460, 21463, 21619, 21621, 21654, 21624, 21653, 21632, 21627, 21623, 21636, 21650, 21638, 21628, 21648, 21617, 21622, 21644, 21658, 21602, 21608, 21643, 21629, 21646, 22266, 22403, 22391, 22378, 22377, 22369, 22374, 22372, 22396, 22812, 22857, 22855, 22856, 22852, 22868, 22974, 22971, 22996, 22969, 22958, 22993, 22982, 22992, 22989, 22987, 22995, 22986, 22959, 22963, 22994, 22981, 23391, 23396, 23395, 23447, 23450, 23448, 23452, 23449, 23451, 23578, 23624, 23621, 23622, 23735, 23713, 23736, 23721, 23723, 23729, 23731, 24088, 24090, 24086, 24085, 24091, 24081, 24184, 24218, 24215, 24220, 24213, 24214, 24310, 24358, 24359, 24361, 24448, 24449, 24447, 24444, 24541, 24544, 24573, 24565, 24575, 24591, 24596, 24623, 24629, 24598, 24618, 24597, 24609, 24615, 24617, 24619, 24603, 25110, 25109, 25151, 25150, 25152, 25215, 25289, 25292, 25284, 25279, 25282, 25273, 25298, 25307, 25259, 25299, 25300, 25291, 25288, 25256, 25277, 25276, 25296, 25305, 25287, 25293, 25269, 25306, 25265, 25304, 25302, 25303, 25286, 25260, 25294, 25918, 26023, 26044, 26106, 26132, 26131, 26124, 26118, 26114, 26126, 26112, 26127, 26133, 26122, 26119, 26381, 26379, 26477, 26507, 26517, 26481, 26524, 26483, 26487, 26503, 26525, 26519, 26479, 26480, 26495, 26505, 26494, 26512, 26485, 26522, 26515, 26492, 26474, 26482, 27427, 27494, 27495, 27519, 27667, 27675, 27875, 27880, 27891, 27825, 27852, 27877, 27827, 27837, 27838, 27836, 27874, 27819, 27861, 27859, 27832, 27844, 27833, 27841, 27822, 27863, 27845, 27889, 27839, 27835, 27873, 27867, 27850, 27820, 27887, 27868, 27862, 27872, 28821, 28814, 28818, 28810, 28825, 29228, 29229, 29240, 29256, 29287, 29289, 29376, 29390, 29401, 29399, 29392, 29609, 29608, 29599, 29611, 29605, 30013, 30109, 30105, 30106, 30340, 30402, 30450, 30452, 30693, 30717, 31038, 31040, 31041, 31177, 31176, 31354, 31353, 31482, 31998, 32596, 32652, 32651, 32773, 32954, 32933, 32930, 32945, 32929, 32939, 32937, 32948, 32938, 32943, 33253, 33278, 33293, 33459, 33437, 33433, 33453, 33469, 33439, 33465, 33457, 33452, 33445, 33455, 33464, 33443, 33456, 33470, 33463, 34382, 34417, 21021, 34920, 36555, 36814, 36820, 36817, 37045, 37048, 37041, 37046, 37319, 37329, 38263, 38272, 38428, 38464, 38463, 38459, 38468, 38466, 38585, 38632, 38738, 38750, 20127, 20141, 20142, 20449, 20405, 20399, 20415, 20448, 20433, 20431, 20445, 20419, 20406, 20440, 20447, 20426, 20439, 20398, 20432, 20420, 20418, 20442, 20430, 20446, 20407, 20823, 20882, 20881, 20896, 21070, 21059, 21066, 21069, 21068, 21067, 21063, 21191, 21193, 21187, 21185, 21261, 21335, 21371, 21402, 21467, 21676, 21696, 21672, 21710, 21705, 21688, 21670, 21683, 21703, 21698, 21693, 21674, 21697, 21700, 21704, 21679, 21675, 21681, 21691, 21673, 21671, 21695, 22271, 22402, 22411, 22432, 22435, 22434, 22478, 22446, 22419, 22869, 22865, 22863, 22862, 22864, 23004, 23000, 23039, 23011, 23016, 23043, 23013, 23018, 23002, 23014, 23041, 23035, 23401, 23459, 23462, 23460, 23458, 23461, 23553, 23630, 23631, 23629, 23627, 23769, 23762, 24055, 24093, 24101, 24095, 24189, 24224, 24230, 24314, 24328, 24365, 24421, 24456, 24453, 24458, 24459, 24455, 24460, 24457, 24594, 24605, 24608, 24613, 24590, 24616, 24653, 24688, 24680, 24674, 24646, 24643, 24684, 24683, 24682, 24676, 25153, 25308, 25366, 25353, 25340, 25325, 25345, 25326, 25341, 25351, 25329, 25335, 25327, 25324, 25342, 25332, 25361, 25346, 25919, 25925, 26027, 26045, 26082, 26149, 26157, 26144, 26151, 26159, 26143, 26152, 26161, 26148, 26359, 26623, 26579, 26609, 26580, 26576, 26604, 26550, 26543, 26613, 26601, 26607, 26564, 26577, 26548, 26586, 26597, 26552, 26575, 26590, 26611, 26544, 26585, 26594, 26589, 26578, 27498, 27523, 27526, 27573, 27602, 27607, 27679, 27849, 27915, 27954, 27946, 27969, 27941, 27916, 27953, 27934, 27927, 27963, 27965, 27966, 27958, 27931, 27893, 27961, 27943, 27960, 27945, 27950, 27957, 27918, 27947, 28843, 28858, 28851, 28844, 28847, 28845, 28856, 28846, 28836, 29232, 29298, 29295, 29300, 29417, 29408, 29409, 29623, 29642, 29627, 29618, 29645, 29632, 29619, 29978, 29997, 30031, 30028, 30030, 30027, 30123, 30116, 30117, 30114, 30115, 30328, 30342, 30343, 30344, 30408, 30406, 30403, 30405, 30465, 30457, 30456, 30473, 30475, 30462, 30460, 30471, 30684, 30722, 30740, 30732, 30733, 31046, 31049, 31048, 31047, 31161, 31162, 31185, 31186, 31179, 31359, 31361, 31487, 31485, 31869, 32002, 32005, 32000, 32009, 32007, 32004, 32006, 32568, 32654, 32703, 32772, 32784, 32781, 32785, 32822, 32982, 32997, 32986, 32963, 32964, 32972, 32993, 32987, 32974, 32990, 32996, 32989, 33268, 33314, 33511, 33539, 33541, 33507, 33499, 33510, 33540, 33509, 33538, 33545, 33490, 33495, 33521, 33537, 33500, 33492, 33489, 33502, 33491, 33503, 33519, 33542, 34384, 34425, 34427, 34426, 34893, 34923, 35201, 35284, 35336, 35330, 35331, 35998, 36000, 36212, 36211, 36276, 36557, 36556, 36848, 36838, 36834, 36842, 36837, 36845, 36843, 36836, 36840, 37066, 37070, 37057, 37059, 37195, 37194, 37325, 38274, 38480, 38475, 38476, 38477, 38754, 38761, 38859, 38893, 38899, 38913, 39080, 39131, 39135, 39318, 39321, 20056, 20147, 20492, 20493, 20515, 20463, 20518, 20517, 20472, 20521, 20502, 20486, 20540, 20511, 20506, 20498, 20497, 20474, 20480, 20500, 20520, 20465, 20513, 20491, 20505, 20504, 20467, 20462, 20525, 20522, 20478, 20523, 20489, 20860, 20900, 20901, 20898, 20941, 20940, 20934, 20939, 21078, 21084, 21076, 21083, 21085, 21290, 21375, 21407, 21405, 21471, 21736, 21776, 21761, 21815, 21756, 21733, 21746, 21766, 21754, 21780, 21737, 21741, 21729, 21769, 21742, 21738, 21734, 21799, 21767, 21757, 21775, 22275, 22276, 22466, 22484, 22475, 22467, 22537, 22799, 22871, 22872, 22874, 23057, 23064, 23068, 23071, 23067, 23059, 23020, 23072, 23075, 23081, 23077, 23052, 23049, 23403, 23640, 23472, 23475, 23478, 23476, 23470, 23477, 23481, 23480, 23556, 23633, 23637, 23632, 23789, 23805, 23803, 23786, 23784, 23792, 23798, 23809, 23796, 24046, 24109, 24107, 24235, 24237, 24231, 24369, 24466, 24465, 24464, 24665, 24675, 24677, 24656, 24661, 24685, 24681, 24687, 24708, 24735, 24730, 24717, 24724, 24716, 24709, 24726, 25159, 25331, 25352, 25343, 25422, 25406, 25391, 25429, 25410, 25414, 25423, 25417, 25402, 25424, 25405, 25386, 25387, 25384, 25421, 25420, 25928, 25929, 26009, 26049, 26053, 26178, 26185, 26191, 26179, 26194, 26188, 26181, 26177, 26360, 26388, 26389, 26391, 26657, 26680, 26696, 26694, 26707, 26681, 26690, 26708, 26665, 26803, 26647, 26700, 26705, 26685, 26612, 26704, 26688, 26684, 26691, 26666, 26693, 26643, 26648, 26689, 27530, 27529, 27575, 27683, 27687, 27688, 27686, 27684, 27888, 28010, 28053, 28040, 28039, 28006, 28024, 28023, 27993, 28051, 28012, 28041, 28014, 27994, 28020, 28009, 28044, 28042, 28025, 28037, 28005, 28052, 28874, 28888, 28900, 28889, 28872, 28879, 29241, 29305, 29436, 29433, 29437, 29432, 29431, 29574, 29677, 29705, 29678, 29664, 29674, 29662, 30036, 30045, 30044, 30042, 30041, 30142, 30149, 30151, 30130, 30131, 30141, 30140, 30137, 30146, 30136, 30347, 30384, 30410, 30413, 30414, 30505, 30495, 30496, 30504, 30697, 30768, 30759, 30776, 30749, 30772, 30775, 30757, 30765, 30752, 30751, 30770, 31061, 31056, 31072, 31071, 31062, 31070, 31069, 31063, 31066, 31204, 31203, 31207, 31199, 31206, 31209, 31192, 31364, 31368, 31449, 31494, 31505, 31881, 32033, 32023, 32011, 32010, 32032, 32034, 32020, 32016, 32021, 32026, 32028, 32013, 32025, 32027, 32570, 32607, 32660, 32709, 32705, 32774, 32792, 32789, 32793, 32791, 32829, 32831, 33009, 33026, 33008, 33029, 33005, 33012, 33030, 33016, 33011, 33032, 33021, 33034, 33020, 33007, 33261, 33260, 33280, 33296, 33322, 33323, 33320, 33324, 33467, 33579, 33618, 33620, 33610, 33592, 33616, 33609, 33589, 33588, 33615, 33586, 33593, 33590, 33559, 33600, 33585, 33576, 33603, 34388, 34442, 34474, 34451, 34468, 34473, 34444, 34467, 34460, 34928, 34935, 34945, 34946, 34941, 34937, 35352, 35344, 35342, 35340, 35349, 35338, 35351, 35347, 35350, 35343, 35345, 35912, 35962, 35961, 36001, 36002, 36215, 36524, 36562, 36564, 36559, 36785, 36865, 36870, 36855, 36864, 36858, 36852, 36867, 36861, 36869, 36856, 37013, 37089, 37085, 37090, 37202, 37197, 37196, 37336, 37341, 37335, 37340, 37337, 38275, 38498, 38499, 38497, 38491, 38493, 38500, 38488, 38494, 38587, 39138, 39340, 39592, 39640, 39717, 39730, 39740, 20094, 20602, 20605, 20572, 20551, 20547, 20556, 20570, 20553, 20581, 20598, 20558, 20565, 20597, 20596, 20599, 20559, 20495, 20591, 20589, 20828, 20885, 20976, 21098, 21103, 21202, 21209, 21208, 21205, 21264, 21263, 21273, 21311, 21312, 21310, 21443, 26364, 21830, 21866, 21862, 21828, 21854, 21857, 21827, 21834, 21809, 21846, 21839, 21845, 21807, 21860, 21816, 21806, 21852, 21804, 21859, 21811, 21825, 21847, 22280, 22283, 22281, 22495, 22533, 22538, 22534, 22496, 22500, 22522, 22530, 22581, 22519, 22521, 22816, 22882, 23094, 23105, 23113, 23142, 23146, 23104, 23100, 23138, 23130, 23110, 23114, 23408, 23495, 23493, 23492, 23490, 23487, 23494, 23561, 23560, 23559, 23648, 23644, 23645, 23815, 23814, 23822, 23835, 23830, 23842, 23825, 23849, 23828, 23833, 23844, 23847, 23831, 24034, 24120, 24118, 24115, 24119, 24247, 24248, 24246, 24245, 24254, 24373, 24375, 24407, 24428, 24425, 24427, 24471, 24473, 24478, 24472, 24481, 24480, 24476, 24703, 24739, 24713, 24736, 24744, 24779, 24756, 24806, 24765, 24773, 24763, 24757, 24796, 24764, 24792, 24789, 24774, 24799, 24760, 24794, 24775, 25114, 25115, 25160, 25504, 25511, 25458, 25494, 25506, 25509, 25463, 25447, 25496, 25514, 25457, 25513, 25481, 25475, 25499, 25451, 25512, 25476, 25480, 25497, 25505, 25516, 25490, 25487, 25472, 25467, 25449, 25448, 25466, 25949, 25942, 25937, 25945, 25943, 21855, 25935, 25944, 25941, 25940, 26012, 26011, 26028, 26063, 26059, 26060, 26062, 26205, 26202, 26212, 26216, 26214, 26206, 26361, 21207, 26395, 26753, 26799, 26786, 26771, 26805, 26751, 26742, 26801, 26791, 26775, 26800, 26755, 26820, 26797, 26758, 26757, 26772, 26781, 26792, 26783, 26785, 26754, 27442, 27578, 27627, 27628, 27691, 28046, 28092, 28147, 28121, 28082, 28129, 28108, 28132, 28155, 28154, 28165, 28103, 28107, 28079, 28113, 28078, 28126, 28153, 28088, 28151, 28149, 28101, 28114, 28186, 28085, 28122, 28139, 28120, 28138, 28145, 28142, 28136, 28102, 28100, 28074, 28140, 28095, 28134, 28921, 28937, 28938, 28925, 28911, 29245, 29309, 29313, 29468, 29467, 29462, 29459, 29465, 29575, 29701, 29706, 29699, 29702, 29694, 29709, 29920, 29942, 29943, 29980, 29986, 30053, 30054, 30050, 30064, 30095, 30164, 30165, 30133, 30154, 30157, 30350, 30420, 30418, 30427, 30519, 30526, 30524, 30518, 30520, 30522, 30827, 30787, 30798, 31077, 31080, 31085, 31227, 31378, 31381, 31520, 31528, 31515, 31532, 31526, 31513, 31518, 31534, 31890, 31895, 31893, 32070, 32067, 32113, 32046, 32057, 32060, 32064, 32048, 32051, 32068, 32047, 32066, 32050, 32049, 32573, 32670, 32666, 32716, 32718, 32722, 32796, 32842, 32838, 33071, 33046, 33059, 33067, 33065, 33072, 33060, 33282, 33333, 33335, 33334, 33337, 33678, 33694, 33688, 33656, 33698, 33686, 33725, 33707, 33682, 33674, 33683, 33673, 33696, 33655, 33659, 33660, 33670, 33703, 34389, 24426, 34503, 34496, 34486, 34500, 34485, 34502, 34507, 34481, 34479, 34505, 34899, 34974, 34952, 34987, 34962, 34966, 34957, 34955, 35219, 35215, 35370, 35357, 35363, 35365, 35377, 35373, 35359, 35355, 35362, 35913, 35930, 36009, 36012, 36011, 36008, 36010, 36007, 36199, 36198, 36286, 36282, 36571, 36575, 36889, 36877, 36890, 36887, 36899, 36895, 36893, 36880, 36885, 36894, 36896, 36879, 36898, 36886, 36891, 36884, 37096, 37101, 37117, 37207, 37326, 37365, 37350, 37347, 37351, 37357, 37353, 38281, 38506, 38517, 38515, 38520, 38512, 38516, 38518, 38519, 38508, 38592, 38634, 38633, 31456, 31455, 38914, 38915, 39770, 40165, 40565, 40575, 40613, 40635, 20642, 20621, 20613, 20633, 20625, 20608, 20630, 20632, 20634, 26368, 20977, 21106, 21108, 21109, 21097, 21214, 21213, 21211, 21338, 21413, 21883, 21888, 21927, 21884, 21898, 21917, 21912, 21890, 21916, 21930, 21908, 21895, 21899, 21891, 21939, 21934, 21919, 21822, 21938, 21914, 21947, 21932, 21937, 21886, 21897, 21931, 21913, 22285, 22575, 22570, 22580, 22564, 22576, 22577, 22561, 22557, 22560, 22777, 22778, 22880, 23159, 23194, 23167, 23186, 23195, 23207, 23411, 23409, 23506, 23500, 23507, 23504, 23562, 23563, 23601, 23884, 23888, 23860, 23879, 24061, 24133, 24125, 24128, 24131, 24190, 24266, 24257, 24258, 24260, 24380, 24429, 24489, 24490, 24488, 24785, 24801, 24754, 24758, 24800, 24860, 24867, 24826, 24853, 24816, 24827, 24820, 24936, 24817, 24846, 24822, 24841, 24832, 24850, 25119, 25161, 25507, 25484, 25551, 25536, 25577, 25545, 25542, 25549, 25554, 25571, 25552, 25569, 25558, 25581, 25582, 25462, 25588, 25578, 25563, 25682, 25562, 25593, 25950, 25958, 25954, 25955, 26001, 26000, 26031, 26222, 26224, 26228, 26230, 26223, 26257, 26234, 26238, 26231, 26366, 26367, 26399, 26397, 26874, 26837, 26848, 26840, 26839, 26885, 26847, 26869, 26862, 26855, 26873, 26834, 26866, 26851, 26827, 26829, 26893, 26898, 26894, 26825, 26842, 26990, 26875, 27454, 27450, 27453, 27544, 27542, 27580, 27631, 27694, 27695, 27692, 28207, 28216, 28244, 28193, 28210, 28263, 28234, 28192, 28197, 28195, 28187, 28251, 28248, 28196, 28246, 28270, 28205, 28198, 28271, 28212, 28237, 28218, 28204, 28227, 28189, 28222, 28363, 28297, 28185, 28238, 28259, 28228, 28274, 28265, 28255, 28953, 28954, 28966, 28976, 28961, 28982, 29038, 28956, 29260, 29316, 29312, 29494, 29477, 29492, 29481, 29754, 29738, 29747, 29730, 29733, 29749, 29750, 29748, 29743, 29723, 29734, 29736, 29989, 29990, 30059, 30058, 30178, 30171, 30179, 30169, 30168, 30174, 30176, 30331, 30332, 30358, 30355, 30388, 30428, 30543, 30701, 30813, 30828, 30831, 31245, 31240, 31243, 31237, 31232, 31384, 31383, 31382, 31461, 31459, 31561, 31574, 31558, 31568, 31570, 31572, 31565, 31563, 31567, 31569, 31903, 31909, 32094, 32080, 32104, 32085, 32043, 32110, 32114, 32097, 32102, 32098, 32112, 32115, 21892, 32724, 32725, 32779, 32850, 32901, 33109, 33108, 33099, 33105, 33102, 33081, 33094, 33086, 33100, 33107, 33140, 33298, 33308, 33769, 33795, 33784, 33805, 33760, 33733, 33803, 33729, 33775, 33777, 33780, 33879, 33802, 33776, 33804, 33740, 33789, 33778, 33738, 33848, 33806, 33796, 33756, 33799, 33748, 33759, 34395, 34527, 34521, 34541, 34516, 34523, 34532, 34512, 34526, 34903, 35009, 35010, 34993, 35203, 35222, 35387, 35424, 35413, 35422, 35388, 35393, 35412, 35419, 35408, 35398, 35380, 35386, 35382, 35414, 35937, 35970, 36015, 36028, 36019, 36029, 36033, 36027, 36032, 36020, 36023, 36022, 36031, 36024, 36234, 36229, 36225, 36302, 36317, 36299, 36314, 36305, 36300, 36315, 36294, 36603, 36600, 36604, 36764, 36910, 36917, 36913, 36920, 36914, 36918, 37122, 37109, 37129, 37118, 37219, 37221, 37327, 37396, 37397, 37411, 37385, 37406, 37389, 37392, 37383, 37393, 38292, 38287, 38283, 38289, 38291, 38290, 38286, 38538, 38542, 38539, 38525, 38533, 38534, 38541, 38514, 38532, 38593, 38597, 38596, 38598, 38599, 38639, 38642, 38860, 38917, 38918, 38920, 39143, 39146, 39151, 39145, 39154, 39149, 39342, 39341, 40643, 40653, 40657, 20098, 20653, 20661, 20658, 20659, 20677, 20670, 20652, 20663, 20667, 20655, 20679, 21119, 21111, 21117, 21215, 21222, 21220, 21218, 21219, 21295, 21983, 21992, 21971, 21990, 21966, 21980, 21959, 21969, 21987, 21988, 21999, 21978, 21985, 21957, 21958, 21989, 21961, 22290, 22291, 22622, 22609, 22616, 22615, 22618, 22612, 22635, 22604, 22637, 22602, 22626, 22610, 22603, 22887, 23233, 23241, 23244, 23230, 23229, 23228, 23219, 23234, 23218, 23913, 23919, 24140, 24185, 24265, 24264, 24338, 24409, 24492, 24494, 24858, 24847, 24904, 24863, 24819, 24859, 24825, 24833, 24840, 24910, 24908, 24900, 24909, 24894, 24884, 24871, 24845, 24838, 24887, 25121, 25122, 25619, 25662, 25630, 25642, 25645, 25661, 25644, 25615, 25628, 25620, 25613, 25654, 25622, 25623, 25606, 25964, 26015, 26032, 26263, 26249, 26247, 26248, 26262, 26244, 26264, 26253, 26371, 27028, 26989, 26970, 26999, 26976, 26964, 26997, 26928, 27010, 26954, 26984, 26987, 26974, 26963, 27001, 27014, 26973, 26979, 26971, 27463, 27506, 27584, 27583, 27603, 27645, 28322, 28335, 28371, 28342, 28354, 28304, 28317, 28359, 28357, 28325, 28312, 28348, 28346, 28331, 28369, 28310, 28316, 28356, 28372, 28330, 28327, 28340, 29006, 29017, 29033, 29028, 29001, 29031, 29020, 29036, 29030, 29004, 29029, 29022, 28998, 29032, 29014, 29242, 29266, 29495, 29509, 29503, 29502, 29807, 29786, 29781, 29791, 29790, 29761, 29759, 29785, 29787, 29788, 30070, 30072, 30208, 30192, 30209, 30194, 30193, 30202, 30207, 30196, 30195, 30430, 30431, 30555, 30571, 30566, 30558, 30563, 30585, 30570, 30572, 30556, 30565, 30568, 30562, 30702, 30862, 30896, 30871, 30872, 30860, 30857, 30844, 30865, 30867, 30847, 31098, 31103, 31105, 33836, 31165, 31260, 31258, 31264, 31252, 31263, 31262, 31391, 31392, 31607, 31680, 31584, 31598, 31591, 31921, 31923, 31925, 32147, 32121, 32145, 32129, 32143, 32091, 32622, 32617, 32618, 32626, 32681, 32680, 32676, 32854, 32856, 32902, 32900, 33137, 33136, 33144, 33125, 33134, 33139, 33131, 33145, 33146, 33126, 33285, 33351, 33922, 33911, 33853, 33841, 33909, 33894, 33899, 33865, 33900, 33883, 33852, 33845, 33889, 33891, 33897, 33901, 33862, 34398, 34396, 34399, 34553, 34579, 34568, 34567, 34560, 34558, 34555, 34562, 34563, 34566, 34570, 34905, 35039, 35028, 35033, 35036, 35032, 35037, 35041, 35018, 35029, 35026, 35228, 35299, 35435, 35442, 35443, 35430, 35433, 35440, 35463, 35452, 35427, 35488, 35441, 35461, 35437, 35426, 35438, 35436, 35449, 35451, 35390, 35432, 35938, 35978, 35977, 36042, 36039, 36040, 36036, 36018, 36035, 36034, 36037, 36321, 36319, 36328, 36335, 36339, 36346, 36330, 36324, 36326, 36530, 36611, 36617, 36606, 36618, 36767, 36786, 36939, 36938, 36947, 36930, 36948, 36924, 36949, 36944, 36935, 36943, 36942, 36941, 36945, 36926, 36929, 37138, 37143, 37228, 37226, 37225, 37321, 37431, 37463, 37432, 37437, 37440, 37438, 37467, 37451, 37476, 37457, 37428, 37449, 37453, 37445, 37433, 37439, 37466, 38296, 38552, 38548, 38549, 38605, 38603, 38601, 38602, 38647, 38651, 38649, 38646, 38742, 38772, 38774, 38928, 38929, 38931, 38922, 38930, 38924, 39164, 39156, 39165, 39166, 39347, 39345, 39348, 39649, 40169, 40578, 40718, 40723, 40736, 20711, 20718, 20709, 20694, 20717, 20698, 20693, 20687, 20689, 20721, 20686, 20713, 20834, 20979, 21123, 21122, 21297, 21421, 22014, 22016, 22043, 22039, 22013, 22036, 22022, 22025, 22029, 22030, 22007, 22038, 22047, 22024, 22032, 22006, 22296, 22294, 22645, 22654, 22659, 22675, 22666, 22649, 22661, 22653, 22781, 22821, 22818, 22820, 22890, 22889, 23265, 23270, 23273, 23255, 23254, 23256, 23267, 23413, 23518, 23527, 23521, 23525, 23526, 23528, 23522, 23524, 23519, 23565, 23650, 23940, 23943, 24155, 24163, 24149, 24151, 24148, 24275, 24278, 24330, 24390, 24432, 24505, 24903, 24895, 24907, 24951, 24930, 24931, 24927, 24922, 24920, 24949, 25130, 25735, 25688, 25684, 25764, 25720, 25695, 25722, 25681, 25703, 25652, 25709, 25723, 25970, 26017, 26071, 26070, 26274, 26280, 26269, 27036, 27048, 27029, 27073, 27054, 27091, 27083, 27035, 27063, 27067, 27051, 27060, 27088, 27085, 27053, 27084, 27046, 27075, 27043, 27465, 27468, 27699, 28467, 28436, 28414, 28435, 28404, 28457, 28478, 28448, 28460, 28431, 28418, 28450, 28415, 28399, 28422, 28465, 28472, 28466, 28451, 28437, 28459, 28463, 28552, 28458, 28396, 28417, 28402, 28364, 28407, 29076, 29081, 29053, 29066, 29060, 29074, 29246, 29330, 29334, 29508, 29520, 29796, 29795, 29802, 29808, 29805, 29956, 30097, 30247, 30221, 30219, 30217, 30227, 30433, 30435, 30596, 30589, 30591, 30561, 30913, 30879, 30887, 30899, 30889, 30883, 31118, 31119, 31117, 31278, 31281, 31402, 31401, 31469, 31471, 31649, 31637, 31627, 31605, 31639, 31645, 31636, 31631, 31672, 31623, 31620, 31929, 31933, 31934, 32187, 32176, 32156, 32189, 32190, 32160, 32202, 32180, 32178, 32177, 32186, 32162, 32191, 32181, 32184, 32173, 32210, 32199, 32172, 32624, 32736, 32737, 32735, 32862, 32858, 32903, 33104, 33152, 33167, 33160, 33162, 33151, 33154, 33255, 33274, 33287, 33300, 33310, 33355, 33993, 33983, 33990, 33988, 33945, 33950, 33970, 33948, 33995, 33976, 33984, 34003, 33936, 33980, 34001, 33994, 34623, 34588, 34619, 34594, 34597, 34612, 34584, 34645, 34615, 34601, 35059, 35074, 35060, 35065, 35064, 35069, 35048, 35098, 35055, 35494, 35468, 35486, 35491, 35469, 35489, 35475, 35492, 35498, 35493, 35496, 35480, 35473, 35482, 35495, 35946, 35981, 35980, 36051, 36049, 36050, 36203, 36249, 36245, 36348, 36628, 36626, 36629, 36627, 36771, 36960, 36952, 36956, 36963, 36953, 36958, 36962, 36957, 36955, 37145, 37144, 37150, 37237, 37240, 37239, 37236, 37496, 37504, 37509, 37528, 37526, 37499, 37523, 37532, 37544, 37500, 37521, 38305, 38312, 38313, 38307, 38309, 38308, 38553, 38556, 38555, 38604, 38610, 38656, 38780, 38789, 38902, 38935, 38936, 39087, 39089, 39171, 39173, 39180, 39177, 39361, 39599, 39600, 39654, 39745, 39746, 40180, 40182, 40179, 40636, 40763, 40778, 20740, 20736, 20731, 20725, 20729, 20738, 20744, 20745, 20741, 20956, 21127, 21128, 21129, 21133, 21130, 21232, 21426, 22062, 22075, 22073, 22066, 22079, 22068, 22057, 22099, 22094, 22103, 22132, 22070, 22063, 22064, 22656, 22687, 22686, 22707, 22684, 22702, 22697, 22694, 22893, 23305, 23291, 23307, 23285, 23308, 23304, 23534, 23532, 23529, 23531, 23652, 23653, 23965, 23956, 24162, 24159, 24161, 24290, 24282, 24287, 24285, 24291, 24288, 24392, 24433, 24503, 24501, 24950, 24935, 24942, 24925, 24917, 24962, 24956, 24944, 24939, 24958, 24999, 24976, 25003, 24974, 25004, 24986, 24996, 24980, 25006, 25134, 25705, 25711, 25721, 25758, 25778, 25736, 25744, 25776, 25765, 25747, 25749, 25769, 25746, 25774, 25773, 25771, 25754, 25772, 25753, 25762, 25779, 25973, 25975, 25976, 26286, 26283, 26292, 26289, 27171, 27167, 27112, 27137, 27166, 27161, 27133, 27169, 27155, 27146, 27123, 27138, 27141, 27117, 27153, 27472, 27470, 27556, 27589, 27590, 28479, 28540, 28548, 28497, 28518, 28500, 28550, 28525, 28507, 28536, 28526, 28558, 28538, 28528, 28516, 28567, 28504, 28373, 28527, 28512, 28511, 29087, 29100, 29105, 29096, 29270, 29339, 29518, 29527, 29801, 29835, 29827, 29822, 29824, 30079, 30240, 30249, 30239, 30244, 30246, 30241, 30242, 30362, 30394, 30436, 30606, 30599, 30604, 30609, 30603, 30923, 30917, 30906, 30922, 30910, 30933, 30908, 30928, 31295, 31292, 31296, 31293, 31287, 31291, 31407, 31406, 31661, 31665, 31684, 31668, 31686, 31687, 31681, 31648, 31692, 31946, 32224, 32244, 32239, 32251, 32216, 32236, 32221, 32232, 32227, 32218, 32222, 32233, 32158, 32217, 32242, 32249, 32629, 32631, 32687, 32745, 32806, 33179, 33180, 33181, 33184, 33178, 33176, 34071, 34109, 34074, 34030, 34092, 34093, 34067, 34065, 34083, 34081, 34068, 34028, 34085, 34047, 34054, 34690, 34676, 34678, 34656, 34662, 34680, 34664, 34649, 34647, 34636, 34643, 34907, 34909, 35088, 35079, 35090, 35091, 35093, 35082, 35516, 35538, 35527, 35524, 35477, 35531, 35576, 35506, 35529, 35522, 35519, 35504, 35542, 35533, 35510, 35513, 35547, 35916, 35918, 35948, 36064, 36062, 36070, 36068, 36076, 36077, 36066, 36067, 36060, 36074, 36065, 36205, 36255, 36259, 36395, 36368, 36381, 36386, 36367, 36393, 36383, 36385, 36382, 36538, 36637, 36635, 36639, 36649, 36646, 36650, 36636, 36638, 36645, 36969, 36974, 36968, 36973, 36983, 37168, 37165, 37159, 37169, 37255, 37257, 37259, 37251, 37573, 37563, 37559, 37610, 37548, 37604, 37569, 37555, 37564, 37586, 37575, 37616, 37554, 38317, 38321, 38660, 38662, 38663, 38665, 38752, 38797, 38795, 38799, 38945, 38955, 38940, 39091, 39178, 39187, 39186, 39192, 39389, 39376, 39391, 39387, 39377, 39381, 39378, 39385, 39607, 39662, 39663, 39719, 39749, 39748, 39799, 39791, 40198, 40201, 40195, 40617, 40638, 40654, 22696, 40786, 20754, 20760, 20756, 20752, 20757, 20864, 20906, 20957, 21137, 21139, 21235, 22105, 22123, 22137, 22121, 22116, 22136, 22122, 22120, 22117, 22129, 22127, 22124, 22114, 22134, 22721, 22718, 22727, 22725, 22894, 23325, 23348, 23416, 23536, 23566, 24394, 25010, 24977, 25001, 24970, 25037, 25014, 25022, 25034, 25032, 25136, 25797, 25793, 25803, 25787, 25788, 25818, 25796, 25799, 25794, 25805, 25791, 25810, 25812, 25790, 25972, 26310, 26313, 26297, 26308, 26311, 26296, 27197, 27192, 27194, 27225, 27243, 27224, 27193, 27204, 27234, 27233, 27211, 27207, 27189, 27231, 27208, 27481, 27511, 27653, 28610, 28593, 28577, 28611, 28580, 28609, 28583, 28595, 28608, 28601, 28598, 28582, 28576, 28596, 29118, 29129, 29136, 29138, 29128, 29141, 29113, 29134, 29145, 29148, 29123, 29124, 29544, 29852, 29859, 29848, 29855, 29854, 29922, 29964, 29965, 30260, 30264, 30266, 30439, 30437, 30624, 30622, 30623, 30629, 30952, 30938, 30956, 30951, 31142, 31309, 31310, 31302, 31308, 31307, 31418, 31705, 31761, 31689, 31716, 31707, 31713, 31721, 31718, 31957, 31958, 32266, 32273, 32264, 32283, 32291, 32286, 32285, 32265, 32272, 32633, 32690, 32752, 32753, 32750, 32808, 33203, 33193, 33192, 33275, 33288, 33368, 33369, 34122, 34137, 34120, 34152, 34153, 34115, 34121, 34157, 34154, 34142, 34691, 34719, 34718, 34722, 34701, 34913, 35114, 35122, 35109, 35115, 35105, 35242, 35238, 35558, 35578, 35563, 35569, 35584, 35548, 35559, 35566, 35582, 35585, 35586, 35575, 35565, 35571, 35574, 35580, 35947, 35949, 35987, 36084, 36420, 36401, 36404, 36418, 36409, 36405, 36667, 36655, 36664, 36659, 36776, 36774, 36981, 36980, 36984, 36978, 36988, 36986, 37172, 37266, 37664, 37686, 37624, 37683, 37679, 37666, 37628, 37675, 37636, 37658, 37648, 37670, 37665, 37653, 37678, 37657, 38331, 38567, 38568, 38570, 38613, 38670, 38673, 38678, 38669, 38675, 38671, 38747, 38748, 38758, 38808, 38960, 38968, 38971, 38967, 38957, 38969, 38948, 39184, 39208, 39198, 39195, 39201, 39194, 39405, 39394, 39409, 39608, 39612, 39675, 39661, 39720, 39825, 40213, 40227, 40230, 40232, 40210, 40219, 40664, 40660, 40845, 40860, 20778, 20767, 20769, 20786, 21237, 22158, 22144, 22160, 22149, 22151, 22159, 22741, 22739, 22737, 22734, 23344, 23338, 23332, 23418, 23607, 23656, 23996, 23994, 23997, 23992, 24171, 24396, 24509, 25033, 25026, 25031, 25062, 25035, 25138, 25140, 25806, 25802, 25816, 25824, 25840, 25830, 25836, 25841, 25826, 25837, 25986, 25987, 26329, 26326, 27264, 27284, 27268, 27298, 27292, 27355, 27299, 27262, 27287, 27280, 27296, 27484, 27566, 27610, 27656, 28632, 28657, 28639, 28640, 28635, 28644, 28651, 28655, 28544, 28652, 28641, 28649, 28629, 28654, 28656, 29159, 29151, 29166, 29158, 29157, 29165, 29164, 29172, 29152, 29237, 29254, 29552, 29554, 29865, 29872, 29862, 29864, 30278, 30274, 30284, 30442, 30643, 30634, 30640, 30636, 30631, 30637, 30703, 30967, 30970, 30964, 30959, 30977, 31143, 31146, 31319, 31423, 31751, 31757, 31742, 31735, 31756, 31712, 31968, 31964, 31966, 31970, 31967, 31961, 31965, 32302, 32318, 32326, 32311, 32306, 32323, 32299, 32317, 32305, 32325, 32321, 32308, 32313, 32328, 32309, 32319, 32303, 32580, 32755, 32764, 32881, 32882, 32880, 32879, 32883, 33222, 33219, 33210, 33218, 33216, 33215, 33213, 33225, 33214, 33256, 33289, 33393, 34218, 34180, 34174, 34204, 34193, 34196, 34223, 34203, 34183, 34216, 34186, 34407, 34752, 34769, 34739, 34770, 34758, 34731, 34747, 34746, 34760, 34763, 35131, 35126, 35140, 35128, 35133, 35244, 35598, 35607, 35609, 35611, 35594, 35616, 35613, 35588, 35600, 35905, 35903, 35955, 36090, 36093, 36092, 36088, 36091, 36264, 36425, 36427, 36424, 36426, 36676, 36670, 36674, 36677, 36671, 36991, 36989, 36996, 36993, 36994, 36992, 37177, 37283, 37278, 37276, 37709, 37762, 37672, 37749, 37706, 37733, 37707, 37656, 37758, 37740, 37723, 37744, 37722, 37716, 38346, 38347, 38348, 38344, 38342, 38577, 38584, 38614, 38684, 38686, 38816, 38867, 38982, 39094, 39221, 39425, 39423, 39854, 39851, 39850, 39853, 40251, 40255, 40587, 40655, 40670, 40668, 40669, 40667, 40766, 40779, 21474, 22165, 22190, 22745, 22744, 23352, 24413, 25059, 25139, 25844, 25842, 25854, 25862, 25850, 25851, 25847, 26039, 26332, 26406, 27315, 27308, 27331, 27323, 27320, 27330, 27310, 27311, 27487, 27512, 27567, 28681, 28683, 28670, 28678, 28666, 28689, 28687, 29179, 29180, 29182, 29176, 29559, 29557, 29863, 29887, 29973, 30294, 30296, 30290, 30653, 30655, 30651, 30652, 30990, 31150, 31329, 31330, 31328, 31428, 31429, 31787, 31783, 31786, 31774, 31779, 31777, 31975, 32340, 32341, 32350, 32346, 32353, 32338, 32345, 32584, 32761, 32763, 32887, 32886, 33229, 33231, 33290, 34255, 34217, 34253, 34256, 34249, 34224, 34234, 34233, 34214, 34799, 34796, 34802, 34784, 35206, 35250, 35316, 35624, 35641, 35628, 35627, 35920, 36101, 36441, 36451, 36454, 36452, 36447, 36437, 36544, 36681, 36685, 36999, 36995, 37000, 37291, 37292, 37328, 37780, 37770, 37782, 37794, 37811, 37806, 37804, 37808, 37784, 37786, 37783, 38356, 38358, 38352, 38357, 38626, 38620, 38617, 38619, 38622, 38692, 38819, 38822, 38829, 38905, 38989, 38991, 38988, 38990, 38995, 39098, 39230, 39231, 39229, 39214, 39333, 39438, 39617, 39683, 39686, 39759, 39758, 39757, 39882, 39881, 39933, 39880, 39872, 40273, 40285, 40288, 40672, 40725, 40748, 20787, 22181, 22750, 22751, 22754, 23541, 40848, 24300, 25074, 25079, 25078, 25077, 25856, 25871, 26336, 26333, 27365, 27357, 27354, 27347, 28699, 28703, 28712, 28698, 28701, 28693, 28696, 29190, 29197, 29272, 29346, 29560, 29562, 29885, 29898, 29923, 30087, 30086, 30303, 30305, 30663, 31001, 31153, 31339, 31337, 31806, 31807, 31800, 31805, 31799, 31808, 32363, 32365, 32377, 32361, 32362, 32645, 32371, 32694, 32697, 32696, 33240, 34281, 34269, 34282, 34261, 34276, 34277, 34295, 34811, 34821, 34829, 34809, 34814, 35168, 35167, 35158, 35166, 35649, 35676, 35672, 35657, 35674, 35662, 35663, 35654, 35673, 36104, 36106, 36476, 36466, 36487, 36470, 36460, 36474, 36468, 36692, 36686, 36781, 37002, 37003, 37297, 37294, 37857, 37841, 37855, 37827, 37832, 37852, 37853, 37846, 37858, 37837, 37848, 37860, 37847, 37864, 38364, 38580, 38627, 38698, 38695, 38753, 38876, 38907, 39006, 39000, 39003, 39100, 39237, 39241, 39446, 39449, 39693, 39912, 39911, 39894, 39899, 40329, 40289, 40306, 40298, 40300, 40594, 40599, 40595, 40628, 21240, 22184, 22199, 22198, 22196, 22204, 22756, 23360, 23363, 23421, 23542, 24009, 25080, 25082, 25880, 25876, 25881, 26342, 26407, 27372, 28734, 28720, 28722, 29200, 29563, 29903, 30306, 30309, 31014, 31018, 31020, 31019, 31431, 31478, 31820, 31811, 31821, 31983, 31984, 36782, 32381, 32380, 32386, 32588, 32768, 33242, 33382, 34299, 34297, 34321, 34298, 34310, 34315, 34311, 34314, 34836, 34837, 35172, 35258, 35320, 35696, 35692, 35686, 35695, 35679, 35691, 36111, 36109, 36489, 36481, 36485, 36482, 37300, 37323, 37912, 37891, 37885, 38369, 38704, 39108, 39250, 39249, 39336, 39467, 39472, 39479, 39477, 39955, 39949, 40569, 40629, 40680, 40751, 40799, 40803, 40801, 20791, 20792, 22209, 22208, 22210, 22804, 23660, 24013, 25084, 25086, 25885, 25884, 26005, 26345, 27387, 27396, 27386, 27570, 28748, 29211, 29351, 29910, 29908, 30313, 30675, 31824, 32399, 32396, 32700, 34327, 34349, 34330, 34851, 34850, 34849, 34847, 35178, 35180, 35261, 35700, 35703, 35709, 36115, 36490, 36493, 36491, 36703, 36783, 37306, 37934, 37939, 37941, 37946, 37944, 37938, 37931, 38370, 38712, 38713, 38706, 38911, 39015, 39013, 39255, 39493, 39491, 39488, 39486, 39631, 39764, 39761, 39981, 39973, 40367, 40372, 40386, 40376, 40605, 40687, 40729, 40796, 40806, 40807, 20796, 20795, 22216, 22218, 22217, 23423, 24020, 24018, 24398, 25087, 25892, 27402, 27489, 28753, 28760, 29568, 29924, 30090, 30318, 30316, 31155, 31840, 31839, 32894, 32893, 33247, 35186, 35183, 35324, 35712, 36118, 36119, 36497, 36499, 36705, 37192, 37956, 37969, 37970, 38717, 38718, 38851, 38849, 39019, 39253, 39509, 39501, 39634, 39706, 40009, 39985, 39998, 39995, 40403, 40407, 40756, 40812, 40810, 40852, 22220, 24022, 25088, 25891, 25899, 25898, 26348, 27408, 29914, 31434, 31844, 31843, 31845, 32403, 32406, 32404, 33250, 34360, 34367, 34865, 35722, 37008, 37007, 37987, 37984, 37988, 38760, 39023, 39260, 39514, 39515, 39511, 39635, 39636, 39633, 40020, 40023, 40022, 40421, 40607, 40692, 22225, 22761, 25900, 28766, 30321, 30322, 30679, 32592, 32648, 34870, 34873, 34914, 35731, 35730, 35734, 33399, 36123, 37312, 37994, 38722, 38728, 38724, 38854, 39024, 39519, 39714, 39768, 40031, 40441, 40442, 40572, 40573, 40711, 40823, 40818, 24307, 27414, 28771, 31852, 31854, 34875, 35264, 36513, 37313, 38002, 38000, 39025, 39262, 39638, 39715, 40652, 28772, 30682, 35738, 38007, 38857, 39522, 39525, 32412, 35740, 36522, 37317, 38013, 38014, 38012, 40055, 40056, 40695, 35924, 38015, 40474, 29224, 39530, 39729, 40475, 40478, 31858, 9312, 9313, 9314, 9315, 9316, 9317, 9318, 9319, 9320, 9321, 9332, 9333, 9334, 9335, 9336, 9337, 9338, 9339, 9340, 9341, 8560, 8561, 8562, 8563, 8564, 8565, 8566, 8567, 8568, 8569, 20022, 20031, 20101, 20128, 20866, 20886, 20907, 21241, 21304, 21353, 21430, 22794, 23424, 24027, 12083, 24191, 24308, 24400, 24417, 25908, 26080, 30098, 30326, 36789, 38582, 168, 710, 12541, 12542, 12445, 12446, 12291, 20189, 12293, 12294, 12295, 12540, 65339, 65341, 10045, 12353, 12354, 12355, 12356, 12357, 12358, 12359, 12360, 12361, 12362, 12363, 12364, 12365, 12366, 12367, 12368, 12369, 12370, 12371, 12372, 12373, 12374, 12375, 12376, 12377, 12378, 12379, 12380, 12381, 12382, 12383, 12384, 12385, 12386, 12387, 12388, 12389, 12390, 12391, 12392, 12393, 12394, 12395, 12396, 12397, 12398, 12399, 12400, 12401, 12402, 12403, 12404, 12405, 12406, 12407, 12408, 12409, 12410, 12411, 12412, 12413, 12414, 12415, 12416, 12417, 12418, 12419, 12420, 12421, 12422, 12423, 12424, 12425, 12426, 12427, 12428, 12429, 12430, 12431, 12432, 12433, 12434, 12435, 12449, 12450, 12451, 12452, 12453, 12454, 12455, 12456, 12457, 12458, 12459, 12460, 12461, 12462, 12463, 12464, 12465, 12466, 12467, 12468, 12469, 12470, 12471, 12472, 12473, 12474, 12475, 12476, 12477, 12478, 12479, 12480, 12481, 12482, 12483, 12484, 12485, 12486, 12487, 12488, 12489, 12490, 12491, 12492, 12493, 12494, 12495, 12496, 12497, 12498, 12499, 12500, 12501, 12502, 12503, 12504, 12505, 12506, 12507, 12508, 12509, 12510, 12511, 12512, 12513, 12514, 12515, 12516, 12517, 12518, 12519, 12520, 12521, 12522, 12523, 12524, 12525, 12526, 12527, 12528, 12529, 12530, 12531, 12532, 12533, 12534, 1040, 1041, 1042, 1043, 1044, 1045, 1025, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1105, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 8679, 8632, 8633, 12751, 131276, 20058, 131210, 20994, 17553, 40880, 20872, 40881, 161287, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 65506, 65508, 65287, 65282, 12849, 8470, 8481, 12443, 12444, 11904, 11908, 11910, 11911, 11912, 11914, 11916, 11917, 11925, 11932, 11933, 11941, 11943, 11946, 11948, 11950, 11958, 11964, 11966, 11974, 11978, 11980, 11981, 11983, 11990, 11991, 11998, 12003, null, null, null, 643, 592, 603, 596, 629, 339, 248, 331, 650, 618, 20034, 20060, 20981, 21274, 21378, 19975, 19980, 20039, 20109, 22231, 64012, 23662, 24435, 19983, 20871, 19982, 20014, 20115, 20162, 20169, 20168, 20888, 21244, 21356, 21433, 22304, 22787, 22828, 23568, 24063, 26081, 27571, 27596, 27668, 29247, 20017, 20028, 20200, 20188, 20201, 20193, 20189, 20186, 21004, 21276, 21324, 22306, 22307, 22807, 22831, 23425, 23428, 23570, 23611, 23668, 23667, 24068, 24192, 24194, 24521, 25097, 25168, 27669, 27702, 27715, 27711, 27707, 29358, 29360, 29578, 31160, 32906, 38430, 20238, 20248, 20268, 20213, 20244, 20209, 20224, 20215, 20232, 20253, 20226, 20229, 20258, 20243, 20228, 20212, 20242, 20913, 21011, 21001, 21008, 21158, 21282, 21279, 21325, 21386, 21511, 22241, 22239, 22318, 22314, 22324, 22844, 22912, 22908, 22917, 22907, 22910, 22903, 22911, 23382, 23573, 23589, 23676, 23674, 23675, 23678, 24031, 24181, 24196, 24322, 24346, 24436, 24533, 24532, 24527, 25180, 25182, 25188, 25185, 25190, 25186, 25177, 25184, 25178, 25189, 26095, 26094, 26430, 26425, 26424, 26427, 26426, 26431, 26428, 26419, 27672, 27718, 27730, 27740, 27727, 27722, 27732, 27723, 27724, 28785, 29278, 29364, 29365, 29582, 29994, 30335, 31349, 32593, 33400, 33404, 33408, 33405, 33407, 34381, 35198, 37017, 37015, 37016, 37019, 37012, 38434, 38436, 38432, 38435, 20310, 20283, 20322, 20297, 20307, 20324, 20286, 20327, 20306, 20319, 20289, 20312, 20269, 20275, 20287, 20321, 20879, 20921, 21020, 21022, 21025, 21165, 21166, 21257, 21347, 21362, 21390, 21391, 21552, 21559, 21546, 21588, 21573, 21529, 21532, 21541, 21528, 21565, 21583, 21569, 21544, 21540, 21575, 22254, 22247, 22245, 22337, 22341, 22348, 22345, 22347, 22354, 22790, 22848, 22950, 22936, 22944, 22935, 22926, 22946, 22928, 22927, 22951, 22945, 23438, 23442, 23592, 23594, 23693, 23695, 23688, 23691, 23689, 23698, 23690, 23686, 23699, 23701, 24032, 24074, 24078, 24203, 24201, 24204, 24200, 24205, 24325, 24349, 24440, 24438, 24530, 24529, 24528, 24557, 24552, 24558, 24563, 24545, 24548, 24547, 24570, 24559, 24567, 24571, 24576, 24564, 25146, 25219, 25228, 25230, 25231, 25236, 25223, 25201, 25211, 25210, 25200, 25217, 25224, 25207, 25213, 25202, 25204, 25911, 26096, 26100, 26099, 26098, 26101, 26437, 26439, 26457, 26453, 26444, 26440, 26461, 26445, 26458, 26443, 27600, 27673, 27674, 27768, 27751, 27755, 27780, 27787, 27791, 27761, 27759, 27753, 27802, 27757, 27783, 27797, 27804, 27750, 27763, 27749, 27771, 27790, 28788, 28794, 29283, 29375, 29373, 29379, 29382, 29377, 29370, 29381, 29589, 29591, 29587, 29588, 29586, 30010, 30009, 30100, 30101, 30337, 31037, 32820, 32917, 32921, 32912, 32914, 32924, 33424, 33423, 33413, 33422, 33425, 33427, 33418, 33411, 33412, 35960, 36809, 36799, 37023, 37025, 37029, 37022, 37031, 37024, 38448, 38440, 38447, 38445, 20019, 20376, 20348, 20357, 20349, 20352, 20359, 20342, 20340, 20361, 20356, 20343, 20300, 20375, 20330, 20378, 20345, 20353, 20344, 20368, 20380, 20372, 20382, 20370, 20354, 20373, 20331, 20334, 20894, 20924, 20926, 21045, 21042, 21043, 21062, 21041, 21180, 21258, 21259, 21308, 21394, 21396, 21639, 21631, 21633, 21649, 21634, 21640, 21611, 21626, 21630, 21605, 21612, 21620, 21606, 21645, 21615, 21601, 21600, 21656, 21603, 21607, 21604, 22263, 22265, 22383, 22386, 22381, 22379, 22385, 22384, 22390, 22400, 22389, 22395, 22387, 22388, 22370, 22376, 22397, 22796, 22853, 22965, 22970, 22991, 22990, 22962, 22988, 22977, 22966, 22972, 22979, 22998, 22961, 22973, 22976, 22984, 22964, 22983, 23394, 23397, 23443, 23445, 23620, 23623, 23726, 23716, 23712, 23733, 23727, 23720, 23724, 23711, 23715, 23725, 23714, 23722, 23719, 23709, 23717, 23734, 23728, 23718, 24087, 24084, 24089, 24360, 24354, 24355, 24356, 24404, 24450, 24446, 24445, 24542, 24549, 24621, 24614, 24601, 24626, 24587, 24628, 24586, 24599, 24627, 24602, 24606, 24620, 24610, 24589, 24592, 24622, 24595, 24593, 24588, 24585, 24604, 25108, 25149, 25261, 25268, 25297, 25278, 25258, 25270, 25290, 25262, 25267, 25263, 25275, 25257, 25264, 25272, 25917, 26024, 26043, 26121, 26108, 26116, 26130, 26120, 26107, 26115, 26123, 26125, 26117, 26109, 26129, 26128, 26358, 26378, 26501, 26476, 26510, 26514, 26486, 26491, 26520, 26502, 26500, 26484, 26509, 26508, 26490, 26527, 26513, 26521, 26499, 26493, 26497, 26488, 26489, 26516, 27429, 27520, 27518, 27614, 27677, 27795, 27884, 27883, 27886, 27865, 27830, 27860, 27821, 27879, 27831, 27856, 27842, 27834, 27843, 27846, 27885, 27890, 27858, 27869, 27828, 27786, 27805, 27776, 27870, 27840, 27952, 27853, 27847, 27824, 27897, 27855, 27881, 27857, 28820, 28824, 28805, 28819, 28806, 28804, 28817, 28822, 28802, 28826, 28803, 29290, 29398, 29387, 29400, 29385, 29404, 29394, 29396, 29402, 29388, 29393, 29604, 29601, 29613, 29606, 29602, 29600, 29612, 29597, 29917, 29928, 30015, 30016, 30014, 30092, 30104, 30383, 30451, 30449, 30448, 30453, 30712, 30716, 30713, 30715, 30714, 30711, 31042, 31039, 31173, 31352, 31355, 31483, 31861, 31997, 32821, 32911, 32942, 32931, 32952, 32949, 32941, 33312, 33440, 33472, 33451, 33434, 33432, 33435, 33461, 33447, 33454, 33468, 33438, 33466, 33460, 33448, 33441, 33449, 33474, 33444, 33475, 33462, 33442, 34416, 34415, 34413, 34414, 35926, 36818, 36811, 36819, 36813, 36822, 36821, 36823, 37042, 37044, 37039, 37043, 37040, 38457, 38461, 38460, 38458, 38467, 20429, 20421, 20435, 20402, 20425, 20427, 20417, 20436, 20444, 20441, 20411, 20403, 20443, 20423, 20438, 20410, 20416, 20409, 20460, 21060, 21065, 21184, 21186, 21309, 21372, 21399, 21398, 21401, 21400, 21690, 21665, 21677, 21669, 21711, 21699, 33549, 21687, 21678, 21718, 21686, 21701, 21702, 21664, 21616, 21692, 21666, 21694, 21618, 21726, 21680, 22453, 22430, 22431, 22436, 22412, 22423, 22429, 22427, 22420, 22424, 22415, 22425, 22437, 22426, 22421, 22772, 22797, 22867, 23009, 23006, 23022, 23040, 23025, 23005, 23034, 23037, 23036, 23030, 23012, 23026, 23031, 23003, 23017, 23027, 23029, 23008, 23038, 23028, 23021, 23464, 23628, 23760, 23768, 23756, 23767, 23755, 23771, 23774, 23770, 23753, 23751, 23754, 23766, 23763, 23764, 23759, 23752, 23750, 23758, 23775, 23800, 24057, 24097, 24098, 24099, 24096, 24100, 24240, 24228, 24226, 24219, 24227, 24229, 24327, 24366, 24406, 24454, 24631, 24633, 24660, 24690, 24670, 24645, 24659, 24647, 24649, 24667, 24652, 24640, 24642, 24671, 24612, 24644, 24664, 24678, 24686, 25154, 25155, 25295, 25357, 25355, 25333, 25358, 25347, 25323, 25337, 25359, 25356, 25336, 25334, 25344, 25363, 25364, 25338, 25365, 25339, 25328, 25921, 25923, 26026, 26047, 26166, 26145, 26162, 26165, 26140, 26150, 26146, 26163, 26155, 26170, 26141, 26164, 26169, 26158, 26383, 26384, 26561, 26610, 26568, 26554, 26588, 26555, 26616, 26584, 26560, 26551, 26565, 26603, 26596, 26591, 26549, 26573, 26547, 26615, 26614, 26606, 26595, 26562, 26553, 26574, 26599, 26608, 26546, 26620, 26566, 26605, 26572, 26542, 26598, 26587, 26618, 26569, 26570, 26563, 26602, 26571, 27432, 27522, 27524, 27574, 27606, 27608, 27616, 27680, 27681, 27944, 27956, 27949, 27935, 27964, 27967, 27922, 27914, 27866, 27955, 27908, 27929, 27962, 27930, 27921, 27904, 27933, 27970, 27905, 27928, 27959, 27907, 27919, 27968, 27911, 27936, 27948, 27912, 27938, 27913, 27920, 28855, 28831, 28862, 28849, 28848, 28833, 28852, 28853, 28841, 29249, 29257, 29258, 29292, 29296, 29299, 29294, 29386, 29412, 29416, 29419, 29407, 29418, 29414, 29411, 29573, 29644, 29634, 29640, 29637, 29625, 29622, 29621, 29620, 29675, 29631, 29639, 29630, 29635, 29638, 29624, 29643, 29932, 29934, 29998, 30023, 30024, 30119, 30122, 30329, 30404, 30472, 30467, 30468, 30469, 30474, 30455, 30459, 30458, 30695, 30696, 30726, 30737, 30738, 30725, 30736, 30735, 30734, 30729, 30723, 30739, 31050, 31052, 31051, 31045, 31044, 31189, 31181, 31183, 31190, 31182, 31360, 31358, 31441, 31488, 31489, 31866, 31864, 31865, 31871, 31872, 31873, 32003, 32008, 32001, 32600, 32657, 32653, 32702, 32775, 32782, 32783, 32788, 32823, 32984, 32967, 32992, 32977, 32968, 32962, 32976, 32965, 32995, 32985, 32988, 32970, 32981, 32969, 32975, 32983, 32998, 32973, 33279, 33313, 33428, 33497, 33534, 33529, 33543, 33512, 33536, 33493, 33594, 33515, 33494, 33524, 33516, 33505, 33522, 33525, 33548, 33531, 33526, 33520, 33514, 33508, 33504, 33530, 33523, 33517, 34423, 34420, 34428, 34419, 34881, 34894, 34919, 34922, 34921, 35283, 35332, 35335, 36210, 36835, 36833, 36846, 36832, 37105, 37053, 37055, 37077, 37061, 37054, 37063, 37067, 37064, 37332, 37331, 38484, 38479, 38481, 38483, 38474, 38478, 20510, 20485, 20487, 20499, 20514, 20528, 20507, 20469, 20468, 20531, 20535, 20524, 20470, 20471, 20503, 20508, 20512, 20519, 20533, 20527, 20529, 20494, 20826, 20884, 20883, 20938, 20932, 20933, 20936, 20942, 21089, 21082, 21074, 21086, 21087, 21077, 21090, 21197, 21262, 21406, 21798, 21730, 21783, 21778, 21735, 21747, 21732, 21786, 21759, 21764, 21768, 21739, 21777, 21765, 21745, 21770, 21755, 21751, 21752, 21728, 21774, 21763, 21771, 22273, 22274, 22476, 22578, 22485, 22482, 22458, 22470, 22461, 22460, 22456, 22454, 22463, 22471, 22480, 22457, 22465, 22798, 22858, 23065, 23062, 23085, 23086, 23061, 23055, 23063, 23050, 23070, 23091, 23404, 23463, 23469, 23468, 23555, 23638, 23636, 23788, 23807, 23790, 23793, 23799, 23808, 23801, 24105, 24104, 24232, 24238, 24234, 24236, 24371, 24368, 24423, 24669, 24666, 24679, 24641, 24738, 24712, 24704, 24722, 24705, 24733, 24707, 24725, 24731, 24727, 24711, 24732, 24718, 25113, 25158, 25330, 25360, 25430, 25388, 25412, 25413, 25398, 25411, 25572, 25401, 25419, 25418, 25404, 25385, 25409, 25396, 25432, 25428, 25433, 25389, 25415, 25395, 25434, 25425, 25400, 25431, 25408, 25416, 25930, 25926, 26054, 26051, 26052, 26050, 26186, 26207, 26183, 26193, 26386, 26387, 26655, 26650, 26697, 26674, 26675, 26683, 26699, 26703, 26646, 26673, 26652, 26677, 26667, 26669, 26671, 26702, 26692, 26676, 26653, 26642, 26644, 26662, 26664, 26670, 26701, 26682, 26661, 26656, 27436, 27439, 27437, 27441, 27444, 27501, 32898, 27528, 27622, 27620, 27624, 27619, 27618, 27623, 27685, 28026, 28003, 28004, 28022, 27917, 28001, 28050, 27992, 28002, 28013, 28015, 28049, 28045, 28143, 28031, 28038, 27998, 28007, 28000, 28055, 28016, 28028, 27999, 28034, 28056, 27951, 28008, 28043, 28030, 28032, 28036, 27926, 28035, 28027, 28029, 28021, 28048, 28892, 28883, 28881, 28893, 28875, 32569, 28898, 28887, 28882, 28894, 28896, 28884, 28877, 28869, 28870, 28871, 28890, 28878, 28897, 29250, 29304, 29303, 29302, 29440, 29434, 29428, 29438, 29430, 29427, 29435, 29441, 29651, 29657, 29669, 29654, 29628, 29671, 29667, 29673, 29660, 29650, 29659, 29652, 29661, 29658, 29655, 29656, 29672, 29918, 29919, 29940, 29941, 29985, 30043, 30047, 30128, 30145, 30139, 30148, 30144, 30143, 30134, 30138, 30346, 30409, 30493, 30491, 30480, 30483, 30482, 30499, 30481, 30485, 30489, 30490, 30498, 30503, 30755, 30764, 30754, 30773, 30767, 30760, 30766, 30763, 30753, 30761, 30771, 30762, 30769, 31060, 31067, 31055, 31068, 31059, 31058, 31057, 31211, 31212, 31200, 31214, 31213, 31210, 31196, 31198, 31197, 31366, 31369, 31365, 31371, 31372, 31370, 31367, 31448, 31504, 31492, 31507, 31493, 31503, 31496, 31498, 31502, 31497, 31506, 31876, 31889, 31882, 31884, 31880, 31885, 31877, 32030, 32029, 32017, 32014, 32024, 32022, 32019, 32031, 32018, 32015, 32012, 32604, 32609, 32606, 32608, 32605, 32603, 32662, 32658, 32707, 32706, 32704, 32790, 32830, 32825, 33018, 33010, 33017, 33013, 33025, 33019, 33024, 33281, 33327, 33317, 33587, 33581, 33604, 33561, 33617, 33573, 33622, 33599, 33601, 33574, 33564, 33570, 33602, 33614, 33563, 33578, 33544, 33596, 33613, 33558, 33572, 33568, 33591, 33583, 33577, 33607, 33605, 33612, 33619, 33566, 33580, 33611, 33575, 33608, 34387, 34386, 34466, 34472, 34454, 34445, 34449, 34462, 34439, 34455, 34438, 34443, 34458, 34437, 34469, 34457, 34465, 34471, 34453, 34456, 34446, 34461, 34448, 34452, 34883, 34884, 34925, 34933, 34934, 34930, 34944, 34929, 34943, 34927, 34947, 34942, 34932, 34940, 35346, 35911, 35927, 35963, 36004, 36003, 36214, 36216, 36277, 36279, 36278, 36561, 36563, 36862, 36853, 36866, 36863, 36859, 36868, 36860, 36854, 37078, 37088, 37081, 37082, 37091, 37087, 37093, 37080, 37083, 37079, 37084, 37092, 37200, 37198, 37199, 37333, 37346, 37338, 38492, 38495, 38588, 39139, 39647, 39727, 20095, 20592, 20586, 20577, 20574, 20576, 20563, 20555, 20573, 20594, 20552, 20557, 20545, 20571, 20554, 20578, 20501, 20549, 20575, 20585, 20587, 20579, 20580, 20550, 20544, 20590, 20595, 20567, 20561, 20944, 21099, 21101, 21100, 21102, 21206, 21203, 21293, 21404, 21877, 21878, 21820, 21837, 21840, 21812, 21802, 21841, 21858, 21814, 21813, 21808, 21842, 21829, 21772, 21810, 21861, 21838, 21817, 21832, 21805, 21819, 21824, 21835, 22282, 22279, 22523, 22548, 22498, 22518, 22492, 22516, 22528, 22509, 22525, 22536, 22520, 22539, 22515, 22479, 22535, 22510, 22499, 22514, 22501, 22508, 22497, 22542, 22524, 22544, 22503, 22529, 22540, 22513, 22505, 22512, 22541, 22532, 22876, 23136, 23128, 23125, 23143, 23134, 23096, 23093, 23149, 23120, 23135, 23141, 23148, 23123, 23140, 23127, 23107, 23133, 23122, 23108, 23131, 23112, 23182, 23102, 23117, 23097, 23116, 23152, 23145, 23111, 23121, 23126, 23106, 23132, 23410, 23406, 23489, 23488, 23641, 23838, 23819, 23837, 23834, 23840, 23820, 23848, 23821, 23846, 23845, 23823, 23856, 23826, 23843, 23839, 23854, 24126, 24116, 24241, 24244, 24249, 24242, 24243, 24374, 24376, 24475, 24470, 24479, 24714, 24720, 24710, 24766, 24752, 24762, 24787, 24788, 24783, 24804, 24793, 24797, 24776, 24753, 24795, 24759, 24778, 24767, 24771, 24781, 24768, 25394, 25445, 25482, 25474, 25469, 25533, 25502, 25517, 25501, 25495, 25515, 25486, 25455, 25479, 25488, 25454, 25519, 25461, 25500, 25453, 25518, 25468, 25508, 25403, 25503, 25464, 25477, 25473, 25489, 25485, 25456, 25939, 26061, 26213, 26209, 26203, 26201, 26204, 26210, 26392, 26745, 26759, 26768, 26780, 26733, 26734, 26798, 26795, 26966, 26735, 26787, 26796, 26793, 26741, 26740, 26802, 26767, 26743, 26770, 26748, 26731, 26738, 26794, 26752, 26737, 26750, 26779, 26774, 26763, 26784, 26761, 26788, 26744, 26747, 26769, 26764, 26762, 26749, 27446, 27443, 27447, 27448, 27537, 27535, 27533, 27534, 27532, 27690, 28096, 28075, 28084, 28083, 28276, 28076, 28137, 28130, 28087, 28150, 28116, 28160, 28104, 28128, 28127, 28118, 28094, 28133, 28124, 28125, 28123, 28148, 28106, 28093, 28141, 28144, 28090, 28117, 28098, 28111, 28105, 28112, 28146, 28115, 28157, 28119, 28109, 28131, 28091, 28922, 28941, 28919, 28951, 28916, 28940, 28912, 28932, 28915, 28944, 28924, 28927, 28934, 28947, 28928, 28920, 28918, 28939, 28930, 28942, 29310, 29307, 29308, 29311, 29469, 29463, 29447, 29457, 29464, 29450, 29448, 29439, 29455, 29470, 29576, 29686, 29688, 29685, 29700, 29697, 29693, 29703, 29696, 29690, 29692, 29695, 29708, 29707, 29684, 29704, 30052, 30051, 30158, 30162, 30159, 30155, 30156, 30161, 30160, 30351, 30345, 30419, 30521, 30511, 30509, 30513, 30514, 30516, 30515, 30525, 30501, 30523, 30517, 30792, 30802, 30793, 30797, 30794, 30796, 30758, 30789, 30800, 31076, 31079, 31081, 31082, 31075, 31083, 31073, 31163, 31226, 31224, 31222, 31223, 31375, 31380, 31376, 31541, 31559, 31540, 31525, 31536, 31522, 31524, 31539, 31512, 31530, 31517, 31537, 31531, 31533, 31535, 31538, 31544, 31514, 31523, 31892, 31896, 31894, 31907, 32053, 32061, 32056, 32054, 32058, 32069, 32044, 32041, 32065, 32071, 32062, 32063, 32074, 32059, 32040, 32611, 32661, 32668, 32669, 32667, 32714, 32715, 32717, 32720, 32721, 32711, 32719, 32713, 32799, 32798, 32795, 32839, 32835, 32840, 33048, 33061, 33049, 33051, 33069, 33055, 33068, 33054, 33057, 33045, 33063, 33053, 33058, 33297, 33336, 33331, 33338, 33332, 33330, 33396, 33680, 33699, 33704, 33677, 33658, 33651, 33700, 33652, 33679, 33665, 33685, 33689, 33653, 33684, 33705, 33661, 33667, 33676, 33693, 33691, 33706, 33675, 33662, 33701, 33711, 33672, 33687, 33712, 33663, 33702, 33671, 33710, 33654, 33690, 34393, 34390, 34495, 34487, 34498, 34497, 34501, 34490, 34480, 34504, 34489, 34483, 34488, 34508, 34484, 34491, 34492, 34499, 34493, 34494, 34898, 34953, 34965, 34984, 34978, 34986, 34970, 34961, 34977, 34975, 34968, 34983, 34969, 34971, 34967, 34980, 34988, 34956, 34963, 34958, 35202, 35286, 35289, 35285, 35376, 35367, 35372, 35358, 35897, 35899, 35932, 35933, 35965, 36005, 36221, 36219, 36217, 36284, 36290, 36281, 36287, 36289, 36568, 36574, 36573, 36572, 36567, 36576, 36577, 36900, 36875, 36881, 36892, 36876, 36897, 37103, 37098, 37104, 37108, 37106, 37107, 37076, 37099, 37100, 37097, 37206, 37208, 37210, 37203, 37205, 37356, 37364, 37361, 37363, 37368, 37348, 37369, 37354, 37355, 37367, 37352, 37358, 38266, 38278, 38280, 38524, 38509, 38507, 38513, 38511, 38591, 38762, 38916, 39141, 39319, 20635, 20629, 20628, 20638, 20619, 20643, 20611, 20620, 20622, 20637, 20584, 20636, 20626, 20610, 20615, 20831, 20948, 21266, 21265, 21412, 21415, 21905, 21928, 21925, 21933, 21879, 22085, 21922, 21907, 21896, 21903, 21941, 21889, 21923, 21906, 21924, 21885, 21900, 21926, 21887, 21909, 21921, 21902, 22284, 22569, 22583, 22553, 22558, 22567, 22563, 22568, 22517, 22600, 22565, 22556, 22555, 22579, 22591, 22582, 22574, 22585, 22584, 22573, 22572, 22587, 22881, 23215, 23188, 23199, 23162, 23202, 23198, 23160, 23206, 23164, 23205, 23212, 23189, 23214, 23095, 23172, 23178, 23191, 23171, 23179, 23209, 23163, 23165, 23180, 23196, 23183, 23187, 23197, 23530, 23501, 23499, 23508, 23505, 23498, 23502, 23564, 23600, 23863, 23875, 23915, 23873, 23883, 23871, 23861, 23889, 23886, 23893, 23859, 23866, 23890, 23869, 23857, 23897, 23874, 23865, 23881, 23864, 23868, 23858, 23862, 23872, 23877, 24132, 24129, 24408, 24486, 24485, 24491, 24777, 24761, 24780, 24802, 24782, 24772, 24852, 24818, 24842, 24854, 24837, 24821, 24851, 24824, 24828, 24830, 24769, 24835, 24856, 24861, 24848, 24831, 24836, 24843, 25162, 25492, 25521, 25520, 25550, 25573, 25576, 25583, 25539, 25757, 25587, 25546, 25568, 25590, 25557, 25586, 25589, 25697, 25567, 25534, 25565, 25564, 25540, 25560, 25555, 25538, 25543, 25548, 25547, 25544, 25584, 25559, 25561, 25906, 25959, 25962, 25956, 25948, 25960, 25957, 25996, 26013, 26014, 26030, 26064, 26066, 26236, 26220, 26235, 26240, 26225, 26233, 26218, 26226, 26369, 26892, 26835, 26884, 26844, 26922, 26860, 26858, 26865, 26895, 26838, 26871, 26859, 26852, 26870, 26899, 26896, 26867, 26849, 26887, 26828, 26888, 26992, 26804, 26897, 26863, 26822, 26900, 26872, 26832, 26877, 26876, 26856, 26891, 26890, 26903, 26830, 26824, 26845, 26846, 26854, 26868, 26833, 26886, 26836, 26857, 26901, 26917, 26823, 27449, 27451, 27455, 27452, 27540, 27543, 27545, 27541, 27581, 27632, 27634, 27635, 27696, 28156, 28230, 28231, 28191, 28233, 28296, 28220, 28221, 28229, 28258, 28203, 28223, 28225, 28253, 28275, 28188, 28211, 28235, 28224, 28241, 28219, 28163, 28206, 28254, 28264, 28252, 28257, 28209, 28200, 28256, 28273, 28267, 28217, 28194, 28208, 28243, 28261, 28199, 28280, 28260, 28279, 28245, 28281, 28242, 28262, 28213, 28214, 28250, 28960, 28958, 28975, 28923, 28974, 28977, 28963, 28965, 28962, 28978, 28959, 28968, 28986, 28955, 29259, 29274, 29320, 29321, 29318, 29317, 29323, 29458, 29451, 29488, 29474, 29489, 29491, 29479, 29490, 29485, 29478, 29475, 29493, 29452, 29742, 29740, 29744, 29739, 29718, 29722, 29729, 29741, 29745, 29732, 29731, 29725, 29737, 29728, 29746, 29947, 29999, 30063, 30060, 30183, 30170, 30177, 30182, 30173, 30175, 30180, 30167, 30357, 30354, 30426, 30534, 30535, 30532, 30541, 30533, 30538, 30542, 30539, 30540, 30686, 30700, 30816, 30820, 30821, 30812, 30829, 30833, 30826, 30830, 30832, 30825, 30824, 30814, 30818, 31092, 31091, 31090, 31088, 31234, 31242, 31235, 31244, 31236, 31385, 31462, 31460, 31562, 31547, 31556, 31560, 31564, 31566, 31552, 31576, 31557, 31906, 31902, 31912, 31905, 32088, 32111, 32099, 32083, 32086, 32103, 32106, 32079, 32109, 32092, 32107, 32082, 32084, 32105, 32081, 32095, 32078, 32574, 32575, 32613, 32614, 32674, 32672, 32673, 32727, 32849, 32847, 32848, 33022, 32980, 33091, 33098, 33106, 33103, 33095, 33085, 33101, 33082, 33254, 33262, 33271, 33272, 33273, 33284, 33340, 33341, 33343, 33397, 33595, 33743, 33785, 33827, 33728, 33768, 33810, 33767, 33764, 33788, 33782, 33808, 33734, 33736, 33771, 33763, 33727, 33793, 33757, 33765, 33752, 33791, 33761, 33739, 33742, 33750, 33781, 33737, 33801, 33807, 33758, 33809, 33798, 33730, 33779, 33749, 33786, 33735, 33745, 33770, 33811, 33731, 33772, 33774, 33732, 33787, 33751, 33762, 33819, 33755, 33790, 34520, 34530, 34534, 34515, 34531, 34522, 34538, 34525, 34539, 34524, 34540, 34537, 34519, 34536, 34513, 34888, 34902, 34901, 35002, 35031, 35001, 35000, 35008, 35006, 34998, 35004, 34999, 35005, 34994, 35073, 35017, 35221, 35224, 35223, 35293, 35290, 35291, 35406, 35405, 35385, 35417, 35392, 35415, 35416, 35396, 35397, 35410, 35400, 35409, 35402, 35404, 35407, 35935, 35969, 35968, 36026, 36030, 36016, 36025, 36021, 36228, 36224, 36233, 36312, 36307, 36301, 36295, 36310, 36316, 36303, 36309, 36313, 36296, 36311, 36293, 36591, 36599, 36602, 36601, 36582, 36590, 36581, 36597, 36583, 36584, 36598, 36587, 36593, 36588, 36596, 36585, 36909, 36916, 36911, 37126, 37164, 37124, 37119, 37116, 37128, 37113, 37115, 37121, 37120, 37127, 37125, 37123, 37217, 37220, 37215, 37218, 37216, 37377, 37386, 37413, 37379, 37402, 37414, 37391, 37388, 37376, 37394, 37375, 37373, 37382, 37380, 37415, 37378, 37404, 37412, 37401, 37399, 37381, 37398, 38267, 38285, 38284, 38288, 38535, 38526, 38536, 38537, 38531, 38528, 38594, 38600, 38595, 38641, 38640, 38764, 38768, 38766, 38919, 39081, 39147, 40166, 40697, 20099, 20100, 20150, 20669, 20671, 20678, 20654, 20676, 20682, 20660, 20680, 20674, 20656, 20673, 20666, 20657, 20683, 20681, 20662, 20664, 20951, 21114, 21112, 21115, 21116, 21955, 21979, 21964, 21968, 21963, 21962, 21981, 21952, 21972, 21956, 21993, 21951, 21970, 21901, 21967, 21973, 21986, 21974, 21960, 22002, 21965, 21977, 21954, 22292, 22611, 22632, 22628, 22607, 22605, 22601, 22639, 22613, 22606, 22621, 22617, 22629, 22619, 22589, 22627, 22641, 22780, 23239, 23236, 23243, 23226, 23224, 23217, 23221, 23216, 23231, 23240, 23227, 23238, 23223, 23232, 23242, 23220, 23222, 23245, 23225, 23184, 23510, 23512, 23513, 23583, 23603, 23921, 23907, 23882, 23909, 23922, 23916, 23902, 23912, 23911, 23906, 24048, 24143, 24142, 24138, 24141, 24139, 24261, 24268, 24262, 24267, 24263, 24384, 24495, 24493, 24823, 24905, 24906, 24875, 24901, 24886, 24882, 24878, 24902, 24879, 24911, 24873, 24896, 25120, 37224, 25123, 25125, 25124, 25541, 25585, 25579, 25616, 25618, 25609, 25632, 25636, 25651, 25667, 25631, 25621, 25624, 25657, 25655, 25634, 25635, 25612, 25638, 25648, 25640, 25665, 25653, 25647, 25610, 25626, 25664, 25637, 25639, 25611, 25575, 25627, 25646, 25633, 25614, 25967, 26002, 26067, 26246, 26252, 26261, 26256, 26251, 26250, 26265, 26260, 26232, 26400, 26982, 26975, 26936, 26958, 26978, 26993, 26943, 26949, 26986, 26937, 26946, 26967, 26969, 27002, 26952, 26953, 26933, 26988, 26931, 26941, 26981, 26864, 27000, 26932, 26985, 26944, 26991, 26948, 26998, 26968, 26945, 26996, 26956, 26939, 26955, 26935, 26972, 26959, 26961, 26930, 26962, 26927, 27003, 26940, 27462, 27461, 27459, 27458, 27464, 27457, 27547, 64013, 27643, 27644, 27641, 27639, 27640, 28315, 28374, 28360, 28303, 28352, 28319, 28307, 28308, 28320, 28337, 28345, 28358, 28370, 28349, 28353, 28318, 28361, 28343, 28336, 28365, 28326, 28367, 28338, 28350, 28355, 28380, 28376, 28313, 28306, 28302, 28301, 28324, 28321, 28351, 28339, 28368, 28362, 28311, 28334, 28323, 28999, 29012, 29010, 29027, 29024, 28993, 29021, 29026, 29042, 29048, 29034, 29025, 28994, 29016, 28995, 29003, 29040, 29023, 29008, 29011, 28996, 29005, 29018, 29263, 29325, 29324, 29329, 29328, 29326, 29500, 29506, 29499, 29498, 29504, 29514, 29513, 29764, 29770, 29771, 29778, 29777, 29783, 29760, 29775, 29776, 29774, 29762, 29766, 29773, 29780, 29921, 29951, 29950, 29949, 29981, 30073, 30071, 27011, 30191, 30223, 30211, 30199, 30206, 30204, 30201, 30200, 30224, 30203, 30198, 30189, 30197, 30205, 30361, 30389, 30429, 30549, 30559, 30560, 30546, 30550, 30554, 30569, 30567, 30548, 30553, 30573, 30688, 30855, 30874, 30868, 30863, 30852, 30869, 30853, 30854, 30881, 30851, 30841, 30873, 30848, 30870, 30843, 31100, 31106, 31101, 31097, 31249, 31256, 31257, 31250, 31255, 31253, 31266, 31251, 31259, 31248, 31395, 31394, 31390, 31467, 31590, 31588, 31597, 31604, 31593, 31602, 31589, 31603, 31601, 31600, 31585, 31608, 31606, 31587, 31922, 31924, 31919, 32136, 32134, 32128, 32141, 32127, 32133, 32122, 32142, 32123, 32131, 32124, 32140, 32148, 32132, 32125, 32146, 32621, 32619, 32615, 32616, 32620, 32678, 32677, 32679, 32731, 32732, 32801, 33124, 33120, 33143, 33116, 33129, 33115, 33122, 33138, 26401, 33118, 33142, 33127, 33135, 33092, 33121, 33309, 33353, 33348, 33344, 33346, 33349, 34033, 33855, 33878, 33910, 33913, 33935, 33933, 33893, 33873, 33856, 33926, 33895, 33840, 33869, 33917, 33882, 33881, 33908, 33907, 33885, 34055, 33886, 33847, 33850, 33844, 33914, 33859, 33912, 33842, 33861, 33833, 33753, 33867, 33839, 33858, 33837, 33887, 33904, 33849, 33870, 33868, 33874, 33903, 33989, 33934, 33851, 33863, 33846, 33843, 33896, 33918, 33860, 33835, 33888, 33876, 33902, 33872, 34571, 34564, 34551, 34572, 34554, 34518, 34549, 34637, 34552, 34574, 34569, 34561, 34550, 34573, 34565, 35030, 35019, 35021, 35022, 35038, 35035, 35034, 35020, 35024, 35205, 35227, 35295, 35301, 35300, 35297, 35296, 35298, 35292, 35302, 35446, 35462, 35455, 35425, 35391, 35447, 35458, 35460, 35445, 35459, 35457, 35444, 35450, 35900, 35915, 35914, 35941, 35940, 35942, 35974, 35972, 35973, 36044, 36200, 36201, 36241, 36236, 36238, 36239, 36237, 36243, 36244, 36240, 36242, 36336, 36320, 36332, 36337, 36334, 36304, 36329, 36323, 36322, 36327, 36338, 36331, 36340, 36614, 36607, 36609, 36608, 36613, 36615, 36616, 36610, 36619, 36946, 36927, 36932, 36937, 36925, 37136, 37133, 37135, 37137, 37142, 37140, 37131, 37134, 37230, 37231, 37448, 37458, 37424, 37434, 37478, 37427, 37477, 37470, 37507, 37422, 37450, 37446, 37485, 37484, 37455, 37472, 37479, 37487, 37430, 37473, 37488, 37425, 37460, 37475, 37456, 37490, 37454, 37459, 37452, 37462, 37426, 38303, 38300, 38302, 38299, 38546, 38547, 38545, 38551, 38606, 38650, 38653, 38648, 38645, 38771, 38775, 38776, 38770, 38927, 38925, 38926, 39084, 39158, 39161, 39343, 39346, 39344, 39349, 39597, 39595, 39771, 40170, 40173, 40167, 40576, 40701, 20710, 20692, 20695, 20712, 20723, 20699, 20714, 20701, 20708, 20691, 20716, 20720, 20719, 20707, 20704, 20952, 21120, 21121, 21225, 21227, 21296, 21420, 22055, 22037, 22028, 22034, 22012, 22031, 22044, 22017, 22035, 22018, 22010, 22045, 22020, 22015, 22009, 22665, 22652, 22672, 22680, 22662, 22657, 22655, 22644, 22667, 22650, 22663, 22673, 22670, 22646, 22658, 22664, 22651, 22676, 22671, 22782, 22891, 23260, 23278, 23269, 23253, 23274, 23258, 23277, 23275, 23283, 23266, 23264, 23259, 23276, 23262, 23261, 23257, 23272, 23263, 23415, 23520, 23523, 23651, 23938, 23936, 23933, 23942, 23930, 23937, 23927, 23946, 23945, 23944, 23934, 23932, 23949, 23929, 23935, 24152, 24153, 24147, 24280, 24273, 24279, 24270, 24284, 24277, 24281, 24274, 24276, 24388, 24387, 24431, 24502, 24876, 24872, 24897, 24926, 24945, 24947, 24914, 24915, 24946, 24940, 24960, 24948, 24916, 24954, 24923, 24933, 24891, 24938, 24929, 24918, 25129, 25127, 25131, 25643, 25677, 25691, 25693, 25716, 25718, 25714, 25715, 25725, 25717, 25702, 25766, 25678, 25730, 25694, 25692, 25675, 25683, 25696, 25680, 25727, 25663, 25708, 25707, 25689, 25701, 25719, 25971, 26016, 26273, 26272, 26271, 26373, 26372, 26402, 27057, 27062, 27081, 27040, 27086, 27030, 27056, 27052, 27068, 27025, 27033, 27022, 27047, 27021, 27049, 27070, 27055, 27071, 27076, 27069, 27044, 27092, 27065, 27082, 27034, 27087, 27059, 27027, 27050, 27041, 27038, 27097, 27031, 27024, 27074, 27061, 27045, 27078, 27466, 27469, 27467, 27550, 27551, 27552, 27587, 27588, 27646, 28366, 28405, 28401, 28419, 28453, 28408, 28471, 28411, 28462, 28425, 28494, 28441, 28442, 28455, 28440, 28475, 28434, 28397, 28426, 28470, 28531, 28409, 28398, 28461, 28480, 28464, 28476, 28469, 28395, 28423, 28430, 28483, 28421, 28413, 28406, 28473, 28444, 28412, 28474, 28447, 28429, 28446, 28424, 28449, 29063, 29072, 29065, 29056, 29061, 29058, 29071, 29051, 29062, 29057, 29079, 29252, 29267, 29335, 29333, 29331, 29507, 29517, 29521, 29516, 29794, 29811, 29809, 29813, 29810, 29799, 29806, 29952, 29954, 29955, 30077, 30096, 30230, 30216, 30220, 30229, 30225, 30218, 30228, 30392, 30593, 30588, 30597, 30594, 30574, 30592, 30575, 30590, 30595, 30898, 30890, 30900, 30893, 30888, 30846, 30891, 30878, 30885, 30880, 30892, 30882, 30884, 31128, 31114, 31115, 31126, 31125, 31124, 31123, 31127, 31112, 31122, 31120, 31275, 31306, 31280, 31279, 31272, 31270, 31400, 31403, 31404, 31470, 31624, 31644, 31626, 31633, 31632, 31638, 31629, 31628, 31643, 31630, 31621, 31640, 21124, 31641, 31652, 31618, 31931, 31935, 31932, 31930, 32167, 32183, 32194, 32163, 32170, 32193, 32192, 32197, 32157, 32206, 32196, 32198, 32203, 32204, 32175, 32185, 32150, 32188, 32159, 32166, 32174, 32169, 32161, 32201, 32627, 32738, 32739, 32741, 32734, 32804, 32861, 32860, 33161, 33158, 33155, 33159, 33165, 33164, 33163, 33301, 33943, 33956, 33953, 33951, 33978, 33998, 33986, 33964, 33966, 33963, 33977, 33972, 33985, 33997, 33962, 33946, 33969, 34000, 33949, 33959, 33979, 33954, 33940, 33991, 33996, 33947, 33961, 33967, 33960, 34006, 33944, 33974, 33999, 33952, 34007, 34004, 34002, 34011, 33968, 33937, 34401, 34611, 34595, 34600, 34667, 34624, 34606, 34590, 34593, 34585, 34587, 34627, 34604, 34625, 34622, 34630, 34592, 34610, 34602, 34605, 34620, 34578, 34618, 34609, 34613, 34626, 34598, 34599, 34616, 34596, 34586, 34608, 34577, 35063, 35047, 35057, 35058, 35066, 35070, 35054, 35068, 35062, 35067, 35056, 35052, 35051, 35229, 35233, 35231, 35230, 35305, 35307, 35304, 35499, 35481, 35467, 35474, 35471, 35478, 35901, 35944, 35945, 36053, 36047, 36055, 36246, 36361, 36354, 36351, 36365, 36349, 36362, 36355, 36359, 36358, 36357, 36350, 36352, 36356, 36624, 36625, 36622, 36621, 37155, 37148, 37152, 37154, 37151, 37149, 37146, 37156, 37153, 37147, 37242, 37234, 37241, 37235, 37541, 37540, 37494, 37531, 37498, 37536, 37524, 37546, 37517, 37542, 37530, 37547, 37497, 37527, 37503, 37539, 37614, 37518, 37506, 37525, 37538, 37501, 37512, 37537, 37514, 37510, 37516, 37529, 37543, 37502, 37511, 37545, 37533, 37515, 37421, 38558, 38561, 38655, 38744, 38781, 38778, 38782, 38787, 38784, 38786, 38779, 38788, 38785, 38783, 38862, 38861, 38934, 39085, 39086, 39170, 39168, 39175, 39325, 39324, 39363, 39353, 39355, 39354, 39362, 39357, 39367, 39601, 39651, 39655, 39742, 39743, 39776, 39777, 39775, 40177, 40178, 40181, 40615, 20735, 20739, 20784, 20728, 20742, 20743, 20726, 20734, 20747, 20748, 20733, 20746, 21131, 21132, 21233, 21231, 22088, 22082, 22092, 22069, 22081, 22090, 22089, 22086, 22104, 22106, 22080, 22067, 22077, 22060, 22078, 22072, 22058, 22074, 22298, 22699, 22685, 22705, 22688, 22691, 22703, 22700, 22693, 22689, 22783, 23295, 23284, 23293, 23287, 23286, 23299, 23288, 23298, 23289, 23297, 23303, 23301, 23311, 23655, 23961, 23959, 23967, 23954, 23970, 23955, 23957, 23968, 23964, 23969, 23962, 23966, 24169, 24157, 24160, 24156, 32243, 24283, 24286, 24289, 24393, 24498, 24971, 24963, 24953, 25009, 25008, 24994, 24969, 24987, 24979, 25007, 25005, 24991, 24978, 25002, 24993, 24973, 24934, 25011, 25133, 25710, 25712, 25750, 25760, 25733, 25751, 25756, 25743, 25739, 25738, 25740, 25763, 25759, 25704, 25777, 25752, 25974, 25978, 25977, 25979, 26034, 26035, 26293, 26288, 26281, 26290, 26295, 26282, 26287, 27136, 27142, 27159, 27109, 27128, 27157, 27121, 27108, 27168, 27135, 27116, 27106, 27163, 27165, 27134, 27175, 27122, 27118, 27156, 27127, 27111, 27200, 27144, 27110, 27131, 27149, 27132, 27115, 27145, 27140, 27160, 27173, 27151, 27126, 27174, 27143, 27124, 27158, 27473, 27557, 27555, 27554, 27558, 27649, 27648, 27647, 27650, 28481, 28454, 28542, 28551, 28614, 28562, 28557, 28553, 28556, 28514, 28495, 28549, 28506, 28566, 28534, 28524, 28546, 28501, 28530, 28498, 28496, 28503, 28564, 28563, 28509, 28416, 28513, 28523, 28541, 28519, 28560, 28499, 28555, 28521, 28543, 28565, 28515, 28535, 28522, 28539, 29106, 29103, 29083, 29104, 29088, 29082, 29097, 29109, 29085, 29093, 29086, 29092, 29089, 29098, 29084, 29095, 29107, 29336, 29338, 29528, 29522, 29534, 29535, 29536, 29533, 29531, 29537, 29530, 29529, 29538, 29831, 29833, 29834, 29830, 29825, 29821, 29829, 29832, 29820, 29817, 29960, 29959, 30078, 30245, 30238, 30233, 30237, 30236, 30243, 30234, 30248, 30235, 30364, 30365, 30366, 30363, 30605, 30607, 30601, 30600, 30925, 30907, 30927, 30924, 30929, 30926, 30932, 30920, 30915, 30916, 30921, 31130, 31137, 31136, 31132, 31138, 31131, 27510, 31289, 31410, 31412, 31411, 31671, 31691, 31678, 31660, 31694, 31663, 31673, 31690, 31669, 31941, 31944, 31948, 31947, 32247, 32219, 32234, 32231, 32215, 32225, 32259, 32250, 32230, 32246, 32241, 32240, 32238, 32223, 32630, 32684, 32688, 32685, 32749, 32747, 32746, 32748, 32742, 32744, 32868, 32871, 33187, 33183, 33182, 33173, 33186, 33177, 33175, 33302, 33359, 33363, 33362, 33360, 33358, 33361, 34084, 34107, 34063, 34048, 34089, 34062, 34057, 34061, 34079, 34058, 34087, 34076, 34043, 34091, 34042, 34056, 34060, 34036, 34090, 34034, 34069, 34039, 34027, 34035, 34044, 34066, 34026, 34025, 34070, 34046, 34088, 34077, 34094, 34050, 34045, 34078, 34038, 34097, 34086, 34023, 34024, 34032, 34031, 34041, 34072, 34080, 34096, 34059, 34073, 34095, 34402, 34646, 34659, 34660, 34679, 34785, 34675, 34648, 34644, 34651, 34642, 34657, 34650, 34641, 34654, 34669, 34666, 34640, 34638, 34655, 34653, 34671, 34668, 34682, 34670, 34652, 34661, 34639, 34683, 34677, 34658, 34663, 34665, 34906, 35077, 35084, 35092, 35083, 35095, 35096, 35097, 35078, 35094, 35089, 35086, 35081, 35234, 35236, 35235, 35309, 35312, 35308, 35535, 35526, 35512, 35539, 35537, 35540, 35541, 35515, 35543, 35518, 35520, 35525, 35544, 35523, 35514, 35517, 35545, 35902, 35917, 35983, 36069, 36063, 36057, 36072, 36058, 36061, 36071, 36256, 36252, 36257, 36251, 36384, 36387, 36389, 36388, 36398, 36373, 36379, 36374, 36369, 36377, 36390, 36391, 36372, 36370, 36376, 36371, 36380, 36375, 36378, 36652, 36644, 36632, 36634, 36640, 36643, 36630, 36631, 36979, 36976, 36975, 36967, 36971, 37167, 37163, 37161, 37162, 37170, 37158, 37166, 37253, 37254, 37258, 37249, 37250, 37252, 37248, 37584, 37571, 37572, 37568, 37593, 37558, 37583, 37617, 37599, 37592, 37609, 37591, 37597, 37580, 37615, 37570, 37608, 37578, 37576, 37582, 37606, 37581, 37589, 37577, 37600, 37598, 37607, 37585, 37587, 37557, 37601, 37574, 37556, 38268, 38316, 38315, 38318, 38320, 38564, 38562, 38611, 38661, 38664, 38658, 38746, 38794, 38798, 38792, 38864, 38863, 38942, 38941, 38950, 38953, 38952, 38944, 38939, 38951, 39090, 39176, 39162, 39185, 39188, 39190, 39191, 39189, 39388, 39373, 39375, 39379, 39380, 39374, 39369, 39382, 39384, 39371, 39383, 39372, 39603, 39660, 39659, 39667, 39666, 39665, 39750, 39747, 39783, 39796, 39793, 39782, 39798, 39797, 39792, 39784, 39780, 39788, 40188, 40186, 40189, 40191, 40183, 40199, 40192, 40185, 40187, 40200, 40197, 40196, 40579, 40659, 40719, 40720, 20764, 20755, 20759, 20762, 20753, 20958, 21300, 21473, 22128, 22112, 22126, 22131, 22118, 22115, 22125, 22130, 22110, 22135, 22300, 22299, 22728, 22717, 22729, 22719, 22714, 22722, 22716, 22726, 23319, 23321, 23323, 23329, 23316, 23315, 23312, 23318, 23336, 23322, 23328, 23326, 23535, 23980, 23985, 23977, 23975, 23989, 23984, 23982, 23978, 23976, 23986, 23981, 23983, 23988, 24167, 24168, 24166, 24175, 24297, 24295, 24294, 24296, 24293, 24395, 24508, 24989, 25000, 24982, 25029, 25012, 25030, 25025, 25036, 25018, 25023, 25016, 24972, 25815, 25814, 25808, 25807, 25801, 25789, 25737, 25795, 25819, 25843, 25817, 25907, 25983, 25980, 26018, 26312, 26302, 26304, 26314, 26315, 26319, 26301, 26299, 26298, 26316, 26403, 27188, 27238, 27209, 27239, 27186, 27240, 27198, 27229, 27245, 27254, 27227, 27217, 27176, 27226, 27195, 27199, 27201, 27242, 27236, 27216, 27215, 27220, 27247, 27241, 27232, 27196, 27230, 27222, 27221, 27213, 27214, 27206, 27477, 27476, 27478, 27559, 27562, 27563, 27592, 27591, 27652, 27651, 27654, 28589, 28619, 28579, 28615, 28604, 28622, 28616, 28510, 28612, 28605, 28574, 28618, 28584, 28676, 28581, 28590, 28602, 28588, 28586, 28623, 28607, 28600, 28578, 28617, 28587, 28621, 28591, 28594, 28592, 29125, 29122, 29119, 29112, 29142, 29120, 29121, 29131, 29140, 29130, 29127, 29135, 29117, 29144, 29116, 29126, 29146, 29147, 29341, 29342, 29545, 29542, 29543, 29548, 29541, 29547, 29546, 29823, 29850, 29856, 29844, 29842, 29845, 29857, 29963, 30080, 30255, 30253, 30257, 30269, 30259, 30268, 30261, 30258, 30256, 30395, 30438, 30618, 30621, 30625, 30620, 30619, 30626, 30627, 30613, 30617, 30615, 30941, 30953, 30949, 30954, 30942, 30947, 30939, 30945, 30946, 30957, 30943, 30944, 31140, 31300, 31304, 31303, 31414, 31416, 31413, 31409, 31415, 31710, 31715, 31719, 31709, 31701, 31717, 31706, 31720, 31737, 31700, 31722, 31714, 31708, 31723, 31704, 31711, 31954, 31956, 31959, 31952, 31953, 32274, 32289, 32279, 32268, 32287, 32288, 32275, 32270, 32284, 32277, 32282, 32290, 32267, 32271, 32278, 32269, 32276, 32293, 32292, 32579, 32635, 32636, 32634, 32689, 32751, 32810, 32809, 32876, 33201, 33190, 33198, 33209, 33205, 33195, 33200, 33196, 33204, 33202, 33207, 33191, 33266, 33365, 33366, 33367, 34134, 34117, 34155, 34125, 34131, 34145, 34136, 34112, 34118, 34148, 34113, 34146, 34116, 34129, 34119, 34147, 34110, 34139, 34161, 34126, 34158, 34165, 34133, 34151, 34144, 34188, 34150, 34141, 34132, 34149, 34156, 34403, 34405, 34404, 34715, 34703, 34711, 34707, 34706, 34696, 34689, 34710, 34712, 34681, 34695, 34723, 34693, 34704, 34705, 34717, 34692, 34708, 34716, 34714, 34697, 35102, 35110, 35120, 35117, 35118, 35111, 35121, 35106, 35113, 35107, 35119, 35116, 35103, 35313, 35552, 35554, 35570, 35572, 35573, 35549, 35604, 35556, 35551, 35568, 35528, 35550, 35553, 35560, 35583, 35567, 35579, 35985, 35986, 35984, 36085, 36078, 36081, 36080, 36083, 36204, 36206, 36261, 36263, 36403, 36414, 36408, 36416, 36421, 36406, 36412, 36413, 36417, 36400, 36415, 36541, 36662, 36654, 36661, 36658, 36665, 36663, 36660, 36982, 36985, 36987, 36998, 37114, 37171, 37173, 37174, 37267, 37264, 37265, 37261, 37263, 37671, 37662, 37640, 37663, 37638, 37647, 37754, 37688, 37692, 37659, 37667, 37650, 37633, 37702, 37677, 37646, 37645, 37579, 37661, 37626, 37669, 37651, 37625, 37623, 37684, 37634, 37668, 37631, 37673, 37689, 37685, 37674, 37652, 37644, 37643, 37630, 37641, 37632, 37627, 37654, 38332, 38349, 38334, 38329, 38330, 38326, 38335, 38325, 38333, 38569, 38612, 38667, 38674, 38672, 38809, 38807, 38804, 38896, 38904, 38965, 38959, 38962, 39204, 39199, 39207, 39209, 39326, 39406, 39404, 39397, 39396, 39408, 39395, 39402, 39401, 39399, 39609, 39615, 39604, 39611, 39670, 39674, 39673, 39671, 39731, 39808, 39813, 39815, 39804, 39806, 39803, 39810, 39827, 39826, 39824, 39802, 39829, 39805, 39816, 40229, 40215, 40224, 40222, 40212, 40233, 40221, 40216, 40226, 40208, 40217, 40223, 40584, 40582, 40583, 40622, 40621, 40661, 40662, 40698, 40722, 40765, 20774, 20773, 20770, 20772, 20768, 20777, 21236, 22163, 22156, 22157, 22150, 22148, 22147, 22142, 22146, 22143, 22145, 22742, 22740, 22735, 22738, 23341, 23333, 23346, 23331, 23340, 23335, 23334, 23343, 23342, 23419, 23537, 23538, 23991, 24172, 24170, 24510, 24507, 25027, 25013, 25020, 25063, 25056, 25061, 25060, 25064, 25054, 25839, 25833, 25827, 25835, 25828, 25832, 25985, 25984, 26038, 26074, 26322, 27277, 27286, 27265, 27301, 27273, 27295, 27291, 27297, 27294, 27271, 27283, 27278, 27285, 27267, 27304, 27300, 27281, 27263, 27302, 27290, 27269, 27276, 27282, 27483, 27565, 27657, 28620, 28585, 28660, 28628, 28643, 28636, 28653, 28647, 28646, 28638, 28658, 28637, 28642, 28648, 29153, 29169, 29160, 29170, 29156, 29168, 29154, 29555, 29550, 29551, 29847, 29874, 29867, 29840, 29866, 29869, 29873, 29861, 29871, 29968, 29969, 29970, 29967, 30084, 30275, 30280, 30281, 30279, 30372, 30441, 30645, 30635, 30642, 30647, 30646, 30644, 30641, 30632, 30704, 30963, 30973, 30978, 30971, 30972, 30962, 30981, 30969, 30974, 30980, 31147, 31144, 31324, 31323, 31318, 31320, 31316, 31322, 31422, 31424, 31425, 31749, 31759, 31730, 31744, 31743, 31739, 31758, 31732, 31755, 31731, 31746, 31753, 31747, 31745, 31736, 31741, 31750, 31728, 31729, 31760, 31754, 31976, 32301, 32316, 32322, 32307, 38984, 32312, 32298, 32329, 32320, 32327, 32297, 32332, 32304, 32315, 32310, 32324, 32314, 32581, 32639, 32638, 32637, 32756, 32754, 32812, 33211, 33220, 33228, 33226, 33221, 33223, 33212, 33257, 33371, 33370, 33372, 34179, 34176, 34191, 34215, 34197, 34208, 34187, 34211, 34171, 34212, 34202, 34206, 34167, 34172, 34185, 34209, 34170, 34168, 34135, 34190, 34198, 34182, 34189, 34201, 34205, 34177, 34210, 34178, 34184, 34181, 34169, 34166, 34200, 34192, 34207, 34408, 34750, 34730, 34733, 34757, 34736, 34732, 34745, 34741, 34748, 34734, 34761, 34755, 34754, 34764, 34743, 34735, 34756, 34762, 34740, 34742, 34751, 34744, 34749, 34782, 34738, 35125, 35123, 35132, 35134, 35137, 35154, 35127, 35138, 35245, 35247, 35246, 35314, 35315, 35614, 35608, 35606, 35601, 35589, 35595, 35618, 35599, 35602, 35605, 35591, 35597, 35592, 35590, 35612, 35603, 35610, 35919, 35952, 35954, 35953, 35951, 35989, 35988, 36089, 36207, 36430, 36429, 36435, 36432, 36428, 36423, 36675, 36672, 36997, 36990, 37176, 37274, 37282, 37275, 37273, 37279, 37281, 37277, 37280, 37793, 37763, 37807, 37732, 37718, 37703, 37756, 37720, 37724, 37750, 37705, 37712, 37713, 37728, 37741, 37775, 37708, 37738, 37753, 37719, 37717, 37714, 37711, 37745, 37751, 37755, 37729, 37726, 37731, 37735, 37760, 37710, 37721, 38343, 38336, 38345, 38339, 38341, 38327, 38574, 38576, 38572, 38688, 38687, 38680, 38685, 38681, 38810, 38817, 38812, 38814, 38813, 38869, 38868, 38897, 38977, 38980, 38986, 38985, 38981, 38979, 39205, 39211, 39212, 39210, 39219, 39218, 39215, 39213, 39217, 39216, 39320, 39331, 39329, 39426, 39418, 39412, 39415, 39417, 39416, 39414, 39419, 39421, 39422, 39420, 39427, 39614, 39678, 39677, 39681, 39676, 39752, 39834, 39848, 39838, 39835, 39846, 39841, 39845, 39844, 39814, 39842, 39840, 39855, 40243, 40257, 40295, 40246, 40238, 40239, 40241, 40248, 40240, 40261, 40258, 40259, 40254, 40247, 40256, 40253, 32757, 40237, 40586, 40585, 40589, 40624, 40648, 40666, 40699, 40703, 40740, 40739, 40738, 40788, 40864, 20785, 20781, 20782, 22168, 22172, 22167, 22170, 22173, 22169, 22896, 23356, 23657, 23658, 24000, 24173, 24174, 25048, 25055, 25069, 25070, 25073, 25066, 25072, 25067, 25046, 25065, 25855, 25860, 25853, 25848, 25857, 25859, 25852, 26004, 26075, 26330, 26331, 26328, 27333, 27321, 27325, 27361, 27334, 27322, 27318, 27319, 27335, 27316, 27309, 27486, 27593, 27659, 28679, 28684, 28685, 28673, 28677, 28692, 28686, 28671, 28672, 28667, 28710, 28668, 28663, 28682, 29185, 29183, 29177, 29187, 29181, 29558, 29880, 29888, 29877, 29889, 29886, 29878, 29883, 29890, 29972, 29971, 30300, 30308, 30297, 30288, 30291, 30295, 30298, 30374, 30397, 30444, 30658, 30650, 30975, 30988, 30995, 30996, 30985, 30992, 30994, 30993, 31149, 31148, 31327, 31772, 31785, 31769, 31776, 31775, 31789, 31773, 31782, 31784, 31778, 31781, 31792, 32348, 32336, 32342, 32355, 32344, 32354, 32351, 32337, 32352, 32343, 32339, 32693, 32691, 32759, 32760, 32885, 33233, 33234, 33232, 33375, 33374, 34228, 34246, 34240, 34243, 34242, 34227, 34229, 34237, 34247, 34244, 34239, 34251, 34254, 34248, 34245, 34225, 34230, 34258, 34340, 34232, 34231, 34238, 34409, 34791, 34790, 34786, 34779, 34795, 34794, 34789, 34783, 34803, 34788, 34772, 34780, 34771, 34797, 34776, 34787, 34724, 34775, 34777, 34817, 34804, 34792, 34781, 35155, 35147, 35151, 35148, 35142, 35152, 35153, 35145, 35626, 35623, 35619, 35635, 35632, 35637, 35655, 35631, 35644, 35646, 35633, 35621, 35639, 35622, 35638, 35630, 35620, 35643, 35645, 35642, 35906, 35957, 35993, 35992, 35991, 36094, 36100, 36098, 36096, 36444, 36450, 36448, 36439, 36438, 36446, 36453, 36455, 36443, 36442, 36449, 36445, 36457, 36436, 36678, 36679, 36680, 36683, 37160, 37178, 37179, 37182, 37288, 37285, 37287, 37295, 37290, 37813, 37772, 37778, 37815, 37787, 37789, 37769, 37799, 37774, 37802, 37790, 37798, 37781, 37768, 37785, 37791, 37773, 37809, 37777, 37810, 37796, 37800, 37812, 37795, 37797, 38354, 38355, 38353, 38579, 38615, 38618, 24002, 38623, 38616, 38621, 38691, 38690, 38693, 38828, 38830, 38824, 38827, 38820, 38826, 38818, 38821, 38871, 38873, 38870, 38872, 38906, 38992, 38993, 38994, 39096, 39233, 39228, 39226, 39439, 39435, 39433, 39437, 39428, 39441, 39434, 39429, 39431, 39430, 39616, 39644, 39688, 39684, 39685, 39721, 39733, 39754, 39756, 39755, 39879, 39878, 39875, 39871, 39873, 39861, 39864, 39891, 39862, 39876, 39865, 39869, 40284, 40275, 40271, 40266, 40283, 40267, 40281, 40278, 40268, 40279, 40274, 40276, 40287, 40280, 40282, 40590, 40588, 40671, 40705, 40704, 40726, 40741, 40747, 40746, 40745, 40744, 40780, 40789, 20788, 20789, 21142, 21239, 21428, 22187, 22189, 22182, 22183, 22186, 22188, 22746, 22749, 22747, 22802, 23357, 23358, 23359, 24003, 24176, 24511, 25083, 25863, 25872, 25869, 25865, 25868, 25870, 25988, 26078, 26077, 26334, 27367, 27360, 27340, 27345, 27353, 27339, 27359, 27356, 27344, 27371, 27343, 27341, 27358, 27488, 27568, 27660, 28697, 28711, 28704, 28694, 28715, 28705, 28706, 28707, 28713, 28695, 28708, 28700, 28714, 29196, 29194, 29191, 29186, 29189, 29349, 29350, 29348, 29347, 29345, 29899, 29893, 29879, 29891, 29974, 30304, 30665, 30666, 30660, 30705, 31005, 31003, 31009, 31004, 30999, 31006, 31152, 31335, 31336, 31795, 31804, 31801, 31788, 31803, 31980, 31978, 32374, 32373, 32376, 32368, 32375, 32367, 32378, 32370, 32372, 32360, 32587, 32586, 32643, 32646, 32695, 32765, 32766, 32888, 33239, 33237, 33380, 33377, 33379, 34283, 34289, 34285, 34265, 34273, 34280, 34266, 34263, 34284, 34290, 34296, 34264, 34271, 34275, 34268, 34257, 34288, 34278, 34287, 34270, 34274, 34816, 34810, 34819, 34806, 34807, 34825, 34828, 34827, 34822, 34812, 34824, 34815, 34826, 34818, 35170, 35162, 35163, 35159, 35169, 35164, 35160, 35165, 35161, 35208, 35255, 35254, 35318, 35664, 35656, 35658, 35648, 35667, 35670, 35668, 35659, 35669, 35665, 35650, 35666, 35671, 35907, 35959, 35958, 35994, 36102, 36103, 36105, 36268, 36266, 36269, 36267, 36461, 36472, 36467, 36458, 36463, 36475, 36546, 36690, 36689, 36687, 36688, 36691, 36788, 37184, 37183, 37296, 37293, 37854, 37831, 37839, 37826, 37850, 37840, 37881, 37868, 37836, 37849, 37801, 37862, 37834, 37844, 37870, 37859, 37845, 37828, 37838, 37824, 37842, 37863, 38269, 38362, 38363, 38625, 38697, 38699, 38700, 38696, 38694, 38835, 38839, 38838, 38877, 38878, 38879, 39004, 39001, 39005, 38999, 39103, 39101, 39099, 39102, 39240, 39239, 39235, 39334, 39335, 39450, 39445, 39461, 39453, 39460, 39451, 39458, 39456, 39463, 39459, 39454, 39452, 39444, 39618, 39691, 39690, 39694, 39692, 39735, 39914, 39915, 39904, 39902, 39908, 39910, 39906, 39920, 39892, 39895, 39916, 39900, 39897, 39909, 39893, 39905, 39898, 40311, 40321, 40330, 40324, 40328, 40305, 40320, 40312, 40326, 40331, 40332, 40317, 40299, 40308, 40309, 40304, 40297, 40325, 40307, 40315, 40322, 40303, 40313, 40319, 40327, 40296, 40596, 40593, 40640, 40700, 40749, 40768, 40769, 40781, 40790, 40791, 40792, 21303, 22194, 22197, 22195, 22755, 23365, 24006, 24007, 24302, 24303, 24512, 24513, 25081, 25879, 25878, 25877, 25875, 26079, 26344, 26339, 26340, 27379, 27376, 27370, 27368, 27385, 27377, 27374, 27375, 28732, 28725, 28719, 28727, 28724, 28721, 28738, 28728, 28735, 28730, 28729, 28736, 28731, 28723, 28737, 29203, 29204, 29352, 29565, 29564, 29882, 30379, 30378, 30398, 30445, 30668, 30670, 30671, 30669, 30706, 31013, 31011, 31015, 31016, 31012, 31017, 31154, 31342, 31340, 31341, 31479, 31817, 31816, 31818, 31815, 31813, 31982, 32379, 32382, 32385, 32384, 32698, 32767, 32889, 33243, 33241, 33291, 33384, 33385, 34338, 34303, 34305, 34302, 34331, 34304, 34294, 34308, 34313, 34309, 34316, 34301, 34841, 34832, 34833, 34839, 34835, 34838, 35171, 35174, 35257, 35319, 35680, 35690, 35677, 35688, 35683, 35685, 35687, 35693, 36270, 36486, 36488, 36484, 36697, 36694, 36695, 36693, 36696, 36698, 37005, 37187, 37185, 37303, 37301, 37298, 37299, 37899, 37907, 37883, 37920, 37903, 37908, 37886, 37909, 37904, 37928, 37913, 37901, 37877, 37888, 37879, 37895, 37902, 37910, 37906, 37882, 37897, 37880, 37898, 37887, 37884, 37900, 37878, 37905, 37894, 38366, 38368, 38367, 38702, 38703, 38841, 38843, 38909, 38910, 39008, 39010, 39011, 39007, 39105, 39106, 39248, 39246, 39257, 39244, 39243, 39251, 39474, 39476, 39473, 39468, 39466, 39478, 39465, 39470, 39480, 39469, 39623, 39626, 39622, 39696, 39698, 39697, 39947, 39944, 39927, 39941, 39954, 39928, 40000, 39943, 39950, 39942, 39959, 39956, 39945, 40351, 40345, 40356, 40349, 40338, 40344, 40336, 40347, 40352, 40340, 40348, 40362, 40343, 40353, 40346, 40354, 40360, 40350, 40355, 40383, 40361, 40342, 40358, 40359, 40601, 40603, 40602, 40677, 40676, 40679, 40678, 40752, 40750, 40795, 40800, 40798, 40797, 40793, 40849, 20794, 20793, 21144, 21143, 22211, 22205, 22206, 23368, 23367, 24011, 24015, 24305, 25085, 25883, 27394, 27388, 27395, 27384, 27392, 28739, 28740, 28746, 28744, 28745, 28741, 28742, 29213, 29210, 29209, 29566, 29975, 30314, 30672, 31021, 31025, 31023, 31828, 31827, 31986, 32394, 32391, 32392, 32395, 32390, 32397, 32589, 32699, 32816, 33245, 34328, 34346, 34342, 34335, 34339, 34332, 34329, 34343, 34350, 34337, 34336, 34345, 34334, 34341, 34857, 34845, 34843, 34848, 34852, 34844, 34859, 34890, 35181, 35177, 35182, 35179, 35322, 35705, 35704, 35653, 35706, 35707, 36112, 36116, 36271, 36494, 36492, 36702, 36699, 36701, 37190, 37188, 37189, 37305, 37951, 37947, 37942, 37929, 37949, 37948, 37936, 37945, 37930, 37943, 37932, 37952, 37937, 38373, 38372, 38371, 38709, 38714, 38847, 38881, 39012, 39113, 39110, 39104, 39256, 39254, 39481, 39485, 39494, 39492, 39490, 39489, 39482, 39487, 39629, 39701, 39703, 39704, 39702, 39738, 39762, 39979, 39965, 39964, 39980, 39971, 39976, 39977, 39972, 39969, 40375, 40374, 40380, 40385, 40391, 40394, 40399, 40382, 40389, 40387, 40379, 40373, 40398, 40377, 40378, 40364, 40392, 40369, 40365, 40396, 40371, 40397, 40370, 40570, 40604, 40683, 40686, 40685, 40731, 40728, 40730, 40753, 40782, 40805, 40804, 40850, 20153, 22214, 22213, 22219, 22897, 23371, 23372, 24021, 24017, 24306, 25889, 25888, 25894, 25890, 27403, 27400, 27401, 27661, 28757, 28758, 28759, 28754, 29214, 29215, 29353, 29567, 29912, 29909, 29913, 29911, 30317, 30381, 31029, 31156, 31344, 31345, 31831, 31836, 31833, 31835, 31834, 31988, 31985, 32401, 32591, 32647, 33246, 33387, 34356, 34357, 34355, 34348, 34354, 34358, 34860, 34856, 34854, 34858, 34853, 35185, 35263, 35262, 35323, 35710, 35716, 35714, 35718, 35717, 35711, 36117, 36501, 36500, 36506, 36498, 36496, 36502, 36503, 36704, 36706, 37191, 37964, 37968, 37962, 37963, 37967, 37959, 37957, 37960, 37961, 37958, 38719, 38883, 39018, 39017, 39115, 39252, 39259, 39502, 39507, 39508, 39500, 39503, 39496, 39498, 39497, 39506, 39504, 39632, 39705, 39723, 39739, 39766, 39765, 40006, 40008, 39999, 40004, 39993, 39987, 40001, 39996, 39991, 39988, 39986, 39997, 39990, 40411, 40402, 40414, 40410, 40395, 40400, 40412, 40401, 40415, 40425, 40409, 40408, 40406, 40437, 40405, 40413, 40630, 40688, 40757, 40755, 40754, 40770, 40811, 40853, 40866, 20797, 21145, 22760, 22759, 22898, 23373, 24024, 34863, 24399, 25089, 25091, 25092, 25897, 25893, 26006, 26347, 27409, 27410, 27407, 27594, 28763, 28762, 29218, 29570, 29569, 29571, 30320, 30676, 31847, 31846, 32405, 33388, 34362, 34368, 34361, 34364, 34353, 34363, 34366, 34864, 34866, 34862, 34867, 35190, 35188, 35187, 35326, 35724, 35726, 35723, 35720, 35909, 36121, 36504, 36708, 36707, 37308, 37986, 37973, 37981, 37975, 37982, 38852, 38853, 38912, 39510, 39513, 39710, 39711, 39712, 40018, 40024, 40016, 40010, 40013, 40011, 40021, 40025, 40012, 40014, 40443, 40439, 40431, 40419, 40427, 40440, 40420, 40438, 40417, 40430, 40422, 40434, 40432, 40418, 40428, 40436, 40435, 40424, 40429, 40642, 40656, 40690, 40691, 40710, 40732, 40760, 40759, 40758, 40771, 40783, 40817, 40816, 40814, 40815, 22227, 22221, 23374, 23661, 25901, 26349, 26350, 27411, 28767, 28769, 28765, 28768, 29219, 29915, 29925, 30677, 31032, 31159, 31158, 31850, 32407, 32649, 33389, 34371, 34872, 34871, 34869, 34891, 35732, 35733, 36510, 36511, 36512, 36509, 37310, 37309, 37314, 37995, 37992, 37993, 38629, 38726, 38723, 38727, 38855, 38885, 39518, 39637, 39769, 40035, 40039, 40038, 40034, 40030, 40032, 40450, 40446, 40455, 40451, 40454, 40453, 40448, 40449, 40457, 40447, 40445, 40452, 40608, 40734, 40774, 40820, 40821, 40822, 22228, 25902, 26040, 27416, 27417, 27415, 27418, 28770, 29222, 29354, 30680, 30681, 31033, 31849, 31851, 31990, 32410, 32408, 32411, 32409, 33248, 33249, 34374, 34375, 34376, 35193, 35194, 35196, 35195, 35327, 35736, 35737, 36517, 36516, 36515, 37998, 37997, 37999, 38001, 38003, 38729, 39026, 39263, 40040, 40046, 40045, 40459, 40461, 40464, 40463, 40466, 40465, 40609, 40693, 40713, 40775, 40824, 40827, 40826, 40825, 22302, 28774, 31855, 34876, 36274, 36518, 37315, 38004, 38008, 38006, 38005, 39520, 40052, 40051, 40049, 40053, 40468, 40467, 40694, 40714, 40868, 28776, 28773, 31991, 34410, 34878, 34877, 34879, 35742, 35996, 36521, 36553, 38731, 39027, 39028, 39116, 39265, 39339, 39524, 39526, 39527, 39716, 40469, 40471, 40776, 25095, 27422, 29223, 34380, 36520, 38018, 38016, 38017, 39529, 39528, 39726, 40473, 29225, 34379, 35743, 38019, 40057, 40631, 30325, 39531, 40058, 40477, 28777, 28778, 40612, 40830, 40777, 40856, 30849, 37561, 35023, 22715, 24658, 31911, 23290, 9556, 9574, 9559, 9568, 9580, 9571, 9562, 9577, 9565, 9554, 9572, 9557, 9566, 9578, 9569, 9560, 9575, 9563, 9555, 9573, 9558, 9567, 9579, 9570, 9561, 9576, 9564, 9553, 9552, 9581, 9582, 9584, 9583, 65517, 132423, 37595, 132575, 147397, 34124, 17077, 29679, 20917, 13897, 149826, 166372, 37700, 137691, 33518, 146632, 30780, 26436, 25311, 149811, 166314, 131744, 158643, 135941, 20395, 140525, 20488, 159017, 162436, 144896, 150193, 140563, 20521, 131966, 24484, 131968, 131911, 28379, 132127, 20605, 20737, 13434, 20750, 39020, 14147, 33814, 149924, 132231, 20832, 144308, 20842, 134143, 139516, 131813, 140592, 132494, 143923, 137603, 23426, 34685, 132531, 146585, 20914, 20920, 40244, 20937, 20943, 20945, 15580, 20947, 150182, 20915, 20962, 21314, 20973, 33741, 26942, 145197, 24443, 21003, 21030, 21052, 21173, 21079, 21140, 21177, 21189, 31765, 34114, 21216, 34317, 158483, 21253, 166622, 21833, 28377, 147328, 133460, 147436, 21299, 21316, 134114, 27851, 136998, 26651, 29653, 24650, 16042, 14540, 136936, 29149, 17570, 21357, 21364, 165547, 21374, 21375, 136598, 136723, 30694, 21395, 166555, 21408, 21419, 21422, 29607, 153458, 16217, 29596, 21441, 21445, 27721, 20041, 22526, 21465, 15019, 134031, 21472, 147435, 142755, 21494, 134263, 21523, 28793, 21803, 26199, 27995, 21613, 158547, 134516, 21853, 21647, 21668, 18342, 136973, 134877, 15796, 134477, 166332, 140952, 21831, 19693, 21551, 29719, 21894, 21929, 22021, 137431, 147514, 17746, 148533, 26291, 135348, 22071, 26317, 144010, 26276, 26285, 22093, 22095, 30961, 22257, 38791, 21502, 22272, 22255, 22253, 166758, 13859, 135759, 22342, 147877, 27758, 28811, 22338, 14001, 158846, 22502, 136214, 22531, 136276, 148323, 22566, 150517, 22620, 22698, 13665, 22752, 22748, 135740, 22779, 23551, 22339, 172368, 148088, 37843, 13729, 22815, 26790, 14019, 28249, 136766, 23076, 21843, 136850, 34053, 22985, 134478, 158849, 159018, 137180, 23001, 137211, 137138, 159142, 28017, 137256, 136917, 23033, 159301, 23211, 23139, 14054, 149929, 23159, 14088, 23190, 29797, 23251, 159649, 140628, 15749, 137489, 14130, 136888, 24195, 21200, 23414, 25992, 23420, 162318, 16388, 18525, 131588, 23509, 24928, 137780, 154060, 132517, 23539, 23453, 19728, 23557, 138052, 23571, 29646, 23572, 138405, 158504, 23625, 18653, 23685, 23785, 23791, 23947, 138745, 138807, 23824, 23832, 23878, 138916, 23738, 24023, 33532, 14381, 149761, 139337, 139635, 33415, 14390, 15298, 24110, 27274, 24181, 24186, 148668, 134355, 21414, 20151, 24272, 21416, 137073, 24073, 24308, 164994, 24313, 24315, 14496, 24316, 26686, 37915, 24333, 131521, 194708, 15070, 18606, 135994, 24378, 157832, 140240, 24408, 140401, 24419, 38845, 159342, 24434, 37696, 166454, 24487, 23990, 15711, 152144, 139114, 159992, 140904, 37334, 131742, 166441, 24625, 26245, 137335, 14691, 15815, 13881, 22416, 141236, 31089, 15936, 24734, 24740, 24755, 149890, 149903, 162387, 29860, 20705, 23200, 24932, 33828, 24898, 194726, 159442, 24961, 20980, 132694, 24967, 23466, 147383, 141407, 25043, 166813, 170333, 25040, 14642, 141696, 141505, 24611, 24924, 25886, 25483, 131352, 25285, 137072, 25301, 142861, 25452, 149983, 14871, 25656, 25592, 136078, 137212, 25744, 28554, 142902, 38932, 147596, 153373, 25825, 25829, 38011, 14950, 25658, 14935, 25933, 28438, 150056, 150051, 25989, 25965, 25951, 143486, 26037, 149824, 19255, 26065, 16600, 137257, 26080, 26083, 24543, 144384, 26136, 143863, 143864, 26180, 143780, 143781, 26187, 134773, 26215, 152038, 26227, 26228, 138813, 143921, 165364, 143816, 152339, 30661, 141559, 39332, 26370, 148380, 150049, 15147, 27130, 145346, 26462, 26471, 26466, 147917, 168173, 26583, 17641, 26658, 28240, 37436, 26625, 144358, 159136, 26717, 144495, 27105, 27147, 166623, 26995, 26819, 144845, 26881, 26880, 15666, 14849, 144956, 15232, 26540, 26977, 166474, 17148, 26934, 27032, 15265, 132041, 33635, 20624, 27129, 144985, 139562, 27205, 145155, 27293, 15347, 26545, 27336, 168348, 15373, 27421, 133411, 24798, 27445, 27508, 141261, 28341, 146139, 132021, 137560, 14144, 21537, 146266, 27617, 147196, 27612, 27703, 140427, 149745, 158545, 27738, 33318, 27769, 146876, 17605, 146877, 147876, 149772, 149760, 146633, 14053, 15595, 134450, 39811, 143865, 140433, 32655, 26679, 159013, 159137, 159211, 28054, 27996, 28284, 28420, 149887, 147589, 159346, 34099, 159604, 20935, 27804, 28189, 33838, 166689, 28207, 146991, 29779, 147330, 31180, 28239, 23185, 143435, 28664, 14093, 28573, 146992, 28410, 136343, 147517, 17749, 37872, 28484, 28508, 15694, 28532, 168304, 15675, 28575, 147780, 28627, 147601, 147797, 147513, 147440, 147380, 147775, 20959, 147798, 147799, 147776, 156125, 28747, 28798, 28839, 28801, 28876, 28885, 28886, 28895, 16644, 15848, 29108, 29078, 148087, 28971, 28997, 23176, 29002, 29038, 23708, 148325, 29007, 37730, 148161, 28972, 148570, 150055, 150050, 29114, 166888, 28861, 29198, 37954, 29205, 22801, 37955, 29220, 37697, 153093, 29230, 29248, 149876, 26813, 29269, 29271, 15957, 143428, 26637, 28477, 29314, 29482, 29483, 149539, 165931, 18669, 165892, 29480, 29486, 29647, 29610, 134202, 158254, 29641, 29769, 147938, 136935, 150052, 26147, 14021, 149943, 149901, 150011, 29687, 29717, 26883, 150054, 29753, 132547, 16087, 29788, 141485, 29792, 167602, 29767, 29668, 29814, 33721, 29804, 14128, 29812, 37873, 27180, 29826, 18771, 150156, 147807, 150137, 166799, 23366, 166915, 137374, 29896, 137608, 29966, 29929, 29982, 167641, 137803, 23511, 167596, 37765, 30029, 30026, 30055, 30062, 151426, 16132, 150803, 30094, 29789, 30110, 30132, 30210, 30252, 30289, 30287, 30319, 30326, 156661, 30352, 33263, 14328, 157969, 157966, 30369, 30373, 30391, 30412, 159647, 33890, 151709, 151933, 138780, 30494, 30502, 30528, 25775, 152096, 30552, 144044, 30639, 166244, 166248, 136897, 30708, 30729, 136054, 150034, 26826, 30895, 30919, 30931, 38565, 31022, 153056, 30935, 31028, 30897, 161292, 36792, 34948, 166699, 155779, 140828, 31110, 35072, 26882, 31104, 153687, 31133, 162617, 31036, 31145, 28202, 160038, 16040, 31174, 168205, 31188],
  "euc-kr":[44034,44035,44037,44038,44043,44044,44045,44046,44047,44056,44062,44063,44065,44066,44067,44069,44070,44071,44072,44073,44074,44075,44078,44082,44083,44084,44085,44086,44087,44090,44091,44093,44094,44095,44097,44098,44099,44100,44101,44102,44103,44104,44105,44106,44108,44110,44111,44112,44113,44114,44115,44117,44118,44119,44121,44122,44123,44125,44126,44127,44128,44129,44130,44131,44132,44133,44134,44135,44136,44137,44138,44139,44140,44141,44142,44143,44146,44147,44149,44150,44153,44155,44156,44157,44158,44159,44162,44167,44168,44173,44174,44175,44177,44178,44179,44181,44182,44183,44184,44185,44186,44187,44190,44194,44195,44196,44197,44198,44199,44203,44205,44206,44209,44210,44211,44212,44213,44214,44215,44218,44222,44223,44224,44226,44227,44229,44230,44231,44233,44234,44235,44237,44238,44239,44240,44241,44242,44243,44244,44246,44248,44249,44250,44251,44252,44253,44254,44255,44258,44259,44261,44262,44265,44267,44269,44270,44274,44276,44279,44280,44281,44282,44283,44286,44287,44289,44290,44291,44293,44295,44296,44297,44298,44299,44302,44304,44306,44307,44308,44309,44310,44311,44313,44314,44315,44317,44318,44319,44321,44322,44323,44324,44325,44326,44327,44328,44330,44331,44334,44335,44336,44337,44338,44339,44342,44343,44345,44346,44347,44349,44350,44351,44352,44353,44354,44355,44358,44360,44362,44363,44364,44365,44366,44367,44369,44370,44371,44373,44374,44375,44377,44378,44379,44380,44381,44382,44383,44384,44386,44388,44389,44390,44391,44392,44393,44394,44395,44398,44399,44401,44402,44407,44408,44409,44410,44414,44416,44419,44420,44421,44422,44423,44426,44427,44429,44430,44431,44433,44434,44435,44436,44437,44438,44439,44440,44441,44442,44443,44446,44447,44448,44449,44450,44451,44453,44454,44455,44456,44457,44458,44459,44460,44461,44462,44463,44464,44465,44466,44467,44468,44469,44470,44472,44473,44474,44475,44476,44477,44478,44479,44482,44483,44485,44486,44487,44489,44490,44491,44492,44493,44494,44495,44498,44500,44501,44502,44503,44504,44505,44506,44507,44509,44510,44511,44513,44514,44515,44517,44518,44519,44520,44521,44522,44523,44524,44525,44526,44527,44528,44529,44530,44531,44532,44533,44534,44535,44538,44539,44541,44542,44546,44547,44548,44549,44550,44551,44554,44556,44558,44559,44560,44561,44562,44563,44565,44566,44567,44568,44569,44570,44571,44572,44573,44574,44575,44576,44577,44578,44579,44580,44581,44582,44583,44584,44585,44586,44587,44588,44589,44590,44591,44594,44595,44597,44598,44601,44603,44604,44605,44606,44607,44610,44612,44615,44616,44617,44619,44623,44625,44626,44627,44629,44631,44632,44633,44634,44635,44638,44642,44643,44644,44646,44647,44650,44651,44653,44654,44655,44657,44658,44659,44660,44661,44662,44663,44666,44670,44671,44672,44673,44674,44675,44678,44679,44680,44681,44682,44683,44685,44686,44687,44688,44689,44690,44691,44692,44693,44694,44695,44696,44697,44698,44699,44700,44701,44702,44703,44704,44705,44706,44707,44708,44709,44710,44711,44712,44713,44714,44715,44716,44717,44718,44719,44720,44721,44722,44723,44724,44725,44726,44727,44728,44729,44730,44731,44735,44737,44738,44739,44741,44742,44743,44744,44745,44746,44747,44750,44754,44755,44756,44757,44758,44759,44762,44763,44765,44766,44767,44768,44769,44770,44771,44772,44773,44774,44775,44777,44778,44780,44782,44783,44784,44785,44786,44787,44789,44790,44791,44793,44794,44795,44797,44798,44799,44800,44801,44802,44803,44804,44805,44806,44809,44810,44811,44812,44814,44815,44817,44818,44819,44820,44821,44822,44823,44824,44825,44826,44827,44828,44829,44830,44831,44832,44833,44834,44835,44836,44837,44838,44839,44840,44841,44842,44843,44846,44847,44849,44851,44853,44854,44855,44856,44857,44858,44859,44862,44864,44868,44869,44870,44871,44874,44875,44876,44877,44878,44879,44881,44882,44883,44884,44885,44886,44887,44888,44889,44890,44891,44894,44895,44896,44897,44898,44899,44902,44903,44904,44905,44906,44907,44908,44909,44910,44911,44912,44913,44914,44915,44916,44917,44918,44919,44920,44922,44923,44924,44925,44926,44927,44929,44930,44931,44933,44934,44935,44937,44938,44939,44940,44941,44942,44943,44946,44947,44948,44950,44951,44952,44953,44954,44955,44957,44958,44959,44960,44961,44962,44963,44964,44965,44966,44967,44968,44969,44970,44971,44972,44973,44974,44975,44976,44977,44978,44979,44980,44981,44982,44983,44986,44987,44989,44990,44991,44993,44994,44995,44996,44997,44998,45002,45004,45007,45008,45009,45010,45011,45013,45014,45015,45016,45017,45018,45019,45021,45022,45023,45024,45025,45026,45027,45028,45029,45030,45031,45034,45035,45036,45037,45038,45039,45042,45043,45045,45046,45047,45049,45050,45051,45052,45053,45054,45055,45058,45059,45061,45062,45063,45064,45065,45066,45067,45069,45070,45071,45073,45074,45075,45077,45078,45079,45080,45081,45082,45083,45086,45087,45088,45089,45090,45091,45092,45093,45094,45095,45097,45098,45099,45100,45101,45102,45103,45104,45105,45106,45107,45108,45109,45110,45111,45112,45113,45114,45115,45116,45117,45118,45119,45120,45121,45122,45123,45126,45127,45129,45131,45133,45135,45136,45137,45138,45142,45144,45146,45147,45148,45150,45151,45152,45153,45154,45155,45156,45157,45158,45159,45160,45161,45162,45163,45164,45165,45166,45167,45168,45169,45170,45171,45172,45173,45174,45175,45176,45177,45178,45179,45182,45183,45185,45186,45187,45189,45190,45191,45192,45193,45194,45195,45198,45200,45202,45203,45204,45205,45206,45207,45211,45213,45214,45219,45220,45221,45222,45223,45226,45232,45234,45238,45239,45241,45242,45243,45245,45246,45247,45248,45249,45250,45251,45254,45258,45259,45260,45261,45262,45263,45266,45267,45269,45270,45271,45273,45274,45275,45276,45277,45278,45279,45281,45282,45283,45284,45286,45287,45288,45289,45290,45291,45292,45293,45294,45295,45296,45297,45298,45299,45300,45301,45302,45303,45304,45305,45306,45307,45308,45309,45310,45311,45312,45313,45314,45315,45316,45317,45318,45319,45322,45325,45326,45327,45329,45332,45333,45334,45335,45338,45342,45343,45344,45345,45346,45350,45351,45353,45354,45355,45357,45358,45359,45360,45361,45362,45363,45366,45370,45371,45372,45373,45374,45375,45378,45379,45381,45382,45383,45385,45386,45387,45388,45389,45390,45391,45394,45395,45398,45399,45401,45402,45403,45405,45406,45407,45409,45410,45411,45412,45413,45414,45415,45416,45417,45418,45419,45420,45421,45422,45423,45424,45425,45426,45427,45428,45429,45430,45431,45434,45435,45437,45438,45439,45441,45443,45444,45445,45446,45447,45450,45452,45454,45455,45456,45457,45461,45462,45463,45465,45466,45467,45469,45470,45471,45472,45473,45474,45475,45476,45477,45478,45479,45481,45482,45483,45484,45485,45486,45487,45488,45489,45490,45491,45492,45493,45494,45495,45496,45497,45498,45499,45500,45501,45502,45503,45504,45505,45506,45507,45508,45509,45510,45511,45512,45513,45514,45515,45517,45518,45519,45521,45522,45523,45525,45526,45527,45528,45529,45530,45531,45534,45536,45537,45538,45539,45540,45541,45542,45543,45546,45547,45549,45550,45551,45553,45554,45555,45556,45557,45558,45559,45560,45562,45564,45566,45567,45568,45569,45570,45571,45574,45575,45577,45578,45581,45582,45583,45584,45585,45586,45587,45590,45592,45594,45595,45596,45597,45598,45599,45601,45602,45603,45604,45605,45606,45607,45608,45609,45610,45611,45612,45613,45614,45615,45616,45617,45618,45619,45621,45622,45623,45624,45625,45626,45627,45629,45630,45631,45632,45633,45634,45635,45636,45637,45638,45639,45640,45641,45642,45643,45644,45645,45646,45647,45648,45649,45650,45651,45652,45653,45654,45655,45657,45658,45659,45661,45662,45663,45665,45666,45667,45668,45669,45670,45671,45674,45675,45676,45677,45678,45679,45680,45681,45682,45683,45686,45687,45688,45689,45690,45691,45693,45694,45695,45696,45697,45698,45699,45702,45703,45704,45706,45707,45708,45709,45710,45711,45714,45715,45717,45718,45719,45723,45724,45725,45726,45727,45730,45732,45735,45736,45737,45739,45741,45742,45743,45745,45746,45747,45749,45750,45751,45752,45753,45754,45755,45756,45757,45758,45759,45760,45761,45762,45763,45764,45765,45766,45767,45770,45771,45773,45774,45775,45777,45779,45780,45781,45782,45783,45786,45788,45790,45791,45792,45793,45795,45799,45801,45802,45808,45809,45810,45814,45820,45821,45822,45826,45827,45829,45830,45831,45833,45834,45835,45836,45837,45838,45839,45842,45846,45847,45848,45849,45850,45851,45853,45854,45855,45856,45857,45858,45859,45860,45861,45862,45863,45864,45865,45866,45867,45868,45869,45870,45871,45872,45873,45874,45875,45876,45877,45878,45879,45880,45881,45882,45883,45884,45885,45886,45887,45888,45889,45890,45891,45892,45893,45894,45895,45896,45897,45898,45899,45900,45901,45902,45903,45904,45905,45906,45907,45911,45913,45914,45917,45920,45921,45922,45923,45926,45928,45930,45932,45933,45935,45938,45939,45941,45942,45943,45945,45946,45947,45948,45949,45950,45951,45954,45958,45959,45960,45961,45962,45963,45965,45966,45967,45969,45970,45971,45973,45974,45975,45976,45977,45978,45979,45980,45981,45982,45983,45986,45987,45988,45989,45990,45991,45993,45994,45995,45997,45998,45999,46000,46001,46002,46003,46004,46005,46006,46007,46008,46009,46010,46011,46012,46013,46014,46015,46016,46017,46018,46019,46022,46023,46025,46026,46029,46031,46033,46034,46035,46038,46040,46042,46044,46046,46047,46049,46050,46051,46053,46054,46055,46057,46058,46059,46060,46061,46062,46063,46064,46065,46066,46067,46068,46069,46070,46071,46072,46073,46074,46075,46077,46078,46079,46080,46081,46082,46083,46084,46085,46086,46087,46088,46089,46090,46091,46092,46093,46094,46095,46097,46098,46099,46100,46101,46102,46103,46105,46106,46107,46109,46110,46111,46113,46114,46115,46116,46117,46118,46119,46122,46124,46125,46126,46127,46128,46129,46130,46131,46133,46134,46135,46136,46137,46138,46139,46140,46141,46142,46143,46144,46145,46146,46147,46148,46149,46150,46151,46152,46153,46154,46155,46156,46157,46158,46159,46162,46163,46165,46166,46167,46169,46170,46171,46172,46173,46174,46175,46178,46180,46182,46183,46184,46185,46186,46187,46189,46190,46191,46192,46193,46194,46195,46196,46197,46198,46199,46200,46201,46202,46203,46204,46205,46206,46207,46209,46210,46211,46212,46213,46214,46215,46217,46218,46219,46220,46221,46222,46223,46224,46225,46226,46227,46228,46229,46230,46231,46232,46233,46234,46235,46236,46238,46239,46240,46241,46242,46243,46245,46246,46247,46249,46250,46251,46253,46254,46255,46256,46257,46258,46259,46260,46262,46264,46266,46267,46268,46269,46270,46271,46273,46274,46275,46277,46278,46279,46281,46282,46283,46284,46285,46286,46287,46289,46290,46291,46292,46294,46295,46296,46297,46298,46299,46302,46303,46305,46306,46309,46311,46312,46313,46314,46315,46318,46320,46322,46323,46324,46325,46326,46327,46329,46330,46331,46332,46333,46334,46335,46336,46337,46338,46339,46340,46341,46342,46343,46344,46345,46346,46347,46348,46349,46350,46351,46352,46353,46354,46355,46358,46359,46361,46362,46365,46366,46367,46368,46369,46370,46371,46374,46379,46380,46381,46382,46383,46386,46387,46389,46390,46391,46393,46394,46395,46396,46397,46398,46399,46402,46406,46407,46408,46409,46410,46414,46415,46417,46418,46419,46421,46422,46423,46424,46425,46426,46427,46430,46434,46435,46436,46437,46438,46439,46440,46441,46442,46443,46444,46445,46446,46447,46448,46449,46450,46451,46452,46453,46454,46455,46456,46457,46458,46459,46460,46461,46462,46463,46464,46465,46466,46467,46468,46469,46470,46471,46472,46473,46474,46475,46476,46477,46478,46479,46480,46481,46482,46483,46484,46485,46486,46487,46488,46489,46490,46491,46492,46493,46494,46495,46498,46499,46501,46502,46503,46505,46508,46509,46510,46511,46514,46518,46519,46520,46521,46522,46526,46527,46529,46530,46531,46533,46534,46535,46536,46537,46538,46539,46542,46546,46547,46548,46549,46550,46551,46553,46554,46555,46556,46557,46558,46559,46560,46561,46562,46563,46564,46565,46566,46567,46568,46569,46570,46571,46573,46574,46575,46576,46577,46578,46579,46580,46581,46582,46583,46584,46585,46586,46587,46588,46589,46590,46591,46592,46593,46594,46595,46596,46597,46598,46599,46600,46601,46602,46603,46604,46605,46606,46607,46610,46611,46613,46614,46615,46617,46618,46619,46620,46621,46622,46623,46624,46625,46626,46627,46628,46630,46631,46632,46633,46634,46635,46637,46638,46639,46640,46641,46642,46643,46645,46646,46647,46648,46649,46650,46651,46652,46653,46654,46655,46656,46657,46658,46659,46660,46661,46662,46663,46665,46666,46667,46668,46669,46670,46671,46672,46673,46674,46675,46676,46677,46678,46679,46680,46681,46682,46683,46684,46685,46686,46687,46688,46689,46690,46691,46693,46694,46695,46697,46698,46699,46700,46701,46702,46703,46704,46705,46706,46707,46708,46709,46710,46711,46712,46713,46714,46715,46716,46717,46718,46719,46720,46721,46722,46723,46724,46725,46726,46727,46728,46729,46730,46731,46732,46733,46734,46735,46736,46737,46738,46739,46740,46741,46742,46743,46744,46745,46746,46747,46750,46751,46753,46754,46755,46757,46758,46759,46760,46761,46762,46765,46766,46767,46768,46770,46771,46772,46773,46774,46775,46776,46777,46778,46779,46780,46781,46782,46783,46784,46785,46786,46787,46788,46789,46790,46791,46792,46793,46794,46795,46796,46797,46798,46799,46800,46801,46802,46803,46805,46806,46807,46808,46809,46810,46811,46812,46813,46814,46815,46816,46817,46818,46819,46820,46821,46822,46823,46824,46825,46826,46827,46828,46829,46830,46831,46833,46834,46835,46837,46838,46839,46841,46842,46843,46844,46845,46846,46847,46850,46851,46852,46854,46855,46856,46857,46858,46859,46860,46861,46862,46863,46864,46865,46866,46867,46868,46869,46870,46871,46872,46873,46874,46875,46876,46877,46878,46879,46880,46881,46882,46883,46884,46885,46886,46887,46890,46891,46893,46894,46897,46898,46899,46900,46901,46902,46903,46906,46908,46909,46910,46911,46912,46913,46914,46915,46917,46918,46919,46921,46922,46923,46925,46926,46927,46928,46929,46930,46931,46934,46935,46936,46937,46938,46939,46940,46941,46942,46943,46945,46946,46947,46949,46950,46951,46953,46954,46955,46956,46957,46958,46959,46962,46964,46966,46967,46968,46969,46970,46971,46974,46975,46977,46978,46979,46981,46982,46983,46984,46985,46986,46987,46990,46995,46996,46997,47002,47003,47005,47006,47007,47009,47010,47011,47012,47013,47014,47015,47018,47022,47023,47024,47025,47026,47027,47030,47031,47033,47034,47035,47036,47037,47038,47039,47040,47041,47042,47043,47044,47045,47046,47048,47050,47051,47052,47053,47054,47055,47056,47057,47058,47059,47060,47061,47062,47063,47064,47065,47066,47067,47068,47069,47070,47071,47072,47073,47074,47075,47076,47077,47078,47079,47080,47081,47082,47083,47086,47087,47089,47090,47091,47093,47094,47095,47096,47097,47098,47099,47102,47106,47107,47108,47109,47110,47114,47115,47117,47118,47119,47121,47122,47123,47124,47125,47126,47127,47130,47132,47134,47135,47136,47137,47138,47139,47142,47143,47145,47146,47147,47149,47150,47151,47152,47153,47154,47155,47158,47162,47163,47164,47165,47166,47167,47169,47170,47171,47173,47174,47175,47176,47177,47178,47179,47180,47181,47182,47183,47184,47186,47188,47189,47190,47191,47192,47193,47194,47195,47198,47199,47201,47202,47203,47205,47206,47207,47208,47209,47210,47211,47214,47216,47218,47219,47220,47221,47222,47223,47225,47226,47227,47229,47230,47231,47232,47233,47234,47235,47236,47237,47238,47239,47240,47241,47242,47243,47244,47246,47247,47248,47249,47250,47251,47252,47253,47254,47255,47256,47257,47258,47259,47260,47261,47262,47263,47264,47265,47266,47267,47268,47269,47270,47271,47273,47274,47275,47276,47277,47278,47279,47281,47282,47283,47285,47286,47287,47289,47290,47291,47292,47293,47294,47295,47298,47300,47302,47303,47304,47305,47306,47307,47309,47310,47311,47313,47314,47315,47317,47318,47319,47320,47321,47322,47323,47324,47326,47328,47330,47331,47332,47333,47334,47335,47338,47339,47341,47342,47343,47345,47346,47347,47348,47349,47350,47351,47354,47356,47358,47359,47360,47361,47362,47363,47365,47366,47367,47368,47369,47370,47371,47372,47373,47374,47375,47376,47377,47378,47379,47380,47381,47382,47383,47385,47386,47387,47388,47389,47390,47391,47393,47394,47395,47396,47397,47398,47399,47400,47401,47402,47403,47404,47405,47406,47407,47408,47409,47410,47411,47412,47413,47414,47415,47416,47417,47418,47419,47422,47423,47425,47426,47427,47429,47430,47431,47432,47433,47434,47435,47437,47438,47440,47442,47443,47444,47445,47446,47447,47450,47451,47453,47454,47455,47457,47458,47459,47460,47461,47462,47463,47466,47468,47470,47471,47472,47473,47474,47475,47478,47479,47481,47482,47483,47485,47486,47487,47488,47489,47490,47491,47494,47496,47499,47500,47503,47504,47505,47506,47507,47508,47509,47510,47511,47512,47513,47514,47515,47516,47517,47518,47519,47520,47521,47522,47523,47524,47525,47526,47527,47528,47529,47530,47531,47534,47535,47537,47538,47539,47541,47542,47543,47544,47545,47546,47547,47550,47552,47554,47555,47556,47557,47558,47559,47562,47563,47565,47571,47572,47573,47574,47575,47578,47580,47583,47584,47586,47590,47591,47593,47594,47595,47597,47598,47599,47600,47601,47602,47603,47606,47611,47612,47613,47614,47615,47618,47619,47620,47621,47622,47623,47625,47626,47627,47628,47629,47630,47631,47632,47633,47634,47635,47636,47638,47639,47640,47641,47642,47643,47644,47645,47646,47647,47648,47649,47650,47651,47652,47653,47654,47655,47656,47657,47658,47659,47660,47661,47662,47663,47664,47665,47666,47667,47668,47669,47670,47671,47674,47675,47677,47678,47679,47681,47683,47684,47685,47686,47687,47690,47692,47695,47696,47697,47698,47702,47703,47705,47706,47707,47709,47710,47711,47712,47713,47714,47715,47718,47722,47723,47724,47725,47726,47727,47730,47731,47733,47734,47735,47737,47738,47739,47740,47741,47742,47743,47744,47745,47746,47750,47752,47753,47754,47755,47757,47758,47759,47760,47761,47762,47763,47764,47765,47766,47767,47768,47769,47770,47771,47772,47773,47774,47775,47776,47777,47778,47779,47780,47781,47782,47783,47786,47789,47790,47791,47793,47795,47796,47797,47798,47799,47802,47804,47806,47807,47808,47809,47810,47811,47813,47814,47815,47817,47818,47819,47820,47821,47822,47823,47824,47825,47826,47827,47828,47829,47830,47831,47834,47835,47836,47837,47838,47839,47840,47841,47842,47843,47844,47845,47846,47847,47848,47849,47850,47851,47852,47853,47854,47855,47856,47857,47858,47859,47860,47861,47862,47863,47864,47865,47866,47867,47869,47870,47871,47873,47874,47875,47877,47878,47879,47880,47881,47882,47883,47884,47886,47888,47890,47891,47892,47893,47894,47895,47897,47898,47899,47901,47902,47903,47905,47906,47907,47908,47909,47910,47911,47912,47914,47916,47917,47918,47919,47920,47921,47922,47923,47927,47929,47930,47935,47936,47937,47938,47939,47942,47944,47946,47947,47948,47950,47953,47954,47955,47957,47958,47959,47961,47962,47963,47964,47965,47966,47967,47968,47970,47972,47973,47974,47975,47976,47977,47978,47979,47981,47982,47983,47984,47985,47986,47987,47988,47989,47990,47991,47992,47993,47994,47995,47996,47997,47998,47999,48000,48001,48002,48003,48004,48005,48006,48007,48009,48010,48011,48013,48014,48015,48017,48018,48019,48020,48021,48022,48023,48024,48025,48026,48027,48028,48029,48030,48031,48032,48033,48034,48035,48037,48038,48039,48041,48042,48043,48045,48046,48047,48048,48049,48050,48051,48053,48054,48056,48057,48058,48059,48060,48061,48062,48063,48065,48066,48067,48069,48070,48071,48073,48074,48075,48076,48077,48078,48079,48081,48082,48084,48085,48086,48087,48088,48089,48090,48091,48092,48093,48094,48095,48096,48097,48098,48099,48100,48101,48102,48103,48104,48105,48106,48107,48108,48109,48110,48111,48112,48113,48114,48115,48116,48117,48118,48119,48122,48123,48125,48126,48129,48131,48132,48133,48134,48135,48138,48142,48144,48146,48147,48153,48154,48160,48161,48162,48163,48166,48168,48170,48171,48172,48174,48175,48178,48179,48181,48182,48183,48185,48186,48187,48188,48189,48190,48191,48194,48198,48199,48200,48202,48203,48206,48207,48209,48210,48211,48212,48213,48214,48215,48216,48217,48218,48219,48220,48222,48223,48224,48225,48226,48227,48228,48229,48230,48231,48232,48233,48234,48235,48236,48237,48238,48239,48240,48241,48242,48243,48244,48245,48246,48247,48248,48249,48250,48251,48252,48253,48254,48255,48256,48257,48258,48259,48262,48263,48265,48266,48269,48271,48272,48273,48274,48275,48278,48280,48283,48284,48285,48286,48287,48290,48291,48293,48294,48297,48298,48299,48300,48301,48302,48303,48306,48310,48311,48312,48313,48314,48315,48318,48319,48321,48322,48323,48325,48326,48327,48328,48329,48330,48331,48332,48334,48338,48339,48340,48342,48343,48345,48346,48347,48349,48350,48351,48352,48353,48354,48355,48356,48357,48358,48359,48360,48361,48362,48363,48364,48365,48366,48367,48368,48369,48370,48371,48375,48377,48378,48379,48381,48382,48383,48384,48385,48386,48387,48390,48392,48394,48395,48396,48397,48398,48399,48401,48402,48403,48405,48406,48407,48408,48409,48410,48411,48412,48413,48414,48415,48416,48417,48418,48419,48421,48422,48423,48424,48425,48426,48427,48429,48430,48431,48432,48433,48434,48435,48436,48437,48438,48439,48440,48441,48442,48443,48444,48445,48446,48447,48449,48450,48451,48452,48453,48454,48455,48458,48459,48461,48462,48463,48465,48466,48467,48468,48469,48470,48471,48474,48475,48476,48477,48478,48479,48480,48481,48482,48483,48485,48486,48487,48489,48490,48491,48492,48493,48494,48495,48496,48497,48498,48499,48500,48501,48502,48503,48504,48505,48506,48507,48508,48509,48510,48511,48514,48515,48517,48518,48523,48524,48525,48526,48527,48530,48532,48534,48535,48536,48539,48541,48542,48543,48544,48545,48546,48547,48549,48550,48551,48552,48553,48554,48555,48556,48557,48558,48559,48561,48562,48563,48564,48565,48566,48567,48569,48570,48571,48572,48573,48574,48575,48576,48577,48578,48579,48580,48581,48582,48583,48584,48585,48586,48587,48588,48589,48590,48591,48592,48593,48594,48595,48598,48599,48601,48602,48603,48605,48606,48607,48608,48609,48610,48611,48612,48613,48614,48615,48616,48618,48619,48620,48621,48622,48623,48625,48626,48627,48629,48630,48631,48633,48634,48635,48636,48637,48638,48639,48641,48642,48644,48646,48647,48648,48649,48650,48651,48654,48655,48657,48658,48659,48661,48662,48663,48664,48665,48666,48667,48670,48672,48673,48674,48675,48676,48677,48678,48679,48680,48681,48682,48683,48684,48685,48686,48687,48688,48689,48690,48691,48692,48693,48694,48695,48696,48697,48698,48699,48700,48701,48702,48703,48704,48705,48706,48707,48710,48711,48713,48714,48715,48717,48719,48720,48721,48722,48723,48726,48728,48732,48733,48734,48735,48738,48739,48741,48742,48743,48745,48747,48748,48749,48750,48751,48754,48758,48759,48760,48761,48762,48766,48767,48769,48770,48771,48773,48774,48775,48776,48777,48778,48779,48782,48786,48787,48788,48789,48790,48791,48794,48795,48796,48797,48798,48799,48800,48801,48802,48803,48804,48805,48806,48807,48809,48810,48811,48812,48813,48814,48815,48816,48817,48818,48819,48820,48821,48822,48823,48824,48825,48826,48827,48828,48829,48830,48831,48832,48833,48834,48835,48836,48837,48838,48839,48840,48841,48842,48843,48844,48845,48846,48847,48850,48851,48853,48854,48857,48858,48859,48860,48861,48862,48863,48865,48866,48870,48871,48872,48873,48874,48875,48877,48878,48879,48880,48881,48882,48883,48884,48885,48886,48887,48888,48889,48890,48891,48892,48893,48894,48895,48896,48898,48899,48900,48901,48902,48903,48906,48907,48908,48909,48910,48911,48912,48913,48914,48915,48916,48917,48918,48919,48922,48926,48927,48928,48929,48930,48931,48932,48933,48934,48935,48936,48937,48938,48939,48940,48941,48942,48943,48944,48945,48946,48947,48948,48949,48950,48951,48952,48953,48954,48955,48956,48957,48958,48959,48962,48963,48965,48966,48967,48969,48970,48971,48972,48973,48974,48975,48978,48979,48980,48982,48983,48984,48985,48986,48987,48988,48989,48990,48991,48992,48993,48994,48995,48996,48997,48998,48999,49000,49001,49002,49003,49004,49005,49006,49007,49008,49009,49010,49011,49012,49013,49014,49015,49016,49017,49018,49019,49020,49021,49022,49023,49024,49025,49026,49027,49028,49029,49030,49031,49032,49033,49034,49035,49036,49037,49038,49039,49040,49041,49042,49043,49045,49046,49047,49048,49049,49050,49051,49052,49053,49054,49055,49056,49057,49058,49059,49060,49061,49062,49063,49064,49065,49066,49067,49068,49069,49070,49071,49073,49074,49075,49076,49077,49078,49079,49080,49081,49082,49083,49084,49085,49086,49087,49088,49089,49090,49091,49092,49094,49095,49096,49097,49098,49099,49102,49103,49105,49106,49107,49109,49110,49111,49112,49113,49114,49115,49117,49118,49120,49122,49123,49124,49125,49126,49127,49128,49129,49130,49131,49132,49133,49134,49135,49136,49137,49138,49139,49140,49141,49142,49143,49144,49145,49146,49147,49148,49149,49150,49151,49152,49153,49154,49155,49156,49157,49158,49159,49160,49161,49162,49163,49164,49165,49166,49167,49168,49169,49170,49171,49172,49173,49174,49175,49176,49177,49178,49179,49180,49181,49182,49183,49184,49185,49186,49187,49188,49189,49190,49191,49192,49193,49194,49195,49196,49197,49198,49199,49200,49201,49202,49203,49204,49205,49206,49207,49208,49209,49210,49211,49213,49214,49215,49216,49217,49218,49219,49220,49221,49222,49223,49224,49225,49226,49227,49228,49229,49230,49231,49232,49234,49235,49236,49237,49238,49239,49241,49242,49243,49245,49246,49247,49249,49250,49251,49252,49253,49254,49255,49258,49259,49260,49261,49262,49263,49264,49265,49266,49267,49268,49269,49270,49271,49272,49273,49274,49275,49276,49277,49278,49279,49280,49281,49282,49283,49284,49285,49286,49287,49288,49289,49290,49291,49292,49293,49294,49295,49298,49299,49301,49302,49303,49305,49306,49307,49308,49309,49310,49311,49314,49316,49318,49319,49320,49321,49322,49323,49326,49329,49330,49335,49336,49337,49338,49339,49342,49346,49347,49348,49350,49351,49354,49355,49357,49358,49359,49361,49362,49363,49364,49365,49366,49367,49370,49374,49375,49376,49377,49378,49379,49382,49383,49385,49386,49387,49389,49390,49391,49392,49393,49394,49395,49398,49400,49402,49403,49404,49405,49406,49407,49409,49410,49411,49413,49414,49415,49417,49418,49419,49420,49421,49422,49423,49425,49426,49427,49428,49430,49431,49432,49433,49434,49435,49441,49442,49445,49448,49449,49450,49451,49454,49458,49459,49460,49461,49463,49466,49467,49469,49470,49471,49473,49474,49475,49476,49477,49478,49479,49482,49486,49487,49488,49489,49490,49491,49494,49495,49497,49498,49499,49501,49502,49503,49504,49505,49506,49507,49510,49514,49515,49516,49517,49518,49519,49521,49522,49523,49525,49526,49527,49529,49530,49531,49532,49533,49534,49535,49536,49537,49538,49539,49540,49542,49543,49544,49545,49546,49547,49551,49553,49554,49555,49557,49559,49560,49561,49562,49563,49566,49568,49570,49571,49572,49574,49575,49578,49579,49581,49582,49583,49585,49586,49587,49588,49589,49590,49591,49592,49593,49594,49595,49596,49598,49599,49600,49601,49602,49603,49605,49606,49607,49609,49610,49611,49613,49614,49615,49616,49617,49618,49619,49621,49622,49625,49626,49627,49628,49629,49630,49631,49633,49634,49635,49637,49638,49639,49641,49642,49643,49644,49645,49646,49647,49650,49652,49653,49654,49655,49656,49657,49658,49659,49662,49663,49665,49666,49667,49669,49670,49671,49672,49673,49674,49675,49678,49680,49682,49683,49684,49685,49686,49687,49690,49691,49693,49694,49697,49698,49699,49700,49701,49702,49703,49706,49708,49710,49712,49715,49717,49718,49719,49720,49721,49722,49723,49724,49725,49726,49727,49728,49729,49730,49731,49732,49733,49734,49735,49737,49738,49739,49740,49741,49742,49743,49746,49747,49749,49750,49751,49753,49754,49755,49756,49757,49758,49759,49761,49762,49763,49764,49766,49767,49768,49769,49770,49771,49774,49775,49777,49778,49779,49781,49782,49783,49784,49785,49786,49787,49790,49792,49794,49795,49796,49797,49798,49799,49802,49803,49804,49805,49806,49807,49809,49810,49811,49812,49813,49814,49815,49817,49818,49820,49822,49823,49824,49825,49826,49827,49830,49831,49833,49834,49835,49838,49839,49840,49841,49842,49843,49846,49848,49850,49851,49852,49853,49854,49855,49856,49857,49858,49859,49860,49861,49862,49863,49864,49865,49866,49867,49868,49869,49870,49871,49872,49873,49874,49875,49876,49877,49878,49879,49880,49881,49882,49883,49886,49887,49889,49890,49893,49894,49895,49896,49897,49898,49902,49904,49906,49907,49908,49909,49911,49914,49917,49918,49919,49921,49922,49923,49924,49925,49926,49927,49930,49931,49934,49935,49936,49937,49938,49942,49943,49945,49946,49947,49949,49950,49951,49952,49953,49954,49955,49958,49959,49962,49963,49964,49965,49966,49967,49968,49969,49970,49971,49972,49973,49974,49975,49976,49977,49978,49979,49980,49981,49982,49983,49984,49985,49986,49987,49988,49990,49991,49992,49993,49994,49995,49996,49997,49998,49999,50000,50001,50002,50003,50004,50005,50006,50007,50008,50009,50010,50011,50012,50013,50014,50015,50016,50017,50018,50019,50020,50021,50022,50023,50026,50027,50029,50030,50031,50033,50035,50036,50037,50038,50039,50042,50043,50046,50047,50048,50049,50050,50051,50053,50054,50055,50057,50058,50059,50061,50062,50063,50064,50065,50066,50067,50068,50069,50070,50071,50072,50073,50074,50075,50076,50077,50078,50079,50080,50081,50082,50083,50084,50085,50086,50087,50088,50089,50090,50091,50092,50093,50094,50095,50096,50097,50098,50099,50100,50101,50102,50103,50104,50105,50106,50107,50108,50109,50110,50111,50113,50114,50115,50116,50117,50118,50119,50120,50121,50122,50123,50124,50125,50126,50127,50128,50129,50130,50131,50132,50133,50134,50135,50138,50139,50141,50142,50145,50147,50148,50149,50150,50151,50154,50155,50156,50158,50159,50160,50161,50162,50163,50166,50167,50169,50170,50171,50172,50173,50174,50175,50176,50177,50178,50179,50180,50181,50182,50183,50185,50186,50187,50188,50189,50190,50191,50193,50194,50195,50196,50197,50198,50199,50200,50201,50202,50203,50204,50205,50206,50207,50208,50209,50210,50211,50213,50214,50215,50216,50217,50218,50219,50221,50222,50223,50225,50226,50227,50229,50230,50231,50232,50233,50234,50235,50238,50239,50240,50241,50242,50243,50244,50245,50246,50247,50249,50250,50251,50252,50253,50254,50255,50256,50257,50258,50259,50260,50261,50262,50263,50264,50265,50266,50267,50268,50269,50270,50271,50272,50273,50274,50275,50278,50279,50281,50282,50283,50285,50286,50287,50288,50289,50290,50291,50294,50295,50296,50298,50299,50300,50301,50302,50303,50305,50306,50307,50308,50309,50310,50311,50312,50313,50314,50315,50316,50317,50318,50319,50320,50321,50322,50323,50325,50326,50327,50328,50329,50330,50331,50333,50334,50335,50336,50337,50338,50339,50340,50341,50342,50343,50344,50345,50346,50347,50348,50349,50350,50351,50352,50353,50354,50355,50356,50357,50358,50359,50361,50362,50363,50365,50366,50367,50368,50369,50370,50371,50372,50373,50374,50375,50376,50377,50378,50379,50380,50381,50382,50383,50384,50385,50386,50387,50388,50389,50390,50391,50392,50393,50394,50395,50396,50397,50398,50399,50400,50401,50402,50403,50404,50405,50406,50407,50408,50410,50411,50412,50413,50414,50415,50418,50419,50421,50422,50423,50425,50427,50428,50429,50430,50434,50435,50436,50437,50438,50439,50440,50441,50442,50443,50445,50446,50447,50449,50450,50451,50453,50454,50455,50456,50457,50458,50459,50461,50462,50463,50464,50465,50466,50467,50468,50469,50470,50471,50474,50475,50477,50478,50479,50481,50482,50483,50484,50485,50486,50487,50490,50492,50494,50495,50496,50497,50498,50499,50502,50503,50507,50511,50512,50513,50514,50518,50522,50523,50524,50527,50530,50531,50533,50534,50535,50537,50538,50539,50540,50541,50542,50543,50546,50550,50551,50552,50553,50554,50555,50558,50559,50561,50562,50563,50565,50566,50568,50569,50570,50571,50574,50576,50578,50579,50580,50582,50585,50586,50587,50589,50590,50591,50593,50594,50595,50596,50597,50598,50599,50600,50602,50603,50604,50605,50606,50607,50608,50609,50610,50611,50614,50615,50618,50623,50624,50625,50626,50627,50635,50637,50639,50642,50643,50645,50646,50647,50649,50650,50651,50652,50653,50654,50655,50658,50660,50662,50663,50664,50665,50666,50667,50671,50673,50674,50675,50677,50680,50681,50682,50683,50690,50691,50692,50697,50698,50699,50701,50702,50703,50705,50706,50707,50708,50709,50710,50711,50714,50717,50718,50719,50720,50721,50722,50723,50726,50727,50729,50730,50731,50735,50737,50738,50742,50744,50746,50748,50749,50750,50751,50754,50755,50757,50758,50759,50761,50762,50763,50764,50765,50766,50767,50770,50774,50775,50776,50777,50778,50779,50782,50783,50785,50786,50787,50788,50789,50790,50791,50792,50793,50794,50795,50797,50798,50800,50802,50803,50804,50805,50806,50807,50810,50811,50813,50814,50815,50817,50818,50819,50820,50821,50822,50823,50826,50828,50830,50831,50832,50833,50834,50835,50838,50839,50841,50842,50843,50845,50846,50847,50848,50849,50850,50851,50854,50856,50858,50859,50860,50861,50862,50863,50866,50867,50869,50870,50871,50875,50876,50877,50878,50879,50882,50884,50886,50887,50888,50889,50890,50891,50894,50895,50897,50898,50899,50901,50902,50903,50904,50905,50906,50907,50910,50911,50914,50915,50916,50917,50918,50919,50922,50923,50925,50926,50927,50929,50930,50931,50932,50933,50934,50935,50938,50939,50940,50942,50943,50944,50945,50946,50947,50950,50951,50953,50954,50955,50957,50958,50959,50960,50961,50962,50963,50966,50968,50970,50971,50972,50973,50974,50975,50978,50979,50981,50982,50983,50985,50986,50987,50988,50989,50990,50991,50994,50996,50998,51000,51001,51002,51003,51006,51007,51009,51010,51011,51013,51014,51015,51016,51017,51019,51022,51024,51033,51034,51035,51037,51038,51039,51041,51042,51043,51044,51045,51046,51047,51049,51050,51052,51053,51054,51055,51056,51057,51058,51059,51062,51063,51065,51066,51067,51071,51072,51073,51074,51078,51083,51084,51085,51087,51090,51091,51093,51097,51099,51100,51101,51102,51103,51106,51111,51112,51113,51114,51115,51118,51119,51121,51122,51123,51125,51126,51127,51128,51129,51130,51131,51134,51138,51139,51140,51141,51142,51143,51146,51147,51149,51151,51153,51154,51155,51156,51157,51158,51159,51161,51162,51163,51164,51166,51167,51168,51169,51170,51171,51173,51174,51175,51177,51178,51179,51181,51182,51183,51184,51185,51186,51187,51188,51189,51190,51191,51192,51193,51194,51195,51196,51197,51198,51199,51202,51203,51205,51206,51207,51209,51211,51212,51213,51214,51215,51218,51220,51223,51224,51225,51226,51227,51230,51231,51233,51234,51235,51237,51238,51239,51240,51241,51242,51243,51246,51248,51250,51251,51252,51253,51254,51255,51257,51258,51259,51261,51262,51263,51265,51266,51267,51268,51269,51270,51271,51274,51275,51278,51279,51280,51281,51282,51283,51285,51286,51287,51288,51289,51290,51291,51292,51293,51294,51295,51296,51297,51298,51299,51300,51301,51302,51303,51304,51305,51306,51307,51308,51309,51310,51311,51314,51315,51317,51318,51319,51321,51323,51324,51325,51326,51327,51330,51332,51336,51337,51338,51342,51343,51344,51345,51346,51347,51349,51350,51351,51352,51353,51354,51355,51356,51358,51360,51362,51363,51364,51365,51366,51367,51369,51370,51371,51372,51373,51374,51375,51376,51377,51378,51379,51380,51381,51382,51383,51384,51385,51386,51387,51390,51391,51392,51393,51394,51395,51397,51398,51399,51401,51402,51403,51405,51406,51407,51408,51409,51410,51411,51414,51416,51418,51419,51420,51421,51422,51423,51426,51427,51429,51430,51431,51432,51433,51434,51435,51436,51437,51438,51439,51440,51441,51442,51443,51444,51446,51447,51448,51449,51450,51451,51454,51455,51457,51458,51459,51463,51464,51465,51466,51467,51470,12288,12289,12290,183,8229,8230,168,12291,173,8213,8741,65340,8764,8216,8217,8220,8221,12308,12309,12296,12297,12298,12299,12300,12301,12302,12303,12304,12305,177,215,247,8800,8804,8805,8734,8756,176,8242,8243,8451,8491,65504,65505,65509,9794,9792,8736,8869,8978,8706,8711,8801,8786,167,8251,9734,9733,9675,9679,9678,9671,9670,9633,9632,9651,9650,9661,9660,8594,8592,8593,8595,8596,12307,8810,8811,8730,8765,8733,8757,8747,8748,8712,8715,8838,8839,8834,8835,8746,8745,8743,8744,65506,51472,51474,51475,51476,51477,51478,51479,51481,51482,51483,51484,51485,51486,51487,51488,51489,51490,51491,51492,51493,51494,51495,51496,51497,51498,51499,51501,51502,51503,51504,51505,51506,51507,51509,51510,51511,51512,51513,51514,51515,51516,51517,51518,51519,51520,51521,51522,51523,51524,51525,51526,51527,51528,51529,51530,51531,51532,51533,51534,51535,51538,51539,51541,51542,51543,51545,51546,51547,51548,51549,51550,51551,51554,51556,51557,51558,51559,51560,51561,51562,51563,51565,51566,51567,8658,8660,8704,8707,180,65374,711,728,733,730,729,184,731,161,191,720,8750,8721,8719,164,8457,8240,9665,9664,9655,9654,9828,9824,9825,9829,9831,9827,8857,9672,9635,9680,9681,9618,9636,9637,9640,9639,9638,9641,9832,9743,9742,9756,9758,182,8224,8225,8597,8599,8601,8598,8600,9837,9833,9834,9836,12927,12828,8470,13255,8482,13250,13272,8481,8364,174,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,51569,51570,51571,51573,51574,51575,51576,51577,51578,51579,51581,51582,51583,51584,51585,51586,51587,51588,51589,51590,51591,51594,51595,51597,51598,51599,51601,51602,51603,51604,51605,51606,51607,51610,51612,51614,51615,51616,51617,51618,51619,51620,51621,51622,51623,51624,51625,51626,51627,51628,51629,51630,51631,51632,51633,51634,51635,51636,51637,51638,51639,51640,51641,51642,51643,51644,51645,51646,51647,51650,51651,51653,51654,51657,51659,51660,51661,51662,51663,51666,51668,51671,51672,51675,65281,65282,65283,65284,65285,65286,65287,65288,65289,65290,65291,65292,65293,65294,65295,65296,65297,65298,65299,65300,65301,65302,65303,65304,65305,65306,65307,65308,65309,65310,65311,65312,65313,65314,65315,65316,65317,65318,65319,65320,65321,65322,65323,65324,65325,65326,65327,65328,65329,65330,65331,65332,65333,65334,65335,65336,65337,65338,65339,65510,65341,65342,65343,65344,65345,65346,65347,65348,65349,65350,65351,65352,65353,65354,65355,65356,65357,65358,65359,65360,65361,65362,65363,65364,65365,65366,65367,65368,65369,65370,65371,65372,65373,65507,51678,51679,51681,51683,51685,51686,51688,51689,51690,51691,51694,51698,51699,51700,51701,51702,51703,51706,51707,51709,51710,51711,51713,51714,51715,51716,51717,51718,51719,51722,51726,51727,51728,51729,51730,51731,51733,51734,51735,51737,51738,51739,51740,51741,51742,51743,51744,51745,51746,51747,51748,51749,51750,51751,51752,51754,51755,51756,51757,51758,51759,51760,51761,51762,51763,51764,51765,51766,51767,51768,51769,51770,51771,51772,51773,51774,51775,51776,51777,51778,51779,51780,51781,51782,12593,12594,12595,12596,12597,12598,12599,12600,12601,12602,12603,12604,12605,12606,12607,12608,12609,12610,12611,12612,12613,12614,12615,12616,12617,12618,12619,12620,12621,12622,12623,12624,12625,12626,12627,12628,12629,12630,12631,12632,12633,12634,12635,12636,12637,12638,12639,12640,12641,12642,12643,12644,12645,12646,12647,12648,12649,12650,12651,12652,12653,12654,12655,12656,12657,12658,12659,12660,12661,12662,12663,12664,12665,12666,12667,12668,12669,12670,12671,12672,12673,12674,12675,12676,12677,12678,12679,12680,12681,12682,12683,12684,12685,12686,51783,51784,51785,51786,51787,51790,51791,51793,51794,51795,51797,51798,51799,51800,51801,51802,51803,51806,51810,51811,51812,51813,51814,51815,51817,51818,51819,51820,51821,51822,51823,51824,51825,51826,51827,51828,51829,51830,51831,51832,51833,51834,51835,51836,51838,51839,51840,51841,51842,51843,51845,51846,51847,51848,51849,51850,51851,51852,51853,51854,51855,51856,51857,51858,51859,51860,51861,51862,51863,51865,51866,51867,51868,51869,51870,51871,51872,51873,51874,51875,51876,51877,51878,51879,8560,8561,8562,8563,8564,8565,8566,8567,8568,8569,null,null,null,null,null,8544,8545,8546,8547,8548,8549,8550,8551,8552,8553,null,null,null,null,null,null,null,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,931,932,933,934,935,936,937,null,null,null,null,null,null,null,null,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,963,964,965,966,967,968,969,null,null,null,null,null,null,51880,51881,51882,51883,51884,51885,51886,51887,51888,51889,51890,51891,51892,51893,51894,51895,51896,51897,51898,51899,51902,51903,51905,51906,51907,51909,51910,51911,51912,51913,51914,51915,51918,51920,51922,51924,51925,51926,51927,51930,51931,51932,51933,51934,51935,51937,51938,51939,51940,51941,51942,51943,51944,51945,51946,51947,51949,51950,51951,51952,51953,51954,51955,51957,51958,51959,51960,51961,51962,51963,51964,51965,51966,51967,51968,51969,51970,51971,51972,51973,51974,51975,51977,51978,9472,9474,9484,9488,9496,9492,9500,9516,9508,9524,9532,9473,9475,9487,9491,9499,9495,9507,9523,9515,9531,9547,9504,9519,9512,9527,9535,9501,9520,9509,9528,9538,9490,9489,9498,9497,9494,9493,9486,9485,9502,9503,9505,9506,9510,9511,9513,9514,9517,9518,9521,9522,9525,9526,9529,9530,9533,9534,9536,9537,9539,9540,9541,9542,9543,9544,9545,9546,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,51979,51980,51981,51982,51983,51985,51986,51987,51989,51990,51991,51993,51994,51995,51996,51997,51998,51999,52002,52003,52004,52005,52006,52007,52008,52009,52010,52011,52012,52013,52014,52015,52016,52017,52018,52019,52020,52021,52022,52023,52024,52025,52026,52027,52028,52029,52030,52031,52032,52034,52035,52036,52037,52038,52039,52042,52043,52045,52046,52047,52049,52050,52051,52052,52053,52054,52055,52058,52059,52060,52062,52063,52064,52065,52066,52067,52069,52070,52071,52072,52073,52074,52075,52076,13205,13206,13207,8467,13208,13252,13219,13220,13221,13222,13209,13210,13211,13212,13213,13214,13215,13216,13217,13218,13258,13197,13198,13199,13263,13192,13193,13256,13223,13224,13232,13233,13234,13235,13236,13237,13238,13239,13240,13241,13184,13185,13186,13187,13188,13242,13243,13244,13245,13246,13247,13200,13201,13202,13203,13204,8486,13248,13249,13194,13195,13196,13270,13253,13229,13230,13231,13275,13225,13226,13227,13228,13277,13264,13267,13251,13257,13276,13254,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,52077,52078,52079,52080,52081,52082,52083,52084,52085,52086,52087,52090,52091,52092,52093,52094,52095,52096,52097,52098,52099,52100,52101,52102,52103,52104,52105,52106,52107,52108,52109,52110,52111,52112,52113,52114,52115,52116,52117,52118,52119,52120,52121,52122,52123,52125,52126,52127,52128,52129,52130,52131,52132,52133,52134,52135,52136,52137,52138,52139,52140,52141,52142,52143,52144,52145,52146,52147,52148,52149,52150,52151,52153,52154,52155,52156,52157,52158,52159,52160,52161,52162,52163,52164,198,208,170,294,null,306,null,319,321,216,338,186,222,358,330,null,12896,12897,12898,12899,12900,12901,12902,12903,12904,12905,12906,12907,12908,12909,12910,12911,12912,12913,12914,12915,12916,12917,12918,12919,12920,12921,12922,12923,9424,9425,9426,9427,9428,9429,9430,9431,9432,9433,9434,9435,9436,9437,9438,9439,9440,9441,9442,9443,9444,9445,9446,9447,9448,9449,9312,9313,9314,9315,9316,9317,9318,9319,9320,9321,9322,9323,9324,9325,9326,189,8531,8532,188,190,8539,8540,8541,8542,52165,52166,52167,52168,52169,52170,52171,52172,52173,52174,52175,52176,52177,52178,52179,52181,52182,52183,52184,52185,52186,52187,52188,52189,52190,52191,52192,52193,52194,52195,52197,52198,52200,52202,52203,52204,52205,52206,52207,52208,52209,52210,52211,52212,52213,52214,52215,52216,52217,52218,52219,52220,52221,52222,52223,52224,52225,52226,52227,52228,52229,52230,52231,52232,52233,52234,52235,52238,52239,52241,52242,52243,52245,52246,52247,52248,52249,52250,52251,52254,52255,52256,52259,52260,230,273,240,295,305,307,312,320,322,248,339,223,254,359,331,329,12800,12801,12802,12803,12804,12805,12806,12807,12808,12809,12810,12811,12812,12813,12814,12815,12816,12817,12818,12819,12820,12821,12822,12823,12824,12825,12826,12827,9372,9373,9374,9375,9376,9377,9378,9379,9380,9381,9382,9383,9384,9385,9386,9387,9388,9389,9390,9391,9392,9393,9394,9395,9396,9397,9332,9333,9334,9335,9336,9337,9338,9339,9340,9341,9342,9343,9344,9345,9346,185,178,179,8308,8319,8321,8322,8323,8324,52261,52262,52266,52267,52269,52271,52273,52274,52275,52276,52277,52278,52279,52282,52287,52288,52289,52290,52291,52294,52295,52297,52298,52299,52301,52302,52303,52304,52305,52306,52307,52310,52314,52315,52316,52317,52318,52319,52321,52322,52323,52325,52327,52329,52330,52331,52332,52333,52334,52335,52337,52338,52339,52340,52342,52343,52344,52345,52346,52347,52348,52349,52350,52351,52352,52353,52354,52355,52356,52357,52358,52359,52360,52361,52362,52363,52364,52365,52366,52367,52368,52369,52370,52371,12353,12354,12355,12356,12357,12358,12359,12360,12361,12362,12363,12364,12365,12366,12367,12368,12369,12370,12371,12372,12373,12374,12375,12376,12377,12378,12379,12380,12381,12382,12383,12384,12385,12386,12387,12388,12389,12390,12391,12392,12393,12394,12395,12396,12397,12398,12399,12400,12401,12402,12403,12404,12405,12406,12407,12408,12409,12410,12411,12412,12413,12414,12415,12416,12417,12418,12419,12420,12421,12422,12423,12424,12425,12426,12427,12428,12429,12430,12431,12432,12433,12434,12435,null,null,null,null,null,null,null,null,null,null,null,52372,52373,52374,52375,52378,52379,52381,52382,52383,52385,52386,52387,52388,52389,52390,52391,52394,52398,52399,52400,52401,52402,52403,52406,52407,52409,52410,52411,52413,52414,52415,52416,52417,52418,52419,52422,52424,52426,52427,52428,52429,52430,52431,52433,52434,52435,52437,52438,52439,52440,52441,52442,52443,52444,52445,52446,52447,52448,52449,52450,52451,52453,52454,52455,52456,52457,52458,52459,52461,52462,52463,52465,52466,52467,52468,52469,52470,52471,52472,52473,52474,52475,52476,52477,12449,12450,12451,12452,12453,12454,12455,12456,12457,12458,12459,12460,12461,12462,12463,12464,12465,12466,12467,12468,12469,12470,12471,12472,12473,12474,12475,12476,12477,12478,12479,12480,12481,12482,12483,12484,12485,12486,12487,12488,12489,12490,12491,12492,12493,12494,12495,12496,12497,12498,12499,12500,12501,12502,12503,12504,12505,12506,12507,12508,12509,12510,12511,12512,12513,12514,12515,12516,12517,12518,12519,12520,12521,12522,12523,12524,12525,12526,12527,12528,12529,12530,12531,12532,12533,12534,null,null,null,null,null,null,null,null,52478,52479,52480,52482,52483,52484,52485,52486,52487,52490,52491,52493,52494,52495,52497,52498,52499,52500,52501,52502,52503,52506,52508,52510,52511,52512,52513,52514,52515,52517,52518,52519,52521,52522,52523,52525,52526,52527,52528,52529,52530,52531,52532,52533,52534,52535,52536,52538,52539,52540,52541,52542,52543,52544,52545,52546,52547,52548,52549,52550,52551,52552,52553,52554,52555,52556,52557,52558,52559,52560,52561,52562,52563,52564,52565,52566,52567,52568,52569,52570,52571,52573,52574,52575,1040,1041,1042,1043,1044,1045,1025,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1072,1073,1074,1075,1076,1077,1105,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,null,null,null,null,null,null,null,null,null,null,null,null,null,52577,52578,52579,52581,52582,52583,52584,52585,52586,52587,52590,52592,52594,52595,52596,52597,52598,52599,52601,52602,52603,52604,52605,52606,52607,52608,52609,52610,52611,52612,52613,52614,52615,52617,52618,52619,52620,52621,52622,52623,52624,52625,52626,52627,52630,52631,52633,52634,52635,52637,52638,52639,52640,52641,52642,52643,52646,52648,52650,52651,52652,52653,52654,52655,52657,52658,52659,52660,52661,52662,52663,52664,52665,52666,52667,52668,52669,52670,52671,52672,52673,52674,52675,52677,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,52678,52679,52680,52681,52682,52683,52685,52686,52687,52689,52690,52691,52692,52693,52694,52695,52696,52697,52698,52699,52700,52701,52702,52703,52704,52705,52706,52707,52708,52709,52710,52711,52713,52714,52715,52717,52718,52719,52721,52722,52723,52724,52725,52726,52727,52730,52732,52734,52735,52736,52737,52738,52739,52741,52742,52743,52745,52746,52747,52749,52750,52751,52752,52753,52754,52755,52757,52758,52759,52760,52762,52763,52764,52765,52766,52767,52770,52771,52773,52774,52775,52777,52778,52779,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,52780,52781,52782,52783,52786,52788,52790,52791,52792,52793,52794,52795,52796,52797,52798,52799,52800,52801,52802,52803,52804,52805,52806,52807,52808,52809,52810,52811,52812,52813,52814,52815,52816,52817,52818,52819,52820,52821,52822,52823,52826,52827,52829,52830,52834,52835,52836,52837,52838,52839,52842,52844,52846,52847,52848,52849,52850,52851,52854,52855,52857,52858,52859,52861,52862,52863,52864,52865,52866,52867,52870,52872,52874,52875,52876,52877,52878,52879,52882,52883,52885,52886,52887,52889,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,52890,52891,52892,52893,52894,52895,52898,52902,52903,52904,52905,52906,52907,52910,52911,52912,52913,52914,52915,52916,52917,52918,52919,52920,52921,52922,52923,52924,52925,52926,52927,52928,52930,52931,52932,52933,52934,52935,52936,52937,52938,52939,52940,52941,52942,52943,52944,52945,52946,52947,52948,52949,52950,52951,52952,52953,52954,52955,52956,52957,52958,52959,52960,52961,52962,52963,52966,52967,52969,52970,52973,52974,52975,52976,52977,52978,52979,52982,52986,52987,52988,52989,52990,52991,44032,44033,44036,44039,44040,44041,44042,44048,44049,44050,44051,44052,44053,44054,44055,44057,44058,44059,44060,44061,44064,44068,44076,44077,44079,44080,44081,44088,44089,44092,44096,44107,44109,44116,44120,44124,44144,44145,44148,44151,44152,44154,44160,44161,44163,44164,44165,44166,44169,44170,44171,44172,44176,44180,44188,44189,44191,44192,44193,44200,44201,44202,44204,44207,44208,44216,44217,44219,44220,44221,44225,44228,44232,44236,44245,44247,44256,44257,44260,44263,44264,44266,44268,44271,44272,44273,44275,44277,44278,44284,44285,44288,44292,44294,52994,52995,52997,52998,52999,53001,53002,53003,53004,53005,53006,53007,53010,53012,53014,53015,53016,53017,53018,53019,53021,53022,53023,53025,53026,53027,53029,53030,53031,53032,53033,53034,53035,53038,53042,53043,53044,53045,53046,53047,53049,53050,53051,53052,53053,53054,53055,53056,53057,53058,53059,53060,53061,53062,53063,53064,53065,53066,53067,53068,53069,53070,53071,53072,53073,53074,53075,53078,53079,53081,53082,53083,53085,53086,53087,53088,53089,53090,53091,53094,53096,53098,53099,53100,44300,44301,44303,44305,44312,44316,44320,44329,44332,44333,44340,44341,44344,44348,44356,44357,44359,44361,44368,44372,44376,44385,44387,44396,44397,44400,44403,44404,44405,44406,44411,44412,44413,44415,44417,44418,44424,44425,44428,44432,44444,44445,44452,44471,44480,44481,44484,44488,44496,44497,44499,44508,44512,44516,44536,44537,44540,44543,44544,44545,44552,44553,44555,44557,44564,44592,44593,44596,44599,44600,44602,44608,44609,44611,44613,44614,44618,44620,44621,44622,44624,44628,44630,44636,44637,44639,44640,44641,44645,44648,44649,44652,44656,44664,53101,53102,53103,53106,53107,53109,53110,53111,53113,53114,53115,53116,53117,53118,53119,53121,53122,53123,53124,53126,53127,53128,53129,53130,53131,53133,53134,53135,53136,53137,53138,53139,53140,53141,53142,53143,53144,53145,53146,53147,53148,53149,53150,53151,53152,53154,53155,53156,53157,53158,53159,53161,53162,53163,53164,53165,53166,53167,53169,53170,53171,53172,53173,53174,53175,53176,53177,53178,53179,53180,53181,53182,53183,53184,53185,53186,53187,53189,53190,53191,53192,53193,53194,53195,44665,44667,44668,44669,44676,44677,44684,44732,44733,44734,44736,44740,44748,44749,44751,44752,44753,44760,44761,44764,44776,44779,44781,44788,44792,44796,44807,44808,44813,44816,44844,44845,44848,44850,44852,44860,44861,44863,44865,44866,44867,44872,44873,44880,44892,44893,44900,44901,44921,44928,44932,44936,44944,44945,44949,44956,44984,44985,44988,44992,44999,45000,45001,45003,45005,45006,45012,45020,45032,45033,45040,45041,45044,45048,45056,45057,45060,45068,45072,45076,45084,45085,45096,45124,45125,45128,45130,45132,45134,45139,45140,45141,45143,45145,53196,53197,53198,53199,53200,53201,53202,53203,53204,53205,53206,53207,53208,53209,53210,53211,53212,53213,53214,53215,53218,53219,53221,53222,53223,53225,53226,53227,53228,53229,53230,53231,53234,53236,53238,53239,53240,53241,53242,53243,53245,53246,53247,53249,53250,53251,53253,53254,53255,53256,53257,53258,53259,53260,53261,53262,53263,53264,53266,53267,53268,53269,53270,53271,53273,53274,53275,53276,53277,53278,53279,53280,53281,53282,53283,53284,53285,53286,53287,53288,53289,53290,53291,53292,45149,45180,45181,45184,45188,45196,45197,45199,45201,45208,45209,45210,45212,45215,45216,45217,45218,45224,45225,45227,45228,45229,45230,45231,45233,45235,45236,45237,45240,45244,45252,45253,45255,45256,45257,45264,45265,45268,45272,45280,45285,45320,45321,45323,45324,45328,45330,45331,45336,45337,45339,45340,45341,45347,45348,45349,45352,45356,45364,45365,45367,45368,45369,45376,45377,45380,45384,45392,45393,45396,45397,45400,45404,45408,45432,45433,45436,45440,45442,45448,45449,45451,45453,45458,45459,45460,45464,45468,45480,45516,45520,45524,45532,45533,53294,53295,53296,53297,53298,53299,53302,53303,53305,53306,53307,53309,53310,53311,53312,53313,53314,53315,53318,53320,53322,53323,53324,53325,53326,53327,53329,53330,53331,53333,53334,53335,53337,53338,53339,53340,53341,53342,53343,53345,53346,53347,53348,53349,53350,53351,53352,53353,53354,53355,53358,53359,53361,53362,53363,53365,53366,53367,53368,53369,53370,53371,53374,53375,53376,53378,53379,53380,53381,53382,53383,53384,53385,53386,53387,53388,53389,53390,53391,53392,53393,53394,53395,53396,45535,45544,45545,45548,45552,45561,45563,45565,45572,45573,45576,45579,45580,45588,45589,45591,45593,45600,45620,45628,45656,45660,45664,45672,45673,45684,45685,45692,45700,45701,45705,45712,45713,45716,45720,45721,45722,45728,45729,45731,45733,45734,45738,45740,45744,45748,45768,45769,45772,45776,45778,45784,45785,45787,45789,45794,45796,45797,45798,45800,45803,45804,45805,45806,45807,45811,45812,45813,45815,45816,45817,45818,45819,45823,45824,45825,45828,45832,45840,45841,45843,45844,45845,45852,45908,45909,45910,45912,45915,45916,45918,45919,45924,45925,53397,53398,53399,53400,53401,53402,53403,53404,53405,53406,53407,53408,53409,53410,53411,53414,53415,53417,53418,53419,53421,53422,53423,53424,53425,53426,53427,53430,53432,53434,53435,53436,53437,53438,53439,53442,53443,53445,53446,53447,53450,53451,53452,53453,53454,53455,53458,53462,53463,53464,53465,53466,53467,53470,53471,53473,53474,53475,53477,53478,53479,53480,53481,53482,53483,53486,53490,53491,53492,53493,53494,53495,53497,53498,53499,53500,53501,53502,53503,53504,53505,53506,53507,53508,45927,45929,45931,45934,45936,45937,45940,45944,45952,45953,45955,45956,45957,45964,45968,45972,45984,45985,45992,45996,46020,46021,46024,46027,46028,46030,46032,46036,46037,46039,46041,46043,46045,46048,46052,46056,46076,46096,46104,46108,46112,46120,46121,46123,46132,46160,46161,46164,46168,46176,46177,46179,46181,46188,46208,46216,46237,46244,46248,46252,46261,46263,46265,46272,46276,46280,46288,46293,46300,46301,46304,46307,46308,46310,46316,46317,46319,46321,46328,46356,46357,46360,46363,46364,46372,46373,46375,46376,46377,46378,46384,46385,46388,46392,53509,53510,53511,53512,53513,53514,53515,53516,53518,53519,53520,53521,53522,53523,53524,53525,53526,53527,53528,53529,53530,53531,53532,53533,53534,53535,53536,53537,53538,53539,53540,53541,53542,53543,53544,53545,53546,53547,53548,53549,53550,53551,53554,53555,53557,53558,53559,53561,53563,53564,53565,53566,53567,53570,53574,53575,53576,53577,53578,53579,53582,53583,53585,53586,53587,53589,53590,53591,53592,53593,53594,53595,53598,53600,53602,53603,53604,53605,53606,53607,53609,53610,53611,53613,46400,46401,46403,46404,46405,46411,46412,46413,46416,46420,46428,46429,46431,46432,46433,46496,46497,46500,46504,46506,46507,46512,46513,46515,46516,46517,46523,46524,46525,46528,46532,46540,46541,46543,46544,46545,46552,46572,46608,46609,46612,46616,46629,46636,46644,46664,46692,46696,46748,46749,46752,46756,46763,46764,46769,46804,46832,46836,46840,46848,46849,46853,46888,46889,46892,46895,46896,46904,46905,46907,46916,46920,46924,46932,46933,46944,46948,46952,46960,46961,46963,46965,46972,46973,46976,46980,46988,46989,46991,46992,46993,46994,46998,46999,53614,53615,53616,53617,53618,53619,53620,53621,53622,53623,53624,53625,53626,53627,53629,53630,53631,53632,53633,53634,53635,53637,53638,53639,53641,53642,53643,53644,53645,53646,53647,53648,53649,53650,53651,53652,53653,53654,53655,53656,53657,53658,53659,53660,53661,53662,53663,53666,53667,53669,53670,53671,53673,53674,53675,53676,53677,53678,53679,53682,53684,53686,53687,53688,53689,53691,53693,53694,53695,53697,53698,53699,53700,53701,53702,53703,53704,53705,53706,53707,53708,53709,53710,53711,47000,47001,47004,47008,47016,47017,47019,47020,47021,47028,47029,47032,47047,47049,47084,47085,47088,47092,47100,47101,47103,47104,47105,47111,47112,47113,47116,47120,47128,47129,47131,47133,47140,47141,47144,47148,47156,47157,47159,47160,47161,47168,47172,47185,47187,47196,47197,47200,47204,47212,47213,47215,47217,47224,47228,47245,47272,47280,47284,47288,47296,47297,47299,47301,47308,47312,47316,47325,47327,47329,47336,47337,47340,47344,47352,47353,47355,47357,47364,47384,47392,47420,47421,47424,47428,47436,47439,47441,47448,47449,47452,47456,47464,47465,53712,53713,53714,53715,53716,53717,53718,53719,53721,53722,53723,53724,53725,53726,53727,53728,53729,53730,53731,53732,53733,53734,53735,53736,53737,53738,53739,53740,53741,53742,53743,53744,53745,53746,53747,53749,53750,53751,53753,53754,53755,53756,53757,53758,53759,53760,53761,53762,53763,53764,53765,53766,53768,53770,53771,53772,53773,53774,53775,53777,53778,53779,53780,53781,53782,53783,53784,53785,53786,53787,53788,53789,53790,53791,53792,53793,53794,53795,53796,53797,53798,53799,53800,53801,47467,47469,47476,47477,47480,47484,47492,47493,47495,47497,47498,47501,47502,47532,47533,47536,47540,47548,47549,47551,47553,47560,47561,47564,47566,47567,47568,47569,47570,47576,47577,47579,47581,47582,47585,47587,47588,47589,47592,47596,47604,47605,47607,47608,47609,47610,47616,47617,47624,47637,47672,47673,47676,47680,47682,47688,47689,47691,47693,47694,47699,47700,47701,47704,47708,47716,47717,47719,47720,47721,47728,47729,47732,47736,47747,47748,47749,47751,47756,47784,47785,47787,47788,47792,47794,47800,47801,47803,47805,47812,47816,47832,47833,47868,53802,53803,53806,53807,53809,53810,53811,53813,53814,53815,53816,53817,53818,53819,53822,53824,53826,53827,53828,53829,53830,53831,53833,53834,53835,53836,53837,53838,53839,53840,53841,53842,53843,53844,53845,53846,53847,53848,53849,53850,53851,53853,53854,53855,53856,53857,53858,53859,53861,53862,53863,53864,53865,53866,53867,53868,53869,53870,53871,53872,53873,53874,53875,53876,53877,53878,53879,53880,53881,53882,53883,53884,53885,53886,53887,53890,53891,53893,53894,53895,53897,53898,53899,53900,47872,47876,47885,47887,47889,47896,47900,47904,47913,47915,47924,47925,47926,47928,47931,47932,47933,47934,47940,47941,47943,47945,47949,47951,47952,47956,47960,47969,47971,47980,48008,48012,48016,48036,48040,48044,48052,48055,48064,48068,48072,48080,48083,48120,48121,48124,48127,48128,48130,48136,48137,48139,48140,48141,48143,48145,48148,48149,48150,48151,48152,48155,48156,48157,48158,48159,48164,48165,48167,48169,48173,48176,48177,48180,48184,48192,48193,48195,48196,48197,48201,48204,48205,48208,48221,48260,48261,48264,48267,48268,48270,48276,48277,48279,53901,53902,53903,53906,53907,53908,53910,53911,53912,53913,53914,53915,53917,53918,53919,53921,53922,53923,53925,53926,53927,53928,53929,53930,53931,53933,53934,53935,53936,53938,53939,53940,53941,53942,53943,53946,53947,53949,53950,53953,53955,53956,53957,53958,53959,53962,53964,53965,53966,53967,53968,53969,53970,53971,53973,53974,53975,53977,53978,53979,53981,53982,53983,53984,53985,53986,53987,53990,53991,53992,53993,53994,53995,53996,53997,53998,53999,54002,54003,54005,54006,54007,54009,54010,48281,48282,48288,48289,48292,48295,48296,48304,48305,48307,48308,48309,48316,48317,48320,48324,48333,48335,48336,48337,48341,48344,48348,48372,48373,48374,48376,48380,48388,48389,48391,48393,48400,48404,48420,48428,48448,48456,48457,48460,48464,48472,48473,48484,48488,48512,48513,48516,48519,48520,48521,48522,48528,48529,48531,48533,48537,48538,48540,48548,48560,48568,48596,48597,48600,48604,48617,48624,48628,48632,48640,48643,48645,48652,48653,48656,48660,48668,48669,48671,48708,48709,48712,48716,48718,48724,48725,48727,48729,48730,48731,48736,48737,48740,54011,54012,54013,54014,54015,54018,54020,54022,54023,54024,54025,54026,54027,54031,54033,54034,54035,54037,54039,54040,54041,54042,54043,54046,54050,54051,54052,54054,54055,54058,54059,54061,54062,54063,54065,54066,54067,54068,54069,54070,54071,54074,54078,54079,54080,54081,54082,54083,54086,54087,54088,54089,54090,54091,54092,54093,54094,54095,54096,54097,54098,54099,54100,54101,54102,54103,54104,54105,54106,54107,54108,54109,54110,54111,54112,54113,54114,54115,54116,54117,54118,54119,54120,54121,48744,48746,48752,48753,48755,48756,48757,48763,48764,48765,48768,48772,48780,48781,48783,48784,48785,48792,48793,48808,48848,48849,48852,48855,48856,48864,48867,48868,48869,48876,48897,48904,48905,48920,48921,48923,48924,48925,48960,48961,48964,48968,48976,48977,48981,49044,49072,49093,49100,49101,49104,49108,49116,49119,49121,49212,49233,49240,49244,49248,49256,49257,49296,49297,49300,49304,49312,49313,49315,49317,49324,49325,49327,49328,49331,49332,49333,49334,49340,49341,49343,49344,49345,49349,49352,49353,49356,49360,49368,49369,49371,49372,49373,49380,54122,54123,54124,54125,54126,54127,54128,54129,54130,54131,54132,54133,54134,54135,54136,54137,54138,54139,54142,54143,54145,54146,54147,54149,54150,54151,54152,54153,54154,54155,54158,54162,54163,54164,54165,54166,54167,54170,54171,54173,54174,54175,54177,54178,54179,54180,54181,54182,54183,54186,54188,54190,54191,54192,54193,54194,54195,54197,54198,54199,54201,54202,54203,54205,54206,54207,54208,54209,54210,54211,54214,54215,54218,54219,54220,54221,54222,54223,54225,54226,54227,54228,54229,54230,49381,49384,49388,49396,49397,49399,49401,49408,49412,49416,49424,49429,49436,49437,49438,49439,49440,49443,49444,49446,49447,49452,49453,49455,49456,49457,49462,49464,49465,49468,49472,49480,49481,49483,49484,49485,49492,49493,49496,49500,49508,49509,49511,49512,49513,49520,49524,49528,49541,49548,49549,49550,49552,49556,49558,49564,49565,49567,49569,49573,49576,49577,49580,49584,49597,49604,49608,49612,49620,49623,49624,49632,49636,49640,49648,49649,49651,49660,49661,49664,49668,49676,49677,49679,49681,49688,49689,49692,49695,49696,49704,49705,49707,49709,54231,54233,54234,54235,54236,54237,54238,54239,54240,54242,54244,54245,54246,54247,54248,54249,54250,54251,54254,54255,54257,54258,54259,54261,54262,54263,54264,54265,54266,54267,54270,54272,54274,54275,54276,54277,54278,54279,54281,54282,54283,54284,54285,54286,54287,54288,54289,54290,54291,54292,54293,54294,54295,54296,54297,54298,54299,54300,54302,54303,54304,54305,54306,54307,54308,54309,54310,54311,54312,54313,54314,54315,54316,54317,54318,54319,54320,54321,54322,54323,54324,54325,54326,54327,49711,49713,49714,49716,49736,49744,49745,49748,49752,49760,49765,49772,49773,49776,49780,49788,49789,49791,49793,49800,49801,49808,49816,49819,49821,49828,49829,49832,49836,49837,49844,49845,49847,49849,49884,49885,49888,49891,49892,49899,49900,49901,49903,49905,49910,49912,49913,49915,49916,49920,49928,49929,49932,49933,49939,49940,49941,49944,49948,49956,49957,49960,49961,49989,50024,50025,50028,50032,50034,50040,50041,50044,50045,50052,50056,50060,50112,50136,50137,50140,50143,50144,50146,50152,50153,50157,50164,50165,50168,50184,50192,50212,50220,50224,54328,54329,54330,54331,54332,54333,54334,54335,54337,54338,54339,54341,54342,54343,54344,54345,54346,54347,54348,54349,54350,54351,54352,54353,54354,54355,54356,54357,54358,54359,54360,54361,54362,54363,54365,54366,54367,54369,54370,54371,54373,54374,54375,54376,54377,54378,54379,54380,54382,54384,54385,54386,54387,54388,54389,54390,54391,54394,54395,54397,54398,54401,54403,54404,54405,54406,54407,54410,54412,54414,54415,54416,54417,54418,54419,54421,54422,54423,54424,54425,54426,54427,54428,54429,50228,50236,50237,50248,50276,50277,50280,50284,50292,50293,50297,50304,50324,50332,50360,50364,50409,50416,50417,50420,50424,50426,50431,50432,50433,50444,50448,50452,50460,50472,50473,50476,50480,50488,50489,50491,50493,50500,50501,50504,50505,50506,50508,50509,50510,50515,50516,50517,50519,50520,50521,50525,50526,50528,50529,50532,50536,50544,50545,50547,50548,50549,50556,50557,50560,50564,50567,50572,50573,50575,50577,50581,50583,50584,50588,50592,50601,50612,50613,50616,50617,50619,50620,50621,50622,50628,50629,50630,50631,50632,50633,50634,50636,50638,54430,54431,54432,54433,54434,54435,54436,54437,54438,54439,54440,54442,54443,54444,54445,54446,54447,54448,54449,54450,54451,54452,54453,54454,54455,54456,54457,54458,54459,54460,54461,54462,54463,54464,54465,54466,54467,54468,54469,54470,54471,54472,54473,54474,54475,54477,54478,54479,54481,54482,54483,54485,54486,54487,54488,54489,54490,54491,54493,54494,54496,54497,54498,54499,54500,54501,54502,54503,54505,54506,54507,54509,54510,54511,54513,54514,54515,54516,54517,54518,54519,54521,54522,54524,50640,50641,50644,50648,50656,50657,50659,50661,50668,50669,50670,50672,50676,50678,50679,50684,50685,50686,50687,50688,50689,50693,50694,50695,50696,50700,50704,50712,50713,50715,50716,50724,50725,50728,50732,50733,50734,50736,50739,50740,50741,50743,50745,50747,50752,50753,50756,50760,50768,50769,50771,50772,50773,50780,50781,50784,50796,50799,50801,50808,50809,50812,50816,50824,50825,50827,50829,50836,50837,50840,50844,50852,50853,50855,50857,50864,50865,50868,50872,50873,50874,50880,50881,50883,50885,50892,50893,50896,50900,50908,50909,50912,50913,50920,54526,54527,54528,54529,54530,54531,54533,54534,54535,54537,54538,54539,54541,54542,54543,54544,54545,54546,54547,54550,54552,54553,54554,54555,54556,54557,54558,54559,54560,54561,54562,54563,54564,54565,54566,54567,54568,54569,54570,54571,54572,54573,54574,54575,54576,54577,54578,54579,54580,54581,54582,54583,54584,54585,54586,54587,54590,54591,54593,54594,54595,54597,54598,54599,54600,54601,54602,54603,54606,54608,54610,54611,54612,54613,54614,54615,54618,54619,54621,54622,54623,54625,54626,54627,50921,50924,50928,50936,50937,50941,50948,50949,50952,50956,50964,50965,50967,50969,50976,50977,50980,50984,50992,50993,50995,50997,50999,51004,51005,51008,51012,51018,51020,51021,51023,51025,51026,51027,51028,51029,51030,51031,51032,51036,51040,51048,51051,51060,51061,51064,51068,51069,51070,51075,51076,51077,51079,51080,51081,51082,51086,51088,51089,51092,51094,51095,51096,51098,51104,51105,51107,51108,51109,51110,51116,51117,51120,51124,51132,51133,51135,51136,51137,51144,51145,51148,51150,51152,51160,51165,51172,51176,51180,51200,51201,51204,51208,51210,54628,54630,54631,54634,54636,54638,54639,54640,54641,54642,54643,54646,54647,54649,54650,54651,54653,54654,54655,54656,54657,54658,54659,54662,54666,54667,54668,54669,54670,54671,54673,54674,54675,54676,54677,54678,54679,54680,54681,54682,54683,54684,54685,54686,54687,54688,54689,54690,54691,54692,54694,54695,54696,54697,54698,54699,54700,54701,54702,54703,54704,54705,54706,54707,54708,54709,54710,54711,54712,54713,54714,54715,54716,54717,54718,54719,54720,54721,54722,54723,54724,54725,54726,54727,51216,51217,51219,51221,51222,51228,51229,51232,51236,51244,51245,51247,51249,51256,51260,51264,51272,51273,51276,51277,51284,51312,51313,51316,51320,51322,51328,51329,51331,51333,51334,51335,51339,51340,51341,51348,51357,51359,51361,51368,51388,51389,51396,51400,51404,51412,51413,51415,51417,51424,51425,51428,51445,51452,51453,51456,51460,51461,51462,51468,51469,51471,51473,51480,51500,51508,51536,51537,51540,51544,51552,51553,51555,51564,51568,51572,51580,51592,51593,51596,51600,51608,51609,51611,51613,51648,51649,51652,51655,51656,51658,51664,51665,51667,54730,54731,54733,54734,54735,54737,54739,54740,54741,54742,54743,54746,54748,54750,54751,54752,54753,54754,54755,54758,54759,54761,54762,54763,54765,54766,54767,54768,54769,54770,54771,54774,54776,54778,54779,54780,54781,54782,54783,54786,54787,54789,54790,54791,54793,54794,54795,54796,54797,54798,54799,54802,54806,54807,54808,54809,54810,54811,54813,54814,54815,54817,54818,54819,54821,54822,54823,54824,54825,54826,54827,54828,54830,54831,54832,54833,54834,54835,54836,54837,54838,54839,54842,54843,51669,51670,51673,51674,51676,51677,51680,51682,51684,51687,51692,51693,51695,51696,51697,51704,51705,51708,51712,51720,51721,51723,51724,51725,51732,51736,51753,51788,51789,51792,51796,51804,51805,51807,51808,51809,51816,51837,51844,51864,51900,51901,51904,51908,51916,51917,51919,51921,51923,51928,51929,51936,51948,51956,51976,51984,51988,51992,52000,52001,52033,52040,52041,52044,52048,52056,52057,52061,52068,52088,52089,52124,52152,52180,52196,52199,52201,52236,52237,52240,52244,52252,52253,52257,52258,52263,52264,52265,52268,52270,52272,52280,52281,52283,54845,54846,54847,54849,54850,54851,54852,54854,54855,54858,54860,54862,54863,54864,54866,54867,54870,54871,54873,54874,54875,54877,54878,54879,54880,54881,54882,54883,54884,54885,54886,54888,54890,54891,54892,54893,54894,54895,54898,54899,54901,54902,54903,54904,54905,54906,54907,54908,54909,54910,54911,54912,54913,54914,54916,54918,54919,54920,54921,54922,54923,54926,54927,54929,54930,54931,54933,54934,54935,54936,54937,54938,54939,54940,54942,54944,54946,54947,54948,54949,54950,54951,54953,54954,52284,52285,52286,52292,52293,52296,52300,52308,52309,52311,52312,52313,52320,52324,52326,52328,52336,52341,52376,52377,52380,52384,52392,52393,52395,52396,52397,52404,52405,52408,52412,52420,52421,52423,52425,52432,52436,52452,52460,52464,52481,52488,52489,52492,52496,52504,52505,52507,52509,52516,52520,52524,52537,52572,52576,52580,52588,52589,52591,52593,52600,52616,52628,52629,52632,52636,52644,52645,52647,52649,52656,52676,52684,52688,52712,52716,52720,52728,52729,52731,52733,52740,52744,52748,52756,52761,52768,52769,52772,52776,52784,52785,52787,52789,54955,54957,54958,54959,54961,54962,54963,54964,54965,54966,54967,54968,54970,54972,54973,54974,54975,54976,54977,54978,54979,54982,54983,54985,54986,54987,54989,54990,54991,54992,54994,54995,54997,54998,55000,55002,55003,55004,55005,55006,55007,55009,55010,55011,55013,55014,55015,55017,55018,55019,55020,55021,55022,55023,55025,55026,55027,55028,55030,55031,55032,55033,55034,55035,55038,55039,55041,55042,55043,55045,55046,55047,55048,55049,55050,55051,55052,55053,55054,55055,55056,55058,55059,55060,52824,52825,52828,52831,52832,52833,52840,52841,52843,52845,52852,52853,52856,52860,52868,52869,52871,52873,52880,52881,52884,52888,52896,52897,52899,52900,52901,52908,52909,52929,52964,52965,52968,52971,52972,52980,52981,52983,52984,52985,52992,52993,52996,53000,53008,53009,53011,53013,53020,53024,53028,53036,53037,53039,53040,53041,53048,53076,53077,53080,53084,53092,53093,53095,53097,53104,53105,53108,53112,53120,53125,53132,53153,53160,53168,53188,53216,53217,53220,53224,53232,53233,53235,53237,53244,53248,53252,53265,53272,53293,53300,53301,53304,53308,55061,55062,55063,55066,55067,55069,55070,55071,55073,55074,55075,55076,55077,55078,55079,55082,55084,55086,55087,55088,55089,55090,55091,55094,55095,55097,55098,55099,55101,55102,55103,55104,55105,55106,55107,55109,55110,55112,55114,55115,55116,55117,55118,55119,55122,55123,55125,55130,55131,55132,55133,55134,55135,55138,55140,55142,55143,55144,55146,55147,55149,55150,55151,55153,55154,55155,55157,55158,55159,55160,55161,55162,55163,55166,55167,55168,55170,55171,55172,55173,55174,55175,55178,55179,53316,53317,53319,53321,53328,53332,53336,53344,53356,53357,53360,53364,53372,53373,53377,53412,53413,53416,53420,53428,53429,53431,53433,53440,53441,53444,53448,53449,53456,53457,53459,53460,53461,53468,53469,53472,53476,53484,53485,53487,53488,53489,53496,53517,53552,53553,53556,53560,53562,53568,53569,53571,53572,53573,53580,53581,53584,53588,53596,53597,53599,53601,53608,53612,53628,53636,53640,53664,53665,53668,53672,53680,53681,53683,53685,53690,53692,53696,53720,53748,53752,53767,53769,53776,53804,53805,53808,53812,53820,53821,53823,53825,53832,53852,55181,55182,55183,55185,55186,55187,55188,55189,55190,55191,55194,55196,55198,55199,55200,55201,55202,55203,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,53860,53888,53889,53892,53896,53904,53905,53909,53916,53920,53924,53932,53937,53944,53945,53948,53951,53952,53954,53960,53961,53963,53972,53976,53980,53988,53989,54000,54001,54004,54008,54016,54017,54019,54021,54028,54029,54030,54032,54036,54038,54044,54045,54047,54048,54049,54053,54056,54057,54060,54064,54072,54073,54075,54076,54077,54084,54085,54140,54141,54144,54148,54156,54157,54159,54160,54161,54168,54169,54172,54176,54184,54185,54187,54189,54196,54200,54204,54212,54213,54216,54217,54224,54232,54241,54243,54252,54253,54256,54260,54268,54269,54271,54273,54280,54301,54336,54340,54364,54368,54372,54381,54383,54392,54393,54396,54399,54400,54402,54408,54409,54411,54413,54420,54441,54476,54480,54484,54492,54495,54504,54508,54512,54520,54523,54525,54532,54536,54540,54548,54549,54551,54588,54589,54592,54596,54604,54605,54607,54609,54616,54617,54620,54624,54629,54632,54633,54635,54637,54644,54645,54648,54652,54660,54661,54663,54664,54665,54672,54693,54728,54729,54732,54736,54738,54744,54745,54747,54749,54756,54757,54760,54764,54772,54773,54775,54777,54784,54785,54788,54792,54800,54801,54803,54804,54805,54812,54816,54820,54829,54840,54841,54844,54848,54853,54856,54857,54859,54861,54865,54868,54869,54872,54876,54887,54889,54896,54897,54900,54915,54917,54924,54925,54928,54932,54941,54943,54945,54952,54956,54960,54969,54971,54980,54981,54984,54988,54993,54996,54999,55001,55008,55012,55016,55024,55029,55036,55037,55040,55044,55057,55064,55065,55068,55072,55080,55081,55083,55085,55092,55093,55096,55100,55108,55111,55113,55120,55121,55124,55126,55127,55128,55129,55136,55137,55139,55141,55145,55148,55152,55156,55164,55165,55169,55176,55177,55180,55184,55192,55193,55195,55197,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,20285,20339,20551,20729,21152,21487,21621,21733,22025,23233,23478,26247,26550,26551,26607,27468,29634,30146,31292,33499,33540,34903,34952,35382,36040,36303,36603,36838,39381,21051,21364,21508,24682,24932,27580,29647,33050,35258,35282,38307,20355,21002,22718,22904,23014,24178,24185,25031,25536,26438,26604,26751,28567,30286,30475,30965,31240,31487,31777,32925,33390,33393,35563,38291,20075,21917,26359,28212,30883,31469,33883,35088,34638,38824,21208,22350,22570,23884,24863,25022,25121,25954,26577,27204,28187,29976,30131,30435,30640,32058,37039,37969,37970,40853,21283,23724,30002,32987,37440,38296,21083,22536,23004,23713,23831,24247,24378,24394,24951,27743,30074,30086,31968,32115,32177,32652,33108,33313,34193,35137,35611,37628,38477,40007,20171,20215,20491,20977,22607,24887,24894,24936,25913,27114,28433,30117,30342,30422,31623,33445,33995,63744,37799,38283,21888,23458,22353,63745,31923,32697,37301,20520,21435,23621,24040,25298,25454,25818,25831,28192,28844,31067,36317,36382,63746,36989,37445,37624,20094,20214,20581,24062,24314,24838,26967,33137,34388,36423,37749,39467,20062,20625,26480,26688,20745,21133,21138,27298,30652,37392,40660,21163,24623,36850,20552,25001,25581,25802,26684,27268,28608,33160,35233,38548,22533,29309,29356,29956,32121,32365,32937,35211,35700,36963,40273,25225,27770,28500,32080,32570,35363,20860,24906,31645,35609,37463,37772,20140,20435,20510,20670,20742,21185,21197,21375,22384,22659,24218,24465,24950,25004,25806,25964,26223,26299,26356,26775,28039,28805,28913,29855,29861,29898,30169,30828,30956,31455,31478,32069,32147,32789,32831,33051,33686,35686,36629,36885,37857,38915,38968,39514,39912,20418,21843,22586,22865,23395,23622,24760,25106,26690,26800,26856,28330,30028,30328,30926,31293,31995,32363,32380,35336,35489,35903,38542,40388,21476,21481,21578,21617,22266,22993,23396,23611,24235,25335,25911,25925,25970,26272,26543,27073,27837,30204,30352,30590,31295,32660,32771,32929,33167,33510,33533,33776,34241,34865,34996,35493,63747,36764,37678,38599,39015,39640,40723,21741,26011,26354,26767,31296,35895,40288,22256,22372,23825,26118,26801,26829,28414,29736,34974,39908,27752,63748,39592,20379,20844,20849,21151,23380,24037,24656,24685,25329,25511,25915,29657,31354,34467,36002,38799,20018,23521,25096,26524,29916,31185,33747,35463,35506,36328,36942,37707,38982,24275,27112,34303,37101,63749,20896,23448,23532,24931,26874,27454,28748,29743,29912,31649,32592,33733,35264,36011,38364,39208,21038,24669,25324,36866,20362,20809,21281,22745,24291,26336,27960,28826,29378,29654,31568,33009,37979,21350,25499,32619,20054,20608,22602,22750,24618,24871,25296,27088,39745,23439,32024,32945,36703,20132,20689,21676,21932,23308,23968,24039,25898,25934,26657,27211,29409,30350,30703,32094,32761,33184,34126,34527,36611,36686,37066,39171,39509,39851,19992,20037,20061,20167,20465,20855,21246,21312,21475,21477,21646,22036,22389,22434,23495,23943,24272,25084,25304,25937,26552,26601,27083,27472,27590,27628,27714,28317,28792,29399,29590,29699,30655,30697,31350,32127,32777,33276,33285,33290,33503,34914,35635,36092,36544,36881,37041,37476,37558,39378,39493,40169,40407,40860,22283,23616,33738,38816,38827,40628,21531,31384,32676,35033,36557,37089,22528,23624,25496,31391,23470,24339,31353,31406,33422,36524,20518,21048,21240,21367,22280,25331,25458,27402,28099,30519,21413,29527,34152,36470,38357,26426,27331,28528,35437,36556,39243,63750,26231,27512,36020,39740,63751,21483,22317,22862,25542,27131,29674,30789,31418,31429,31998,33909,35215,36211,36917,38312,21243,22343,30023,31584,33740,37406,63752,27224,20811,21067,21127,25119,26840,26997,38553,20677,21156,21220,25027,26020,26681,27135,29822,31563,33465,33771,35250,35641,36817,39241,63753,20170,22935,25810,26129,27278,29748,31105,31165,33449,34942,34943,35167,63754,37670,20235,21450,24613,25201,27762,32026,32102,20120,20834,30684,32943,20225,20238,20854,20864,21980,22120,22331,22522,22524,22804,22855,22931,23492,23696,23822,24049,24190,24524,25216,26071,26083,26398,26399,26462,26827,26820,27231,27450,27683,27773,27778,28103,29592,29734,29738,29826,29859,30072,30079,30849,30959,31041,31047,31048,31098,31637,32000,32186,32648,32774,32813,32908,35352,35663,35912,36215,37665,37668,39138,39249,39438,39439,39525,40594,32202,20342,21513,25326,26708,37329,21931,20794,63755,63756,23068,25062,63757,25295,25343,63758,63759,63760,63761,63762,63763,37027,63764,63765,63766,63767,63768,35582,63769,63770,63771,63772,26262,63773,29014,63774,63775,38627,63776,25423,25466,21335,63777,26511,26976,28275,63778,30007,63779,63780,63781,32013,63782,63783,34930,22218,23064,63784,63785,63786,63787,63788,20035,63789,20839,22856,26608,32784,63790,22899,24180,25754,31178,24565,24684,25288,25467,23527,23511,21162,63791,22900,24361,24594,63792,63793,63794,29785,63795,63796,63797,63798,63799,63800,39377,63801,63802,63803,63804,63805,63806,63807,63808,63809,63810,63811,28611,63812,63813,33215,36786,24817,63814,63815,33126,63816,63817,23615,63818,63819,63820,63821,63822,63823,63824,63825,23273,35365,26491,32016,63826,63827,63828,63829,63830,63831,33021,63832,63833,23612,27877,21311,28346,22810,33590,20025,20150,20294,21934,22296,22727,24406,26039,26086,27264,27573,28237,30701,31471,31774,32222,34507,34962,37170,37723,25787,28606,29562,30136,36948,21846,22349,25018,25812,26311,28129,28251,28525,28601,30192,32835,33213,34113,35203,35527,35674,37663,27795,30035,31572,36367,36957,21776,22530,22616,24162,25095,25758,26848,30070,31958,34739,40680,20195,22408,22382,22823,23565,23729,24118,24453,25140,25825,29619,33274,34955,36024,38538,40667,23429,24503,24755,20498,20992,21040,22294,22581,22615,23566,23648,23798,23947,24230,24466,24764,25361,25481,25623,26691,26873,27330,28120,28193,28372,28644,29182,30428,30585,31153,31291,33796,35241,36077,36339,36424,36867,36884,36947,37117,37709,38518,38876,27602,28678,29272,29346,29544,30563,31167,31716,32411,35712,22697,24775,25958,26109,26302,27788,28958,29129,35930,38931,20077,31361,20189,20908,20941,21205,21516,24999,26481,26704,26847,27934,28540,30140,30643,31461,33012,33891,37509,20828,26007,26460,26515,30168,31431,33651,63834,35910,36887,38957,23663,33216,33434,36929,36975,37389,24471,23965,27225,29128,30331,31561,34276,35588,37159,39472,21895,25078,63835,30313,32645,34367,34746,35064,37007,63836,27931,28889,29662,32097,33853,63837,37226,39409,63838,20098,21365,27396,27410,28734,29211,34349,40478,21068,36771,23888,25829,25900,27414,28651,31811,32412,34253,35172,35261,25289,33240,34847,24266,26391,28010,29436,29701,29807,34690,37086,20358,23821,24480,33802,20919,25504,30053,20142,20486,20841,20937,26753,27153,31918,31921,31975,33391,35538,36635,37327,20406,20791,21237,21570,24300,24942,25150,26053,27354,28670,31018,34268,34851,38317,39522,39530,40599,40654,21147,26310,27511,28701,31019,36706,38722,24976,25088,25891,28451,29001,29833,32244,32879,34030,36646,36899,37706,20925,21015,21155,27916,28872,35010,24265,25986,27566,28610,31806,29557,20196,20278,22265,63839,23738,23994,24604,29618,31533,32666,32718,32838,36894,37428,38646,38728,38936,40801,20363,28583,31150,37300,38583,21214,63840,25736,25796,27347,28510,28696,29200,30439,32769,34310,34396,36335,36613,38706,39791,40442,40565,30860,31103,32160,33737,37636,40575,40595,35542,22751,24324,26407,28711,29903,31840,32894,20769,28712,29282,30922,36034,36058,36084,38647,20102,20698,23534,24278,26009,29134,30274,30637,32842,34044,36988,39719,40845,22744,23105,23650,27155,28122,28431,30267,32047,32311,34078,35128,37860,38475,21129,26066,26611,27060,27969,28316,28687,29705,29792,30041,30244,30827,35628,39006,20845,25134,38520,20374,20523,23833,28138,32184,36650,24459,24900,26647,63841,38534,21202,32907,20956,20940,26974,31260,32190,33777,38517,20442,21033,21400,21519,21774,23653,24743,26446,26792,28012,29313,29432,29702,29827,63842,30178,31852,32633,32696,33673,35023,35041,37324,37328,38626,39881,21533,28542,29136,29848,34298,36522,38563,40023,40607,26519,28107,29747,33256,38678,30764,31435,31520,31890,25705,29802,30194,30908,30952,39340,39764,40635,23518,24149,28448,33180,33707,37000,19975,21325,23081,24018,24398,24930,25405,26217,26364,28415,28459,28771,30622,33836,34067,34875,36627,39237,39995,21788,25273,26411,27819,33545,35178,38778,20129,22916,24536,24537,26395,32178,32596,33426,33579,33725,36638,37017,22475,22969,23186,23504,26151,26522,26757,27599,29028,32629,36023,36067,36993,39749,33032,35978,38476,39488,40613,23391,27667,29467,30450,30431,33804,20906,35219,20813,20885,21193,26825,27796,30468,30496,32191,32236,38754,40629,28357,34065,20901,21517,21629,26126,26269,26919,28319,30399,30609,33559,33986,34719,37225,37528,40180,34946,20398,20882,21215,22982,24125,24917,25720,25721,26286,26576,27169,27597,27611,29279,29281,29761,30520,30683,32791,33468,33541,35584,35624,35980,26408,27792,29287,30446,30566,31302,40361,27519,27794,22818,26406,33945,21359,22675,22937,24287,25551,26164,26483,28218,29483,31447,33495,37672,21209,24043,25006,25035,25098,25287,25771,26080,26969,27494,27595,28961,29687,30045,32326,33310,33538,34154,35491,36031,38695,40289,22696,40664,20497,21006,21563,21839,25991,27766,32010,32011,32862,34442,38272,38639,21247,27797,29289,21619,23194,23614,23883,24396,24494,26410,26806,26979,28220,28228,30473,31859,32654,34183,35598,36855,38753,40692,23735,24758,24845,25003,25935,26107,26108,27665,27887,29599,29641,32225,38292,23494,34588,35600,21085,21338,25293,25615,25778,26420,27192,27850,29632,29854,31636,31893,32283,33162,33334,34180,36843,38649,39361,20276,21322,21453,21467,25292,25644,25856,26001,27075,27886,28504,29677,30036,30242,30436,30460,30928,30971,31020,32070,33324,34784,36820,38930,39151,21187,25300,25765,28196,28497,30332,36299,37297,37474,39662,39747,20515,20621,22346,22952,23592,24135,24439,25151,25918,26041,26049,26121,26507,27036,28354,30917,32033,32938,33152,33323,33459,33953,34444,35370,35607,37030,38450,40848,20493,20467,63843,22521,24472,25308,25490,26479,28227,28953,30403,32972,32986,35060,35061,35097,36064,36649,37197,38506,20271,20336,24091,26575,26658,30333,30334,39748,24161,27146,29033,29140,30058,63844,32321,34115,34281,39132,20240,31567,32624,38309,20961,24070,26805,27710,27726,27867,29359,31684,33539,27861,29754,20731,21128,22721,25816,27287,29863,30294,30887,34327,38370,38713,63845,21342,24321,35722,36776,36783,37002,21029,30629,40009,40712,19993,20482,20853,23643,24183,26142,26170,26564,26821,28851,29953,30149,31177,31453,36647,39200,39432,20445,22561,22577,23542,26222,27493,27921,28282,28541,29668,29995,33769,35036,35091,35676,36628,20239,20693,21264,21340,23443,24489,26381,31119,33145,33583,34068,35079,35206,36665,36667,39333,39954,26412,20086,20472,22857,23553,23791,23792,25447,26834,28925,29090,29739,32299,34028,34562,36898,37586,40179,19981,20184,20463,20613,21078,21103,21542,21648,22496,22827,23142,23386,23413,23500,24220,63846,25206,25975,26023,28014,28325,29238,31526,31807,32566,33104,33105,33178,33344,33433,33705,35331,36000,36070,36091,36212,36282,37096,37340,38428,38468,39385,40167,21271,20998,21545,22132,22707,22868,22894,24575,24996,25198,26128,27774,28954,30406,31881,31966,32027,33452,36033,38640,63847,20315,24343,24447,25282,23849,26379,26842,30844,32323,40300,19989,20633,21269,21290,21329,22915,23138,24199,24754,24970,25161,25209,26000,26503,27047,27604,27606,27607,27608,27832,63848,29749,30202,30738,30865,31189,31192,31875,32203,32737,32933,33086,33218,33778,34586,35048,35513,35692,36027,37145,38750,39131,40763,22188,23338,24428,25996,27315,27567,27996,28657,28693,29277,29613,36007,36051,38971,24977,27703,32856,39425,20045,20107,20123,20181,20282,20284,20351,20447,20735,21490,21496,21766,21987,22235,22763,22882,23057,23531,23546,23556,24051,24107,24473,24605,25448,26012,26031,26614,26619,26797,27515,27801,27863,28195,28681,29509,30722,31038,31040,31072,31169,31721,32023,32114,32902,33293,33678,34001,34503,35039,35408,35422,35613,36060,36198,36781,37034,39164,39391,40605,21066,63849,26388,63850,20632,21034,23665,25955,27733,29642,29987,30109,31639,33948,37240,38704,20087,25746,27578,29022,34217,19977,63851,26441,26862,28183,33439,34072,34923,25591,28545,37394,39087,19978,20663,20687,20767,21830,21930,22039,23360,23577,23776,24120,24202,24224,24258,24819,26705,27233,28248,29245,29248,29376,30456,31077,31665,32724,35059,35316,35443,35937,36062,38684,22622,29885,36093,21959,63852,31329,32034,33394,29298,29983,29989,63853,31513,22661,22779,23996,24207,24246,24464,24661,25234,25471,25933,26257,26329,26360,26646,26866,29312,29790,31598,32110,32214,32626,32997,33298,34223,35199,35475,36893,37604,40653,40736,22805,22893,24109,24796,26132,26227,26512,27728,28101,28511,30707,30889,33990,37323,37675,20185,20682,20808,21892,23307,23459,25159,25982,26059,28210,29053,29697,29764,29831,29887,30316,31146,32218,32341,32680,33146,33203,33337,34330,34796,35445,36323,36984,37521,37925,39245,39854,21352,23633,26964,27844,27945,28203,33292,34203,35131,35373,35498,38634,40807,21089,26297,27570,32406,34814,36109,38275,38493,25885,28041,29166,63854,22478,22995,23468,24615,24826,25104,26143,26207,29481,29689,30427,30465,31596,32854,32882,33125,35488,37266,19990,21218,27506,27927,31237,31545,32048,63855,36016,21484,22063,22609,23477,23567,23569,24034,25152,25475,25620,26157,26803,27836,28040,28335,28703,28836,29138,29990,30095,30094,30233,31505,31712,31787,32032,32057,34092,34157,34311,35380,36877,36961,37045,37559,38902,39479,20439,23660,26463,28049,31903,32396,35606,36118,36895,23403,24061,25613,33984,36956,39137,29575,23435,24730,26494,28126,35359,35494,36865,38924,21047,63856,28753,30862,37782,34928,37335,20462,21463,22013,22234,22402,22781,23234,23432,23723,23744,24101,24833,25101,25163,25480,25628,25910,25976,27193,27530,27700,27929,28465,29159,29417,29560,29703,29874,30246,30561,31168,31319,31466,31929,32143,32172,32353,32670,33065,33585,33936,34010,34282,34966,35504,35728,36664,36930,36995,37228,37526,37561,38539,38567,38568,38614,38656,38920,39318,39635,39706,21460,22654,22809,23408,23487,28113,28506,29087,29729,29881,32901,33789,24033,24455,24490,24642,26092,26642,26991,27219,27529,27957,28147,29667,30462,30636,31565,32020,33059,33308,33600,34036,34147,35426,35524,37255,37662,38918,39348,25100,34899,36848,37477,23815,23847,23913,29791,33181,34664,28629,25342,32722,35126,35186,19998,20056,20711,21213,21319,25215,26119,32361,34821,38494,20365,21273,22070,22987,23204,23608,23630,23629,24066,24337,24643,26045,26159,26178,26558,26612,29468,30690,31034,32709,33940,33997,35222,35430,35433,35553,35925,35962,22516,23508,24335,24687,25325,26893,27542,28252,29060,31698,34645,35672,36606,39135,39166,20280,20353,20449,21627,23072,23480,24892,26032,26216,29180,30003,31070,32051,33102,33251,33688,34218,34254,34563,35338,36523,36763,63857,36805,22833,23460,23526,24713,23529,23563,24515,27777,63858,28145,28683,29978,33455,35574,20160,21313,63859,38617,27663,20126,20420,20818,21854,23077,23784,25105,29273,33469,33706,34558,34905,35357,38463,38597,39187,40201,40285,22538,23731,23997,24132,24801,24853,25569,27138,28197,37122,37716,38990,39952,40823,23433,23736,25353,26191,26696,30524,38593,38797,38996,39839,26017,35585,36555,38332,21813,23721,24022,24245,26263,30284,33780,38343,22739,25276,29390,40232,20208,22830,24591,26171,27523,31207,40230,21395,21696,22467,23830,24859,26326,28079,30861,33406,38552,38724,21380,25212,25494,28082,32266,33099,38989,27387,32588,40367,40474,20063,20539,20918,22812,24825,25590,26928,29242,32822,63860,37326,24369,63861,63862,32004,33509,33903,33979,34277,36493,63863,20335,63864,63865,22756,23363,24665,25562,25880,25965,26264,63866,26954,27171,27915,28673,29036,30162,30221,31155,31344,63867,32650,63868,35140,63869,35731,37312,38525,63870,39178,22276,24481,26044,28417,30208,31142,35486,39341,39770,40812,20740,25014,25233,27277,33222,20547,22576,24422,28937,35328,35578,23420,34326,20474,20796,22196,22852,25513,28153,23978,26989,20870,20104,20313,63871,63872,63873,22914,63874,63875,27487,27741,63876,29877,30998,63877,33287,33349,33593,36671,36701,63878,39192,63879,63880,63881,20134,63882,22495,24441,26131,63883,63884,30123,32377,35695,63885,36870,39515,22181,22567,23032,23071,23476,63886,24310,63887,63888,25424,25403,63889,26941,27783,27839,28046,28051,28149,28436,63890,28895,28982,29017,63891,29123,29141,63892,30799,30831,63893,31605,32227,63894,32303,63895,34893,36575,63896,63897,63898,37467,63899,40182,63900,63901,63902,24709,28037,63903,29105,63904,63905,38321,21421,63906,63907,63908,26579,63909,28814,28976,29744,33398,33490,63910,38331,39653,40573,26308,63911,29121,33865,63912,63913,22603,63914,63915,23992,24433,63916,26144,26254,27001,27054,27704,27891,28214,28481,28634,28699,28719,29008,29151,29552,63917,29787,63918,29908,30408,31310,32403,63919,63920,33521,35424,36814,63921,37704,63922,38681,63923,63924,20034,20522,63925,21000,21473,26355,27757,28618,29450,30591,31330,33454,34269,34306,63926,35028,35427,35709,35947,63927,37555,63928,38675,38928,20116,20237,20425,20658,21320,21566,21555,21978,22626,22714,22887,23067,23524,24735,63929,25034,25942,26111,26212,26791,27738,28595,28879,29100,29522,31613,34568,35492,39986,40711,23627,27779,29508,29577,37434,28331,29797,30239,31337,32277,34314,20800,22725,25793,29934,29973,30320,32705,37013,38605,39252,28198,29926,31401,31402,33253,34521,34680,35355,23113,23436,23451,26785,26880,28003,29609,29715,29740,30871,32233,32747,33048,33109,33694,35916,38446,38929,26352,24448,26106,26505,27754,29579,20525,23043,27498,30702,22806,23916,24013,29477,30031,63930,63931,20709,20985,22575,22829,22934,23002,23525,63932,63933,23970,25303,25622,25747,25854,63934,26332,63935,27208,63936,29183,29796,63937,31368,31407,32327,32350,32768,33136,63938,34799,35201,35616,36953,63939,36992,39250,24958,27442,28020,32287,35109,36785,20433,20653,20887,21191,22471,22665,23481,24248,24898,27029,28044,28263,28342,29076,29794,29992,29996,32883,33592,33993,36362,37780,37854,63940,20110,20305,20598,20778,21448,21451,21491,23431,23507,23588,24858,24962,26100,29275,29591,29760,30402,31056,31121,31161,32006,32701,33419,34261,34398,36802,36935,37109,37354,38533,38632,38633,21206,24423,26093,26161,26671,29020,31286,37057,38922,20113,63941,27218,27550,28560,29065,32792,33464,34131,36939,38549,38642,38907,34074,39729,20112,29066,38596,20803,21407,21729,22291,22290,22435,23195,23236,23491,24616,24895,25588,27781,27961,28274,28304,29232,29503,29783,33489,34945,36677,36960,63942,38498,39000,40219,26376,36234,37470,20301,20553,20702,21361,22285,22996,23041,23561,24944,26256,28205,29234,29771,32239,32963,33806,33894,34111,34655,34907,35096,35586,36949,38859,39759,20083,20369,20754,20842,63943,21807,21929,23418,23461,24188,24189,24254,24736,24799,24840,24841,25540,25912,26377,63944,26580,26586,63945,26977,26978,27833,27943,63946,28216,63947,28641,29494,29495,63948,29788,30001,63949,30290,63950,63951,32173,33278,33848,35029,35480,35547,35565,36400,36418,36938,36926,36986,37193,37321,37742,63952,63953,22537,63954,27603,32905,32946,63955,63956,20801,22891,23609,63957,63958,28516,29607,32996,36103,63959,37399,38287,63960,63961,63962,63963,32895,25102,28700,32104,34701,63964,22432,24681,24903,27575,35518,37504,38577,20057,21535,28139,34093,38512,38899,39150,25558,27875,37009,20957,25033,33210,40441,20381,20506,20736,23452,24847,25087,25836,26885,27589,30097,30691,32681,33380,34191,34811,34915,35516,35696,37291,20108,20197,20234,63965,63966,22839,23016,63967,24050,24347,24411,24609,63968,63969,63970,63971,29246,29669,63972,30064,30157,63973,31227,63974,32780,32819,32900,33505,33617,63975,63976,36029,36019,36999,63977,63978,39156,39180,63979,63980,28727,30410,32714,32716,32764,35610,20154,20161,20995,21360,63981,21693,22240,23035,23493,24341,24525,28270,63982,63983,32106,33589,63984,34451,35469,63985,38765,38775,63986,63987,19968,20314,20350,22777,26085,28322,36920,37808,39353,20219,22764,22922,23001,24641,63988,63989,31252,63990,33615,36035,20837,21316,63991,63992,63993,20173,21097,23381,33471,20180,21050,21672,22985,23039,23376,23383,23388,24675,24904,28363,28825,29038,29574,29943,30133,30913,32043,32773,33258,33576,34071,34249,35566,36039,38604,20316,21242,22204,26027,26152,28796,28856,29237,32189,33421,37196,38592,40306,23409,26855,27544,28538,30430,23697,26283,28507,31668,31786,34870,38620,19976,20183,21280,22580,22715,22767,22892,23559,24115,24196,24373,25484,26290,26454,27167,27299,27404,28479,29254,63994,29520,29835,31456,31911,33144,33247,33255,33674,33900,34083,34196,34255,35037,36115,37292,38263,38556,20877,21705,22312,23472,25165,26448,26685,26771,28221,28371,28797,32289,35009,36001,36617,40779,40782,29229,31631,35533,37658,20295,20302,20786,21632,22992,24213,25269,26485,26990,27159,27822,28186,29401,29482,30141,31672,32053,33511,33785,33879,34295,35419,36015,36487,36889,37048,38606,40799,21219,21514,23265,23490,25688,25973,28404,29380,63995,30340,31309,31515,31821,32318,32735,33659,35627,36042,36196,36321,36447,36842,36857,36969,37841,20291,20346,20659,20840,20856,21069,21098,22625,22652,22880,23560,23637,24283,24731,25136,26643,27583,27656,28593,29006,29728,30000,30008,30033,30322,31564,31627,31661,31686,32399,35438,36670,36681,37439,37523,37666,37931,38651,39002,39019,39198,20999,25130,25240,27993,30308,31434,31680,32118,21344,23742,24215,28472,28857,31896,38673,39822,40670,25509,25722,34678,19969,20117,20141,20572,20597,21576,22979,23450,24128,24237,24311,24449,24773,25402,25919,25972,26060,26230,26232,26622,26984,27273,27491,27712,28096,28136,28191,28254,28702,28833,29582,29693,30010,30555,30855,31118,31243,31357,31934,32142,33351,35330,35562,35998,37165,37194,37336,37478,37580,37664,38662,38742,38748,38914,40718,21046,21137,21884,22564,24093,24351,24716,25552,26799,28639,31085,31532,33229,34234,35069,35576,36420,37261,38500,38555,38717,38988,40778,20430,20806,20939,21161,22066,24340,24427,25514,25805,26089,26177,26362,26361,26397,26781,26839,27133,28437,28526,29031,29157,29226,29866,30522,31062,31066,31199,31264,31381,31895,31967,32068,32368,32903,34299,34468,35412,35519,36249,36481,36896,36973,37347,38459,38613,40165,26063,31751,36275,37827,23384,23562,21330,25305,29469,20519,23447,24478,24752,24939,26837,28121,29742,31278,32066,32156,32305,33131,36394,36405,37758,37912,20304,22352,24038,24231,25387,32618,20027,20303,20367,20570,23005,32964,21610,21608,22014,22863,23449,24030,24282,26205,26417,26609,26666,27880,27954,28234,28557,28855,29664,30087,31820,32002,32044,32162,33311,34523,35387,35461,36208,36490,36659,36913,37198,37202,37956,39376,31481,31909,20426,20737,20934,22472,23535,23803,26201,27197,27994,28310,28652,28940,30063,31459,34850,36897,36981,38603,39423,33537,20013,20210,34886,37325,21373,27355,26987,27713,33914,22686,24974,26366,25327,28893,29969,30151,32338,33976,35657,36104,20043,21482,21675,22320,22336,24535,25345,25351,25711,25903,26088,26234,26525,26547,27490,27744,27802,28460,30693,30757,31049,31063,32025,32930,33026,33267,33437,33463,34584,35468,63996,36100,36286,36978,30452,31257,31287,32340,32887,21767,21972,22645,25391,25634,26185,26187,26733,27035,27524,27941,28337,29645,29800,29857,30043,30137,30433,30494,30603,31206,32265,32285,33275,34095,34967,35386,36049,36587,36784,36914,37805,38499,38515,38663,20356,21489,23018,23241,24089,26702,29894,30142,31209,31378,33187,34541,36074,36300,36845,26015,26389,63997,22519,28503,32221,36655,37878,38598,24501,25074,28548,19988,20376,20511,21449,21983,23919,24046,27425,27492,30923,31642,63998,36425,36554,36974,25417,25662,30528,31364,37679,38015,40810,25776,28591,29158,29864,29914,31428,31762,32386,31922,32408,35738,36106,38013,39184,39244,21049,23519,25830,26413,32046,20717,21443,22649,24920,24921,25082,26028,31449,35730,35734,20489,20513,21109,21809,23100,24288,24432,24884,25950,26124,26166,26274,27085,28356,28466,29462,30241,31379,33081,33369,33750,33980,20661,22512,23488,23528,24425,25505,30758,32181,33756,34081,37319,37365,20874,26613,31574,36012,20932,22971,24765,34389,20508,63999,21076,23610,24957,25114,25299,25842,26021,28364,30240,33034,36448,38495,38587,20191,21315,21912,22825,24029,25797,27849,28154,29588,31359,33307,34214,36068,36368,36983,37351,38369,38433,38854,20984,21746,21894,24505,25764,28552,32180,36639,36685,37941,20681,23574,27838,28155,29979,30651,31805,31844,35449,35522,22558,22974,24086,25463,29266,30090,30571,35548,36028,36626,24307,26228,28152,32893,33729,35531,38737,39894,64000,21059,26367,28053,28399,32224,35558,36910,36958,39636,21021,21119,21736,24980,25220,25307,26786,26898,26970,27189,28818,28966,30813,30977,30990,31186,31245,32918,33400,33493,33609,34121,35970,36229,37218,37259,37294,20419,22225,29165,30679,34560,35320,23544,24534,26449,37032,21474,22618,23541,24740,24961,25696,32317,32880,34085,37507,25774,20652,23828,26368,22684,25277,25512,26894,27000,27166,28267,30394,31179,33467,33833,35535,36264,36861,37138,37195,37276,37648,37656,37786,38619,39478,39949,19985,30044,31069,31482,31569,31689,32302,33988,36441,36468,36600,36880,26149,26943,29763,20986,26414,40668,20805,24544,27798,34802,34909,34935,24756,33205,33795,36101,21462,21561,22068,23094,23601,28810,32736,32858,33030,33261,36259,37257,39519,40434,20596,20164,21408,24827,28204,23652,20360,20516,21988,23769,24159,24677,26772,27835,28100,29118,30164,30196,30305,31258,31305,32199,32251,32622,33268,34473,36636,38601,39347,40786,21063,21189,39149,35242,19971,26578,28422,20405,23522,26517,27784,28024,29723,30759,37341,37756,34756,31204,31281,24555,20182,21668,21822,22702,22949,24816,25171,25302,26422,26965,33333,38464,39345,39389,20524,21331,21828,22396,64001,25176,64002,25826,26219,26589,28609,28655,29730,29752,35351,37944,21585,22022,22374,24392,24986,27470,28760,28845,32187,35477,22890,33067,25506,30472,32829,36010,22612,25645,27067,23445,24081,28271,64003,34153,20812,21488,22826,24608,24907,27526,27760,27888,31518,32974,33492,36294,37040,39089,64004,25799,28580,25745,25860,20814,21520,22303,35342,24927,26742,64005,30171,31570,32113,36890,22534,27084,33151,35114,36864,38969,20600,22871,22956,25237,36879,39722,24925,29305,38358,22369,23110,24052,25226,25773,25850,26487,27874,27966,29228,29750,30772,32631,33453,36315,38935,21028,22338,26495,29256,29923,36009,36774,37393,38442,20843,21485,25420,20329,21764,24726,25943,27803,28031,29260,29437,31255,35207,35997,24429,28558,28921,33192,24846,20415,20559,25153,29255,31687,32232,32745,36941,38829,39449,36022,22378,24179,26544,33805,35413,21536,23318,24163,24290,24330,25987,32954,34109,38281,38491,20296,21253,21261,21263,21638,21754,22275,24067,24598,25243,25265,25429,64006,27873,28006,30129,30770,32990,33071,33502,33889,33970,34957,35090,36875,37610,39165,39825,24133,26292,26333,28689,29190,64007,20469,21117,24426,24915,26451,27161,28418,29922,31080,34920,35961,39111,39108,39491,21697,31263,26963,35575,35914,39080,39342,24444,25259,30130,30382,34987,36991,38466,21305,24380,24517,27852,29644,30050,30091,31558,33534,39325,20047,36924,19979,20309,21414,22799,24264,26160,27827,29781,33655,34662,36032,36944,38686,39957,22737,23416,34384,35604,40372,23506,24680,24717,26097,27735,28450,28579,28698,32597,32752,38289,38290,38480,38867,21106,36676,20989,21547,21688,21859,21898,27323,28085,32216,33382,37532,38519,40569,21512,21704,30418,34532,38308,38356,38492,20130,20233,23022,23270,24055,24658,25239,26477,26689,27782,28207,32568,32923,33322,64008,64009,38917,20133,20565,21683,22419,22874,23401,23475,25032,26999,28023,28707,34809,35299,35442,35559,36994,39405,39608,21182,26680,20502,24184,26447,33607,34892,20139,21521,22190,29670,37141,38911,39177,39255,39321,22099,22687,34395,35377,25010,27382,29563,36562,27463,38570,39511,22869,29184,36203,38761,20436,23796,24358,25080,26203,27883,28843,29572,29625,29694,30505,30541,32067,32098,32291,33335,34898,64010,36066,37449,39023,23377,31348,34880,38913,23244,20448,21332,22846,23805,25406,28025,29433,33029,33031,33698,37583,38960,20136,20804,21009,22411,24418,27842,28366,28677,28752,28847,29074,29673,29801,33610,34722,34913,36872,37026,37795,39336,20846,24407,24800,24935,26291,34137,36426,37295,38795,20046,20114,21628,22741,22778,22909,23733,24359,25142,25160,26122,26215,27627,28009,28111,28246,28408,28564,28640,28649,28765,29392,29733,29786,29920,30355,31068,31946,32286,32993,33446,33899,33983,34382,34399,34676,35703,35946,37804,38912,39013,24785,25110,37239,23130,26127,28151,28222,29759,39746,24573,24794,31503,21700,24344,27742,27859,27946,28888,32005,34425,35340,40251,21270,21644,23301,27194,28779,30069,31117,31166,33457,33775,35441,35649,36008,38772,64011,25844,25899,30906,30907,31339,20024,21914,22864,23462,24187,24739,25563,27489,26213,26707,28185,29029,29872,32008,36996,39529,39973,27963,28369,29502,35905,38346,20976,24140,24488,24653,24822,24880,24908,26179,26180,27045,27841,28255,28361,28514,29004,29852,30343,31681,31783,33618,34647,36945,38541,40643,21295,22238,24315,24458,24674,24724,25079,26214,26371,27292,28142,28590,28784,29546,32362,33214,33588,34516,35496,36036,21123,29554,23446,27243,37892,21742,22150,23389,25928,25989,26313,26783,28045,28102,29243,32948,37237,39501,20399,20505,21402,21518,21564,21897,21957,24127,24460,26429,29030,29661,36869,21211,21235,22628,22734,28932,29071,29179,34224,35347,26248,34216,21927,26244,29002,33841,21321,21913,27585,24409,24509,25582,26249,28999,35569,36637,40638,20241,25658,28875,30054,34407,24676,35662,40440,20807,20982,21256,27958,33016,40657,26133,27427,28824,30165,21507,23673,32007,35350,27424,27453,27462,21560,24688,27965,32725,33288,20694,20958,21916,22123,22221,23020,23305,24076,24985,24984,25137,26206,26342,29081,29113,29114,29351,31143,31232,32690,35440],
  "gbk":[19970, 19972, 19973, 19974, 19983, 19986, 19991, 19999, 20000, 20001, 20003, 20006, 20009, 20014, 20015, 20017, 20019, 20021, 20023, 20028, 20032, 20033, 20034, 20036, 20038, 20042, 20049, 20053, 20055, 20058, 20059, 20066, 20067, 20068, 20069, 20071, 20072, 20074, 20075, 20076, 20077, 20078, 20079, 20082, 20084, 20085, 20086, 20087, 20088, 20089, 20090, 20091, 20092, 20093, 20095, 20096, 20097, 20098, 20099, 20100, 20101, 20103, 20106, 20112, 20118, 20119, 20121, 20124, 20125, 20126, 20131, 20138, 20143, 20144, 20145, 20148, 20150, 20151, 20152, 20153, 20156, 20157, 20158, 20168, 20172, 20175, 20176, 20178, 20186, 20187, 20188, 20192, 20194, 20198, 20199, 20201, 20205, 20206, 20207, 20209, 20212, 20216, 20217, 20218, 20220, 20222, 20224, 20226, 20227, 20228, 20229, 20230, 20231, 20232, 20235, 20236, 20242, 20243, 20244, 20245, 20246, 20252, 20253, 20257, 20259, 20264, 20265, 20268, 20269, 20270, 20273, 20275, 20277, 20279, 20281, 20283, 20286, 20287, 20288, 20289, 20290, 20292, 20293, 20295, 20296, 20297, 20298, 20299, 20300, 20306, 20308, 20310, 20321, 20322, 20326, 20328, 20330, 20331, 20333, 20334, 20337, 20338, 20341, 20343, 20344, 20345, 20346, 20349, 20352, 20353, 20354, 20357, 20358, 20359, 20362, 20364, 20366, 20368, 20370, 20371, 20373, 20374, 20376, 20377, 20378, 20380, 20382, 20383, 20385, 20386, 20388, 20395, 20397, 20400, 20401, 20402, 20403, 20404, 20406, 20407, 20408, 20409, 20410, 20411, 20412, 20413, 20414, 20416, 20417, 20418, 20422, 20423, 20424, 20425, 20427, 20428, 20429, 20434, 20435, 20436, 20437, 20438, 20441, 20443, 20448, 20450, 20452, 20453, 20455, 20459, 20460, 20464, 20466, 20468, 20469, 20470, 20471, 20473, 20475, 20476, 20477, 20479, 20480, 20481, 20482, 20483, 20484, 20485, 20486, 20487, 20488, 20489, 20490, 20491, 20494, 20496, 20497, 20499, 20501, 20502, 20503, 20507, 20509, 20510, 20512, 20514, 20515, 20516, 20519, 20523, 20527, 20528, 20529, 20530, 20531, 20532, 20533, 20534, 20535, 20536, 20537, 20539, 20541, 20543, 20544, 20545, 20546, 20548, 20549, 20550, 20553, 20554, 20555, 20557, 20560, 20561, 20562, 20563, 20564, 20566, 20567, 20568, 20569, 20571, 20573, 20574, 20575, 20576, 20577, 20578, 20579, 20580, 20582, 20583, 20584, 20585, 20586, 20587, 20589, 20590, 20591, 20592, 20593, 20594, 20595, 20596, 20597, 20600, 20601, 20602, 20604, 20605, 20609, 20610, 20611, 20612, 20614, 20615, 20617, 20618, 20619, 20620, 20622, 20623, 20624, 20625, 20626, 20627, 20628, 20629, 20630, 20631, 20632, 20633, 20634, 20635, 20636, 20637, 20638, 20639, 20640, 20641, 20642, 20644, 20646, 20650, 20651, 20653, 20654, 20655, 20656, 20657, 20659, 20660, 20661, 20662, 20663, 20664, 20665, 20668, 20669, 20670, 20671, 20672, 20673, 20674, 20675, 20676, 20677, 20678, 20679, 20680, 20681, 20682, 20683, 20684, 20685, 20686, 20688, 20689, 20690, 20691, 20692, 20693, 20695, 20696, 20697, 20699, 20700, 20701, 20702, 20703, 20704, 20705, 20706, 20707, 20708, 20709, 20712, 20713, 20714, 20715, 20719, 20720, 20721, 20722, 20724, 20726, 20727, 20728, 20729, 20730, 20732, 20733, 20734, 20735, 20736, 20737, 20738, 20739, 20740, 20741, 20744, 20745, 20746, 20748, 20749, 20750, 20751, 20752, 20753, 20755, 20756, 20757, 20758, 20759, 20760, 20761, 20762, 20763, 20764, 20765, 20766, 20767, 20768, 20770, 20771, 20772, 20773, 20774, 20775, 20776, 20777, 20778, 20779, 20780, 20781, 20782, 20783, 20784, 20785, 20786, 20787, 20788, 20789, 20790, 20791, 20792, 20793, 20794, 20795, 20796, 20797, 20798, 20802, 20807, 20810, 20812, 20814, 20815, 20816, 20818, 20819, 20823, 20824, 20825, 20827, 20829, 20830, 20831, 20832, 20833, 20835, 20836, 20838, 20839, 20841, 20842, 20847, 20850, 20858, 20862, 20863, 20867, 20868, 20870, 20871, 20874, 20875, 20878, 20879, 20880, 20881, 20883, 20884, 20888, 20890, 20893, 20894, 20895, 20897, 20899, 20902, 20903, 20904, 20905, 20906, 20909, 20910, 20916, 20920, 20921, 20922, 20926, 20927, 20929, 20930, 20931, 20933, 20936, 20938, 20941, 20942, 20944, 20946, 20947, 20948, 20949, 20950, 20951, 20952, 20953, 20954, 20956, 20958, 20959, 20962, 20963, 20965, 20966, 20967, 20968, 20969, 20970, 20972, 20974, 20977, 20978, 20980, 20983, 20990, 20996, 20997, 21001, 21003, 21004, 21007, 21008, 21011, 21012, 21013, 21020, 21022, 21023, 21025, 21026, 21027, 21029, 21030, 21031, 21034, 21036, 21039, 21041, 21042, 21044, 21045, 21052, 21054, 21060, 21061, 21062, 21063, 21064, 21065, 21067, 21070, 21071, 21074, 21075, 21077, 21079, 21080, 21081, 21082, 21083, 21085, 21087, 21088, 21090, 21091, 21092, 21094, 21096, 21099, 21100, 21101, 21102, 21104, 21105, 21107, 21108, 21109, 21110, 21111, 21112, 21113, 21114, 21115, 21116, 21118, 21120, 21123, 21124, 21125, 21126, 21127, 21129, 21130, 21131, 21132, 21133, 21134, 21135, 21137, 21138, 21140, 21141, 21142, 21143, 21144, 21145, 21146, 21148, 21156, 21157, 21158, 21159, 21166, 21167, 21168, 21172, 21173, 21174, 21175, 21176, 21177, 21178, 21179, 21180, 21181, 21184, 21185, 21186, 21188, 21189, 21190, 21192, 21194, 21196, 21197, 21198, 21199, 21201, 21203, 21204, 21205, 21207, 21209, 21210, 21211, 21212, 21213, 21214, 21216, 21217, 21218, 21219, 21221, 21222, 21223, 21224, 21225, 21226, 21227, 21228, 21229, 21230, 21231, 21233, 21234, 21235, 21236, 21237, 21238, 21239, 21240, 21243, 21244, 21245, 21249, 21250, 21251, 21252, 21255, 21257, 21258, 21259, 21260, 21262, 21265, 21266, 21267, 21268, 21272, 21275, 21276, 21278, 21279, 21282, 21284, 21285, 21287, 21288, 21289, 21291, 21292, 21293, 21295, 21296, 21297, 21298, 21299, 21300, 21301, 21302, 21303, 21304, 21308, 21309, 21312, 21314, 21316, 21318, 21323, 21324, 21325, 21328, 21332, 21336, 21337, 21339, 21341, 21349, 21352, 21354, 21356, 21357, 21362, 21366, 21369, 21371, 21372, 21373, 21374, 21376, 21377, 21379, 21383, 21384, 21386, 21390, 21391, 21392, 21393, 21394, 21395, 21396, 21398, 21399, 21401, 21403, 21404, 21406, 21408, 21409, 21412, 21415, 21418, 21419, 21420, 21421, 21423, 21424, 21425, 21426, 21427, 21428, 21429, 21431, 21432, 21433, 21434, 21436, 21437, 21438, 21440, 21443, 21444, 21445, 21446, 21447, 21454, 21455, 21456, 21458, 21459, 21461, 21466, 21468, 21469, 21470, 21473, 21474, 21479, 21492, 21498, 21502, 21503, 21504, 21506, 21509, 21511, 21515, 21524, 21528, 21529, 21530, 21532, 21538, 21540, 21541, 21546, 21552, 21555, 21558, 21559, 21562, 21565, 21567, 21569, 21570, 21572, 21573, 21575, 21577, 21580, 21581, 21582, 21583, 21585, 21594, 21597, 21598, 21599, 21600, 21601, 21603, 21605, 21607, 21609, 21610, 21611, 21612, 21613, 21614, 21615, 21616, 21620, 21625, 21626, 21630, 21631, 21633, 21635, 21637, 21639, 21640, 21641, 21642, 21645, 21649, 21651, 21655, 21656, 21660, 21662, 21663, 21664, 21665, 21666, 21669, 21678, 21680, 21682, 21685, 21686, 21687, 21689, 21690, 21692, 21694, 21699, 21701, 21706, 21707, 21718, 21720, 21723, 21728, 21729, 21730, 21731, 21732, 21739, 21740, 21743, 21744, 21745, 21748, 21749, 21750, 21751, 21752, 21753, 21755, 21758, 21760, 21762, 21763, 21764, 21765, 21768, 21770, 21771, 21772, 21773, 21774, 21778, 21779, 21781, 21782, 21783, 21784, 21785, 21786, 21788, 21789, 21790, 21791, 21793, 21797, 21798, 21800, 21801, 21803, 21805, 21810, 21812, 21813, 21814, 21816, 21817, 21818, 21819, 21821, 21824, 21826, 21829, 21831, 21832, 21835, 21836, 21837, 21838, 21839, 21841, 21842, 21843, 21844, 21847, 21848, 21849, 21850, 21851, 21853, 21854, 21855, 21856, 21858, 21859, 21864, 21865, 21867, 21871, 21872, 21873, 21874, 21875, 21876, 21881, 21882, 21885, 21887, 21893, 21894, 21900, 21901, 21902, 21904, 21906, 21907, 21909, 21910, 21911, 21914, 21915, 21918, 21920, 21921, 21922, 21923, 21924, 21925, 21926, 21928, 21929, 21930, 21931, 21932, 21933, 21934, 21935, 21936, 21938, 21940, 21942, 21944, 21946, 21948, 21951, 21952, 21953, 21954, 21955, 21958, 21959, 21960, 21962, 21963, 21966, 21967, 21968, 21973, 21975, 21976, 21977, 21978, 21979, 21982, 21984, 21986, 21991, 21993, 21997, 21998, 22000, 22001, 22004, 22006, 22008, 22009, 22010, 22011, 22012, 22015, 22018, 22019, 22020, 22021, 22022, 22023, 22026, 22027, 22029, 22032, 22033, 22034, 22035, 22036, 22037, 22038, 22039, 22041, 22042, 22044, 22045, 22048, 22049, 22050, 22053, 22054, 22056, 22057, 22058, 22059, 22062, 22063, 22064, 22067, 22069, 22071, 22072, 22074, 22076, 22077, 22078, 22080, 22081, 22082, 22083, 22084, 22085, 22086, 22087, 22088, 22089, 22090, 22091, 22095, 22096, 22097, 22098, 22099, 22101, 22102, 22106, 22107, 22109, 22110, 22111, 22112, 22113, 22115, 22117, 22118, 22119, 22125, 22126, 22127, 22128, 22130, 22131, 22132, 22133, 22135, 22136, 22137, 22138, 22141, 22142, 22143, 22144, 22145, 22146, 22147, 22148, 22151, 22152, 22153, 22154, 22155, 22156, 22157, 22160, 22161, 22162, 22164, 22165, 22166, 22167, 22168, 22169, 22170, 22171, 22172, 22173, 22174, 22175, 22176, 22177, 22178, 22180, 22181, 22182, 22183, 22184, 22185, 22186, 22187, 22188, 22189, 22190, 22192, 22193, 22194, 22195, 22196, 22197, 22198, 22200, 22201, 22202, 22203, 22205, 22206, 22207, 22208, 22209, 22210, 22211, 22212, 22213, 22214, 22215, 22216, 22217, 22219, 22220, 22221, 22222, 22223, 22224, 22225, 22226, 22227, 22229, 22230, 22232, 22233, 22236, 22243, 22245, 22246, 22247, 22248, 22249, 22250, 22252, 22254, 22255, 22258, 22259, 22262, 22263, 22264, 22267, 22268, 22272, 22273, 22274, 22277, 22279, 22283, 22284, 22285, 22286, 22287, 22288, 22289, 22290, 22291, 22292, 22293, 22294, 22295, 22296, 22297, 22298, 22299, 22301, 22302, 22304, 22305, 22306, 22308, 22309, 22310, 22311, 22315, 22321, 22322, 22324, 22325, 22326, 22327, 22328, 22332, 22333, 22335, 22337, 22339, 22340, 22341, 22342, 22344, 22345, 22347, 22354, 22355, 22356, 22357, 22358, 22360, 22361, 22370, 22371, 22373, 22375, 22380, 22382, 22384, 22385, 22386, 22388, 22389, 22392, 22393, 22394, 22397, 22398, 22399, 22400, 22401, 22407, 22408, 22409, 22410, 22413, 22414, 22415, 22416, 22417, 22420, 22421, 22422, 22423, 22424, 22425, 22426, 22428, 22429, 22430, 22431, 22437, 22440, 22442, 22444, 22447, 22448, 22449, 22451, 22453, 22454, 22455, 22457, 22458, 22459, 22460, 22461, 22462, 22463, 22464, 22465, 22468, 22469, 22470, 22471, 22472, 22473, 22474, 22476, 22477, 22480, 22481, 22483, 22486, 22487, 22491, 22492, 22494, 22497, 22498, 22499, 22501, 22502, 22503, 22504, 22505, 22506, 22507, 22508, 22510, 22512, 22513, 22514, 22515, 22517, 22518, 22519, 22523, 22524, 22526, 22527, 22529, 22531, 22532, 22533, 22536, 22537, 22538, 22540, 22542, 22543, 22544, 22546, 22547, 22548, 22550, 22551, 22552, 22554, 22555, 22556, 22557, 22559, 22562, 22563, 22565, 22566, 22567, 22568, 22569, 22571, 22572, 22573, 22574, 22575, 22577, 22578, 22579, 22580, 22582, 22583, 22584, 22585, 22586, 22587, 22588, 22589, 22590, 22591, 22592, 22593, 22594, 22595, 22597, 22598, 22599, 22600, 22601, 22602, 22603, 22606, 22607, 22608, 22610, 22611, 22613, 22614, 22615, 22617, 22618, 22619, 22620, 22621, 22623, 22624, 22625, 22626, 22627, 22628, 22630, 22631, 22632, 22633, 22634, 22637, 22638, 22639, 22640, 22641, 22642, 22643, 22644, 22645, 22646, 22647, 22648, 22649, 22650, 22651, 22652, 22653, 22655, 22658, 22660, 22662, 22663, 22664, 22666, 22667, 22668, 22669, 22670, 22671, 22672, 22673, 22676, 22677, 22678, 22679, 22680, 22683, 22684, 22685, 22688, 22689, 22690, 22691, 22692, 22693, 22694, 22695, 22698, 22699, 22700, 22701, 22702, 22703, 22704, 22705, 22706, 22707, 22708, 22709, 22710, 22711, 22712, 22713, 22714, 22715, 22717, 22718, 22719, 22720, 22722, 22723, 22724, 22726, 22727, 22728, 22729, 22730, 22731, 22732, 22733, 22734, 22735, 22736, 22738, 22739, 22740, 22742, 22743, 22744, 22745, 22746, 22747, 22748, 22749, 22750, 22751, 22752, 22753, 22754, 22755, 22757, 22758, 22759, 22760, 22761, 22762, 22765, 22767, 22769, 22770, 22772, 22773, 22775, 22776, 22778, 22779, 22780, 22781, 22782, 22783, 22784, 22785, 22787, 22789, 22790, 22792, 22793, 22794, 22795, 22796, 22798, 22800, 22801, 22802, 22803, 22807, 22808, 22811, 22813, 22814, 22816, 22817, 22818, 22819, 22822, 22824, 22828, 22832, 22834, 22835, 22837, 22838, 22843, 22845, 22846, 22847, 22848, 22851, 22853, 22854, 22858, 22860, 22861, 22864, 22866, 22867, 22873, 22875, 22876, 22877, 22878, 22879, 22881, 22883, 22884, 22886, 22887, 22888, 22889, 22890, 22891, 22892, 22893, 22894, 22895, 22896, 22897, 22898, 22901, 22903, 22906, 22907, 22908, 22910, 22911, 22912, 22917, 22921, 22923, 22924, 22926, 22927, 22928, 22929, 22932, 22933, 22936, 22938, 22939, 22940, 22941, 22943, 22944, 22945, 22946, 22950, 22951, 22956, 22957, 22960, 22961, 22963, 22964, 22965, 22966, 22967, 22968, 22970, 22972, 22973, 22975, 22976, 22977, 22978, 22979, 22980, 22981, 22983, 22984, 22985, 22988, 22989, 22990, 22991, 22997, 22998, 23001, 23003, 23006, 23007, 23008, 23009, 23010, 23012, 23014, 23015, 23017, 23018, 23019, 23021, 23022, 23023, 23024, 23025, 23026, 23027, 23028, 23029, 23030, 23031, 23032, 23034, 23036, 23037, 23038, 23040, 23042, 23050, 23051, 23053, 23054, 23055, 23056, 23058, 23060, 23061, 23062, 23063, 23065, 23066, 23067, 23069, 23070, 23073, 23074, 23076, 23078, 23079, 23080, 23082, 23083, 23084, 23085, 23086, 23087, 23088, 23091, 23093, 23095, 23096, 23097, 23098, 23099, 23101, 23102, 23103, 23105, 23106, 23107, 23108, 23109, 23111, 23112, 23115, 23116, 23117, 23118, 23119, 23120, 23121, 23122, 23123, 23124, 23126, 23127, 23128, 23129, 23131, 23132, 23133, 23134, 23135, 23136, 23137, 23139, 23140, 23141, 23142, 23144, 23145, 23147, 23148, 23149, 23150, 23151, 23152, 23153, 23154, 23155, 23160, 23161, 23163, 23164, 23165, 23166, 23168, 23169, 23170, 23171, 23172, 23173, 23174, 23175, 23176, 23177, 23178, 23179, 23180, 23181, 23182, 23183, 23184, 23185, 23187, 23188, 23189, 23190, 23191, 23192, 23193, 23196, 23197, 23198, 23199, 23200, 23201, 23202, 23203, 23204, 23205, 23206, 23207, 23208, 23209, 23211, 23212, 23213, 23214, 23215, 23216, 23217, 23220, 23222, 23223, 23225, 23226, 23227, 23228, 23229, 23231, 23232, 23235, 23236, 23237, 23238, 23239, 23240, 23242, 23243, 23245, 23246, 23247, 23248, 23249, 23251, 23253, 23255, 23257, 23258, 23259, 23261, 23262, 23263, 23266, 23268, 23269, 23271, 23272, 23274, 23276, 23277, 23278, 23279, 23280, 23282, 23283, 23284, 23285, 23286, 23287, 23288, 23289, 23290, 23291, 23292, 23293, 23294, 23295, 23296, 23297, 23298, 23299, 23300, 23301, 23302, 23303, 23304, 23306, 23307, 23308, 23309, 23310, 23311, 23312, 23313, 23314, 23315, 23316, 23317, 23320, 23321, 23322, 23323, 23324, 23325, 23326, 23327, 23328, 23329, 23330, 23331, 23332, 23333, 23334, 23335, 23336, 23337, 23338, 23339, 23340, 23341, 23342, 23343, 23344, 23345, 23347, 23349, 23350, 23352, 23353, 23354, 23355, 23356, 23357, 23358, 23359, 23361, 23362, 23363, 23364, 23365, 23366, 23367, 23368, 23369, 23370, 23371, 23372, 23373, 23374, 23375, 23378, 23382, 23390, 23392, 23393, 23399, 23400, 23403, 23405, 23406, 23407, 23410, 23412, 23414, 23415, 23416, 23417, 23419, 23420, 23422, 23423, 23426, 23430, 23434, 23437, 23438, 23440, 23441, 23442, 23444, 23446, 23455, 23463, 23464, 23465, 23468, 23469, 23470, 23471, 23473, 23474, 23479, 23482, 23483, 23484, 23488, 23489, 23491, 23496, 23497, 23498, 23499, 23501, 23502, 23503, 23505, 23508, 23509, 23510, 23511, 23512, 23513, 23514, 23515, 23516, 23520, 23522, 23523, 23526, 23527, 23529, 23530, 23531, 23532, 23533, 23535, 23537, 23538, 23539, 23540, 23541, 23542, 23543, 23549, 23550, 23552, 23554, 23555, 23557, 23559, 23560, 23563, 23564, 23565, 23566, 23568, 23570, 23571, 23575, 23577, 23579, 23582, 23583, 23584, 23585, 23587, 23590, 23592, 23593, 23594, 23595, 23597, 23598, 23599, 23600, 23602, 23603, 23605, 23606, 23607, 23619, 23620, 23622, 23623, 23628, 23629, 23634, 23635, 23636, 23638, 23639, 23640, 23642, 23643, 23644, 23645, 23647, 23650, 23652, 23655, 23656, 23657, 23658, 23659, 23660, 23661, 23664, 23666, 23667, 23668, 23669, 23670, 23671, 23672, 23675, 23676, 23677, 23678, 23680, 23683, 23684, 23685, 23686, 23687, 23689, 23690, 23691, 23694, 23695, 23698, 23699, 23701, 23709, 23710, 23711, 23712, 23713, 23716, 23717, 23718, 23719, 23720, 23722, 23726, 23727, 23728, 23730, 23732, 23734, 23737, 23738, 23739, 23740, 23742, 23744, 23746, 23747, 23749, 23750, 23751, 23752, 23753, 23754, 23756, 23757, 23758, 23759, 23760, 23761, 23763, 23764, 23765, 23766, 23767, 23768, 23770, 23771, 23772, 23773, 23774, 23775, 23776, 23778, 23779, 23783, 23785, 23787, 23788, 23790, 23791, 23793, 23794, 23795, 23796, 23797, 23798, 23799, 23800, 23801, 23802, 23804, 23805, 23806, 23807, 23808, 23809, 23812, 23813, 23816, 23817, 23818, 23819, 23820, 23821, 23823, 23824, 23825, 23826, 23827, 23829, 23831, 23832, 23833, 23834, 23836, 23837, 23839, 23840, 23841, 23842, 23843, 23845, 23848, 23850, 23851, 23852, 23855, 23856, 23857, 23858, 23859, 23861, 23862, 23863, 23864, 23865, 23866, 23867, 23868, 23871, 23872, 23873, 23874, 23875, 23876, 23877, 23878, 23880, 23881, 23885, 23886, 23887, 23888, 23889, 23890, 23891, 23892, 23893, 23894, 23895, 23897, 23898, 23900, 23902, 23903, 23904, 23905, 23906, 23907, 23908, 23909, 23910, 23911, 23912, 23914, 23917, 23918, 23920, 23921, 23922, 23923, 23925, 23926, 23927, 23928, 23929, 23930, 23931, 23932, 23933, 23934, 23935, 23936, 23937, 23939, 23940, 23941, 23942, 23943, 23944, 23945, 23946, 23947, 23948, 23949, 23950, 23951, 23952, 23953, 23954, 23955, 23956, 23957, 23958, 23959, 23960, 23962, 23963, 23964, 23966, 23967, 23968, 23969, 23970, 23971, 23972, 23973, 23974, 23975, 23976, 23977, 23978, 23979, 23980, 23981, 23982, 23983, 23984, 23985, 23986, 23987, 23988, 23989, 23990, 23992, 23993, 23994, 23995, 23996, 23997, 23998, 23999, 24000, 24001, 24002, 24003, 24004, 24006, 24007, 24008, 24009, 24010, 24011, 24012, 24014, 24015, 24016, 24017, 24018, 24019, 24020, 24021, 24022, 24023, 24024, 24025, 24026, 24028, 24031, 24032, 24035, 24036, 24042, 24044, 24045, 24048, 24053, 24054, 24056, 24057, 24058, 24059, 24060, 24063, 24064, 24068, 24071, 24073, 24074, 24075, 24077, 24078, 24082, 24083, 24087, 24094, 24095, 24096, 24097, 24098, 24099, 24100, 24101, 24104, 24105, 24106, 24107, 24108, 24111, 24112, 24114, 24115, 24116, 24117, 24118, 24121, 24122, 24126, 24127, 24128, 24129, 24131, 24134, 24135, 24136, 24137, 24138, 24139, 24141, 24142, 24143, 24144, 24145, 24146, 24147, 24150, 24151, 24152, 24153, 24154, 24156, 24157, 24159, 24160, 24163, 24164, 24165, 24166, 24167, 24168, 24169, 24170, 24171, 24172, 24173, 24174, 24175, 24176, 24177, 24181, 24183, 24185, 24190, 24193, 24194, 24195, 24197, 24200, 24201, 24204, 24205, 24206, 24210, 24216, 24219, 24221, 24225, 24226, 24227, 24228, 24232, 24233, 24234, 24235, 24236, 24238, 24239, 24240, 24241, 24242, 24244, 24250, 24251, 24252, 24253, 24255, 24256, 24257, 24258, 24259, 24260, 24261, 24262, 24263, 24264, 24267, 24268, 24269, 24270, 24271, 24272, 24276, 24277, 24279, 24280, 24281, 24282, 24284, 24285, 24286, 24287, 24288, 24289, 24290, 24291, 24292, 24293, 24294, 24295, 24297, 24299, 24300, 24301, 24302, 24303, 24304, 24305, 24306, 24307, 24309, 24312, 24313, 24315, 24316, 24317, 24325, 24326, 24327, 24329, 24332, 24333, 24334, 24336, 24338, 24340, 24342, 24345, 24346, 24348, 24349, 24350, 24353, 24354, 24355, 24356, 24360, 24363, 24364, 24366, 24368, 24370, 24371, 24372, 24373, 24374, 24375, 24376, 24379, 24381, 24382, 24383, 24385, 24386, 24387, 24388, 24389, 24390, 24391, 24392, 24393, 24394, 24395, 24396, 24397, 24398, 24399, 24401, 24404, 24409, 24410, 24411, 24412, 24414, 24415, 24416, 24419, 24421, 24423, 24424, 24427, 24430, 24431, 24434, 24436, 24437, 24438, 24440, 24442, 24445, 24446, 24447, 24451, 24454, 24461, 24462, 24463, 24465, 24467, 24468, 24470, 24474, 24475, 24477, 24478, 24479, 24480, 24482, 24483, 24484, 24485, 24486, 24487, 24489, 24491, 24492, 24495, 24496, 24497, 24498, 24499, 24500, 24502, 24504, 24505, 24506, 24507, 24510, 24511, 24512, 24513, 24514, 24519, 24520, 24522, 24523, 24526, 24531, 24532, 24533, 24538, 24539, 24540, 24542, 24543, 24546, 24547, 24549, 24550, 24552, 24553, 24556, 24559, 24560, 24562, 24563, 24564, 24566, 24567, 24569, 24570, 24572, 24583, 24584, 24585, 24587, 24588, 24592, 24593, 24595, 24599, 24600, 24602, 24606, 24607, 24610, 24611, 24612, 24620, 24621, 24622, 24624, 24625, 24626, 24627, 24628, 24630, 24631, 24632, 24633, 24634, 24637, 24638, 24640, 24644, 24645, 24646, 24647, 24648, 24649, 24650, 24652, 24654, 24655, 24657, 24659, 24660, 24662, 24663, 24664, 24667, 24668, 24670, 24671, 24672, 24673, 24677, 24678, 24686, 24689, 24690, 24692, 24693, 24695, 24702, 24704, 24705, 24706, 24709, 24710, 24711, 24712, 24714, 24715, 24718, 24719, 24720, 24721, 24723, 24725, 24727, 24728, 24729, 24732, 24734, 24737, 24738, 24740, 24741, 24743, 24745, 24746, 24750, 24752, 24755, 24757, 24758, 24759, 24761, 24762, 24765, 24766, 24767, 24768, 24769, 24770, 24771, 24772, 24775, 24776, 24777, 24780, 24781, 24782, 24783, 24784, 24786, 24787, 24788, 24790, 24791, 24793, 24795, 24798, 24801, 24802, 24803, 24804, 24805, 24810, 24817, 24818, 24821, 24823, 24824, 24827, 24828, 24829, 24830, 24831, 24834, 24835, 24836, 24837, 24839, 24842, 24843, 24844, 24848, 24849, 24850, 24851, 24852, 24854, 24855, 24856, 24857, 24859, 24860, 24861, 24862, 24865, 24866, 24869, 24872, 24873, 24874, 24876, 24877, 24878, 24879, 24880, 24881, 24882, 24883, 24884, 24885, 24886, 24887, 24888, 24889, 24890, 24891, 24892, 24893, 24894, 24896, 24897, 24898, 24899, 24900, 24901, 24902, 24903, 24905, 24907, 24909, 24911, 24912, 24914, 24915, 24916, 24918, 24919, 24920, 24921, 24922, 24923, 24924, 24926, 24927, 24928, 24929, 24931, 24932, 24933, 24934, 24937, 24938, 24939, 24940, 24941, 24942, 24943, 24945, 24946, 24947, 24948, 24950, 24952, 24953, 24954, 24955, 24956, 24957, 24958, 24959, 24960, 24961, 24962, 24963, 24964, 24965, 24966, 24967, 24968, 24969, 24970, 24972, 24973, 24975, 24976, 24977, 24978, 24979, 24981, 24982, 24983, 24984, 24985, 24986, 24987, 24988, 24990, 24991, 24992, 24993, 24994, 24995, 24996, 24997, 24998, 25002, 25003, 25005, 25006, 25007, 25008, 25009, 25010, 25011, 25012, 25013, 25014, 25016, 25017, 25018, 25019, 25020, 25021, 25023, 25024, 25025, 25027, 25028, 25029, 25030, 25031, 25033, 25036, 25037, 25038, 25039, 25040, 25043, 25045, 25046, 25047, 25048, 25049, 25050, 25051, 25052, 25053, 25054, 25055, 25056, 25057, 25058, 25059, 25060, 25061, 25063, 25064, 25065, 25066, 25067, 25068, 25069, 25070, 25071, 25072, 25073, 25074, 25075, 25076, 25078, 25079, 25080, 25081, 25082, 25083, 25084, 25085, 25086, 25088, 25089, 25090, 25091, 25092, 25093, 25095, 25097, 25107, 25108, 25113, 25116, 25117, 25118, 25120, 25123, 25126, 25127, 25128, 25129, 25131, 25133, 25135, 25136, 25137, 25138, 25141, 25142, 25144, 25145, 25146, 25147, 25148, 25154, 25156, 25157, 25158, 25162, 25167, 25168, 25173, 25174, 25175, 25177, 25178, 25180, 25181, 25182, 25183, 25184, 25185, 25186, 25188, 25189, 25192, 25201, 25202, 25204, 25205, 25207, 25208, 25210, 25211, 25213, 25217, 25218, 25219, 25221, 25222, 25223, 25224, 25227, 25228, 25229, 25230, 25231, 25232, 25236, 25241, 25244, 25245, 25246, 25251, 25254, 25255, 25257, 25258, 25261, 25262, 25263, 25264, 25266, 25267, 25268, 25270, 25271, 25272, 25274, 25278, 25280, 25281, 25283, 25291, 25295, 25297, 25301, 25309, 25310, 25312, 25313, 25316, 25322, 25323, 25328, 25330, 25333, 25336, 25337, 25338, 25339, 25344, 25347, 25348, 25349, 25350, 25354, 25355, 25356, 25357, 25359, 25360, 25362, 25363, 25364, 25365, 25367, 25368, 25369, 25372, 25382, 25383, 25385, 25388, 25389, 25390, 25392, 25393, 25395, 25396, 25397, 25398, 25399, 25400, 25403, 25404, 25406, 25407, 25408, 25409, 25412, 25415, 25416, 25418, 25425, 25426, 25427, 25428, 25430, 25431, 25432, 25433, 25434, 25435, 25436, 25437, 25440, 25444, 25445, 25446, 25448, 25450, 25451, 25452, 25455, 25456, 25458, 25459, 25460, 25461, 25464, 25465, 25468, 25469, 25470, 25471, 25473, 25475, 25476, 25477, 25478, 25483, 25485, 25489, 25491, 25492, 25493, 25495, 25497, 25498, 25499, 25500, 25501, 25502, 25503, 25505, 25508, 25510, 25515, 25519, 25521, 25522, 25525, 25526, 25529, 25531, 25533, 25535, 25536, 25537, 25538, 25539, 25541, 25543, 25544, 25546, 25547, 25548, 25553, 25555, 25556, 25557, 25559, 25560, 25561, 25562, 25563, 25564, 25565, 25567, 25570, 25572, 25573, 25574, 25575, 25576, 25579, 25580, 25582, 25583, 25584, 25585, 25587, 25589, 25591, 25593, 25594, 25595, 25596, 25598, 25603, 25604, 25606, 25607, 25608, 25609, 25610, 25613, 25614, 25617, 25618, 25621, 25622, 25623, 25624, 25625, 25626, 25629, 25631, 25634, 25635, 25636, 25637, 25639, 25640, 25641, 25643, 25646, 25647, 25648, 25649, 25650, 25651, 25653, 25654, 25655, 25656, 25657, 25659, 25660, 25662, 25664, 25666, 25667, 25673, 25675, 25676, 25677, 25678, 25679, 25680, 25681, 25683, 25685, 25686, 25687, 25689, 25690, 25691, 25692, 25693, 25695, 25696, 25697, 25698, 25699, 25700, 25701, 25702, 25704, 25706, 25707, 25708, 25710, 25711, 25712, 25713, 25714, 25715, 25716, 25717, 25718, 25719, 25723, 25724, 25725, 25726, 25727, 25728, 25729, 25731, 25734, 25736, 25737, 25738, 25739, 25740, 25741, 25742, 25743, 25744, 25747, 25748, 25751, 25752, 25754, 25755, 25756, 25757, 25759, 25760, 25761, 25762, 25763, 25765, 25766, 25767, 25768, 25770, 25771, 25775, 25777, 25778, 25779, 25780, 25782, 25785, 25787, 25789, 25790, 25791, 25793, 25795, 25796, 25798, 25799, 25800, 25801, 25802, 25803, 25804, 25807, 25809, 25811, 25812, 25813, 25814, 25817, 25818, 25819, 25820, 25821, 25823, 25824, 25825, 25827, 25829, 25831, 25832, 25833, 25834, 25835, 25836, 25837, 25838, 25839, 25840, 25841, 25842, 25843, 25844, 25845, 25846, 25847, 25848, 25849, 25850, 25851, 25852, 25853, 25854, 25855, 25857, 25858, 25859, 25860, 25861, 25862, 25863, 25864, 25866, 25867, 25868, 25869, 25870, 25871, 25872, 25873, 25875, 25876, 25877, 25878, 25879, 25881, 25882, 25883, 25884, 25885, 25886, 25887, 25888, 25889, 25890, 25891, 25892, 25894, 25895, 25896, 25897, 25898, 25900, 25901, 25904, 25905, 25906, 25907, 25911, 25914, 25916, 25917, 25920, 25921, 25922, 25923, 25924, 25926, 25927, 25930, 25931, 25933, 25934, 25936, 25938, 25939, 25940, 25943, 25944, 25946, 25948, 25951, 25952, 25953, 25956, 25957, 25959, 25960, 25961, 25962, 25965, 25966, 25967, 25969, 25971, 25973, 25974, 25976, 25977, 25978, 25979, 25980, 25981, 25982, 25983, 25984, 25985, 25986, 25987, 25988, 25989, 25990, 25992, 25993, 25994, 25997, 25998, 25999, 26002, 26004, 26005, 26006, 26008, 26010, 26013, 26014, 26016, 26018, 26019, 26022, 26024, 26026, 26028, 26030, 26033, 26034, 26035, 26036, 26037, 26038, 26039, 26040, 26042, 26043, 26046, 26047, 26048, 26050, 26055, 26056, 26057, 26058, 26061, 26064, 26065, 26067, 26068, 26069, 26072, 26073, 26074, 26075, 26076, 26077, 26078, 26079, 26081, 26083, 26084, 26090, 26091, 26098, 26099, 26100, 26101, 26104, 26105, 26107, 26108, 26109, 26110, 26111, 26113, 26116, 26117, 26119, 26120, 26121, 26123, 26125, 26128, 26129, 26130, 26134, 26135, 26136, 26138, 26139, 26140, 26142, 26145, 26146, 26147, 26148, 26150, 26153, 26154, 26155, 26156, 26158, 26160, 26162, 26163, 26167, 26168, 26169, 26170, 26171, 26173, 26175, 26176, 26178, 26180, 26181, 26182, 26183, 26184, 26185, 26186, 26189, 26190, 26192, 26193, 26200, 26201, 26203, 26204, 26205, 26206, 26208, 26210, 26211, 26213, 26215, 26217, 26218, 26219, 26220, 26221, 26225, 26226, 26227, 26229, 26232, 26233, 26235, 26236, 26237, 26239, 26240, 26241, 26243, 26245, 26246, 26248, 26249, 26250, 26251, 26253, 26254, 26255, 26256, 26258, 26259, 26260, 26261, 26264, 26265, 26266, 26267, 26268, 26270, 26271, 26272, 26273, 26274, 26275, 26276, 26277, 26278, 26281, 26282, 26283, 26284, 26285, 26287, 26288, 26289, 26290, 26291, 26293, 26294, 26295, 26296, 26298, 26299, 26300, 26301, 26303, 26304, 26305, 26306, 26307, 26308, 26309, 26310, 26311, 26312, 26313, 26314, 26315, 26316, 26317, 26318, 26319, 26320, 26321, 26322, 26323, 26324, 26325, 26326, 26327, 26328, 26330, 26334, 26335, 26336, 26337, 26338, 26339, 26340, 26341, 26343, 26344, 26346, 26347, 26348, 26349, 26350, 26351, 26353, 26357, 26358, 26360, 26362, 26363, 26365, 26369, 26370, 26371, 26372, 26373, 26374, 26375, 26380, 26382, 26383, 26385, 26386, 26387, 26390, 26392, 26393, 26394, 26396, 26398, 26400, 26401, 26402, 26403, 26404, 26405, 26407, 26409, 26414, 26416, 26418, 26419, 26422, 26423, 26424, 26425, 26427, 26428, 26430, 26431, 26433, 26436, 26437, 26439, 26442, 26443, 26445, 26450, 26452, 26453, 26455, 26456, 26457, 26458, 26459, 26461, 26466, 26467, 26468, 26470, 26471, 26475, 26476, 26478, 26481, 26484, 26486, 26488, 26489, 26490, 26491, 26493, 26496, 26498, 26499, 26501, 26502, 26504, 26506, 26508, 26509, 26510, 26511, 26513, 26514, 26515, 26516, 26518, 26521, 26523, 26527, 26528, 26529, 26532, 26534, 26537, 26540, 26542, 26545, 26546, 26548, 26553, 26554, 26555, 26556, 26557, 26558, 26559, 26560, 26562, 26565, 26566, 26567, 26568, 26569, 26570, 26571, 26572, 26573, 26574, 26581, 26582, 26583, 26587, 26591, 26593, 26595, 26596, 26598, 26599, 26600, 26602, 26603, 26605, 26606, 26610, 26613, 26614, 26615, 26616, 26617, 26618, 26619, 26620, 26622, 26625, 26626, 26627, 26628, 26630, 26637, 26640, 26642, 26644, 26645, 26648, 26649, 26650, 26651, 26652, 26654, 26655, 26656, 26658, 26659, 26660, 26661, 26662, 26663, 26664, 26667, 26668, 26669, 26670, 26671, 26672, 26673, 26676, 26677, 26678, 26682, 26683, 26687, 26695, 26699, 26701, 26703, 26706, 26710, 26711, 26712, 26713, 26714, 26715, 26716, 26717, 26718, 26719, 26730, 26732, 26733, 26734, 26735, 26736, 26737, 26738, 26739, 26741, 26744, 26745, 26746, 26747, 26748, 26749, 26750, 26751, 26752, 26754, 26756, 26759, 26760, 26761, 26762, 26763, 26764, 26765, 26766, 26768, 26769, 26770, 26772, 26773, 26774, 26776, 26777, 26778, 26779, 26780, 26781, 26782, 26783, 26784, 26785, 26787, 26788, 26789, 26793, 26794, 26795, 26796, 26798, 26801, 26802, 26804, 26806, 26807, 26808, 26809, 26810, 26811, 26812, 26813, 26814, 26815, 26817, 26819, 26820, 26821, 26822, 26823, 26824, 26826, 26828, 26830, 26831, 26832, 26833, 26835, 26836, 26838, 26839, 26841, 26843, 26844, 26845, 26846, 26847, 26849, 26850, 26852, 26853, 26854, 26855, 26856, 26857, 26858, 26859, 26860, 26861, 26863, 26866, 26867, 26868, 26870, 26871, 26872, 26875, 26877, 26878, 26879, 26880, 26882, 26883, 26884, 26886, 26887, 26888, 26889, 26890, 26892, 26895, 26897, 26899, 26900, 26901, 26902, 26903, 26904, 26905, 26906, 26907, 26908, 26909, 26910, 26913, 26914, 26915, 26917, 26918, 26919, 26920, 26921, 26922, 26923, 26924, 26926, 26927, 26929, 26930, 26931, 26933, 26934, 26935, 26936, 26938, 26939, 26940, 26942, 26944, 26945, 26947, 26948, 26949, 26950, 26951, 26952, 26953, 26954, 26955, 26956, 26957, 26958, 26959, 26960, 26961, 26962, 26963, 26965, 26966, 26968, 26969, 26971, 26972, 26975, 26977, 26978, 26980, 26981, 26983, 26984, 26985, 26986, 26988, 26989, 26991, 26992, 26994, 26995, 26996, 26997, 26998, 27002, 27003, 27005, 27006, 27007, 27009, 27011, 27013, 27018, 27019, 27020, 27022, 27023, 27024, 27025, 27026, 27027, 27030, 27031, 27033, 27034, 27037, 27038, 27039, 27040, 27041, 27042, 27043, 27044, 27045, 27046, 27049, 27050, 27052, 27054, 27055, 27056, 27058, 27059, 27061, 27062, 27064, 27065, 27066, 27068, 27069, 27070, 27071, 27072, 27074, 27075, 27076, 27077, 27078, 27079, 27080, 27081, 27083, 27085, 27087, 27089, 27090, 27091, 27093, 27094, 27095, 27096, 27097, 27098, 27100, 27101, 27102, 27105, 27106, 27107, 27108, 27109, 27110, 27111, 27112, 27113, 27114, 27115, 27116, 27118, 27119, 27120, 27121, 27123, 27124, 27125, 27126, 27127, 27128, 27129, 27130, 27131, 27132, 27134, 27136, 27137, 27138, 27139, 27140, 27141, 27142, 27143, 27144, 27145, 27147, 27148, 27149, 27150, 27151, 27152, 27153, 27154, 27155, 27156, 27157, 27158, 27161, 27162, 27163, 27164, 27165, 27166, 27168, 27170, 27171, 27172, 27173, 27174, 27175, 27177, 27179, 27180, 27181, 27182, 27184, 27186, 27187, 27188, 27190, 27191, 27192, 27193, 27194, 27195, 27196, 27199, 27200, 27201, 27202, 27203, 27205, 27206, 27208, 27209, 27210, 27211, 27212, 27213, 27214, 27215, 27217, 27218, 27219, 27220, 27221, 27222, 27223, 27226, 27228, 27229, 27230, 27231, 27232, 27234, 27235, 27236, 27238, 27239, 27240, 27241, 27242, 27243, 27244, 27245, 27246, 27247, 27248, 27250, 27251, 27252, 27253, 27254, 27255, 27256, 27258, 27259, 27261, 27262, 27263, 27265, 27266, 27267, 27269, 27270, 27271, 27272, 27273, 27274, 27275, 27276, 27277, 27279, 27282, 27283, 27284, 27285, 27286, 27288, 27289, 27290, 27291, 27292, 27293, 27294, 27295, 27297, 27298, 27299, 27300, 27301, 27302, 27303, 27304, 27306, 27309, 27310, 27311, 27312, 27313, 27314, 27315, 27316, 27317, 27318, 27319, 27320, 27321, 27322, 27323, 27324, 27325, 27326, 27327, 27328, 27329, 27330, 27331, 27332, 27333, 27334, 27335, 27336, 27337, 27338, 27339, 27340, 27341, 27342, 27343, 27344, 27345, 27346, 27347, 27348, 27349, 27350, 27351, 27352, 27353, 27354, 27355, 27356, 27357, 27358, 27359, 27360, 27361, 27362, 27363, 27364, 27365, 27366, 27367, 27368, 27369, 27370, 27371, 27372, 27373, 27374, 27375, 27376, 27377, 27378, 27379, 27380, 27381, 27382, 27383, 27384, 27385, 27386, 27387, 27388, 27389, 27390, 27391, 27392, 27393, 27394, 27395, 27396, 27397, 27398, 27399, 27400, 27401, 27402, 27403, 27404, 27405, 27406, 27407, 27408, 27409, 27410, 27411, 27412, 27413, 27414, 27415, 27416, 27417, 27418, 27419, 27420, 27421, 27422, 27423, 27429, 27430, 27432, 27433, 27434, 27435, 27436, 27437, 27438, 27439, 27440, 27441, 27443, 27444, 27445, 27446, 27448, 27451, 27452, 27453, 27455, 27456, 27457, 27458, 27460, 27461, 27464, 27466, 27467, 27469, 27470, 27471, 27472, 27473, 27474, 27475, 27476, 27477, 27478, 27479, 27480, 27482, 27483, 27484, 27485, 27486, 27487, 27488, 27489, 27496, 27497, 27499, 27500, 27501, 27502, 27503, 27504, 27505, 27506, 27507, 27508, 27509, 27510, 27511, 27512, 27514, 27517, 27518, 27519, 27520, 27525, 27528, 27532, 27534, 27535, 27536, 27537, 27540, 27541, 27543, 27544, 27545, 27548, 27549, 27550, 27551, 27552, 27554, 27555, 27556, 27557, 27558, 27559, 27560, 27561, 27563, 27564, 27565, 27566, 27567, 27568, 27569, 27570, 27574, 27576, 27577, 27578, 27579, 27580, 27581, 27582, 27584, 27587, 27588, 27590, 27591, 27592, 27593, 27594, 27596, 27598, 27600, 27601, 27608, 27610, 27612, 27613, 27614, 27615, 27616, 27618, 27619, 27620, 27621, 27622, 27623, 27624, 27625, 27628, 27629, 27630, 27632, 27633, 27634, 27636, 27638, 27639, 27640, 27642, 27643, 27644, 27646, 27647, 27648, 27649, 27650, 27651, 27652, 27656, 27657, 27658, 27659, 27660, 27662, 27666, 27671, 27676, 27677, 27678, 27680, 27683, 27685, 27691, 27692, 27693, 27697, 27699, 27702, 27703, 27705, 27706, 27707, 27708, 27710, 27711, 27715, 27716, 27717, 27720, 27723, 27724, 27725, 27726, 27727, 27729, 27730, 27731, 27734, 27736, 27737, 27738, 27746, 27747, 27749, 27750, 27751, 27755, 27756, 27757, 27758, 27759, 27761, 27763, 27765, 27767, 27768, 27770, 27771, 27772, 27775, 27776, 27780, 27783, 27786, 27787, 27789, 27790, 27793, 27794, 27797, 27798, 27799, 27800, 27802, 27804, 27805, 27806, 27808, 27810, 27816, 27820, 27823, 27824, 27828, 27829, 27830, 27831, 27834, 27840, 27841, 27842, 27843, 27846, 27847, 27848, 27851, 27853, 27854, 27855, 27857, 27858, 27864, 27865, 27866, 27868, 27869, 27871, 27876, 27878, 27879, 27881, 27884, 27885, 27890, 27892, 27897, 27903, 27904, 27906, 27907, 27909, 27910, 27912, 27913, 27914, 27917, 27919, 27920, 27921, 27923, 27924, 27925, 27926, 27928, 27932, 27933, 27935, 27936, 27937, 27938, 27939, 27940, 27942, 27944, 27945, 27948, 27949, 27951, 27952, 27956, 27958, 27959, 27960, 27962, 27967, 27968, 27970, 27972, 27977, 27980, 27984, 27989, 27990, 27991, 27992, 27995, 27997, 27999, 28001, 28002, 28004, 28005, 28007, 28008, 28011, 28012, 28013, 28016, 28017, 28018, 28019, 28021, 28022, 28025, 28026, 28027, 28029, 28030, 28031, 28032, 28033, 28035, 28036, 28038, 28039, 28042, 28043, 28045, 28047, 28048, 28050, 28054, 28055, 28056, 28057, 28058, 28060, 28066, 28069, 28076, 28077, 28080, 28081, 28083, 28084, 28086, 28087, 28089, 28090, 28091, 28092, 28093, 28094, 28097, 28098, 28099, 28104, 28105, 28106, 28109, 28110, 28111, 28112, 28114, 28115, 28116, 28117, 28119, 28122, 28123, 28124, 28127, 28130, 28131, 28133, 28135, 28136, 28137, 28138, 28141, 28143, 28144, 28146, 28148, 28149, 28150, 28152, 28154, 28157, 28158, 28159, 28160, 28161, 28162, 28163, 28164, 28166, 28167, 28168, 28169, 28171, 28175, 28178, 28179, 28181, 28184, 28185, 28187, 28188, 28190, 28191, 28194, 28198, 28199, 28200, 28202, 28204, 28206, 28208, 28209, 28211, 28213, 28214, 28215, 28217, 28219, 28220, 28221, 28222, 28223, 28224, 28225, 28226, 28229, 28230, 28231, 28232, 28233, 28234, 28235, 28236, 28239, 28240, 28241, 28242, 28245, 28247, 28249, 28250, 28252, 28253, 28254, 28256, 28257, 28258, 28259, 28260, 28261, 28262, 28263, 28264, 28265, 28266, 28268, 28269, 28271, 28272, 28273, 28274, 28275, 28276, 28277, 28278, 28279, 28280, 28281, 28282, 28283, 28284, 28285, 28288, 28289, 28290, 28292, 28295, 28296, 28298, 28299, 28300, 28301, 28302, 28305, 28306, 28307, 28308, 28309, 28310, 28311, 28313, 28314, 28315, 28317, 28318, 28320, 28321, 28323, 28324, 28326, 28328, 28329, 28331, 28332, 28333, 28334, 28336, 28339, 28341, 28344, 28345, 28348, 28350, 28351, 28352, 28355, 28356, 28357, 28358, 28360, 28361, 28362, 28364, 28365, 28366, 28368, 28370, 28374, 28376, 28377, 28379, 28380, 28381, 28387, 28391, 28394, 28395, 28396, 28397, 28398, 28399, 28400, 28401, 28402, 28403, 28405, 28406, 28407, 28408, 28410, 28411, 28412, 28413, 28414, 28415, 28416, 28417, 28419, 28420, 28421, 28423, 28424, 28426, 28427, 28428, 28429, 28430, 28432, 28433, 28434, 28438, 28439, 28440, 28441, 28442, 28443, 28444, 28445, 28446, 28447, 28449, 28450, 28451, 28453, 28454, 28455, 28456, 28460, 28462, 28464, 28466, 28468, 28469, 28471, 28472, 28473, 28474, 28475, 28476, 28477, 28479, 28480, 28481, 28482, 28483, 28484, 28485, 28488, 28489, 28490, 28492, 28494, 28495, 28496, 28497, 28498, 28499, 28500, 28501, 28502, 28503, 28505, 28506, 28507, 28509, 28511, 28512, 28513, 28515, 28516, 28517, 28519, 28520, 28521, 28522, 28523, 28524, 28527, 28528, 28529, 28531, 28533, 28534, 28535, 28537, 28539, 28541, 28542, 28543, 28544, 28545, 28546, 28547, 28549, 28550, 28551, 28554, 28555, 28559, 28560, 28561, 28562, 28563, 28564, 28565, 28566, 28567, 28568, 28569, 28570, 28571, 28573, 28574, 28575, 28576, 28578, 28579, 28580, 28581, 28582, 28584, 28585, 28586, 28587, 28588, 28589, 28590, 28591, 28592, 28593, 28594, 28596, 28597, 28599, 28600, 28602, 28603, 28604, 28605, 28606, 28607, 28609, 28611, 28612, 28613, 28614, 28615, 28616, 28618, 28619, 28620, 28621, 28622, 28623, 28624, 28627, 28628, 28629, 28630, 28631, 28632, 28633, 28634, 28635, 28636, 28637, 28639, 28642, 28643, 28644, 28645, 28646, 28647, 28648, 28649, 28650, 28651, 28652, 28653, 28656, 28657, 28658, 28659, 28660, 28661, 28662, 28663, 28664, 28665, 28666, 28667, 28668, 28669, 28670, 28671, 28672, 28673, 28674, 28675, 28676, 28677, 28678, 28679, 28680, 28681, 28682, 28683, 28684, 28685, 28686, 28687, 28688, 28690, 28691, 28692, 28693, 28694, 28695, 28696, 28697, 28700, 28701, 28702, 28703, 28704, 28705, 28706, 28708, 28709, 28710, 28711, 28712, 28713, 28714, 28715, 28716, 28717, 28718, 28719, 28720, 28721, 28722, 28723, 28724, 28726, 28727, 28728, 28730, 28731, 28732, 28733, 28734, 28735, 28736, 28737, 28738, 28739, 28740, 28741, 28742, 28743, 28744, 28745, 28746, 28747, 28749, 28750, 28752, 28753, 28754, 28755, 28756, 28757, 28758, 28759, 28760, 28761, 28762, 28763, 28764, 28765, 28767, 28768, 28769, 28770, 28771, 28772, 28773, 28774, 28775, 28776, 28777, 28778, 28782, 28785, 28786, 28787, 28788, 28791, 28793, 28794, 28795, 28797, 28801, 28802, 28803, 28804, 28806, 28807, 28808, 28811, 28812, 28813, 28815, 28816, 28817, 28819, 28823, 28824, 28826, 28827, 28830, 28831, 28832, 28833, 28834, 28835, 28836, 28837, 28838, 28839, 28840, 28841, 28842, 28848, 28850, 28852, 28853, 28854, 28858, 28862, 28863, 28868, 28869, 28870, 28871, 28873, 28875, 28876, 28877, 28878, 28879, 28880, 28881, 28882, 28883, 28884, 28885, 28886, 28887, 28890, 28892, 28893, 28894, 28896, 28897, 28898, 28899, 28901, 28906, 28910, 28912, 28913, 28914, 28915, 28916, 28917, 28918, 28920, 28922, 28923, 28924, 28926, 28927, 28928, 28929, 28930, 28931, 28932, 28933, 28934, 28935, 28936, 28939, 28940, 28941, 28942, 28943, 28945, 28946, 28948, 28951, 28955, 28956, 28957, 28958, 28959, 28960, 28961, 28962, 28963, 28964, 28965, 28967, 28968, 28969, 28970, 28971, 28972, 28973, 28974, 28978, 28979, 28980, 28981, 28983, 28984, 28985, 28986, 28987, 28988, 28989, 28990, 28991, 28992, 28993, 28994, 28995, 28996, 28998, 28999, 29000, 29001, 29003, 29005, 29007, 29008, 29009, 29010, 29011, 29012, 29013, 29014, 29015, 29016, 29017, 29018, 29019, 29021, 29023, 29024, 29025, 29026, 29027, 29029, 29033, 29034, 29035, 29036, 29037, 29039, 29040, 29041, 29044, 29045, 29046, 29047, 29049, 29051, 29052, 29054, 29055, 29056, 29057, 29058, 29059, 29061, 29062, 29063, 29064, 29065, 29067, 29068, 29069, 29070, 29072, 29073, 29074, 29075, 29077, 29078, 29079, 29082, 29083, 29084, 29085, 29086, 29089, 29090, 29091, 29092, 29093, 29094, 29095, 29097, 29098, 29099, 29101, 29102, 29103, 29104, 29105, 29106, 29108, 29110, 29111, 29112, 29114, 29115, 29116, 29117, 29118, 29119, 29120, 29121, 29122, 29124, 29125, 29126, 29127, 29128, 29129, 29130, 29131, 29132, 29133, 29135, 29136, 29137, 29138, 29139, 29142, 29143, 29144, 29145, 29146, 29147, 29148, 29149, 29150, 29151, 29153, 29154, 29155, 29156, 29158, 29160, 29161, 29162, 29163, 29164, 29165, 29167, 29168, 29169, 29170, 29171, 29172, 29173, 29174, 29175, 29176, 29178, 29179, 29180, 29181, 29182, 29183, 29184, 29185, 29186, 29187, 29188, 29189, 29191, 29192, 29193, 29194, 29195, 29196, 29197, 29198, 29199, 29200, 29201, 29202, 29203, 29204, 29205, 29206, 29207, 29208, 29209, 29210, 29211, 29212, 29214, 29215, 29216, 29217, 29218, 29219, 29220, 29221, 29222, 29223, 29225, 29227, 29229, 29230, 29231, 29234, 29235, 29236, 29242, 29244, 29246, 29248, 29249, 29250, 29251, 29252, 29253, 29254, 29257, 29258, 29259, 29262, 29263, 29264, 29265, 29267, 29268, 29269, 29271, 29272, 29274, 29276, 29278, 29280, 29283, 29284, 29285, 29288, 29290, 29291, 29292, 29293, 29296, 29297, 29299, 29300, 29302, 29303, 29304, 29307, 29308, 29309, 29314, 29315, 29317, 29318, 29319, 29320, 29321, 29324, 29326, 29328, 29329, 29331, 29332, 29333, 29334, 29335, 29336, 29337, 29338, 29339, 29340, 29341, 29342, 29344, 29345, 29346, 29347, 29348, 29349, 29350, 29351, 29352, 29353, 29354, 29355, 29358, 29361, 29362, 29363, 29365, 29370, 29371, 29372, 29373, 29374, 29375, 29376, 29381, 29382, 29383, 29385, 29386, 29387, 29388, 29391, 29393, 29395, 29396, 29397, 29398, 29400, 29402, 29403, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 12288, 12289, 12290, 183, 713, 711, 168, 12291, 12293, 8212, 65374, 8214, 8230, 8216, 8217, 8220, 8221, 12308, 12309, 12296, 12297, 12298, 12299, 12300, 12301, 12302, 12303, 12310, 12311, 12304, 12305, 177, 215, 247, 8758, 8743, 8744, 8721, 8719, 8746, 8745, 8712, 8759, 8730, 8869, 8741, 8736, 8978, 8857, 8747, 8750, 8801, 8780, 8776, 8765, 8733, 8800, 8814, 8815, 8804, 8805, 8734, 8757, 8756, 9794, 9792, 176, 8242, 8243, 8451, 65284, 164, 65504, 65505, 8240, 167, 8470, 9734, 9733, 9675, 9679, 9678, 9671, 9670, 9633, 9632, 9651, 9650, 8251, 8594, 8592, 8593, 8595, 12307, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 8560, 8561, 8562, 8563, 8564, 8565, 8566, 8567, 8568, 8569, null, null, null, null, null, null, 9352, 9353, 9354, 9355, 9356, 9357, 9358, 9359, 9360, 9361, 9362, 9363, 9364, 9365, 9366, 9367, 9368, 9369, 9370, 9371, 9332, 9333, 9334, 9335, 9336, 9337, 9338, 9339, 9340, 9341, 9342, 9343, 9344, 9345, 9346, 9347, 9348, 9349, 9350, 9351, 9312, 9313, 9314, 9315, 9316, 9317, 9318, 9319, 9320, 9321, 8364, null, 12832, 12833, 12834, 12835, 12836, 12837, 12838, 12839, 12840, 12841, null, null, 8544, 8545, 8546, 8547, 8548, 8549, 8550, 8551, 8552, 8553, 8554, 8555, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 12288, 65281, 65282, 65283, 65509, 65285, 65286, 65287, 65288, 65289, 65290, 65291, 65292, 65293, 65294, 65295, 65296, 65297, 65298, 65299, 65300, 65301, 65302, 65303, 65304, 65305, 65306, 65307, 65308, 65309, 65310, 65311, 65312, 65313, 65314, 65315, 65316, 65317, 65318, 65319, 65320, 65321, 65322, 65323, 65324, 65325, 65326, 65327, 65328, 65329, 65330, 65331, 65332, 65333, 65334, 65335, 65336, 65337, 65338, 65339, 65340, 65341, 65342, 65343, 65344, 65345, 65346, 65347, 65348, 65349, 65350, 65351, 65352, 65353, 65354, 65355, 65356, 65357, 65358, 65359, 65360, 65361, 65362, 65363, 65364, 65365, 65366, 65367, 65368, 65369, 65370, 65371, 65372, 65373, 65507, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 12353, 12354, 12355, 12356, 12357, 12358, 12359, 12360, 12361, 12362, 12363, 12364, 12365, 12366, 12367, 12368, 12369, 12370, 12371, 12372, 12373, 12374, 12375, 12376, 12377, 12378, 12379, 12380, 12381, 12382, 12383, 12384, 12385, 12386, 12387, 12388, 12389, 12390, 12391, 12392, 12393, 12394, 12395, 12396, 12397, 12398, 12399, 12400, 12401, 12402, 12403, 12404, 12405, 12406, 12407, 12408, 12409, 12410, 12411, 12412, 12413, 12414, 12415, 12416, 12417, 12418, 12419, 12420, 12421, 12422, 12423, 12424, 12425, 12426, 12427, 12428, 12429, 12430, 12431, 12432, 12433, 12434, 12435, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 12449, 12450, 12451, 12452, 12453, 12454, 12455, 12456, 12457, 12458, 12459, 12460, 12461, 12462, 12463, 12464, 12465, 12466, 12467, 12468, 12469, 12470, 12471, 12472, 12473, 12474, 12475, 12476, 12477, 12478, 12479, 12480, 12481, 12482, 12483, 12484, 12485, 12486, 12487, 12488, 12489, 12490, 12491, 12492, 12493, 12494, 12495, 12496, 12497, 12498, 12499, 12500, 12501, 12502, 12503, 12504, 12505, 12506, 12507, 12508, 12509, 12510, 12511, 12512, 12513, 12514, 12515, 12516, 12517, 12518, 12519, 12520, 12521, 12522, 12523, 12524, 12525, 12526, 12527, 12528, 12529, 12530, 12531, 12532, 12533, 12534, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, null, null, null, null, null, null, null, null, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 963, 964, 965, 966, 967, 968, 969, null, null, null, null, null, null, null, 65077, 65078, 65081, 65082, 65087, 65088, 65085, 65086, 65089, 65090, 65091, 65092, null, null, 65083, 65084, 65079, 65080, 65073, null, 65075, 65076, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 1040, 1041, 1042, 1043, 1044, 1045, 1025, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 1072, 1073, 1074, 1075, 1076, 1077, 1105, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, null, null, null, null, null, null, null, null, null, null, null, null, null, 714, 715, 729, 8211, 8213, 8229, 8245, 8453, 8457, 8598, 8599, 8600, 8601, 8725, 8735, 8739, 8786, 8806, 8807, 8895, 9552, 9553, 9554, 9555, 9556, 9557, 9558, 9559, 9560, 9561, 9562, 9563, 9564, 9565, 9566, 9567, 9568, 9569, 9570, 9571, 9572, 9573, 9574, 9575, 9576, 9577, 9578, 9579, 9580, 9581, 9582, 9583, 9584, 9585, 9586, 9587, 9601, 9602, 9603, 9604, 9605, 9606, 9607, 9608, 9609, 9610, 9611, 9612, 9613, 9614, 9615, 9619, 9620, 9621, 9660, 9661, 9698, 9699, 9700, 9701, 9737, 8853, 12306, 12317, 12318, null, null, null, null, null, null, null, null, null, null, null, 257, 225, 462, 224, 275, 233, 283, 232, 299, 237, 464, 236, 333, 243, 466, 242, 363, 250, 468, 249, 470, 472, 474, 476, 252, 234, 593, null, 324, 328, 505, 609, null, null, null, null, 12549, 12550, 12551, 12552, 12553, 12554, 12555, 12556, 12557, 12558, 12559, 12560, 12561, 12562, 12563, 12564, 12565, 12566, 12567, 12568, 12569, 12570, 12571, 12572, 12573, 12574, 12575, 12576, 12577, 12578, 12579, 12580, 12581, 12582, 12583, 12584, 12585, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 12321, 12322, 12323, 12324, 12325, 12326, 12327, 12328, 12329, 12963, 13198, 13199, 13212, 13213, 13214, 13217, 13252, 13262, 13265, 13266, 13269, 65072, 65506, 65508, null, 8481, 12849, null, 8208, null, null, null, 12540, 12443, 12444, 12541, 12542, 12294, 12445, 12446, 65097, 65098, 65099, 65100, 65101, 65102, 65103, 65104, 65105, 65106, 65108, 65109, 65110, 65111, 65113, 65114, 65115, 65116, 65117, 65118, 65119, 65120, 65121, 65122, 65123, 65124, 65125, 65126, 65128, 65129, 65130, 65131, 12350, 12272, 12273, 12274, 12275, 12276, 12277, 12278, 12279, 12280, 12281, 12282, 12283, 12295, null, null, null, null, null, null, null, null, null, null, null, null, null, 9472, 9473, 9474, 9475, 9476, 9477, 9478, 9479, 9480, 9481, 9482, 9483, 9484, 9485, 9486, 9487, 9488, 9489, 9490, 9491, 9492, 9493, 9494, 9495, 9496, 9497, 9498, 9499, 9500, 9501, 9502, 9503, 9504, 9505, 9506, 9507, 9508, 9509, 9510, 9511, 9512, 9513, 9514, 9515, 9516, 9517, 9518, 9519, 9520, 9521, 9522, 9523, 9524, 9525, 9526, 9527, 9528, 9529, 9530, 9531, 9532, 9533, 9534, 9535, 9536, 9537, 9538, 9539, 9540, 9541, 9542, 9543, 9544, 9545, 9546, 9547, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 29404, 29405, 29407, 29410, 29411, 29412, 29413, 29414, 29415, 29418, 29419, 29429, 29430, 29433, 29437, 29438, 29439, 29440, 29442, 29444, 29445, 29446, 29447, 29448, 29449, 29451, 29452, 29453, 29455, 29456, 29457, 29458, 29460, 29464, 29465, 29466, 29471, 29472, 29475, 29476, 29478, 29479, 29480, 29485, 29487, 29488, 29490, 29491, 29493, 29494, 29498, 29499, 29500, 29501, 29504, 29505, 29506, 29507, 29508, 29509, 29510, 29511, 29512, 29513, 29514, 29515, 29516, 29518, 29519, 29521, 29523, 29524, 29525, 29526, 29528, 29529, 29530, 29531, 29532, 29533, 29534, 29535, 29537, 29538, 29539, 29540, 29541, 29542, 29543, 29544, 29545, 29546, 29547, 29550, 29552, 29553, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 29554, 29555, 29556, 29557, 29558, 29559, 29560, 29561, 29562, 29563, 29564, 29565, 29567, 29568, 29569, 29570, 29571, 29573, 29574, 29576, 29578, 29580, 29581, 29583, 29584, 29586, 29587, 29588, 29589, 29591, 29592, 29593, 29594, 29596, 29597, 29598, 29600, 29601, 29603, 29604, 29605, 29606, 29607, 29608, 29610, 29612, 29613, 29617, 29620, 29621, 29622, 29624, 29625, 29628, 29629, 29630, 29631, 29633, 29635, 29636, 29637, 29638, 29639, 29643, 29644, 29646, 29650, 29651, 29652, 29653, 29654, 29655, 29656, 29658, 29659, 29660, 29661, 29663, 29665, 29666, 29667, 29668, 29670, 29672, 29674, 29675, 29676, 29678, 29679, 29680, 29681, 29683, 29684, 29685, 29686, 29687, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 29688, 29689, 29690, 29691, 29692, 29693, 29694, 29695, 29696, 29697, 29698, 29700, 29703, 29704, 29707, 29708, 29709, 29710, 29713, 29714, 29715, 29716, 29717, 29718, 29719, 29720, 29721, 29724, 29725, 29726, 29727, 29728, 29729, 29731, 29732, 29735, 29737, 29739, 29741, 29743, 29745, 29746, 29751, 29752, 29753, 29754, 29755, 29757, 29758, 29759, 29760, 29762, 29763, 29764, 29765, 29766, 29767, 29768, 29769, 29770, 29771, 29772, 29773, 29774, 29775, 29776, 29777, 29778, 29779, 29780, 29782, 29784, 29789, 29792, 29793, 29794, 29795, 29796, 29797, 29798, 29799, 29800, 29801, 29802, 29803, 29804, 29806, 29807, 29809, 29810, 29811, 29812, 29813, 29816, 29817, 29818, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 29819, 29820, 29821, 29823, 29826, 29828, 29829, 29830, 29832, 29833, 29834, 29836, 29837, 29839, 29841, 29842, 29843, 29844, 29845, 29846, 29847, 29848, 29849, 29850, 29851, 29853, 29855, 29856, 29857, 29858, 29859, 29860, 29861, 29862, 29866, 29867, 29868, 29869, 29870, 29871, 29872, 29873, 29874, 29875, 29876, 29877, 29878, 29879, 29880, 29881, 29883, 29884, 29885, 29886, 29887, 29888, 29889, 29890, 29891, 29892, 29893, 29894, 29895, 29896, 29897, 29898, 29899, 29900, 29901, 29902, 29903, 29904, 29905, 29907, 29908, 29909, 29910, 29911, 29912, 29913, 29914, 29915, 29917, 29919, 29921, 29925, 29927, 29928, 29929, 29930, 29931, 29932, 29933, 29936, 29937, 29938, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 29939, 29941, 29944, 29945, 29946, 29947, 29948, 29949, 29950, 29952, 29953, 29954, 29955, 29957, 29958, 29959, 29960, 29961, 29962, 29963, 29964, 29966, 29968, 29970, 29972, 29973, 29974, 29975, 29979, 29981, 29982, 29984, 29985, 29986, 29987, 29988, 29990, 29991, 29994, 29998, 30004, 30006, 30009, 30012, 30013, 30015, 30017, 30018, 30019, 30020, 30022, 30023, 30025, 30026, 30029, 30032, 30033, 30034, 30035, 30037, 30038, 30039, 30040, 30045, 30046, 30047, 30048, 30049, 30050, 30051, 30052, 30055, 30056, 30057, 30059, 30060, 30061, 30062, 30063, 30064, 30065, 30067, 30069, 30070, 30071, 30074, 30075, 30076, 30077, 30078, 30080, 30081, 30082, 30084, 30085, 30087, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 30088, 30089, 30090, 30092, 30093, 30094, 30096, 30099, 30101, 30104, 30107, 30108, 30110, 30114, 30118, 30119, 30120, 30121, 30122, 30125, 30134, 30135, 30138, 30139, 30143, 30144, 30145, 30150, 30155, 30156, 30158, 30159, 30160, 30161, 30163, 30167, 30169, 30170, 30172, 30173, 30175, 30176, 30177, 30181, 30185, 30188, 30189, 30190, 30191, 30194, 30195, 30197, 30198, 30199, 30200, 30202, 30203, 30205, 30206, 30210, 30212, 30214, 30215, 30216, 30217, 30219, 30221, 30222, 30223, 30225, 30226, 30227, 30228, 30230, 30234, 30236, 30237, 30238, 30241, 30243, 30247, 30248, 30252, 30254, 30255, 30257, 30258, 30262, 30263, 30265, 30266, 30267, 30269, 30273, 30274, 30276, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 30277, 30278, 30279, 30280, 30281, 30282, 30283, 30286, 30287, 30288, 30289, 30290, 30291, 30293, 30295, 30296, 30297, 30298, 30299, 30301, 30303, 30304, 30305, 30306, 30308, 30309, 30310, 30311, 30312, 30313, 30314, 30316, 30317, 30318, 30320, 30321, 30322, 30323, 30324, 30325, 30326, 30327, 30329, 30330, 30332, 30335, 30336, 30337, 30339, 30341, 30345, 30346, 30348, 30349, 30351, 30352, 30354, 30356, 30357, 30359, 30360, 30362, 30363, 30364, 30365, 30366, 30367, 30368, 30369, 30370, 30371, 30373, 30374, 30375, 30376, 30377, 30378, 30379, 30380, 30381, 30383, 30384, 30387, 30389, 30390, 30391, 30392, 30393, 30394, 30395, 30396, 30397, 30398, 30400, 30401, 30403, 21834, 38463, 22467, 25384, 21710, 21769, 21696, 30353, 30284, 34108, 30702, 33406, 30861, 29233, 38552, 38797, 27688, 23433, 20474, 25353, 26263, 23736, 33018, 26696, 32942, 26114, 30414, 20985, 25942, 29100, 32753, 34948, 20658, 22885, 25034, 28595, 33453, 25420, 25170, 21485, 21543, 31494, 20843, 30116, 24052, 25300, 36299, 38774, 25226, 32793, 22365, 38712, 32610, 29240, 30333, 26575, 30334, 25670, 20336, 36133, 25308, 31255, 26001, 29677, 25644, 25203, 33324, 39041, 26495, 29256, 25198, 25292, 20276, 29923, 21322, 21150, 32458, 37030, 24110, 26758, 27036, 33152, 32465, 26834, 30917, 34444, 38225, 20621, 35876, 33502, 32990, 21253, 35090, 21093, 30404, 30407, 30409, 30411, 30412, 30419, 30421, 30425, 30426, 30428, 30429, 30430, 30432, 30433, 30434, 30435, 30436, 30438, 30439, 30440, 30441, 30442, 30443, 30444, 30445, 30448, 30451, 30453, 30454, 30455, 30458, 30459, 30461, 30463, 30464, 30466, 30467, 30469, 30470, 30474, 30476, 30478, 30479, 30480, 30481, 30482, 30483, 30484, 30485, 30486, 30487, 30488, 30491, 30492, 30493, 30494, 30497, 30499, 30500, 30501, 30503, 30506, 30507, 30508, 30510, 30512, 30513, 30514, 30515, 30516, 30521, 30523, 30525, 30526, 30527, 30530, 30532, 30533, 30534, 30536, 30537, 30538, 30539, 30540, 30541, 30542, 30543, 30546, 30547, 30548, 30549, 30550, 30551, 30552, 30553, 30556, 34180, 38649, 20445, 22561, 39281, 23453, 25265, 25253, 26292, 35961, 40077, 29190, 26479, 30865, 24754, 21329, 21271, 36744, 32972, 36125, 38049, 20493, 29384, 22791, 24811, 28953, 34987, 22868, 33519, 26412, 31528, 23849, 32503, 29997, 27893, 36454, 36856, 36924, 40763, 27604, 37145, 31508, 24444, 30887, 34006, 34109, 27605, 27609, 27606, 24065, 24199, 30201, 38381, 25949, 24330, 24517, 36767, 22721, 33218, 36991, 38491, 38829, 36793, 32534, 36140, 25153, 20415, 21464, 21342, 36776, 36777, 36779, 36941, 26631, 24426, 33176, 34920, 40150, 24971, 21035, 30250, 24428, 25996, 28626, 28392, 23486, 25672, 20853, 20912, 26564, 19993, 31177, 39292, 28851, 30557, 30558, 30559, 30560, 30564, 30567, 30569, 30570, 30573, 30574, 30575, 30576, 30577, 30578, 30579, 30580, 30581, 30582, 30583, 30584, 30586, 30587, 30588, 30593, 30594, 30595, 30598, 30599, 30600, 30601, 30602, 30603, 30607, 30608, 30611, 30612, 30613, 30614, 30615, 30616, 30617, 30618, 30619, 30620, 30621, 30622, 30625, 30627, 30628, 30630, 30632, 30635, 30637, 30638, 30639, 30641, 30642, 30644, 30646, 30647, 30648, 30649, 30650, 30652, 30654, 30656, 30657, 30658, 30659, 30660, 30661, 30662, 30663, 30664, 30665, 30666, 30667, 30668, 30670, 30671, 30672, 30673, 30674, 30675, 30676, 30677, 30678, 30680, 30681, 30682, 30685, 30686, 30687, 30688, 30689, 30692, 30149, 24182, 29627, 33760, 25773, 25320, 38069, 27874, 21338, 21187, 25615, 38082, 31636, 20271, 24091, 33334, 33046, 33162, 28196, 27850, 39539, 25429, 21340, 21754, 34917, 22496, 19981, 24067, 27493, 31807, 37096, 24598, 25830, 29468, 35009, 26448, 25165, 36130, 30572, 36393, 37319, 24425, 33756, 34081, 39184, 21442, 34453, 27531, 24813, 24808, 28799, 33485, 33329, 20179, 27815, 34255, 25805, 31961, 27133, 26361, 33609, 21397, 31574, 20391, 20876, 27979, 23618, 36461, 25554, 21449, 33580, 33590, 26597, 30900, 25661, 23519, 23700, 24046, 35815, 25286, 26612, 35962, 25600, 25530, 34633, 39307, 35863, 32544, 38130, 20135, 38416, 39076, 26124, 29462, 30694, 30696, 30698, 30703, 30704, 30705, 30706, 30708, 30709, 30711, 30713, 30714, 30715, 30716, 30723, 30724, 30725, 30726, 30727, 30728, 30730, 30731, 30734, 30735, 30736, 30739, 30741, 30745, 30747, 30750, 30752, 30753, 30754, 30756, 30760, 30762, 30763, 30766, 30767, 30769, 30770, 30771, 30773, 30774, 30781, 30783, 30785, 30786, 30787, 30788, 30790, 30792, 30793, 30794, 30795, 30797, 30799, 30801, 30803, 30804, 30808, 30809, 30810, 30811, 30812, 30814, 30815, 30816, 30817, 30818, 30819, 30820, 30821, 30822, 30823, 30824, 30825, 30831, 30832, 30833, 30834, 30835, 30836, 30837, 30838, 30840, 30841, 30842, 30843, 30845, 30846, 30847, 30848, 30849, 30850, 30851, 22330, 23581, 24120, 38271, 20607, 32928, 21378, 25950, 30021, 21809, 20513, 36229, 25220, 38046, 26397, 22066, 28526, 24034, 21557, 28818, 36710, 25199, 25764, 25507, 24443, 28552, 37108, 33251, 36784, 23576, 26216, 24561, 27785, 38472, 36225, 34924, 25745, 31216, 22478, 27225, 25104, 21576, 20056, 31243, 24809, 28548, 35802, 25215, 36894, 39563, 31204, 21507, 30196, 25345, 21273, 27744, 36831, 24347, 39536, 32827, 40831, 20360, 23610, 36196, 32709, 26021, 28861, 20805, 20914, 34411, 23815, 23456, 25277, 37228, 30068, 36364, 31264, 24833, 31609, 20167, 32504, 30597, 19985, 33261, 21021, 20986, 27249, 21416, 36487, 38148, 38607, 28353, 38500, 26970, 30852, 30853, 30854, 30856, 30858, 30859, 30863, 30864, 30866, 30868, 30869, 30870, 30873, 30877, 30878, 30880, 30882, 30884, 30886, 30888, 30889, 30890, 30891, 30892, 30893, 30894, 30895, 30901, 30902, 30903, 30904, 30906, 30907, 30908, 30909, 30911, 30912, 30914, 30915, 30916, 30918, 30919, 30920, 30924, 30925, 30926, 30927, 30929, 30930, 30931, 30934, 30935, 30936, 30938, 30939, 30940, 30941, 30942, 30943, 30944, 30945, 30946, 30947, 30948, 30949, 30950, 30951, 30953, 30954, 30955, 30957, 30958, 30959, 30960, 30961, 30963, 30965, 30966, 30968, 30969, 30971, 30972, 30973, 30974, 30975, 30976, 30978, 30979, 30980, 30982, 30983, 30984, 30985, 30986, 30987, 30988, 30784, 20648, 30679, 25616, 35302, 22788, 25571, 24029, 31359, 26941, 20256, 33337, 21912, 20018, 30126, 31383, 24162, 24202, 38383, 21019, 21561, 28810, 25462, 38180, 22402, 26149, 26943, 37255, 21767, 28147, 32431, 34850, 25139, 32496, 30133, 33576, 30913, 38604, 36766, 24904, 29943, 35789, 27492, 21050, 36176, 27425, 32874, 33905, 22257, 21254, 20174, 19995, 20945, 31895, 37259, 31751, 20419, 36479, 31713, 31388, 25703, 23828, 20652, 33030, 30209, 31929, 28140, 32736, 26449, 23384, 23544, 30923, 25774, 25619, 25514, 25387, 38169, 25645, 36798, 31572, 30249, 25171, 22823, 21574, 27513, 20643, 25140, 24102, 27526, 20195, 36151, 34955, 24453, 36910, 30989, 30990, 30991, 30992, 30993, 30994, 30996, 30997, 30998, 30999, 31000, 31001, 31002, 31003, 31004, 31005, 31007, 31008, 31009, 31010, 31011, 31013, 31014, 31015, 31016, 31017, 31018, 31019, 31020, 31021, 31022, 31023, 31024, 31025, 31026, 31027, 31029, 31030, 31031, 31032, 31033, 31037, 31039, 31042, 31043, 31044, 31045, 31047, 31050, 31051, 31052, 31053, 31054, 31055, 31056, 31057, 31058, 31060, 31061, 31064, 31065, 31073, 31075, 31076, 31078, 31081, 31082, 31083, 31084, 31086, 31088, 31089, 31090, 31091, 31092, 31093, 31094, 31097, 31099, 31100, 31101, 31102, 31103, 31106, 31107, 31110, 31111, 31112, 31113, 31115, 31116, 31117, 31118, 31120, 31121, 31122, 24608, 32829, 25285, 20025, 21333, 37112, 25528, 32966, 26086, 27694, 20294, 24814, 28129, 35806, 24377, 34507, 24403, 25377, 20826, 33633, 26723, 20992, 25443, 36424, 20498, 23707, 31095, 23548, 21040, 31291, 24764, 36947, 30423, 24503, 24471, 30340, 36460, 28783, 30331, 31561, 30634, 20979, 37011, 22564, 20302, 28404, 36842, 25932, 31515, 29380, 28068, 32735, 23265, 25269, 24213, 22320, 33922, 31532, 24093, 24351, 36882, 32532, 39072, 25474, 28359, 30872, 28857, 20856, 38747, 22443, 30005, 20291, 30008, 24215, 24806, 22880, 28096, 27583, 30857, 21500, 38613, 20939, 20993, 25481, 21514, 38035, 35843, 36300, 29241, 30879, 34678, 36845, 35853, 21472, 31123, 31124, 31125, 31126, 31127, 31128, 31129, 31131, 31132, 31133, 31134, 31135, 31136, 31137, 31138, 31139, 31140, 31141, 31142, 31144, 31145, 31146, 31147, 31148, 31149, 31150, 31151, 31152, 31153, 31154, 31156, 31157, 31158, 31159, 31160, 31164, 31167, 31170, 31172, 31173, 31175, 31176, 31178, 31180, 31182, 31183, 31184, 31187, 31188, 31190, 31191, 31193, 31194, 31195, 31196, 31197, 31198, 31200, 31201, 31202, 31205, 31208, 31210, 31212, 31214, 31217, 31218, 31219, 31220, 31221, 31222, 31223, 31225, 31226, 31228, 31230, 31231, 31233, 31236, 31237, 31239, 31240, 31241, 31242, 31244, 31247, 31248, 31249, 31250, 31251, 31253, 31254, 31256, 31257, 31259, 31260, 19969, 30447, 21486, 38025, 39030, 40718, 38189, 23450, 35746, 20002, 19996, 20908, 33891, 25026, 21160, 26635, 20375, 24683, 20923, 27934, 20828, 25238, 26007, 38497, 35910, 36887, 30168, 37117, 30563, 27602, 29322, 29420, 35835, 22581, 30585, 36172, 26460, 38208, 32922, 24230, 28193, 22930, 31471, 30701, 38203, 27573, 26029, 32526, 22534, 20817, 38431, 23545, 22697, 21544, 36466, 25958, 39039, 22244, 38045, 30462, 36929, 25479, 21702, 22810, 22842, 22427, 36530, 26421, 36346, 33333, 21057, 24816, 22549, 34558, 23784, 40517, 20420, 39069, 35769, 23077, 24694, 21380, 25212, 36943, 37122, 39295, 24681, 32780, 20799, 32819, 23572, 39285, 27953, 20108, 31261, 31263, 31265, 31266, 31268, 31269, 31270, 31271, 31272, 31273, 31274, 31275, 31276, 31277, 31278, 31279, 31280, 31281, 31282, 31284, 31285, 31286, 31288, 31290, 31294, 31296, 31297, 31298, 31299, 31300, 31301, 31303, 31304, 31305, 31306, 31307, 31308, 31309, 31310, 31311, 31312, 31314, 31315, 31316, 31317, 31318, 31320, 31321, 31322, 31323, 31324, 31325, 31326, 31327, 31328, 31329, 31330, 31331, 31332, 31333, 31334, 31335, 31336, 31337, 31338, 31339, 31340, 31341, 31342, 31343, 31345, 31346, 31347, 31349, 31355, 31356, 31357, 31358, 31362, 31365, 31367, 31369, 31370, 31371, 31372, 31374, 31375, 31376, 31379, 31380, 31385, 31386, 31387, 31390, 31393, 31394, 36144, 21457, 32602, 31567, 20240, 20047, 38400, 27861, 29648, 34281, 24070, 30058, 32763, 27146, 30718, 38034, 32321, 20961, 28902, 21453, 36820, 33539, 36137, 29359, 39277, 27867, 22346, 33459, 26041, 32938, 25151, 38450, 22952, 20223, 35775, 32442, 25918, 33778, 38750, 21857, 39134, 32933, 21290, 35837, 21536, 32954, 24223, 27832, 36153, 33452, 37210, 21545, 27675, 20998, 32439, 22367, 28954, 27774, 31881, 22859, 20221, 24575, 24868, 31914, 20016, 23553, 26539, 34562, 23792, 38155, 39118, 30127, 28925, 36898, 20911, 32541, 35773, 22857, 20964, 20315, 21542, 22827, 25975, 32932, 23413, 25206, 25282, 36752, 24133, 27679, 31526, 20239, 20440, 26381, 31395, 31396, 31399, 31401, 31402, 31403, 31406, 31407, 31408, 31409, 31410, 31412, 31413, 31414, 31415, 31416, 31417, 31418, 31419, 31420, 31421, 31422, 31424, 31425, 31426, 31427, 31428, 31429, 31430, 31431, 31432, 31433, 31434, 31436, 31437, 31438, 31439, 31440, 31441, 31442, 31443, 31444, 31445, 31447, 31448, 31450, 31451, 31452, 31453, 31457, 31458, 31460, 31463, 31464, 31465, 31466, 31467, 31468, 31470, 31472, 31473, 31474, 31475, 31476, 31477, 31478, 31479, 31480, 31483, 31484, 31486, 31488, 31489, 31490, 31493, 31495, 31497, 31500, 31501, 31502, 31504, 31506, 31507, 31510, 31511, 31512, 31514, 31516, 31517, 31519, 31521, 31522, 31523, 31527, 31529, 31533, 28014, 28074, 31119, 34993, 24343, 29995, 25242, 36741, 20463, 37340, 26023, 33071, 33105, 24220, 33104, 36212, 21103, 35206, 36171, 22797, 20613, 20184, 38428, 29238, 33145, 36127, 23500, 35747, 38468, 22919, 32538, 21648, 22134, 22030, 35813, 25913, 27010, 38041, 30422, 28297, 24178, 29976, 26438, 26577, 31487, 32925, 36214, 24863, 31174, 25954, 36195, 20872, 21018, 38050, 32568, 32923, 32434, 23703, 28207, 26464, 31705, 30347, 39640, 33167, 32660, 31957, 25630, 38224, 31295, 21578, 21733, 27468, 25601, 25096, 40509, 33011, 30105, 21106, 38761, 33883, 26684, 34532, 38401, 38548, 38124, 20010, 21508, 32473, 26681, 36319, 32789, 26356, 24218, 32697, 31535, 31536, 31538, 31540, 31541, 31542, 31543, 31545, 31547, 31549, 31551, 31552, 31553, 31554, 31555, 31556, 31558, 31560, 31562, 31565, 31566, 31571, 31573, 31575, 31577, 31580, 31582, 31583, 31585, 31587, 31588, 31589, 31590, 31591, 31592, 31593, 31594, 31595, 31596, 31597, 31599, 31600, 31603, 31604, 31606, 31608, 31610, 31612, 31613, 31615, 31617, 31618, 31619, 31620, 31622, 31623, 31624, 31625, 31626, 31627, 31628, 31630, 31631, 31633, 31634, 31635, 31638, 31640, 31641, 31642, 31643, 31646, 31647, 31648, 31651, 31652, 31653, 31662, 31663, 31664, 31666, 31667, 31669, 31670, 31671, 31673, 31674, 31675, 31676, 31677, 31678, 31679, 31680, 31682, 31683, 31684, 22466, 32831, 26775, 24037, 25915, 21151, 24685, 40858, 20379, 36524, 20844, 23467, 24339, 24041, 27742, 25329, 36129, 20849, 38057, 21246, 27807, 33503, 29399, 22434, 26500, 36141, 22815, 36764, 33735, 21653, 31629, 20272, 27837, 23396, 22993, 40723, 21476, 34506, 39592, 35895, 32929, 25925, 39038, 22266, 38599, 21038, 29916, 21072, 23521, 25346, 35074, 20054, 25296, 24618, 26874, 20851, 23448, 20896, 35266, 31649, 39302, 32592, 24815, 28748, 36143, 20809, 24191, 36891, 29808, 35268, 22317, 30789, 24402, 40863, 38394, 36712, 39740, 35809, 30328, 26690, 26588, 36330, 36149, 21053, 36746, 28378, 26829, 38149, 37101, 22269, 26524, 35065, 36807, 21704, 31685, 31688, 31689, 31690, 31691, 31693, 31694, 31695, 31696, 31698, 31700, 31701, 31702, 31703, 31704, 31707, 31708, 31710, 31711, 31712, 31714, 31715, 31716, 31719, 31720, 31721, 31723, 31724, 31725, 31727, 31728, 31730, 31731, 31732, 31733, 31734, 31736, 31737, 31738, 31739, 31741, 31743, 31744, 31745, 31746, 31747, 31748, 31749, 31750, 31752, 31753, 31754, 31757, 31758, 31760, 31761, 31762, 31763, 31764, 31765, 31767, 31768, 31769, 31770, 31771, 31772, 31773, 31774, 31776, 31777, 31778, 31779, 31780, 31781, 31784, 31785, 31787, 31788, 31789, 31790, 31791, 31792, 31793, 31794, 31795, 31796, 31797, 31798, 31799, 31801, 31802, 31803, 31804, 31805, 31806, 31810, 39608, 23401, 28023, 27686, 20133, 23475, 39559, 37219, 25000, 37039, 38889, 21547, 28085, 23506, 20989, 21898, 32597, 32752, 25788, 25421, 26097, 25022, 24717, 28938, 27735, 27721, 22831, 26477, 33322, 22741, 22158, 35946, 27627, 37085, 22909, 32791, 21495, 28009, 21621, 21917, 33655, 33743, 26680, 31166, 21644, 20309, 21512, 30418, 35977, 38402, 27827, 28088, 36203, 35088, 40548, 36154, 22079, 40657, 30165, 24456, 29408, 24680, 21756, 20136, 27178, 34913, 24658, 36720, 21700, 28888, 34425, 40511, 27946, 23439, 24344, 32418, 21897, 20399, 29492, 21564, 21402, 20505, 21518, 21628, 20046, 24573, 29786, 22774, 33899, 32993, 34676, 29392, 31946, 28246, 31811, 31812, 31813, 31814, 31815, 31816, 31817, 31818, 31819, 31820, 31822, 31823, 31824, 31825, 31826, 31827, 31828, 31829, 31830, 31831, 31832, 31833, 31834, 31835, 31836, 31837, 31838, 31839, 31840, 31841, 31842, 31843, 31844, 31845, 31846, 31847, 31848, 31849, 31850, 31851, 31852, 31853, 31854, 31855, 31856, 31857, 31858, 31861, 31862, 31863, 31864, 31865, 31866, 31870, 31871, 31872, 31873, 31874, 31875, 31876, 31877, 31878, 31879, 31880, 31882, 31883, 31884, 31885, 31886, 31887, 31888, 31891, 31892, 31894, 31897, 31898, 31899, 31904, 31905, 31907, 31910, 31911, 31912, 31913, 31915, 31916, 31917, 31919, 31920, 31924, 31925, 31926, 31927, 31928, 31930, 31931, 24359, 34382, 21804, 25252, 20114, 27818, 25143, 33457, 21719, 21326, 29502, 28369, 30011, 21010, 21270, 35805, 27088, 24458, 24576, 28142, 22351, 27426, 29615, 26707, 36824, 32531, 25442, 24739, 21796, 30186, 35938, 28949, 28067, 23462, 24187, 33618, 24908, 40644, 30970, 34647, 31783, 30343, 20976, 24822, 29004, 26179, 24140, 24653, 35854, 28784, 25381, 36745, 24509, 24674, 34516, 22238, 27585, 24724, 24935, 21321, 24800, 26214, 36159, 31229, 20250, 28905, 27719, 35763, 35826, 32472, 33636, 26127, 23130, 39746, 27985, 28151, 35905, 27963, 20249, 28779, 33719, 25110, 24785, 38669, 36135, 31096, 20987, 22334, 22522, 26426, 30072, 31293, 31215, 31637, 31935, 31936, 31938, 31939, 31940, 31942, 31945, 31947, 31950, 31951, 31952, 31953, 31954, 31955, 31956, 31960, 31962, 31963, 31965, 31966, 31969, 31970, 31971, 31972, 31973, 31974, 31975, 31977, 31978, 31979, 31980, 31981, 31982, 31984, 31985, 31986, 31987, 31988, 31989, 31990, 31991, 31993, 31994, 31996, 31997, 31998, 31999, 32000, 32001, 32002, 32003, 32004, 32005, 32006, 32007, 32008, 32009, 32011, 32012, 32013, 32014, 32015, 32016, 32017, 32018, 32019, 32020, 32021, 32022, 32023, 32024, 32025, 32026, 32027, 32028, 32029, 32030, 32031, 32033, 32035, 32036, 32037, 32038, 32040, 32041, 32042, 32044, 32045, 32046, 32048, 32049, 32050, 32051, 32052, 32053, 32054, 32908, 39269, 36857, 28608, 35749, 40481, 23020, 32489, 32521, 21513, 26497, 26840, 36753, 31821, 38598, 21450, 24613, 30142, 27762, 21363, 23241, 32423, 25380, 20960, 33034, 24049, 34015, 25216, 20864, 23395, 20238, 31085, 21058, 24760, 27982, 23492, 23490, 35745, 35760, 26082, 24524, 38469, 22931, 32487, 32426, 22025, 26551, 22841, 20339, 23478, 21152, 33626, 39050, 36158, 30002, 38078, 20551, 31292, 20215, 26550, 39550, 23233, 27516, 30417, 22362, 23574, 31546, 38388, 29006, 20860, 32937, 33392, 22904, 32516, 33575, 26816, 26604, 30897, 30839, 25315, 25441, 31616, 20461, 21098, 20943, 33616, 27099, 37492, 36341, 36145, 35265, 38190, 31661, 20214, 32055, 32056, 32057, 32058, 32059, 32060, 32061, 32062, 32063, 32064, 32065, 32066, 32067, 32068, 32069, 32070, 32071, 32072, 32073, 32074, 32075, 32076, 32077, 32078, 32079, 32080, 32081, 32082, 32083, 32084, 32085, 32086, 32087, 32088, 32089, 32090, 32091, 32092, 32093, 32094, 32095, 32096, 32097, 32098, 32099, 32100, 32101, 32102, 32103, 32104, 32105, 32106, 32107, 32108, 32109, 32111, 32112, 32113, 32114, 32115, 32116, 32117, 32118, 32120, 32121, 32122, 32123, 32124, 32125, 32126, 32127, 32128, 32129, 32130, 32131, 32132, 32133, 32134, 32135, 32136, 32137, 32138, 32139, 32140, 32141, 32142, 32143, 32144, 32145, 32146, 32147, 32148, 32149, 32150, 32151, 32152, 20581, 33328, 21073, 39279, 28176, 28293, 28071, 24314, 20725, 23004, 23558, 27974, 27743, 30086, 33931, 26728, 22870, 35762, 21280, 37233, 38477, 34121, 26898, 30977, 28966, 33014, 20132, 37066, 27975, 39556, 23047, 22204, 25605, 38128, 30699, 20389, 33050, 29409, 35282, 39290, 32564, 32478, 21119, 25945, 37237, 36735, 36739, 21483, 31382, 25581, 25509, 30342, 31224, 34903, 38454, 25130, 21163, 33410, 26708, 26480, 25463, 30571, 31469, 27905, 32467, 35299, 22992, 25106, 34249, 33445, 30028, 20511, 20171, 30117, 35819, 23626, 24062, 31563, 26020, 37329, 20170, 27941, 35167, 32039, 38182, 20165, 35880, 36827, 38771, 26187, 31105, 36817, 28908, 28024, 32153, 32154, 32155, 32156, 32157, 32158, 32159, 32160, 32161, 32162, 32163, 32164, 32165, 32167, 32168, 32169, 32170, 32171, 32172, 32173, 32175, 32176, 32177, 32178, 32179, 32180, 32181, 32182, 32183, 32184, 32185, 32186, 32187, 32188, 32189, 32190, 32191, 32192, 32193, 32194, 32195, 32196, 32197, 32198, 32199, 32200, 32201, 32202, 32203, 32204, 32205, 32206, 32207, 32208, 32209, 32210, 32211, 32212, 32213, 32214, 32215, 32216, 32217, 32218, 32219, 32220, 32221, 32222, 32223, 32224, 32225, 32226, 32227, 32228, 32229, 32230, 32231, 32232, 32233, 32234, 32235, 32236, 32237, 32238, 32239, 32240, 32241, 32242, 32243, 32244, 32245, 32246, 32247, 32248, 32249, 32250, 23613, 21170, 33606, 20834, 33550, 30555, 26230, 40120, 20140, 24778, 31934, 31923, 32463, 20117, 35686, 26223, 39048, 38745, 22659, 25964, 38236, 24452, 30153, 38742, 31455, 31454, 20928, 28847, 31384, 25578, 31350, 32416, 29590, 38893, 20037, 28792, 20061, 37202, 21417, 25937, 26087, 33276, 33285, 21646, 23601, 30106, 38816, 25304, 29401, 30141, 23621, 39545, 33738, 23616, 21632, 30697, 20030, 27822, 32858, 25298, 25454, 24040, 20855, 36317, 36382, 38191, 20465, 21477, 24807, 28844, 21095, 25424, 40515, 23071, 20518, 30519, 21367, 32482, 25733, 25899, 25225, 25496, 20500, 29237, 35273, 20915, 35776, 32477, 22343, 33740, 38055, 20891, 21531, 23803, 32251, 32252, 32253, 32254, 32255, 32256, 32257, 32258, 32259, 32260, 32261, 32262, 32263, 32264, 32265, 32266, 32267, 32268, 32269, 32270, 32271, 32272, 32273, 32274, 32275, 32276, 32277, 32278, 32279, 32280, 32281, 32282, 32283, 32284, 32285, 32286, 32287, 32288, 32289, 32290, 32291, 32292, 32293, 32294, 32295, 32296, 32297, 32298, 32299, 32300, 32301, 32302, 32303, 32304, 32305, 32306, 32307, 32308, 32309, 32310, 32311, 32312, 32313, 32314, 32316, 32317, 32318, 32319, 32320, 32322, 32323, 32324, 32325, 32326, 32328, 32329, 32330, 32331, 32332, 32333, 32334, 32335, 32336, 32337, 32338, 32339, 32340, 32341, 32342, 32343, 32344, 32345, 32346, 32347, 32348, 32349, 20426, 31459, 27994, 37089, 39567, 21888, 21654, 21345, 21679, 24320, 25577, 26999, 20975, 24936, 21002, 22570, 21208, 22350, 30733, 30475, 24247, 24951, 31968, 25179, 25239, 20130, 28821, 32771, 25335, 28900, 38752, 22391, 33499, 26607, 26869, 30933, 39063, 31185, 22771, 21683, 21487, 28212, 20811, 21051, 23458, 35838, 32943, 21827, 22438, 24691, 22353, 21549, 31354, 24656, 23380, 25511, 25248, 21475, 25187, 23495, 26543, 21741, 31391, 33510, 37239, 24211, 35044, 22840, 22446, 25358, 36328, 33007, 22359, 31607, 20393, 24555, 23485, 27454, 21281, 31568, 29378, 26694, 30719, 30518, 26103, 20917, 20111, 30420, 23743, 31397, 33909, 22862, 39745, 20608, 32350, 32351, 32352, 32353, 32354, 32355, 32356, 32357, 32358, 32359, 32360, 32361, 32362, 32363, 32364, 32365, 32366, 32367, 32368, 32369, 32370, 32371, 32372, 32373, 32374, 32375, 32376, 32377, 32378, 32379, 32380, 32381, 32382, 32383, 32384, 32385, 32387, 32388, 32389, 32390, 32391, 32392, 32393, 32394, 32395, 32396, 32397, 32398, 32399, 32400, 32401, 32402, 32403, 32404, 32405, 32406, 32407, 32408, 32409, 32410, 32412, 32413, 32414, 32430, 32436, 32443, 32444, 32470, 32484, 32492, 32505, 32522, 32528, 32542, 32567, 32569, 32571, 32572, 32573, 32574, 32575, 32576, 32577, 32579, 32582, 32583, 32584, 32585, 32586, 32587, 32588, 32589, 32590, 32591, 32594, 32595, 39304, 24871, 28291, 22372, 26118, 25414, 22256, 25324, 25193, 24275, 38420, 22403, 25289, 21895, 34593, 33098, 36771, 21862, 33713, 26469, 36182, 34013, 23146, 26639, 25318, 31726, 38417, 20848, 28572, 35888, 25597, 35272, 25042, 32518, 28866, 28389, 29701, 27028, 29436, 24266, 37070, 26391, 28010, 25438, 21171, 29282, 32769, 20332, 23013, 37226, 28889, 28061, 21202, 20048, 38647, 38253, 34174, 30922, 32047, 20769, 22418, 25794, 32907, 31867, 27882, 26865, 26974, 20919, 21400, 26792, 29313, 40654, 31729, 29432, 31163, 28435, 29702, 26446, 37324, 40100, 31036, 33673, 33620, 21519, 26647, 20029, 21385, 21169, 30782, 21382, 21033, 20616, 20363, 20432, 32598, 32601, 32603, 32604, 32605, 32606, 32608, 32611, 32612, 32613, 32614, 32615, 32619, 32620, 32621, 32623, 32624, 32627, 32629, 32630, 32631, 32632, 32634, 32635, 32636, 32637, 32639, 32640, 32642, 32643, 32644, 32645, 32646, 32647, 32648, 32649, 32651, 32653, 32655, 32656, 32657, 32658, 32659, 32661, 32662, 32663, 32664, 32665, 32667, 32668, 32672, 32674, 32675, 32677, 32678, 32680, 32681, 32682, 32683, 32684, 32685, 32686, 32689, 32691, 32692, 32693, 32694, 32695, 32698, 32699, 32702, 32704, 32706, 32707, 32708, 32710, 32711, 32712, 32713, 32715, 32717, 32719, 32720, 32721, 32722, 32723, 32726, 32727, 32729, 32730, 32731, 32732, 32733, 32734, 32738, 32739, 30178, 31435, 31890, 27813, 38582, 21147, 29827, 21737, 20457, 32852, 33714, 36830, 38256, 24265, 24604, 28063, 24088, 25947, 33080, 38142, 24651, 28860, 32451, 31918, 20937, 26753, 31921, 33391, 20004, 36742, 37327, 26238, 20142, 35845, 25769, 32842, 20698, 30103, 29134, 23525, 36797, 28518, 20102, 25730, 38243, 24278, 26009, 21015, 35010, 28872, 21155, 29454, 29747, 26519, 30967, 38678, 20020, 37051, 40158, 28107, 20955, 36161, 21533, 25294, 29618, 33777, 38646, 40836, 38083, 20278, 32666, 20940, 28789, 38517, 23725, 39046, 21478, 20196, 28316, 29705, 27060, 30827, 39311, 30041, 21016, 30244, 27969, 26611, 20845, 40857, 32843, 21657, 31548, 31423, 32740, 32743, 32744, 32746, 32747, 32748, 32749, 32751, 32754, 32756, 32757, 32758, 32759, 32760, 32761, 32762, 32765, 32766, 32767, 32770, 32775, 32776, 32777, 32778, 32782, 32783, 32785, 32787, 32794, 32795, 32797, 32798, 32799, 32801, 32803, 32804, 32811, 32812, 32813, 32814, 32815, 32816, 32818, 32820, 32825, 32826, 32828, 32830, 32832, 32833, 32836, 32837, 32839, 32840, 32841, 32846, 32847, 32848, 32849, 32851, 32853, 32854, 32855, 32857, 32859, 32860, 32861, 32862, 32863, 32864, 32865, 32866, 32867, 32868, 32869, 32870, 32871, 32872, 32875, 32876, 32877, 32878, 32879, 32880, 32882, 32883, 32884, 32885, 32886, 32887, 32888, 32889, 32890, 32891, 32892, 32893, 38534, 22404, 25314, 38471, 27004, 23044, 25602, 31699, 28431, 38475, 33446, 21346, 39045, 24208, 28809, 25523, 21348, 34383, 40065, 40595, 30860, 38706, 36335, 36162, 40575, 28510, 31108, 24405, 38470, 25134, 39540, 21525, 38109, 20387, 26053, 23653, 23649, 32533, 34385, 27695, 24459, 29575, 28388, 32511, 23782, 25371, 23402, 28390, 21365, 20081, 25504, 30053, 25249, 36718, 20262, 20177, 27814, 32438, 35770, 33821, 34746, 32599, 36923, 38179, 31657, 39585, 35064, 33853, 27931, 39558, 32476, 22920, 40635, 29595, 30721, 34434, 39532, 39554, 22043, 21527, 22475, 20080, 40614, 21334, 36808, 33033, 30610, 39314, 34542, 28385, 34067, 26364, 24930, 28459, 32894, 32897, 32898, 32901, 32904, 32906, 32909, 32910, 32911, 32912, 32913, 32914, 32916, 32917, 32919, 32921, 32926, 32931, 32934, 32935, 32936, 32940, 32944, 32947, 32949, 32950, 32952, 32953, 32955, 32965, 32967, 32968, 32969, 32970, 32971, 32975, 32976, 32977, 32978, 32979, 32980, 32981, 32984, 32991, 32992, 32994, 32995, 32998, 33006, 33013, 33015, 33017, 33019, 33022, 33023, 33024, 33025, 33027, 33028, 33029, 33031, 33032, 33035, 33036, 33045, 33047, 33049, 33051, 33052, 33053, 33055, 33056, 33057, 33058, 33059, 33060, 33061, 33062, 33063, 33064, 33065, 33066, 33067, 33069, 33070, 33072, 33075, 33076, 33077, 33079, 33081, 33082, 33083, 33084, 33085, 33087, 35881, 33426, 33579, 30450, 27667, 24537, 33725, 29483, 33541, 38170, 27611, 30683, 38086, 21359, 33538, 20882, 24125, 35980, 36152, 20040, 29611, 26522, 26757, 37238, 38665, 29028, 27809, 30473, 23186, 38209, 27599, 32654, 26151, 23504, 22969, 23194, 38376, 38391, 20204, 33804, 33945, 27308, 30431, 38192, 29467, 26790, 23391, 30511, 37274, 38753, 31964, 36855, 35868, 24357, 31859, 31192, 35269, 27852, 34588, 23494, 24130, 26825, 30496, 32501, 20885, 20813, 21193, 23081, 32517, 38754, 33495, 25551, 30596, 34256, 31186, 28218, 24217, 22937, 34065, 28781, 27665, 25279, 30399, 25935, 24751, 38397, 26126, 34719, 40483, 38125, 21517, 21629, 35884, 25720, 33088, 33089, 33090, 33091, 33092, 33093, 33095, 33097, 33101, 33102, 33103, 33106, 33110, 33111, 33112, 33115, 33116, 33117, 33118, 33119, 33121, 33122, 33123, 33124, 33126, 33128, 33130, 33131, 33132, 33135, 33138, 33139, 33141, 33142, 33143, 33144, 33153, 33155, 33156, 33157, 33158, 33159, 33161, 33163, 33164, 33165, 33166, 33168, 33170, 33171, 33172, 33173, 33174, 33175, 33177, 33178, 33182, 33183, 33184, 33185, 33186, 33188, 33189, 33191, 33193, 33195, 33196, 33197, 33198, 33199, 33200, 33201, 33202, 33204, 33205, 33206, 33207, 33208, 33209, 33212, 33213, 33214, 33215, 33220, 33221, 33223, 33224, 33225, 33227, 33229, 33230, 33231, 33232, 33233, 33234, 33235, 25721, 34321, 27169, 33180, 30952, 25705, 39764, 25273, 26411, 33707, 22696, 40664, 27819, 28448, 23518, 38476, 35851, 29279, 26576, 25287, 29281, 20137, 22982, 27597, 22675, 26286, 24149, 21215, 24917, 26408, 30446, 30566, 29287, 31302, 25343, 21738, 21584, 38048, 37027, 23068, 32435, 27670, 20035, 22902, 32784, 22856, 21335, 30007, 38590, 22218, 25376, 33041, 24700, 38393, 28118, 21602, 39297, 20869, 23273, 33021, 22958, 38675, 20522, 27877, 23612, 25311, 20320, 21311, 33147, 36870, 28346, 34091, 25288, 24180, 30910, 25781, 25467, 24565, 23064, 37247, 40479, 23615, 25423, 32834, 23421, 21870, 38218, 38221, 28037, 24744, 26592, 29406, 20957, 23425, 33236, 33237, 33238, 33239, 33240, 33241, 33242, 33243, 33244, 33245, 33246, 33247, 33248, 33249, 33250, 33252, 33253, 33254, 33256, 33257, 33259, 33262, 33263, 33264, 33265, 33266, 33269, 33270, 33271, 33272, 33273, 33274, 33277, 33279, 33283, 33287, 33288, 33289, 33290, 33291, 33294, 33295, 33297, 33299, 33301, 33302, 33303, 33304, 33305, 33306, 33309, 33312, 33316, 33317, 33318, 33319, 33321, 33326, 33330, 33338, 33340, 33341, 33343, 33344, 33345, 33346, 33347, 33349, 33350, 33352, 33354, 33356, 33357, 33358, 33360, 33361, 33362, 33363, 33364, 33365, 33366, 33367, 33369, 33371, 33372, 33373, 33374, 33376, 33377, 33378, 33379, 33380, 33381, 33382, 33383, 33385, 25319, 27870, 29275, 25197, 38062, 32445, 33043, 27987, 20892, 24324, 22900, 21162, 24594, 22899, 26262, 34384, 30111, 25386, 25062, 31983, 35834, 21734, 27431, 40485, 27572, 34261, 21589, 20598, 27812, 21866, 36276, 29228, 24085, 24597, 29750, 25293, 25490, 29260, 24472, 28227, 27966, 25856, 28504, 30424, 30928, 30460, 30036, 21028, 21467, 20051, 24222, 26049, 32810, 32982, 25243, 21638, 21032, 28846, 34957, 36305, 27873, 21624, 32986, 22521, 35060, 36180, 38506, 37197, 20329, 27803, 21943, 30406, 30768, 25256, 28921, 28558, 24429, 34028, 26842, 30844, 31735, 33192, 26379, 40527, 25447, 30896, 22383, 30738, 38713, 25209, 25259, 21128, 29749, 27607, 33386, 33387, 33388, 33389, 33393, 33397, 33398, 33399, 33400, 33403, 33404, 33408, 33409, 33411, 33413, 33414, 33415, 33417, 33420, 33424, 33427, 33428, 33429, 33430, 33434, 33435, 33438, 33440, 33442, 33443, 33447, 33458, 33461, 33462, 33466, 33467, 33468, 33471, 33472, 33474, 33475, 33477, 33478, 33481, 33488, 33494, 33497, 33498, 33501, 33506, 33511, 33512, 33513, 33514, 33516, 33517, 33518, 33520, 33522, 33523, 33525, 33526, 33528, 33530, 33532, 33533, 33534, 33535, 33536, 33546, 33547, 33549, 33552, 33554, 33555, 33558, 33560, 33561, 33565, 33566, 33567, 33568, 33569, 33570, 33571, 33572, 33573, 33574, 33577, 33578, 33582, 33584, 33586, 33591, 33595, 33597, 21860, 33086, 30130, 30382, 21305, 30174, 20731, 23617, 35692, 31687, 20559, 29255, 39575, 39128, 28418, 29922, 31080, 25735, 30629, 25340, 39057, 36139, 21697, 32856, 20050, 22378, 33529, 33805, 24179, 20973, 29942, 35780, 23631, 22369, 27900, 39047, 23110, 30772, 39748, 36843, 31893, 21078, 25169, 38138, 20166, 33670, 33889, 33769, 33970, 22484, 26420, 22275, 26222, 28006, 35889, 26333, 28689, 26399, 27450, 26646, 25114, 22971, 19971, 20932, 28422, 26578, 27791, 20854, 26827, 22855, 27495, 30054, 23822, 33040, 40784, 26071, 31048, 31041, 39569, 36215, 23682, 20062, 20225, 21551, 22865, 30732, 22120, 27668, 36804, 24323, 27773, 27875, 35755, 25488, 33598, 33599, 33601, 33602, 33604, 33605, 33608, 33610, 33611, 33612, 33613, 33614, 33619, 33621, 33622, 33623, 33624, 33625, 33629, 33634, 33648, 33649, 33650, 33651, 33652, 33653, 33654, 33657, 33658, 33662, 33663, 33664, 33665, 33666, 33667, 33668, 33671, 33672, 33674, 33675, 33676, 33677, 33679, 33680, 33681, 33684, 33685, 33686, 33687, 33689, 33690, 33693, 33695, 33697, 33698, 33699, 33700, 33701, 33702, 33703, 33708, 33709, 33710, 33711, 33717, 33723, 33726, 33727, 33730, 33731, 33732, 33734, 33736, 33737, 33739, 33741, 33742, 33744, 33745, 33746, 33747, 33749, 33751, 33753, 33754, 33755, 33758, 33762, 33763, 33764, 33766, 33767, 33768, 33771, 33772, 33773, 24688, 27965, 29301, 25190, 38030, 38085, 21315, 36801, 31614, 20191, 35878, 20094, 40660, 38065, 38067, 21069, 28508, 36963, 27973, 35892, 22545, 23884, 27424, 27465, 26538, 21595, 33108, 32652, 22681, 34103, 24378, 25250, 27207, 38201, 25970, 24708, 26725, 30631, 20052, 20392, 24039, 38808, 25772, 32728, 23789, 20431, 31373, 20999, 33540, 19988, 24623, 31363, 38054, 20405, 20146, 31206, 29748, 21220, 33465, 25810, 31165, 23517, 27777, 38738, 36731, 27682, 20542, 21375, 28165, 25806, 26228, 27696, 24773, 39031, 35831, 24198, 29756, 31351, 31179, 19992, 37041, 29699, 27714, 22234, 37195, 27845, 36235, 21306, 34502, 26354, 36527, 23624, 39537, 28192, 33774, 33775, 33779, 33780, 33781, 33782, 33783, 33786, 33787, 33788, 33790, 33791, 33792, 33794, 33797, 33799, 33800, 33801, 33802, 33808, 33810, 33811, 33812, 33813, 33814, 33815, 33817, 33818, 33819, 33822, 33823, 33824, 33825, 33826, 33827, 33833, 33834, 33835, 33836, 33837, 33838, 33839, 33840, 33842, 33843, 33844, 33845, 33846, 33847, 33849, 33850, 33851, 33854, 33855, 33856, 33857, 33858, 33859, 33860, 33861, 33863, 33864, 33865, 33866, 33867, 33868, 33869, 33870, 33871, 33872, 33874, 33875, 33876, 33877, 33878, 33880, 33885, 33886, 33887, 33888, 33890, 33892, 33893, 33894, 33895, 33896, 33898, 33902, 33903, 33904, 33906, 33908, 33911, 33913, 33915, 33916, 21462, 23094, 40843, 36259, 21435, 22280, 39079, 26435, 37275, 27849, 20840, 30154, 25331, 29356, 21048, 21149, 32570, 28820, 30264, 21364, 40522, 27063, 30830, 38592, 35033, 32676, 28982, 29123, 20873, 26579, 29924, 22756, 25880, 22199, 35753, 39286, 25200, 32469, 24825, 28909, 22764, 20161, 20154, 24525, 38887, 20219, 35748, 20995, 22922, 32427, 25172, 20173, 26085, 25102, 33592, 33993, 33635, 34701, 29076, 28342, 23481, 32466, 20887, 25545, 26580, 32905, 33593, 34837, 20754, 23418, 22914, 36785, 20083, 27741, 20837, 35109, 36719, 38446, 34122, 29790, 38160, 38384, 28070, 33509, 24369, 25746, 27922, 33832, 33134, 40131, 22622, 36187, 19977, 21441, 33917, 33918, 33919, 33920, 33921, 33923, 33924, 33925, 33926, 33930, 33933, 33935, 33936, 33937, 33938, 33939, 33940, 33941, 33942, 33944, 33946, 33947, 33949, 33950, 33951, 33952, 33954, 33955, 33956, 33957, 33958, 33959, 33960, 33961, 33962, 33963, 33964, 33965, 33966, 33968, 33969, 33971, 33973, 33974, 33975, 33979, 33980, 33982, 33984, 33986, 33987, 33989, 33990, 33991, 33992, 33995, 33996, 33998, 33999, 34002, 34004, 34005, 34007, 34008, 34009, 34010, 34011, 34012, 34014, 34017, 34018, 34020, 34023, 34024, 34025, 34026, 34027, 34029, 34030, 34031, 34033, 34034, 34035, 34036, 34037, 34038, 34039, 34040, 34041, 34042, 34043, 34045, 34046, 34048, 34049, 34050, 20254, 25955, 26705, 21971, 20007, 25620, 39578, 25195, 23234, 29791, 33394, 28073, 26862, 20711, 33678, 30722, 26432, 21049, 27801, 32433, 20667, 21861, 29022, 31579, 26194, 29642, 33515, 26441, 23665, 21024, 29053, 34923, 38378, 38485, 25797, 36193, 33203, 21892, 27733, 25159, 32558, 22674, 20260, 21830, 36175, 26188, 19978, 23578, 35059, 26786, 25422, 31245, 28903, 33421, 21242, 38902, 23569, 21736, 37045, 32461, 22882, 36170, 34503, 33292, 33293, 36198, 25668, 23556, 24913, 28041, 31038, 35774, 30775, 30003, 21627, 20280, 36523, 28145, 23072, 32453, 31070, 27784, 23457, 23158, 29978, 32958, 24910, 28183, 22768, 29983, 29989, 29298, 21319, 32499, 34051, 34052, 34053, 34054, 34055, 34056, 34057, 34058, 34059, 34061, 34062, 34063, 34064, 34066, 34068, 34069, 34070, 34072, 34073, 34075, 34076, 34077, 34078, 34080, 34082, 34083, 34084, 34085, 34086, 34087, 34088, 34089, 34090, 34093, 34094, 34095, 34096, 34097, 34098, 34099, 34100, 34101, 34102, 34110, 34111, 34112, 34113, 34114, 34116, 34117, 34118, 34119, 34123, 34124, 34125, 34126, 34127, 34128, 34129, 34130, 34131, 34132, 34133, 34135, 34136, 34138, 34139, 34140, 34141, 34143, 34144, 34145, 34146, 34147, 34149, 34150, 34151, 34153, 34154, 34155, 34156, 34157, 34158, 34159, 34160, 34161, 34163, 34165, 34166, 34167, 34168, 34172, 34173, 34175, 34176, 34177, 30465, 30427, 21097, 32988, 22307, 24072, 22833, 29422, 26045, 28287, 35799, 23608, 34417, 21313, 30707, 25342, 26102, 20160, 39135, 34432, 23454, 35782, 21490, 30690, 20351, 23630, 39542, 22987, 24335, 31034, 22763, 19990, 26623, 20107, 25325, 35475, 36893, 21183, 26159, 21980, 22124, 36866, 20181, 20365, 37322, 39280, 27663, 24066, 24643, 23460, 35270, 35797, 25910, 25163, 39318, 23432, 23551, 25480, 21806, 21463, 30246, 20861, 34092, 26530, 26803, 27530, 25234, 36755, 21460, 33298, 28113, 30095, 20070, 36174, 23408, 29087, 34223, 26257, 26329, 32626, 34560, 40653, 40736, 23646, 26415, 36848, 26641, 26463, 25101, 31446, 22661, 24246, 25968, 28465, 34178, 34179, 34182, 34184, 34185, 34186, 34187, 34188, 34189, 34190, 34192, 34193, 34194, 34195, 34196, 34197, 34198, 34199, 34200, 34201, 34202, 34205, 34206, 34207, 34208, 34209, 34210, 34211, 34213, 34214, 34215, 34217, 34219, 34220, 34221, 34225, 34226, 34227, 34228, 34229, 34230, 34232, 34234, 34235, 34236, 34237, 34238, 34239, 34240, 34242, 34243, 34244, 34245, 34246, 34247, 34248, 34250, 34251, 34252, 34253, 34254, 34257, 34258, 34260, 34262, 34263, 34264, 34265, 34266, 34267, 34269, 34270, 34271, 34272, 34273, 34274, 34275, 34277, 34278, 34279, 34280, 34282, 34283, 34284, 34285, 34286, 34287, 34288, 34289, 34290, 34291, 34292, 34293, 34294, 34295, 34296, 24661, 21047, 32781, 25684, 34928, 29993, 24069, 26643, 25332, 38684, 21452, 29245, 35841, 27700, 30561, 31246, 21550, 30636, 39034, 33308, 35828, 30805, 26388, 28865, 26031, 25749, 22070, 24605, 31169, 21496, 19997, 27515, 32902, 23546, 21987, 22235, 20282, 20284, 39282, 24051, 26494, 32824, 24578, 39042, 36865, 23435, 35772, 35829, 25628, 33368, 25822, 22013, 33487, 37221, 20439, 32032, 36895, 31903, 20723, 22609, 28335, 23487, 35785, 32899, 37240, 33948, 31639, 34429, 38539, 38543, 32485, 39635, 30862, 23681, 31319, 36930, 38567, 31071, 23385, 25439, 31499, 34001, 26797, 21766, 32553, 29712, 32034, 38145, 25152, 22604, 20182, 23427, 22905, 22612, 34297, 34298, 34300, 34301, 34302, 34304, 34305, 34306, 34307, 34308, 34310, 34311, 34312, 34313, 34314, 34315, 34316, 34317, 34318, 34319, 34320, 34322, 34323, 34324, 34325, 34327, 34328, 34329, 34330, 34331, 34332, 34333, 34334, 34335, 34336, 34337, 34338, 34339, 34340, 34341, 34342, 34344, 34346, 34347, 34348, 34349, 34350, 34351, 34352, 34353, 34354, 34355, 34356, 34357, 34358, 34359, 34361, 34362, 34363, 34365, 34366, 34367, 34368, 34369, 34370, 34371, 34372, 34373, 34374, 34375, 34376, 34377, 34378, 34379, 34380, 34386, 34387, 34389, 34390, 34391, 34392, 34393, 34395, 34396, 34397, 34399, 34400, 34401, 34403, 34404, 34405, 34406, 34407, 34408, 34409, 34410, 29549, 25374, 36427, 36367, 32974, 33492, 25260, 21488, 27888, 37214, 22826, 24577, 27760, 22349, 25674, 36138, 30251, 28393, 22363, 27264, 30192, 28525, 35885, 35848, 22374, 27631, 34962, 30899, 25506, 21497, 28845, 27748, 22616, 25642, 22530, 26848, 33179, 21776, 31958, 20504, 36538, 28108, 36255, 28907, 25487, 28059, 28372, 32486, 33796, 26691, 36867, 28120, 38518, 35752, 22871, 29305, 34276, 33150, 30140, 35466, 26799, 21076, 36386, 38161, 25552, 39064, 36420, 21884, 20307, 26367, 22159, 24789, 28053, 21059, 23625, 22825, 28155, 22635, 30000, 29980, 24684, 33300, 33094, 25361, 26465, 36834, 30522, 36339, 36148, 38081, 24086, 21381, 21548, 28867, 34413, 34415, 34416, 34418, 34419, 34420, 34421, 34422, 34423, 34424, 34435, 34436, 34437, 34438, 34439, 34440, 34441, 34446, 34447, 34448, 34449, 34450, 34452, 34454, 34455, 34456, 34457, 34458, 34459, 34462, 34463, 34464, 34465, 34466, 34469, 34470, 34475, 34477, 34478, 34482, 34483, 34487, 34488, 34489, 34491, 34492, 34493, 34494, 34495, 34497, 34498, 34499, 34501, 34504, 34508, 34509, 34514, 34515, 34517, 34518, 34519, 34522, 34524, 34525, 34528, 34529, 34530, 34531, 34533, 34534, 34535, 34536, 34538, 34539, 34540, 34543, 34549, 34550, 34551, 34554, 34555, 34556, 34557, 34559, 34561, 34564, 34565, 34566, 34571, 34572, 34574, 34575, 34576, 34577, 34580, 34582, 27712, 24311, 20572, 20141, 24237, 25402, 33351, 36890, 26704, 37230, 30643, 21516, 38108, 24420, 31461, 26742, 25413, 31570, 32479, 30171, 20599, 25237, 22836, 36879, 20984, 31171, 31361, 22270, 24466, 36884, 28034, 23648, 22303, 21520, 20820, 28237, 22242, 25512, 39059, 33151, 34581, 35114, 36864, 21534, 23663, 33216, 25302, 25176, 33073, 40501, 38464, 39534, 39548, 26925, 22949, 25299, 21822, 25366, 21703, 34521, 27964, 23043, 29926, 34972, 27498, 22806, 35916, 24367, 28286, 29609, 39037, 20024, 28919, 23436, 30871, 25405, 26202, 30358, 24779, 23451, 23113, 19975, 33109, 27754, 29579, 20129, 26505, 32593, 24448, 26106, 26395, 24536, 22916, 23041, 34585, 34587, 34589, 34591, 34592, 34596, 34598, 34599, 34600, 34602, 34603, 34604, 34605, 34607, 34608, 34610, 34611, 34613, 34614, 34616, 34617, 34618, 34620, 34621, 34624, 34625, 34626, 34627, 34628, 34629, 34630, 34634, 34635, 34637, 34639, 34640, 34641, 34642, 34644, 34645, 34646, 34648, 34650, 34651, 34652, 34653, 34654, 34655, 34657, 34658, 34662, 34663, 34664, 34665, 34666, 34667, 34668, 34669, 34671, 34673, 34674, 34675, 34677, 34679, 34680, 34681, 34682, 34687, 34688, 34689, 34692, 34694, 34695, 34697, 34698, 34700, 34702, 34703, 34704, 34705, 34706, 34708, 34709, 34710, 34712, 34713, 34714, 34715, 34716, 34717, 34718, 34720, 34721, 34722, 34723, 34724, 24013, 24494, 21361, 38886, 36829, 26693, 22260, 21807, 24799, 20026, 28493, 32500, 33479, 33806, 22996, 20255, 20266, 23614, 32428, 26410, 34074, 21619, 30031, 32963, 21890, 39759, 20301, 28205, 35859, 23561, 24944, 21355, 30239, 28201, 34442, 25991, 38395, 32441, 21563, 31283, 32010, 38382, 21985, 32705, 29934, 25373, 34583, 28065, 31389, 25105, 26017, 21351, 25569, 27779, 24043, 21596, 38056, 20044, 27745, 35820, 23627, 26080, 33436, 26791, 21566, 21556, 27595, 27494, 20116, 25410, 21320, 33310, 20237, 20398, 22366, 25098, 38654, 26212, 29289, 21247, 21153, 24735, 35823, 26132, 29081, 26512, 35199, 30802, 30717, 26224, 22075, 21560, 38177, 29306, 34725, 34726, 34727, 34729, 34730, 34734, 34736, 34737, 34738, 34740, 34742, 34743, 34744, 34745, 34747, 34748, 34750, 34751, 34753, 34754, 34755, 34756, 34757, 34759, 34760, 34761, 34764, 34765, 34766, 34767, 34768, 34772, 34773, 34774, 34775, 34776, 34777, 34778, 34780, 34781, 34782, 34783, 34785, 34786, 34787, 34788, 34790, 34791, 34792, 34793, 34795, 34796, 34797, 34799, 34800, 34801, 34802, 34803, 34804, 34805, 34806, 34807, 34808, 34810, 34811, 34812, 34813, 34815, 34816, 34817, 34818, 34820, 34821, 34822, 34823, 34824, 34825, 34827, 34828, 34829, 34830, 34831, 34832, 34833, 34834, 34836, 34839, 34840, 34841, 34842, 34844, 34845, 34846, 34847, 34848, 34851, 31232, 24687, 24076, 24713, 33181, 22805, 24796, 29060, 28911, 28330, 27728, 29312, 27268, 34989, 24109, 20064, 23219, 21916, 38115, 27927, 31995, 38553, 25103, 32454, 30606, 34430, 21283, 38686, 36758, 26247, 23777, 20384, 29421, 19979, 21414, 22799, 21523, 25472, 38184, 20808, 20185, 40092, 32420, 21688, 36132, 34900, 33335, 38386, 28046, 24358, 23244, 26174, 38505, 29616, 29486, 21439, 33146, 39301, 32673, 23466, 38519, 38480, 32447, 30456, 21410, 38262, 39321, 31665, 35140, 28248, 20065, 32724, 31077, 35814, 24819, 21709, 20139, 39033, 24055, 27233, 20687, 21521, 35937, 33831, 30813, 38660, 21066, 21742, 22179, 38144, 28040, 23477, 28102, 26195, 34852, 34853, 34854, 34855, 34856, 34857, 34858, 34859, 34860, 34861, 34862, 34863, 34864, 34865, 34867, 34868, 34869, 34870, 34871, 34872, 34874, 34875, 34877, 34878, 34879, 34881, 34882, 34883, 34886, 34887, 34888, 34889, 34890, 34891, 34894, 34895, 34896, 34897, 34898, 34899, 34901, 34902, 34904, 34906, 34907, 34908, 34909, 34910, 34911, 34912, 34918, 34919, 34922, 34925, 34927, 34929, 34931, 34932, 34933, 34934, 34936, 34937, 34938, 34939, 34940, 34944, 34947, 34950, 34951, 34953, 34954, 34956, 34958, 34959, 34960, 34961, 34963, 34964, 34965, 34967, 34968, 34969, 34970, 34971, 34973, 34974, 34975, 34976, 34977, 34979, 34981, 34982, 34983, 34984, 34985, 34986, 23567, 23389, 26657, 32918, 21880, 31505, 25928, 26964, 20123, 27463, 34638, 38795, 21327, 25375, 25658, 37034, 26012, 32961, 35856, 20889, 26800, 21368, 34809, 25032, 27844, 27899, 35874, 23633, 34218, 33455, 38156, 27427, 36763, 26032, 24571, 24515, 20449, 34885, 26143, 33125, 29481, 24826, 20852, 21009, 22411, 24418, 37026, 34892, 37266, 24184, 26447, 24615, 22995, 20804, 20982, 33016, 21256, 27769, 38596, 29066, 20241, 20462, 32670, 26429, 21957, 38152, 31168, 34966, 32483, 22687, 25100, 38656, 34394, 22040, 39035, 24464, 35768, 33988, 37207, 21465, 26093, 24207, 30044, 24676, 32110, 23167, 32490, 32493, 36713, 21927, 23459, 24748, 26059, 29572, 34988, 34990, 34991, 34992, 34994, 34995, 34996, 34997, 34998, 35000, 35001, 35002, 35003, 35005, 35006, 35007, 35008, 35011, 35012, 35015, 35016, 35018, 35019, 35020, 35021, 35023, 35024, 35025, 35027, 35030, 35031, 35034, 35035, 35036, 35037, 35038, 35040, 35041, 35046, 35047, 35049, 35050, 35051, 35052, 35053, 35054, 35055, 35058, 35061, 35062, 35063, 35066, 35067, 35069, 35071, 35072, 35073, 35075, 35076, 35077, 35078, 35079, 35080, 35081, 35083, 35084, 35085, 35086, 35087, 35089, 35092, 35093, 35094, 35095, 35096, 35100, 35101, 35102, 35103, 35104, 35106, 35107, 35108, 35110, 35111, 35112, 35113, 35116, 35117, 35118, 35119, 35121, 35122, 35123, 35125, 35127, 36873, 30307, 30505, 32474, 38772, 34203, 23398, 31348, 38634, 34880, 21195, 29071, 24490, 26092, 35810, 23547, 39535, 24033, 27529, 27739, 35757, 35759, 36874, 36805, 21387, 25276, 40486, 40493, 21568, 20011, 33469, 29273, 34460, 23830, 34905, 28079, 38597, 21713, 20122, 35766, 28937, 21693, 38409, 28895, 28153, 30416, 20005, 30740, 34578, 23721, 24310, 35328, 39068, 38414, 28814, 27839, 22852, 25513, 30524, 34893, 28436, 33395, 22576, 29141, 21388, 30746, 38593, 21761, 24422, 28976, 23476, 35866, 39564, 27523, 22830, 40495, 31207, 26472, 25196, 20335, 30113, 32650, 27915, 38451, 27687, 20208, 30162, 20859, 26679, 28478, 36992, 33136, 22934, 29814, 35128, 35129, 35130, 35131, 35132, 35133, 35134, 35135, 35136, 35138, 35139, 35141, 35142, 35143, 35144, 35145, 35146, 35147, 35148, 35149, 35150, 35151, 35152, 35153, 35154, 35155, 35156, 35157, 35158, 35159, 35160, 35161, 35162, 35163, 35164, 35165, 35168, 35169, 35170, 35171, 35172, 35173, 35175, 35176, 35177, 35178, 35179, 35180, 35181, 35182, 35183, 35184, 35185, 35186, 35187, 35188, 35189, 35190, 35191, 35192, 35193, 35194, 35196, 35197, 35198, 35200, 35202, 35204, 35205, 35207, 35208, 35209, 35210, 35211, 35212, 35213, 35214, 35215, 35216, 35217, 35218, 35219, 35220, 35221, 35222, 35223, 35224, 35225, 35226, 35227, 35228, 35229, 35230, 35231, 35232, 35233, 25671, 23591, 36965, 31377, 35875, 23002, 21676, 33280, 33647, 35201, 32768, 26928, 22094, 32822, 29239, 37326, 20918, 20063, 39029, 25494, 19994, 21494, 26355, 33099, 22812, 28082, 19968, 22777, 21307, 25558, 38129, 20381, 20234, 34915, 39056, 22839, 36951, 31227, 20202, 33008, 30097, 27778, 23452, 23016, 24413, 26885, 34433, 20506, 24050, 20057, 30691, 20197, 33402, 25233, 26131, 37009, 23673, 20159, 24441, 33222, 36920, 32900, 30123, 20134, 35028, 24847, 27589, 24518, 20041, 30410, 28322, 35811, 35758, 35850, 35793, 24322, 32764, 32716, 32462, 33589, 33643, 22240, 27575, 38899, 38452, 23035, 21535, 38134, 28139, 23493, 39278, 23609, 24341, 38544, 35234, 35235, 35236, 35237, 35238, 35239, 35240, 35241, 35242, 35243, 35244, 35245, 35246, 35247, 35248, 35249, 35250, 35251, 35252, 35253, 35254, 35255, 35256, 35257, 35258, 35259, 35260, 35261, 35262, 35263, 35264, 35267, 35277, 35283, 35284, 35285, 35287, 35288, 35289, 35291, 35293, 35295, 35296, 35297, 35298, 35300, 35303, 35304, 35305, 35306, 35308, 35309, 35310, 35312, 35313, 35314, 35316, 35317, 35318, 35319, 35320, 35321, 35322, 35323, 35324, 35325, 35326, 35327, 35329, 35330, 35331, 35332, 35333, 35334, 35336, 35337, 35338, 35339, 35340, 35341, 35342, 35343, 35344, 35345, 35346, 35347, 35348, 35349, 35350, 35351, 35352, 35353, 35354, 35355, 35356, 35357, 21360, 33521, 27185, 23156, 40560, 24212, 32552, 33721, 33828, 33829, 33639, 34631, 36814, 36194, 30408, 24433, 39062, 30828, 26144, 21727, 25317, 20323, 33219, 30152, 24248, 38605, 36362, 34553, 21647, 27891, 28044, 27704, 24703, 21191, 29992, 24189, 20248, 24736, 24551, 23588, 30001, 37038, 38080, 29369, 27833, 28216, 37193, 26377, 21451, 21491, 20305, 37321, 35825, 21448, 24188, 36802, 28132, 20110, 30402, 27014, 34398, 24858, 33286, 20313, 20446, 36926, 40060, 24841, 28189, 28180, 38533, 20104, 23089, 38632, 19982, 23679, 31161, 23431, 35821, 32701, 29577, 22495, 33419, 37057, 21505, 36935, 21947, 23786, 24481, 24840, 27442, 29425, 32946, 35465, 35358, 35359, 35360, 35361, 35362, 35363, 35364, 35365, 35366, 35367, 35368, 35369, 35370, 35371, 35372, 35373, 35374, 35375, 35376, 35377, 35378, 35379, 35380, 35381, 35382, 35383, 35384, 35385, 35386, 35387, 35388, 35389, 35391, 35392, 35393, 35394, 35395, 35396, 35397, 35398, 35399, 35401, 35402, 35403, 35404, 35405, 35406, 35407, 35408, 35409, 35410, 35411, 35412, 35413, 35414, 35415, 35416, 35417, 35418, 35419, 35420, 35421, 35422, 35423, 35424, 35425, 35426, 35427, 35428, 35429, 35430, 35431, 35432, 35433, 35434, 35435, 35436, 35437, 35438, 35439, 35440, 35441, 35442, 35443, 35444, 35445, 35446, 35447, 35448, 35450, 35451, 35452, 35453, 35454, 35455, 35456, 28020, 23507, 35029, 39044, 35947, 39533, 40499, 28170, 20900, 20803, 22435, 34945, 21407, 25588, 36757, 22253, 21592, 22278, 29503, 28304, 32536, 36828, 33489, 24895, 24616, 38498, 26352, 32422, 36234, 36291, 38053, 23731, 31908, 26376, 24742, 38405, 32792, 20113, 37095, 21248, 38504, 20801, 36816, 34164, 37213, 26197, 38901, 23381, 21277, 30776, 26434, 26685, 21705, 28798, 23472, 36733, 20877, 22312, 21681, 25874, 26242, 36190, 36163, 33039, 33900, 36973, 31967, 20991, 34299, 26531, 26089, 28577, 34468, 36481, 22122, 36896, 30338, 28790, 29157, 36131, 25321, 21017, 27901, 36156, 24590, 22686, 24974, 26366, 36192, 25166, 21939, 28195, 26413, 36711, 35457, 35458, 35459, 35460, 35461, 35462, 35463, 35464, 35467, 35468, 35469, 35470, 35471, 35472, 35473, 35474, 35476, 35477, 35478, 35479, 35480, 35481, 35482, 35483, 35484, 35485, 35486, 35487, 35488, 35489, 35490, 35491, 35492, 35493, 35494, 35495, 35496, 35497, 35498, 35499, 35500, 35501, 35502, 35503, 35504, 35505, 35506, 35507, 35508, 35509, 35510, 35511, 35512, 35513, 35514, 35515, 35516, 35517, 35518, 35519, 35520, 35521, 35522, 35523, 35524, 35525, 35526, 35527, 35528, 35529, 35530, 35531, 35532, 35533, 35534, 35535, 35536, 35537, 35538, 35539, 35540, 35541, 35542, 35543, 35544, 35545, 35546, 35547, 35548, 35549, 35550, 35551, 35552, 35553, 35554, 35555, 38113, 38392, 30504, 26629, 27048, 21643, 20045, 28856, 35784, 25688, 25995, 23429, 31364, 20538, 23528, 30651, 27617, 35449, 31896, 27838, 30415, 26025, 36759, 23853, 23637, 34360, 26632, 21344, 25112, 31449, 28251, 32509, 27167, 31456, 24432, 28467, 24352, 25484, 28072, 26454, 19976, 24080, 36134, 20183, 32960, 30260, 38556, 25307, 26157, 25214, 27836, 36213, 29031, 32617, 20806, 32903, 21484, 36974, 25240, 21746, 34544, 36761, 32773, 38167, 34071, 36825, 27993, 29645, 26015, 30495, 29956, 30759, 33275, 36126, 38024, 20390, 26517, 30137, 35786, 38663, 25391, 38215, 38453, 33976, 25379, 30529, 24449, 29424, 20105, 24596, 25972, 25327, 27491, 25919, 35556, 35557, 35558, 35559, 35560, 35561, 35562, 35563, 35564, 35565, 35566, 35567, 35568, 35569, 35570, 35571, 35572, 35573, 35574, 35575, 35576, 35577, 35578, 35579, 35580, 35581, 35582, 35583, 35584, 35585, 35586, 35587, 35588, 35589, 35590, 35592, 35593, 35594, 35595, 35596, 35597, 35598, 35599, 35600, 35601, 35602, 35603, 35604, 35605, 35606, 35607, 35608, 35609, 35610, 35611, 35612, 35613, 35614, 35615, 35616, 35617, 35618, 35619, 35620, 35621, 35623, 35624, 35625, 35626, 35627, 35628, 35629, 35630, 35631, 35632, 35633, 35634, 35635, 35636, 35637, 35638, 35639, 35640, 35641, 35642, 35643, 35644, 35645, 35646, 35647, 35648, 35649, 35650, 35651, 35652, 35653, 24103, 30151, 37073, 35777, 33437, 26525, 25903, 21553, 34584, 30693, 32930, 33026, 27713, 20043, 32455, 32844, 30452, 26893, 27542, 25191, 20540, 20356, 22336, 25351, 27490, 36286, 21482, 26088, 32440, 24535, 25370, 25527, 33267, 33268, 32622, 24092, 23769, 21046, 26234, 31209, 31258, 36136, 28825, 30164, 28382, 27835, 31378, 20013, 30405, 24544, 38047, 34935, 32456, 31181, 32959, 37325, 20210, 20247, 33311, 21608, 24030, 27954, 35788, 31909, 36724, 32920, 24090, 21650, 30385, 23449, 26172, 39588, 29664, 26666, 34523, 26417, 29482, 35832, 35803, 36880, 31481, 28891, 29038, 25284, 30633, 22065, 20027, 33879, 26609, 21161, 34496, 36142, 38136, 31569, 35654, 35655, 35656, 35657, 35658, 35659, 35660, 35661, 35662, 35663, 35664, 35665, 35666, 35667, 35668, 35669, 35670, 35671, 35672, 35673, 35674, 35675, 35676, 35677, 35678, 35679, 35680, 35681, 35682, 35683, 35684, 35685, 35687, 35688, 35689, 35690, 35691, 35693, 35694, 35695, 35696, 35697, 35698, 35699, 35700, 35701, 35702, 35703, 35704, 35705, 35706, 35707, 35708, 35709, 35710, 35711, 35712, 35713, 35714, 35715, 35716, 35717, 35718, 35719, 35720, 35721, 35722, 35723, 35724, 35725, 35726, 35727, 35728, 35729, 35730, 35731, 35732, 35733, 35734, 35735, 35736, 35737, 35738, 35739, 35740, 35741, 35742, 35743, 35756, 35761, 35771, 35783, 35792, 35818, 35849, 35870, 20303, 27880, 31069, 39547, 25235, 29226, 25341, 19987, 30742, 36716, 25776, 36186, 31686, 26729, 24196, 35013, 22918, 25758, 22766, 29366, 26894, 38181, 36861, 36184, 22368, 32512, 35846, 20934, 25417, 25305, 21331, 26700, 29730, 33537, 37196, 21828, 30528, 28796, 27978, 20857, 21672, 36164, 23039, 28363, 28100, 23388, 32043, 20180, 31869, 28371, 23376, 33258, 28173, 23383, 39683, 26837, 36394, 23447, 32508, 24635, 32437, 37049, 36208, 22863, 25549, 31199, 36275, 21330, 26063, 31062, 35781, 38459, 32452, 38075, 32386, 22068, 37257, 26368, 32618, 23562, 36981, 26152, 24038, 20304, 26590, 20570, 20316, 22352, 24231, null, null, null, null, null, 35896, 35897, 35898, 35899, 35900, 35901, 35902, 35903, 35904, 35906, 35907, 35908, 35909, 35912, 35914, 35915, 35917, 35918, 35919, 35920, 35921, 35922, 35923, 35924, 35926, 35927, 35928, 35929, 35931, 35932, 35933, 35934, 35935, 35936, 35939, 35940, 35941, 35942, 35943, 35944, 35945, 35948, 35949, 35950, 35951, 35952, 35953, 35954, 35956, 35957, 35958, 35959, 35963, 35964, 35965, 35966, 35967, 35968, 35969, 35971, 35972, 35974, 35975, 35976, 35979, 35981, 35982, 35983, 35984, 35985, 35986, 35987, 35989, 35990, 35991, 35993, 35994, 35995, 35996, 35997, 35998, 35999, 36000, 36001, 36002, 36003, 36004, 36005, 36006, 36007, 36008, 36009, 36010, 36011, 36012, 36013, 20109, 19980, 20800, 19984, 24319, 21317, 19989, 20120, 19998, 39730, 23404, 22121, 20008, 31162, 20031, 21269, 20039, 22829, 29243, 21358, 27664, 22239, 32996, 39319, 27603, 30590, 40727, 20022, 20127, 40720, 20060, 20073, 20115, 33416, 23387, 21868, 22031, 20164, 21389, 21405, 21411, 21413, 21422, 38757, 36189, 21274, 21493, 21286, 21294, 21310, 36188, 21350, 21347, 20994, 21000, 21006, 21037, 21043, 21055, 21056, 21068, 21086, 21089, 21084, 33967, 21117, 21122, 21121, 21136, 21139, 20866, 32596, 20155, 20163, 20169, 20162, 20200, 20193, 20203, 20190, 20251, 20211, 20258, 20324, 20213, 20261, 20263, 20233, 20267, 20318, 20327, 25912, 20314, 20317, 36014, 36015, 36016, 36017, 36018, 36019, 36020, 36021, 36022, 36023, 36024, 36025, 36026, 36027, 36028, 36029, 36030, 36031, 36032, 36033, 36034, 36035, 36036, 36037, 36038, 36039, 36040, 36041, 36042, 36043, 36044, 36045, 36046, 36047, 36048, 36049, 36050, 36051, 36052, 36053, 36054, 36055, 36056, 36057, 36058, 36059, 36060, 36061, 36062, 36063, 36064, 36065, 36066, 36067, 36068, 36069, 36070, 36071, 36072, 36073, 36074, 36075, 36076, 36077, 36078, 36079, 36080, 36081, 36082, 36083, 36084, 36085, 36086, 36087, 36088, 36089, 36090, 36091, 36092, 36093, 36094, 36095, 36096, 36097, 36098, 36099, 36100, 36101, 36102, 36103, 36104, 36105, 36106, 36107, 36108, 36109, 20319, 20311, 20274, 20285, 20342, 20340, 20369, 20361, 20355, 20367, 20350, 20347, 20394, 20348, 20396, 20372, 20454, 20456, 20458, 20421, 20442, 20451, 20444, 20433, 20447, 20472, 20521, 20556, 20467, 20524, 20495, 20526, 20525, 20478, 20508, 20492, 20517, 20520, 20606, 20547, 20565, 20552, 20558, 20588, 20603, 20645, 20647, 20649, 20666, 20694, 20742, 20717, 20716, 20710, 20718, 20743, 20747, 20189, 27709, 20312, 20325, 20430, 40864, 27718, 31860, 20846, 24061, 40649, 39320, 20865, 22804, 21241, 21261, 35335, 21264, 20971, 22809, 20821, 20128, 20822, 20147, 34926, 34980, 20149, 33044, 35026, 31104, 23348, 34819, 32696, 20907, 20913, 20925, 20924, 36110, 36111, 36112, 36113, 36114, 36115, 36116, 36117, 36118, 36119, 36120, 36121, 36122, 36123, 36124, 36128, 36177, 36178, 36183, 36191, 36197, 36200, 36201, 36202, 36204, 36206, 36207, 36209, 36210, 36216, 36217, 36218, 36219, 36220, 36221, 36222, 36223, 36224, 36226, 36227, 36230, 36231, 36232, 36233, 36236, 36237, 36238, 36239, 36240, 36242, 36243, 36245, 36246, 36247, 36248, 36249, 36250, 36251, 36252, 36253, 36254, 36256, 36257, 36258, 36260, 36261, 36262, 36263, 36264, 36265, 36266, 36267, 36268, 36269, 36270, 36271, 36272, 36274, 36278, 36279, 36281, 36283, 36285, 36288, 36289, 36290, 36293, 36295, 36296, 36297, 36298, 36301, 36304, 36306, 36307, 36308, 20935, 20886, 20898, 20901, 35744, 35750, 35751, 35754, 35764, 35765, 35767, 35778, 35779, 35787, 35791, 35790, 35794, 35795, 35796, 35798, 35800, 35801, 35804, 35807, 35808, 35812, 35816, 35817, 35822, 35824, 35827, 35830, 35833, 35836, 35839, 35840, 35842, 35844, 35847, 35852, 35855, 35857, 35858, 35860, 35861, 35862, 35865, 35867, 35864, 35869, 35871, 35872, 35873, 35877, 35879, 35882, 35883, 35886, 35887, 35890, 35891, 35893, 35894, 21353, 21370, 38429, 38434, 38433, 38449, 38442, 38461, 38460, 38466, 38473, 38484, 38495, 38503, 38508, 38514, 38516, 38536, 38541, 38551, 38576, 37015, 37019, 37021, 37017, 37036, 37025, 37044, 37043, 37046, 37050, 36309, 36312, 36313, 36316, 36320, 36321, 36322, 36325, 36326, 36327, 36329, 36333, 36334, 36336, 36337, 36338, 36340, 36342, 36348, 36350, 36351, 36352, 36353, 36354, 36355, 36356, 36358, 36359, 36360, 36363, 36365, 36366, 36368, 36369, 36370, 36371, 36373, 36374, 36375, 36376, 36377, 36378, 36379, 36380, 36384, 36385, 36388, 36389, 36390, 36391, 36392, 36395, 36397, 36400, 36402, 36403, 36404, 36406, 36407, 36408, 36411, 36412, 36414, 36415, 36419, 36421, 36422, 36428, 36429, 36430, 36431, 36432, 36435, 36436, 36437, 36438, 36439, 36440, 36442, 36443, 36444, 36445, 36446, 36447, 36448, 36449, 36450, 36451, 36452, 36453, 36455, 36456, 36458, 36459, 36462, 36465, 37048, 37040, 37071, 37061, 37054, 37072, 37060, 37063, 37075, 37094, 37090, 37084, 37079, 37083, 37099, 37103, 37118, 37124, 37154, 37150, 37155, 37169, 37167, 37177, 37187, 37190, 21005, 22850, 21154, 21164, 21165, 21182, 21759, 21200, 21206, 21232, 21471, 29166, 30669, 24308, 20981, 20988, 39727, 21430, 24321, 30042, 24047, 22348, 22441, 22433, 22654, 22716, 22725, 22737, 22313, 22316, 22314, 22323, 22329, 22318, 22319, 22364, 22331, 22338, 22377, 22405, 22379, 22406, 22396, 22395, 22376, 22381, 22390, 22387, 22445, 22436, 22412, 22450, 22479, 22439, 22452, 22419, 22432, 22485, 22488, 22490, 22489, 22482, 22456, 22516, 22511, 22520, 22500, 22493, 36467, 36469, 36471, 36472, 36473, 36474, 36475, 36477, 36478, 36480, 36482, 36483, 36484, 36486, 36488, 36489, 36490, 36491, 36492, 36493, 36494, 36497, 36498, 36499, 36501, 36502, 36503, 36504, 36505, 36506, 36507, 36509, 36511, 36512, 36513, 36514, 36515, 36516, 36517, 36518, 36519, 36520, 36521, 36522, 36525, 36526, 36528, 36529, 36531, 36532, 36533, 36534, 36535, 36536, 36537, 36539, 36540, 36541, 36542, 36543, 36544, 36545, 36546, 36547, 36548, 36549, 36550, 36551, 36552, 36553, 36554, 36555, 36556, 36557, 36559, 36560, 36561, 36562, 36563, 36564, 36565, 36566, 36567, 36568, 36569, 36570, 36571, 36572, 36573, 36574, 36575, 36576, 36577, 36578, 36579, 36580, 22539, 22541, 22525, 22509, 22528, 22558, 22553, 22596, 22560, 22629, 22636, 22657, 22665, 22682, 22656, 39336, 40729, 25087, 33401, 33405, 33407, 33423, 33418, 33448, 33412, 33422, 33425, 33431, 33433, 33451, 33464, 33470, 33456, 33480, 33482, 33507, 33432, 33463, 33454, 33483, 33484, 33473, 33449, 33460, 33441, 33450, 33439, 33476, 33486, 33444, 33505, 33545, 33527, 33508, 33551, 33543, 33500, 33524, 33490, 33496, 33548, 33531, 33491, 33553, 33562, 33542, 33556, 33557, 33504, 33493, 33564, 33617, 33627, 33628, 33544, 33682, 33596, 33588, 33585, 33691, 33630, 33583, 33615, 33607, 33603, 33631, 33600, 33559, 33632, 33581, 33594, 33587, 33638, 33637, 36581, 36582, 36583, 36584, 36585, 36586, 36587, 36588, 36589, 36590, 36591, 36592, 36593, 36594, 36595, 36596, 36597, 36598, 36599, 36600, 36601, 36602, 36603, 36604, 36605, 36606, 36607, 36608, 36609, 36610, 36611, 36612, 36613, 36614, 36615, 36616, 36617, 36618, 36619, 36620, 36621, 36622, 36623, 36624, 36625, 36626, 36627, 36628, 36629, 36630, 36631, 36632, 36633, 36634, 36635, 36636, 36637, 36638, 36639, 36640, 36641, 36642, 36643, 36644, 36645, 36646, 36647, 36648, 36649, 36650, 36651, 36652, 36653, 36654, 36655, 36656, 36657, 36658, 36659, 36660, 36661, 36662, 36663, 36664, 36665, 36666, 36667, 36668, 36669, 36670, 36671, 36672, 36673, 36674, 36675, 36676, 33640, 33563, 33641, 33644, 33642, 33645, 33646, 33712, 33656, 33715, 33716, 33696, 33706, 33683, 33692, 33669, 33660, 33718, 33705, 33661, 33720, 33659, 33688, 33694, 33704, 33722, 33724, 33729, 33793, 33765, 33752, 22535, 33816, 33803, 33757, 33789, 33750, 33820, 33848, 33809, 33798, 33748, 33759, 33807, 33795, 33784, 33785, 33770, 33733, 33728, 33830, 33776, 33761, 33884, 33873, 33882, 33881, 33907, 33927, 33928, 33914, 33929, 33912, 33852, 33862, 33897, 33910, 33932, 33934, 33841, 33901, 33985, 33997, 34000, 34022, 33981, 34003, 33994, 33983, 33978, 34016, 33953, 33977, 33972, 33943, 34021, 34019, 34060, 29965, 34104, 34032, 34105, 34079, 34106, 36677, 36678, 36679, 36680, 36681, 36682, 36683, 36684, 36685, 36686, 36687, 36688, 36689, 36690, 36691, 36692, 36693, 36694, 36695, 36696, 36697, 36698, 36699, 36700, 36701, 36702, 36703, 36704, 36705, 36706, 36707, 36708, 36709, 36714, 36736, 36748, 36754, 36765, 36768, 36769, 36770, 36772, 36773, 36774, 36775, 36778, 36780, 36781, 36782, 36783, 36786, 36787, 36788, 36789, 36791, 36792, 36794, 36795, 36796, 36799, 36800, 36803, 36806, 36809, 36810, 36811, 36812, 36813, 36815, 36818, 36822, 36823, 36826, 36832, 36833, 36835, 36839, 36844, 36847, 36849, 36850, 36852, 36853, 36854, 36858, 36859, 36860, 36862, 36863, 36871, 36872, 36876, 36878, 36883, 36885, 36888, 34134, 34107, 34047, 34044, 34137, 34120, 34152, 34148, 34142, 34170, 30626, 34115, 34162, 34171, 34212, 34216, 34183, 34191, 34169, 34222, 34204, 34181, 34233, 34231, 34224, 34259, 34241, 34268, 34303, 34343, 34309, 34345, 34326, 34364, 24318, 24328, 22844, 22849, 32823, 22869, 22874, 22872, 21263, 23586, 23589, 23596, 23604, 25164, 25194, 25247, 25275, 25290, 25306, 25303, 25326, 25378, 25334, 25401, 25419, 25411, 25517, 25590, 25457, 25466, 25486, 25524, 25453, 25516, 25482, 25449, 25518, 25532, 25586, 25592, 25568, 25599, 25540, 25566, 25550, 25682, 25542, 25534, 25669, 25665, 25611, 25627, 25632, 25612, 25638, 25633, 25694, 25732, 25709, 25750, 36889, 36892, 36899, 36900, 36901, 36903, 36904, 36905, 36906, 36907, 36908, 36912, 36913, 36914, 36915, 36916, 36919, 36921, 36922, 36925, 36927, 36928, 36931, 36933, 36934, 36936, 36937, 36938, 36939, 36940, 36942, 36948, 36949, 36950, 36953, 36954, 36956, 36957, 36958, 36959, 36960, 36961, 36964, 36966, 36967, 36969, 36970, 36971, 36972, 36975, 36976, 36977, 36978, 36979, 36982, 36983, 36984, 36985, 36986, 36987, 36988, 36990, 36993, 36996, 36997, 36998, 36999, 37001, 37002, 37004, 37005, 37006, 37007, 37008, 37010, 37012, 37014, 37016, 37018, 37020, 37022, 37023, 37024, 37028, 37029, 37031, 37032, 37033, 37035, 37037, 37042, 37047, 37052, 37053, 37055, 37056, 25722, 25783, 25784, 25753, 25786, 25792, 25808, 25815, 25828, 25826, 25865, 25893, 25902, 24331, 24530, 29977, 24337, 21343, 21489, 21501, 21481, 21480, 21499, 21522, 21526, 21510, 21579, 21586, 21587, 21588, 21590, 21571, 21537, 21591, 21593, 21539, 21554, 21634, 21652, 21623, 21617, 21604, 21658, 21659, 21636, 21622, 21606, 21661, 21712, 21677, 21698, 21684, 21714, 21671, 21670, 21715, 21716, 21618, 21667, 21717, 21691, 21695, 21708, 21721, 21722, 21724, 21673, 21674, 21668, 21725, 21711, 21726, 21787, 21735, 21792, 21757, 21780, 21747, 21794, 21795, 21775, 21777, 21799, 21802, 21863, 21903, 21941, 21833, 21869, 21825, 21845, 21823, 21840, 21820, 37058, 37059, 37062, 37064, 37065, 37067, 37068, 37069, 37074, 37076, 37077, 37078, 37080, 37081, 37082, 37086, 37087, 37088, 37091, 37092, 37093, 37097, 37098, 37100, 37102, 37104, 37105, 37106, 37107, 37109, 37110, 37111, 37113, 37114, 37115, 37116, 37119, 37120, 37121, 37123, 37125, 37126, 37127, 37128, 37129, 37130, 37131, 37132, 37133, 37134, 37135, 37136, 37137, 37138, 37139, 37140, 37141, 37142, 37143, 37144, 37146, 37147, 37148, 37149, 37151, 37152, 37153, 37156, 37157, 37158, 37159, 37160, 37161, 37162, 37163, 37164, 37165, 37166, 37168, 37170, 37171, 37172, 37173, 37174, 37175, 37176, 37178, 37179, 37180, 37181, 37182, 37183, 37184, 37185, 37186, 37188, 21815, 21846, 21877, 21878, 21879, 21811, 21808, 21852, 21899, 21970, 21891, 21937, 21945, 21896, 21889, 21919, 21886, 21974, 21905, 21883, 21983, 21949, 21950, 21908, 21913, 21994, 22007, 21961, 22047, 21969, 21995, 21996, 21972, 21990, 21981, 21956, 21999, 21989, 22002, 22003, 21964, 21965, 21992, 22005, 21988, 36756, 22046, 22024, 22028, 22017, 22052, 22051, 22014, 22016, 22055, 22061, 22104, 22073, 22103, 22060, 22093, 22114, 22105, 22108, 22092, 22100, 22150, 22116, 22129, 22123, 22139, 22140, 22149, 22163, 22191, 22228, 22231, 22237, 22241, 22261, 22251, 22265, 22271, 22276, 22282, 22281, 22300, 24079, 24089, 24084, 24081, 24113, 24123, 24124, 37189, 37191, 37192, 37201, 37203, 37204, 37205, 37206, 37208, 37209, 37211, 37212, 37215, 37216, 37222, 37223, 37224, 37227, 37229, 37235, 37242, 37243, 37244, 37248, 37249, 37250, 37251, 37252, 37254, 37256, 37258, 37262, 37263, 37267, 37268, 37269, 37270, 37271, 37272, 37273, 37276, 37277, 37278, 37279, 37280, 37281, 37284, 37285, 37286, 37287, 37288, 37289, 37291, 37292, 37296, 37297, 37298, 37299, 37302, 37303, 37304, 37305, 37307, 37308, 37309, 37310, 37311, 37312, 37313, 37314, 37315, 37316, 37317, 37318, 37320, 37323, 37328, 37330, 37331, 37332, 37333, 37334, 37335, 37336, 37337, 37338, 37339, 37341, 37342, 37343, 37344, 37345, 37346, 37347, 37348, 37349, 24119, 24132, 24148, 24155, 24158, 24161, 23692, 23674, 23693, 23696, 23702, 23688, 23704, 23705, 23697, 23706, 23708, 23733, 23714, 23741, 23724, 23723, 23729, 23715, 23745, 23735, 23748, 23762, 23780, 23755, 23781, 23810, 23811, 23847, 23846, 23854, 23844, 23838, 23814, 23835, 23896, 23870, 23860, 23869, 23916, 23899, 23919, 23901, 23915, 23883, 23882, 23913, 23924, 23938, 23961, 23965, 35955, 23991, 24005, 24435, 24439, 24450, 24455, 24457, 24460, 24469, 24473, 24476, 24488, 24493, 24501, 24508, 34914, 24417, 29357, 29360, 29364, 29367, 29368, 29379, 29377, 29390, 29389, 29394, 29416, 29423, 29417, 29426, 29428, 29431, 29441, 29427, 29443, 29434, 37350, 37351, 37352, 37353, 37354, 37355, 37356, 37357, 37358, 37359, 37360, 37361, 37362, 37363, 37364, 37365, 37366, 37367, 37368, 37369, 37370, 37371, 37372, 37373, 37374, 37375, 37376, 37377, 37378, 37379, 37380, 37381, 37382, 37383, 37384, 37385, 37386, 37387, 37388, 37389, 37390, 37391, 37392, 37393, 37394, 37395, 37396, 37397, 37398, 37399, 37400, 37401, 37402, 37403, 37404, 37405, 37406, 37407, 37408, 37409, 37410, 37411, 37412, 37413, 37414, 37415, 37416, 37417, 37418, 37419, 37420, 37421, 37422, 37423, 37424, 37425, 37426, 37427, 37428, 37429, 37430, 37431, 37432, 37433, 37434, 37435, 37436, 37437, 37438, 37439, 37440, 37441, 37442, 37443, 37444, 37445, 29435, 29463, 29459, 29473, 29450, 29470, 29469, 29461, 29474, 29497, 29477, 29484, 29496, 29489, 29520, 29517, 29527, 29536, 29548, 29551, 29566, 33307, 22821, 39143, 22820, 22786, 39267, 39271, 39272, 39273, 39274, 39275, 39276, 39284, 39287, 39293, 39296, 39300, 39303, 39306, 39309, 39312, 39313, 39315, 39316, 39317, 24192, 24209, 24203, 24214, 24229, 24224, 24249, 24245, 24254, 24243, 36179, 24274, 24273, 24283, 24296, 24298, 33210, 24516, 24521, 24534, 24527, 24579, 24558, 24580, 24545, 24548, 24574, 24581, 24582, 24554, 24557, 24568, 24601, 24629, 24614, 24603, 24591, 24589, 24617, 24619, 24586, 24639, 24609, 24696, 24697, 24699, 24698, 24642, 37446, 37447, 37448, 37449, 37450, 37451, 37452, 37453, 37454, 37455, 37456, 37457, 37458, 37459, 37460, 37461, 37462, 37463, 37464, 37465, 37466, 37467, 37468, 37469, 37470, 37471, 37472, 37473, 37474, 37475, 37476, 37477, 37478, 37479, 37480, 37481, 37482, 37483, 37484, 37485, 37486, 37487, 37488, 37489, 37490, 37491, 37493, 37494, 37495, 37496, 37497, 37498, 37499, 37500, 37501, 37502, 37503, 37504, 37505, 37506, 37507, 37508, 37509, 37510, 37511, 37512, 37513, 37514, 37515, 37516, 37517, 37519, 37520, 37521, 37522, 37523, 37524, 37525, 37526, 37527, 37528, 37529, 37530, 37531, 37532, 37533, 37534, 37535, 37536, 37537, 37538, 37539, 37540, 37541, 37542, 37543, 24682, 24701, 24726, 24730, 24749, 24733, 24707, 24722, 24716, 24731, 24812, 24763, 24753, 24797, 24792, 24774, 24794, 24756, 24864, 24870, 24853, 24867, 24820, 24832, 24846, 24875, 24906, 24949, 25004, 24980, 24999, 25015, 25044, 25077, 24541, 38579, 38377, 38379, 38385, 38387, 38389, 38390, 38396, 38398, 38403, 38404, 38406, 38408, 38410, 38411, 38412, 38413, 38415, 38418, 38421, 38422, 38423, 38425, 38426, 20012, 29247, 25109, 27701, 27732, 27740, 27722, 27811, 27781, 27792, 27796, 27788, 27752, 27753, 27764, 27766, 27782, 27817, 27856, 27860, 27821, 27895, 27896, 27889, 27863, 27826, 27872, 27862, 27898, 27883, 27886, 27825, 27859, 27887, 27902, 37544, 37545, 37546, 37547, 37548, 37549, 37551, 37552, 37553, 37554, 37555, 37556, 37557, 37558, 37559, 37560, 37561, 37562, 37563, 37564, 37565, 37566, 37567, 37568, 37569, 37570, 37571, 37572, 37573, 37574, 37575, 37577, 37578, 37579, 37580, 37581, 37582, 37583, 37584, 37585, 37586, 37587, 37588, 37589, 37590, 37591, 37592, 37593, 37594, 37595, 37596, 37597, 37598, 37599, 37600, 37601, 37602, 37603, 37604, 37605, 37606, 37607, 37608, 37609, 37610, 37611, 37612, 37613, 37614, 37615, 37616, 37617, 37618, 37619, 37620, 37621, 37622, 37623, 37624, 37625, 37626, 37627, 37628, 37629, 37630, 37631, 37632, 37633, 37634, 37635, 37636, 37637, 37638, 37639, 37640, 37641, 27961, 27943, 27916, 27971, 27976, 27911, 27908, 27929, 27918, 27947, 27981, 27950, 27957, 27930, 27983, 27986, 27988, 27955, 28049, 28015, 28062, 28064, 27998, 28051, 28052, 27996, 28000, 28028, 28003, 28186, 28103, 28101, 28126, 28174, 28095, 28128, 28177, 28134, 28125, 28121, 28182, 28075, 28172, 28078, 28203, 28270, 28238, 28267, 28338, 28255, 28294, 28243, 28244, 28210, 28197, 28228, 28383, 28337, 28312, 28384, 28461, 28386, 28325, 28327, 28349, 28347, 28343, 28375, 28340, 28367, 28303, 28354, 28319, 28514, 28486, 28487, 28452, 28437, 28409, 28463, 28470, 28491, 28532, 28458, 28425, 28457, 28553, 28557, 28556, 28536, 28530, 28540, 28538, 28625, 37642, 37643, 37644, 37645, 37646, 37647, 37648, 37649, 37650, 37651, 37652, 37653, 37654, 37655, 37656, 37657, 37658, 37659, 37660, 37661, 37662, 37663, 37664, 37665, 37666, 37667, 37668, 37669, 37670, 37671, 37672, 37673, 37674, 37675, 37676, 37677, 37678, 37679, 37680, 37681, 37682, 37683, 37684, 37685, 37686, 37687, 37688, 37689, 37690, 37691, 37692, 37693, 37695, 37696, 37697, 37698, 37699, 37700, 37701, 37702, 37703, 37704, 37705, 37706, 37707, 37708, 37709, 37710, 37711, 37712, 37713, 37714, 37715, 37716, 37717, 37718, 37719, 37720, 37721, 37722, 37723, 37724, 37725, 37726, 37727, 37728, 37729, 37730, 37731, 37732, 37733, 37734, 37735, 37736, 37737, 37739, 28617, 28583, 28601, 28598, 28610, 28641, 28654, 28638, 28640, 28655, 28698, 28707, 28699, 28729, 28725, 28751, 28766, 23424, 23428, 23445, 23443, 23461, 23480, 29999, 39582, 25652, 23524, 23534, 35120, 23536, 36423, 35591, 36790, 36819, 36821, 36837, 36846, 36836, 36841, 36838, 36851, 36840, 36869, 36868, 36875, 36902, 36881, 36877, 36886, 36897, 36917, 36918, 36909, 36911, 36932, 36945, 36946, 36944, 36968, 36952, 36962, 36955, 26297, 36980, 36989, 36994, 37000, 36995, 37003, 24400, 24407, 24406, 24408, 23611, 21675, 23632, 23641, 23409, 23651, 23654, 32700, 24362, 24361, 24365, 33396, 24380, 39739, 23662, 22913, 22915, 22925, 22953, 22954, 22947, 37740, 37741, 37742, 37743, 37744, 37745, 37746, 37747, 37748, 37749, 37750, 37751, 37752, 37753, 37754, 37755, 37756, 37757, 37758, 37759, 37760, 37761, 37762, 37763, 37764, 37765, 37766, 37767, 37768, 37769, 37770, 37771, 37772, 37773, 37774, 37776, 37777, 37778, 37779, 37780, 37781, 37782, 37783, 37784, 37785, 37786, 37787, 37788, 37789, 37790, 37791, 37792, 37793, 37794, 37795, 37796, 37797, 37798, 37799, 37800, 37801, 37802, 37803, 37804, 37805, 37806, 37807, 37808, 37809, 37810, 37811, 37812, 37813, 37814, 37815, 37816, 37817, 37818, 37819, 37820, 37821, 37822, 37823, 37824, 37825, 37826, 37827, 37828, 37829, 37830, 37831, 37832, 37833, 37835, 37836, 37837, 22935, 22986, 22955, 22942, 22948, 22994, 22962, 22959, 22999, 22974, 23045, 23046, 23005, 23048, 23011, 23000, 23033, 23052, 23049, 23090, 23092, 23057, 23075, 23059, 23104, 23143, 23114, 23125, 23100, 23138, 23157, 33004, 23210, 23195, 23159, 23162, 23230, 23275, 23218, 23250, 23252, 23224, 23264, 23267, 23281, 23254, 23270, 23256, 23260, 23305, 23319, 23318, 23346, 23351, 23360, 23573, 23580, 23386, 23397, 23411, 23377, 23379, 23394, 39541, 39543, 39544, 39546, 39551, 39549, 39552, 39553, 39557, 39560, 39562, 39568, 39570, 39571, 39574, 39576, 39579, 39580, 39581, 39583, 39584, 39586, 39587, 39589, 39591, 32415, 32417, 32419, 32421, 32424, 32425, 37838, 37839, 37840, 37841, 37842, 37843, 37844, 37845, 37847, 37848, 37849, 37850, 37851, 37852, 37853, 37854, 37855, 37856, 37857, 37858, 37859, 37860, 37861, 37862, 37863, 37864, 37865, 37866, 37867, 37868, 37869, 37870, 37871, 37872, 37873, 37874, 37875, 37876, 37877, 37878, 37879, 37880, 37881, 37882, 37883, 37884, 37885, 37886, 37887, 37888, 37889, 37890, 37891, 37892, 37893, 37894, 37895, 37896, 37897, 37898, 37899, 37900, 37901, 37902, 37903, 37904, 37905, 37906, 37907, 37908, 37909, 37910, 37911, 37912, 37913, 37914, 37915, 37916, 37917, 37918, 37919, 37920, 37921, 37922, 37923, 37924, 37925, 37926, 37927, 37928, 37929, 37930, 37931, 37932, 37933, 37934, 32429, 32432, 32446, 32448, 32449, 32450, 32457, 32459, 32460, 32464, 32468, 32471, 32475, 32480, 32481, 32488, 32491, 32494, 32495, 32497, 32498, 32525, 32502, 32506, 32507, 32510, 32513, 32514, 32515, 32519, 32520, 32523, 32524, 32527, 32529, 32530, 32535, 32537, 32540, 32539, 32543, 32545, 32546, 32547, 32548, 32549, 32550, 32551, 32554, 32555, 32556, 32557, 32559, 32560, 32561, 32562, 32563, 32565, 24186, 30079, 24027, 30014, 37013, 29582, 29585, 29614, 29602, 29599, 29647, 29634, 29649, 29623, 29619, 29632, 29641, 29640, 29669, 29657, 39036, 29706, 29673, 29671, 29662, 29626, 29682, 29711, 29738, 29787, 29734, 29733, 29736, 29744, 29742, 29740, 37935, 37936, 37937, 37938, 37939, 37940, 37941, 37942, 37943, 37944, 37945, 37946, 37947, 37948, 37949, 37951, 37952, 37953, 37954, 37955, 37956, 37957, 37958, 37959, 37960, 37961, 37962, 37963, 37964, 37965, 37966, 37967, 37968, 37969, 37970, 37971, 37972, 37973, 37974, 37975, 37976, 37977, 37978, 37979, 37980, 37981, 37982, 37983, 37984, 37985, 37986, 37987, 37988, 37989, 37990, 37991, 37992, 37993, 37994, 37996, 37997, 37998, 37999, 38000, 38001, 38002, 38003, 38004, 38005, 38006, 38007, 38008, 38009, 38010, 38011, 38012, 38013, 38014, 38015, 38016, 38017, 38018, 38019, 38020, 38033, 38038, 38040, 38087, 38095, 38099, 38100, 38106, 38118, 38139, 38172, 38176, 29723, 29722, 29761, 29788, 29783, 29781, 29785, 29815, 29805, 29822, 29852, 29838, 29824, 29825, 29831, 29835, 29854, 29864, 29865, 29840, 29863, 29906, 29882, 38890, 38891, 38892, 26444, 26451, 26462, 26440, 26473, 26533, 26503, 26474, 26483, 26520, 26535, 26485, 26536, 26526, 26541, 26507, 26487, 26492, 26608, 26633, 26584, 26634, 26601, 26544, 26636, 26585, 26549, 26586, 26547, 26589, 26624, 26563, 26552, 26594, 26638, 26561, 26621, 26674, 26675, 26720, 26721, 26702, 26722, 26692, 26724, 26755, 26653, 26709, 26726, 26689, 26727, 26688, 26686, 26698, 26697, 26665, 26805, 26767, 26740, 26743, 26771, 26731, 26818, 26990, 26876, 26911, 26912, 26873, 38183, 38195, 38205, 38211, 38216, 38219, 38229, 38234, 38240, 38254, 38260, 38261, 38263, 38264, 38265, 38266, 38267, 38268, 38269, 38270, 38272, 38273, 38274, 38275, 38276, 38277, 38278, 38279, 38280, 38281, 38282, 38283, 38284, 38285, 38286, 38287, 38288, 38289, 38290, 38291, 38292, 38293, 38294, 38295, 38296, 38297, 38298, 38299, 38300, 38301, 38302, 38303, 38304, 38305, 38306, 38307, 38308, 38309, 38310, 38311, 38312, 38313, 38314, 38315, 38316, 38317, 38318, 38319, 38320, 38321, 38322, 38323, 38324, 38325, 38326, 38327, 38328, 38329, 38330, 38331, 38332, 38333, 38334, 38335, 38336, 38337, 38338, 38339, 38340, 38341, 38342, 38343, 38344, 38345, 38346, 38347, 26916, 26864, 26891, 26881, 26967, 26851, 26896, 26993, 26937, 26976, 26946, 26973, 27012, 26987, 27008, 27032, 27000, 26932, 27084, 27015, 27016, 27086, 27017, 26982, 26979, 27001, 27035, 27047, 27067, 27051, 27053, 27092, 27057, 27073, 27082, 27103, 27029, 27104, 27021, 27135, 27183, 27117, 27159, 27160, 27237, 27122, 27204, 27198, 27296, 27216, 27227, 27189, 27278, 27257, 27197, 27176, 27224, 27260, 27281, 27280, 27305, 27287, 27307, 29495, 29522, 27521, 27522, 27527, 27524, 27538, 27539, 27533, 27546, 27547, 27553, 27562, 36715, 36717, 36721, 36722, 36723, 36725, 36726, 36728, 36727, 36729, 36730, 36732, 36734, 36737, 36738, 36740, 36743, 36747, 38348, 38349, 38350, 38351, 38352, 38353, 38354, 38355, 38356, 38357, 38358, 38359, 38360, 38361, 38362, 38363, 38364, 38365, 38366, 38367, 38368, 38369, 38370, 38371, 38372, 38373, 38374, 38375, 38380, 38399, 38407, 38419, 38424, 38427, 38430, 38432, 38435, 38436, 38437, 38438, 38439, 38440, 38441, 38443, 38444, 38445, 38447, 38448, 38455, 38456, 38457, 38458, 38462, 38465, 38467, 38474, 38478, 38479, 38481, 38482, 38483, 38486, 38487, 38488, 38489, 38490, 38492, 38493, 38494, 38496, 38499, 38501, 38502, 38507, 38509, 38510, 38511, 38512, 38513, 38515, 38520, 38521, 38522, 38523, 38524, 38525, 38526, 38527, 38528, 38529, 38530, 38531, 38532, 38535, 38537, 38538, 36749, 36750, 36751, 36760, 36762, 36558, 25099, 25111, 25115, 25119, 25122, 25121, 25125, 25124, 25132, 33255, 29935, 29940, 29951, 29967, 29969, 29971, 25908, 26094, 26095, 26096, 26122, 26137, 26482, 26115, 26133, 26112, 28805, 26359, 26141, 26164, 26161, 26166, 26165, 32774, 26207, 26196, 26177, 26191, 26198, 26209, 26199, 26231, 26244, 26252, 26279, 26269, 26302, 26331, 26332, 26342, 26345, 36146, 36147, 36150, 36155, 36157, 36160, 36165, 36166, 36168, 36169, 36167, 36173, 36181, 36185, 35271, 35274, 35275, 35276, 35278, 35279, 35280, 35281, 29294, 29343, 29277, 29286, 29295, 29310, 29311, 29316, 29323, 29325, 29327, 29330, 25352, 25394, 25520, 38540, 38542, 38545, 38546, 38547, 38549, 38550, 38554, 38555, 38557, 38558, 38559, 38560, 38561, 38562, 38563, 38564, 38565, 38566, 38568, 38569, 38570, 38571, 38572, 38573, 38574, 38575, 38577, 38578, 38580, 38581, 38583, 38584, 38586, 38587, 38591, 38594, 38595, 38600, 38602, 38603, 38608, 38609, 38611, 38612, 38614, 38615, 38616, 38617, 38618, 38619, 38620, 38621, 38622, 38623, 38625, 38626, 38627, 38628, 38629, 38630, 38631, 38635, 38636, 38637, 38638, 38640, 38641, 38642, 38644, 38645, 38648, 38650, 38651, 38652, 38653, 38655, 38658, 38659, 38661, 38666, 38667, 38668, 38672, 38673, 38674, 38676, 38677, 38679, 38680, 38681, 38682, 38683, 38685, 38687, 38688, 25663, 25816, 32772, 27626, 27635, 27645, 27637, 27641, 27653, 27655, 27654, 27661, 27669, 27672, 27673, 27674, 27681, 27689, 27684, 27690, 27698, 25909, 25941, 25963, 29261, 29266, 29270, 29232, 34402, 21014, 32927, 32924, 32915, 32956, 26378, 32957, 32945, 32939, 32941, 32948, 32951, 32999, 33000, 33001, 33002, 32987, 32962, 32964, 32985, 32973, 32983, 26384, 32989, 33003, 33009, 33012, 33005, 33037, 33038, 33010, 33020, 26389, 33042, 35930, 33078, 33054, 33068, 33048, 33074, 33096, 33100, 33107, 33140, 33113, 33114, 33137, 33120, 33129, 33148, 33149, 33133, 33127, 22605, 23221, 33160, 33154, 33169, 28373, 33187, 33194, 33228, 26406, 33226, 33211, 38689, 38690, 38691, 38692, 38693, 38694, 38695, 38696, 38697, 38699, 38700, 38702, 38703, 38705, 38707, 38708, 38709, 38710, 38711, 38714, 38715, 38716, 38717, 38719, 38720, 38721, 38722, 38723, 38724, 38725, 38726, 38727, 38728, 38729, 38730, 38731, 38732, 38733, 38734, 38735, 38736, 38737, 38740, 38741, 38743, 38744, 38746, 38748, 38749, 38751, 38755, 38756, 38758, 38759, 38760, 38762, 38763, 38764, 38765, 38766, 38767, 38768, 38769, 38770, 38773, 38775, 38776, 38777, 38778, 38779, 38781, 38782, 38783, 38784, 38785, 38786, 38787, 38788, 38790, 38791, 38792, 38793, 38794, 38796, 38798, 38799, 38800, 38803, 38805, 38806, 38807, 38809, 38810, 38811, 38812, 38813, 33217, 33190, 27428, 27447, 27449, 27459, 27462, 27481, 39121, 39122, 39123, 39125, 39129, 39130, 27571, 24384, 27586, 35315, 26000, 40785, 26003, 26044, 26054, 26052, 26051, 26060, 26062, 26066, 26070, 28800, 28828, 28822, 28829, 28859, 28864, 28855, 28843, 28849, 28904, 28874, 28944, 28947, 28950, 28975, 28977, 29043, 29020, 29032, 28997, 29042, 29002, 29048, 29050, 29080, 29107, 29109, 29096, 29088, 29152, 29140, 29159, 29177, 29213, 29224, 28780, 28952, 29030, 29113, 25150, 25149, 25155, 25160, 25161, 31035, 31040, 31046, 31049, 31067, 31068, 31059, 31066, 31074, 31063, 31072, 31087, 31079, 31098, 31109, 31114, 31130, 31143, 31155, 24529, 24528, 38814, 38815, 38817, 38818, 38820, 38821, 38822, 38823, 38824, 38825, 38826, 38828, 38830, 38832, 38833, 38835, 38837, 38838, 38839, 38840, 38841, 38842, 38843, 38844, 38845, 38846, 38847, 38848, 38849, 38850, 38851, 38852, 38853, 38854, 38855, 38856, 38857, 38858, 38859, 38860, 38861, 38862, 38863, 38864, 38865, 38866, 38867, 38868, 38869, 38870, 38871, 38872, 38873, 38874, 38875, 38876, 38877, 38878, 38879, 38880, 38881, 38882, 38883, 38884, 38885, 38888, 38894, 38895, 38896, 38897, 38898, 38900, 38903, 38904, 38905, 38906, 38907, 38908, 38909, 38910, 38911, 38912, 38913, 38914, 38915, 38916, 38917, 38918, 38919, 38920, 38921, 38922, 38923, 38924, 38925, 38926, 24636, 24669, 24666, 24679, 24641, 24665, 24675, 24747, 24838, 24845, 24925, 25001, 24989, 25035, 25041, 25094, 32896, 32895, 27795, 27894, 28156, 30710, 30712, 30720, 30729, 30743, 30744, 30737, 26027, 30765, 30748, 30749, 30777, 30778, 30779, 30751, 30780, 30757, 30764, 30755, 30761, 30798, 30829, 30806, 30807, 30758, 30800, 30791, 30796, 30826, 30875, 30867, 30874, 30855, 30876, 30881, 30883, 30898, 30905, 30885, 30932, 30937, 30921, 30956, 30962, 30981, 30964, 30995, 31012, 31006, 31028, 40859, 40697, 40699, 40700, 30449, 30468, 30477, 30457, 30471, 30472, 30490, 30498, 30489, 30509, 30502, 30517, 30520, 30544, 30545, 30535, 30531, 30554, 30568, 38927, 38928, 38929, 38930, 38931, 38932, 38933, 38934, 38935, 38936, 38937, 38938, 38939, 38940, 38941, 38942, 38943, 38944, 38945, 38946, 38947, 38948, 38949, 38950, 38951, 38952, 38953, 38954, 38955, 38956, 38957, 38958, 38959, 38960, 38961, 38962, 38963, 38964, 38965, 38966, 38967, 38968, 38969, 38970, 38971, 38972, 38973, 38974, 38975, 38976, 38977, 38978, 38979, 38980, 38981, 38982, 38983, 38984, 38985, 38986, 38987, 38988, 38989, 38990, 38991, 38992, 38993, 38994, 38995, 38996, 38997, 38998, 38999, 39000, 39001, 39002, 39003, 39004, 39005, 39006, 39007, 39008, 39009, 39010, 39011, 39012, 39013, 39014, 39015, 39016, 39017, 39018, 39019, 39020, 39021, 39022, 30562, 30565, 30591, 30605, 30589, 30592, 30604, 30609, 30623, 30624, 30640, 30645, 30653, 30010, 30016, 30030, 30027, 30024, 30043, 30066, 30073, 30083, 32600, 32609, 32607, 35400, 32616, 32628, 32625, 32633, 32641, 32638, 30413, 30437, 34866, 38021, 38022, 38023, 38027, 38026, 38028, 38029, 38031, 38032, 38036, 38039, 38037, 38042, 38043, 38044, 38051, 38052, 38059, 38058, 38061, 38060, 38063, 38064, 38066, 38068, 38070, 38071, 38072, 38073, 38074, 38076, 38077, 38079, 38084, 38088, 38089, 38090, 38091, 38092, 38093, 38094, 38096, 38097, 38098, 38101, 38102, 38103, 38105, 38104, 38107, 38110, 38111, 38112, 38114, 38116, 38117, 38119, 38120, 38122, 39023, 39024, 39025, 39026, 39027, 39028, 39051, 39054, 39058, 39061, 39065, 39075, 39080, 39081, 39082, 39083, 39084, 39085, 39086, 39087, 39088, 39089, 39090, 39091, 39092, 39093, 39094, 39095, 39096, 39097, 39098, 39099, 39100, 39101, 39102, 39103, 39104, 39105, 39106, 39107, 39108, 39109, 39110, 39111, 39112, 39113, 39114, 39115, 39116, 39117, 39119, 39120, 39124, 39126, 39127, 39131, 39132, 39133, 39136, 39137, 39138, 39139, 39140, 39141, 39142, 39145, 39146, 39147, 39148, 39149, 39150, 39151, 39152, 39153, 39154, 39155, 39156, 39157, 39158, 39159, 39160, 39161, 39162, 39163, 39164, 39165, 39166, 39167, 39168, 39169, 39170, 39171, 39172, 39173, 39174, 39175, 38121, 38123, 38126, 38127, 38131, 38132, 38133, 38135, 38137, 38140, 38141, 38143, 38147, 38146, 38150, 38151, 38153, 38154, 38157, 38158, 38159, 38162, 38163, 38164, 38165, 38166, 38168, 38171, 38173, 38174, 38175, 38178, 38186, 38187, 38185, 38188, 38193, 38194, 38196, 38198, 38199, 38200, 38204, 38206, 38207, 38210, 38197, 38212, 38213, 38214, 38217, 38220, 38222, 38223, 38226, 38227, 38228, 38230, 38231, 38232, 38233, 38235, 38238, 38239, 38237, 38241, 38242, 38244, 38245, 38246, 38247, 38248, 38249, 38250, 38251, 38252, 38255, 38257, 38258, 38259, 38202, 30695, 30700, 38601, 31189, 31213, 31203, 31211, 31238, 23879, 31235, 31234, 31262, 31252, 39176, 39177, 39178, 39179, 39180, 39182, 39183, 39185, 39186, 39187, 39188, 39189, 39190, 39191, 39192, 39193, 39194, 39195, 39196, 39197, 39198, 39199, 39200, 39201, 39202, 39203, 39204, 39205, 39206, 39207, 39208, 39209, 39210, 39211, 39212, 39213, 39215, 39216, 39217, 39218, 39219, 39220, 39221, 39222, 39223, 39224, 39225, 39226, 39227, 39228, 39229, 39230, 39231, 39232, 39233, 39234, 39235, 39236, 39237, 39238, 39239, 39240, 39241, 39242, 39243, 39244, 39245, 39246, 39247, 39248, 39249, 39250, 39251, 39254, 39255, 39256, 39257, 39258, 39259, 39260, 39261, 39262, 39263, 39264, 39265, 39266, 39268, 39270, 39283, 39288, 39289, 39291, 39294, 39298, 39299, 39305, 31289, 31287, 31313, 40655, 39333, 31344, 30344, 30350, 30355, 30361, 30372, 29918, 29920, 29996, 40480, 40482, 40488, 40489, 40490, 40491, 40492, 40498, 40497, 40502, 40504, 40503, 40505, 40506, 40510, 40513, 40514, 40516, 40518, 40519, 40520, 40521, 40523, 40524, 40526, 40529, 40533, 40535, 40538, 40539, 40540, 40542, 40547, 40550, 40551, 40552, 40553, 40554, 40555, 40556, 40561, 40557, 40563, 30098, 30100, 30102, 30112, 30109, 30124, 30115, 30131, 30132, 30136, 30148, 30129, 30128, 30147, 30146, 30166, 30157, 30179, 30184, 30182, 30180, 30187, 30183, 30211, 30193, 30204, 30207, 30224, 30208, 30213, 30220, 30231, 30218, 30245, 30232, 30229, 30233, 39308, 39310, 39322, 39323, 39324, 39325, 39326, 39327, 39328, 39329, 39330, 39331, 39332, 39334, 39335, 39337, 39338, 39339, 39340, 39341, 39342, 39343, 39344, 39345, 39346, 39347, 39348, 39349, 39350, 39351, 39352, 39353, 39354, 39355, 39356, 39357, 39358, 39359, 39360, 39361, 39362, 39363, 39364, 39365, 39366, 39367, 39368, 39369, 39370, 39371, 39372, 39373, 39374, 39375, 39376, 39377, 39378, 39379, 39380, 39381, 39382, 39383, 39384, 39385, 39386, 39387, 39388, 39389, 39390, 39391, 39392, 39393, 39394, 39395, 39396, 39397, 39398, 39399, 39400, 39401, 39402, 39403, 39404, 39405, 39406, 39407, 39408, 39409, 39410, 39411, 39412, 39413, 39414, 39415, 39416, 39417, 30235, 30268, 30242, 30240, 30272, 30253, 30256, 30271, 30261, 30275, 30270, 30259, 30285, 30302, 30292, 30300, 30294, 30315, 30319, 32714, 31462, 31352, 31353, 31360, 31366, 31368, 31381, 31398, 31392, 31404, 31400, 31405, 31411, 34916, 34921, 34930, 34941, 34943, 34946, 34978, 35014, 34999, 35004, 35017, 35042, 35022, 35043, 35045, 35057, 35098, 35068, 35048, 35070, 35056, 35105, 35097, 35091, 35099, 35082, 35124, 35115, 35126, 35137, 35174, 35195, 30091, 32997, 30386, 30388, 30684, 32786, 32788, 32790, 32796, 32800, 32802, 32805, 32806, 32807, 32809, 32808, 32817, 32779, 32821, 32835, 32838, 32845, 32850, 32873, 32881, 35203, 39032, 39040, 39043, 39418, 39419, 39420, 39421, 39422, 39423, 39424, 39425, 39426, 39427, 39428, 39429, 39430, 39431, 39432, 39433, 39434, 39435, 39436, 39437, 39438, 39439, 39440, 39441, 39442, 39443, 39444, 39445, 39446, 39447, 39448, 39449, 39450, 39451, 39452, 39453, 39454, 39455, 39456, 39457, 39458, 39459, 39460, 39461, 39462, 39463, 39464, 39465, 39466, 39467, 39468, 39469, 39470, 39471, 39472, 39473, 39474, 39475, 39476, 39477, 39478, 39479, 39480, 39481, 39482, 39483, 39484, 39485, 39486, 39487, 39488, 39489, 39490, 39491, 39492, 39493, 39494, 39495, 39496, 39497, 39498, 39499, 39500, 39501, 39502, 39503, 39504, 39505, 39506, 39507, 39508, 39509, 39510, 39511, 39512, 39513, 39049, 39052, 39053, 39055, 39060, 39066, 39067, 39070, 39071, 39073, 39074, 39077, 39078, 34381, 34388, 34412, 34414, 34431, 34426, 34428, 34427, 34472, 34445, 34443, 34476, 34461, 34471, 34467, 34474, 34451, 34473, 34486, 34500, 34485, 34510, 34480, 34490, 34481, 34479, 34505, 34511, 34484, 34537, 34545, 34546, 34541, 34547, 34512, 34579, 34526, 34548, 34527, 34520, 34513, 34563, 34567, 34552, 34568, 34570, 34573, 34569, 34595, 34619, 34590, 34597, 34606, 34586, 34622, 34632, 34612, 34609, 34601, 34615, 34623, 34690, 34594, 34685, 34686, 34683, 34656, 34672, 34636, 34670, 34699, 34643, 34659, 34684, 34660, 34649, 34661, 34707, 34735, 34728, 34770, 39514, 39515, 39516, 39517, 39518, 39519, 39520, 39521, 39522, 39523, 39524, 39525, 39526, 39527, 39528, 39529, 39530, 39531, 39538, 39555, 39561, 39565, 39566, 39572, 39573, 39577, 39590, 39593, 39594, 39595, 39596, 39597, 39598, 39599, 39602, 39603, 39604, 39605, 39609, 39611, 39613, 39614, 39615, 39619, 39620, 39622, 39623, 39624, 39625, 39626, 39629, 39630, 39631, 39632, 39634, 39636, 39637, 39638, 39639, 39641, 39642, 39643, 39644, 39645, 39646, 39648, 39650, 39651, 39652, 39653, 39655, 39656, 39657, 39658, 39660, 39662, 39664, 39665, 39666, 39667, 39668, 39669, 39670, 39671, 39672, 39674, 39676, 39677, 39678, 39679, 39680, 39681, 39682, 39684, 39685, 39686, 34758, 34696, 34693, 34733, 34711, 34691, 34731, 34789, 34732, 34741, 34739, 34763, 34771, 34749, 34769, 34752, 34762, 34779, 34794, 34784, 34798, 34838, 34835, 34814, 34826, 34843, 34849, 34873, 34876, 32566, 32578, 32580, 32581, 33296, 31482, 31485, 31496, 31491, 31492, 31509, 31498, 31531, 31503, 31559, 31544, 31530, 31513, 31534, 31537, 31520, 31525, 31524, 31539, 31550, 31518, 31576, 31578, 31557, 31605, 31564, 31581, 31584, 31598, 31611, 31586, 31602, 31601, 31632, 31654, 31655, 31672, 31660, 31645, 31656, 31621, 31658, 31644, 31650, 31659, 31668, 31697, 31681, 31692, 31709, 31706, 31717, 31718, 31722, 31756, 31742, 31740, 31759, 31766, 31755, 39687, 39689, 39690, 39691, 39692, 39693, 39694, 39696, 39697, 39698, 39700, 39701, 39702, 39703, 39704, 39705, 39706, 39707, 39708, 39709, 39710, 39712, 39713, 39714, 39716, 39717, 39718, 39719, 39720, 39721, 39722, 39723, 39724, 39725, 39726, 39728, 39729, 39731, 39732, 39733, 39734, 39735, 39736, 39737, 39738, 39741, 39742, 39743, 39744, 39750, 39754, 39755, 39756, 39758, 39760, 39762, 39763, 39765, 39766, 39767, 39768, 39769, 39770, 39771, 39772, 39773, 39774, 39775, 39776, 39777, 39778, 39779, 39780, 39781, 39782, 39783, 39784, 39785, 39786, 39787, 39788, 39789, 39790, 39791, 39792, 39793, 39794, 39795, 39796, 39797, 39798, 39799, 39800, 39801, 39802, 39803, 31775, 31786, 31782, 31800, 31809, 31808, 33278, 33281, 33282, 33284, 33260, 34884, 33313, 33314, 33315, 33325, 33327, 33320, 33323, 33336, 33339, 33331, 33332, 33342, 33348, 33353, 33355, 33359, 33370, 33375, 33384, 34942, 34949, 34952, 35032, 35039, 35166, 32669, 32671, 32679, 32687, 32688, 32690, 31868, 25929, 31889, 31901, 31900, 31902, 31906, 31922, 31932, 31933, 31937, 31943, 31948, 31949, 31944, 31941, 31959, 31976, 33390, 26280, 32703, 32718, 32725, 32741, 32737, 32742, 32745, 32750, 32755, 31992, 32119, 32166, 32174, 32327, 32411, 40632, 40628, 36211, 36228, 36244, 36241, 36273, 36199, 36205, 35911, 35913, 37194, 37200, 37198, 37199, 37220, 39804, 39805, 39806, 39807, 39808, 39809, 39810, 39811, 39812, 39813, 39814, 39815, 39816, 39817, 39818, 39819, 39820, 39821, 39822, 39823, 39824, 39825, 39826, 39827, 39828, 39829, 39830, 39831, 39832, 39833, 39834, 39835, 39836, 39837, 39838, 39839, 39840, 39841, 39842, 39843, 39844, 39845, 39846, 39847, 39848, 39849, 39850, 39851, 39852, 39853, 39854, 39855, 39856, 39857, 39858, 39859, 39860, 39861, 39862, 39863, 39864, 39865, 39866, 39867, 39868, 39869, 39870, 39871, 39872, 39873, 39874, 39875, 39876, 39877, 39878, 39879, 39880, 39881, 39882, 39883, 39884, 39885, 39886, 39887, 39888, 39889, 39890, 39891, 39892, 39893, 39894, 39895, 39896, 39897, 39898, 39899, 37218, 37217, 37232, 37225, 37231, 37245, 37246, 37234, 37236, 37241, 37260, 37253, 37264, 37261, 37265, 37282, 37283, 37290, 37293, 37294, 37295, 37301, 37300, 37306, 35925, 40574, 36280, 36331, 36357, 36441, 36457, 36277, 36287, 36284, 36282, 36292, 36310, 36311, 36314, 36318, 36302, 36303, 36315, 36294, 36332, 36343, 36344, 36323, 36345, 36347, 36324, 36361, 36349, 36372, 36381, 36383, 36396, 36398, 36387, 36399, 36410, 36416, 36409, 36405, 36413, 36401, 36425, 36417, 36418, 36433, 36434, 36426, 36464, 36470, 36476, 36463, 36468, 36485, 36495, 36500, 36496, 36508, 36510, 35960, 35970, 35978, 35973, 35992, 35988, 26011, 35286, 35294, 35290, 35292, 39900, 39901, 39902, 39903, 39904, 39905, 39906, 39907, 39908, 39909, 39910, 39911, 39912, 39913, 39914, 39915, 39916, 39917, 39918, 39919, 39920, 39921, 39922, 39923, 39924, 39925, 39926, 39927, 39928, 39929, 39930, 39931, 39932, 39933, 39934, 39935, 39936, 39937, 39938, 39939, 39940, 39941, 39942, 39943, 39944, 39945, 39946, 39947, 39948, 39949, 39950, 39951, 39952, 39953, 39954, 39955, 39956, 39957, 39958, 39959, 39960, 39961, 39962, 39963, 39964, 39965, 39966, 39967, 39968, 39969, 39970, 39971, 39972, 39973, 39974, 39975, 39976, 39977, 39978, 39979, 39980, 39981, 39982, 39983, 39984, 39985, 39986, 39987, 39988, 39989, 39990, 39991, 39992, 39993, 39994, 39995, 35301, 35307, 35311, 35390, 35622, 38739, 38633, 38643, 38639, 38662, 38657, 38664, 38671, 38670, 38698, 38701, 38704, 38718, 40832, 40835, 40837, 40838, 40839, 40840, 40841, 40842, 40844, 40702, 40715, 40717, 38585, 38588, 38589, 38606, 38610, 30655, 38624, 37518, 37550, 37576, 37694, 37738, 37834, 37775, 37950, 37995, 40063, 40066, 40069, 40070, 40071, 40072, 31267, 40075, 40078, 40080, 40081, 40082, 40084, 40085, 40090, 40091, 40094, 40095, 40096, 40097, 40098, 40099, 40101, 40102, 40103, 40104, 40105, 40107, 40109, 40110, 40112, 40113, 40114, 40115, 40116, 40117, 40118, 40119, 40122, 40123, 40124, 40125, 40132, 40133, 40134, 40135, 40138, 40139, 39996, 39997, 39998, 39999, 40000, 40001, 40002, 40003, 40004, 40005, 40006, 40007, 40008, 40009, 40010, 40011, 40012, 40013, 40014, 40015, 40016, 40017, 40018, 40019, 40020, 40021, 40022, 40023, 40024, 40025, 40026, 40027, 40028, 40029, 40030, 40031, 40032, 40033, 40034, 40035, 40036, 40037, 40038, 40039, 40040, 40041, 40042, 40043, 40044, 40045, 40046, 40047, 40048, 40049, 40050, 40051, 40052, 40053, 40054, 40055, 40056, 40057, 40058, 40059, 40061, 40062, 40064, 40067, 40068, 40073, 40074, 40076, 40079, 40083, 40086, 40087, 40088, 40089, 40093, 40106, 40108, 40111, 40121, 40126, 40127, 40128, 40129, 40130, 40136, 40137, 40145, 40146, 40154, 40155, 40160, 40161, 40140, 40141, 40142, 40143, 40144, 40147, 40148, 40149, 40151, 40152, 40153, 40156, 40157, 40159, 40162, 38780, 38789, 38801, 38802, 38804, 38831, 38827, 38819, 38834, 38836, 39601, 39600, 39607, 40536, 39606, 39610, 39612, 39617, 39616, 39621, 39618, 39627, 39628, 39633, 39749, 39747, 39751, 39753, 39752, 39757, 39761, 39144, 39181, 39214, 39253, 39252, 39647, 39649, 39654, 39663, 39659, 39675, 39661, 39673, 39688, 39695, 39699, 39711, 39715, 40637, 40638, 32315, 40578, 40583, 40584, 40587, 40594, 37846, 40605, 40607, 40667, 40668, 40669, 40672, 40671, 40674, 40681, 40679, 40677, 40682, 40687, 40738, 40748, 40751, 40761, 40759, 40765, 40766, 40772, 40163, 40164, 40165, 40166, 40167, 40168, 40169, 40170, 40171, 40172, 40173, 40174, 40175, 40176, 40177, 40178, 40179, 40180, 40181, 40182, 40183, 40184, 40185, 40186, 40187, 40188, 40189, 40190, 40191, 40192, 40193, 40194, 40195, 40196, 40197, 40198, 40199, 40200, 40201, 40202, 40203, 40204, 40205, 40206, 40207, 40208, 40209, 40210, 40211, 40212, 40213, 40214, 40215, 40216, 40217, 40218, 40219, 40220, 40221, 40222, 40223, 40224, 40225, 40226, 40227, 40228, 40229, 40230, 40231, 40232, 40233, 40234, 40235, 40236, 40237, 40238, 40239, 40240, 40241, 40242, 40243, 40244, 40245, 40246, 40247, 40248, 40249, 40250, 40251, 40252, 40253, 40254, 40255, 40256, 40257, 40258, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 40259, 40260, 40261, 40262, 40263, 40264, 40265, 40266, 40267, 40268, 40269, 40270, 40271, 40272, 40273, 40274, 40275, 40276, 40277, 40278, 40279, 40280, 40281, 40282, 40283, 40284, 40285, 40286, 40287, 40288, 40289, 40290, 40291, 40292, 40293, 40294, 40295, 40296, 40297, 40298, 40299, 40300, 40301, 40302, 40303, 40304, 40305, 40306, 40307, 40308, 40309, 40310, 40311, 40312, 40313, 40314, 40315, 40316, 40317, 40318, 40319, 40320, 40321, 40322, 40323, 40324, 40325, 40326, 40327, 40328, 40329, 40330, 40331, 40332, 40333, 40334, 40335, 40336, 40337, 40338, 40339, 40340, 40341, 40342, 40343, 40344, 40345, 40346, 40347, 40348, 40349, 40350, 40351, 40352, 40353, 40354, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 40355, 40356, 40357, 40358, 40359, 40360, 40361, 40362, 40363, 40364, 40365, 40366, 40367, 40368, 40369, 40370, 40371, 40372, 40373, 40374, 40375, 40376, 40377, 40378, 40379, 40380, 40381, 40382, 40383, 40384, 40385, 40386, 40387, 40388, 40389, 40390, 40391, 40392, 40393, 40394, 40395, 40396, 40397, 40398, 40399, 40400, 40401, 40402, 40403, 40404, 40405, 40406, 40407, 40408, 40409, 40410, 40411, 40412, 40413, 40414, 40415, 40416, 40417, 40418, 40419, 40420, 40421, 40422, 40423, 40424, 40425, 40426, 40427, 40428, 40429, 40430, 40431, 40432, 40433, 40434, 40435, 40436, 40437, 40438, 40439, 40440, 40441, 40442, 40443, 40444, 40445, 40446, 40447, 40448, 40449, 40450, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 40451, 40452, 40453, 40454, 40455, 40456, 40457, 40458, 40459, 40460, 40461, 40462, 40463, 40464, 40465, 40466, 40467, 40468, 40469, 40470, 40471, 40472, 40473, 40474, 40475, 40476, 40477, 40478, 40484, 40487, 40494, 40496, 40500, 40507, 40508, 40512, 40525, 40528, 40530, 40531, 40532, 40534, 40537, 40541, 40543, 40544, 40545, 40546, 40549, 40558, 40559, 40562, 40564, 40565, 40566, 40567, 40568, 40569, 40570, 40571, 40572, 40573, 40576, 40577, 40579, 40580, 40581, 40582, 40585, 40586, 40588, 40589, 40590, 40591, 40592, 40593, 40596, 40597, 40598, 40599, 40600, 40601, 40602, 40603, 40604, 40606, 40608, 40609, 40610, 40611, 40612, 40613, 40615, 40616, 40617, 40618, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 40619, 40620, 40621, 40622, 40623, 40624, 40625, 40626, 40627, 40629, 40630, 40631, 40633, 40634, 40636, 40639, 40640, 40641, 40642, 40643, 40645, 40646, 40647, 40648, 40650, 40651, 40652, 40656, 40658, 40659, 40661, 40662, 40663, 40665, 40666, 40670, 40673, 40675, 40676, 40678, 40680, 40683, 40684, 40685, 40686, 40688, 40689, 40690, 40691, 40692, 40693, 40694, 40695, 40696, 40698, 40701, 40703, 40704, 40705, 40706, 40707, 40708, 40709, 40710, 40711, 40712, 40713, 40714, 40716, 40719, 40721, 40722, 40724, 40725, 40726, 40728, 40730, 40731, 40732, 40733, 40734, 40735, 40737, 40739, 40740, 40741, 40742, 40743, 40744, 40745, 40746, 40747, 40749, 40750, 40752, 40753, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 40754, 40755, 40756, 40757, 40758, 40760, 40762, 40764, 40767, 40768, 40769, 40770, 40771, 40773, 40774, 40775, 40776, 40777, 40778, 40779, 40780, 40781, 40782, 40783, 40786, 40787, 40788, 40789, 40790, 40791, 40792, 40793, 40794, 40795, 40796, 40797, 40798, 40799, 40800, 40801, 40802, 40803, 40804, 40805, 40806, 40807, 40808, 40809, 40810, 40811, 40812, 40813, 40814, 40815, 40816, 40817, 40818, 40819, 40820, 40821, 40822, 40823, 40824, 40825, 40826, 40827, 40828, 40829, 40830, 40833, 40834, 40845, 40846, 40847, 40848, 40849, 40850, 40851, 40852, 40853, 40854, 40855, 40856, 40860, 40861, 40862, 40865, 40866, 40867, 40868, 40869, 63788, 63865, 63893, 63975, 63985, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 64012, 64013, 64014, 64015, 64017, 64019, 64020, 64024, 64031, 64032, 64033, 64035, 64036, 64039, 64040, 64041, 11905, null, null, null, 11908, 13427, 13383, 11912, 11915, null, 13726, 13850, 13838, 11916, 11927, 14702, 14616, null, 14799, 14815, 14963, 14800, null, null, 15182, 15470, 15584, 11943, null, null, 11946, 16470, 16735, 11950, 17207, 11955, 11958, 11959, null, 17329, 17324, 11963, 17373, 17622, 18017, 17996, null, 18211, 18217, 18300, 18317, 11978, 18759, 18810, 18813, 18818, 18819, 18821, 18822, 18847, 18843, 18871, 18870, null, null, 19619, 19615, 19616, 19617, 19575, 19618, 19731, 19732, 19733, 19734, 19735, 19736, 19737, 19886, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null],
  "gb18030":[[0, 128], [36, 165], [38, 169], [45, 178], [50, 184], [81, 216], [89, 226], [95, 235], [96, 238], [100, 244], [103, 248], [104, 251], [105, 253], [109, 258], [126, 276], [133, 284], [148, 300], [172, 325], [175, 329], [179, 334], [208, 364], [306, 463], [307, 465], [308, 467], [309, 469], [310, 471], [311, 473], [312, 475], [313, 477], [341, 506], [428, 594], [443, 610], [544, 712], [545, 716], [558, 730], [741, 930], [742, 938], [749, 962], [750, 970], [805, 1026], [819, 1104], [820, 1106], [7922, 8209], [7924, 8215], [7925, 8218], [7927, 8222], [7934, 8231], [7943, 8241], [7944, 8244], [7945, 8246], [7950, 8252], [8062, 8365], [8148, 8452], [8149, 8454], [8152, 8458], [8164, 8471], [8174, 8482], [8236, 8556], [8240, 8570], [8262, 8596], [8264, 8602], [8374, 8713], [8380, 8720], [8381, 8722], [8384, 8726], [8388, 8731], [8390, 8737], [8392, 8740], [8393, 8742], [8394, 8748], [8396, 8751], [8401, 8760], [8406, 8766], [8416, 8777], [8419, 8781], [8424, 8787], [8437, 8802], [8439, 8808], [8445, 8816], [8482, 8854], [8485, 8858], [8496, 8870], [8521, 8896], [8603, 8979], [8936, 9322], [8946, 9372], [9046, 9548], [9050, 9588], [9063, 9616], [9066, 9622], [9076, 9634], [9092, 9652], [9100, 9662], [9108, 9672], [9111, 9676], [9113, 9680], [9131, 9702], [9162, 9735], [9164, 9738], [9218, 9793], [9219, 9795], [11329, 11906], [11331, 11909], [11334, 11913], [11336, 11917], [11346, 11928], [11361, 11944], [11363, 11947], [11366, 11951], [11370, 11956], [11372, 11960], [11375, 11964], [11389, 11979], [11682, 12284], [11686, 12292], [11687, 12312], [11692, 12319], [11694, 12330], [11714, 12351], [11716, 12436], [11723, 12447], [11725, 12535], [11730, 12543], [11736, 12586], [11982, 12842], [11989, 12850], [12102, 12964], [12336, 13200], [12348, 13215], [12350, 13218], [12384, 13253], [12393, 13263], [12395, 13267], [12397, 13270], [12510, 13384], [12553, 13428], [12851, 13727], [12962, 13839], [12973, 13851], [13738, 14617], [13823, 14703], [13919, 14801], [13933, 14816], [14080, 14964], [14298, 15183], [14585, 15471], [14698, 15585], [15583, 16471], [15847, 16736], [16318, 17208], [16434, 17325], [16438, 17330], [16481, 17374], [16729, 17623], [17102, 17997], [17122, 18018], [17315, 18212], [17320, 18218], [17402, 18301], [17418, 18318], [17859, 18760], [17909, 18811], [17911, 18814], [17915, 18820], [17916, 18823], [17936, 18844], [17939, 18848], [17961, 18872], [18664, 19576], [18703, 19620], [18814, 19738], [18962, 19887], [19043, 40870], [33469, 59244], [33470, 59336], [33471, 59367], [33484, 59413], [33485, 59417], [33490, 59423], [33497, 59431], [33501, 59437], [33505, 59443], [33513, 59452], [33520, 59460], [33536, 59478], [33550, 59493], [37845, 63789], [37921, 63866], [37948, 63894], [38029, 63976], [38038, 63986], [38064, 64016], [38065, 64018], [38066, 64021], [38069, 64025], [38075, 64034], [38076, 64037], [38078, 64042], [39108, 65074], [39109, 65093], [39113, 65107], [39114, 65112], [39115, 65127], [39116, 65132], [39265, 65375], [39394, 65510], [189000, 65536]],
  "jis0208":[12288, 12289, 12290, 65292, 65294, 12539, 65306, 65307, 65311, 65281, 12443, 12444, 180, 65344, 168, 65342, 65507, 65343, 12541, 12542, 12445, 12446, 12291, 20189, 12293, 12294, 12295, 12540, 8213, 8208, 65295, 65340, 65374, 8741, 65372, 8230, 8229, 8216, 8217, 8220, 8221, 65288, 65289, 12308, 12309, 65339, 65341, 65371, 65373, 12296, 12297, 12298, 12299, 12300, 12301, 12302, 12303, 12304, 12305, 65291, 65293, 177, 215, 247, 65309, 8800, 65308, 65310, 8806, 8807, 8734, 8756, 9794, 9792, 176, 8242, 8243, 8451, 65509, 65284, 65504, 65505, 65285, 65283, 65286, 65290, 65312, 167, 9734, 9733, 9675, 9679, 9678, 9671, 9670, 9633, 9632, 9651, 9650, 9661, 9660, 8251, 12306, 8594, 8592, 8593, 8595, 12307, null, null, null, null, null, null, null, null, null, null, null, 8712, 8715, 8838, 8839, 8834, 8835, 8746, 8745, null, null, null, null, null, null, null, null, 8743, 8744, 65506, 8658, 8660, 8704, 8707, null, null, null, null, null, null, null, null, null, null, null, 8736, 8869, 8978, 8706, 8711, 8801, 8786, 8810, 8811, 8730, 8765, 8733, 8757, 8747, 8748, null, null, null, null, null, null, null, 8491, 8240, 9839, 9837, 9834, 8224, 8225, 182, null, null, null, null, 9711, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 65296, 65297, 65298, 65299, 65300, 65301, 65302, 65303, 65304, 65305, null, null, null, null, null, null, null, 65313, 65314, 65315, 65316, 65317, 65318, 65319, 65320, 65321, 65322, 65323, 65324, 65325, 65326, 65327, 65328, 65329, 65330, 65331, 65332, 65333, 65334, 65335, 65336, 65337, 65338, null, null, null, null, null, null, 65345, 65346, 65347, 65348, 65349, 65350, 65351, 65352, 65353, 65354, 65355, 65356, 65357, 65358, 65359, 65360, 65361, 65362, 65363, 65364, 65365, 65366, 65367, 65368, 65369, 65370, null, null, null, null, 12353, 12354, 12355, 12356, 12357, 12358, 12359, 12360, 12361, 12362, 12363, 12364, 12365, 12366, 12367, 12368, 12369, 12370, 12371, 12372, 12373, 12374, 12375, 12376, 12377, 12378, 12379, 12380, 12381, 12382, 12383, 12384, 12385, 12386, 12387, 12388, 12389, 12390, 12391, 12392, 12393, 12394, 12395, 12396, 12397, 12398, 12399, 12400, 12401, 12402, 12403, 12404, 12405, 12406, 12407, 12408, 12409, 12410, 12411, 12412, 12413, 12414, 12415, 12416, 12417, 12418, 12419, 12420, 12421, 12422, 12423, 12424, 12425, 12426, 12427, 12428, 12429, 12430, 12431, 12432, 12433, 12434, 12435, null, null, null, null, null, null, null, null, null, null, null, 12449, 12450, 12451, 12452, 12453, 12454, 12455, 12456, 12457, 12458, 12459, 12460, 12461, 12462, 12463, 12464, 12465, 12466, 12467, 12468, 12469, 12470, 12471, 12472, 12473, 12474, 12475, 12476, 12477, 12478, 12479, 12480, 12481, 12482, 12483, 12484, 12485, 12486, 12487, 12488, 12489, 12490, 12491, 12492, 12493, 12494, 12495, 12496, 12497, 12498, 12499, 12500, 12501, 12502, 12503, 12504, 12505, 12506, 12507, 12508, 12509, 12510, 12511, 12512, 12513, 12514, 12515, 12516, 12517, 12518, 12519, 12520, 12521, 12522, 12523, 12524, 12525, 12526, 12527, 12528, 12529, 12530, 12531, 12532, 12533, 12534, null, null, null, null, null, null, null, null, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, null, null, null, null, null, null, null, null, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 963, 964, 965, 966, 967, 968, 969, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 1040, 1041, 1042, 1043, 1044, 1045, 1025, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 1072, 1073, 1074, 1075, 1076, 1077, 1105, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, null, null, null, null, null, null, null, null, null, null, null, null, null, 9472, 9474, 9484, 9488, 9496, 9492, 9500, 9516, 9508, 9524, 9532, 9473, 9475, 9487, 9491, 9499, 9495, 9507, 9523, 9515, 9531, 9547, 9504, 9519, 9512, 9527, 9535, 9501, 9520, 9509, 9528, 9538, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 9312, 9313, 9314, 9315, 9316, 9317, 9318, 9319, 9320, 9321, 9322, 9323, 9324, 9325, 9326, 9327, 9328, 9329, 9330, 9331, 8544, 8545, 8546, 8547, 8548, 8549, 8550, 8551, 8552, 8553, null, 13129, 13076, 13090, 13133, 13080, 13095, 13059, 13110, 13137, 13143, 13069, 13094, 13091, 13099, 13130, 13115, 13212, 13213, 13214, 13198, 13199, 13252, 13217, null, null, null, null, null, null, null, null, 13179, 12317, 12319, 8470, 13261, 8481, 12964, 12965, 12966, 12967, 12968, 12849, 12850, 12857, 13182, 13181, 13180, 8786, 8801, 8747, 8750, 8721, 8730, 8869, 8736, 8735, 8895, 8757, 8745, 8746, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 20124, 21782, 23043, 38463, 21696, 24859, 25384, 23030, 36898, 33909, 33564, 31312, 24746, 25569, 28197, 26093, 33894, 33446, 39925, 26771, 22311, 26017, 25201, 23451, 22992, 34427, 39156, 32098, 32190, 39822, 25110, 31903, 34999, 23433, 24245, 25353, 26263, 26696, 38343, 38797, 26447, 20197, 20234, 20301, 20381, 20553, 22258, 22839, 22996, 23041, 23561, 24799, 24847, 24944, 26131, 26885, 28858, 30031, 30064, 31227, 32173, 32239, 32963, 33806, 34915, 35586, 36949, 36986, 21307, 20117, 20133, 22495, 32946, 37057, 30959, 19968, 22769, 28322, 36920, 31282, 33576, 33419, 39983, 20801, 21360, 21693, 21729, 22240, 23035, 24341, 39154, 28139, 32996, 34093, 38498, 38512, 38560, 38907, 21515, 21491, 23431, 28879, 32701, 36802, 38632, 21359, 40284, 31418, 19985, 30867, 33276, 28198, 22040, 21764, 27421, 34074, 39995, 23013, 21417, 28006, 29916, 38287, 22082, 20113, 36939, 38642, 33615, 39180, 21473, 21942, 23344, 24433, 26144, 26355, 26628, 27704, 27891, 27945, 29787, 30408, 31310, 38964, 33521, 34907, 35424, 37613, 28082, 30123, 30410, 39365, 24742, 35585, 36234, 38322, 27022, 21421, 20870, 22290, 22576, 22852, 23476, 24310, 24616, 25513, 25588, 27839, 28436, 28814, 28948, 29017, 29141, 29503, 32257, 33398, 33489, 34199, 36960, 37467, 40219, 22633, 26044, 27738, 29989, 20985, 22830, 22885, 24448, 24540, 25276, 26106, 27178, 27431, 27572, 29579, 32705, 35158, 40236, 40206, 40644, 23713, 27798, 33659, 20740, 23627, 25014, 33222, 26742, 29281, 20057, 20474, 21368, 24681, 28201, 31311, 38899, 19979, 21270, 20206, 20309, 20285, 20385, 20339, 21152, 21487, 22025, 22799, 23233, 23478, 23521, 31185, 26247, 26524, 26550, 27468, 27827, 28779, 29634, 31117, 31166, 31292, 31623, 33457, 33499, 33540, 33655, 33775, 33747, 34662, 35506, 22057, 36008, 36838, 36942, 38686, 34442, 20420, 23784, 25105, 29273, 30011, 33253, 33469, 34558, 36032, 38597, 39187, 39381, 20171, 20250, 35299, 22238, 22602, 22730, 24315, 24555, 24618, 24724, 24674, 25040, 25106, 25296, 25913, 39745, 26214, 26800, 28023, 28784, 30028, 30342, 32117, 33445, 34809, 38283, 38542, 35997, 20977, 21182, 22806, 21683, 23475, 23830, 24936, 27010, 28079, 30861, 33995, 34903, 35442, 37799, 39608, 28012, 39336, 34521, 22435, 26623, 34510, 37390, 21123, 22151, 21508, 24275, 25313, 25785, 26684, 26680, 27579, 29554, 30906, 31339, 35226, 35282, 36203, 36611, 37101, 38307, 38548, 38761, 23398, 23731, 27005, 38989, 38990, 25499, 31520, 27179, 27263, 26806, 39949, 28511, 21106, 21917, 24688, 25324, 27963, 28167, 28369, 33883, 35088, 36676, 19988, 39993, 21494, 26907, 27194, 38788, 26666, 20828, 31427, 33970, 37340, 37772, 22107, 40232, 26658, 33541, 33841, 31909, 21000, 33477, 29926, 20094, 20355, 20896, 23506, 21002, 21208, 21223, 24059, 21914, 22570, 23014, 23436, 23448, 23515, 24178, 24185, 24739, 24863, 24931, 25022, 25563, 25954, 26577, 26707, 26874, 27454, 27475, 27735, 28450, 28567, 28485, 29872, 29976, 30435, 30475, 31487, 31649, 31777, 32233, 32566, 32752, 32925, 33382, 33694, 35251, 35532, 36011, 36996, 37969, 38291, 38289, 38306, 38501, 38867, 39208, 33304, 20024, 21547, 23736, 24012, 29609, 30284, 30524, 23721, 32747, 36107, 38593, 38929, 38996, 39000, 20225, 20238, 21361, 21916, 22120, 22522, 22855, 23305, 23492, 23696, 24076, 24190, 24524, 25582, 26426, 26071, 26082, 26399, 26827, 26820, 27231, 24112, 27589, 27671, 27773, 30079, 31048, 23395, 31232, 32000, 24509, 35215, 35352, 36020, 36215, 36556, 36637, 39138, 39438, 39740, 20096, 20605, 20736, 22931, 23452, 25135, 25216, 25836, 27450, 29344, 30097, 31047, 32681, 34811, 35516, 35696, 25516, 33738, 38816, 21513, 21507, 21931, 26708, 27224, 35440, 30759, 26485, 40653, 21364, 23458, 33050, 34384, 36870, 19992, 20037, 20167, 20241, 21450, 21560, 23470, 24339, 24613, 25937, 26429, 27714, 27762, 27875, 28792, 29699, 31350, 31406, 31496, 32026, 31998, 32102, 26087, 29275, 21435, 23621, 24040, 25298, 25312, 25369, 28192, 34394, 35377, 36317, 37624, 28417, 31142, 39770, 20136, 20139, 20140, 20379, 20384, 20689, 20807, 31478, 20849, 20982, 21332, 21281, 21375, 21483, 21932, 22659, 23777, 24375, 24394, 24623, 24656, 24685, 25375, 25945, 27211, 27841, 29378, 29421, 30703, 33016, 33029, 33288, 34126, 37111, 37857, 38911, 39255, 39514, 20208, 20957, 23597, 26241, 26989, 23616, 26354, 26997, 29577, 26704, 31873, 20677, 21220, 22343, 24062, 37670, 26020, 27427, 27453, 29748, 31105, 31165, 31563, 32202, 33465, 33740, 34943, 35167, 35641, 36817, 37329, 21535, 37504, 20061, 20534, 21477, 21306, 29399, 29590, 30697, 33510, 36527, 39366, 39368, 39378, 20855, 24858, 34398, 21936, 31354, 20598, 23507, 36935, 38533, 20018, 27355, 37351, 23633, 23624, 25496, 31391, 27795, 38772, 36705, 31402, 29066, 38536, 31874, 26647, 32368, 26705, 37740, 21234, 21531, 34219, 35347, 32676, 36557, 37089, 21350, 34952, 31041, 20418, 20670, 21009, 20804, 21843, 22317, 29674, 22411, 22865, 24418, 24452, 24693, 24950, 24935, 25001, 25522, 25658, 25964, 26223, 26690, 28179, 30054, 31293, 31995, 32076, 32153, 32331, 32619, 33550, 33610, 34509, 35336, 35427, 35686, 36605, 38938, 40335, 33464, 36814, 39912, 21127, 25119, 25731, 28608, 38553, 26689, 20625, 27424, 27770, 28500, 31348, 32080, 34880, 35363, 26376, 20214, 20537, 20518, 20581, 20860, 21048, 21091, 21927, 22287, 22533, 23244, 24314, 25010, 25080, 25331, 25458, 26908, 27177, 29309, 29356, 29486, 30740, 30831, 32121, 30476, 32937, 35211, 35609, 36066, 36562, 36963, 37749, 38522, 38997, 39443, 40568, 20803, 21407, 21427, 24187, 24358, 28187, 28304, 29572, 29694, 32067, 33335, 35328, 35578, 38480, 20046, 20491, 21476, 21628, 22266, 22993, 23396, 24049, 24235, 24359, 25144, 25925, 26543, 28246, 29392, 31946, 34996, 32929, 32993, 33776, 34382, 35463, 36328, 37431, 38599, 39015, 40723, 20116, 20114, 20237, 21320, 21577, 21566, 23087, 24460, 24481, 24735, 26791, 27278, 29786, 30849, 35486, 35492, 35703, 37264, 20062, 39881, 20132, 20348, 20399, 20505, 20502, 20809, 20844, 21151, 21177, 21246, 21402, 21475, 21521, 21518, 21897, 22353, 22434, 22909, 23380, 23389, 23439, 24037, 24039, 24055, 24184, 24195, 24218, 24247, 24344, 24658, 24908, 25239, 25304, 25511, 25915, 26114, 26179, 26356, 26477, 26657, 26775, 27083, 27743, 27946, 28009, 28207, 28317, 30002, 30343, 30828, 31295, 31968, 32005, 32024, 32094, 32177, 32789, 32771, 32943, 32945, 33108, 33167, 33322, 33618, 34892, 34913, 35611, 36002, 36092, 37066, 37237, 37489, 30783, 37628, 38308, 38477, 38917, 39321, 39640, 40251, 21083, 21163, 21495, 21512, 22741, 25335, 28640, 35946, 36703, 40633, 20811, 21051, 21578, 22269, 31296, 37239, 40288, 40658, 29508, 28425, 33136, 29969, 24573, 24794, 39592, 29403, 36796, 27492, 38915, 20170, 22256, 22372, 22718, 23130, 24680, 25031, 26127, 26118, 26681, 26801, 28151, 30165, 32058, 33390, 39746, 20123, 20304, 21449, 21766, 23919, 24038, 24046, 26619, 27801, 29811, 30722, 35408, 37782, 35039, 22352, 24231, 25387, 20661, 20652, 20877, 26368, 21705, 22622, 22971, 23472, 24425, 25165, 25505, 26685, 27507, 28168, 28797, 37319, 29312, 30741, 30758, 31085, 25998, 32048, 33756, 35009, 36617, 38555, 21092, 22312, 26448, 32618, 36001, 20916, 22338, 38442, 22586, 27018, 32948, 21682, 23822, 22524, 30869, 40442, 20316, 21066, 21643, 25662, 26152, 26388, 26613, 31364, 31574, 32034, 37679, 26716, 39853, 31545, 21273, 20874, 21047, 23519, 25334, 25774, 25830, 26413, 27578, 34217, 38609, 30352, 39894, 25420, 37638, 39851, 30399, 26194, 19977, 20632, 21442, 23665, 24808, 25746, 25955, 26719, 29158, 29642, 29987, 31639, 32386, 34453, 35715, 36059, 37240, 39184, 26028, 26283, 27531, 20181, 20180, 20282, 20351, 21050, 21496, 21490, 21987, 22235, 22763, 22987, 22985, 23039, 23376, 23629, 24066, 24107, 24535, 24605, 25351, 25903, 23388, 26031, 26045, 26088, 26525, 27490, 27515, 27663, 29509, 31049, 31169, 31992, 32025, 32043, 32930, 33026, 33267, 35222, 35422, 35433, 35430, 35468, 35566, 36039, 36060, 38604, 39164, 27503, 20107, 20284, 20365, 20816, 23383, 23546, 24904, 25345, 26178, 27425, 28363, 27835, 29246, 29885, 30164, 30913, 31034, 32780, 32819, 33258, 33940, 36766, 27728, 40575, 24335, 35672, 40235, 31482, 36600, 23437, 38635, 19971, 21489, 22519, 22833, 23241, 23460, 24713, 28287, 28422, 30142, 36074, 23455, 34048, 31712, 20594, 26612, 33437, 23649, 34122, 32286, 33294, 20889, 23556, 25448, 36198, 26012, 29038, 31038, 32023, 32773, 35613, 36554, 36974, 34503, 37034, 20511, 21242, 23610, 26451, 28796, 29237, 37196, 37320, 37675, 33509, 23490, 24369, 24825, 20027, 21462, 23432, 25163, 26417, 27530, 29417, 29664, 31278, 33131, 36259, 37202, 39318, 20754, 21463, 21610, 23551, 25480, 27193, 32172, 38656, 22234, 21454, 21608, 23447, 23601, 24030, 20462, 24833, 25342, 27954, 31168, 31179, 32066, 32333, 32722, 33261, 33311, 33936, 34886, 35186, 35728, 36468, 36655, 36913, 37195, 37228, 38598, 37276, 20160, 20303, 20805, 21313, 24467, 25102, 26580, 27713, 28171, 29539, 32294, 37325, 37507, 21460, 22809, 23487, 28113, 31069, 32302, 31899, 22654, 29087, 20986, 34899, 36848, 20426, 23803, 26149, 30636, 31459, 33308, 39423, 20934, 24490, 26092, 26991, 27529, 28147, 28310, 28516, 30462, 32020, 24033, 36981, 37255, 38918, 20966, 21021, 25152, 26257, 26329, 28186, 24246, 32210, 32626, 26360, 34223, 34295, 35576, 21161, 21465, 22899, 24207, 24464, 24661, 37604, 38500, 20663, 20767, 21213, 21280, 21319, 21484, 21736, 21830, 21809, 22039, 22888, 22974, 23100, 23477, 23558, 23567, 23569, 23578, 24196, 24202, 24288, 24432, 25215, 25220, 25307, 25484, 25463, 26119, 26124, 26157, 26230, 26494, 26786, 27167, 27189, 27836, 28040, 28169, 28248, 28988, 28966, 29031, 30151, 30465, 30813, 30977, 31077, 31216, 31456, 31505, 31911, 32057, 32918, 33750, 33931, 34121, 34909, 35059, 35359, 35388, 35412, 35443, 35937, 36062, 37284, 37478, 37758, 37912, 38556, 38808, 19978, 19976, 19998, 20055, 20887, 21104, 22478, 22580, 22732, 23330, 24120, 24773, 25854, 26465, 26454, 27972, 29366, 30067, 31331, 33976, 35698, 37304, 37664, 22065, 22516, 39166, 25325, 26893, 27542, 29165, 32340, 32887, 33394, 35302, 39135, 34645, 36785, 23611, 20280, 20449, 20405, 21767, 23072, 23517, 23529, 24515, 24910, 25391, 26032, 26187, 26862, 27035, 28024, 28145, 30003, 30137, 30495, 31070, 31206, 32051, 33251, 33455, 34218, 35242, 35386, 36523, 36763, 36914, 37341, 38663, 20154, 20161, 20995, 22645, 22764, 23563, 29978, 23613, 33102, 35338, 36805, 38499, 38765, 31525, 35535, 38920, 37218, 22259, 21416, 36887, 21561, 22402, 24101, 25512, 27700, 28810, 30561, 31883, 32736, 34928, 36930, 37204, 37648, 37656, 38543, 29790, 39620, 23815, 23913, 25968, 26530, 36264, 38619, 25454, 26441, 26905, 33733, 38935, 38592, 35070, 28548, 25722, 23544, 19990, 28716, 30045, 26159, 20932, 21046, 21218, 22995, 24449, 24615, 25104, 25919, 25972, 26143, 26228, 26866, 26646, 27491, 28165, 29298, 29983, 30427, 31934, 32854, 22768, 35069, 35199, 35488, 35475, 35531, 36893, 37266, 38738, 38745, 25993, 31246, 33030, 38587, 24109, 24796, 25114, 26021, 26132, 26512, 30707, 31309, 31821, 32318, 33034, 36012, 36196, 36321, 36447, 30889, 20999, 25305, 25509, 25666, 25240, 35373, 31363, 31680, 35500, 38634, 32118, 33292, 34633, 20185, 20808, 21315, 21344, 23459, 23554, 23574, 24029, 25126, 25159, 25776, 26643, 26676, 27849, 27973, 27927, 26579, 28508, 29006, 29053, 26059, 31359, 31661, 32218, 32330, 32680, 33146, 33307, 33337, 34214, 35438, 36046, 36341, 36984, 36983, 37549, 37521, 38275, 39854, 21069, 21892, 28472, 28982, 20840, 31109, 32341, 33203, 31950, 22092, 22609, 23720, 25514, 26366, 26365, 26970, 29401, 30095, 30094, 30990, 31062, 31199, 31895, 32032, 32068, 34311, 35380, 38459, 36961, 40736, 20711, 21109, 21452, 21474, 20489, 21930, 22766, 22863, 29245, 23435, 23652, 21277, 24803, 24819, 25436, 25475, 25407, 25531, 25805, 26089, 26361, 24035, 27085, 27133, 28437, 29157, 20105, 30185, 30456, 31379, 31967, 32207, 32156, 32865, 33609, 33624, 33900, 33980, 34299, 35013, 36208, 36865, 36973, 37783, 38684, 39442, 20687, 22679, 24974, 33235, 34101, 36104, 36896, 20419, 20596, 21063, 21363, 24687, 25417, 26463, 28204, 36275, 36895, 20439, 23646, 36042, 26063, 32154, 21330, 34966, 20854, 25539, 23384, 23403, 23562, 25613, 26449, 36956, 20182, 22810, 22826, 27760, 35409, 21822, 22549, 22949, 24816, 25171, 26561, 33333, 26965, 38464, 39364, 39464, 20307, 22534, 23550, 32784, 23729, 24111, 24453, 24608, 24907, 25140, 26367, 27888, 28382, 32974, 33151, 33492, 34955, 36024, 36864, 36910, 38538, 40667, 39899, 20195, 21488, 22823, 31532, 37261, 38988, 40441, 28381, 28711, 21331, 21828, 23429, 25176, 25246, 25299, 27810, 28655, 29730, 35351, 37944, 28609, 35582, 33592, 20967, 34552, 21482, 21481, 20294, 36948, 36784, 22890, 33073, 24061, 31466, 36799, 26842, 35895, 29432, 40008, 27197, 35504, 20025, 21336, 22022, 22374, 25285, 25506, 26086, 27470, 28129, 28251, 28845, 30701, 31471, 31658, 32187, 32829, 32966, 34507, 35477, 37723, 22243, 22727, 24382, 26029, 26262, 27264, 27573, 30007, 35527, 20516, 30693, 22320, 24347, 24677, 26234, 27744, 30196, 31258, 32622, 33268, 34584, 36933, 39347, 31689, 30044, 31481, 31569, 33988, 36880, 31209, 31378, 33590, 23265, 30528, 20013, 20210, 23449, 24544, 25277, 26172, 26609, 27880, 34411, 34935, 35387, 37198, 37619, 39376, 27159, 28710, 29482, 33511, 33879, 36015, 19969, 20806, 20939, 21899, 23541, 24086, 24115, 24193, 24340, 24373, 24427, 24500, 25074, 25361, 26274, 26397, 28526, 29266, 30010, 30522, 32884, 33081, 33144, 34678, 35519, 35548, 36229, 36339, 37530, 38263, 38914, 40165, 21189, 25431, 30452, 26389, 27784, 29645, 36035, 37806, 38515, 27941, 22684, 26894, 27084, 36861, 37786, 30171, 36890, 22618, 26626, 25524, 27131, 20291, 28460, 26584, 36795, 34086, 32180, 37716, 26943, 28528, 22378, 22775, 23340, 32044, 29226, 21514, 37347, 40372, 20141, 20302, 20572, 20597, 21059, 35998, 21576, 22564, 23450, 24093, 24213, 24237, 24311, 24351, 24716, 25269, 25402, 25552, 26799, 27712, 30855, 31118, 31243, 32224, 33351, 35330, 35558, 36420, 36883, 37048, 37165, 37336, 40718, 27877, 25688, 25826, 25973, 28404, 30340, 31515, 36969, 37841, 28346, 21746, 24505, 25764, 36685, 36845, 37444, 20856, 22635, 22825, 23637, 24215, 28155, 32399, 29980, 36028, 36578, 39003, 28857, 20253, 27583, 28593, 30000, 38651, 20814, 21520, 22581, 22615, 22956, 23648, 24466, 26007, 26460, 28193, 30331, 33759, 36077, 36884, 37117, 37709, 30757, 30778, 21162, 24230, 22303, 22900, 24594, 20498, 20826, 20908, 20941, 20992, 21776, 22612, 22616, 22871, 23445, 23798, 23947, 24764, 25237, 25645, 26481, 26691, 26812, 26847, 30423, 28120, 28271, 28059, 28783, 29128, 24403, 30168, 31095, 31561, 31572, 31570, 31958, 32113, 21040, 33891, 34153, 34276, 35342, 35588, 35910, 36367, 36867, 36879, 37913, 38518, 38957, 39472, 38360, 20685, 21205, 21516, 22530, 23566, 24999, 25758, 27934, 30643, 31461, 33012, 33796, 36947, 37509, 23776, 40199, 21311, 24471, 24499, 28060, 29305, 30563, 31167, 31716, 27602, 29420, 35501, 26627, 27233, 20984, 31361, 26932, 23626, 40182, 33515, 23493, 37193, 28702, 22136, 23663, 24775, 25958, 27788, 35930, 36929, 38931, 21585, 26311, 37389, 22856, 37027, 20869, 20045, 20970, 34201, 35598, 28760, 25466, 37707, 26978, 39348, 32260, 30071, 21335, 26976, 36575, 38627, 27741, 20108, 23612, 24336, 36841, 21250, 36049, 32905, 34425, 24319, 26085, 20083, 20837, 22914, 23615, 38894, 20219, 22922, 24525, 35469, 28641, 31152, 31074, 23527, 33905, 29483, 29105, 24180, 24565, 25467, 25754, 29123, 31896, 20035, 24316, 20043, 22492, 22178, 24745, 28611, 32013, 33021, 33075, 33215, 36786, 35223, 34468, 24052, 25226, 25773, 35207, 26487, 27874, 27966, 29750, 30772, 23110, 32629, 33453, 39340, 20467, 24259, 25309, 25490, 25943, 26479, 30403, 29260, 32972, 32954, 36649, 37197, 20493, 22521, 23186, 26757, 26995, 29028, 29437, 36023, 22770, 36064, 38506, 36889, 34687, 31204, 30695, 33833, 20271, 21093, 21338, 25293, 26575, 27850, 30333, 31636, 31893, 33334, 34180, 36843, 26333, 28448, 29190, 32283, 33707, 39361, 40614, 20989, 31665, 30834, 31672, 32903, 31560, 27368, 24161, 32908, 30033, 30048, 20843, 37474, 28300, 30330, 37271, 39658, 20240, 32624, 25244, 31567, 38309, 40169, 22138, 22617, 34532, 38588, 20276, 21028, 21322, 21453, 21467, 24070, 25644, 26001, 26495, 27710, 27726, 29256, 29359, 29677, 30036, 32321, 33324, 34281, 36009, 31684, 37318, 29033, 38930, 39151, 25405, 26217, 30058, 30436, 30928, 34115, 34542, 21290, 21329, 21542, 22915, 24199, 24444, 24754, 25161, 25209, 25259, 26000, 27604, 27852, 30130, 30382, 30865, 31192, 32203, 32631, 32933, 34987, 35513, 36027, 36991, 38750, 39131, 27147, 31800, 20633, 23614, 24494, 26503, 27608, 29749, 30473, 32654, 40763, 26570, 31255, 21305, 30091, 39661, 24422, 33181, 33777, 32920, 24380, 24517, 30050, 31558, 36924, 26727, 23019, 23195, 32016, 30334, 35628, 20469, 24426, 27161, 27703, 28418, 29922, 31080, 34920, 35413, 35961, 24287, 25551, 30149, 31186, 33495, 37672, 37618, 33948, 34541, 39981, 21697, 24428, 25996, 27996, 28693, 36007, 36051, 38971, 25935, 29942, 19981, 20184, 22496, 22827, 23142, 23500, 20904, 24067, 24220, 24598, 25206, 25975, 26023, 26222, 28014, 29238, 31526, 33104, 33178, 33433, 35676, 36000, 36070, 36212, 38428, 38468, 20398, 25771, 27494, 33310, 33889, 34154, 37096, 23553, 26963, 39080, 33914, 34135, 20239, 21103, 24489, 24133, 26381, 31119, 33145, 35079, 35206, 28149, 24343, 25173, 27832, 20175, 29289, 39826, 20998, 21563, 22132, 22707, 24996, 25198, 28954, 22894, 31881, 31966, 32027, 38640, 25991, 32862, 19993, 20341, 20853, 22592, 24163, 24179, 24330, 26564, 20006, 34109, 38281, 38491, 31859, 38913, 20731, 22721, 30294, 30887, 21029, 30629, 34065, 31622, 20559, 22793, 29255, 31687, 32232, 36794, 36820, 36941, 20415, 21193, 23081, 24321, 38829, 20445, 33303, 37610, 22275, 25429, 27497, 29995, 35036, 36628, 31298, 21215, 22675, 24917, 25098, 26286, 27597, 31807, 33769, 20515, 20472, 21253, 21574, 22577, 22857, 23453, 23792, 23791, 23849, 24214, 25265, 25447, 25918, 26041, 26379, 27861, 27873, 28921, 30770, 32299, 32990, 33459, 33804, 34028, 34562, 35090, 35370, 35914, 37030, 37586, 39165, 40179, 40300, 20047, 20129, 20621, 21078, 22346, 22952, 24125, 24536, 24537, 25151, 26292, 26395, 26576, 26834, 20882, 32033, 32938, 33192, 35584, 35980, 36031, 37502, 38450, 21536, 38956, 21271, 20693, 21340, 22696, 25778, 26420, 29287, 30566, 31302, 37350, 21187, 27809, 27526, 22528, 24140, 22868, 26412, 32763, 20961, 30406, 25705, 30952, 39764, 40635, 22475, 22969, 26151, 26522, 27598, 21737, 27097, 24149, 33180, 26517, 39850, 26622, 40018, 26717, 20134, 20451, 21448, 25273, 26411, 27819, 36804, 20397, 32365, 40639, 19975, 24930, 28288, 28459, 34067, 21619, 26410, 39749, 24051, 31637, 23724, 23494, 34588, 28234, 34001, 31252, 33032, 22937, 31885, 27665, 30496, 21209, 22818, 28961, 29279, 30683, 38695, 40289, 26891, 23167, 23064, 20901, 21517, 21629, 26126, 30431, 36855, 37528, 40180, 23018, 29277, 28357, 20813, 26825, 32191, 32236, 38754, 40634, 25720, 27169, 33538, 22916, 23391, 27611, 29467, 30450, 32178, 32791, 33945, 20786, 26408, 40665, 30446, 26466, 21247, 39173, 23588, 25147, 31870, 36016, 21839, 24758, 32011, 38272, 21249, 20063, 20918, 22812, 29242, 32822, 37326, 24357, 30690, 21380, 24441, 32004, 34220, 35379, 36493, 38742, 26611, 34222, 37971, 24841, 24840, 27833, 30290, 35565, 36664, 21807, 20305, 20778, 21191, 21451, 23461, 24189, 24736, 24962, 25558, 26377, 26586, 28263, 28044, 29494, 29495, 30001, 31056, 35029, 35480, 36938, 37009, 37109, 38596, 34701, 22805, 20104, 20313, 19982, 35465, 36671, 38928, 20653, 24188, 22934, 23481, 24248, 25562, 25594, 25793, 26332, 26954, 27096, 27915, 28342, 29076, 29992, 31407, 32650, 32768, 33865, 33993, 35201, 35617, 36362, 36965, 38525, 39178, 24958, 25233, 27442, 27779, 28020, 32716, 32764, 28096, 32645, 34746, 35064, 26469, 33713, 38972, 38647, 27931, 32097, 33853, 37226, 20081, 21365, 23888, 27396, 28651, 34253, 34349, 35239, 21033, 21519, 23653, 26446, 26792, 29702, 29827, 30178, 35023, 35041, 37324, 38626, 38520, 24459, 29575, 31435, 33870, 25504, 30053, 21129, 27969, 28316, 29705, 30041, 30827, 31890, 38534, 31452, 40845, 20406, 24942, 26053, 34396, 20102, 20142, 20698, 20001, 20940, 23534, 26009, 26753, 28092, 29471, 30274, 30637, 31260, 31975, 33391, 35538, 36988, 37327, 38517, 38936, 21147, 32209, 20523, 21400, 26519, 28107, 29136, 29747, 33256, 36650, 38563, 40023, 40607, 29792, 22593, 28057, 32047, 39006, 20196, 20278, 20363, 20919, 21169, 23994, 24604, 29618, 31036, 33491, 37428, 38583, 38646, 38666, 40599, 40802, 26278, 27508, 21015, 21155, 28872, 35010, 24265, 24651, 24976, 28451, 29001, 31806, 32244, 32879, 34030, 36899, 37676, 21570, 39791, 27347, 28809, 36034, 36335, 38706, 21172, 23105, 24266, 24324, 26391, 27004, 27028, 28010, 28431, 29282, 29436, 31725, 32769, 32894, 34635, 37070, 20845, 40595, 31108, 32907, 37682, 35542, 20525, 21644, 35441, 27498, 36036, 33031, 24785, 26528, 40434, 20121, 20120, 39952, 35435, 34241, 34152, 26880, 28286, 30871, 33109, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 24332, 19984, 19989, 20010, 20017, 20022, 20028, 20031, 20034, 20054, 20056, 20098, 20101, 35947, 20106, 33298, 24333, 20110, 20126, 20127, 20128, 20130, 20144, 20147, 20150, 20174, 20173, 20164, 20166, 20162, 20183, 20190, 20205, 20191, 20215, 20233, 20314, 20272, 20315, 20317, 20311, 20295, 20342, 20360, 20367, 20376, 20347, 20329, 20336, 20369, 20335, 20358, 20374, 20760, 20436, 20447, 20430, 20440, 20443, 20433, 20442, 20432, 20452, 20453, 20506, 20520, 20500, 20522, 20517, 20485, 20252, 20470, 20513, 20521, 20524, 20478, 20463, 20497, 20486, 20547, 20551, 26371, 20565, 20560, 20552, 20570, 20566, 20588, 20600, 20608, 20634, 20613, 20660, 20658, 20681, 20682, 20659, 20674, 20694, 20702, 20709, 20717, 20707, 20718, 20729, 20725, 20745, 20737, 20738, 20758, 20757, 20756, 20762, 20769, 20794, 20791, 20796, 20795, 20799, 20800, 20818, 20812, 20820, 20834, 31480, 20841, 20842, 20846, 20864, 20866, 22232, 20876, 20873, 20879, 20881, 20883, 20885, 20886, 20900, 20902, 20898, 20905, 20906, 20907, 20915, 20913, 20914, 20912, 20917, 20925, 20933, 20937, 20955, 20960, 34389, 20969, 20973, 20976, 20981, 20990, 20996, 21003, 21012, 21006, 21031, 21034, 21038, 21043, 21049, 21071, 21060, 21067, 21068, 21086, 21076, 21098, 21108, 21097, 21107, 21119, 21117, 21133, 21140, 21138, 21105, 21128, 21137, 36776, 36775, 21164, 21165, 21180, 21173, 21185, 21197, 21207, 21214, 21219, 21222, 39149, 21216, 21235, 21237, 21240, 21241, 21254, 21256, 30008, 21261, 21264, 21263, 21269, 21274, 21283, 21295, 21297, 21299, 21304, 21312, 21318, 21317, 19991, 21321, 21325, 20950, 21342, 21353, 21358, 22808, 21371, 21367, 21378, 21398, 21408, 21414, 21413, 21422, 21424, 21430, 21443, 31762, 38617, 21471, 26364, 29166, 21486, 21480, 21485, 21498, 21505, 21565, 21568, 21548, 21549, 21564, 21550, 21558, 21545, 21533, 21582, 21647, 21621, 21646, 21599, 21617, 21623, 21616, 21650, 21627, 21632, 21622, 21636, 21648, 21638, 21703, 21666, 21688, 21669, 21676, 21700, 21704, 21672, 21675, 21698, 21668, 21694, 21692, 21720, 21733, 21734, 21775, 21780, 21757, 21742, 21741, 21754, 21730, 21817, 21824, 21859, 21836, 21806, 21852, 21829, 21846, 21847, 21816, 21811, 21853, 21913, 21888, 21679, 21898, 21919, 21883, 21886, 21912, 21918, 21934, 21884, 21891, 21929, 21895, 21928, 21978, 21957, 21983, 21956, 21980, 21988, 21972, 22036, 22007, 22038, 22014, 22013, 22043, 22009, 22094, 22096, 29151, 22068, 22070, 22066, 22072, 22123, 22116, 22063, 22124, 22122, 22150, 22144, 22154, 22176, 22164, 22159, 22181, 22190, 22198, 22196, 22210, 22204, 22209, 22211, 22208, 22216, 22222, 22225, 22227, 22231, 22254, 22265, 22272, 22271, 22276, 22281, 22280, 22283, 22285, 22291, 22296, 22294, 21959, 22300, 22310, 22327, 22328, 22350, 22331, 22336, 22351, 22377, 22464, 22408, 22369, 22399, 22409, 22419, 22432, 22451, 22436, 22442, 22448, 22467, 22470, 22484, 22482, 22483, 22538, 22486, 22499, 22539, 22553, 22557, 22642, 22561, 22626, 22603, 22640, 27584, 22610, 22589, 22649, 22661, 22713, 22687, 22699, 22714, 22750, 22715, 22712, 22702, 22725, 22739, 22737, 22743, 22745, 22744, 22757, 22748, 22756, 22751, 22767, 22778, 22777, 22779, 22780, 22781, 22786, 22794, 22800, 22811, 26790, 22821, 22828, 22829, 22834, 22840, 22846, 31442, 22869, 22864, 22862, 22874, 22872, 22882, 22880, 22887, 22892, 22889, 22904, 22913, 22941, 20318, 20395, 22947, 22962, 22982, 23016, 23004, 22925, 23001, 23002, 23077, 23071, 23057, 23068, 23049, 23066, 23104, 23148, 23113, 23093, 23094, 23138, 23146, 23194, 23228, 23230, 23243, 23234, 23229, 23267, 23255, 23270, 23273, 23254, 23290, 23291, 23308, 23307, 23318, 23346, 23248, 23338, 23350, 23358, 23363, 23365, 23360, 23377, 23381, 23386, 23387, 23397, 23401, 23408, 23411, 23413, 23416, 25992, 23418, 23424, 23427, 23462, 23480, 23491, 23495, 23497, 23508, 23504, 23524, 23526, 23522, 23518, 23525, 23531, 23536, 23542, 23539, 23557, 23559, 23560, 23565, 23571, 23584, 23586, 23592, 23608, 23609, 23617, 23622, 23630, 23635, 23632, 23631, 23409, 23660, 23662, 20066, 23670, 23673, 23692, 23697, 23700, 22939, 23723, 23739, 23734, 23740, 23735, 23749, 23742, 23751, 23769, 23785, 23805, 23802, 23789, 23948, 23786, 23819, 23829, 23831, 23900, 23839, 23835, 23825, 23828, 23842, 23834, 23833, 23832, 23884, 23890, 23886, 23883, 23916, 23923, 23926, 23943, 23940, 23938, 23970, 23965, 23980, 23982, 23997, 23952, 23991, 23996, 24009, 24013, 24019, 24018, 24022, 24027, 24043, 24050, 24053, 24075, 24090, 24089, 24081, 24091, 24118, 24119, 24132, 24131, 24128, 24142, 24151, 24148, 24159, 24162, 24164, 24135, 24181, 24182, 24186, 40636, 24191, 24224, 24257, 24258, 24264, 24272, 24271, 24278, 24291, 24285, 24282, 24283, 24290, 24289, 24296, 24297, 24300, 24305, 24307, 24304, 24308, 24312, 24318, 24323, 24329, 24413, 24412, 24331, 24337, 24342, 24361, 24365, 24376, 24385, 24392, 24396, 24398, 24367, 24401, 24406, 24407, 24409, 24417, 24429, 24435, 24439, 24451, 24450, 24447, 24458, 24456, 24465, 24455, 24478, 24473, 24472, 24480, 24488, 24493, 24508, 24534, 24571, 24548, 24568, 24561, 24541, 24755, 24575, 24609, 24672, 24601, 24592, 24617, 24590, 24625, 24603, 24597, 24619, 24614, 24591, 24634, 24666, 24641, 24682, 24695, 24671, 24650, 24646, 24653, 24675, 24643, 24676, 24642, 24684, 24683, 24665, 24705, 24717, 24807, 24707, 24730, 24708, 24731, 24726, 24727, 24722, 24743, 24715, 24801, 24760, 24800, 24787, 24756, 24560, 24765, 24774, 24757, 24792, 24909, 24853, 24838, 24822, 24823, 24832, 24820, 24826, 24835, 24865, 24827, 24817, 24845, 24846, 24903, 24894, 24872, 24871, 24906, 24895, 24892, 24876, 24884, 24893, 24898, 24900, 24947, 24951, 24920, 24921, 24922, 24939, 24948, 24943, 24933, 24945, 24927, 24925, 24915, 24949, 24985, 24982, 24967, 25004, 24980, 24986, 24970, 24977, 25003, 25006, 25036, 25034, 25033, 25079, 25032, 25027, 25030, 25018, 25035, 32633, 25037, 25062, 25059, 25078, 25082, 25076, 25087, 25085, 25084, 25086, 25088, 25096, 25097, 25101, 25100, 25108, 25115, 25118, 25121, 25130, 25134, 25136, 25138, 25139, 25153, 25166, 25182, 25187, 25179, 25184, 25192, 25212, 25218, 25225, 25214, 25234, 25235, 25238, 25300, 25219, 25236, 25303, 25297, 25275, 25295, 25343, 25286, 25812, 25288, 25308, 25292, 25290, 25282, 25287, 25243, 25289, 25356, 25326, 25329, 25383, 25346, 25352, 25327, 25333, 25424, 25406, 25421, 25628, 25423, 25494, 25486, 25472, 25515, 25462, 25507, 25487, 25481, 25503, 25525, 25451, 25449, 25534, 25577, 25536, 25542, 25571, 25545, 25554, 25590, 25540, 25622, 25652, 25606, 25619, 25638, 25654, 25885, 25623, 25640, 25615, 25703, 25711, 25718, 25678, 25898, 25749, 25747, 25765, 25769, 25736, 25788, 25818, 25810, 25797, 25799, 25787, 25816, 25794, 25841, 25831, 33289, 25824, 25825, 25260, 25827, 25839, 25900, 25846, 25844, 25842, 25850, 25856, 25853, 25880, 25884, 25861, 25892, 25891, 25899, 25908, 25909, 25911, 25910, 25912, 30027, 25928, 25942, 25941, 25933, 25944, 25950, 25949, 25970, 25976, 25986, 25987, 35722, 26011, 26015, 26027, 26039, 26051, 26054, 26049, 26052, 26060, 26066, 26075, 26073, 26080, 26081, 26097, 26482, 26122, 26115, 26107, 26483, 26165, 26166, 26164, 26140, 26191, 26180, 26185, 26177, 26206, 26205, 26212, 26215, 26216, 26207, 26210, 26224, 26243, 26248, 26254, 26249, 26244, 26264, 26269, 26305, 26297, 26313, 26302, 26300, 26308, 26296, 26326, 26330, 26336, 26175, 26342, 26345, 26352, 26357, 26359, 26383, 26390, 26398, 26406, 26407, 38712, 26414, 26431, 26422, 26433, 26424, 26423, 26438, 26462, 26464, 26457, 26467, 26468, 26505, 26480, 26537, 26492, 26474, 26508, 26507, 26534, 26529, 26501, 26551, 26607, 26548, 26604, 26547, 26601, 26552, 26596, 26590, 26589, 26594, 26606, 26553, 26574, 26566, 26599, 27292, 26654, 26694, 26665, 26688, 26701, 26674, 26702, 26803, 26667, 26713, 26723, 26743, 26751, 26783, 26767, 26797, 26772, 26781, 26779, 26755, 27310, 26809, 26740, 26805, 26784, 26810, 26895, 26765, 26750, 26881, 26826, 26888, 26840, 26914, 26918, 26849, 26892, 26829, 26836, 26855, 26837, 26934, 26898, 26884, 26839, 26851, 26917, 26873, 26848, 26863, 26920, 26922, 26906, 26915, 26913, 26822, 27001, 26999, 26972, 27000, 26987, 26964, 27006, 26990, 26937, 26996, 26941, 26969, 26928, 26977, 26974, 26973, 27009, 26986, 27058, 27054, 27088, 27071, 27073, 27091, 27070, 27086, 23528, 27082, 27101, 27067, 27075, 27047, 27182, 27025, 27040, 27036, 27029, 27060, 27102, 27112, 27138, 27163, 27135, 27402, 27129, 27122, 27111, 27141, 27057, 27166, 27117, 27156, 27115, 27146, 27154, 27329, 27171, 27155, 27204, 27148, 27250, 27190, 27256, 27207, 27234, 27225, 27238, 27208, 27192, 27170, 27280, 27277, 27296, 27268, 27298, 27299, 27287, 34327, 27323, 27331, 27330, 27320, 27315, 27308, 27358, 27345, 27359, 27306, 27354, 27370, 27387, 27397, 34326, 27386, 27410, 27414, 39729, 27423, 27448, 27447, 30428, 27449, 39150, 27463, 27459, 27465, 27472, 27481, 27476, 27483, 27487, 27489, 27512, 27513, 27519, 27520, 27524, 27523, 27533, 27544, 27541, 27550, 27556, 27562, 27563, 27567, 27570, 27569, 27571, 27575, 27580, 27590, 27595, 27603, 27615, 27628, 27627, 27635, 27631, 40638, 27656, 27667, 27668, 27675, 27684, 27683, 27742, 27733, 27746, 27754, 27778, 27789, 27802, 27777, 27803, 27774, 27752, 27763, 27794, 27792, 27844, 27889, 27859, 27837, 27863, 27845, 27869, 27822, 27825, 27838, 27834, 27867, 27887, 27865, 27882, 27935, 34893, 27958, 27947, 27965, 27960, 27929, 27957, 27955, 27922, 27916, 28003, 28051, 28004, 27994, 28025, 27993, 28046, 28053, 28644, 28037, 28153, 28181, 28170, 28085, 28103, 28134, 28088, 28102, 28140, 28126, 28108, 28136, 28114, 28101, 28154, 28121, 28132, 28117, 28138, 28142, 28205, 28270, 28206, 28185, 28274, 28255, 28222, 28195, 28267, 28203, 28278, 28237, 28191, 28227, 28218, 28238, 28196, 28415, 28189, 28216, 28290, 28330, 28312, 28361, 28343, 28371, 28349, 28335, 28356, 28338, 28372, 28373, 28303, 28325, 28354, 28319, 28481, 28433, 28748, 28396, 28408, 28414, 28479, 28402, 28465, 28399, 28466, 28364, 28478, 28435, 28407, 28550, 28538, 28536, 28545, 28544, 28527, 28507, 28659, 28525, 28546, 28540, 28504, 28558, 28561, 28610, 28518, 28595, 28579, 28577, 28580, 28601, 28614, 28586, 28639, 28629, 28652, 28628, 28632, 28657, 28654, 28635, 28681, 28683, 28666, 28689, 28673, 28687, 28670, 28699, 28698, 28532, 28701, 28696, 28703, 28720, 28734, 28722, 28753, 28771, 28825, 28818, 28847, 28913, 28844, 28856, 28851, 28846, 28895, 28875, 28893, 28889, 28937, 28925, 28956, 28953, 29029, 29013, 29064, 29030, 29026, 29004, 29014, 29036, 29071, 29179, 29060, 29077, 29096, 29100, 29143, 29113, 29118, 29138, 29129, 29140, 29134, 29152, 29164, 29159, 29173, 29180, 29177, 29183, 29197, 29200, 29211, 29224, 29229, 29228, 29232, 29234, 29243, 29244, 29247, 29248, 29254, 29259, 29272, 29300, 29310, 29314, 29313, 29319, 29330, 29334, 29346, 29351, 29369, 29362, 29379, 29382, 29380, 29390, 29394, 29410, 29408, 29409, 29433, 29431, 20495, 29463, 29450, 29468, 29462, 29469, 29492, 29487, 29481, 29477, 29502, 29518, 29519, 40664, 29527, 29546, 29544, 29552, 29560, 29557, 29563, 29562, 29640, 29619, 29646, 29627, 29632, 29669, 29678, 29662, 29858, 29701, 29807, 29733, 29688, 29746, 29754, 29781, 29759, 29791, 29785, 29761, 29788, 29801, 29808, 29795, 29802, 29814, 29822, 29835, 29854, 29863, 29898, 29903, 29908, 29681, 29920, 29923, 29927, 29929, 29934, 29938, 29936, 29937, 29944, 29943, 29956, 29955, 29957, 29964, 29966, 29965, 29973, 29971, 29982, 29990, 29996, 30012, 30020, 30029, 30026, 30025, 30043, 30022, 30042, 30057, 30052, 30055, 30059, 30061, 30072, 30070, 30086, 30087, 30068, 30090, 30089, 30082, 30100, 30106, 30109, 30117, 30115, 30146, 30131, 30147, 30133, 30141, 30136, 30140, 30129, 30157, 30154, 30162, 30169, 30179, 30174, 30206, 30207, 30204, 30209, 30192, 30202, 30194, 30195, 30219, 30221, 30217, 30239, 30247, 30240, 30241, 30242, 30244, 30260, 30256, 30267, 30279, 30280, 30278, 30300, 30296, 30305, 30306, 30312, 30313, 30314, 30311, 30316, 30320, 30322, 30326, 30328, 30332, 30336, 30339, 30344, 30347, 30350, 30358, 30355, 30361, 30362, 30384, 30388, 30392, 30393, 30394, 30402, 30413, 30422, 30418, 30430, 30433, 30437, 30439, 30442, 34351, 30459, 30472, 30471, 30468, 30505, 30500, 30494, 30501, 30502, 30491, 30519, 30520, 30535, 30554, 30568, 30571, 30555, 30565, 30591, 30590, 30585, 30606, 30603, 30609, 30624, 30622, 30640, 30646, 30649, 30655, 30652, 30653, 30651, 30663, 30669, 30679, 30682, 30684, 30691, 30702, 30716, 30732, 30738, 31014, 30752, 31018, 30789, 30862, 30836, 30854, 30844, 30874, 30860, 30883, 30901, 30890, 30895, 30929, 30918, 30923, 30932, 30910, 30908, 30917, 30922, 30956, 30951, 30938, 30973, 30964, 30983, 30994, 30993, 31001, 31020, 31019, 31040, 31072, 31063, 31071, 31066, 31061, 31059, 31098, 31103, 31114, 31133, 31143, 40779, 31146, 31150, 31155, 31161, 31162, 31177, 31189, 31207, 31212, 31201, 31203, 31240, 31245, 31256, 31257, 31264, 31263, 31104, 31281, 31291, 31294, 31287, 31299, 31319, 31305, 31329, 31330, 31337, 40861, 31344, 31353, 31357, 31368, 31383, 31381, 31384, 31382, 31401, 31432, 31408, 31414, 31429, 31428, 31423, 36995, 31431, 31434, 31437, 31439, 31445, 31443, 31449, 31450, 31453, 31457, 31458, 31462, 31469, 31472, 31490, 31503, 31498, 31494, 31539, 31512, 31513, 31518, 31541, 31528, 31542, 31568, 31610, 31492, 31565, 31499, 31564, 31557, 31605, 31589, 31604, 31591, 31600, 31601, 31596, 31598, 31645, 31640, 31647, 31629, 31644, 31642, 31627, 31634, 31631, 31581, 31641, 31691, 31681, 31692, 31695, 31668, 31686, 31709, 31721, 31761, 31764, 31718, 31717, 31840, 31744, 31751, 31763, 31731, 31735, 31767, 31757, 31734, 31779, 31783, 31786, 31775, 31799, 31787, 31805, 31820, 31811, 31828, 31823, 31808, 31824, 31832, 31839, 31844, 31830, 31845, 31852, 31861, 31875, 31888, 31908, 31917, 31906, 31915, 31905, 31912, 31923, 31922, 31921, 31918, 31929, 31933, 31936, 31941, 31938, 31960, 31954, 31964, 31970, 39739, 31983, 31986, 31988, 31990, 31994, 32006, 32002, 32028, 32021, 32010, 32069, 32075, 32046, 32050, 32063, 32053, 32070, 32115, 32086, 32078, 32114, 32104, 32110, 32079, 32099, 32147, 32137, 32091, 32143, 32125, 32155, 32186, 32174, 32163, 32181, 32199, 32189, 32171, 32317, 32162, 32175, 32220, 32184, 32159, 32176, 32216, 32221, 32228, 32222, 32251, 32242, 32225, 32261, 32266, 32291, 32289, 32274, 32305, 32287, 32265, 32267, 32290, 32326, 32358, 32315, 32309, 32313, 32323, 32311, 32306, 32314, 32359, 32349, 32342, 32350, 32345, 32346, 32377, 32362, 32361, 32380, 32379, 32387, 32213, 32381, 36782, 32383, 32392, 32393, 32396, 32402, 32400, 32403, 32404, 32406, 32398, 32411, 32412, 32568, 32570, 32581, 32588, 32589, 32590, 32592, 32593, 32597, 32596, 32600, 32607, 32608, 32616, 32617, 32615, 32632, 32642, 32646, 32643, 32648, 32647, 32652, 32660, 32670, 32669, 32666, 32675, 32687, 32690, 32697, 32686, 32694, 32696, 35697, 32709, 32710, 32714, 32725, 32724, 32737, 32742, 32745, 32755, 32761, 39132, 32774, 32772, 32779, 32786, 32792, 32793, 32796, 32801, 32808, 32831, 32827, 32842, 32838, 32850, 32856, 32858, 32863, 32866, 32872, 32883, 32882, 32880, 32886, 32889, 32893, 32895, 32900, 32902, 32901, 32923, 32915, 32922, 32941, 20880, 32940, 32987, 32997, 32985, 32989, 32964, 32986, 32982, 33033, 33007, 33009, 33051, 33065, 33059, 33071, 33099, 38539, 33094, 33086, 33107, 33105, 33020, 33137, 33134, 33125, 33126, 33140, 33155, 33160, 33162, 33152, 33154, 33184, 33173, 33188, 33187, 33119, 33171, 33193, 33200, 33205, 33214, 33208, 33213, 33216, 33218, 33210, 33225, 33229, 33233, 33241, 33240, 33224, 33242, 33247, 33248, 33255, 33274, 33275, 33278, 33281, 33282, 33285, 33287, 33290, 33293, 33296, 33302, 33321, 33323, 33336, 33331, 33344, 33369, 33368, 33373, 33370, 33375, 33380, 33378, 33384, 33386, 33387, 33326, 33393, 33399, 33400, 33406, 33421, 33426, 33451, 33439, 33467, 33452, 33505, 33507, 33503, 33490, 33524, 33523, 33530, 33683, 33539, 33531, 33529, 33502, 33542, 33500, 33545, 33497, 33589, 33588, 33558, 33586, 33585, 33600, 33593, 33616, 33605, 33583, 33579, 33559, 33560, 33669, 33690, 33706, 33695, 33698, 33686, 33571, 33678, 33671, 33674, 33660, 33717, 33651, 33653, 33696, 33673, 33704, 33780, 33811, 33771, 33742, 33789, 33795, 33752, 33803, 33729, 33783, 33799, 33760, 33778, 33805, 33826, 33824, 33725, 33848, 34054, 33787, 33901, 33834, 33852, 34138, 33924, 33911, 33899, 33965, 33902, 33922, 33897, 33862, 33836, 33903, 33913, 33845, 33994, 33890, 33977, 33983, 33951, 34009, 33997, 33979, 34010, 34000, 33985, 33990, 34006, 33953, 34081, 34047, 34036, 34071, 34072, 34092, 34079, 34069, 34068, 34044, 34112, 34147, 34136, 34120, 34113, 34306, 34123, 34133, 34176, 34212, 34184, 34193, 34186, 34216, 34157, 34196, 34203, 34282, 34183, 34204, 34167, 34174, 34192, 34249, 34234, 34255, 34233, 34256, 34261, 34269, 34277, 34268, 34297, 34314, 34323, 34315, 34302, 34298, 34310, 34338, 34330, 34352, 34367, 34381, 20053, 34388, 34399, 34407, 34417, 34451, 34467, 34473, 34474, 34443, 34444, 34486, 34479, 34500, 34502, 34480, 34505, 34851, 34475, 34516, 34526, 34537, 34540, 34527, 34523, 34543, 34578, 34566, 34568, 34560, 34563, 34555, 34577, 34569, 34573, 34553, 34570, 34612, 34623, 34615, 34619, 34597, 34601, 34586, 34656, 34655, 34680, 34636, 34638, 34676, 34647, 34664, 34670, 34649, 34643, 34659, 34666, 34821, 34722, 34719, 34690, 34735, 34763, 34749, 34752, 34768, 38614, 34731, 34756, 34739, 34759, 34758, 34747, 34799, 34802, 34784, 34831, 34829, 34814, 34806, 34807, 34830, 34770, 34833, 34838, 34837, 34850, 34849, 34865, 34870, 34873, 34855, 34875, 34884, 34882, 34898, 34905, 34910, 34914, 34923, 34945, 34942, 34974, 34933, 34941, 34997, 34930, 34946, 34967, 34962, 34990, 34969, 34978, 34957, 34980, 34992, 35007, 34993, 35011, 35012, 35028, 35032, 35033, 35037, 35065, 35074, 35068, 35060, 35048, 35058, 35076, 35084, 35082, 35091, 35139, 35102, 35109, 35114, 35115, 35137, 35140, 35131, 35126, 35128, 35148, 35101, 35168, 35166, 35174, 35172, 35181, 35178, 35183, 35188, 35191, 35198, 35203, 35208, 35210, 35219, 35224, 35233, 35241, 35238, 35244, 35247, 35250, 35258, 35261, 35263, 35264, 35290, 35292, 35293, 35303, 35316, 35320, 35331, 35350, 35344, 35340, 35355, 35357, 35365, 35382, 35393, 35419, 35410, 35398, 35400, 35452, 35437, 35436, 35426, 35461, 35458, 35460, 35496, 35489, 35473, 35493, 35494, 35482, 35491, 35524, 35533, 35522, 35546, 35563, 35571, 35559, 35556, 35569, 35604, 35552, 35554, 35575, 35550, 35547, 35596, 35591, 35610, 35553, 35606, 35600, 35607, 35616, 35635, 38827, 35622, 35627, 35646, 35624, 35649, 35660, 35663, 35662, 35657, 35670, 35675, 35674, 35691, 35679, 35692, 35695, 35700, 35709, 35712, 35724, 35726, 35730, 35731, 35734, 35737, 35738, 35898, 35905, 35903, 35912, 35916, 35918, 35920, 35925, 35938, 35948, 35960, 35962, 35970, 35977, 35973, 35978, 35981, 35982, 35988, 35964, 35992, 25117, 36013, 36010, 36029, 36018, 36019, 36014, 36022, 36040, 36033, 36068, 36067, 36058, 36093, 36090, 36091, 36100, 36101, 36106, 36103, 36111, 36109, 36112, 40782, 36115, 36045, 36116, 36118, 36199, 36205, 36209, 36211, 36225, 36249, 36290, 36286, 36282, 36303, 36314, 36310, 36300, 36315, 36299, 36330, 36331, 36319, 36323, 36348, 36360, 36361, 36351, 36381, 36382, 36368, 36383, 36418, 36405, 36400, 36404, 36426, 36423, 36425, 36428, 36432, 36424, 36441, 36452, 36448, 36394, 36451, 36437, 36470, 36466, 36476, 36481, 36487, 36485, 36484, 36491, 36490, 36499, 36497, 36500, 36505, 36522, 36513, 36524, 36528, 36550, 36529, 36542, 36549, 36552, 36555, 36571, 36579, 36604, 36603, 36587, 36606, 36618, 36613, 36629, 36626, 36633, 36627, 36636, 36639, 36635, 36620, 36646, 36659, 36667, 36665, 36677, 36674, 36670, 36684, 36681, 36678, 36686, 36695, 36700, 36706, 36707, 36708, 36764, 36767, 36771, 36781, 36783, 36791, 36826, 36837, 36834, 36842, 36847, 36999, 36852, 36869, 36857, 36858, 36881, 36885, 36897, 36877, 36894, 36886, 36875, 36903, 36918, 36917, 36921, 36856, 36943, 36944, 36945, 36946, 36878, 36937, 36926, 36950, 36952, 36958, 36968, 36975, 36982, 38568, 36978, 36994, 36989, 36993, 36992, 37002, 37001, 37007, 37032, 37039, 37041, 37045, 37090, 37092, 25160, 37083, 37122, 37138, 37145, 37170, 37168, 37194, 37206, 37208, 37219, 37221, 37225, 37235, 37234, 37259, 37257, 37250, 37282, 37291, 37295, 37290, 37301, 37300, 37306, 37312, 37313, 37321, 37323, 37328, 37334, 37343, 37345, 37339, 37372, 37365, 37366, 37406, 37375, 37396, 37420, 37397, 37393, 37470, 37463, 37445, 37449, 37476, 37448, 37525, 37439, 37451, 37456, 37532, 37526, 37523, 37531, 37466, 37583, 37561, 37559, 37609, 37647, 37626, 37700, 37678, 37657, 37666, 37658, 37667, 37690, 37685, 37691, 37724, 37728, 37756, 37742, 37718, 37808, 37804, 37805, 37780, 37817, 37846, 37847, 37864, 37861, 37848, 37827, 37853, 37840, 37832, 37860, 37914, 37908, 37907, 37891, 37895, 37904, 37942, 37931, 37941, 37921, 37946, 37953, 37970, 37956, 37979, 37984, 37986, 37982, 37994, 37417, 38000, 38005, 38007, 38013, 37978, 38012, 38014, 38017, 38015, 38274, 38279, 38282, 38292, 38294, 38296, 38297, 38304, 38312, 38311, 38317, 38332, 38331, 38329, 38334, 38346, 28662, 38339, 38349, 38348, 38357, 38356, 38358, 38364, 38369, 38373, 38370, 38433, 38440, 38446, 38447, 38466, 38476, 38479, 38475, 38519, 38492, 38494, 38493, 38495, 38502, 38514, 38508, 38541, 38552, 38549, 38551, 38570, 38567, 38577, 38578, 38576, 38580, 38582, 38584, 38585, 38606, 38603, 38601, 38605, 35149, 38620, 38669, 38613, 38649, 38660, 38662, 38664, 38675, 38670, 38673, 38671, 38678, 38681, 38692, 38698, 38704, 38713, 38717, 38718, 38724, 38726, 38728, 38722, 38729, 38748, 38752, 38756, 38758, 38760, 21202, 38763, 38769, 38777, 38789, 38780, 38785, 38778, 38790, 38795, 38799, 38800, 38812, 38824, 38822, 38819, 38835, 38836, 38851, 38854, 38856, 38859, 38876, 38893, 40783, 38898, 31455, 38902, 38901, 38927, 38924, 38968, 38948, 38945, 38967, 38973, 38982, 38991, 38987, 39019, 39023, 39024, 39025, 39028, 39027, 39082, 39087, 39089, 39094, 39108, 39107, 39110, 39145, 39147, 39171, 39177, 39186, 39188, 39192, 39201, 39197, 39198, 39204, 39200, 39212, 39214, 39229, 39230, 39234, 39241, 39237, 39248, 39243, 39249, 39250, 39244, 39253, 39319, 39320, 39333, 39341, 39342, 39356, 39391, 39387, 39389, 39384, 39377, 39405, 39406, 39409, 39410, 39419, 39416, 39425, 39439, 39429, 39394, 39449, 39467, 39479, 39493, 39490, 39488, 39491, 39486, 39509, 39501, 39515, 39511, 39519, 39522, 39525, 39524, 39529, 39531, 39530, 39597, 39600, 39612, 39616, 39631, 39633, 39635, 39636, 39646, 39647, 39650, 39651, 39654, 39663, 39659, 39662, 39668, 39665, 39671, 39675, 39686, 39704, 39706, 39711, 39714, 39715, 39717, 39719, 39720, 39721, 39722, 39726, 39727, 39730, 39748, 39747, 39759, 39757, 39758, 39761, 39768, 39796, 39827, 39811, 39825, 39830, 39831, 39839, 39840, 39848, 39860, 39872, 39882, 39865, 39878, 39887, 39889, 39890, 39907, 39906, 39908, 39892, 39905, 39994, 39922, 39921, 39920, 39957, 39956, 39945, 39955, 39948, 39942, 39944, 39954, 39946, 39940, 39982, 39963, 39973, 39972, 39969, 39984, 40007, 39986, 40006, 39998, 40026, 40032, 40039, 40054, 40056, 40167, 40172, 40176, 40201, 40200, 40171, 40195, 40198, 40234, 40230, 40367, 40227, 40223, 40260, 40213, 40210, 40257, 40255, 40254, 40262, 40264, 40285, 40286, 40292, 40273, 40272, 40281, 40306, 40329, 40327, 40363, 40303, 40314, 40346, 40356, 40361, 40370, 40388, 40385, 40379, 40376, 40378, 40390, 40399, 40386, 40409, 40403, 40440, 40422, 40429, 40431, 40445, 40474, 40475, 40478, 40565, 40569, 40573, 40577, 40584, 40587, 40588, 40594, 40597, 40593, 40605, 40613, 40617, 40632, 40618, 40621, 38753, 40652, 40654, 40655, 40656, 40660, 40668, 40670, 40669, 40672, 40677, 40680, 40687, 40692, 40694, 40695, 40697, 40699, 40700, 40701, 40711, 40712, 30391, 40725, 40737, 40748, 40766, 40778, 40786, 40788, 40803, 40799, 40800, 40801, 40806, 40807, 40812, 40810, 40823, 40818, 40822, 40853, 40860, 40864, 22575, 27079, 36953, 29796, 20956, 29081, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 32394, 35100, 37704, 37512, 34012, 20425, 28859, 26161, 26824, 37625, 26363, 24389, 20008, 20193, 20220, 20224, 20227, 20281, 20310, 20370, 20362, 20378, 20372, 20429, 20544, 20514, 20479, 20510, 20550, 20592, 20546, 20628, 20724, 20696, 20810, 20836, 20893, 20926, 20972, 21013, 21148, 21158, 21184, 21211, 21248, 21255, 21284, 21362, 21395, 21426, 21469, 64014, 21660, 21642, 21673, 21759, 21894, 22361, 22373, 22444, 22472, 22471, 64015, 64016, 22686, 22706, 22795, 22867, 22875, 22877, 22883, 22948, 22970, 23382, 23488, 29999, 23512, 23532, 23582, 23718, 23738, 23797, 23847, 23891, 64017, 23874, 23917, 23992, 23993, 24016, 24353, 24372, 24423, 24503, 24542, 24669, 24709, 24714, 24798, 24789, 24864, 24818, 24849, 24887, 24880, 24984, 25107, 25254, 25589, 25696, 25757, 25806, 25934, 26112, 26133, 26171, 26121, 26158, 26142, 26148, 26213, 26199, 26201, 64018, 26227, 26265, 26272, 26290, 26303, 26362, 26382, 63785, 26470, 26555, 26706, 26560, 26625, 26692, 26831, 64019, 26984, 64020, 27032, 27106, 27184, 27243, 27206, 27251, 27262, 27362, 27364, 27606, 27711, 27740, 27782, 27759, 27866, 27908, 28039, 28015, 28054, 28076, 28111, 28152, 28146, 28156, 28217, 28252, 28199, 28220, 28351, 28552, 28597, 28661, 28677, 28679, 28712, 28805, 28843, 28943, 28932, 29020, 28998, 28999, 64021, 29121, 29182, 29361, 29374, 29476, 64022, 29559, 29629, 29641, 29654, 29667, 29650, 29703, 29685, 29734, 29738, 29737, 29742, 29794, 29833, 29855, 29953, 30063, 30338, 30364, 30366, 30363, 30374, 64023, 30534, 21167, 30753, 30798, 30820, 30842, 31024, 64024, 64025, 64026, 31124, 64027, 31131, 31441, 31463, 64028, 31467, 31646, 64029, 32072, 32092, 32183, 32160, 32214, 32338, 32583, 32673, 64030, 33537, 33634, 33663, 33735, 33782, 33864, 33972, 34131, 34137, 34155, 64031, 34224, 64032, 64033, 34823, 35061, 35346, 35383, 35449, 35495, 35518, 35551, 64034, 35574, 35667, 35711, 36080, 36084, 36114, 36214, 64035, 36559, 64036, 64037, 36967, 37086, 64038, 37141, 37159, 37338, 37335, 37342, 37357, 37358, 37348, 37349, 37382, 37392, 37386, 37434, 37440, 37436, 37454, 37465, 37457, 37433, 37479, 37543, 37495, 37496, 37607, 37591, 37593, 37584, 64039, 37589, 37600, 37587, 37669, 37665, 37627, 64040, 37662, 37631, 37661, 37634, 37744, 37719, 37796, 37830, 37854, 37880, 37937, 37957, 37960, 38290, 63964, 64041, 38557, 38575, 38707, 38715, 38723, 38733, 38735, 38737, 38741, 38999, 39013, 64042, 64043, 39207, 64044, 39326, 39502, 39641, 39644, 39797, 39794, 39823, 39857, 39867, 39936, 40304, 40299, 64045, 40473, 40657, null, null, 8560, 8561, 8562, 8563, 8564, 8565, 8566, 8567, 8568, 8569, 65506, 65508, 65287, 65282, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, 8560, 8561, 8562, 8563, 8564, 8565, 8566, 8567, 8568, 8569, 8544, 8545, 8546, 8547, 8548, 8549, 8550, 8551, 8552, 8553, 65506, 65508, 65287, 65282, 12849, 8470, 8481, 8757, 32394, 35100, 37704, 37512, 34012, 20425, 28859, 26161, 26824, 37625, 26363, 24389, 20008, 20193, 20220, 20224, 20227, 20281, 20310, 20370, 20362, 20378, 20372, 20429, 20544, 20514, 20479, 20510, 20550, 20592, 20546, 20628, 20724, 20696, 20810, 20836, 20893, 20926, 20972, 21013, 21148, 21158, 21184, 21211, 21248, 21255, 21284, 21362, 21395, 21426, 21469, 64014, 21660, 21642, 21673, 21759, 21894, 22361, 22373, 22444, 22472, 22471, 64015, 64016, 22686, 22706, 22795, 22867, 22875, 22877, 22883, 22948, 22970, 23382, 23488, 29999, 23512, 23532, 23582, 23718, 23738, 23797, 23847, 23891, 64017, 23874, 23917, 23992, 23993, 24016, 24353, 24372, 24423, 24503, 24542, 24669, 24709, 24714, 24798, 24789, 24864, 24818, 24849, 24887, 24880, 24984, 25107, 25254, 25589, 25696, 25757, 25806, 25934, 26112, 26133, 26171, 26121, 26158, 26142, 26148, 26213, 26199, 26201, 64018, 26227, 26265, 26272, 26290, 26303, 26362, 26382, 63785, 26470, 26555, 26706, 26560, 26625, 26692, 26831, 64019, 26984, 64020, 27032, 27106, 27184, 27243, 27206, 27251, 27262, 27362, 27364, 27606, 27711, 27740, 27782, 27759, 27866, 27908, 28039, 28015, 28054, 28076, 28111, 28152, 28146, 28156, 28217, 28252, 28199, 28220, 28351, 28552, 28597, 28661, 28677, 28679, 28712, 28805, 28843, 28943, 28932, 29020, 28998, 28999, 64021, 29121, 29182, 29361, 29374, 29476, 64022, 29559, 29629, 29641, 29654, 29667, 29650, 29703, 29685, 29734, 29738, 29737, 29742, 29794, 29833, 29855, 29953, 30063, 30338, 30364, 30366, 30363, 30374, 64023, 30534, 21167, 30753, 30798, 30820, 30842, 31024, 64024, 64025, 64026, 31124, 64027, 31131, 31441, 31463, 64028, 31467, 31646, 64029, 32072, 32092, 32183, 32160, 32214, 32338, 32583, 32673, 64030, 33537, 33634, 33663, 33735, 33782, 33864, 33972, 34131, 34137, 34155, 64031, 34224, 64032, 64033, 34823, 35061, 35346, 35383, 35449, 35495, 35518, 35551, 64034, 35574, 35667, 35711, 36080, 36084, 36114, 36214, 64035, 36559, 64036, 64037, 36967, 37086, 64038, 37141, 37159, 37338, 37335, 37342, 37357, 37358, 37348, 37349, 37382, 37392, 37386, 37434, 37440, 37436, 37454, 37465, 37457, 37433, 37479, 37543, 37495, 37496, 37607, 37591, 37593, 37584, 64039, 37589, 37600, 37587, 37669, 37665, 37627, 64040, 37662, 37631, 37661, 37634, 37744, 37719, 37796, 37830, 37854, 37880, 37937, 37957, 37960, 38290, 63964, 64041, 38557, 38575, 38707, 38715, 38723, 38733, 38735, 38737, 38741, 38999, 39013, 64042, 64043, 39207, 64044, 39326, 39502, 39641, 39644, 39797, 39794, 39823, 39857, 39867, 39936, 40304, 40299, 64045, 40473, 40657, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null],
  "jis0212":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,728,711,184,729,733,175,731,730,65374,900,901,null,null,null,null,null,null,null,null,161,166,191,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,186,170,169,174,8482,164,8470,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,902,904,905,906,938,null,908,null,910,939,null,911,null,null,null,null,940,941,942,943,970,912,972,962,973,971,944,974,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1038,1039,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1118,1119,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,198,272,null,294,null,306,null,321,319,null,330,216,338,null,358,222,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,230,273,240,295,305,307,312,322,320,329,331,248,339,223,359,254,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,193,192,196,194,258,461,256,260,197,195,262,264,268,199,266,270,201,200,203,202,282,278,274,280,null,284,286,290,288,292,205,204,207,206,463,304,298,302,296,308,310,313,317,315,323,327,325,209,211,210,214,212,465,336,332,213,340,344,342,346,348,352,350,356,354,218,217,220,219,364,467,368,362,370,366,360,471,475,473,469,372,221,376,374,377,381,379,null,null,null,null,null,null,null,225,224,228,226,259,462,257,261,229,227,263,265,269,231,267,271,233,232,235,234,283,279,275,281,501,285,287,null,289,293,237,236,239,238,464,null,299,303,297,309,311,314,318,316,324,328,326,241,243,242,246,244,466,337,333,245,341,345,343,347,349,353,351,357,355,250,249,252,251,365,468,369,363,371,367,361,472,476,474,470,373,253,255,375,378,382,380,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,19970,19972,19973,19980,19986,19999,20003,20004,20008,20011,20014,20015,20016,20021,20032,20033,20036,20039,20049,20058,20060,20067,20072,20073,20084,20085,20089,20095,20109,20118,20119,20125,20143,20153,20163,20176,20186,20187,20192,20193,20194,20200,20207,20209,20211,20213,20221,20222,20223,20224,20226,20227,20232,20235,20236,20242,20245,20246,20247,20249,20270,20273,20320,20275,20277,20279,20281,20283,20286,20288,20290,20296,20297,20299,20300,20306,20308,20310,20312,20319,20323,20330,20332,20334,20337,20343,20344,20345,20346,20349,20350,20353,20354,20356,20357,20361,20362,20364,20366,20368,20370,20371,20372,20375,20377,20378,20382,20383,20402,20407,20409,20411,20412,20413,20414,20416,20417,20421,20422,20424,20425,20427,20428,20429,20431,20434,20444,20448,20450,20464,20466,20476,20477,20479,20480,20481,20484,20487,20490,20492,20494,20496,20499,20503,20504,20507,20508,20509,20510,20514,20519,20526,20528,20530,20531,20533,20544,20545,20546,20549,20550,20554,20556,20558,20561,20562,20563,20567,20569,20575,20576,20578,20579,20582,20583,20586,20589,20592,20593,20539,20609,20611,20612,20614,20618,20622,20623,20624,20626,20627,20628,20630,20635,20636,20638,20639,20640,20641,20642,20650,20655,20656,20665,20666,20669,20672,20675,20676,20679,20684,20686,20688,20691,20692,20696,20700,20701,20703,20706,20708,20710,20712,20713,20719,20721,20726,20730,20734,20739,20742,20743,20744,20747,20748,20749,20750,20722,20752,20759,20761,20763,20764,20765,20766,20771,20775,20776,20780,20781,20783,20785,20787,20788,20789,20792,20793,20802,20810,20815,20819,20821,20823,20824,20831,20836,20838,20862,20867,20868,20875,20878,20888,20893,20897,20899,20909,20920,20922,20924,20926,20927,20930,20936,20943,20945,20946,20947,20949,20952,20958,20962,20965,20974,20978,20979,20980,20983,20993,20994,20997,21010,21011,21013,21014,21016,21026,21032,21041,21042,21045,21052,21061,21065,21077,21079,21080,21082,21084,21087,21088,21089,21094,21102,21111,21112,21113,21120,21122,21125,21130,21132,21139,21141,21142,21143,21144,21146,21148,21156,21157,21158,21159,21167,21168,21174,21175,21176,21178,21179,21181,21184,21188,21190,21192,21196,21199,21201,21204,21206,21211,21212,21217,21221,21224,21225,21226,21228,21232,21233,21236,21238,21239,21248,21251,21258,21259,21260,21265,21267,21272,21275,21276,21278,21279,21285,21287,21288,21289,21291,21292,21293,21296,21298,21301,21308,21309,21310,21314,21324,21323,21337,21339,21345,21347,21349,21356,21357,21362,21369,21374,21379,21383,21384,21390,21395,21396,21401,21405,21409,21412,21418,21419,21423,21426,21428,21429,21431,21432,21434,21437,21440,21445,21455,21458,21459,21461,21466,21469,21470,21472,21478,21479,21493,21506,21523,21530,21537,21543,21544,21546,21551,21553,21556,21557,21571,21572,21575,21581,21583,21598,21602,21604,21606,21607,21609,21611,21613,21614,21620,21631,21633,21635,21637,21640,21641,21645,21649,21653,21654,21660,21663,21665,21670,21671,21673,21674,21677,21678,21681,21687,21689,21690,21691,21695,21702,21706,21709,21710,21728,21738,21740,21743,21750,21756,21758,21759,21760,21761,21765,21768,21769,21772,21773,21774,21781,21802,21803,21810,21813,21814,21819,21820,21821,21825,21831,21833,21834,21837,21840,21841,21848,21850,21851,21854,21856,21857,21860,21862,21887,21889,21890,21894,21896,21902,21903,21905,21906,21907,21908,21911,21923,21924,21933,21938,21951,21953,21955,21958,21961,21963,21964,21966,21969,21970,21971,21975,21976,21979,21982,21986,21993,22006,22015,22021,22024,22026,22029,22030,22031,22032,22033,22034,22041,22060,22064,22067,22069,22071,22073,22075,22076,22077,22079,22080,22081,22083,22084,22086,22089,22091,22093,22095,22100,22110,22112,22113,22114,22115,22118,22121,22125,22127,22129,22130,22133,22148,22149,22152,22155,22156,22165,22169,22170,22173,22174,22175,22182,22183,22184,22185,22187,22188,22189,22193,22195,22199,22206,22213,22217,22218,22219,22223,22224,22220,22221,22233,22236,22237,22239,22241,22244,22245,22246,22247,22248,22257,22251,22253,22262,22263,22273,22274,22279,22282,22284,22289,22293,22298,22299,22301,22304,22306,22307,22308,22309,22313,22314,22316,22318,22319,22323,22324,22333,22334,22335,22341,22342,22348,22349,22354,22370,22373,22375,22376,22379,22381,22382,22383,22384,22385,22387,22388,22389,22391,22393,22394,22395,22396,22398,22401,22403,22412,22420,22423,22425,22426,22428,22429,22430,22431,22433,22421,22439,22440,22441,22444,22456,22461,22471,22472,22476,22479,22485,22493,22494,22500,22502,22503,22505,22509,22512,22517,22518,22520,22525,22526,22527,22531,22532,22536,22537,22497,22540,22541,22555,22558,22559,22560,22566,22567,22573,22578,22585,22591,22601,22604,22605,22607,22608,22613,22623,22625,22628,22631,22632,22648,22652,22655,22656,22657,22663,22664,22665,22666,22668,22669,22671,22672,22676,22678,22685,22688,22689,22690,22694,22697,22705,22706,22724,22716,22722,22728,22733,22734,22736,22738,22740,22742,22746,22749,22753,22754,22761,22771,22789,22790,22795,22796,22802,22803,22804,34369,22813,22817,22819,22820,22824,22831,22832,22835,22837,22838,22847,22851,22854,22866,22867,22873,22875,22877,22878,22879,22881,22883,22891,22893,22895,22898,22901,22902,22905,22907,22908,22923,22924,22926,22930,22933,22935,22943,22948,22951,22957,22958,22959,22960,22963,22967,22970,22972,22977,22979,22980,22984,22986,22989,22994,23005,23006,23007,23011,23012,23015,23022,23023,23025,23026,23028,23031,23040,23044,23052,23053,23054,23058,23059,23070,23075,23076,23079,23080,23082,23085,23088,23108,23109,23111,23112,23116,23120,23125,23134,23139,23141,23143,23149,23159,23162,23163,23166,23179,23184,23187,23190,23193,23196,23198,23199,23200,23202,23207,23212,23217,23218,23219,23221,23224,23226,23227,23231,23236,23238,23240,23247,23258,23260,23264,23269,23274,23278,23285,23286,23293,23296,23297,23304,23319,23348,23321,23323,23325,23329,23333,23341,23352,23361,23371,23372,23378,23382,23390,23400,23406,23407,23420,23421,23422,23423,23425,23428,23430,23434,23438,23440,23441,23443,23444,23446,23464,23465,23468,23469,23471,23473,23474,23479,23482,23484,23488,23489,23501,23503,23510,23511,23512,23513,23514,23520,23535,23537,23540,23549,23564,23575,23582,23583,23587,23590,23593,23595,23596,23598,23600,23602,23605,23606,23641,23642,23644,23650,23651,23655,23656,23657,23661,23664,23668,23669,23674,23675,23676,23677,23687,23688,23690,23695,23698,23709,23711,23712,23714,23715,23718,23722,23730,23732,23733,23738,23753,23755,23762,23773,23767,23790,23793,23794,23796,23809,23814,23821,23826,23851,23843,23844,23846,23847,23857,23860,23865,23869,23871,23874,23875,23878,23880,23893,23889,23897,23882,23903,23904,23905,23906,23908,23914,23917,23920,23929,23930,23934,23935,23937,23939,23944,23946,23954,23955,23956,23957,23961,23963,23967,23968,23975,23979,23984,23988,23992,23993,24003,24007,24011,24016,24014,24024,24025,24032,24036,24041,24056,24057,24064,24071,24077,24082,24084,24085,24088,24095,24096,24110,24104,24114,24117,24126,24139,24144,24137,24145,24150,24152,24155,24156,24158,24168,24170,24171,24172,24173,24174,24176,24192,24203,24206,24226,24228,24229,24232,24234,24236,24241,24243,24253,24254,24255,24262,24268,24267,24270,24273,24274,24276,24277,24284,24286,24293,24299,24322,24326,24327,24328,24334,24345,24348,24349,24353,24354,24355,24356,24360,24363,24364,24366,24368,24372,24374,24379,24381,24383,24384,24388,24389,24391,24397,24400,24404,24408,24411,24416,24419,24420,24423,24431,24434,24436,24437,24440,24442,24445,24446,24457,24461,24463,24470,24476,24477,24482,24487,24491,24484,24492,24495,24496,24497,24504,24516,24519,24520,24521,24523,24528,24529,24530,24531,24532,24542,24545,24546,24552,24553,24554,24556,24557,24558,24559,24562,24563,24566,24570,24572,24583,24586,24589,24595,24596,24599,24600,24602,24607,24612,24621,24627,24629,24640,24647,24648,24649,24652,24657,24660,24662,24663,24669,24673,24679,24689,24702,24703,24706,24710,24712,24714,24718,24721,24723,24725,24728,24733,24734,24738,24740,24741,24744,24752,24753,24759,24763,24766,24770,24772,24776,24777,24778,24779,24782,24783,24788,24789,24793,24795,24797,24798,24802,24805,24818,24821,24824,24828,24829,24834,24839,24842,24844,24848,24849,24850,24851,24852,24854,24855,24857,24860,24862,24866,24874,24875,24880,24881,24885,24886,24887,24889,24897,24901,24902,24905,24926,24928,24940,24946,24952,24955,24956,24959,24960,24961,24963,24964,24971,24973,24978,24979,24983,24984,24988,24989,24991,24992,24997,25000,25002,25005,25016,25017,25020,25024,25025,25026,25038,25039,25045,25052,25053,25054,25055,25057,25058,25063,25065,25061,25068,25069,25071,25089,25091,25092,25095,25107,25109,25116,25120,25122,25123,25127,25129,25131,25145,25149,25154,25155,25156,25158,25164,25168,25169,25170,25172,25174,25178,25180,25188,25197,25199,25203,25210,25213,25229,25230,25231,25232,25254,25256,25267,25270,25271,25274,25278,25279,25284,25294,25301,25302,25306,25322,25330,25332,25340,25341,25347,25348,25354,25355,25357,25360,25363,25366,25368,25385,25386,25389,25397,25398,25401,25404,25409,25410,25411,25412,25414,25418,25419,25422,25426,25427,25428,25432,25435,25445,25446,25452,25453,25457,25460,25461,25464,25468,25469,25471,25474,25476,25479,25482,25488,25492,25493,25497,25498,25502,25508,25510,25517,25518,25519,25533,25537,25541,25544,25550,25553,25555,25556,25557,25564,25568,25573,25578,25580,25586,25587,25589,25592,25593,25609,25610,25616,25618,25620,25624,25630,25632,25634,25636,25637,25641,25642,25647,25648,25653,25661,25663,25675,25679,25681,25682,25683,25684,25690,25691,25692,25693,25695,25696,25697,25699,25709,25715,25716,25723,25725,25733,25735,25743,25744,25745,25752,25753,25755,25757,25759,25761,25763,25766,25768,25772,25779,25789,25790,25791,25796,25801,25802,25803,25804,25806,25808,25809,25813,25815,25828,25829,25833,25834,25837,25840,25845,25847,25851,25855,25857,25860,25864,25865,25866,25871,25875,25876,25878,25881,25883,25886,25887,25890,25894,25897,25902,25905,25914,25916,25917,25923,25927,25929,25936,25938,25940,25951,25952,25959,25963,25978,25981,25985,25989,25994,26002,26005,26008,26013,26016,26019,26022,26030,26034,26035,26036,26047,26050,26056,26057,26062,26064,26068,26070,26072,26079,26096,26098,26100,26101,26105,26110,26111,26112,26116,26120,26121,26125,26129,26130,26133,26134,26141,26142,26145,26146,26147,26148,26150,26153,26154,26155,26156,26158,26160,26161,26163,26169,26167,26176,26181,26182,26186,26188,26193,26190,26199,26200,26201,26203,26204,26208,26209,26363,26218,26219,26220,26238,26227,26229,26239,26231,26232,26233,26235,26240,26236,26251,26252,26253,26256,26258,26265,26266,26267,26268,26271,26272,26276,26285,26289,26290,26293,26299,26303,26304,26306,26307,26312,26316,26318,26319,26324,26331,26335,26344,26347,26348,26350,26362,26373,26375,26382,26387,26393,26396,26400,26402,26419,26430,26437,26439,26440,26444,26452,26453,26461,26470,26476,26478,26484,26486,26491,26497,26500,26510,26511,26513,26515,26518,26520,26521,26523,26544,26545,26546,26549,26555,26556,26557,26617,26560,26562,26563,26565,26568,26569,26578,26583,26585,26588,26593,26598,26608,26610,26614,26615,26706,26644,26649,26653,26655,26664,26663,26668,26669,26671,26672,26673,26675,26683,26687,26692,26693,26698,26700,26709,26711,26712,26715,26731,26734,26735,26736,26737,26738,26741,26745,26746,26747,26748,26754,26756,26758,26760,26774,26776,26778,26780,26785,26787,26789,26793,26794,26798,26802,26811,26821,26824,26828,26831,26832,26833,26835,26838,26841,26844,26845,26853,26856,26858,26859,26860,26861,26864,26865,26869,26870,26875,26876,26877,26886,26889,26890,26896,26897,26899,26902,26903,26929,26931,26933,26936,26939,26946,26949,26953,26958,26967,26971,26979,26980,26981,26982,26984,26985,26988,26992,26993,26994,27002,27003,27007,27008,27021,27026,27030,27032,27041,27045,27046,27048,27051,27053,27055,27063,27064,27066,27068,27077,27080,27089,27094,27095,27106,27109,27118,27119,27121,27123,27125,27134,27136,27137,27139,27151,27153,27157,27162,27165,27168,27172,27176,27184,27186,27188,27191,27195,27198,27199,27205,27206,27209,27210,27214,27216,27217,27218,27221,27222,27227,27236,27239,27242,27249,27251,27262,27265,27267,27270,27271,27273,27275,27281,27291,27293,27294,27295,27301,27307,27311,27312,27313,27316,27325,27326,27327,27334,27337,27336,27340,27344,27348,27349,27350,27356,27357,27364,27367,27372,27376,27377,27378,27388,27389,27394,27395,27398,27399,27401,27407,27408,27409,27415,27419,27422,27428,27432,27435,27436,27439,27445,27446,27451,27455,27462,27466,27469,27474,27478,27480,27485,27488,27495,27499,27502,27504,27509,27517,27518,27522,27525,27543,27547,27551,27552,27554,27555,27560,27561,27564,27565,27566,27568,27576,27577,27581,27582,27587,27588,27593,27596,27606,27610,27617,27619,27622,27623,27630,27633,27639,27641,27647,27650,27652,27653,27657,27661,27662,27664,27666,27673,27679,27686,27687,27688,27692,27694,27699,27701,27702,27706,27707,27711,27722,27723,27725,27727,27730,27732,27737,27739,27740,27755,27757,27759,27764,27766,27768,27769,27771,27781,27782,27783,27785,27796,27797,27799,27800,27804,27807,27824,27826,27828,27842,27846,27853,27855,27856,27857,27858,27860,27862,27866,27868,27872,27879,27881,27883,27884,27886,27890,27892,27908,27911,27914,27918,27919,27921,27923,27930,27942,27943,27944,27751,27950,27951,27953,27961,27964,27967,27991,27998,27999,28001,28005,28007,28015,28016,28028,28034,28039,28049,28050,28052,28054,28055,28056,28074,28076,28084,28087,28089,28093,28095,28100,28104,28106,28110,28111,28118,28123,28125,28127,28128,28130,28133,28137,28143,28144,28148,28150,28156,28160,28164,28190,28194,28199,28210,28214,28217,28219,28220,28228,28229,28232,28233,28235,28239,28241,28242,28243,28244,28247,28252,28253,28254,28258,28259,28264,28275,28283,28285,28301,28307,28313,28320,28327,28333,28334,28337,28339,28347,28351,28352,28353,28355,28359,28360,28362,28365,28366,28367,28395,28397,28398,28409,28411,28413,28420,28424,28426,28428,28429,28438,28440,28442,28443,28454,28457,28458,28463,28464,28467,28470,28475,28476,28461,28495,28497,28498,28499,28503,28505,28506,28509,28510,28513,28514,28520,28524,28541,28542,28547,28551,28552,28555,28556,28557,28560,28562,28563,28564,28566,28570,28575,28576,28581,28582,28583,28584,28590,28591,28592,28597,28598,28604,28613,28615,28616,28618,28634,28638,28648,28649,28656,28661,28665,28668,28669,28672,28677,28678,28679,28685,28695,28704,28707,28719,28724,28727,28729,28732,28739,28740,28744,28745,28746,28747,28756,28757,28765,28766,28750,28772,28773,28780,28782,28789,28790,28798,28801,28805,28806,28820,28821,28822,28823,28824,28827,28836,28843,28848,28849,28852,28855,28874,28881,28883,28884,28885,28886,28888,28892,28900,28922,28931,28932,28933,28934,28935,28939,28940,28943,28958,28960,28971,28973,28975,28976,28977,28984,28993,28997,28998,28999,29002,29003,29008,29010,29015,29018,29020,29022,29024,29032,29049,29056,29061,29063,29068,29074,29082,29083,29088,29090,29103,29104,29106,29107,29114,29119,29120,29121,29124,29131,29132,29139,29142,29145,29146,29148,29176,29182,29184,29191,29192,29193,29203,29207,29210,29213,29215,29220,29227,29231,29236,29240,29241,29249,29250,29251,29253,29262,29263,29264,29267,29269,29270,29274,29276,29278,29280,29283,29288,29291,29294,29295,29297,29303,29304,29307,29308,29311,29316,29321,29325,29326,29331,29339,29352,29357,29358,29361,29364,29374,29377,29383,29385,29388,29397,29398,29400,29407,29413,29427,29428,29434,29435,29438,29442,29444,29445,29447,29451,29453,29458,29459,29464,29465,29470,29474,29476,29479,29480,29484,29489,29490,29493,29498,29499,29501,29507,29517,29520,29522,29526,29528,29533,29534,29535,29536,29542,29543,29545,29547,29548,29550,29551,29553,29559,29561,29564,29568,29569,29571,29573,29574,29582,29584,29587,29589,29591,29592,29596,29598,29599,29600,29602,29605,29606,29610,29611,29613,29621,29623,29625,29628,29629,29631,29637,29638,29641,29643,29644,29647,29650,29651,29654,29657,29661,29665,29667,29670,29671,29673,29684,29685,29687,29689,29690,29691,29693,29695,29696,29697,29700,29703,29706,29713,29722,29723,29732,29734,29736,29737,29738,29739,29740,29741,29742,29743,29744,29745,29753,29760,29763,29764,29766,29767,29771,29773,29777,29778,29783,29789,29794,29798,29799,29800,29803,29805,29806,29809,29810,29824,29825,29829,29830,29831,29833,29839,29840,29841,29842,29848,29849,29850,29852,29855,29856,29857,29859,29862,29864,29865,29866,29867,29870,29871,29873,29874,29877,29881,29883,29887,29896,29897,29900,29904,29907,29912,29914,29915,29918,29919,29924,29928,29930,29931,29935,29940,29946,29947,29948,29951,29958,29970,29974,29975,29984,29985,29988,29991,29993,29994,29999,30006,30009,30013,30014,30015,30016,30019,30023,30024,30030,30032,30034,30039,30046,30047,30049,30063,30065,30073,30074,30075,30076,30077,30078,30081,30085,30096,30098,30099,30101,30105,30108,30114,30116,30132,30138,30143,30144,30145,30148,30150,30156,30158,30159,30167,30172,30175,30176,30177,30180,30183,30188,30190,30191,30193,30201,30208,30210,30211,30212,30215,30216,30218,30220,30223,30226,30227,30229,30230,30233,30235,30236,30237,30238,30243,30245,30246,30249,30253,30258,30259,30261,30264,30265,30266,30268,30282,30272,30273,30275,30276,30277,30281,30283,30293,30297,30303,30308,30309,30317,30318,30319,30321,30324,30337,30341,30348,30349,30357,30363,30364,30365,30367,30368,30370,30371,30372,30373,30374,30375,30376,30378,30381,30397,30401,30405,30409,30411,30412,30414,30420,30425,30432,30438,30440,30444,30448,30449,30454,30457,30460,30464,30470,30474,30478,30482,30484,30485,30487,30489,30490,30492,30498,30504,30509,30510,30511,30516,30517,30518,30521,30525,30526,30530,30533,30534,30538,30541,30542,30543,30546,30550,30551,30556,30558,30559,30560,30562,30564,30567,30570,30572,30576,30578,30579,30580,30586,30589,30592,30596,30604,30605,30612,30613,30614,30618,30623,30626,30631,30634,30638,30639,30641,30645,30654,30659,30665,30673,30674,30677,30681,30686,30687,30688,30692,30694,30698,30700,30704,30705,30708,30712,30715,30725,30726,30729,30733,30734,30737,30749,30753,30754,30755,30765,30766,30768,30773,30775,30787,30788,30791,30792,30796,30798,30802,30812,30814,30816,30817,30819,30820,30824,30826,30830,30842,30846,30858,30863,30868,30872,30881,30877,30878,30879,30884,30888,30892,30893,30896,30897,30898,30899,30907,30909,30911,30919,30920,30921,30924,30926,30930,30931,30933,30934,30948,30939,30943,30944,30945,30950,30954,30962,30963,30976,30966,30967,30970,30971,30975,30982,30988,30992,31002,31004,31006,31007,31008,31013,31015,31017,31021,31025,31028,31029,31035,31037,31039,31044,31045,31046,31050,31051,31055,31057,31060,31064,31067,31068,31079,31081,31083,31090,31097,31099,31100,31102,31115,31116,31121,31123,31124,31125,31126,31128,31131,31132,31137,31144,31145,31147,31151,31153,31156,31160,31163,31170,31172,31175,31176,31178,31183,31188,31190,31194,31197,31198,31200,31202,31205,31210,31211,31213,31217,31224,31228,31234,31235,31239,31241,31242,31244,31249,31253,31259,31262,31265,31271,31275,31277,31279,31280,31284,31285,31288,31289,31290,31300,31301,31303,31304,31308,31317,31318,31321,31324,31325,31327,31328,31333,31335,31338,31341,31349,31352,31358,31360,31362,31365,31366,31370,31371,31376,31377,31380,31390,31392,31395,31404,31411,31413,31417,31419,31420,31430,31433,31436,31438,31441,31451,31464,31465,31467,31468,31473,31476,31483,31485,31486,31495,31508,31519,31523,31527,31529,31530,31531,31533,31534,31535,31536,31537,31540,31549,31551,31552,31553,31559,31566,31573,31584,31588,31590,31593,31594,31597,31599,31602,31603,31607,31620,31625,31630,31632,31633,31638,31643,31646,31648,31653,31660,31663,31664,31666,31669,31670,31674,31675,31676,31677,31682,31685,31688,31690,31700,31702,31703,31705,31706,31707,31720,31722,31730,31732,31733,31736,31737,31738,31740,31742,31745,31746,31747,31748,31750,31753,31755,31756,31758,31759,31769,31771,31776,31781,31782,31784,31788,31793,31795,31796,31798,31801,31802,31814,31818,31829,31825,31826,31827,31833,31834,31835,31836,31837,31838,31841,31843,31847,31849,31853,31854,31856,31858,31865,31868,31869,31878,31879,31887,31892,31902,31904,31910,31920,31926,31927,31930,31931,31932,31935,31940,31943,31944,31945,31949,31951,31955,31956,31957,31959,31961,31962,31965,31974,31977,31979,31989,32003,32007,32008,32009,32015,32017,32018,32019,32022,32029,32030,32035,32038,32042,32045,32049,32060,32061,32062,32064,32065,32071,32072,32077,32081,32083,32087,32089,32090,32092,32093,32101,32103,32106,32112,32120,32122,32123,32127,32129,32130,32131,32133,32134,32136,32139,32140,32141,32145,32150,32151,32157,32158,32166,32167,32170,32179,32182,32183,32185,32194,32195,32196,32197,32198,32204,32205,32206,32215,32217,32256,32226,32229,32230,32234,32235,32237,32241,32245,32246,32249,32250,32264,32272,32273,32277,32279,32284,32285,32288,32295,32296,32300,32301,32303,32307,32310,32319,32324,32325,32327,32334,32336,32338,32344,32351,32353,32354,32357,32363,32366,32367,32371,32376,32382,32385,32390,32391,32394,32397,32401,32405,32408,32410,32413,32414,32572,32571,32573,32574,32575,32579,32580,32583,32591,32594,32595,32603,32604,32605,32609,32611,32612,32613,32614,32621,32625,32637,32638,32639,32640,32651,32653,32655,32656,32657,32662,32663,32668,32673,32674,32678,32682,32685,32692,32700,32703,32704,32707,32712,32718,32719,32731,32735,32739,32741,32744,32748,32750,32751,32754,32762,32765,32766,32767,32775,32776,32778,32781,32782,32783,32785,32787,32788,32790,32797,32798,32799,32800,32804,32806,32812,32814,32816,32820,32821,32823,32825,32826,32828,32830,32832,32836,32864,32868,32870,32877,32881,32885,32897,32904,32910,32924,32926,32934,32935,32939,32952,32953,32968,32973,32975,32978,32980,32981,32983,32984,32992,33005,33006,33008,33010,33011,33014,33017,33018,33022,33027,33035,33046,33047,33048,33052,33054,33056,33060,33063,33068,33072,33077,33082,33084,33093,33095,33098,33100,33106,33111,33120,33121,33127,33128,33129,33133,33135,33143,33153,33168,33156,33157,33158,33163,33166,33174,33176,33179,33182,33186,33198,33202,33204,33211,33227,33219,33221,33226,33230,33231,33237,33239,33243,33245,33246,33249,33252,33259,33260,33264,33265,33266,33269,33270,33272,33273,33277,33279,33280,33283,33295,33299,33300,33305,33306,33309,33313,33314,33320,33330,33332,33338,33347,33348,33349,33350,33355,33358,33359,33361,33366,33372,33376,33379,33383,33389,33396,33403,33405,33407,33408,33409,33411,33412,33415,33417,33418,33422,33425,33428,33430,33432,33434,33435,33440,33441,33443,33444,33447,33448,33449,33450,33454,33456,33458,33460,33463,33466,33468,33470,33471,33478,33488,33493,33498,33504,33506,33508,33512,33514,33517,33519,33526,33527,33533,33534,33536,33537,33543,33544,33546,33547,33620,33563,33565,33566,33567,33569,33570,33580,33581,33582,33584,33587,33591,33594,33596,33597,33602,33603,33604,33607,33613,33614,33617,33621,33622,33623,33648,33656,33661,33663,33664,33666,33668,33670,33677,33682,33684,33685,33688,33689,33691,33692,33693,33702,33703,33705,33708,33726,33727,33728,33735,33737,33743,33744,33745,33748,33757,33619,33768,33770,33782,33784,33785,33788,33793,33798,33802,33807,33809,33813,33817,33709,33839,33849,33861,33863,33864,33866,33869,33871,33873,33874,33878,33880,33881,33882,33884,33888,33892,33893,33895,33898,33904,33907,33908,33910,33912,33916,33917,33921,33925,33938,33939,33941,33950,33958,33960,33961,33962,33967,33969,33972,33978,33981,33982,33984,33986,33991,33992,33996,33999,34003,34012,34023,34026,34031,34032,34033,34034,34039,34098,34042,34043,34045,34050,34051,34055,34060,34062,34064,34076,34078,34082,34083,34084,34085,34087,34090,34091,34095,34099,34100,34102,34111,34118,34127,34128,34129,34130,34131,34134,34137,34140,34141,34142,34143,34144,34145,34146,34148,34155,34159,34169,34170,34171,34173,34175,34177,34181,34182,34185,34187,34188,34191,34195,34200,34205,34207,34208,34210,34213,34215,34228,34230,34231,34232,34236,34237,34238,34239,34242,34247,34250,34251,34254,34221,34264,34266,34271,34272,34278,34280,34285,34291,34294,34300,34303,34304,34308,34309,34317,34318,34320,34321,34322,34328,34329,34331,34334,34337,34343,34345,34358,34360,34362,34364,34365,34368,34370,34374,34386,34387,34390,34391,34392,34393,34397,34400,34401,34402,34403,34404,34409,34412,34415,34421,34422,34423,34426,34445,34449,34454,34456,34458,34460,34465,34470,34471,34472,34477,34481,34483,34484,34485,34487,34488,34489,34495,34496,34497,34499,34501,34513,34514,34517,34519,34522,34524,34528,34531,34533,34535,34440,34554,34556,34557,34564,34565,34567,34571,34574,34575,34576,34579,34580,34585,34590,34591,34593,34595,34600,34606,34607,34609,34610,34617,34618,34620,34621,34622,34624,34627,34629,34637,34648,34653,34657,34660,34661,34671,34673,34674,34683,34691,34692,34693,34694,34695,34696,34697,34699,34700,34704,34707,34709,34711,34712,34713,34718,34720,34723,34727,34732,34733,34734,34737,34741,34750,34751,34753,34760,34761,34762,34766,34773,34774,34777,34778,34780,34783,34786,34787,34788,34794,34795,34797,34801,34803,34808,34810,34815,34817,34819,34822,34825,34826,34827,34832,34841,34834,34835,34836,34840,34842,34843,34844,34846,34847,34856,34861,34862,34864,34866,34869,34874,34876,34881,34883,34885,34888,34889,34890,34891,34894,34897,34901,34902,34904,34906,34908,34911,34912,34916,34921,34929,34937,34939,34944,34968,34970,34971,34972,34975,34976,34984,34986,35002,35005,35006,35008,35018,35019,35020,35021,35022,35025,35026,35027,35035,35038,35047,35055,35056,35057,35061,35063,35073,35078,35085,35086,35087,35093,35094,35096,35097,35098,35100,35104,35110,35111,35112,35120,35121,35122,35125,35129,35130,35134,35136,35138,35141,35142,35145,35151,35154,35159,35162,35163,35164,35169,35170,35171,35179,35182,35184,35187,35189,35194,35195,35196,35197,35209,35213,35216,35220,35221,35227,35228,35231,35232,35237,35248,35252,35253,35254,35255,35260,35284,35285,35286,35287,35288,35301,35305,35307,35309,35313,35315,35318,35321,35325,35327,35332,35333,35335,35343,35345,35346,35348,35349,35358,35360,35362,35364,35366,35371,35372,35375,35381,35383,35389,35390,35392,35395,35397,35399,35401,35405,35406,35411,35414,35415,35416,35420,35421,35425,35429,35431,35445,35446,35447,35449,35450,35451,35454,35455,35456,35459,35462,35467,35471,35472,35474,35478,35479,35481,35487,35495,35497,35502,35503,35507,35510,35511,35515,35518,35523,35526,35528,35529,35530,35537,35539,35540,35541,35543,35549,35551,35564,35568,35572,35573,35574,35580,35583,35589,35590,35595,35601,35612,35614,35615,35594,35629,35632,35639,35644,35650,35651,35652,35653,35654,35656,35666,35667,35668,35673,35661,35678,35683,35693,35702,35704,35705,35708,35710,35713,35716,35717,35723,35725,35727,35732,35733,35740,35742,35743,35896,35897,35901,35902,35909,35911,35913,35915,35919,35921,35923,35924,35927,35928,35931,35933,35929,35939,35940,35942,35944,35945,35949,35955,35957,35958,35963,35966,35974,35975,35979,35984,35986,35987,35993,35995,35996,36004,36025,36026,36037,36038,36041,36043,36047,36054,36053,36057,36061,36065,36072,36076,36079,36080,36082,36085,36087,36088,36094,36095,36097,36099,36105,36114,36119,36123,36197,36201,36204,36206,36223,36226,36228,36232,36237,36240,36241,36245,36254,36255,36256,36262,36267,36268,36271,36274,36277,36279,36281,36283,36288,36293,36294,36295,36296,36298,36302,36305,36308,36309,36311,36313,36324,36325,36327,36332,36336,36284,36337,36338,36340,36349,36353,36356,36357,36358,36363,36369,36372,36374,36384,36385,36386,36387,36390,36391,36401,36403,36406,36407,36408,36409,36413,36416,36417,36427,36429,36430,36431,36436,36443,36444,36445,36446,36449,36450,36457,36460,36461,36463,36464,36465,36473,36474,36475,36482,36483,36489,36496,36498,36501,36506,36507,36509,36510,36514,36519,36521,36525,36526,36531,36533,36538,36539,36544,36545,36547,36548,36551,36559,36561,36564,36572,36584,36590,36592,36593,36599,36601,36602,36589,36608,36610,36615,36616,36623,36624,36630,36631,36632,36638,36640,36641,36643,36645,36647,36648,36652,36653,36654,36660,36661,36662,36663,36666,36672,36673,36675,36679,36687,36689,36690,36691,36692,36693,36696,36701,36702,36709,36765,36768,36769,36772,36773,36774,36789,36790,36792,36798,36800,36801,36806,36810,36811,36813,36816,36818,36819,36821,36832,36835,36836,36840,36846,36849,36853,36854,36859,36862,36866,36868,36872,36876,36888,36891,36904,36905,36911,36906,36908,36909,36915,36916,36919,36927,36931,36932,36940,36955,36957,36962,36966,36967,36972,36976,36980,36985,36997,37000,37003,37004,37006,37008,37013,37015,37016,37017,37019,37024,37025,37026,37029,37040,37042,37043,37044,37046,37053,37068,37054,37059,37060,37061,37063,37064,37077,37079,37080,37081,37084,37085,37087,37093,37074,37110,37099,37103,37104,37108,37118,37119,37120,37124,37125,37126,37128,37133,37136,37140,37142,37143,37144,37146,37148,37150,37152,37157,37154,37155,37159,37161,37166,37167,37169,37172,37174,37175,37177,37178,37180,37181,37187,37191,37192,37199,37203,37207,37209,37210,37211,37217,37220,37223,37229,37236,37241,37242,37243,37249,37251,37253,37254,37258,37262,37265,37267,37268,37269,37272,37278,37281,37286,37288,37292,37293,37294,37296,37297,37298,37299,37302,37307,37308,37309,37311,37314,37315,37317,37331,37332,37335,37337,37338,37342,37348,37349,37353,37354,37356,37357,37358,37359,37360,37361,37367,37369,37371,37373,37376,37377,37380,37381,37382,37383,37385,37386,37388,37392,37394,37395,37398,37400,37404,37405,37411,37412,37413,37414,37416,37422,37423,37424,37427,37429,37430,37432,37433,37434,37436,37438,37440,37442,37443,37446,37447,37450,37453,37454,37455,37457,37464,37465,37468,37469,37472,37473,37477,37479,37480,37481,37486,37487,37488,37493,37494,37495,37496,37497,37499,37500,37501,37503,37512,37513,37514,37517,37518,37522,37527,37529,37535,37536,37540,37541,37543,37544,37547,37551,37554,37558,37560,37562,37563,37564,37565,37567,37568,37569,37570,37571,37573,37574,37575,37576,37579,37580,37581,37582,37584,37587,37589,37591,37592,37593,37596,37597,37599,37600,37601,37603,37605,37607,37608,37612,37614,37616,37625,37627,37631,37632,37634,37640,37645,37649,37652,37653,37660,37661,37662,37663,37665,37668,37669,37671,37673,37674,37683,37684,37686,37687,37703,37704,37705,37712,37713,37714,37717,37719,37720,37722,37726,37732,37733,37735,37737,37738,37741,37743,37744,37745,37747,37748,37750,37754,37757,37759,37760,37761,37762,37768,37770,37771,37773,37775,37778,37781,37784,37787,37790,37793,37795,37796,37798,37800,37803,37812,37813,37814,37818,37801,37825,37828,37829,37830,37831,37833,37834,37835,37836,37837,37843,37849,37852,37854,37855,37858,37862,37863,37881,37879,37880,37882,37883,37885,37889,37890,37892,37896,37897,37901,37902,37903,37909,37910,37911,37919,37934,37935,37937,37938,37939,37940,37947,37951,37949,37955,37957,37960,37962,37964,37973,37977,37980,37983,37985,37987,37992,37995,37997,37998,37999,38001,38002,38020,38019,38264,38265,38270,38276,38280,38284,38285,38286,38301,38302,38303,38305,38310,38313,38315,38316,38324,38326,38330,38333,38335,38342,38344,38345,38347,38352,38353,38354,38355,38361,38362,38365,38366,38367,38368,38372,38374,38429,38430,38434,38436,38437,38438,38444,38449,38451,38455,38456,38457,38458,38460,38461,38465,38482,38484,38486,38487,38488,38497,38510,38516,38523,38524,38526,38527,38529,38530,38531,38532,38537,38545,38550,38554,38557,38559,38564,38565,38566,38569,38574,38575,38579,38586,38602,38610,23986,38616,38618,38621,38622,38623,38633,38639,38641,38650,38658,38659,38661,38665,38682,38683,38685,38689,38690,38691,38696,38705,38707,38721,38723,38730,38734,38735,38741,38743,38744,38746,38747,38755,38759,38762,38766,38771,38774,38775,38776,38779,38781,38783,38784,38793,38805,38806,38807,38809,38810,38814,38815,38818,38828,38830,38833,38834,38837,38838,38840,38841,38842,38844,38846,38847,38849,38852,38853,38855,38857,38858,38860,38861,38862,38864,38865,38868,38871,38872,38873,38877,38878,38880,38875,38881,38884,38895,38897,38900,38903,38904,38906,38919,38922,38937,38925,38926,38932,38934,38940,38942,38944,38947,38950,38955,38958,38959,38960,38962,38963,38965,38949,38974,38980,38983,38986,38993,38994,38995,38998,38999,39001,39002,39010,39011,39013,39014,39018,39020,39083,39085,39086,39088,39092,39095,39096,39098,39099,39103,39106,39109,39112,39116,39137,39139,39141,39142,39143,39146,39155,39158,39170,39175,39176,39185,39189,39190,39191,39194,39195,39196,39199,39202,39206,39207,39211,39217,39218,39219,39220,39221,39225,39226,39227,39228,39232,39233,39238,39239,39240,39245,39246,39252,39256,39257,39259,39260,39262,39263,39264,39323,39325,39327,39334,39344,39345,39346,39349,39353,39354,39357,39359,39363,39369,39379,39380,39385,39386,39388,39390,39399,39402,39403,39404,39408,39412,39413,39417,39421,39422,39426,39427,39428,39435,39436,39440,39441,39446,39454,39456,39458,39459,39460,39463,39469,39470,39475,39477,39478,39480,39495,39489,39492,39498,39499,39500,39502,39505,39508,39510,39517,39594,39596,39598,39599,39602,39604,39605,39606,39609,39611,39614,39615,39617,39619,39622,39624,39630,39632,39634,39637,39638,39639,39643,39644,39648,39652,39653,39655,39657,39660,39666,39667,39669,39673,39674,39677,39679,39680,39681,39682,39683,39684,39685,39688,39689,39691,39692,39693,39694,39696,39698,39702,39705,39707,39708,39712,39718,39723,39725,39731,39732,39733,39735,39737,39738,39741,39752,39755,39756,39765,39766,39767,39771,39774,39777,39779,39781,39782,39784,39786,39787,39788,39789,39790,39795,39797,39799,39800,39801,39807,39808,39812,39813,39814,39815,39817,39818,39819,39821,39823,39824,39828,39834,39837,39838,39846,39847,39849,39852,39856,39857,39858,39863,39864,39867,39868,39870,39871,39873,39879,39880,39886,39888,39895,39896,39901,39903,39909,39911,39914,39915,39919,39923,39927,39928,39929,39930,39933,39935,39936,39938,39947,39951,39953,39958,39960,39961,39962,39964,39966,39970,39971,39974,39975,39976,39977,39978,39985,39989,39990,39991,39997,40001,40003,40004,40005,40009,40010,40014,40015,40016,40019,40020,40022,40024,40027,40029,40030,40031,40035,40041,40042,40028,40043,40040,40046,40048,40050,40053,40055,40059,40166,40178,40183,40185,40203,40194,40209,40215,40216,40220,40221,40222,40239,40240,40242,40243,40244,40250,40252,40261,40253,40258,40259,40263,40266,40275,40276,40287,40291,40290,40293,40297,40298,40299,40304,40310,40311,40315,40316,40318,40323,40324,40326,40330,40333,40334,40338,40339,40341,40342,40343,40344,40353,40362,40364,40366,40369,40373,40377,40380,40383,40387,40391,40393,40394,40404,40405,40406,40407,40410,40414,40415,40416,40421,40423,40425,40427,40430,40432,40435,40436,40446,40458,40450,40455,40462,40464,40465,40466,40469,40470,40473,40476,40477,40570,40571,40572,40576,40578,40579,40580,40581,40583,40590,40591,40598,40600,40603,40606,40612,40616,40620,40622,40623,40624,40627,40628,40629,40646,40648,40651,40661,40671,40676,40679,40684,40685,40686,40688,40689,40690,40693,40696,40703,40706,40707,40713,40719,40720,40721,40722,40724,40726,40727,40729,40730,40731,40735,40738,40742,40746,40747,40751,40753,40754,40756,40759,40761,40762,40764,40765,40767,40769,40771,40772,40773,40774,40775,40787,40789,40790,40791,40792,40794,40797,40798,40808,40809,40813,40814,40815,40816,40817,40819,40821,40826,40829,40847,40848,40849,40850,40852,40854,40855,40862,40865,40866,40867,40869,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],
  "ibm864":[176,183,8729,8730,9618,9472,9474,9532,9508,9516,9500,9524,9488,9484,9492,9496,946,8734,966,177,189,188,8776,171,187,65271,65272,155,156,65275,65276,159,160,173,65154,163,164,65156,null,null,65166,65167,65173,65177,1548,65181,65185,65189,1632,1633,1634,1635,1636,1637,1638,1639,1640,1641,65233,1563,65201,65205,65209,1567,162,65152,65153,65155,65157,65226,65163,65165,65169,65171,65175,65179,65183,65187,65191,65193,65195,65197,65199,65203,65207,65211,65215,65217,65221,65227,65231,166,172,247,215,65225,1600,65235,65239,65243,65247,65251,65255,65259,65261,65263,65267,65213,65228,65230,65229,65249,65149,1617,65253,65257,65260,65264,65266,65232,65237,65269,65270,65245,65241,65265,9632,null],
  "ibm866":[1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,9617,9618,9619,9474,9508,9569,9570,9558,9557,9571,9553,9559,9565,9564,9563,9488,9492,9524,9516,9500,9472,9532,9566,9567,9562,9556,9577,9574,9568,9552,9580,9575,9576,9572,9573,9561,9560,9554,9555,9579,9578,9496,9484,9608,9604,9612,9616,9600,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1025,1105,1028,1108,1031,1111,1038,1118,176,8729,183,8730,8470,164,9632,160],
  "iso-8859-2":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,260,728,321,164,317,346,167,168,352,350,356,377,173,381,379,176,261,731,322,180,318,347,711,184,353,351,357,378,733,382,380,340,193,194,258,196,313,262,199,268,201,280,203,282,205,206,270,272,323,327,211,212,336,214,215,344,366,218,368,220,221,354,223,341,225,226,259,228,314,263,231,269,233,281,235,283,237,238,271,273,324,328,243,244,337,246,247,345,367,250,369,252,253,355,729],
  "iso-8859-3":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,294,728,163,164,null,292,167,168,304,350,286,308,173,null,379,176,295,178,179,180,181,293,183,184,305,351,287,309,189,null,380,192,193,194,null,196,266,264,199,200,201,202,203,204,205,206,207,null,209,210,211,212,288,214,215,284,217,218,219,220,364,348,223,224,225,226,null,228,267,265,231,232,233,234,235,236,237,238,239,null,241,242,243,244,289,246,247,285,249,250,251,252,365,349,729],
  "iso-8859-4":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,260,312,342,164,296,315,167,168,352,274,290,358,173,381,175,176,261,731,343,180,297,316,711,184,353,275,291,359,330,382,331,256,193,194,195,196,197,198,302,268,201,280,203,278,205,206,298,272,325,332,310,212,213,214,215,216,370,218,219,220,360,362,223,257,225,226,227,228,229,230,303,269,233,281,235,279,237,238,299,273,326,333,311,244,245,246,247,248,371,250,251,252,361,363,729],
  "iso-8859-5":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,173,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,8470,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,167,1118,1119],
  "iso-8859-6":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,null,null,null,164,null,null,null,null,null,null,null,1548,173,null,null,null,null,null,null,null,null,null,null,null,null,null,1563,null,null,null,1567,null,1569,1570,1571,1572,1573,1574,1575,1576,1577,1578,1579,1580,1581,1582,1583,1584,1585,1586,1587,1588,1589,1590,1591,1592,1593,1594,null,null,null,null,null,1600,1601,1602,1603,1604,1605,1606,1607,1608,1609,1610,1611,1612,1613,1614,1615,1616,1617,1618,null,null,null,null,null,null,null,null,null,null,null,null,null],
  "iso-8859-7":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,8216,8217,163,8364,8367,166,167,168,169,890,171,172,173,null,8213,176,177,178,179,900,901,902,183,904,905,906,187,908,189,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,null,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,null],
  "iso-8859-8":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,null,162,163,164,165,166,167,168,169,215,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,247,187,188,189,190,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,8215,1488,1489,1490,1491,1492,1493,1494,1495,1496,1497,1498,1499,1500,1501,1502,1503,1504,1505,1506,1507,1508,1509,1510,1511,1512,1513,1514,null,null,8206,8207,null],
  "iso-8859-10":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,260,274,290,298,296,310,167,315,272,352,358,381,173,362,330,176,261,275,291,299,297,311,183,316,273,353,359,382,8213,363,331,256,193,194,195,196,197,198,302,268,201,280,203,278,205,206,207,208,325,332,211,212,213,214,360,216,370,218,219,220,221,222,223,257,225,226,227,228,229,230,303,269,233,281,235,279,237,238,239,240,326,333,243,244,245,246,361,248,371,250,251,252,253,254,312],
  "iso-8859-13":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,8221,162,163,164,8222,166,167,216,169,342,171,172,173,174,198,176,177,178,179,8220,181,182,183,248,185,343,187,188,189,190,230,260,302,256,262,196,197,280,274,268,201,377,278,290,310,298,315,352,323,325,211,332,213,214,215,370,321,346,362,220,379,381,223,261,303,257,263,228,229,281,275,269,233,378,279,291,311,299,316,353,324,326,243,333,245,246,247,371,322,347,363,252,380,382,8217],
  "iso-8859-14":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,7682,7683,163,266,267,7690,167,7808,169,7810,7691,7922,173,174,376,7710,7711,288,289,7744,7745,182,7766,7809,7767,7811,7776,7923,7812,7813,7777,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,372,209,210,211,212,213,214,7786,216,217,218,219,220,221,374,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,373,241,242,243,244,245,246,7787,248,249,250,251,252,253,375,255],
  "iso-8859-15":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,8364,165,352,167,353,169,170,171,172,173,174,175,176,177,178,179,381,181,182,183,382,185,186,187,338,339,376,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255],
  "iso-8859-16":[128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,260,261,321,8364,8222,352,167,353,169,536,171,377,173,378,379,176,177,268,322,381,8221,182,183,382,269,537,187,338,339,376,380,192,193,194,258,196,262,198,199,200,201,202,203,204,205,206,207,272,323,210,211,212,336,214,346,368,217,218,219,220,280,538,223,224,225,226,259,228,263,230,231,232,233,234,235,236,237,238,239,273,324,242,243,244,337,246,347,369,249,250,251,252,281,539,255],
  "koi8-r":[9472,9474,9484,9488,9492,9496,9500,9508,9516,9524,9532,9600,9604,9608,9612,9616,9617,9618,9619,8992,9632,8729,8730,8776,8804,8805,160,8993,176,178,183,247,9552,9553,9554,1105,9555,9556,9557,9558,9559,9560,9561,9562,9563,9564,9565,9566,9567,9568,9569,1025,9570,9571,9572,9573,9574,9575,9576,9577,9578,9579,9580,169,1102,1072,1073,1094,1076,1077,1092,1075,1093,1080,1081,1082,1083,1084,1085,1086,1087,1103,1088,1089,1090,1091,1078,1074,1100,1099,1079,1096,1101,1097,1095,1098,1070,1040,1041,1062,1044,1045,1060,1043,1061,1048,1049,1050,1051,1052,1053,1054,1055,1071,1056,1057,1058,1059,1046,1042,1068,1067,1047,1064,1069,1065,1063,1066],
  "koi8-u":[9472,9474,9484,9488,9492,9496,9500,9508,9516,9524,9532,9600,9604,9608,9612,9616,9617,9618,9619,8992,9632,8729,8730,8776,8804,8805,160,8993,176,178,183,247,9552,9553,9554,1105,1108,9556,1110,1111,9559,9560,9561,9562,9563,1169,9565,9566,9567,9568,9569,1025,1028,9571,1030,1031,9574,9575,9576,9577,9578,1168,9580,169,1102,1072,1073,1094,1076,1077,1092,1075,1093,1080,1081,1082,1083,1084,1085,1086,1087,1103,1088,1089,1090,1091,1078,1074,1100,1099,1079,1096,1101,1097,1095,1098,1070,1040,1041,1062,1044,1045,1060,1043,1061,1048,1049,1050,1051,1052,1053,1054,1055,1071,1056,1057,1058,1059,1046,1042,1068,1067,1047,1064,1069,1065,1063,1066],
  "macintosh":[196,197,199,201,209,214,220,225,224,226,228,227,229,231,233,232,234,235,237,236,238,239,241,243,242,244,246,245,250,249,251,252,8224,176,162,163,167,8226,182,223,174,169,8482,180,168,8800,198,216,8734,177,8804,8805,165,181,8706,8721,8719,960,8747,170,186,937,230,248,191,161,172,8730,402,8776,8710,171,187,8230,160,192,195,213,338,339,8211,8212,8220,8221,8216,8217,247,9674,255,376,8260,8364,8249,8250,64257,64258,8225,183,8218,8222,8240,194,202,193,203,200,205,206,207,204,211,212,63743,210,218,219,217,305,710,732,175,728,729,730,184,733,731,711],
  "windows-874":[8364,129,130,131,132,8230,134,135,136,137,138,139,140,141,142,143,144,8216,8217,8220,8221,8226,8211,8212,152,153,154,155,156,157,158,159,160,3585,3586,3587,3588,3589,3590,3591,3592,3593,3594,3595,3596,3597,3598,3599,3600,3601,3602,3603,3604,3605,3606,3607,3608,3609,3610,3611,3612,3613,3614,3615,3616,3617,3618,3619,3620,3621,3622,3623,3624,3625,3626,3627,3628,3629,3630,3631,3632,3633,3634,3635,3636,3637,3638,3639,3640,3641,3642,null,null,null,null,3647,3648,3649,3650,3651,3652,3653,3654,3655,3656,3657,3658,3659,3660,3661,3662,3663,3664,3665,3666,3667,3668,3669,3670,3671,3672,3673,3674,3675,null,null,null,null],
  "windows-1250":[8364,129,8218,131,8222,8230,8224,8225,136,8240,352,8249,346,356,381,377,144,8216,8217,8220,8221,8226,8211,8212,152,8482,353,8250,347,357,382,378,160,711,728,321,164,260,166,167,168,169,350,171,172,173,174,379,176,177,731,322,180,181,182,183,184,261,351,187,317,733,318,380,340,193,194,258,196,313,262,199,268,201,280,203,282,205,206,270,272,323,327,211,212,336,214,215,344,366,218,368,220,221,354,223,341,225,226,259,228,314,263,231,269,233,281,235,283,237,238,271,273,324,328,243,244,337,246,247,345,367,250,369,252,253,355,729],
  "windows-1251":[1026,1027,8218,1107,8222,8230,8224,8225,8364,8240,1033,8249,1034,1036,1035,1039,1106,8216,8217,8220,8221,8226,8211,8212,152,8482,1113,8250,1114,1116,1115,1119,160,1038,1118,1032,164,1168,166,167,1025,169,1028,171,172,173,174,1031,176,177,1030,1110,1169,181,182,183,1105,8470,1108,187,1112,1029,1109,1111,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103],
  "windows-1252":[8364,129,8218,402,8222,8230,8224,8225,710,8240,352,8249,338,141,381,143,144,8216,8217,8220,8221,8226,8211,8212,732,8482,353,8250,339,157,382,376,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255],
  "windows-1253":[8364,129,8218,402,8222,8230,8224,8225,136,8240,138,8249,140,141,142,143,144,8216,8217,8220,8221,8226,8211,8212,152,8482,154,8250,156,157,158,159,160,901,902,163,164,165,166,167,168,169,null,171,172,173,174,8213,176,177,178,179,900,181,182,183,904,905,906,187,908,189,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,null,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,null],
  "windows-1254":[8364,129,8218,402,8222,8230,8224,8225,710,8240,352,8249,338,141,142,143,144,8216,8217,8220,8221,8226,8211,8212,732,8482,353,8250,339,157,158,376,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,286,209,210,211,212,213,214,215,216,217,218,219,220,304,350,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,287,241,242,243,244,245,246,247,248,249,250,251,252,305,351,255],
  "windows-1255":[8364,129,8218,402,8222,8230,8224,8225,710,8240,138,8249,140,141,142,143,144,8216,8217,8220,8221,8226,8211,8212,732,8482,154,8250,156,157,158,159,160,161,162,163,8362,165,166,167,168,169,215,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,247,187,188,189,190,191,1456,1457,1458,1459,1460,1461,1462,1463,1464,1465,null,1467,1468,1469,1470,1471,1472,1473,1474,1475,1520,1521,1522,1523,1524,null,null,null,null,null,null,null,1488,1489,1490,1491,1492,1493,1494,1495,1496,1497,1498,1499,1500,1501,1502,1503,1504,1505,1506,1507,1508,1509,1510,1511,1512,1513,1514,null,null,8206,8207,null],
  "windows-1256":[8364,1662,8218,402,8222,8230,8224,8225,710,8240,1657,8249,338,1670,1688,1672,1711,8216,8217,8220,8221,8226,8211,8212,1705,8482,1681,8250,339,8204,8205,1722,160,1548,162,163,164,165,166,167,168,169,1726,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,1563,187,188,189,190,1567,1729,1569,1570,1571,1572,1573,1574,1575,1576,1577,1578,1579,1580,1581,1582,1583,1584,1585,1586,1587,1588,1589,1590,215,1591,1592,1593,1594,1600,1601,1602,1603,224,1604,226,1605,1606,1607,1608,231,232,233,234,235,1609,1610,238,239,1611,1612,1613,1614,244,1615,1616,247,1617,249,1618,251,252,8206,8207,1746],
  "windows-1257":[8364,129,8218,131,8222,8230,8224,8225,136,8240,138,8249,140,168,711,184,144,8216,8217,8220,8221,8226,8211,8212,152,8482,154,8250,156,175,731,159,160,null,162,163,164,null,166,167,216,169,342,171,172,173,174,198,176,177,178,179,180,181,182,183,248,185,343,187,188,189,190,230,260,302,256,262,196,197,280,274,268,201,377,278,290,310,298,315,352,323,325,211,332,213,214,215,370,321,346,362,220,379,381,223,261,303,257,263,228,229,281,275,269,233,378,279,291,311,299,316,353,324,326,243,333,245,246,247,371,322,347,363,252,380,382,729],
  "windows-1258":[8364,129,8218,402,8222,8230,8224,8225,710,8240,138,8249,338,141,142,143,144,8216,8217,8220,8221,8226,8211,8212,732,8482,154,8250,339,157,158,376,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,258,196,197,198,199,200,201,202,203,768,205,206,207,272,209,777,211,212,416,214,215,216,217,218,219,220,431,771,223,224,225,226,259,228,229,230,231,232,233,234,235,769,237,238,239,273,241,803,243,244,417,246,247,248,249,250,251,252,432,8363,255],
  "x-mac-cyrillic":[1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,8224,176,1168,163,167,8226,182,1030,174,169,8482,1026,1106,8800,1027,1107,8734,177,8804,8805,1110,181,1169,1032,1028,1108,1031,1111,1033,1113,1034,1114,1112,1029,172,8730,402,8776,8710,171,187,8230,160,1035,1115,1036,1116,1109,8211,8212,8220,8221,8216,8217,247,8222,1038,1118,1039,1119,8470,1025,1105,1103,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,8364]
}
MEPH.define('MEPH.audio.external.stringencoding.encoding-indexes', {

});﻿/**
 * SFObject is the base class for all objects in SoundFont Parser. It provides methods to serialize the object to XML,
 * raise errors, and get a string representation of the object.
 */


MEPH.define("MEPH.audio.soundfont.SFObject", {
    requires: [],
    
    statics: {
        NON_SERIALIZABLE_TYPES: ["ByteArray", "SFByteArray"],
        /**
        * Used by the raiseError() method for determining how to respond to raised errors.
         */
        errorReportingMethod: "error"//"trace" // :String
    },
    properties: {
        /**
         * An array of property names to omit from the XML serialization of the object.
         */
        nonSerializedProperties: null,

        /**
         * The name of the object (usually the class name).
         */
        type: undefined,
        propertyNames: undefined
    },//String;
    initialize: function (type) // type:String
    {
        this.type = type;
        this.nonSerializedProperties = ["type", "nonSerializedProperties"];
        this.propertyNames = [];
    },

    getPropertyNames: function ()//:Array
    {
        return this.propertyNames;
    },

    toString: function ()//:String
    {
        return JSON.stringify(this);
    },

    /**
     * Uses flash.utils.describeType to get a list of all public properties (both vars and accessors) of this object,
     * the produces an XML representation of the object.
     */
    toXML: function () // :XML now JSON
    {
        return this.toString();
    },
    /**
     * A method to allow subclasses to define criteria for including or exclusing particular properties from XML
     * serialization.
     */
    includePropertyInSerialization: function (propertyName) // :String :Boolean
    {
        return this[propertyName] != null;
    },

    /**
     * A method to allow subclasses to get a list of property names for this object. Used in XML serialization. Also
     * used in Zone and NoteSample (and their subclasses) to construct the DEFAULTS object.
     */
    getPropertyNames: function (includeAccessors)// :Boolean = true / :Array
    {
        var classInfo = describeType(this); //:XML
        var properties = classInfo.variable;//:XMLList 
        if (includeAccessors) {
            properties.concat(classInfoaccessor.where(function (x) { return (x.access != "writeonly") }));
        }
        var propertyNames = [];//:Array 
        for (var propertyXML in properties) //propertyXML:XML 
        {
            //    if (SFObject.NON_SERIALIZABLE_TYPES.indexOf(propertyXML.@type.toString()) == -1 && this.nonSerializedProperties.
            //        indexOf(propertyXML.@name.toString()) == -1)
            //{
            //    propertyNames.push(propertyXML.@name.toString());
            //}
        }
        return propertyNames;
    },

    /**
     * A simple method for dealing with errors. Allows you to set the method to "trace" or "error."
     */
    raiseError: function (message) // :String //:void
    {
        switch (SFObject.errorReportingMethod) {
            case "trace":
                {
                    console(message);
                    break;
                }
            case "error":
                {
                    throw new Error(message);
                    break;
                }
        }
    }
});﻿describe("MEPH/audio/effects/AAFilter.spec.js", 'MEPH.audio.effects.AAFilter', function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create an AAFilter', function () {
        var filter = new MEPH.audio.effects.AAFilter(64);

        expect(filter).toBeTruthy();
    });
});﻿/*
    The PGEN chunk is a required chunk containing a list of preset zone generators for each preset zone within the
    SoundFont compatible file. It is always a multiple of four bytes in length, and contains one or more generators
    for each preset zone (except a global zone containing only modulators) plus a terminal record according to the
        structure:
        struct sfGenList
        {
            SFGenerator sfGenOper;
            genAmountType genAmount;
        };
        where the types are defined:
        typedef struct
        {
            BYTE byLo;
            BYTE byHi;
        }
        rangesType;
        typedef union
        {
            rangesType ranges;
            SHORT shAmount;
            WORD wAmount;
        }
        genAmountType;
    The sfGenOper is a value of one of the SFGenerator enumeration type values. Unknown or undefined values are ignored.
    This value indicates the type of generator being indicated. Note that this enumeration is two bytes in length.
    The genAmount is the value to be assigned to the specified generator. Note that this can be of three formats.
    Certain generators specify a range of MIDI key numbers of MIDI velocities, with a minimumand maximum value.
    Other generators specify an unsigned WORD value. Most generators, however, specify a signed 16 bit SHORT value.

    The preset zone’s wGenNdx points to the first generator for that preset zone. Unless the zone is a global zone,
    the last generator in the list is an “Instrument” generator, whose value is a pointer to the instrument associated
    with that zone. If a “key range” generator exists for the preset zone, it is always the first generator in the list
    for that preset zone. If a “velocity range” generator exists for the preset zone, it will only be preceded by a key
    range generator. If any generators follow an Instrument generator, they will be ignored.

    A generator is defined by its sfGenOper. All generators within a zone must have a unique sfGenOper
    enumerator. If a second generator is encountered with the same sfGenOper enumerator as a previous generator with
    the same zone, the first generator will be ignored.

    Generators in the PGEN sub-chunk are applied relative to generators in the IGEN sub-chunk in an
    additive manner. In other words, PGEN generators increase or decrease the value of an IGEN generator.
    Section “9.4 The SoundFont Generator Model” contains the details of how this application works.

    If the PGEN sub-chunk is missing, or its size is not a multiple of four bytes, the file should be
    rejected as structurally unsound. If a key range generator is present and not the first generator, it should be
    ignored. If a velocity range generator is present, and is preceded by a generator other than a key range
    generator, it should be ignored. If a non-global list does not end in an instrument generator, zone should be
    ignored. If the instrument generator value is equal to or greater than the terminal instrument, the file
    should be rejected as structurally unsound.

    The IGEN chunk is a required chunk containing a list of zone generators for each instrument zone within the
    SoundFont compatible file. It is always a multiple of four bytes in length, and contains one or more generators
    for each zone (except for a global zone containing only modulators) plus a terminal record according to the
    structure:
        struct sfInstGenList
        {
            SFGenerator sfGenOper;
            genAmountType genAmount;
        };
    where the types are defined as in the PGEN zone above.

    The genAmount is the value to be assigned to the specified generator. Note that this can be of three formats.
    Certain generators specify a range of MIDI key numbers of MIDI velocities, with a minimum and maximum value.
    Other generators specify an unsigned WORD value. Most generators, however, specify a signed 16 bit SHORT value.
    The zone’s wInstGenNdx points to the first generator for that zone. Unless the zone is a global zone, the last
    generator in the list is a “sampleID” generator, whose value is a pointer to the sample associated with that zone.
    If a “key range” generator exists for the zone, it is always the first generator in the list for that zone.
    If a “velocity range” generator exists for the zone, it will only be preceded by a key range generator. If any
    generators follow a sampleID generator, they will be ignored.

    A generator is defined by its sfGenOper. All generators within a zone must have a unique sfGenOper enumerator.
    If a second generator is encountered with the same sfGenOper enumerator as a previous generator within the same
    zone, the first generator will be ignored.

    Generators in the IGEN sub-chunk are absolute in nature. This means that an IGEN generator replaces, rather
    than adds to, the default value for the generator.

    If the IGEN sub-chunk is missing, or its size is not a multiple of four bytes, the file should be rejected
    as structurally unsound. If a key range generator is present and not the first generator, it should be ignored.
    If a velocity range generator is present, and is preceded by a generator other than a key range generator, it
    should be ignored. If a non-global list does not end in a sampleID generator, the zone should be ignored. If
    the sampleID generator value is equal to or greater than the terminal sampleID, the file should be rejected as
    structurally unsound.

    (Note: The properties of these two classes are identical so there is no "InstrumentGeneratorsSubchunk" or
    "PresetGeneratorsSubchunk" class, only the "GeneratorsSubchunk" class which is instantiated twice: once for the
    Instrument Generators subchunk and once for the Preset Generators subchunk.)
*/


MEPH.define("MEPH.audio.soundfont.chunks.data.GeneratorsSubchunk", {
    requires: ['MEPH.audio.soundfont.chunks.data.operators.Operator',
//                'MEPH.audio.soundfont.chunks.data.operators.OperatorFactory',
                'MEPH.audio.soundfont.utils.SFByteArray'],
    extend: 'MEPH.audio.soundfont.chunks.Subchunk',
    alternateNames: ['GeneratorsSubchunk'],
    statics: {
        RECORD_SIZE: 4//:int = 
    },
    initialize: function (source, chunkSize)//:SFByteArray , :uint
    {
        this.callParent("GeneratorsSubchunk", source, chunkSize, GeneratorsSubchunk.RECORD_SIZE);
    },

    getOperator: function (index)//:int //:Operator
    {
        return this.getRecord(index) //as Operator;
    },

    createRecord: function (bytes)//:SFByteArray //:Object
    {
        var record = OperatorFactory.create(bytes);//:Operator 
        return record;
    }
});
﻿/* Unused, reserved. Should be ignored if encountered. */

MEPH.define("MEPH.audio.soundfont.chunks.data.operators.UnusedOperator", {
    requires: [],
    extend: 'MEPH.audio.soundfont.chunks.data.operators.Operator',
    statics: {
    },
    properties: {
    },
    initialize: function (type, amount) {//type:int, amount:int = 0
        this.callParent(type, amount);
    },
    getIsUnusedType: function ()//:Boolean
    {
        return true;
    }
});
﻿/* This parameter represents the MIDI key number at which the sample is to be played back at its original
* sample rate. If not present, or if present with a value of -1, then the sample header parameter Original Key
* is used in its place. If it is present in the range 0-127, then the indicated key number will cause the
* sample to be played back at its sample header Sample Rate. For example, if the sample were a recording of a
* piano middle C (Original Key = 60) at a sample rate of 22.050 kHz, and Root Key were set to 69, then playing
* MIDI key number 69 (A above middle C) would cause a piano note of pitch middle C to be heard. */

MEPH.define("MEPH.audio.soundfont.chunks.data.operators.OverridingRootKey", {
    requires: ['MEPH.audio.soundfont.chunks.data.GeneratorsSubchunk'],
    extend: "MEPH.audio.soundfont.chunks.data.operators.SampleOperator",
    statics: {
    },
    initialize: function (amount)//:int = -1
    {
        if (amount == null || amount == undefined) {
            amount = -1;
        }
        this.callParent(Operator.OVERRIDING_ROOT_KEY, amount);
    }
});
﻿/* This parameter provides the capability for a key depression in a given instrument to terminate the playback of other
 * instruments. This is particularly useful for percussive instruments such as a hi-hat cymbal. An exclusive class
 * value of zero indicates no exclusive class; no special action is taken. Any other value indicates that when this
 * note is initiated, any other sounding note with the same exclusive class value should be rapidly terminated. The
 * exclusive class generator can only appear at the instrument level. The scope of the exclusive class is the entire
 * preset. In other words, any other instrument zone within the same preset holding a corresponding exclusive class
 * will be terminated. */


MEPH.define("MEPH.audio.soundfont.chunks.data.operators.ExclusiveClass", {
    requires: ['MEPH.audio.soundfont.chunks.data.GeneratorsSubchunk'],
    extend: "MEPH.audio.soundfont.chunks.data.operators.ValueOperator",
    statics: {
    },
    initialize: function (amount)//:int = 0 
    {
        this.callParent(Operator.EXCLUSIVE_CLASS, amount || 0);
    }
});
﻿/* This parameter represents the degree to which MIDI key number influences pitch. A value of zero indicates
* that MIDI key number has no effect on pitch; a value of 100 represents the usual tempered semitone scale. */

MEPH.define("MEPH.audio.soundfont.chunks.data.operators.ScaleTuning", {
    requires: ['MEPH.audio.soundfont.chunks.data.GeneratorsSubchunk'],
    extend: 'MEPH.audio.soundfont.chunks.data.operators.ValueOperator',
    statics: {
    },
    initialize: function (amount)//:int = 100
    {
        if (amount == null || amount == undefined) {
            amount = 100;
        }
        this.callParent(Operator.SCALE_TUNING, amount);
    }
});
﻿/* This enumerator indicates a value which gives a variety of Boolean flags describing the sample for the current
 * instrument zone. The sampleModes should only appear in the IGEN sub-chunk, and should not appear in the global zone.
 * The two LS bits of the value indicate the type of loop in the sample: 0 indicates a sound reproduced with no loop, 1
 * indicates a sound which loops continuously, 2 is unused but should be interpreted as indicating no loop, and 3
 * indicates a sound which loops for the duration of key depression then proceeds to play the remainder of the sample.
 */


MEPH.define("MEPH.audio.soundfont.chunks.data.operators.SampleModes", {
    requires: ['MEPH.audio.soundfont.chunks.data.GeneratorsSubchunk'],
    extend: 'MEPH.audio.soundfont.chunks.data.operators.SampleOperator',
    statics: {
    },
    initialize: function (amount)//:int = 0
    {
        this.callParent(Operator.SAMPLE_MODES, amount || 0);
    }
});
﻿/* This is the index into the SHDR sub-chunk providing the sample to be used for the current instrument zone. A value
 * of zero indicates the first sample in the list. The value should never exceed two less than the size of the sample
 * list. The sampleID enumerator is the terminal generator for IGEN zones. As such, it should only appear in the IGEN
 * subchunk, and it must appear as the last generator enumerator in all but the global zone. */


MEPH.define("MEPH.audio.soundfont.chunks.data.operators.SampleID", {
    requires: ['MEPH.audio.soundfont.chunks.data.GeneratorsSubchunk'],
    extend: 'MEPH.audio.soundfont.chunks.data.operators.IndexOperator',
    statics: {

    },
    initialize: function (amount)//:int = 0
    {
        this.callParent(Operator.SAMPLE_ID, amount || 0);
    }
});
﻿/* This is a pitch offset, in cents, which should be applied to the note. It is additive with coarseTune. A
* positive value indicates the sound is reproduced at a higher pitch; a negative value indicates a lower
* pitch. For example, a Fine Tuning value of -5 would cause the sound to be reproduced five cents flat. */


MEPH.define("MEPH.audio.soundfont.chunks.data.operators.FineTune", {
    requires: ['MEPH.audio.soundfont.chunks.data.GeneratorsSubchunk'],
    extend: "MEPH.audio.soundfont.chunks.data.operators.ValueOperator",
    statics: {
    },
    initialize: function (amount)//:int = 0 
    {
        this.callParent(Operator.FINE_TUNE, amount || 0);
    }
});
﻿/* This is a pitch offset, in semitones, which should be applied to the note. A positive value indicates the sound is
 * reproduced at a higher pitch; a negative value indicates a lower pitch. For example, a Coarse Tune value of -4 would
 * cause the sound to be reproduced four semitones flat. */


MEPH.define("MEPH.audio.soundfont.chunks.data.operators.CoarseTune", {
    requires: ['MEPH.audio.soundfont.chunks.data.GeneratorsSubchunk'],
    extend: "MEPH.audio.soundfont.chunks.data.operators.ValueOperator",
    statics: {
    },
    initialize: function (amount)//:int = 0
    {
        this.callParent(Operator.COARSE_TUNE, amount || 0);
    }
});
﻿/* The offset, in 32768 sample data point increments beyond the Endloop sample header parameter to the sample data
 * point considered equivalent to the Startloop sample data point for the loop for this instrument. This parameter is
 * added to the endloopAddrsOffset parameter. For example, if Endloop were 5, endloopAddrsOffset were 3 and
 * endAddrsCoarseOffset were 2, sample data point 65544 would be considered equivalent to the Startloop sample data
 * point, and hence sample data point 65543 would effectively precede Startloop during looping. */


MEPH.define("MEPH.audio.soundfont.chunks.data.operators.EndLoopAddressCoarseOffset", {
    requires: ['MEPH.audio.soundfont.chunks.data.GeneratorsSubchunk',
                'MEPH.audio.soundfont.chunks.data.operators.Operator'],
    extend: 'MEPH.audio.soundfont.chunks.data.operators.SampleOperator',
    statics: {
    },
    properties: {},
    constructor: function (amount)//:int = 0
    {
        this.callParent(Operator.END_LOOP_ADDRS_COARSE_OFFSET, amount);
    }
});
﻿/* This is the attenuation, in centibels, by which a note is attenuated below full scale. A value of zero indicates no
 * attenuation; the note will be played at full scale. For example, a value of 60 indicates the note will be played at
 * 6 dB below full scale for the note. */



MEPH.define("MEPH.audio.soundfont.chunks.data.operators.InitialAttenuation", {
    requires: ['MEPH.audio.soundfont.chunks.data.GeneratorsSubchunk'],
    extend: "MEPH.audio.soundfont.chunks.data.operators.ValueOperator",
    statics: {
    },
    initialize: function (amount)//:int = 0
    {
        this.callParent(Operator.INITIAL_ATTENUATION, amount || 0);
    }
});
﻿/* This enumerator forces the MIDI velocity to effectively be interpreted as the value given. This generator can only
 * appear at the instrument level. Valid values are from 0 to 127. */


MEPH.define("MEPH.audio.soundfont.chunks.data.operators.VelocityOverride", {
    requires: ['MEPH.audio.soundfont.chunks.data.GeneratorsSubchunk'],
    extend: 'MEPH.audio.soundfont.chunks.data.operators.SubstitutionOperator',
    statics: {
    },
    initialize: function (amount)//:int = -1
    {
        if (amount == null || amount == undefined) {
            amount = -1;
        }
        this.callParent(Operator.VELOCITY, amount);
    }
});
﻿/* This enumerator forces the MIDI key number to effectively be interpreted as the value given. This generator can only
 * appear at the instrument level. Valid values are from 0 to 127. */



MEPH.define("MEPH.audio.soundfont.chunks.data.operators.KeyNumOverride", {
    requires: ['MEPH.audio.soundfont.chunks.data.GeneratorsSubchunk'],
    extend: "MEPH.audio.soundfont.chunks.data.operators.SubstitutionOperator",
    statics: {
    },
    initialize: function (amount)//:int = -1)
    {
        if (amount == undefined || amount == null) {
            amount = -1;
        }
        this.callParent(Operator.KEY_NUM, amount);
    }
});
﻿/* The offset, in 32768 sample data point increments beyond the Startloop sample header parameter and the first sample
 * data point to be repeated in this instrument’s loop. This parameter is added to the startloopAddrsOffset parameter.
 * For example, if Startloop were 5, startloopAddrsOffset were 3 and startAddrsCoarseOffset were 2, the first sample
 * data point in the loop would be sample data point 65544. */


MEPH.define("MEPH.audio.soundfont.chunks.data.operators.StartLoopAddressCoarseOffset", {
    extend: 'MEPH.audio.soundfont.chunks.data.operators.SampleOperator',
    requires: ['MEPH.audio.soundfont.chunks.data.GeneratorsSubchunk'],
    statics: {
    },
    initialize: function (amount)//:int = 0
    {
        this.callParent(Operator.START_LOOP_ADDRS_COARSE_OFFSET, amount || 0);
    }
});
﻿/* This is the minimum and maximum MIDI velocity values for which this preset zone or instrument zone is active. The LS
 * byte indicates the highest and the MS byte the lowest valid velocity. The velRange enumerator is optional, but when
 * it does appear, it must be preceded only by keyRange in the zone generator list. */


MEPH.define("MEPH.audio.soundfont.chunks.data.operators.VelocityRange", {
    requires: ['MEPH.audio.soundfont.chunks.data.GeneratorsSubchunk'],
    extend: 'MEPH.audio.soundfont.chunks.data.operators.RangeOperator',
    statics: {
    },
    initialize: function (values)//:Array
    {
        this.callParent(Operator.VEL_RANGE, values);
    }
});
﻿/* This is the minimum and maximum MIDI key number values for which this preset zone or instrument zone is active. The
 * LS byte indicates the highest and the MS byte the lowest valid key. The keyRange enumerator is optional, but when it
 * does appear, it must be the first generator in the zone generator list. */


MEPH.define("MEPH.audio.soundfont.chunks.data.operators.KeyRange", {
    requires: ['MEPH.audio.soundfont.chunks.data.GeneratorsSubchunk'],
    extend: 'MEPH.audio.soundfont.chunks.data.operators.RangeOperator',
    statics: {
    },
    initialize: function (values)//:Array
    {
        this.callParent(Operator.KEY_RANGE, values);
    }
});
﻿/* This is the index into the INST sub-chunk providing the instrument to be used for the current preset zone. A value
 * of zero indicates the first instrument in the list. The value should never exceed two less than the size of the
 * instrument list. The instrument enumerator is the terminal generator for PGEN zones. As such, it should only appear
 * in the PGEN sub-chunk, and it must appear as the last generator enumerator in all but the global preset zone. */


MEPH.define("MEPH.audio.soundfont.chunks.data.operators.Instrument", {
    requires: ['MEPH.audio.soundfont.chunks.data.GeneratorsSubchunk'],
    extend: "MEPH.audio.soundfont.chunks.data.operators.IndexOperator",
    statics: {
    },
    initialize: function (amount)//:int = 0
    {
        this.callParent(Operator.INSTRUMENT, amount || 0);
    }
});
﻿/* This is the degree, in timecents per KeyNumber units, to which the hold time of the Volume Envelope is decreased by
 * increasing MIDI key number. The hold time at key number 60 is always unchanged. The unit scaling is such that a
 * value of 100 provides a hold time that tracks the keyboard; that is, an upward octave causes the hold time to halve.
 * For example, if the Volume Envelope Hold Time were -7973 = 10 msec and the Key Number to Vol Env Hold were 50 when
 * key number 36 was played, the hold time would be 20 msec. */


MEPH.define("MEPH.audio.soundfont.chunks.data.operators.KeyNumToVolumeEnvelopeDecay", {
    requires: ['MEPH.audio.soundfont.chunks.data.GeneratorsSubchunk'],
    extend: "MEPH.audio.soundfont.chunks.data.operators.ValueOperator",
    statics: {
    },
    initialize: function (amount)//:int = 0
    {
        this.callParent(Operator.KEYNUM_TO_RecordL_ENV_DECAY, amount || 0);
    }
});
﻿
/* This is the degree, in timecents per KeyNumber units, to which the hold time of the Volume Envelope is decreased by
 * increasing MIDI key number. The hold time at key number 60 is always unchanged. The unit scaling is such that a
 * value of 100 provides a hold time which tracks the keyboard; that is, an upward octave causes the hold time to
 * halve. For example, if the Volume Envelope Hold Time were -7973 = 10 msec and the Key Number to Vol Env Hold were 50
 * when key number 36 was played, the hold time would be 20 msec. */


MEPH.define("MEPH.audio.soundfont.chunks.data.operators.KeyNumToVolumeEnvelopeHold", {
    requires: ['MEPH.audio.soundfont.chunks.data.GeneratorsSubchunk'],
    extend: "MEPH.audio.soundfont.chunks.data.operators.ValueOperator",
    statics: {
    },
    initialize: function (amount)//:int = 0 
    {
        this.callParent(Operator.KEYNUM_TO_RecordL_ENV_HOLD, amount || 0);
    }
});
﻿/* This is the time, in absolute timecents, for a 100% change in the Volume Envelope value during release phase. For
 * the Volume Envelope, the release phase linearly ramps toward zero from the current level, causing a constant dB
 * change for each time unit. If the current level were full scale, the Volume Envelope Release Time would be the time
 * spent in release phase until 100dB attenuation were reached. A value of 0 indicates a 1-second decay time for a
 * release from full level. A negative value indicates a time less than one second; a positive value a time longer than
 * one second. For example, a release time of 10 msec would be 1200log2(.01) = -7973. */

MEPH.define("MEPH.audio.soundfont.chunks.data.operators.ReleaseVolumeEnvelope", {
    requires: ["MEPH.audio.soundfont.chunks.data.GeneratorsSubchunk"],
    extend: "MEPH.audio.soundfont.chunks.data.operators.ValueOperator",
    statics: {
    },
    initialize: function (amount)//:int = -12000
    {
        if (amount == null || amount == undefined) {
            amount = -12000;
        }
        this.callParent(Operator.RELEASE_RecordL_ENV, amount);
    }
});
﻿/* This is the decrease in level, expressed in centibels, to which the Volume Envelope value ramps during the decay
 * phase. For the Volume Envelope, the sustain level is best expressed in centibels of attenuation from full scale. A
 * value of 0 indicates the sustain level is full level; this implies a zero duration of decay phase regardless of
 * decay time. A positive value indicates a decay to the corresponding level. Values less than zero are to be
 * interpreted as zero; conventionally 1000 indicates full attenuation. For example, a sustain level which corresponds
 * to an absolute value 12dB below of peak would be 120. */



MEPH.define("MEPH.audio.soundfont.chunks.data.operators.SustainVolumeEnvelope", {
    requires: ['MEPH.audio.soundfont.chunks.data.GeneratorsSubchunk'],
    extend: 'MEPH.audio.soundfont.chunks.data.operators.ValueOperator',
    statics: {
    },
    initialize: function (amount)//:int = 0
    {
        this.callParent(Operator.SUSTAIN_RecordL_ENV, amount);
    }
});
﻿/* This is the time, in absolute timecents, for a 100% change in the Volume Envelope value during decay phase. For the
 * Volume Envelope, the decay phase linearly ramps toward the sustain level, causing a constant dB change for each time
 * unit. If the sustain level were -100dB, the Volume Envelope Decay Time would be the time spent in decay phase. A
 * value of 0 indicates a 1-second decay time for a zero-sustain level. A negative value indicates a time less than one
 * second; a positive value a time longer than one second. For example, a decay time of 10 msec would be 1200log2(.01)
 * = -7973. */



MEPH.define("MEPH.audio.soundfont.chunks.data.operators.DecayVolumeEnvelope", {
    requires: [],
    extend: 'MEPH.audio.soundfont.chunks.data.operators.ValueOperator',
    statics: {
    },
    initialize: function (amount)//:int = -12000
    {
        if (amount == undefined) {
            amount = -12000;
        }
        this.callParent(Operator.DECAY_RecordL_ENV, amount);
    }
});
﻿/* This is the time, in absolute timecents, from the end of the attack phase to the entry into decay phase, during
 * which the Volume envelope value is held at its peak. A value of 0 indicates a 1 second hold time. A negative value
 * indicates a time less than one second; a positive value a time longer than one second. The most negative number
 * (-32768) conventionally indicates no hold phase. For example, a hold time of 10 msec would be 1200log2(.01) = -7973.
 */

MEPH.define("MEPH.audio.soundfont.chunks.data.operators.HoldVolumeEnvelope", {
    requires: ['MEPH.audio.soundfont.chunks.data.GeneratorsSubchunk'],
    extend: "MEPH.audio.soundfont.chunks.data.operators.ValueOperator",
    statics: {
    },
    initialize: function (amount)//:int = -12000
    {
        if (amount == undefined || amount == null) {
            amount = -12000;
        }
        this.callParent(Operator.HOLD_RecordL_ENV, amount);
    }
});
﻿/* This is the time, in absolute timecents, from the end of the Volume Envelope Delay Time until the point at which the
 * Volume Envelope value reaches its peak. Note that the attack is “convex”; the curve is nominally such that when
 * applied to the decibel volume parameter, the result is linear in amplitude. A value of 0 indicates a 1 second attack
 * time. A negative value indicates a time less than one second; a positive value a time longer than one second. The
 * most negative number (- 32768) conventionally indicates instantaneous attack. For example, an attack time of 10 msec
 * would be 1200log2(.01) = -7973. */


MEPH.define("MEPH.audio.soundfont.chunks.data.operators.AttackVolumeEnvelope", {
    requires: ['MEPH.audio.soundfont.chunks.data.GeneratorsSubchunk'],
    extend: "MEPH.audio.soundfont.chunks.data.operators.ValueOperator",
    statics: {
    },
    initialize: function (amount)//:int =  -12000
    {
        if (amount == undefined || amount == null) {
            amount = -12000;
        }
        this.callParent(Operator.ATTACK_RecordL_ENV, amount);
    }
});
﻿/* This is the delay time, in absolute timecents, between key on and the start of the attack phase of the Volume
 * envelope. A value of 0 indicates a 1 second delay. A negative value indicates a delay less than one second; a
 * positive value a delay longer than one second. The most negative number (-32768) conventionally indicates no delay.
 * For example, a delay of 10 msec would be 1200log2(.01) = -7973. */



MEPH.define("MEPH.audio.soundfont.chunks.data.operators.DelayVolumeEnvelope", {
    requires: ['MEPH.audio.soundfont.chunks.data.GeneratorsSubchunk'],
    extend: "MEPH.audio.soundfont.chunks.data.operators.ValueOperator",
    statics: {
    },
    initialize: function (amount)//:int = -12000 
    {
        if (amount == undefined || amount == null) {
            amount = -12000;
        }
        this.callParent(Operator.DELAY_RecordL_ENV, amount);
    }
});
﻿/* This is the degree, in timecents per KeyNumber units, to which the hold time of the Modulation Envelope is decreased
 * by increasing MIDI key number. The hold time at key number 60 is always unchanged. The unit scaling is such that a
 * value of 100 provides a hold time that tracks the keyboard; that is, an upward octave causes the hold time to halve.
 * For example, if the Modulation Envelope Hold Time were -7973 = 10 msec and the Key Number to Mod Env Hold were 50
 * when key number 36 was played, the hold time would be 20 msec. */



MEPH.define("MEPH.audio.soundfont.chunks.data.operators.KeyNumToModulationEnvelopeDecay", {
    requires: ['MEPH.audio.soundfont.chunks.data.GeneratorsSubchunk'],
    extend: "MEPH.audio.soundfont.chunks.data.operators.ValueOperator",
    statics: {
    },
    initialize: function (amount)//:int = 0
    {
        this.callParent(Operator.KEYNUM_TO_MOD_ENV_DECAY, amount || 0);
    }
});
﻿/* This is the degree, in timecents per KeyNumber units, to which the hold time of the Modulation Envelope is decreased
 * by increasing MIDI key number. The hold time at key number 60 is always unchanged. The unit scaling is such that a
 * value of 100 provides a hold time which tracks the keyboard; that is, an upward octave causes the hold time to
 * halve. For example, if the Modulation Envelope Hold Time were -7973 = 10 msec and the Key Number to Mod Env Hold
 * were 50 when key number 36 was played, the hold time would be 20 msec. */


MEPH.define("MEPH.audio.soundfont.chunks.data.operators.KeyNumToModulationEnvelopeHold", {
    requires: ['MEPH.audio.soundfont.chunks.data.GeneratorsSubchunk'],
    extend: "MEPH.audio.soundfont.chunks.data.operators.ValueOperator",
    statics: {
    },
    initialize: function (amount)//:int = 0
    {
        this.callParent(Operator.KEYNUM_TO_MOD_ENV_HOLD, amount || 0);
    }
});
﻿/* This is the time, in absolute timecents, for a 100% change in the Modulation Envelope value during release phase.
 * For the Modulation Envelope, the release phase linearly ramps toward zero from the current level. If the current
 * level were full scale, the Modulation Envelope Release Time would be the time spent in release phase until zero
 * value were reached. A value of 0 indicates a 1 second decay time for a release from full level. A negative value
 * indicates a time less than one second; a positive value a time longer than one second. For example, a release time
 * of 10 msec would be 1200log2(.01) = -7973. */

MEPH.define("MEPH.audio.soundfont.chunks.data.operators.ReleaseModulationEnvelope", {
    requires: ['MEPH.audio.soundfont.chunks.data.GeneratorsSubchunk'],
    extend: "MEPH.audio.soundfont.chunks.data.operators.ValueOperator",
    statics: {
    },
    initialize: function (amount)//:int = -12000
    {
        if (amount == null || amount === undefined) {
            amount = -12000;
        }
        this.callParent(Operator.RELEASE_MOD_ENV, amount);
    }
});
﻿/* This is the decrease in level, expressed in 0.1% units, to which the Modulation Envelope value ramps during the
 * decay phase. For the Modulation Envelope, the sustain level is properly expressed in percent of full scale. Because
 * the volume envelope sustain level is expressed as an attenuation from full scale, the sustain level is analogously
 * expressed as a decrease from full scale. A value of 0 indicates the sustain level is full level; this implies a zero
 * duration of decay phase regardless of decay time. A positive value indicates a decay to the corresponding level.
 * Values less than zero are to be interpreted as zero; values above 1000 are to be interpreted as 1000. For example, a
 * sustain level which corresponds to an absolute value 40% of peak would be 600. */

MEPH.define("MEPH.audio.soundfont.chunks.data.operators.SustainModulationEnvelope", {
    requires: ['MEPH.audio.soundfont.chunks.data.GeneratorsSubchunk'],
    extend: 'MEPH.audio.soundfont.chunks.data.operators.ValueOperator',
    statics: {
    },
    initialize: function (amount)//:int = 0
    {
        if (amount == null || amount == undefined) {
            amount = 0;
        }
        this.callParent(Operator.SUSTAIN_MOD_ENV, amount);
    }
});
﻿/* This is the time, in absolute timecents, for a 100% change in the Modulation Envelope value during decay phase. For
 * the Modulation Envelope, the decay phase linearly ramps toward the sustain level. If the sustain level were zero,
 * the Modulation Envelope Decay Time would be the time spent in decay phase. A value of 0 indicates a 1 second decay
 * time for a zero-sustain level. A negative value indicates a time less than one second; a positive value a time
 * longer than one second. For example, a decay time of 10 msec would be 1200log2(.01) = -7973. */



MEPH.define("MEPH.audio.soundfont.chunks.data.operators.DecayModulationEnvelope", {
    requires: ['MEPH.audio.soundfont.chunks.data.GeneratorsSubchunk'],
    extend: "MEPH.audio.soundfont.chunks.data.operators.ValueOperator",
    statics: {
    },
    initialize: function (amount)//:int = -12000
    {
        if (amount == undefined || amount == null) {
            amount = -12000;
        }
        this.callParent(Operator.DECAY_MOD_ENV, amount);
    }
});
﻿/* This is the time, in absolute timecents, from the end of the attack phase to the entry into decay phase, during
 * which the envelope value is held at its peak. A value of 0 indicates a 1 second hold time. A negative value
 * indicates a time less than one second; a positive value a time longer than one second. The most negative number
 * (-32768) conventionally indicates no hold phase. For example, a hold time of 10 msec would be 1200log2(.01) = -7973.
 */



MEPH.define("MEPH.audio.soundfont.chunks.data.operators.HoldModulationEnvelope", {
    requires: ['MEPH.audio.soundfont.chunks.data.GeneratorsSubchunk'],
    extend: "MEPH.audio.soundfont.chunks.data.operators.ValueOperator",
    statics: {
    },
    initialize: function (amount)//:int = -12000
    {
        if (amount == null || amount || undefined) {
            amount = -12000;
        }
        this.callParent(Operator.HOLD_MOD_ENV, amount);
    }
});
﻿/* This is the time, in absolute timecents, from the end of the Modulation Envelope Delay Time until the point at which
 * the Modulation Envelope value reaches its peak. Note that the attack is “convex”; the curve is nominally such that
 * when applied to a decibel or semitone parameter, the result is linear in amplitude or Hz respectively. A value of 0
 * indicates a 1 second attack time. A negative value indicates a time less than one second; a positive value a time
 * longer than one second. The most negative number (-32768) conventionally indicates instantaneous attack. For
 * example, an attack time of 10 msec would be 1200log2(.01) = -7973. */



MEPH.define("MEPH.audio.soundfont.chunks.data.operators.AttackModulationEnvelope", {
    requires: ['MEPH.audio.soundfont.chunks.data.GeneratorsSubchunk'],
    extend: 'MEPH.audio.soundfont.chunks.data.operators.ValueOperator',
    statics: {
    },
    initialize: function (amount)//:int = -12000
    {
        if (amount == undefined) {
            amount = -12000;
        }
        this.callParent(Operator.ATTACK_MOD_ENV, amount);
    }
});
﻿/* This is the delay time, in absolute timecents, between key on and the start of the attack phase of the Modulation
 * envelope. A value of 0 indicates a 1 second delay. A negative value indicates a delay less than one second; a
 * positive value a delay longer than one second. The most negative number (-32768) conventionally indicates no delay.
 * For example, a delay of 10 msec would be 1200log2(.01) = -7973. */


MEPH.define("MEPH.audio.soundfont.chunks.data.operators.DelayModulationEnvelope", {
    requires: ['MEPH.audio.soundfont.chunks.data.GeneratorsSubchunk'],
    extend: "MEPH.audio.soundfont.chunks.data.operators.ValueOperator",
    statics: {
    },
    initialize: function (amount)//:int = -12000
    {
        if (amount == undefined || amount == null) {
            amount = -12000;
        }
        this.callParent(Operator.DELAY_MOD_ENV, amount);
    }
});
﻿/* This is the frequency, in absolute cents, of the Vibrato LFO’s triangular period. A value of zero indicates
* a frequency of 8.176 Hz. A negative value indicates a frequency less than 8.176 Hz; a positive value a
* frequency greater than 8.176 Hz. For example, a frequency of 10 mHz would be 1200log2(.01/8.176) = -11610. */


MEPH.define("MEPH.audio.soundfont.chunks.data.operators.FrequencyVibratoLFO", {
    requires: [ 'MEPH.audio.soundfont.chunks.data.GeneratorsSubchunk',
                'MEPH.audio.soundfont.chunks.data.operators.Operator'],
    extend: "MEPH.audio.soundfont.chunks.data.operators.ValueOperator",
    statics: {
    },
    initialize: function (amount)//:int = 0
    {
        this.callParent(Operator.FREQ_VIB_LFO, amount || 0);
    }
});
﻿/* This is the delay time, in absolute timecents, from key on until the Vibrato LFO begins its upward ramp from zero
 * value. A value of 0 indicates a 1 second delay. A negative value indicates a delay less than one second; a positive
 * value a delay longer than one second. The most negative number (-32768) conventionally indicates no delay. For
 * example, a delay of 10 msec would be 1200log2(.01) = -7973. */


MEPH.define("MEPH.audio.soundfont.chunks.data.operators.DelayVibratoLFO", {
    requires: ['MEPH.audio.soundfont.chunks.data.GeneratorsSubchunk'],
    extend: 'MEPH.audio.soundfont.chunks.data.operators.ValueOperator',
    statics: {
    },
    initialize: function (amount)//:int = -12000
    {
        if (amount == undefined) {
            amount = -12000;
        }
        this.callParent(Operator.DELAY_VIB_LFO, amount);
    }
});
﻿/* This is the frequency, in absolute cents, of the Modulation LFO’s triangular period. A value of zero indicates a
 * frequency of 8.176 Hz. A negative value indicates a frequency less than 8.176 Hz; a positive value a frequency
 * greater than 8.176 Hz. For example, a frequency of 10 mHz would be 1200log2(.01/8.176) = -11610. */


MEPH.define("MEPH.audio.soundfont.chunks.data.operators.FrequencyModulationLFO", {
    requires: ['MEPH.audio.soundfont.chunks.data.GeneratorsSubchunk'],
    extend: "MEPH.audio.soundfont.chunks.data.operators.ValueOperator",
    statics: {
    },
    initialize: function (amount)//:int = 0 
    {
        this.callParent(Operator.FREQ_MOD_LFO, amount || 0);
    }
});
﻿/* This is the delay time, in absolute timecents, from key on until the Modulation LFO begins its upward ramp from zero
 * value. A value of 0 indicates a 1 second delay. A negative value indicates a delay less than one second and a
 * positive value a delay longer than one second. The most negative number (-32768) conventionally indicates no delay.
 * For example, a delay of 10 msec would be 1200log2(.01) = -7973. */



MEPH.define("MEPH.audio.soundfont.chunks.data.operators.DelayModulationLFO", {
    requires: ['MEPH.audio.soundfont.chunks.data.GeneratorsSubchunk'],
    extend: "MEPH.audio.soundfont.chunks.data.operators.ValueOperator",
    statics: {
    },
    initialize: function (amount)//:int = -12000
    {
        if (amount == undefined || amount == null) {
            amount = -12000;
        }
        this.callParent(Operator.DELAY_MOD_LFO, amount);
    }
});
﻿/* This is the degree, in 0.1% units, to which the “dry” audio output of the note is positioned to the left or
* right output. A value of -50% or less indicates the signal is sent entirely to the left output and not sent
* to the right output; a value of +50% or more indicates the note is sent entirely to the right and not sent
* to the left. A value of zero places the signal centered between left and right. For example, a value of -250
* indicates that the signal is sent at 75% of full level to the left output and 25% of full level to the right
* output. */


MEPH.define("MEPH.audio.soundfont.chunks.data.operators.Pan", {
    requires: ['MEPH.audio.soundfont.chunks.data.GeneratorsSubchunk'],
    extend: "MEPH.audio.soundfont.chunks.data.operators.ValueOperator",
    statics: {
    },
    initialize: function (amount)//:int = 0
    {
        this.callParent(Operator.PAN, amount || 0);
    }
});
﻿/* This is the degree, in 0.1% units, to which the audio output of the note is sent to the reverb effects processor. A
 * value of 0% or less indicates no signal is sent from this note; a value of 100% or more indicates the note is sent
 * at full level. Note that this parameter has no effect on the amount of this signal sent to the “dry” or unprocessed
 * portion of the output. For example, a value of 250 indicates that the signal is sent at 25% of full level
 * (attenuation of 12 dB from full level) to the reverb effects processor. */

MEPH.define("MEPH.audio.soundfont.chunks.data.operators.ReverbEffectsSend", {
    requires: ['MEPH.audio.soundfont.chunks.data.GeneratorsSubchunk'],
    extend: "MEPH.audio.soundfont.chunks.data.operators.ValueOperator",
    statics: {
    },
    initialize: function (amount)///:int = 0
    {
        this.callParent(Operator.REVERB_EFFECTS_SEND, amount || 0);
    }
});
﻿/* This is the degree, in 0.1% units, to which the audio output of the note is sent to the chorus effects
* processor. A value of 0% or less indicates no signal is sent from this note; a value of 100% or more
* indicates the note is sent at full level. Note that this parameter has no effect on the amount of this
* signal sent to the “dry” or unprocessed portion of the output. For example, a value of 250 indicates that
* the signal is sent at 25% of full level (attenuation of 12 dB from full level) to the chorus effects
* processor. */



MEPH.define("MEPH.audio.soundfont.chunks.data.operators.ChorusEffectsSend", {
    requires: ['MEPH.audio.soundfont.chunks.data.GeneratorsSubchunk'],
    extend: "MEPH.audio.soundfont.chunks.data.operators.ValueOperator",
    statics: {
    },
    initialize: function (amount)//:int = 0 
    {
        this.callParent(Operator.CHORUS_EFFECTS_SEND, amount || 0);
    }
});
﻿/* This is the degree, in centibels, to which a full scale excursion of the Modulation LFO will influence
* volume. A positive number indicates a positive LFO excursion increases volume; a negative number indicates a
* positive excursion decreases volume. Volume is always modified logarithmically, that is the deviation is in
* decibels rather than in linear amplitude. For example, a value of 100 indicates that the volume will first
* rise ten dB, then fall ten dB. */


MEPH.define("MEPH.audio.soundfont.chunks.data.operators.ModulationLFOToVolume", {
    requires: ['MEPH.audio.soundfont.chunks.data.GeneratorsSubchunk'],
    extend: "MEPH.audio.soundfont.chunks.data.operators.ValueOperator",
    statics: {
    },
    initialize: function (amount)//:int = 0
    {
        this.callParent(Operator.MOD_LFO_TO_RecordLUME, amount || 0);
    }
});
﻿/* The offset, in 32768 sample data point increments beyond the End sample header parameter and the last sample
* data point to be played in this instrument. This parameter is added to the endAddrsOffset parameter. For
* example, if End were 65536, startAddrsOffset were -3 and startAddrsCoarseOffset were -1, the last sample
* data point played would be sample data point 32765. */


MEPH.define("MEPH.audio.soundfont.chunks.data.operators.EndAddressCoarseOffset", {
    requires: ['MEPH.audio.soundfont.chunks.data.GeneratorsSubchunk'],
    extend: "MEPH.audio.soundfont.chunks.data.operators.SampleOperator",
    statics: {
    },
    initialize: function (amount)//:int = 0 
    {
        this.callParent(Operator.END_ADDRS_COARSE_OFFSET, amount || 0);
    }
});
﻿/* This is the degree, in cents, to which a full scale excursion of the Modulation Envelope will influence
* filter cutoff frequency. A positive number indicates an increase in cutoff frequency; a negative number
* indicates a decrease in filter cutoff frequency. Filter cutoff frequency is always modified logarithmically,
* that is the deviation is in cents, semitones, and octaves rather than in Hz. For example, a value of 1000
* indicates that the cutoff frequency will rise one octave at the envelope attack peak. */


MEPH.define("MEPH.audio.soundfont.chunks.data.operators.ModulationEnvelopeToFilterFC", {
    requires: ['MEPH.audio.soundfont.chunks.data.GeneratorsSubchunk'],
    extend: "MEPH.audio.soundfont.chunks.data.operators.ValueOperator",
    statics: {
    },
    initialize: function (amount)//:int = 0
    {
        this.callParent(Operator.MOD_ENV_TO_FILTER_FC, amount || 0);
    }
});
﻿/* This is the degree, in cents, to which a full scale excursion of the Modulation LFO will influence filter
* cutoff frequency. A positive number indicates a positive LFO excursion increases cutoff frequency; a
* negative number indicates a positive excursion decreases cutoff frequency. Filter cutoff frequency is always
* modified logarithmically, that is the deviation is in cents, semitones, and octaves rather than in Hz. For
* example, a value of 1200 indicates that the cutoff frequency will first rise 1 octave, then fall one octave.
*/


MEPH.define("MEPH.audio.soundfont.chunks.data.operators.ModulationLFOToFilterFC", {
    requires: ['MEPH.audio.soundfont.chunks.data.GeneratorsSubchunk'],
    extend: "MEPH.audio.soundfont.chunks.data.operators.ValueOperator",
    statics: {
    },
    initialize: function (amount)//:int = 0
    {
        this.callParent(Operator.MOD_LFO_TO_FILTER_FC, amount || 0);
    }
});
﻿/* This is the height above DC gain in centibels which the filter resonance exhibits at the cutoff frequency. A
* value of zero or less indicates the filter is not resonant; the gain at the cutoff frequency (pole angle)
* may be less than zero when zero is specified. The filter gain at DC is also affected by this parameter such
* that the gain at DC is reduced by half the specified gain. For example, for a value of 100, the filter gain
* at DC would be 5 dB below unity gain, and the height of the resonant peak would be 10 dB above the DC gain,
* or 5 dB above unity gain. Note also that if initialFilterQ is set to zero or less and the cutoff frequency
* exceeds 20 kHz, then the filter response is flat and unity gain. */


MEPH.define("MEPH.audio.soundfont.chunks.data.operators.InitialFilterQ", {
    requires: ['MEPH.audio.soundfont.chunks.data.GeneratorsSubchunk'],
    extend: "MEPH.audio.soundfont.chunks.data.operators.ValueOperator",
    statics: {
    },
    initialize: function (amount)//:int = 0
    {
        this.callParent(Operator.INITIAL_FILTER_Q, amount || 0);
    }
});
﻿/* This is the cutoff and resonant frequency of the lowpass filter in absolute cent units. The lowpass filter
* is defined as a second order resonant pole pair whose pole frequency in Hz is defined by the Initial Filter
* Cutoff parameter. When the cutoff frequency exceeds 20kHz and the Q (resonance) of the filter is zero, the
* filter does not affect the signal. */

MEPH.define("MEPH.audio.soundfont.chunks.data.operators.InitialFilterFC", {
    requires: ['MEPH.audio.soundfont.chunks.data.GeneratorsSubchunk'],
    extend: "MEPH.audio.soundfont.chunks.data.operators.ValueOperator",
    statics: {
    },
    initialize: function (amount)//:int = 13500
    {
        if (amount == undefined || amount == null) {
            amount = 13500;
        }
        this.callParent(Operator.INITIAL_FILTER_FC, amount);
    }
});
﻿/* This is the degree, in cents, to which a full scale excursion of the Modulation Envelope will influence pitch. A
 * positive value indicates an increase in pitch; a negative value indicates a decrease in pitch. Pitch is always
 * modified logarithmically, that is the deviation is in cents, semitones, and octaves rather than in Hz. For example,
 * a value of 100 indicates that the pitch will rise 1 semitone at the envelope peak. */


MEPH.define("MEPH.audio.soundfont.chunks.data.operators.ModulationEnvelopeToPitch", {
    requires: ['MEPH.audio.soundfont.chunks.data.GeneratorsSubchunk'],
    extend: "MEPH.audio.soundfont.chunks.data.operators.ValueOperator",
    statics: {
    },
    initialize: function (amount)//:int = 0
    {
        this.callParent(Operator.MOD_ENV_TO_PITCH, amount || 0);
    }
});
﻿/* This is the degree, in cents, to which a full scale excursion of the Vibrato LFO will influence pitch. A positive
 * value indicates a positive LFO excursion increases pitch; a negative value indicates a positive excursion decreases
 * pitch. Pitch is always modified logarithmically, that is the deviation is in cents, semitones, and octaves rather
 * than in Hz. For example, a value of 100 indicates that the pitch will first rise 1 semitone, then fall one semitone.
 */

MEPH.define("MEPH.audio.soundfont.chunks.data.operators.VibratoLFOToPitch", {
    requires: ['MEPH.audio.soundfont.chunks.data.GeneratorsSubchunk'],
    extend: 'MEPH.audio.soundfont.chunks.data.operators.ValueOperator',
    statics: {
    },
    initialize: function (amount)//:int = 0
    {
        if (amount == null || amount == undefined) {
            amount = 0;
        }
        this.callParent(Operator.VIB_LFO_TO_PITCH, amount);
    }
});
﻿/* This is the degree, in cents, to which a full scale excursion of the Modulation LFO will influence pitch. A positive
 * value indicates a positive LFO excursion increases pitch; a negative value indicates a positive excursion decreases
 * pitch. Pitch is always modified logarithmically, that is the deviation is in cents, semitones, and octaves rather
 * than in Hz. For example, a value of 100 indicates that the pitch will first rise 1 semitone, then fall one semitone.
 */


MEPH.define("MEPH.audio.soundfont.chunks.data.operators.ModulationLFOToPitch", {
    requires: ['MEPH.audio.soundfont.chunks.data.GeneratorsSubchunk'],
    extend: "MEPH.audio.soundfont.chunks.data.operators.ValueOperator",
    statics: {
    },
    initialize: function (amount)//:int = 0
    {
        this.callParent(Operator.MOD_LFO_TO_PITCH, amount || 0);
    }
});
﻿/* The offset, in 32768 sample data point increments beyond the Start sample header parameter and the first sample data
 * point to be played in this instrument. This parameter is added to the startAddrsOffset parameter. For example, if
 * Start were 5, startAddrsOffset were 3 and startAddrsCoarseOffset were 2, the first sample data point played would be
 * sample data point 65544. */


MEPH.define("MEPH.audio.soundfont.chunks.data.operators.StartAddressCoarseOffset", {
    requires: ['MEPH.audio.soundfont.chunks.data.GeneratorsSubchunk'],
    extend: 'MEPH.audio.soundfont.chunks.data.operators.SampleOperator',
    statics: {},

    initialize: function (amount)//:int = 0
    {
        this.callParent(Operator.START_ADDRS_COARSE_OFFSET, amount || 0);
    }
});
﻿/* The offset, in sample data points, beyond the Endloop sample header parameter to the sample data point
* considered equivalent to the Startloop sample data point for the loop for this instrument. For example, if
* Endloop were 15 and endloopAddrsOffset were 2, sample data point 17 would be considered equivalent to the
* Startloop sample data point, and hence sample data point 16 would effectively precede Startloop during
* looping. */



MEPH.define("MEPH.audio.soundfont.chunks.data.operators.EndLoopAddressOffset", {
    requires: ['MEPH.audio.soundfont.chunks.data.GeneratorsSubchunk'],
    extend: "MEPH.audio.soundfont.chunks.data.operators.ValueOperator",
    statics: {
    },
    initialize: function (amount)//:int = 0
    {
        this.callParent(Operator.END_LOOP_ADDRS_OFFSET, amount || 0);
    }
});
﻿/* The offset, in sample data points, beyond the Startloop sample header parameter to the first sample data point to be
 * repeated in the loop for this instrument. For example, if Startloop were 10 and startloopAddrsOffset were -1, the
 * first repeated loop sample data point would be sample data point 9. */

MEPH.define("MEPH.audio.soundfont.chunks.data.operators.StartLoopAddressOffset", {
    requires: ['MEPH.audio.soundfont.chunks.data.GeneratorsSubchunk'],
    extend: 'MEPH.audio.soundfont.chunks.data.operators.SampleOperator',
    statics: {
    },
    initialize: function (amount)//:int = 0
    {
        this.callParent(Operator.START_LOOP_ADDRS_OFFSET, amount || 0);
    }
});
﻿/* The offset, in sample sample data points, beyond the End sample header parameter to the last sample data point to be
 * played for this instrument. For example, if End were 17 and endAddrOffset were -2, the last sample data point played
 * would be sample data point 15.
 *
 * Unit: samples
 * Abs Zero: 0
 * Min: Depends on values of start, loop, & end points in sample header
 * Min Useful: Depends on values of start, loop, & end points in sample header
 * Max: 0
 * Max Useful: None
 * Default: 0 (None)
 */


MEPH.define("MEPH.audio.soundfont.chunks.data.operators.EndAddressOffset", {
    requires: ['MEPH.audio.soundfont.chunks.data.GeneratorsSubchunk'],
    extend: "MEPH.audio.soundfont.chunks.data.operators.SampleOperator",
    statics: {
    },
    initialize: function (amount)//:int = 0 
    {
        this.callParent(Operator.END_ADDRS_OFFSET, amount || 0);
    }
});
﻿/* The offset, in sample data points, beyond the Start sample header parameter to the first sample data point to be
 * played for this instrument. For example, if Start were 7 and startAddrOffset were 2, the first sample data point
 * played would be sample data point 9.
 *
 * Unit: samples
 * Abs Zero: 0
 * Min: 0
 * Min Useful: None
 * Max: Depends on values of start, loop, & end points in sample header
 * Max Useful: Depends on values of start, loop, & end points in sample header
 * Default: 0 (None)
 */

MEPH.define("MEPH.audio.soundfont.chunks.data.operators.StartAddressOffset", {
    requires: ['MEPH.audio.soundfont.chunks.data.GeneratorsSubchunk'],
    extend: 'MEPH.audio.soundfont.chunks.data.operators.SampleOperator',
    statics: {
    },
    initialize: function (amount)//:int = 0
    {
        this.callParent(Operator.START_ADDRS_OFFSET, amount || 0);
    }
});
﻿/*
   struct sfGenList
   {
       SFGenerator sfGenOper;
       genAmountType genAmount;
   };
   */
MEPH.define("MEPH.audio.soundfont.chunks.data.operators.Operator", {
    requires: [],
    alternateNames: 'Operator',
    extend: 'MEPH.audio.soundfont.SFObject',
    statics: {
        START_ADDRS_OFFSET: 0,//:int = ;
        END_ADDRS_OFFSET: 1,//:int = ;
        START_LOOP_ADDRS_OFFSET: 2,//:int = ;
        END_LOOP_ADDRS_OFFSET: 3,//:int = ;
        START_ADDRS_COARSE_OFFSET: 4,//;
        MOD_LFO_TO_PITCH: 5,//:int = ;
        VIB_LFO_TO_PITCH: 6,//:int = ;
        MOD_ENV_TO_PITCH: 7,//:int = ;
        INITIAL_FILTER_FC: 8,//:int = ;
        INITIAL_FILTER_Q: 9,//:int = ;
        MOD_LFO_TO_FILTER_FC: 10,//:int = ;
        MOD_ENV_TO_FILTER_FC: 11,//:int = ;
        END_ADDRS_COARSE_OFFSET: 12,//:int = ;
        MOD_LFO_TO_RecordLUME: 13,//:int = ;
        UNUSED_1: 14,//:int = ;
        CHORUS_EFFECTS_SEND: 15,//:int = ;
        REVERB_EFFECTS_SEND: 16,//:int = ;
        PAN: 17,//:int = ;
        UNUSED_2: 18,//:int = ;
        UNUSED_3: 19,//:int = ;
        UNUSED_4: 20,//:int = ;
        DELAY_MOD_LFO: 21,//:int = ;
        FREQ_MOD_LFO: 22,//:int = ;
        DELAY_VIB_LFO: 23,//:int = ;
        FREQ_VIB_LFO: 24,//:int = ;
        DELAY_MOD_ENV: 25,//:int = ;
        ATTACK_MOD_ENV: 26,//:int = ;
        HOLD_MOD_ENV: 27,//:int = ;
        DECAY_MOD_ENV: 28,//:int = ;
        SUSTAIN_MOD_ENV: 29,//:int = ;
        RELEASE_MOD_ENV: 30,//:int = ;
        KEYNUM_TO_MOD_ENV_HOLD: 31,//:int = ;
        KEYNUM_TO_MOD_ENV_DECAY: 32,//:int = ;
        DELAY_RecordL_ENV: 33,//:int = ;
        ATTACK_RecordL_ENV: 34,///:int = ;
        HOLD_RecordL_ENV: 35,//:int = ;
        DECAY_RecordL_ENV: 36,//:int = ;
        SUSTAIN_RecordL_ENV: 37,//:int = ;
        RELEASE_RecordL_ENV: 38,//:int = ;
        KEYNUM_TO_RecordL_ENV_HOLD: 39,//:int = ;
        KEYNUM_TO_RecordL_ENV_DECAY: 40,//;
        INSTRUMENT: 41,//:int = ;
        RESERVED_1: 42,//:int = ;
        KEY_RANGE: 43,//:int = ;
        VEL_RANGE: 44,//:int = ;
        START_LOOP_ADDRS_COARSE_OFFSET: 45,//:int = ;
        KEY_NUM: 46,//:int = ;
        VELOCITY: 47,//:int = ;
        INITIAL_ATTENUATION: 48,//:int = ;
        RESERVED_2: 49,//:int = ;
        END_LOOP_ADDRS_COARSE_OFFSET: 50,//:int = ;
        COARSE_TUNE: 51,//:int = ;
        FINE_TUNE: 52,//:int = ;
        SAMPLE_ID: 53,//:int = ;
        SAMPLE_MODES: 54,//:int = ;
        RESERVED3: 55,//:int = ;
        SCALE_TUNING: 56,//:int = ;
        EXCLUSIVE_CLASS: 57,//:int = ;
        OVERRIDING_ROOT_KEY: 58,//:int = ;
        UNUSED_5: 59,//:int = ;
        END_OPER: 60,///:int = ;

        NAMES: [//:Array =
            "startAddrsOffset", "endAddrsOffset", "startLoopAddrsOffset", "endLoopAddrsOffset",
            "startAddrsCoarseOffset", "modLfoToPitch", "vibLfoToPitch", "modEnvToPitch",
            "initialFilterFc", "initialFilterQ", "modLfoToFilterFc", "modEnvToFilterFc",
            "endAddrsCoarseOffset", "modLfoToVolume", "unused1", "chorusEffectsSend",
            "reverbEffectsSend", "pan", "unused2", "unused3", "unused4", "delayModLFO",
            "freqModLFO", "delayVibLFO", "freqVibLFO", "delayModEnv", "attackModEnv",
            "holdModEnv", "decayModEnv", "sustainModEnv", "releaseModEnv", "keyNumToModEnvHold",
            "keyNumToModEnvDecay", "delayVolEnv", "attackVolEnv", "holdVolEnv", "decayVolEnv",
            "sustainVolEnv", "releaseVolEnv", "keyNumToVolEnvHold", "keyNumToVolEnvDecay",
            "instrumentID", "reserved1", "keyRange", "velRange", "startLoopAddrsCoarseOffset",
            "keyNum", "velocity", "initialAttenuation", "reserved2", "endLoopAddrsCoarseOffset",
            "coarseTune", "fineTune", "sampleID", "sampleMode", "reserved3", "scaleTuning",
            "exclusiveClass", "overridingRootKey", "unused5", "endOper"
        ]
    },
    properties: {
        id: 0,//int;
        amount: 0,//int;
        defaultValue: null,
        //public var name:String;
        description: null,//:String;
    },
    initialize: function (id, amount)//:int   //:int
    {
        this.id = id;
        this.callParent(this.getName());
        this.amount = amount;
        this.nonSerializedProperties.push("isUnusedType");
    },

    getName: function ()//:String
    {
        return Operator.NAMES[this.id];
    },

    getIsUnusedType: function ()//:Boolean
    {
        return false;
    }
});﻿/*
    A RIFF file is constructed from a basic building block called a “chunk.”
    Two types of chunks, the “RIFF” and “LIST” chunks, may contain nested chunks called sub-chunks as their data.
*/

MEPH.define("MEPH.audio.soundfont.chunks.Subchunk", {
    requires: ['MEPH.audio.soundfont.utils.SFByteArray'],
    extend: 'MEPH.audio.soundfont.chunks.Chunk',
    statics: {
    },
    properties: {
        records: null,//:Array = ;

        _recordSize: 1,//:int = ;
    },
    initialize: function (type, source, chunkSize, recordSize)//:String //:SFByteArray //:uint  //:int
    {
        this.records = [];
        this._chunkSize = chunkSize;
        this._recordSize = recordSize;
        this.callParent(type, source);
        this.nonSerializedProperties.push("records", "numRecords");
    },
    getNumRecords: function ()//:int
    {
        return this.records.length;
    },
    getRecord: function (index)//:int //:Object
    {
        return (index > -1 && index < this.records.length) ? this.records[index] : null;
    },
    parse: function (value)/// :SFByteArray ///:void
    {
        var numOfRecords = this._chunkSize / this._recordSize - 1;//:int 
        for (var i = 0; i < numOfRecords; ++i)//:int 
        {
            var record = this.createRecord(value);//:Object 
            this.records.push(record);
        }
        // One "terminal" record needs to be read from the ByteArray. By calling createRecord() and ignoring
        // the returned object, we skip over the terminal record.
        this.createRecord(value);
    },
    createRecord: function (bytes)//:SFByteArray //:Object
    {
        // Abstract;
        return null;
    }
});
﻿/* @class
* Reads controls from the dom which should be created, and associated with there js objects. 
**/
MEPH.define('MEPH.mixins.Injections', {
    requires: ['MEPH.mobile.services.MobileServices'],
    statics: {
        injectFunctions: {
            onInjectionsComplete: function () {
            },
        }
    },
    init: function () {
        var me = this,
           i,
           referrerFunctions = MEPH.mixins.Injections.injectFunctions;

        for (i in referrerFunctions) {
            me[i] = me[i] || referrerFunctions[i].bind(me);
        }

        if (me.injections) {
            me.$inj = {};
            Promise.all(me.injections.select(function (injection) {
                return MEPH.MobileServices.get(injection).then(function (provider) {
                    me.$inj[injection] = provider;
                });
            })).then(function () {
                me.onInjectionsComplete();
            });
        }
    }
});﻿
MEPH.define("MEPH.audio.soundfont.utils.NoteSampleDecoder", {
    requires: ['MEPH.audio.soundfont.NoteSample',
                "MEPH.audio.soundfont.utils.PCMDecoder",
                "MEPH.audio.soundfont.utils.PCM16BitMono44Khz",
                "MEPH.audio.soundfont.utils.PCM8BitMono44Khz"],
    extend: "MEPH.audio.soundfont.SFObject",
    properties: {
        noteSample: null,//NoteSample
        _decoder: null,//PCMDecoder
        _buffer: null, //= new ByteArray();
    },
    initialize: function (noteSample)//:NoteSample
    {
        this.noteSample = noteSample;
    },
    setup: function (samplerate, decoder) {
        if (this._decoder == null) {
            if (decoder) {
                var pcmStrategy = new PCM8BitMono44Khz(null, samplerate);//:IPCMIOStrategy 
            } else
                var pcmStrategy = new MEPH.audio.soundfont.utils.PCM8BitMono44Khz(null, samplerate);//:IPCMIOStrategy 
            this._decoder = new MEPH.audio.soundfont.utils.PCMDecoder(this.noteSample.sample.bytes, pcmStrategy);
        }
    },
    extract: function (target, length, startPosition, samplerate, decoder)//:ByteArray  //:Number  //:Number  //:Number
    {
        if (!this._buffer) {
            this._buffer = new ArrayBuffer(length);
        }
        this._buffer.position = 0;
        if (this._decoder == null) {
            if (decoder) {
                var pcmStrategy = new PCM8BitMono44Khz(null, samplerate);//:IPCMIOStrategy 
            } else
                var pcmStrategy = new MEPH.audio.soundfont.utils.PCM8BitMono44Khz(null, samplerate);//:IPCMIOStrategy 
            this._decoder = new MEPH.audio.soundfont.utils.PCMDecoder(this.noteSample.sample.bytes, pcmStrategy);
        }
        // Tonfall's PCM16BitMono44Khz strategy deals in samples of 16 bits. 
        // NoteSample's start, loopStart, end &
        // loopEnd are byte offsets (of 8 bits) so we need to divide 
        // them by 2 to arrive at the correct values here
        var tStart = this.noteSample.getStart() / 2;//:uint 
        var tLoopStart = this.noteSample.getLoopStart() / 2;//:uint 
        var tLoopEnd = this.noteSample.getLoopEnd() / 2;//:uint 
        var tLoopOffset = tLoopStart - tStart;//:uint 
        var tLoopLength = tLoopEnd - tLoopStart;//:uint 
        var numSamplesRead = 0;//:int 
        var position = tStart + startPosition;//:Number 
        // MORE SAMPLES NEEDED?
        var tNumSamplesRead = 0;//:int 
        while (numSamplesRead < length) {
            if (position >= tLoopEnd) {
                position = tLoopStart + (position - tLoopStart) % tLoopLength;
            }
            tNumSamplesRead = this._decoder.extract(target, length, position);
            numSamplesRead += tNumSamplesRead;
            position += tNumSamplesRead;
        }
        return numSamplesRead;
    },
    stream: function (target, sample, position)//:ByteArray  //:Number  //:Number  //:Number
    {
        //if (!this._buffer) {
        //    this._buffer = new ArrayBuffer(length);
        //}
        //this._buffer.position = 0;
        //if (this._decoder == null) {
        //    if (decoder) {
        //        var pcmStrategy = new PCM8BitMono44Khz(null, samplerate);//:IPCMIOStrategy 
        //    } else
        //        var pcmStrategy = new PCM16BitMono44Khz(null, samplerate);//:IPCMIOStrategy 
        //    this._decoder = new PCMDecoder(this.noteSample.sample.bytes, pcmStrategy);
        //}
        // Tonfall's PCM16BitMono44Khz strategy deals in samples of 16 bits. 
        // NoteSample's start, loopStart, end &
        // loopEnd are byte offsets (of 8 bits) so we need to divide 
        // them by 2 to arrive at the correct values here
        //var tStart = this.noteSample.getStart() / 2;//:uint 
        //var tLoopStart = this.noteSample.getLoopStart() / 2;//:uint 
        //var tLoopEnd = this.noteSample.getLoopEnd() / 2;//:uint 
        //var tLoopOffset = tLoopStart - tStart;//:uint 
        //var tLoopLength = tLoopEnd - tLoopStart;//:uint 
        //var numSamplesRead = 0;//:int 
        //var position = tStart + startPosition;//:Number 
        // MORE SAMPLES NEEDED?
        //var tNumSamplesRead = 0;//:int 
        //while (numSamplesRead < length) {
        //    if (position >= tLoopEnd) {
        //        position = tLoopStart + (position - tLoopStart) % tLoopLength;
        //    }
        // this._decoder.stream(target, sample, position);
        //    numSamplesRead += tNumSamplesRead;
        //    position += tNumSamplesRead;
        //}
        //return numSamplesRead;
    }
});﻿
//import flash.utils.ByteArray;
//import flash.utils.Endian;

MEPH.define("MEPH.audio.soundfont.utils.SFByteArray", {
    requires: ['MEPH.audio.external.stringencoding.encoding-indexes',
                'MEPH.audio.external.stringencoding.encoding'],
    extend: "MEPH.audio.soundfont.SFObject",
    properties: {
        automove: true
    },
    statics: {
        uint16size: 2,
        Int32Size: 4,
        UFloat32Size: 4,
        CharSize: 1,
        UInt32Size: 4,
        UInt8Size: 1,
        Int8Size: 1,
        Int16Size: 2,
        UInt16Size: 2
    },
    initialize: function (source) /// source should be an arraybuffer , i think 
    {

        this.endian = true; //false == BIG_ENDIAN //Endian.LITTLE_ENDIAN;
        //super();
        this.encoding = "utf-8";
        if (source != null) {
            this.writeBytes(source);
            this.position = 0;
        }
    },
    setSource: function (source) {
        this.writeBytes(source);
    },
    writeBytes: function (source) {

        this._source = source;
        this._dataview = new DataView(source);
    },
    copy: function (src, srcOffset, length) {
        this.memcpy(this._source, this.position, src, srcOffset, length);
    },
    memcpy: function (dst, dstOffset, src, srcOffset, length) {
        var dstU8 = new Uint8Array(dst, dstOffset, length);
        var srcU8 = new Uint8Array(src, srcOffset, length);
        dstU8.set(srcU8);
    },
    readWord: function ()//:uint
    {

        //return super.readUnsignedShort(); 
        var result = this._dataview.getUint16(this.position, this.endian);
        if (this.automove) {
            this.position += SFByteArray.UInt16Size;
        }
        return result;
    },
    hasSource: function () {
        return this._source;
    },
    readBytes: function (destination, offset, chunksize) {
        if (!destination.hasSource()) {
            destination.setSource(new ArrayBuffer(chunksize));
        }
        this.memcpy(destination._source, offset, this._source, this.position, chunksize);
        this.position += chunksize;
    },
    readUnsignedByte: function () {
        var result = this._dataview.getUint8(this.position, this.endian);
        if (this.automove) {
            this.position += SFByteArray.UInt8Size;
        }
        return result;
    },
    readByte: function () {
        var result = this._dataview.getInt8(this.position, this.endian);
        if (this.automove) {
            this.position += SFByteArray.Int8Size;
        }
        return result;
    },
    readShort: function () {
        var result = this._dataview.getInt16(this.position, this.endian);
        if (this.automove) {
            this.position += SFByteArray.Int16Size;
        }
        return result;
    },
    readUnsignedShort: function () {
        var result = this._dataview.getUint16(this.position, this.endian);
        if (this.automove) {
            this.position += SFByteArray.UInt16Size;
        }
        return result;
    },
    readDWord: function ()//:uint
    {
        //return super.readUnsignedInt();
        var result = this._dataview.getInt32(this.position, this.endian);
        if (this.automove) {
            this.position += SFByteArray.Int32Size;
        }
        return result;
    },
    readFloat: function () {
        var result = this._dataview.getFloat32(this.position, this.endian);
        if (this.automove) {
            this.position += SFByteArray.UFloat32Size;
        }
        return result;
    },
    writeFloat: function (val) {
        var result = this._dataview.setFloat32(this.position, val, this.endian);
        if (this.automove) {
            this.position += SFByteArray.UFloat32Size;
        }
        return result;
    },
    readString: function (length)//:int = -1:String
    {
        ;
        var decoder = TextDecoder(this.encoding);
        length = (length == -1) ? this.bytesAvailable() : length;
        ///return super.readUTFBytes(length);
        var tempview = new DataView(this._source, this.position, length);
        var result = decoder.decode(tempview, 0, length);
        if (this.automove) {
            this.position += (SFByteArray.CharSize * length);
        }
        return result;
    },
    bytesAvailable: function () {
        return this._dataview.byteLength - this.position;
    },
    writeWord: function (word)//:int //:void
    {
        //this.writeByte(word % 256);
        //word /= 256;
        //this.writeByte(word % 256);
        this._dataview.setInt32(word, this.position, this.endian);
        if (this.automove) {
            this.position += (SFByteArray.Int32Size * length);
        }
    },
    writeByte: function (word) {
        debugger;
    },
    writeDWord: function (dWord)//:uint //:void
    {
        debugger;
        //super.writeUnsignedInt(dWord);
        this._dataview.setUInt32(dWord, this.position, this.endian);

        if (this.automove) {
            this.position += (SFByteArray.UInt32Size * length);
        }
    },
    writeString: function (string)//:String //:void
    {
        //super.writeUTFBytes(string);
        debugger;
        var uint8array = new TextEncoder(this.encoding).encode(string);
        //var string = new TextDecoder(encoding).decode(uint8array);
        //memcpy: function (dst, dstOffset, src, srcOffset, length)
        var offset = this.position;
        //for (var i = 0 ; i < uint8array.length; i++) {
        //    this._dataview.setUInt8(offset + i, uint8array[i]);
        //}
        this.memcpy(this._dataview, this.position, uint8array, 0, uint8array.buffer.length);

        if (this.automove) {
            this.position += (uint8array.buffer.length);
        }
    },
    skip: function (numBytes)//:uint //:void
    {
        this.position += numBytes;
    }
});﻿


MEPH.define("MEPH.audio.soundfont.chunks.data.operators.OperatorFactory", {
    alternateNames: ['OperatorFactory'],
    requires: ['MEPH.audio.soundfont.chunks.Subchunk',
                'MEPH.audio.soundfont.chunks.data.operators.Operator',
                'MEPH.audio.soundfont.chunks.data.operators.StartAddressOffset',
                'MEPH.audio.soundfont.chunks.data.operators.EndAddressOffset',
                'MEPH.audio.soundfont.chunks.data.operators.StartLoopAddressOffset',
                'MEPH.audio.soundfont.chunks.data.operators.EndLoopAddressOffset',
                'MEPH.audio.soundfont.chunks.data.operators.StartAddressCoarseOffset',
                'MEPH.audio.soundfont.chunks.data.operators.ModulationLFOToPitch',
                'MEPH.audio.soundfont.chunks.data.operators.VibratoLFOToPitch',
                'MEPH.audio.soundfont.chunks.data.operators.ModulationEnvelopeToPitch',
                'MEPH.audio.soundfont.chunks.data.operators.InitialFilterFC',
                'MEPH.audio.soundfont.chunks.data.operators.InitialFilterQ',
                'MEPH.audio.soundfont.chunks.data.operators.ModulationLFOToFilterFC',
                'MEPH.audio.soundfont.chunks.data.operators.ModulationEnvelopeToFilterFC',
                'MEPH.audio.soundfont.chunks.data.operators.EndAddressCoarseOffset',
                'MEPH.audio.soundfont.chunks.data.operators.ModulationLFOToVolume',
                'MEPH.audio.soundfont.chunks.data.operators.ChorusEffectsSend',
                'MEPH.audio.soundfont.chunks.data.operators.ReverbEffectsSend',
                'MEPH.audio.soundfont.chunks.data.operators.Pan',
                'MEPH.audio.soundfont.chunks.data.operators.DelayModulationLFO',
                'MEPH.audio.soundfont.chunks.data.operators.FrequencyModulationLFO',
                'MEPH.audio.soundfont.chunks.data.operators.DelayVibratoLFO',
                'MEPH.audio.soundfont.chunks.data.operators.FrequencyVibratoLFO',
                'MEPH.audio.soundfont.chunks.data.operators.DelayModulationEnvelope',
                'MEPH.audio.soundfont.chunks.data.operators.AttackModulationEnvelope',
                'MEPH.audio.soundfont.chunks.data.operators.HoldModulationEnvelope',
                'MEPH.audio.soundfont.chunks.data.operators.DecayModulationEnvelope',
                'MEPH.audio.soundfont.chunks.data.operators.SustainModulationEnvelope',
                'MEPH.audio.soundfont.chunks.data.operators.ReleaseModulationEnvelope',
                'MEPH.audio.soundfont.chunks.data.operators.KeyNumToModulationEnvelopeHold',
                'MEPH.audio.soundfont.chunks.data.operators.KeyNumToModulationEnvelopeDecay',
                'MEPH.audio.soundfont.chunks.data.operators.DelayVolumeEnvelope',
                'MEPH.audio.soundfont.chunks.data.operators.AttackVolumeEnvelope',
                'MEPH.audio.soundfont.chunks.data.operators.HoldVolumeEnvelope',
                'MEPH.audio.soundfont.chunks.data.operators.DecayVolumeEnvelope',
                'MEPH.audio.soundfont.chunks.data.operators.SustainVolumeEnvelope',
                'MEPH.audio.soundfont.chunks.data.operators.ReleaseVolumeEnvelope',
                'MEPH.audio.soundfont.chunks.data.operators.KeyNumToVolumeEnvelopeHold',
                'MEPH.audio.soundfont.chunks.data.operators.KeyNumToVolumeEnvelopeDecay',
                'MEPH.audio.soundfont.chunks.data.operators.Instrument',
                'MEPH.audio.soundfont.chunks.data.operators.KeyRange',
                'MEPH.audio.soundfont.chunks.data.operators.VelocityRange',
                'MEPH.audio.soundfont.chunks.data.operators.StartLoopAddressCoarseOffset',
                'MEPH.audio.soundfont.chunks.data.operators.KeyNumOverride',
                'MEPH.audio.soundfont.chunks.data.operators.VelocityOverride',
                'MEPH.audio.soundfont.chunks.data.operators.InitialAttenuation',
                'MEPH.audio.soundfont.chunks.data.operators.EndLoopAddressCoarseOffset',
                'MEPH.audio.soundfont.chunks.data.operators.CoarseTune',
                'MEPH.audio.soundfont.chunks.data.operators.FineTune',
                'MEPH.audio.soundfont.chunks.data.operators.SampleID',
                'MEPH.audio.soundfont.chunks.data.operators.SampleModes',
                'MEPH.audio.soundfont.chunks.data.operators.ScaleTuning',
                'MEPH.audio.soundfont.chunks.data.operators.ExclusiveClass',
                'MEPH.audio.soundfont.chunks.data.operators.OverridingRootKey',
                'MEPH.audio.soundfont.chunks.data.operators.UnusedOperator',
                'MEPH.audio.soundfont.utils.SFByteArray',
                'MEPH.audio.soundfont.chunks.data.GeneratorsSubchunk'],

    statics: {
        CLASSES: {},//createClassesDictionary();
        inited: false,
        createClassesDictionary: function ()//:Dictionary
        {
            var classes = OperatorFactory.CLASSES;
            classes[Operator.START_ADDRS_OFFSET] = MEPH.audio.soundfont.chunks.data.operators.StartAddressOffset;
            classes[Operator.END_ADDRS_OFFSET] = MEPH.audio.soundfont.chunks.data.operators.EndAddressOffset;
            classes[Operator.START_LOOP_ADDRS_OFFSET] = MEPH.audio.soundfont.chunks.data.operators.StartLoopAddressOffset;
            classes[Operator.END_LOOP_ADDRS_OFFSET] = MEPH.audio.soundfont.chunks.data.operators.EndLoopAddressOffset;
            classes[Operator.START_ADDRS_COARSE_OFFSET] = MEPH.audio.soundfont.chunks.data.operators.StartAddressCoarseOffset;
            classes[Operator.MOD_LFO_TO_PITCH] = MEPH.audio.soundfont.chunks.data.operators.ModulationLFOToPitch;
            classes[Operator.VIB_LFO_TO_PITCH] = MEPH.audio.soundfont.chunks.data.operators.VibratoLFOToPitch;
            classes[Operator.MOD_ENV_TO_PITCH] = MEPH.audio.soundfont.chunks.data.operators.ModulationEnvelopeToPitch;
            classes[Operator.INITIAL_FILTER_FC] = MEPH.audio.soundfont.chunks.data.operators.InitialFilterFC;
            classes[Operator.INITIAL_FILTER_Q] = MEPH.audio.soundfont.chunks.data.operators.InitialFilterQ;
            classes[Operator.MOD_LFO_TO_FILTER_FC] = MEPH.audio.soundfont.chunks.data.operators.ModulationLFOToFilterFC;
            classes[Operator.MOD_ENV_TO_FILTER_FC] = MEPH.audio.soundfont.chunks.data.operators.ModulationEnvelopeToFilterFC;
            classes[Operator.END_ADDRS_COARSE_OFFSET] = MEPH.audio.soundfont.chunks.data.operators.EndAddressCoarseOffset;
            classes[Operator.MOD_LFO_TO_RecordLUME] = MEPH.audio.soundfont.chunks.data.operators.ModulationLFOToVolume;
            classes[Operator.CHORUS_EFFECTS_SEND] = MEPH.audio.soundfont.chunks.data.operators.ChorusEffectsSend;
            classes[Operator.REVERB_EFFECTS_SEND] = MEPH.audio.soundfont.chunks.data.operators.ReverbEffectsSend;
            classes[Operator.PAN] = MEPH.audio.soundfont.chunks.data.operators.Pan;
            classes[Operator.DELAY_MOD_LFO] = MEPH.audio.soundfont.chunks.data.operators.DelayModulationLFO;
            classes[Operator.FREQ_MOD_LFO] = MEPH.audio.soundfont.chunks.data.operators.FrequencyModulationLFO;
            classes[Operator.DELAY_VIB_LFO] = MEPH.audio.soundfont.chunks.data.operators.DelayVibratoLFO;
            classes[Operator.FREQ_VIB_LFO] = MEPH.audio.soundfont.chunks.data.operators.FrequencyVibratoLFO;
            classes[Operator.DELAY_MOD_ENV] = MEPH.audio.soundfont.chunks.data.operators.DelayModulationEnvelope;
            classes[Operator.ATTACK_MOD_ENV] = MEPH.audio.soundfont.chunks.data.operators.AttackModulationEnvelope;
            classes[Operator.HOLD_MOD_ENV] = MEPH.audio.soundfont.chunks.data.operators.HoldModulationEnvelope;
            classes[Operator.DECAY_MOD_ENV] = MEPH.audio.soundfont.chunks.data.operators.DecayModulationEnvelope;
            classes[Operator.SUSTAIN_MOD_ENV] = MEPH.audio.soundfont.chunks.data.operators.SustainModulationEnvelope;
            classes[Operator.RELEASE_MOD_ENV] = MEPH.audio.soundfont.chunks.data.operators.ReleaseModulationEnvelope;
            classes[Operator.KEYNUM_TO_MOD_ENV_HOLD] = MEPH.audio.soundfont.chunks.data.operators.KeyNumToModulationEnvelopeHold;
            classes[Operator.KEYNUM_TO_MOD_ENV_DECAY] = MEPH.audio.soundfont.chunks.data.operators.KeyNumToModulationEnvelopeDecay;
            classes[Operator.DELAY_RecordL_ENV] = MEPH.audio.soundfont.chunks.data.operators.DelayVolumeEnvelope;
            classes[Operator.ATTACK_RecordL_ENV] = MEPH.audio.soundfont.chunks.data.operators.AttackVolumeEnvelope;
            classes[Operator.HOLD_RecordL_ENV] = MEPH.audio.soundfont.chunks.data.operators.HoldVolumeEnvelope;
            classes[Operator.DECAY_RecordL_ENV] = MEPH.audio.soundfont.chunks.data.operators.DecayVolumeEnvelope;
            classes[Operator.SUSTAIN_RecordL_ENV] = MEPH.audio.soundfont.chunks.data.operators.SustainVolumeEnvelope;
            classes[Operator.RELEASE_RecordL_ENV] = MEPH.audio.soundfont.chunks.data.operators.ReleaseVolumeEnvelope;
            classes[Operator.KEYNUM_TO_RecordL_ENV_HOLD] = MEPH.audio.soundfont.chunks.data.operators.KeyNumToVolumeEnvelopeHold;
            classes[Operator.KEYNUM_TO_RecordL_ENV_DECAY] = MEPH.audio.soundfont.chunks.data.operators.KeyNumToVolumeEnvelopeDecay;
            classes[Operator.INSTRUMENT] = MEPH.audio.soundfont.chunks.data.operators.Instrument;
            classes[Operator.KEY_RANGE] = MEPH.audio.soundfont.chunks.data.operators.KeyRange;
            classes[Operator.VEL_RANGE] = MEPH.audio.soundfont.chunks.data.operators.VelocityRange;
            classes[Operator.START_LOOP_ADDRS_COARSE_OFFSET] = MEPH.audio.soundfont.chunks.data.operators.StartLoopAddressCoarseOffset;
            classes[Operator.KEY_NUM] = MEPH.audio.soundfont.chunks.data.operators.KeyNumOverride;
            classes[Operator.VELOCITY] = MEPH.audio.soundfont.chunks.data.operators.VelocityOverride;
            classes[Operator.INITIAL_ATTENUATION] = MEPH.audio.soundfont.chunks.data.operators.InitialAttenuation;
            classes[Operator.END_LOOP_ADDRS_COARSE_OFFSET] = MEPH.audio.soundfont.chunks.data.operators.EndLoopAddressCoarseOffset;
            classes[Operator.COARSE_TUNE] = MEPH.audio.soundfont.chunks.data.operators.CoarseTune;
            classes[Operator.FINE_TUNE] = MEPH.audio.soundfont.chunks.data.operators.FineTune;
            classes[Operator.SAMPLE_ID] = MEPH.audio.soundfont.chunks.data.operators.SampleID;
            classes[Operator.SAMPLE_MODES] = MEPH.audio.soundfont.chunks.data.operators.SampleModes;
            classes[Operator.SCALE_TUNING] = MEPH.audio.soundfont.chunks.data.operators.ScaleTuning;
            classes[Operator.EXCLUSIVE_CLASS] = MEPH.audio.soundfont.chunks.data.operators.ExclusiveClass;
            classes[Operator.OVERRIDING_ROOT_KEY] = MEPH.audio.soundfont.chunks.data.operators.OverridingRootKey;
            classes[Operator.UNUSED_1] = MEPH.audio.soundfont.chunks.data.operators.UnusedOperator;
            classes[Operator.UNUSED_2] = MEPH.audio.soundfont.chunks.data.operators.UnusedOperator;
            classes[Operator.UNUSED_3] = MEPH.audio.soundfont.chunks.data.operators.UnusedOperator;
            classes[Operator.UNUSED_4] = MEPH.audio.soundfont.chunks.data.operators.UnusedOperator;
            classes[Operator.UNUSED_5] = MEPH.audio.soundfont.chunks.data.operators.UnusedOperator;
            classes[Operator.RESERVED_1] = MEPH.audio.soundfont.chunks.data.operators.UnusedOperator;
            classes[Operator.RESERVED_2] = MEPH.audio.soundfont.chunks.data.operators.UnusedOperator;
            classes[Operator.RESERVED3] = MEPH.audio.soundfont.chunks.data.operators.UnusedOperator;
            classes[Operator.END_OPER] = MEPH.audio.soundfont.chunks.data.operators.UnusedOperator;
            return classes;
        },
        create: function (bytes)//:SFByteArray //:Operator
        {
            var type = bytes.readWord();//:int 
            var generatorClass = this.getClass(type);//:Class 
            var amount;//:*
            switch (type) {
                case Operator.KEY_RANGE:
                case Operator.VEL_RANGE:
                    var low = bytes.readByte();//:int 
                    var high = bytes.readByte();//:int 
                    amount = [low, high];
                    break;
                case Operator.INSTRUMENT:
                case Operator.SAMPLE_ID:
                    amount = bytes.readUnsignedShort();
                    break;
                default:
                    amount = bytes.readShort();
                    break;
            }
            return new generatorClass(amount);
        },

        getClass: function (type)//:int //:Class
        {
            if (!OperatorFactory.inited) {
                OperatorFactory.CLASSES = OperatorFactory.createClassesDictionary();
                OperatorFactory.inited = true;
            }
            if (!OperatorFactory.CLASSES.hasOwnProperty(type)) {
                //throw new Error("Unknown Generator Type: " + type);
                trace("OperatorFactory::getClass: Unknown Generator Type: " + type);
                return UnusedOperator;
            }
            return OperatorFactory.CLASSES[type];
        }
    }
});
﻿

MEPH.define("MEPH.audio.soundfont.SoundFontParser", {
    requires: ['MEPH.audio.soundfont.chunks.SoundFontChunk',
                'MEPH.audio.soundfont.SoundFont',
                'MEPH.audio.soundfont.utils.SFByteArray'],
    extend: "MEPH.audio.soundfont.SFObject",
    statics: {
    },
    properties: {
        soundFonts: null//:Array = 
    },
    initialize: function () {
        this.soundFonts = [];
    },
    parse: function (data)//:ByteArray //:SoundFont
    {
        var bytes = new MEPH.audio.soundfont.utils.SFByteArray(data);//:SFByteArray 
        var soundFontChunk = new MEPH.audio.soundfont.chunks.SoundFontChunk(bytes);//:SoundFontChunk 
        var soundFont = new MEPH.audio.soundfont.SoundFont(soundFontChunk);//:SoundFont 
        this.soundFonts.push(soundFont);
        return soundFont;
    }
});
﻿/**
 * @class MEPH.audio.music.instrument.Instrument
 * Defines a base class for instruments.
 **/
MEPH.define('MEPH.audio.music.instrument.Instrument', {
    requires: ['MEPH.audio.Audio'],
    properties: {
        $audios: null,
        $resources: null
    },
    initialize: function () {
        var me = this;
        me.$resources = [];
        me.$audios = [];
    },
    resources: function () {
        var me = this;
        return me.$resources;
    },
    ready: function (option) {
        var me = this,
            toload = me.getResourcesToLoad();
        return Promise.all(toload.select(function (x) {
            var audio = new MEPH.audio.Audio();
            me.$audios.push(audio);
            me.$resources.push({
                file: x.file,
                type: x.type,
                key: x.key
            });
            return audio.load(x.file, x.type, option);
        })).then(function () {
            return true;
        }).catch(function (e) {
            MEPH.Log(e);
            return false;
        });
    },
    getResourcesToLoad: function () {
        return [];
    }
})﻿/**
* @class MEPH.graph.Node
*/
MEPH.define('MEPH.graph.Node', {
    requires: ['MEPH.math.J3DIVector3'],
    properties: {
    },
    isHidden: function () {
        var me = this;
        return me.$hidden;
    },
    appendData: function (data) {
        var me = this;
        me.$data = data;
        for (var i in data) {
            if (me['get' + i.capitaliseFirstLetter()] === undefined) {
                me['get' + i.capitaliseFirstLetter()] = function (i) {
                    return me.$data[i];
                }.bind(me, i);
            }
            if (me['set' + i.capitaliseFirstLetter()] === undefined) {
                me['set' + i.capitaliseFirstLetter()] = function (i, value) {
                    me.$data[i] = value;
                    me.fire('move', {});
                }.bind(me, i);
            }
        }
    },
    initialize: function (options) {
        var me = this;
        MEPH.Events(me);
        me.$hidden = false;
        me.maxDistanceToTarget = 1;
        me.$position = new MEPH.math.J3DIVector3(0, 0, 0);
        me.$speed = .5;
        me.$activezones = MEPH.util.Observable.observable([]);
        me.on('removed', me.clearConnections.bind(me));
        me.$connections = MEPH.util.Observable.observable([])
            .on('afterpush', me.handleNewConnection.bind(me))
            .on('beforepush', me.fire.bind(me, 'beforeconnectionadded'))
        .on('afterpush', me.fire.bind(me, 'afterconnectionadded'))
        .on('afterpush', me.fire.bind(me, 'connectionadded'))
        .on('afterpush', me.onConnectionAdded.bind(me))
        .on('onpush', me.fire.bind(me, 'changed'))
        .on('beforesplice', me.fire.bind(me, 'beforeconnectionremoved'))
        .on('aftersplice', me.fire.bind(me, 'afterconnectionremoved'))
        .on('aftersplice', me.handleConnectionRemoved.bind(me))
        .on('onremove', me.fire.bind(me, 'connectionremoved'))
        .on('onremove', me.fire.bind(me, 'changed'));
    },
    speed: function (newspeed) {
        var me = this;
        if (newspeed !== undefined) {
            me.$speed = newspeed;
        }
        return me.$speed;
    },
    copyoptions: function (obj) {
        var newobj = {};
        for (var i in obj) {
            newobj[i] = obj[i];
        }
        return newobj;
    },
    handleConnectionRemoved: function (type, args) {
        var me = this;

        var zones = args.removed.concatFluentReverse(function (x) { return x.getZones(); }).where(function (x) { return x.getNode() === me; });
        var zone = zones.first();
        if (zone) {
            if (zone.isEnumerable()) {
                var option = zone.getOptions().option;
                var clonedoption = me.copyoptions(zone.getOptions().option);
                clonedoption.id = GUID();
                if (me.isOutput(option)) {
                    me.getNodeOutputs().removeWhere(function (x) {
                        return x === option;
                    });
                    if (!me.getNodeOutputs().contains(function (x) {
                        return x.title === clonedoption.title;
                    })) {
                        me.getNodeOutputs().push(clonedoption)
                    }
                }
                else {
                    me.getNodeInputs().removeWhere(function (x) {
                        return x === option;
                    });
                    if (!me.getNodeInputs().contains(function (x) {
                        return x.title === clonedoption.title;
                    })) {
                        me.getNodeInputs().push(clonedoption)
                    }
                    if (zone.isMatching()) {
                        var removed = me.getNodeOutputs().removeWhere(function (x) {
                            return x.match === option.id;
                        });
                        removed.foreach(function (x) {
                            me.getZones().removeWhere(function (x) {
                                return x.getOptions().option === x;
                            }).foreach(function (x) {
                                x.destroy();
                            });
                        });
                    }
                }
                zone.destroy();
            }
        }
    },
    onConnectionAdded: function (type, args) {
        var me = this;

        var zones = args.added.concatFluentReverse(function (x) {
            return x.getZones();
        }).where(function (x) {
            return x.getNode() === me;
        });
        var zone = zones.first();
        if (zone) {
            if (zone.isEnumerable()) {
                var clonedoption = me.copyoptions(zone.getOptions().option);
                clonedoption.id = GUID();
                var add = false;
                if (me.isOutput(zone.getOptions().option)) {
                    if (me.getFreeZones().where(function (z) { return me.isOutput(z); }).length <= 1) {
                        me.getNodeOutputs().push(clonedoption);
                        add = true;
                    }
                }
                else {
                    if (me.getFreeZones().where(function (z) { return !me.isOutput(z); }).length <= 1) {
                        me.getNodeInputs().push(clonedoption);
                        add = true;
                    }
                }
                if (zone.isMatching() && add) {
                    var matchid = clonedoption.id;
                    var option = zone.getOptions().option;
                    var clonedoption = me.copyoptions(zone.getOptions().option);
                    clonedoption.id = GUID();
                    clonedoption.match = matchid;
                    clonedoption.matchingoutput = false;
                    clonedoption.enumerable = false;
                    clonedoption.languageType = option.matchingoutputtype || option.languageType;
                    if (me.isOutput(zone.getOptions().option)) {
                        me.getNodeInputs().push(clonedoption);
                    }
                    else {
                        me.getNodeOutputs().push(clonedoption);
                    }
                }
            }
        }
    },
    getFreeZones: function () {
        var me = this;
        return me.getZones().where(function (zone) {
            return !me.getConnections().contains(function (x) {
                return !x.getZones().contains(zone);
            });
        });

    },
    save: function () {
        var me = this,
            result = {};
        result.id = me.getId();
        var pos = me.getPosition();
        result.position = pos;
        var newdata = {
        }
        for (var i in me.$data) {
            if (i !== 'nodeInputs' && i !== 'nodeOutputs') {
                newdata[i] = me.$data[i];
            }
        }
        newdata.nodeInputs = me.$data.nodeInputs.select(function (z) {
            var newze = {};
            for (var t in z) {
                if (t !== 'node' && typeof z[t] !== 'function') {
                    newze[t] = z[t];
                }
            }
            return newze;
        });
        newdata.nodeOutputs = me.$data.nodeOutputs.select(function (z) {
            var newze = {};
            for (var t in z) {
                if (t !== 'node' && typeof z[t] !== 'function') {
                    newze[t] = z[t];
                }
            }
            return newze;
        });

        result.data = newdata;
        return result;
    },
    isOutput: function (option) {
        var me = this;
        return me.getNodeOutputs().contains(function (x) { return x === option; })
    },
    isOutputZone: function (zone) {
        var me = this;
        return me.isOutput(zone.getOptions().option);
    },
    addZone: function (zone) {
        var me = this;
        if (!me.$activezones.contains(zone)) {
            me.$activezones.push(zone);
            zone.on('click', me.onNodeClicked.bind(me, zone, me));
        }
        if (me.$ignoreMouse) {
            zone.ignoreMouse(me.$ignoreMouse);
        }
    },
    ignoreMouse: function (value) {
        var me = this;
        me.$ignoreMouse = true;
        me.getZones().foreach(function (zon) { return zon.ignoreMouse(value); });
    },
    onNodeClicked: function (activezone, node) {
        var me = this;
        me.fire('click', { zone: activezone, node: node });
    },
    hasZone: function (zone) {
        var me = this;
        return me.getZones().contains(function (x) {
            return x === zone;
        });
    },
    getZones: function () {
        var me = this;
        return me.$activezones;
    },
    clearZones: function () {
        var me = this;
        me.$activezones.removeWhere(function (x) {
            x.destroy();
        });
    },
    getConectionPosition: function (connection) {
        var me = this;

        var zones = connection.getZones();
        if (zones) {
            return zones.foreach(function (zone) { return zone.getPosition() });
        }
        return [me.getPosition()];
    },
    setPosition: function (x, y, z) {
        var me = this;
        if (me.isMoving(x, y, z)) {
            me.$position = new J3DIVector3(x, y, z);
            me.fire('move', { node: me });
        }
    },
    getTargetPosition: function () {
        var me = this;
        return me.$targetPosition;
    },
    setTargetPosition: function (x, y, z, callback) {
        var me = this;
        me.$targetPosition = pgx.Vector.Create({ x: x, y: y, z: z });
        if (me.movingToTarget) {
            return;
        }
        me.movingToTarget = true;
        if (me.requestedAnimationFrame !== undefined) {
            cancelAnimationFrame(me.requestedAnimationFrame)
        }
        var anim = function () {
            var pos = pgx.Vector.Create(me.$position);
            var nextpos = me.$targetPosition.subtract(pos).unit().multiply(me.$speed).add(pos);
            //pgx.Vector.Lerp2D(pos, me.$targetPosition, me.$speed);
            me.setPosition(nextpos.x, nextpos.y, nextpos.z);
            if (nextpos.distance(me.$targetPosition) < me.maxDistanceToTarget) {
                me.movingToTarget = false;
                if (callback) {
                    callback();
                }
                me.requestedAnimationFrame = undefined;
            }
            else {
                me.requestedAnimationFrame = requestAnimationFrame(anim);
            }
        }
        me.requestedAnimationFrame = requestAnimationFrame(anim)
    },
    isMoving: function (x, y, z) {
        var me = this, position = me.getPosition();
        if (position) {
            return !(position.x == x && position.y == y && position.z == z);
        }
        return true;
    },
    getPosition: function () {
        var me = this;
        if (me.$position) {
            return {
                x: me.$position[0],
                y: me.$position[1],
                z: me.$position[2]
            }
        }
        return null;
    },
    handleNewConnection: function (type, aconnections) {
        var me = this, connections = [];
        for (var i = 0 ; i < aconnections.added.length ; i++) {
            connections.push(aconnections.added[i]);
        }
        if (connections) {
            connections.foreach(function (connection) {
                if (!connection.getNode(me)) {
                    connection.addNode(me);
                }
                connection.on('removed', me.onConnectionRemoved.bind(me, connection));
            });
        }
    },
    onConnectionRemoved: function (connection) {
        var me = this;
        me.removeConnection(connection);
    },
    clearConnections: function () {
        var me = this;
        me.getConnections().removeWhere(function (x) {
            return true;
        });
    },
    getZoneConnectors: function () {
        var me = this;
        return me.getZones().where(function (x) {
            if (x.getOptions && typeof (x.getOptions) === 'function') {
                return x.getOptions().type === 'connector';
            }
            return false;
        })
    },
    getConnection: function (connection) {
        var me = this;
        return me.$connections.first(function (x) { return x === connection; });
    },
    getConnections: function () {
        var me = this;
        return me.$connections;
    },
    removeConnection: function (connection) {
        var me = this;
        me.$connections.removeWhere(function (x) { return x === connection; });
    },
    addConnection: function (connection) {
        var me = this;
        if (!me.getConnection(connection)) {
            me.$connections.push(connection);
        }
    },
    removed: function () {
        var me = this;
        me.clearZones();
        me.fire('removed', {});
    },
    setId: function (value) {
        var me = this;
        me.$id = value;
    },
    getId: function () {
        var me = this;
        return me.$id;
    }
});﻿/**
 * @class MEPH.query.QueryableWorker
 **/
MEPH.define('MEPH.query.QueryableWorker', {
    properties: {
        $worker: null,
        $promise: null
    },
    initialize: function () {
        var me = this;
        me.$worker = new Worker(MEPH.frameWorkPathSource);
        var src = ' ' +
            'var t=  mephFrameWork(\'MEPH\', "' + MEPH.frameWorkPath + '",null, self);' +
            ' t.framework.ready().then(function(){ ' +
            'MEPH.setPath("' + MEPH.frameWorkPath + '","MEPH");' +
            'postMessage({ "success": true });});'
        //me.$worker.postMessage('');
        me.$promise = Promise.resolve().then(function () {
            return me.post({
                func: 'start',
                src: src,
                framework: 'MEPH'
            }).then(function () {
            })
        });
    },
    ready: function () {
        var me = this;
        return me.$promise.then(function () { return me; });
    },
    post: function (message) {
        var me = this,
            toresolve,
            tofail,
            promise = new Promise(function (r, f) {
                toresolve = r;
                tofail = f;
            });
        return Promise.resolve().then(function () {

            var handler = function (oEvent) {
                me.$worker.removeEventListener(handler);
                toresolve(oEvent.data);
            };
            me.$worker.addEventListener("message", handler, false);
            me.$worker.postMessage(message)
            return promise;
        });
    },
    terminate: function () {
        var me = this;
        
        me.$worker.terminate();
        me.$worker = null;
    },
    message: function (code, args, handler) {
        var me = this;

        if (!handler) throw new Error('There must be a handler');

        me.$worker.addEventListener("message", handler, false);

        me.$worker.postMessage({
            work: code.toString(),
            args: args,
            func: 'exec'
        })
    },
    postSync: function (message, callback) {
        var me = this;

        var handler = function (oEvent) {
            me.$worker.removeEventListener(handler);
            callback(oEvent.data);
        };
        me.$worker.addEventListener("message", handler, false);
        me.$worker.postMessage(message)
    },
    executeSync: function (code, args, callback) {
        me.postSync({
            work: code.toString(),
            args: args,
            func: 'exec'
        }, callback);
    },
    /**
     * Executes an arbitrary piece of code, with the arguments passed in an array.
     * @param {Function} code,
     * @param {Array} args
     */
    execute: function (code, args) {
        var me = this;
        me.$promise = me.$promise.then(function () {
            return me.post({
                work: code.toString(),
                args: args,
                func: 'exec'
            });
        });
        return me.$promise;
    },
    load: function (script) {
        var me = this;
        me.$promise = me.$promise.then(function () {
            return me.post({
                func: 'load',
                script: script,
                framework: 'MEPH'
            }).then(function (result) {
                me.loaded = true;
                return result;
            });
        });
        return me.$promise;

    }
});﻿describe("MEPH/audio/Sequence.spec.js", 'MEPH.audio.Sequence', 'MEPH.audio.Audio', function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create a sequence', function () {
        var sequence = new MEPH.audio.Sequence();

        expect(sequence).toBeTruthy();
    });

    it('a sequence can reference either an audio object or sequences but not both.', function () {
        var sequence = new MEPH.audio.Sequence();
        var audio = new MEPH.audio.Audio();

        sequence.add(audio);
        expect(sequence.get().first()).toBeTruthy();
        expect(sequence.get().first().source).toBe(audio);
    })

    it('a sequence can remove an audio that has been added', function () {
        var sequence = new MEPH.audio.Sequence();
        var audio = new MEPH.audio.Audio();

        sequence.add(audio);
        expect(sequence.get().first()).toBeTruthy();
        expect(sequence.get().first().source).toBe(audio);
        sequence.remove(sequence.get().first());

        expect(sequence.get().first()).toBe(null);

    });

    it('a sequence can reference either a sequence.', function () {
        var sequence = new MEPH.audio.Sequence();
        var audio = new MEPH.audio.Sequence();

        sequence.add(audio);
        expect(sequence.get().first()).toBeTruthy();
        expect(sequence.get().first().source).toBe(audio);
    })

    it('a sequence can not have any circular references ', function () {
        var sequence = new MEPH.audio.Sequence();
        var sequence2 = new MEPH.audio.Sequence();
        var sequence3 = new MEPH.audio.Sequence();
        var caught;
        sequence.add(sequence2, 0);
        sequence2.add(sequence3, 0);

        var res = sequence3.add(sequence, 0);
        expect(res).toBe(false);
    })

    it('a sequence can reference either an audio object or sequences but not both.', function () {
        var sequence = new MEPH.audio.Sequence();
        var audio = new MEPH.audio.Audio();
        var s2 = new MEPH.audio.Sequence();

        sequence.add(audio);
        sequence.add(sequence);
        expect(sequence.get().length).toBe(1);
    })

    it('a sequence has a length associated with it .', function () {
        var sequence = new MEPH.audio.Sequence();
        var audio = new MEPH.audio.Audio();
        audio.duration(1);
        sequence.add(audio);
        expect(sequence.duration()).toBe(1);
    });


    it('a sequence can set a relative time offset on a sequence', function () {
        var sequence = new MEPH.audio.Sequence();;
        var audio = new MEPH.audio.Audio();
        audio.duration(1);

        sequence.add(audio, 12);

        expect(sequence.get().first().relativeTimeOffset).toBe(12);
    })


    it('a sequence can set a relative time offset on a sequence', function () {
        var sequence = new MEPH.audio.Sequence();;
        var audio = new MEPH.audio.Audio();
        audio.duration(1);
        sequence.add(audio, 12);

        expect(sequence.get().first().relativeTimeOffset).toBe(12);
        expect(sequence.duration()).toBe(13);
    });

    it('a sequence can calculate the duration based on relativetimes and durations of its components.', function () {
        var sequence = new MEPH.audio.Sequence();;
        var audio = new MEPH.audio.Audio();
        audio.duration(1);
        var audio2 = new MEPH.audio.Audio();
        audio2.duration(1);
        sequence.add(audio, 12);
        sequence.add(audio2, 14);

        expect(sequence.get().first().relativeTimeOffset).toBe(12);
        expect(sequence.duration()).toBe(15);
    });

    it('a sequence can return the audio parts which will begin with an certain range. ', function () {
        var sequence = new MEPH.audio.Sequence();
        var audio = new MEPH.audio.Audio();
        audio.duration(1);
        sequence.add(audio, 3);
        var result = sequence.getScheduledAudio(2.3, 1);

        expect(result.length).toBe(1);
    });


    it('a sequence can serialize to json', function () {
        var sequence = new MEPH.audio.Sequence();
        var sequence2 = new MEPH.audio.Sequence();
        sequence.add(sequence2, 1);

        var res = sequence.toJSON();
        expect(res).toBeTruthy();
    });

    it('a sequence can deserialize from a json object', function () {
        var sequence = new MEPH.audio.Sequence();
        var sequence2 = new MEPH.audio.Sequence();
        sequence.add(sequence2, 1);

        var res = JSON.stringify(sequence.toJSON());
        var deserialized = MEPH.audio.Sequence.deserialize(res, { get: function () { return new MEPH.audio.Audio(); } });
        expect(deserialized).toBeTruthy();
    });

    it('items returns the list of parts ', function () {
        var sequence = new MEPH.audio.Sequence();
        var res = sequence.items();
        expect(res).toBeTruthy();
    })

    it('can set the default item to add on a sequence', function () {

        var sequence = new MEPH.audio.Sequence();
        sequence.setDefault('graph', 'id');

        expect(sequence.$defaultType).toBe('graph');
        expect(sequence.$defaultRefId).toBe('id');
    });

    it('a sequence has a midi  note ', function () {
        var sequence = new MEPH.audio.Sequence();
        sequence.midiNote(12);
        expect(sequence.midiNote()).toBe(12);
    })

    it('can get a sequences graph', function () {
        var sequence = new MEPH.audio.Sequence();

        expect(sequence.getGraph()).toBeTruthy();
    })
});﻿/**
 * @class MEPH.audio.Sequence
 * Defines a base class for an audio sequence.
 **/
MEPH.define('MEPH.audio.Sequence', {
    requires: ['MEPH.mixins.Injections',
               'MEPH.audio.graph.AudioGraphReader'],
    mixins: {
        injections: 'MEPH.mixins.Injections'
    },
    statics: {
        defaultSequenceGraphRecipe: { "id": "b2ab59ba-df15-48ad-b6a0-0fc76c14d963", "connections": [], "nodes": [{ "id": "a13c9096-907e-49a1-97f8-76bd929585e8", "position": { "x": 400, "y": 107, "z": 0 }, "data": { "id": "17afd0d6-aec7-4006-8510-b32a0cbef594", "type": "MEPH.audio.graph.node.GainNode", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "30cae3fa-52c6-477f-9420-8f2bc5a6c346", "options": null, "output": false, "isOutput": false }, { "name": "gain", "title": "gain", "type": "Number", "connector": null, "id": "3552de45-df3e-47c4-8fd6-32df291079ff", "options": { "path": "gain.value" }, "output": false, "isOutput": false, "defaultValue": "0.56" }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "26190909-b9a9-443f-9a30-c544ac469c7a", "output": true, "isOutput": false }] } }] },
        /**
         * Translates a string into a sequence.
         ***/
        deserialize: function (str, audioservice) {
            var sequence = new MEPH.audio.Sequence();
            var obj = JSON.parse(str);
            sequence.deserialize(obj, audioservice);

            return sequence;
        }
    },
    injections: ['audioResources'],
    properties: {
        parts: null,
        title: null,
        id: null,
        $midinote: null,
        containsSequences: false
    },
    initialize: function (args) {
        var me = this;
        me.parts = [];
        me.mixins.injections.init.apply(me);
        me.id = MEPH.GUID();
        if (args) {
            if (args.title) {
                me.title = args.title;
            }
            if (args.id) {
                me.id = args.id;
            }
        }
    },
    setDefault: function (type, id) {
        var me = this;
        me.$defaultType = type;
        me.$defaultRefId = id;
    },
    setDefaultGraph: function (id) {
        var me = this;
        me.setDefault('graph', id);
    },
    setDefaultSoundFont: function (id) {
        var me = this;
        me.setDefault('soundfont', id);
    },
    setMode: function (offline) {
        var me = this, graph = me.getGraph(true);
        if (graph) {
            graph.disconnect();
            graph.offlineMode = offline;
        }

        if (me.containsSequences) {
            res = [];
            me.parts.foreach(function (sequence) {
                sequence.source.setMode(offline);
            });
        }
        else {
            me.parts.select(function (x) {
                x.getAudio().disconnect();
                x.getAudio().clearContext();
                x.getAudio().offlineMode = offline;
            });
        }
    },
    getGraph: function (raw) {
        var me = this;
        if (!me.$$graph && me.$graph) {
            var g = MEPH.audio.graph.AudioGraphReader.cloneUnique(me.$graph);
            var reader = new MEPH.audio.graph.AudioGraphReader();
            reader.setGraph(g);
            try {
                me.$$graph = reader.createAudio();
                me.$$graph.sequencecreated = true;
            }
            catch (e) {
                me.$$graph = null;
                MEPH.Log(e);
            }
        }

        if (raw)
            return me.$$graph;

        me.$graph = me.$graph || MEPH.audio.graph.AudioGraphReader.cloneUnique(MEPH.audio.Sequence.defaultSequenceGraphRecipe)
        return me.$graph;
    },
    saveGraph: function (graph) {
        var me = this;
        me.$graph = graph;
        if (me.$$graph) {
            me.$$graph.disconnect();
        }
        me.$$graph = null;
    },
    getDefaultInstance: function () {
        var me = this,
            result = null;
        if (me.$inj.audioResources) {
            switch (me.$defaultType) {
                case 'graph':
                    result = me.$defaultRefId;//me.$inj.audioResources.getGraphInstance();
                    break;
                case 'sequence':
                    result = me.$inj.audioResources.getSequenceInstance(me.$defaultRefId)
                    break;
                case 'soundfont':
                    result = me.$inj.audioResources.getSoundFontInstance(me.$defaultRefId);
                    break;
            }
        }
        return result;
    },
    midiNote: function (midinote) {
        var me = this;
        if (midinote !== undefined) {
            me.$midinote = parseFloat(midinote);
        }
        return me.$midinote;
    },
    /**
     * Returns the instance used by the sequence.
     ***/
    items: function () {
        var me = this;
        return me.parts;
    },
    itemSequences: function () {
        var me = this;
        return me.items().concatFluent(function (x) {
            return x.source.items();
        })
    },
    applyAbsoluteTime: function (rel) {
        //var me = this;
        //rel = rel || 0;
        //me.items().foreach(function (x) {
        //    if (x.source instanceof MEPH.audio.Sequence) {
        //        x.source.applyAbsoluteTime(rel + x.relativeTimeOffset);
        //    }
        //    x.absoluteTime = rel + x.relativeTimeOffset;
        //})

    },
    getAbsoluteTime: function (item) {
        var me = this;
        if (item.absoluteTime !== undefined) {
            return item.absoluteTime;
        }
        //var found = me.items().first(function (x) { return x === item; });

        //if (found) {
        //    return found.relativeTimeOffset;
        //}
        //var rel = 0;
        //found = me.items().selectFirst(function (x) {
        //    if (me.containsSequences) {
        //        var res = x.source.getAbsoluteTime(item);
        //        if (res) {
        //            rel = x.relativeTimeOffset;
        //            return res;
        //        }
        //    }
        //    return false;
        //});
        //if (found === false) {
        //    return false
        //}
        //var unittime = (found || 0) + rel;
        //return unittime;
    },
    setRelativeTime: function (item, time) {
        var me = this;
        var parent = me.getParent(item);
        if (parent.source.isChild(item)) {
            item.relativeTimeOffset = Math.max(0, time);
            item.absoluteTime = undefined;
        }
        else {
            parent.source.setRelativeTime(item, time - parent.relativeTimeOffset);
        }
    },
    /**
     * Gets the index of the item relative to the parent/ancestor.
     * @param {Object} item
     * @returns {Number}s
     **/
    getParentIndexOf: function (item) {
        var me = this,
            res;

        if (item.parentIndex !== undefined) {
            return item.parentIndex;
        }
        else {
            res = me.getParent(item);
            if (item.parent && item.parent !== res) {
                debugger
            }
            item.parent = res;
        }
        item.parentIndex = me.items().indexOf(res);
        return item.parentIndex;
    },
    /**
     * Gets the parent/ ancestor
     **/
    getParent: function (item) {
        var me = this;
        var res = me.items().first(function (x) {
            return x === item || (me.containsSequences ? x.source.hasDescendant(item) : false);
        });
        return res;
    },
    isChild: function (item) {
        var me = this;
        return me.items().first(function (x) { return item === x; })
    },
    /**
     * Returns true, if it belongs to the sequence structure.
     * @param {Object} item
     * @returns {Boolean}
     ***/
    hasDescendant: function (item) {
        var me = this;
        return me.items().any(function (x) {
            return x === item || (me.containsSequences ? x.source.hasDescendant(item) : false);
        });
    },
    containsRef: function (source) {
        var me = this;
        return me.items().any(function (x) {
            return x.source === source || (me.containsSequences ? x.source.containsRef(source) : false);
        });
    },
    /**
     * Removes the source from the sequence.
     * @param {Object} source
     * @return {Array}
     **/
    remove: function (source) {
        var me = this;

        return me.items().removeWhere(function (x) {
            return x === source;
        });
    },
    /**
     * Adds a source to the sequence.
     * @param  { Object} source
     * @param {Number} timeOffset
     * @param {Number} duration
     ***/
    add: function (source, timeOffset, duration) {
        var me = this,
            defaults,
            args = MEPH.Array(arguments);
        duration = duration || null;
        if (!source) {
            source = me.getDefaultInstance();
            if (!source) {
                return;
            }
        }


        if (me.parts.length === 0) {
            me.containsSequences = source instanceof MEPH.audio.Sequence;
        }

        if (((me.containsSequences && source instanceof MEPH.audio.Sequence) ||
            (!me.containsSequences && source instanceof MEPH.audio.Audio) ||
            (!me.containsSequences && typeof source === 'string')) &&
            (typeof source === 'string' ||
             source instanceof MEPH.audio.Audio || (!source.containsRef(me)))) {
            me.parts.push({
                source: source,
                relativeTimeOffset: timeOffset || 0,
                duration: duration,
                getAudio: function () {
                    if (typeof this.source === 'string' && this.audioSource) {
                        this.audioSource.duration(this.duration);
                        return this.audioSource;
                    }
                    return this.source;
                }
            });
            if (source instanceof MEPH.audio.Audio && duration) {
                source.duration(duration)
            }

            return source;
        }
        return false;
    },
    get: function () {
        var me = this;
        return me.parts.select();
    },
    duration: function (graphExtensions) {
        var me = this;
        graphExtensions = graphExtensions || [];
        return me.parts.maximum(function (x) {
            if (x.containsSequences) {
                return x.source.duration(graphExtensions) + x.relativeTimeOffset;
            }
            else {
                if (typeof x.source === 'string') {
                    return x.duration + x.relativeTimeOffset; //me.$inj.audioResources.getGraphInstance(x.source, graphExtensions).duration();
                }
                return x.source.duration() + x.relativeTimeOffset;
            }
        })
    },
    getDuration: function (item) {
        return item.source.duration();
    },
    /**
     * Ges the schedule audio parts to begin playing from the start to the start +length time.
     * @param {Number} start
     * @param {Number} length
     * @return {Object}
     **/
    getScheduledAudio: function (start, length, graphExtensions) {
        var me = this;
        graphExtensions = graphExtensions || [];
        graphExtensions = me.connectExtensions(graphExtensions)
        if (me.containsSequences) {
            return me.parts.concatFluent(function (sequence) {
                return sequence.source.getScheduledAudio(sequence.relativeTimeOffset - start, length, graphExtensions);
            });;
        }
        else {
            return me.parts.where(function (x) {
                return x.relativeTimeOffset >= start && x.relativeTimeOffset <= (start + length);
            }).select(function (x) {
                return me.assignAudioSource(x, graphExtensions);
            });
        }
    },
    connectExtensions: function (graphExtensions) {
        var me = this;
        var graphextension = me.getGraph(true) || null;
        if (graphextension) {
            graphextension.setDestination(graphExtensions.first());
            graphextension.complete();

            graphExtensions = [graphextension];
        }
        return graphExtensions;
    },
    assignAudioSource: function (x, graphExtensions) {
        var me = this;
        if (typeof x.source === 'string') {
            if (me.$defaultType === 'soundfont') {
                x.audioSource = me.$inj.audioResources.getSoundFontAudioInstance(me.$defaultRefId);
            }
            else {
                x.audioSource = me.$inj.audioResources.getGraphInstance(x.source);
            }
            if (graphExtensions && graphExtensions.length) {
                x.audioSource.setDestination(graphExtensions.first());
            }
        }
        return x;
    },
    clone: function (x) {
        var t = {
        };
        for (var i in x) {
            t[i] = x[i];
        }
        return t;
    },
    getAudios: function (graphExtensions, rel) {
        var me = this, res;
        rel = rel || 0
        graphExtensions = graphExtensions || [];
        graphExtensions = me.connectExtensions(graphExtensions)

        if (me.containsSequences) {
            res = [];
            me.parts.foreach(function (sequence) {
                var subres = sequence.source.getAudios(graphExtensions, rel + sequence.relativeTimeOffset);
                subres.foreach(function (t) {
                    if (res.indexOf(t) === -1) {
                        res.push(t);
                    }
                });
            });
        }
        else {
            res = me.parts.select(function (x) {
                var clone = me.clone(me.assignAudioSource(x, graphExtensions));
                clone.absoluteTime = rel + x.relativeTimeOffset
                return clone;
            });
        }
        return res;
    },
    getAudioWithAbsoluteTime: function () {
        var me = this, audios = me.getAudios()
        return audios;
    },
    toJSON: function () {
        var me = this,
            res;
        if (me.containsSequences) {
            if (me.parts)
                res = me.parts.select(function (sequence) {
                    return {
                        sequence: sequence.source.toJSON(),
                        relativeTimeOffset: sequence.relativeTimeOffset
                    }
                });

        }
        else {
            if (me.parts)
                res = me.parts.select(function (x) {
                    return {
                        audioId: x.id,
                        relativeTimeOffset: x.relativeTimeOffset
                    };
                })
        }
        return {
            parts: res,
            id: me.id,
            title: me.title,
            graph: me.getGraph(true),
            sequence: me.containsSequences
        }
    },
    /**
     * Translates an object into a sequence.
     ***/
    deserialize: function (obj, audioservice, sequences) {
        var me = this;
        sequences = sequences || [];
        me.id = obj.id;
        me.title = obj.title || me.title;
        me.$graph = obj.graph || null;
        if (obj.sequence) {
            obj.parts.foreach(function (part) {
                var newsequence = new MEPH.audio.Sequence();
                var res = me.add(newsequence, part.relativeTimeOffset);
                if (!sequences.some(function (x) { return x === part.sequence.id; })) {
                    sequences.push(newsequence.id);
                    newsequence.deserialize(part.sequence, audioservice, sequences);
                }
            });
        }
        else {
            obj.parts.foreach(function (part) {
                var audio = audioservice.get(part.audioId);
                me.add(audio, part.relativeTimeOffset);
            })
        }
    }
});﻿/**
 * @class MEPH.audio.Sequence
 * Defines a base class for an audio sequence.
 **/
MEPH.define('MEPH.audio.Scheduler', {
    requires: ['MEPH.audio.Sequence',
                'MEPH.audio.Audio',
                'MEPH.query.QueryableWorker'],
    properties: {
        $sequence: null,
        $queryWorker: null,
        playWindow: 200,
        interval: 50,
        bpm: 75 / 16 / 60,
        playing: false
    },
    initialize: function (args) {
        var me = this;
        MEPH.Events(me);

        if (args && args.init) {
            me.init();
        }
    },
    get: function (from, duration) {
        var me = this;
        return me.sequence().getScheduledAudio(from, duration);
    },
    getAudio: function (from, duration) {
        var me = this;
        me.orderedSequence = me.sequence().getAudioWithAbsoluteTime();
        return me.orderedSequence.where(function (x) {
            return x.absoluteTime * me.bpm >= from &&
                x.absoluteTime * me.bpm <= (duration * me.bpm + from)
        }).orderBy(function (x, y) {
            return x.absoluteTime - y.absoluteTime;
        });
    },
    /**
     * Renderse the sequence.
     **/
    render: function () {
        var me = this, started;
        if (!me.sequence()) return;
        var sequencetime = (me.sequence().duration() || 0);
        var duration = sequencetime * me.bpm;
        var samplerate = 48000,
            audioduration;
        me.sequence().setMode(true);
        MEPH.audio.Audio.OfflineMode = true;
        MEPH.audio.Audio.OfflineAudioContext = new OfflineAudioContext(2, samplerate * duration, samplerate);
        var audios = me.getAudio(0, sequencetime);

        if (started === undefined) {
            started = 0;
        }
        audios.foreach(function (audio) {
            var time = me.sequence().getAbsoluteTime(audio) * me.bpm;

            audio.getAudio().complete();
            audio.getAudio().play(time + started);
            audioduration = audio.getAudio().duration();
            if (audioduration !== null) {
                audio.getAudio().stop(time + started + (audioduration * me.bpm));
            }
        });
        var toresolve;
        var promise = new Promise(function (x, f) {
            toresolve = x;
        });
        MEPH.audio.Audio.OfflineAudioContext.oncomplete = function (e) {
            toresolve(e);
        }
        MEPH.audio.Audio.OfflineAudioContext.startRendering();
        return promise;
    },
    /**
     * Plays the scheduler.
     ***/
    play: function () {
        var me = this, played = [], started;
        if (!me.sequence()) return;
        MEPH.audio.Audio.OfflineMode = false;
        var lasttime = (me.sequence().duration() || 0) * me.bpm;
        var sequencetime = (me.sequence().duration() || 0);
        var items = me.getAudio(0, sequencetime);
        me.sequence().setMode(false);

        me.on('tick', function () {
            var currentTime = MEPH.audio.Audio.GetContext().currentTime;
            if (started === undefined) {
                started = currentTime;
                lasttime += started;
            }
            var audioduration;
            items = items.where(function (t) { return played.indexOf(t) === -1; })
            items.foreach(function (audio) {
                var time = me.sequence().getAbsoluteTime(audio) * me.bpm;

                audio.getAudio().complete();
                audio.getAudio().play(time + started);
                audioduration = audio.getAudio().duration();
                if (audioduration !== null) {
                    audio.getAudio().stop(time + started + (audioduration * me.bpm));
                }
                played.push(audio);
            });
            if (lasttime < currentTime && me.playing) {
                me.fire('complete', { currentTime: currentTime });

                me.stop();
            }
        }, 'play')
        me.start();
        me.playing = true;
    },
    /**
     * Initializes a scheduler.
     **/
    init: function () {
        var me = this;
        me.$queryWorker = new MEPH.query.QueryableWorker();
        return me.$queryWorker.ready().then(function (q) {
            return q.load('MEPH.audio.AudioTimer')
        });
    },
    start: function () {
        var me = this;
        if (me.playing) return;
        me.$queryWorker.message(function () {
            MEPH.audio.AudioTimer.start(1000);
        }, [], function (message) {
            if (message.data && message.data.tick) {
                me.fire('tick', true);
            }
        })
    },
    stop: function () {
        var me = this;
        if (!me.playing) return;
        me.$queryWorker.message(function () {
            MEPH.audio.AudioTimer.stop();
        }, [], function (message) {
        });

        me.un(null, 'play');
        me.playing = false;
    },
    terminate: function () {
        var me = this;
        me.$queryWorker.terminate();
    },
    sequence: function (s) {
        if (s instanceof MEPH.audio.Sequence) {
            this.$sequence = s;
        }
        return this.$sequence;
    }
});﻿/**
 * @class MEPH.audio.Audio
 * Defines a base class for Audio.
 **/
MEPH.define('MEPH.audio.graph.AudioGraphReader', {
    requires: ['MEPH.audio.Audio'],
    properties: {
        $graph: null
    },
    statics: {
        cloneUnique: function (graph) {


            var ids = MEPH.audio.graph.AudioGraphReader.collectIds(graph).select(function (x) {
                return {
                    n: MEPH.GUID(),
                    o: x
                }
            });

            var str = JSON.stringify(graph);

            ids.foreach(function (item) {
                str = str.replace(new RegExp(item.o, 'g'), item.n);
            });

            var res = JSON.parse(str);
            return res;
        },
        collectIds: function (graph) {
            var nodeids = graph.nodes.concatFluent(function (x) {
                return [x.id].concat(x.data.nodeInputs.select(function (x) { return x.id; }))
                    .concat(x.data.nodeOutputs.select(function (x) { return x.id; })).concat(x.data.subGraph ? MEPH.audio.graph.AudioGraphReader.collectIds(x.data.subGraph) : []);
            });
            var connectionids = graph.connections.select(function (x) { return x.id; });

            connectionids = connectionids.concat(graph.connections.concatFluent(function (x) { return x.zones; }));
            connectionids = connectionids.concat(graph.connections.concatFluent(function (x) { return x.nodes; }));
            if (graph.id)
                connectionids.push(graph.id);
            return nodeids.concat(connectionids)
        }
    },
    setGraph: function (graph) {
        var me = this;
        me.$graph = graph;
    },
    getGraph: function () {
        var me = this;
        return me.$graph;
    },
    /**
     * Gets the nodes from the graph
     * @param {Object} [graph]
     ***/
    getNodes: function (graph) {
        var me = this;

        graph = graph || me.getGraph();

        var nodes = graph.nodes;
        nodes = nodes.concat(graph.nodes.where(function (x) { return x.data.subGraph; }).concatFluent(function (x) {


            return me.getNodes(x.data.subGraph);
        }));
        return nodes.where(me.nodesToIgnore);
    },
    /**
     * Gets the connections in the graph.
     * @param {Object} [graph]
     **/
    getConnections: function (graph) {
        var me = this;

        graph = graph || me.getGraph();
        var connections = graph.connections;
        connections = connections.concat(graph.nodes.where(function (x) {
            return x.data.subGraph;
        }).concatFluent(function (x) {
            return me.getConnections(x.data.subGraph);
        }));
        return connections;
    },
    /**
     * Constructs an audio object from the graph.
     * @return {MEPH.audio.Audio}
     **/
    constructAudioNodeList: function () {
        var me = this;

        if (me.hasSingleRoot()) {
            var root = me.getRoot();
            var res = me.fillListWithOrderedTree(root);
            return res;
        }
    },
    connectGraph: function (graph) {
        var me = this;
        if (me.hasSingleRoot()) {
            var input = me.getNodeOfType(graph, 'MEPH.audio.graph.node.InputNode');
            var inputNodesToConnectToFromRoot = me.getNodesConnectedToOutputsOf(input, graph);
            var nodeAndTargetZones = inputNodesToConnectToFromRoot.select(function (x) {
                return {
                    zones: me.getZoneToConnectToFromInput(input, x, graph),
                    node: x
                }
            })
            var root = me.getRoot();
            var audiooutputs = root.data.nodeOutputs.where(function (t) {
                return t.type === 'AudioBuffer';
            });
            var currentgraph = me.getGraph();
            var res = nodeAndTargetZones.select(function (x) {
                return {
                    id: MEPH.GUID(),
                    nodes: [x.node.id, root.id],
                    zones: [x.zones.first(), audiooutputs.first().id]
                }
            });
            graph.nodes.where(me.nodesToIgnore).foreach(function (node) {
                currentgraph.nodes.push(node);
            })
            graph.connections.foreach(function (connection) {
                if (!graph.nodes.where(function (x) {
                    return !me.nodesToIgnore(x);
                }).some(function (t) {

                    return connection.nodes.some(function (y) { return y === t.id; });
                })) {
                    currentgraph.connections.push(connection);
                }
            });
            res.foreach(function (connection) {
                currentgraph.connections.push(connection);
            });

        }
    },
    /**
     * Gets a node of a type from a graph.
     * @param {Object} graph
     * @param {String} type
     * @return {Object}
     */
    getNodeOfType: function (graph, type) {
        var me = this;
        return graph.nodes.first(function (x) { return x.data.type === type; });
    },
    /**
     * Gets the nodes connected to the outputs of the node.
     * @param {Object} node 
     * @param {Object} graph
     * @return {Array}
     **/
    getNodesConnectedToOutputsOf: function (node, graph) {
        var me = this;
        var connections = graph.connections.where(function (x) {
            return x.nodes.some(function (x) { return node.id === x; });
        });

        var othernodes = connections.select(function (x) {
            return x.nodes.first(function (x) { return node.id !== x; });
        });
        return graph.nodes.where(function (x) { return othernodes.some(function (t) { return t === x.id; }) });
    },
    getZoneToConnectToFromInput: function (inputnode, outputnode, graph) {
        var zones = graph.connections.where(function (x) {
            return x.nodes.all(function (x) { return x === inputnode.id || x === outputnode.id; });
        }).select(function (x) {
            return x.zones.first(function (t) {
                return outputnode.data.nodeInputs.some(function (y) {
                    return y.id === t;
                });
            })
        });
        return zones;
    },
    createAudio: function () {
        var me = this, audio = new MEPH.audio.Audio();
        var list = me.constructAudioNodeList();
        list.foreach(function (t) {
            switch (t.node.data.type) {
                case 'MEPH.audio.graph.node.WaveShaperNode':
                    audio.waveShaper(t);
                    break;
                case 'MEPH.audio.graph.node.PannerNode':
                    audio.panner(t);
                    break;
                case 'MEPH.audio.graph.node.OscillatorNode':
                    audio.oscillator(t);
                    break;
                case 'MEPH.audio.graph.node.GainNode':
                    audio.gain(t);
                    break;
                case 'MEPH.audio.graph.node.DynamicsCompressorNode':
                    audio.dynamicsCompressor(t);
                    break;
                case 'MEPH.audio.graph.node.ChannelMergerNode':
                    audio.merger(t);
                    break;
                case 'MEPH.audio.graph.node.ChannelSplitterNode':
                    audio.splitter(t);
                    break;
                case 'MEPH.audio.graph.node.BiquadFilter':
                    audio.biquadFilter(t);
                    break;
                case 'MEPH.audio.graph.node.DelayNode':
                    audio.delay(t);
                    break;
                case 'MEPH.audio.graph.node.Convolver':
                    audio.convolver(t);
                    break;
                case 'MEPH.audio.graph.node.AudioBufferSourceNode':
                    audio.buffer(null, t);
                    break;
                default:
                    throw new Error('unhandled type : ' + t.data.type);
            }
        });
        return audio;
    },
    /**
     * Fills the list with the nodes ordered.
     * @param {Object} root
     * @param {Array} list
     * @return {Array}
     **/
    fillListWithOrderedTree: function (root, list) {
        var me = this;
        var inputs = me.getInputs(root);
        var audionode = me.constructAudioNode(root, inputs);
        list = list || [];

        list.removeWhere(function (x) { return x.node.id === audionode.node.id; });

        list.unshift(audionode);
        inputs.foreach(function (x) {
            me.fillListWithOrderedTree(x.node, list);
        });
        return list;
    },
    nodesToIgnore: function (x) {
        return x.data.type !== 'MEPH.audio.graph.node.OutputNode' &&
            x.data.type !== 'MEPH.audio.graph.node.InputNode' &&
            x.data.type !== "MEPH.audio.graph.node.GeneratedNode";
    },
    /**
     * Can get the root.
     **/
    getRoots: function () {
        var me = this,
            connections = me.getConnections(),
            nodes = me.getNodes();
        connections.foreach(function (connection) {
            connection.zones.foreach(function (zone) {
                var node = nodes.first(function (node) {
                    return me.getOutputZones(node).first(function (nz) { return nz.id === zone; });
                });
                if (node) {
                    nodes.removeWhere(function (n) { return n == node; });
                }
            });
        });


        return nodes;
        //return me.getNodes().where(function (x) {
        //    return me.getIndependentNodes(x).length === 0 && x.data.type !== 'MEPH.audio.graph.node.OutputNode'
        //    && x.data.type !== "MEPH.audio.graph.node.GeneratedNode";
        //});
    },
    getOutputZones: function (node) {
        var me = this;
        return node.data.nodeOutputs;
    },
    getInputZones: function (node) {
        var me = this;
        return node.data.nodeInputs;
    },
    /**
     * Returns true if the graph has a single root.
     *
     **/
    hasSingleRoot: function () {
        return this.getRoots().length === 1;
    },
    /**
     * Gets the root of the graph.
     * @returns {Object}
     **/
    getRoot: function () {
        return this.getRoots().first();
    },
    /**
     * Gets the nodes of the graph which are inputs of the node.
     * @param {Object} node
     * @return {Array}
     **/
    getIndependentNodes: function (node) {
        var me = this;
        var result = me.getConnections().where(function (x) {
            var cn = x.nodes.first(function (t) { return t === node.id; });
            if (cn) {
                var zone = me.getOutputZonesOfNode(cn, x.zones);
                return zone;
            }
            return false;
        }).select(function (x) {
            var cn = x.nodes.first(function (t) { return t !== node.id; });

            return me.getNodeById(cn);
        });

        return result;
    },

    getOutputZonesOfNode: function (nodeid, zones) {
        var me = this, res = me.getZonesOfNode(nodeid);
        return res.outputs.first(function (t) {
            return zones.some(function (x) {
                return x === t.id;
            });
        });
    },
    getInputZonesOfNode: function (nodeid, zones) {
        var me = this, res = me.getZonesOfNode(nodeid);
        return res.inputs.first(function (t) {
            return zones.some(function (x) {
                return x === t.id;
            });
        });
    },
    getZonesOfNode: function (nodeId) {
        var me = this;
        return {
            inputs: me.getNodeById(nodeId).data.nodeInputs,
            outputs: me.getNodeById(nodeId).data.nodeOutputs
        };
    },
    getZone: function (id) {
        var me = this, nodes = me.getNodes();
        return nodes.selectFirst(function (node) {
            var z = me.getZonesOfNode(node.id);
            return z.inputs.first(function (y) { return y.id === id; }) ||
                z.outputs.first(function (y) { return y.id === id; });
        });
    },
    getNodeByZone: function (zone) {
        var me = this, nodes = me.getNodes();
        return nodes.first(function (node) {
            var zd = me.getZonesOfNode(node.id);
            return zd.inputs.first(function (t) { return t === zone; }) ||
                zd.outputs.first(function (t) { return t === zone; })

        })
    },
    /**
     * Gets the node's input connections.
     * @param {Object} node
     * @returns {Array}
     **/
    getInputs: function (node) {
        var me = this;
        var inpedentnodes = me.getConnections().where(function (x) {

            var zones = x.zones.select(function (t) { return me.getZone(t); }).where();
            if (zones.length < 2) return false;
            var target = zones.first(function (t) { return !t.output; });
            return me.getNodeByZone(target) === node;
        }).select(function (x) {
            var zones = x.zones.select(function (t) { return me.getZone(t); });
            var input = zones.first(function (t) { return !t.output; });
            var output = zones.first(function (t) { return t.output; });
            var othernode = me.getNodeByZone(output);


            return {
                node: othernode,
                connection: output,
                to: input
            }
        });
        return inpedentnodes;
    },
    /**
     * Constructs the audio node.
     * @param {Object} node
     * @param {Array} inputs
     * @return {Object}
     **/
    constructAudioNode: function (node, inputs) {
        var me = this;
        switch (node.data.type) {
            case "MEPH.audio.graph.node.GainNode":
                return me.createGainNode(node, inputs);
            case 'MEPH.audio.graph.node.BiquadFilter':
                return me.createBiquadFilter(node, inputs);
            case 'MEPH.audio.graph.node.PannerNode':
                return me.createPannerNode(node, inputs);
            case 'MEPH.audio.graph.node.AudioBufferSourceNode':
                return me.createAudioBufferSourceNode(node, inputs);
            case 'MEPH.audio.graph.node.ChannelMergerNode':
                return me.createChannelMergerNode(node, inputs);
            case 'MEPH.audio.graph.node.ChannelSplitterNode':
                return me.createChannelSplitterNode(node, inputs);
            case 'MEPH.audio.graph.node.Convolver':
                return me.createConvolverNode(node, inputs);
            case 'MEPH.audio.graph.node.DelayNode':
                return me.createDelayNode(node, inputs);
            case 'MEPH.audio.graph.node.DynamicsCompressorNode':
                return me.createDynamicsCompressorNode(node, inputs);
            case 'MEPH.audio.graph.node.OscillatorNode':
                return me.createOscillatorNode(node, inputs);
            case 'MEPH.audio.graph.node.WaveShaperNode':
                return me.createWaveShaperNode(node, inputs);
            default:
                throw new Error('unhandled type : ' + node.data.type);
        }
    },
    createWaveShaperNode: function (node, inputs) {
        var me = this;
        return {
            node: node,
            buffer: me.getNodeInputValue(node, inputs, 'buffer'),
            curve: me.getNodeInputValue(node, inputs, 'curve'),
            oversample: me.getNodeInputValue(node, inputs, 'oversample')
        };
    },
    createOscillatorNode: function (node, inputs) {
        var me = this;
        return {
            node: node,
            buffer: me.getNodeInputValue(node, inputs, 'buffer'),
            detune: me.getNodeInputValue(node, inputs, 'detune'),
            frequency: me.getNodeInputValue(node, inputs, 'frequency'),
            type: me.getNodeInputValue(node, inputs, 'type')
        };
    },
    createDynamicsCompressorNode: function (node, inputs) {
        var me = this;
        return {
            node: node,
            buffer: me.getNodeInputValue(node, inputs, 'buffer'),
            knee: me.getNodeInputValue(node, inputs, 'knee'),
            ratio: me.getNodeInputValue(node, inputs, 'ratio'),
            reduction: me.getNodeInputValue(node, inputs, 'reduction'),
            release: me.getNodeInputValue(node, inputs, 'release'),
            threshold: me.getNodeInputValue(node, inputs, 'threshold'),
            attack: me.getNodeInputValue(node, inputs, 'attack')
        };
    },
    createDelayNode: function (node, inputs) {
        var me = this;
        return {
            node: node,
            buffer: me.getNodeInputValue(node, inputs, 'buffer'),
            delayTime: me.getNodeInputValue(node, inputs, 'delayTime')
        };
    },
    createConvolverNode: function (node, inputs) {
        var me = this;
        return {
            node: node,
            convobuffer: me.getNodeInputValue(node, inputs, 'convobuffer'),
            buffer: me.getNodeInputValue(node, inputs, 'buffer'),
            normalize: me.getNodeInputValue(node, inputs, 'normalize')
        };
    },
    createChannelSplitterNode: function (node, inputs) {
        var me = this;
        return {
            node: node,
            buffer: me.getNodeInputValue(node, inputs, 'buffer')
        };
    },
    createChannelMergerNode: function (node, inputs) {
        var me = this;
        return {
            node: node,
            buffer: me.getNodeInputValue(node, inputs, 'buffer'),
            buffer2: me.getNodeInputValue(node, inputs, 'buffer2'),
            buffer3: me.getNodeInputValue(node, inputs, 'buffer3'),
            buffer4: me.getNodeInputValue(node, inputs, 'buffer4')
        };
    },
    createAudioBufferSourceNode: function (node, inputs) {
        var me = this;
        return {
            node: node,
            source: me.getNodeInputValue(node, inputs, 'source'),
            loop: me.getNodeInputValue(node, inputs, 'loop'),
            loopEnd: me.getNodeInputValue(node, inputs, 'loopEnd'),
            loopStart: me.getNodeInputValue(node, inputs, 'loopStart'),
            playbackRate: me.getNodeInputValue(node, inputs, 'playbackRate')
        };
    },
    createPannerNode: function (node, inputs) {
        var me = this;
        return {
            node: node,
            coneInnerAngle: me.getNodeInputValue(node, inputs, 'coneInnerAngle'),
            coneOuterAngle: me.getNodeInputValue(node, inputs, 'coneOuterAngle'),
            coneOuterGain: me.getNodeInputValue(node, inputs, 'coneOuterGain'),
            refDistance: me.getNodeInputValue(node, inputs, 'refDistance'),
            maxDistance: me.getNodeInputValue(node, inputs, 'maxDistance'),
            rolloffFactor: me.getNodeInputValue(node, inputs, 'rolloffFactor'),
            panningModel: me.getNodeInputValue(node, inputs, 'panningModel'),
            buffer: me.getNodeInputValue(node, inputs, 'buffer')
        }
    },
    createBiquadFilter: function (node, inputs) {
        var me = this,
            q = me.getNodeInputValue(node, inputs, 'q'),
            frequency = me.getNodeInputValue(node, inputs, 'frequency'),
            gain = me.getNodeInputValue(node, inputs, 'gain'),
            type = me.getNodeInputValue(node, inputs, 'type'),
            detune = me.getNodeInputValue(node, inputs, 'detune'),
            buffer = me.getNodeInputValue(node, inputs, 'buffer');

        return {
            node: node,
            Q: q,
            frequency: frequency,
            detune: detune,
            gain: gain,
            type: type,
            buffer: buffer
        }
    },
    /**
     * Create gain node.
     * @param {Object} node
     * @param {Array} inputs
     * @return {Object}
     **/
    createGainNode: function (node, inputs) {
        var me = this,
            gain = me.getNodeInputValue(node, inputs, 'gain'),
            buffer = me.getNodeInputValue(node, inputs, 'buffer');

        return {
            node: node,
            gain: gain,
            buffer: buffer
        }
    },
    /**
     * Gets the nodes input value.
     * @param {Object} node
     * @param {Array} inputs
     * @param {String} name
     * @return {Number/String/Object}
     **/
    getNodeInputValue: function (node, inputs, name) {
        var me = this;
        var input = me.getNodeInput(node, name),
            value;
        if (!input) return null;
        switch (input.type) {
            case 'Number':
                value = isNaN(input.defaultValue) ? null : parseFloat(input.defaultValue);
                break;
            case 'Boolean':
                value = (input.defaultValue && input.defaultValue.toLowerCase() === 'true') ? true : false;
                break;
            default:
                value = input.defaultValue || null;
                break;
        }
        var inp = inputs.first(function (x) { return x.to.name === name; })
        if (inp) {
            return inp.connection;
        }
        return value;
    },
    getNodeInput: function (node, name) {
        return node.data.nodeInputs.first(function (x) { return x.name === name; })
    },
    /**
     * Gets node by id.
     * @param {String} id
     * @returns {Object}
     **/
    getNodeById: function (id) {
        var me = this;
        return me.getNodes().first(function (x) { return x.id === id; });
    }
});﻿MEPH.define('MEPH.audio.music.instrument.SoundFontInstrument', {
    extend: 'MEPH.audio.music.instrument.Instrument',
    alternateNames: ['SoundFontInstrument'],
    requires: ['MEPH.audio.soundfont.SoundFontParser',
        'MEPH.audio.Audio',
        'MEPH.graph.Node',
        'MEPH.audio.soundfont.chunks.data.operators.OperatorFactory',
        'MEPH.audio.Constants',
        'MEPH.audio.soundfont.utils.SFByteArray',
        'MEPH.audio.soundfont.utils.NoteSampleDecoder'],
    statics: {
        soundFontParse: null,
        $resources: null,
        $decoder: null,
        getSoundFontParse: function () {
            SoundFontInstrument.soundFontParse = SoundFontInstrument.soundFontParse || new MEPH.audio.soundfont.SoundFontParser();
            return SoundFontInstrument.soundFontParse;
        },
        getResources: function () {
            SoundFontInstrument.$resources = SoundFontInstrument.$resources || [];
            return SoundFontInstrument.$resources;
        },
        getResource: function (file) {
            return SoundFontInstrument.getResources().first(function (x) { return x.file === file; });
        }
    },
    properties: {
        $samplerate: 44100,
        $soundfontfile: null,
        $soundfont: null
    },
    setFontFile: function (file, type) {
        var me = this;
        me.$soundfontfile = file;
        me.$type = type || '.sf2';
    },
    ready: function (option) {
        var me = this,
            toload = me.getResourcesToLoad();
        return Promise.all(toload.select(function (x) {
            var fontinstrument = {
                file: x.file,
                type: x.type
            };
            SoundFontInstrument.getResources().push(fontinstrument);
            return me.load(x.file, x.type, option).then(function (res) {
                fontinstrument.result = res;
            });;
        })).then(function () {
            return true;
        }).catch(function (e) {
            MEPH.Log(e);
            return false;
        });
    },
    addResource: function (file, type, res, id) {
        var me = this;
        SoundFontInstrument.getResources().push({
            file: file,
            type: type,
            result: res,
            id: id
        });
    },
    /*
     * Loads a resouce.
     **/
    load: function (file, type, options) {
        var me = this,
            result = SoundFontInstrument.getResources().first(function (x) {
                return x.file === file && x.type === type;
            });
        if (result && result.result) {
            return Promise.resolve().then(function () {
                return result.result;
            });
        }
        return MEPH.loadJSCssFile(file, type).then(function (result) {
            return result.response;
        })
    },
    getResourcesToLoad: function () {
        var me = this;
        var files = [{
            file: MEPH.getClassPath(me.$soundfontfile) + me.$type,
            type: 'audio'
        }];

        return files;
    },
    getFontResource: function (name) {
        var me = this,
            fr = SoundFontInstrument.getResource(name || (MEPH.getClassPath(me.$soundfontfile) + me.$type));
        return fr.result;
    },
    presets: function () {
        var me = this,
            soundfont = me.getSoundFont();
        if (soundfont) {
            return soundfont.getPresets();
        }
    },
    /**
     * Returns a notes frequency.
     **/
    noteToFrequency: function (note)//: int = 60.0  //: Number
    {
        note = note || 60;
        return 440.0 * Math.pow(2.0, (note + 3.0) / 12.0 - 6.0);
    },
    /**
     * Sets/Gets the sample rate of the sound font.
     ***/
    samplerate: function (rate) {
        var me = this;
        if (rate !== undefined) {
            me.$samplerate = rate;
        }

        return me.$samplerate;
    },
    getSoundFont: function () {
        var me = this;
        return me.$soundfont;
    },
    decoder: function (notesample) {
        var $decoder = new MEPH.audio.soundfont.utils.NoteSampleDecoder(notesample);
        return $decoder;
    },
    /**
     * Gets the buffer array for the key and velocity
     * @param {Number } key 
     * @param {Number } velocity
     **/
    note: function (key, velocity, duration) {
        var me = this;
        var audio = new MEPH.audio.Audio();
        var notesample = me.selectPreset().notesample(key, velocity);
        var decoder = me.decoder(notesample);

        var startPos = notesample.getStart();
        var endPos = notesample.getEnd();

        var startloop = notesample.getLoopStart();
        var endloop = notesample.getLoopEnd();
        var sampleraite = me.samplerate();
        duration = Math.round(duration * sampleraite) || (endPos - startPos);

        var target = new ArrayBuffer(duration * 8);
        var finaltarget = new SFByteArray(target);
        decoder.extract(finaltarget, (duration) / 2, 0, sampleraite);
        var resource = me.converFloat32(finaltarget._dataview);

        var myArrayBuffer = audio.createBuffer(2, resource.length / 2, sampleraite);
        var data1 = myArrayBuffer.getChannelData(0);
        var data2 = myArrayBuffer.getChannelData(1);

        for (var i = 0 ; i < resource.length / 2; i++) {
            data1[i] = resource[2 * i];
            data2[i] = resource[(2 * i) + 1];
        }

        return myArrayBuffer;
    },

    nodeprocessor: function (key, velocity, percussion) {
        var me = this;
        var notesample = me.selectPreset().notesample(key, velocity),
            decoder = me.decoder(notesample),
            endPos = notesample.getEnd(),
            startPos = notesample.getStart();

        var startloop = notesample.getLoopStart() / 2,
            endloop = notesample.getLoopEnd() / 2,
            sampleraite = me.samplerate(),
            start = startPos / 2,
                end = endPos / 2;
        startloop = startloop - start;
        endloop = endloop - start;

        decoder.setup(sampleraite);

        var currenttime = 0;
        var complete = false;
        var context = undefined;
        var playing = false;
        var stopcallback = undefined;
        var offlinemode = false;
        var playtime = undefined;
        var stoptime;
        var processTimeCounter = 0;
        var closureid = MEPH.GUID();
        var res = function (audioProcessingEvent) {
            var output = audioProcessingEvent.outputBuffer;
            var finaltarget = [].interpolate(0, audioProcessingEvent.outputBuffer.numberOfChannels, function (channel) {
                return output.getChannelData(channel);
            })
            if (playtime === undefined) {
                return;
            }
            var obl = audioProcessingEvent.outputBuffer.length;
            var sr = audioProcessingEvent.outputBuffer.sampleRate;
            if (offlinemode) {
                processTimeCounter += obl;
                if (offlinemode && playtime > (processTimeCounter / sr)) {
                    return;
                }
            }
            var startsample = 0;
            if (!offlinemode && (playtime <= audioProcessingEvent.playbackTime && !playing) ||
                (offlinemode && playtime <= (processTimeCounter / sr) && !playing)) {
                playing = true;
                if (offlinemode) {
                    var psr = Math.round(playtime * sr);
                    startsample = obl - (processTimeCounter - psr);
                }
                currenttime = 0;
                if (closureid) { }
            }
            if ((!offlinemode && (stoptime !== undefined && stoptime <= audioProcessingEvent.playbackTime && playing)) ||
                (offlinemode && (stoptime !== undefined && stoptime <= (processTimeCounter / sr) && playing))) {
                if (stopcallback) stopcallback();
                return;
            }

            //if (complete) {
            //    return;
            //}
            var duration = obl;
            var length = finaltarget.length;
            for (var i = length ; i--;) {
                for (var sample = startsample ; sample < duration; sample++) {
                    if (currenttime >= endloop && !percussion) {
                        currenttime = startloop;
                    }
                    var startPosition = currenttime + startPos / 2;
                    startPosition = (startPosition << 1);

                    var bytes = decoder._decoder._bytes;
                    bytes.position = startPosition;
                    if (endPos <= startPosition) {
                        finaltarget[i][sample] = 0;
                    }
                    else {
                        var amplitude = bytes._dataview.getInt16(bytes.position, bytes.endian) * 3.051850947600e-05;
                        finaltarget[i][sample] = amplitude;// Math.random() - .5; //decodedtarget[currenttime];
                    }
                    currenttime++;
                }
            }
        }
        res = res.bind(me);;
        res.context = function (cont, offline) {
            context = cont;
            offlinemode = offline;
        }
        res.start = function (delay) {
            playtime = delay;
            playing = false;
            currenttime = 0;
            processTimeCounter = 0;
        }
        res.stop = function (delay, callback) {
            stoptime = delay;
            stopcallback = callback;
            currenttime = endPos;
        }
        return res;
    },
    createNoteGraph: function (id, name) {

        var graph = new MEPH.graph.Graph(),
            node,
            audiobuffer = new MEPH.audio.graph.node.AudioBufferSourceNode();

        node = new MEPH.graph.Node();
        node.setId(MEPH.GUID());
        audiobuffer.id = MEPH.GUID();
        audiobuffer.setNodeInputDefaultValue('source', id)
        node.appendData(audiobuffer);
        node.data = audiobuffer;
        graph.addNode(node);
        var result = graph.saveGraph();
        result.id = result.id || MEPH.GUID();
        result.name = name;
        audiobuffer.destroy();
        MEPH.publish(MEPH.audio.Constants.AUDIO_GRAPH_SAVED, result);
        return result;
    },
    sampleChunks: function () {
        var me = this;
        return me.$soundfont._data.dataChunk.samplesSubchunk.records.select();
    },
    trimResource: function (resource) {
        var start = resource.firstIndex(function (x) { return x !== 0; });
        var end = resource.lastIndex(function (x) { return x !== 0; });
        if (end % 2) {
            end = Math.min(end + 1, resource.length)
        }
        resource = resource.subset(start, end);
        return resource;
    },
    loadDataUri: function (datauri) {
        var toResolve,
            promise = new Promise(function (r) {
                toResolve = r;
            })
        var XHR = new XMLHttpRequest();
        XHR.open('GET', datauri, true);
        XHR.responseType = 'arraybuffer';
        XHR.onload = function () {

            toResolve(XHR.response)
        };

        XHR.onerror = function () {
            toFail({ error: new Error('AudioSampleLoader: XMLHttpRequest called onerror') })
        };
        XHR.send();
        return promise;
    },
    converFloat32: function (data) {
        var data_0_255 = new Float32Array(data.byteLength / 4);
        //for (var j = 0 ; j < 2 ; j++)
        for (var i = 0; i < data.byteLength / 4; i++) {
            var flo = data.getFloat32(i * 4, true)
            data_0_255[i] = flo;
            //data_0_255[i + (j * data.length)] = Math.max(.01 * data_0_255[i], ((data.length - i) / data.length) * data_0_255[i]);
        }
        return data_0_255;
    },
    convert255: function (data) {
        var data_0_255 = [];
        //for (var j = 0 ; j < 2 ; j++)
        for (var i = 0; i < data.byteLength / 4; i++) {
            var flo = data.getFloat32(i * 4, true)
            data_0_255[i] = 128 + Math.round(127 * flo);
            //data_0_255[i + (j * data.length)] = Math.max(.01 * data_0_255[i], ((data.length - i) / data.length) * data_0_255[i]);
        }
        return data_0_255;
    },
    /**
     * Gets a note sample with the key and velocity.
     * @param {Number} keyNum
     * @param {Number} velocity
     ****/
    notesample: function (keyNum, velocity) {
        var me = this;
        var soundfont = me.getSoundFont();
        keyNum = keyNum || 60;
        velocity = velocity || 100;
        var notesample = soundfont.getNoteSample(keyNum, velocity);
        return notesample;
    },
    selectPreset: function (preset) {
        var me = this,
            soundfont = me.getSoundFont(),
            presetIds = soundfont.getPresetIds();

        preset = preset || presetIds.first() || 0;
        if (preset !== null) {
            soundfont.selectPreset(preset);
        }

        return me;
    },
    prepare: function (name) {
        var me = this;
        var soundfont = me.parse(name);
        me.$soundfont = soundfont;
        return Promise.resolve().then(function () { return me.$soundfont; })
    },
    parse: function (name) {
        var parser = SoundFontInstrument.getSoundFontParse();
        var me = this;
        var resource = me.getFontResource(name);
        var soundfont = parser.parse(resource);
        return soundfont;
    }
});﻿/**
* @class MEPH.graph.Graph
* Creates a graph.
*/
MEPH.define('MEPH.graph.Graph', {
    //pgx.Graph = Class.extend("pgx.Graph", {
    requires: ['MEPH.util.Observable',
                'MEPH.graph.Node'],
    properties: {
        id: null
    },

    on: function (evt, func) {
        var me = this;
        me.addListener(evt, func);
    },
    addNodes: function (nodes) {
        var me = this;
        return nodes.select(function (x) {
            return me.addNode(x);
        });
    },
    addConnection: function (connection) {
        var me = this;
        me.connections.push(connection);
    },
    getConnections: function () {
        var me = this;
        return me.connections;
    },
    getViewport: function () {
        var me = this;
        return me.$viewport;
    },
    removeConnections: function (connections) {
        var me = this;
        connections.foreach(function (x) {
            me.removeConnection(x);
        });
    },
    save: function () {
        var me = this;
        var result = {
            nodes: me.nodes.select(function (node) { return node.save(); }),
            connections: me.connections.select(function (connection) { return connection.save(); })
        };
        return result;
    },
    saveGraph: function () {
        var me = this;
        var result = {
            id: me.id || MEPH.GUID(),
            connections: me.connections.select(),
            nodes: me.nodes.select(function (x) {
                var res = {
                    id: x.id || x.$id,
                    position: x.position || x.$position,
                    data: {
                        id: x.data.id,
                        type: x.data.____type,
                        nodeInputs: x.data.nodeInputs.select(),
                        nodeOutputs: x.data.nodeOutputs.select(),
                    }
                }
                if (x.data.subGraph) {
                    res.data.subGraph = JSON.parse(JSON.stringify(x.data.subGraph))
                }
                return res;
            })
        }
        return result;
    },
    load: function (result) {
        var me = this;
        result = JSON.parse(JSON.stringify(result));
        if (result.id) {
            me.id = result.id;
        }
        var nodes = result.nodes.select(function (nodeinfo) {
            var node = new MEPH.graph.Node();
            node.setId(nodeinfo.id);
            node.setPosition(nodeinfo.position.x, nodeinfo.position.y, nodeinfo.position.z);
            node.appendData(nodeinfo.data);
            me.addNode(node);
            return node;
        });
        me.$loadedGraph = result;
        if (!me.addVewportListener && me.$viewport) {
            me.$viewport.on('newactivezone', function (options) {
                var id = options.id,
                    zone = options.zone;
                me.getConnections().where(function (conn) {
                    return me.$loadedGraph.connections.contains(function (x) {
                        return x.id === conn.getId();
                    });
                }).foreach(function (conn) {
                    var conninfo = me.$loadedGraph.connections.first(function (x) { return x.id === conn.getId() });
                    var zoneInfo = conninfo.zones.first(function (x) { return x === id });
                    if (zoneInfo) {
                        conn.addZone(zone);
                    }
                });
            });
            me.addedViewportListener = true
        }
        var connections = result.connections.select(function (connection) {
            var newconnection = new MEPH.graph.Connection();
            newconnection.setId(connection.id);
            nodes.where(function (x) {
                return connection.nodes.contains(function (y) { return y == x.getId(); })
            })
            .foreach(function (x) {
                newconnection.addNodes(x);
            });;
            newconnection.getNodes().foreach(function (x) {
                x.getZones().where(function (z) {
                    return connection.contains(z.getId());
                }).foreach(function (zones) {
                    newconnection.addZone(zones);
                });;
            });
            me.addConnection(newconnection)
        });
    },
    clearConnections: function () {
        var me = this,
            connections = me.getConnections().select(function (x) { return x; });
        me.removeConnections(connections);
    },
    removeConnection: function (connection) {
        var me = this;
        var result = me.connections.removeWhere(function (x) { return x === connection; });
        result.foreach(function (x) {
            if (x.removed) {
                x.removed();
            }
        });
        return result;
    },
    removeSelectedConnections: function () {
        var me = this;
        var connections = me.$viewport.removeSelectedConnections();
        connections.foreach(function (x) {
            me.removeConnection(x);
        })
    },
    addNode: function (node) {
        var me = this;
        node.on('click', me.onNodeClicked.bind(me, node));
        node.on('move', me.onNodeMove.bind(me, node));
        me.nodes.push(node);
        return node;
    },
    onNodeClicked: function (node) {
        var me = this;
        if (me.selectedNode !== node) {
            me.selectedNode = node;
            me.fire('nodeselected', node);
        }
    },
    onNodeMove: function (node) {
        var me = this;
        me.fire('change', {});
    },
    clear: function () {
        var me = this;
        me.removeConnections(me.getConnections().select(function (x) { return x; }));
        me.removeNodes(me.getNodes().select(function (x) { return x; }));
        me.$viewport.clear();
    },
    removeNodes: function (nodes) {
        var me = this;
        nodes.foreach(function (node) {
            me.removeNode(node);
        });
    },
    removeNode: function (node) {
        var me = this;
        var result = me.nodes.removeWhere(function (x) { return x === node; });
        result.foreach(function (x) {
            if (x.removed) {
                x.removed();
            }
        });
        return result;
    },
    getNodes: function () {
        var me = this;
        return me.nodes;
    },
    getNode: function (id) {
        var me = this;
        return me.nodes.first(function (x) { return x.getId() == id; });
    },
    initialize: function (options) {
        var me = this;
        MEPH.Events(me);
        me.nodes = MEPH.util.Observable.observable([])
            .on('beforepush', me.fire.bind(me, 'beforenodeadded'))
            .on('afterpush', me.fire.bind(me, 'afternodeadded'))
            .on('onpush', me.fire.bind(me, 'nodeadded'))
        .on('beforesplice', me.fire.bind(me, 'beforenoderemoved'))
        .on('aftersplice', me.fire.bind(me, 'afternoderemoved'))
        .on('onremove', me.fire.bind(me, 'noderemoved'))
        .on('onpush', me.fire.bind(me, 'change'))
        .on('onremove', me.fire.bind(me, 'change'));
        me.connections = MEPH.util.Observable.observable([])
            .on('beforepush', me.fire.bind(me, 'beforeconnectionadded'))
        .on('afterpush', me.fire.bind(me, 'afterconnectionadded'))
        .on('onpush', me.fire.bind(me, 'connectionadded'))
        .on('beforesplice', me.fire.bind(me, 'beforeconnectionremoved'))
        .on('aftersplice', me.fire.bind(me, 'afterconnectionremoved'))
        .on('onremove', me.fire.bind(me, 'connectionremoved'))
        .on('onpush', me.fire.bind(me, 'change'))
        .on('onremove', me.fire.bind(me, 'change'));
        me.on('connectionadded', function (type, anothertye, args) {
            var connection = args.added;
            connection[0].on('emptyconnection', function (type, conn) {
                me.removeConnection(conn);
            });
        });
    }
});﻿/**
 * @class MEPH.audio.Constants
 * Audio constants.
 **/
MEPH.define('MEPH.audio.Constants', {
    statics: {
        AUDIO_GRAPH_SAVED: 'AUDIO_GRAPH_SAVED',
        REQUEST_RECORDING: 'REQUEST_RECORDING',
        RECORDING_COMPLETE: 'RECORDING_COMPLETE',
        VIEW_RESOURCE: 'view_audiosequence_resource',
        CREATE_GRAPH:'Create_Graph'
    }
});﻿describe("MEPH/audio/Scheduler.spec.js", 'MEPH.audio.Scheduler', 'MEPH.audio.graph.AudioGraphReader', 'MEPH.audio.Audio', 'MEPH.audio.Sequence', function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });
    var graph = { "id": "ada081e9-360f-4c39-8b94-f8ca0d5c06c5", "connections": [{ "id": "740813e5-673b-4db3-bff5-78549b6a6ae6", "nodes": ["e28cfcaa-ce0b-44b8-85ca-7418315446ad", "8ad18b2b-ffda-460b-9724-78db54114b2d"], "zones": ["2274edb3-f7ec-4654-b025-ade84eae0ca8", "62fa97c7-5c33-4426-a8b2-a06db42b361f"] }, { "id": "d1849e5c-b836-49cb-bbca-e88e4795ac70", "nodes": ["301704d3-123e-4978-beb5-94e6cc6576a5", "8ad18b2b-ffda-460b-9724-78db54114b2d"], "zones": ["fb2dab09-3cf4-4682-99c0-312799dc7d84", "badb8ae4-241e-4d4e-a82c-51d5266c752c"] }], "nodes": [{ "id": "8ad18b2b-ffda-460b-9724-78db54114b2d", "position": { "x": 315, "y": 69, "z": 0 }, "data": { "id": "3f9a25fa-5b99-4d0d-8d16-743f8a597838", "type": "MEPH.audio.graph.node.ChannelMergerNode", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "62fa97c7-5c33-4426-a8b2-a06db42b361f", "options": { "count": 100 }, "output": false, "isOutput": false }, { "name": "buffer2", "title": "buffer2", "type": "AudioBuffer", "connector": null, "id": "badb8ae4-241e-4d4e-a82c-51d5266c752c", "options": null, "output": false, "isOutput": false }, { "name": "buffer3", "title": "buffer3", "type": "AudioBuffer", "connector": null, "id": "b9717c81-ada0-49f6-bc79-4bb624053f68", "options": null, "output": false, "isOutput": false }, { "name": "buffer4", "title": "buffer4", "type": "AudioBuffer", "connector": null, "id": "c13d3b8e-96cb-45f5-bd17-58206a5aac32", "options": null, "output": false, "isOutput": false }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "1cf52d40-dd19-45ac-a670-662ca3a525e3", "output": true, "isOutput": false }] } }, { "id": "e28cfcaa-ce0b-44b8-85ca-7418315446ad", "position": { "x": 0, "y": 0, "z": 0 }, "data": { "id": "8735496f-bfbd-4d5d-ae19-812925b31abd", "type": "MEPH.audio.graph.node.OscillatorNode", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "c76d48e0-2a78-47dd-bb25-da8cd084c442", "options": null, "output": false, "isOutput": false }, { "name": "detune", "title": "detune", "type": "Number", "connector": null, "id": "8c20a3e6-8604-4eec-a873-54db31c2f581", "options": { "path": "detune.value" }, "output": false, "isOutput": false }, { "name": "frequency", "title": "frequency", "type": "Number", "connector": null, "id": "4becae98-c6bb-40ea-8d73-a8db163de684", "options": { "path": "frequency.value" }, "output": false, "isOutput": false, "defaultValue": "535.71" }, { "name": "type", "title": "type", "type": "String", "connector": null, "id": "2365a498-87d8-4105-ba50-e1f419b50dba", "options": { "values": ["sine", "square", "sawtooth", "triangle", "custom"] }, "output": false, "isOutput": false }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "2274edb3-f7ec-4654-b025-ade84eae0ca8", "output": true, "isOutput": false }] } }, { "id": "301704d3-123e-4978-beb5-94e6cc6576a5", "position": { "x": 0, "y": 222, "z": 0 }, "data": { "id": "132a8faa-a8c6-4140-950c-1c213372ec50", "type": "MEPH.audio.graph.node.OscillatorNode", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "6b3ed9a4-ad45-407c-bafc-44b4a07652fa", "options": null, "output": false, "isOutput": false }, { "name": "detune", "title": "detune", "type": "Number", "connector": null, "id": "c45bbcaa-f84b-4e43-8a37-2270aa125bdd", "options": { "path": "detune.value" }, "output": false, "isOutput": false }, { "name": "frequency", "title": "frequency", "type": "Number", "connector": null, "id": "a03404dd-41c9-494b-a6e0-6179b8db7570", "options": { "path": "frequency.value" }, "output": false, "isOutput": false, "defaultValue": "1205.36" }, { "name": "type", "title": "type", "type": "String", "connector": null, "id": "973a13e1-be1f-4db2-891c-bf488be875d3", "options": { "values": ["sine", "square", "sawtooth", "triangle", "custom"] }, "output": false, "isOutput": false }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "fb2dab09-3cf4-4682-99c0-312799dc7d84", "output": true, "isOutput": false }] } }] };
    var graph2 = { "id": "e7cb0d35-ca97-4e57-8424-84608641b69c", "connections": [{ "id": "21ecc05a-8e2c-4d5b-a7ee-ee1de3611a7d", "nodes": ["373dcee4-a968-47fa-a040-b496e083d8ea", "c4dcf81d-4769-4a67-905b-174ff424d7ad"], "zones": ["c4d120b6-d21c-47bd-969d-c7d80f4560a7", "c55fdc0f-81cc-426b-93e6-fdee29a981eb"] }, { "id": "8e55bef4-3a1e-4b48-b4de-66396e0392f0", "nodes": ["c4dcf81d-4769-4a67-905b-174ff424d7ad", "38d442b4-0324-4667-91df-ba516aec69f9"], "zones": ["e346b3d2-7693-43b1-aa42-6ace286ae4fd", "eb4043b6-71c8-4b89-a970-3df331ce07a3"] }], "nodes": [{ "id": "373dcee4-a968-47fa-a040-b496e083d8ea", "position": { "x": 31, "y": 112, "z": 0 }, "data": { "id": "1513b828-012b-4e64-8d48-2620e6bd097d", "type": "MEPH.audio.graph.node.OscillatorNode", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "42ebd31f-aa63-4def-9839-472df395e6de", "options": null, "output": false, "isOutput": false }, { "name": "detune", "title": "detune", "type": "Number", "connector": null, "id": "1c286640-6d18-4b3c-96b7-ba58c829d291", "options": { "path": "detune.value" }, "output": false, "isOutput": false }, { "name": "frequency", "title": "frequency", "type": "Number", "connector": null, "id": "f9004888-b299-4287-9084-607576da143e", "options": { "path": "frequency.value" }, "output": false, "isOutput": false, "defaultValue": "4151.79" }, { "name": "type", "title": "type", "type": "String", "connector": null, "id": "c7597bcf-795d-4e1d-a861-5698ee81bae6", "options": { "values": ["sine", "square", "sawtooth", "triangle", "custom"] }, "output": false, "isOutput": false }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "c4d120b6-d21c-47bd-969d-c7d80f4560a7", "output": true, "isOutput": false }] } }, { "id": "c4dcf81d-4769-4a67-905b-174ff424d7ad", "position": { "x": 328, "y": 49, "z": 0 }, "data": { "id": "6acbfaed-94a8-47b1-a279-f868df1c929f", "type": "MEPH.audio.graph.node.DynamicsCompressorNode", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "c55fdc0f-81cc-426b-93e6-fdee29a981eb", "options": null, "output": false, "isOutput": false }, { "name": "attack", "title": "attack", "type": "Number", "connector": null, "id": "4e34e3ec-4e8d-4f64-82f1-6ef4d8ef1aea", "options": { "path": "attack.value" }, "output": false, "isOutput": false }, { "name": "knee", "title": "knee", "type": "Number", "connector": null, "id": "e17b2e5f-d60d-410c-b37a-d6223cd9f474", "options": { "path": "knee.value" }, "output": false, "isOutput": false }, { "name": "ratio", "title": "ratio", "type": "Number", "connector": null, "id": "c7b1cc74-b673-4896-bae2-f54fefcb3801", "options": { "path": "ratio.value" }, "output": false, "isOutput": false, "defaultValue": "16.79" }, { "name": "reduction", "title": "reduction", "type": "Number", "connector": null, "id": "fa9baae1-6fc5-44a5-be39-7111d667ce5e", "options": { "path": "reduction.value" }, "output": false, "isOutput": false, "defaultValue": "-16.07" }, { "name": "release", "title": "release", "type": "Number", "connector": null, "id": "b3567d4e-6eeb-4572-828c-9388c8156454", "options": { "path": "release.value" }, "output": false, "isOutput": false, "defaultValue": "0.36" }, { "name": "threshold", "title": "threshold", "type": "Number", "connector": null, "id": "24953a91-2972-4cda-a28c-af09dccca5da", "options": { "path": "threshold.value" }, "output": false, "isOutput": false, "defaultValue": "-69.64" }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "e346b3d2-7693-43b1-aa42-6ace286ae4fd", "output": true, "isOutput": false }] } }, { "id": "38d442b4-0324-4667-91df-ba516aec69f9", "position": { "x": 593, "y": 56, "z": 0 }, "data": { "id": "54e5d4c8-c55c-4a3c-b630-eb1480d51e38", "type": "MEPH.audio.graph.node.BiquadFilter", "nodeInputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "eb4043b6-71c8-4b89-a970-3df331ce07a3", "options": null, "output": false, "isOutput": false }, { "name": "q", "title": "q", "type": "Number", "connector": null, "id": "aeadc6d2-cd92-4840-8771-de3f23250753", "options": { "path": "Q.value" }, "output": false, "isOutput": false, "defaultValue": "44.6401" }, { "name": "frequency", "title": "frequency", "type": "Number", "connector": null, "id": "c43a9728-14f0-4c9f-800b-fdfdf8a92388", "options": { "path": "frequency.value" }, "output": false, "isOutput": false, "defaultValue": "133.93" }, { "name": "detune", "title": "detune", "type": "Number", "connector": null, "id": "707c60ee-a56c-4cdb-bd6b-b8f5a6fc17ed", "options": { "path": "detune.value" }, "output": false, "isOutput": false, "defaultValue": "147.32" }, { "name": "gain", "title": "gain", "type": "Number", "connector": null, "id": "f6af8b19-686b-4500-a788-c4d9b19dd51e", "options": { "path": "gain.value" }, "output": false, "isOutput": false, "defaultValue": "-30.71" }, { "name": "type", "title": "type", "type": "String", "connector": null, "id": "3eaaf589-af11-4bc9-8291-7df0f47a357f", "options": { "values": ["lowpass", "highpass", "bandpass", "lowshelf", "highshelf", "peaking", "notch", "allpass"] }, "output": false, "isOutput": false }], "nodeOutputs": [{ "name": "buffer", "title": "buffer", "type": "AudioBuffer", "connector": null, "id": "e242415f-d823-4507-9f8e-68820ebd42a0", "output": true, "isOutput": false }] } }] };

    var createSequence = function () {
        var sequence = new MEPH.audio.Sequence();
        [].interpolate(0, 10, function (i) {
            var s = new MEPH.audio.Sequence();
            var audio = new MEPH.audio.Audio();
            audio.duration(1);
            audio.oscillator({
                frequency: 440,
                detune: 10,
                type: 'sawtooth'
            });
            s.add(audio, i / 2);
            sequence.add(s, i)
        });
        return sequence;
    }
    var createSequence2 = function () {
        var sequence = new MEPH.audio.Sequence();
        [].interpolate(0, 2, function (i) {
            var s = new MEPH.audio.Sequence();
            var audio = new MEPH.audio.Audio();
            audio.duration(1);
            audio.oscillator({
                frequency: 440,
                detune: 10,
                type: 'sawtooth'
            });
            s.add(audio, i * 2);
            sequence.add(s, i)
        });
        return sequence;
    }
    var createSequence3 = function () {
        var sequence = new MEPH.audio.Sequence();
        var a = Math.log(2) / Math.log(12);
        [].interpolate(0, 2, function (i) {
            var s = new MEPH.audio.Sequence();
            var audio = new MEPH.audio.Audio();
            var f = Math.pow(2, (i) / 12) * 440;
            audio.duration(1);
            audio.oscillator({
                frequency: f,
                detune: 10,
                type: 'sawtooth'
            });
            audio.duration(.3);
            s.add(audio, i * 1.1);
            sequence.add(s, i)
        });
        return sequence;
    }
    var createSequence4 = function () {
        var reader = new MEPH.audio.graph.AudioGraphReader();
        var sequence = new MEPH.audio.Sequence();
        var a = Math.log(2) / Math.log(12);
        reader.setGraph(graph);
        [].interpolate(0, 5, function (i) {
            var s = new MEPH.audio.Sequence();
            var audio = reader.createAudio();
            audio.duration(1);

            s.add(audio, i * 1.1);
            sequence.add(s, i)
        });

        return sequence;
    }

    var createSequence5 = function () {
        var reader = new MEPH.audio.graph.AudioGraphReader();
        var sequence = new MEPH.audio.Sequence();
        var a = Math.log(2) / Math.log(12);
        reader.setGraph(graph2);
        [].interpolate(0, 5, function (i) {
            var s = new MEPH.audio.Sequence();
            var audio = reader.createAudio();
            audio.duration(1);
            s.add(audio, i * 1.1);
            sequence.add(s, i)
        });

        return sequence;
    }

    it('can create a Scheduler', function () {
        var scheduler = new MEPH.audio.Scheduler();
        expect(scheduler).toBeTruthy();
    });

    it('can set sequence to schedule', function () {
        var schedule = new MEPH.audio.Scheduler();
        schedule.sequence(createSequence());
        expect(schedule.sequence()).toBeTruthy();
    })
    it('can schedule audio nodes to play', function () {

        var scheduler = new MEPH.audio.Scheduler();
        var sequence = createSequence();
        scheduler.sequence(sequence);
        var toplay = scheduler.getAudio(0, 6);
        expect(scheduler).toBeTruthy();
        expect(toplay).toBeTruthy();
        expect(toplay.length).toBe(5);
    });


    it('can schedule scheduling incrementally ', function (done) {
        var tikked = 0;
        var scheduler = new MEPH.audio.Scheduler();
        scheduler.on('tick', function () {
            tikked++;
            if (tikked > 4) {
                expect(true).toBeTruthy();
                scheduler.stop();
                scheduler.terminate();
                done();
            }
        });
        scheduler.init().then(function () {
            scheduler.start();
        });
    });

    it('can start an oscillator ', function (done) {
        var audio = new MEPH.audio.Audio();
        audio.oscillator({
            frequency: 440,
            detune: 10,
            type: 'sawtooth'
        });
        audio.complete();
        var node = audio.get({ type: 'sawtooth' }).first();
        node.node.start(0);
        setTimeout(function () {
            node.node.stop();
            done();
        }, 1000)
    });


    it('can play a sequence ', function (done) {
        var schedule = new MEPH.audio.Scheduler();
        schedule.sequence(createSequence3());

        schedule.init().then(function () {
            schedule.play()
        }).catch(function (e) {
            schedule.stop();
            schedule.terminate();
            done();
            expect(e).caught();
        });
        schedule.on('complete', function () {
            schedule.stop();
            schedule.terminate();
            done();
        })
    });

    it('can play a sequence double input', function (done) {
        var schedule = new MEPH.audio.Scheduler();
        var sequencer = new MEPH.audio.Sequence();
        sequencer.add(createSequence4(), 0);
        sequencer.add(createSequence3(), 1);
        sequencer.add(createSequence5(), 0);
        schedule.sequence(sequencer);

        schedule.on('complete', function () {
            schedule.stop();
            schedule.terminate();
            done();
        })

        schedule.init().then(function () {
            schedule.play()
        }).catch(function (e) {
            schedule.stop();
            schedule.terminate();
            done();
            expect(e).caught();
        });

    });

    it('can render a sequence', function (done) {
        var schedule = new MEPH.audio.Scheduler();
        var sequencer = new MEPH.audio.Sequence();
        sequencer.add(createSequence4(), 0);
        sequencer.add(createSequence3(), 1);
        sequencer.add(createSequence5(), 0);
        schedule.sequence(sequencer);

        schedule.init().then(function () {
            return schedule.render().then(function (res) {
                expect(res.renderedBuffer).toBeTruthy();
                schedule.terminate();
            })
        }).catch(function (e) {
            schedule.terminate();
            expect(e).caught();
        }).then(done)

    });
});﻿// Base on
//https://raw.githubusercontent.com/mattdiamond/Recorderjs/master/recorderWorker.js

MEPH.define('MEPH.audio.Recorder', {
    requires: ['MEPH.query.QueryableWorker', 'MEPH.audio.Constants'],
    properties: {
        recBuffersL: null,
        recBuffersR: null,
        sampleRate: null
    },
    initialize: function () {
        var me = this;
        MEPH.subscribe(MEPH.audio.Constants.REQUEST_RECORDING, function (type, resource) {
            me.requestRecording(resource);
        });

    },
    setup: function (config) {
        var me = this;
        me.sampleRate = config.sampleRate;
        return me;
    },
    requestRecording: function (resource) {
        //var recorder = new MEPH.audio.Recorder();
        //recorder.setup({
        //    sampleRate: resource.buffer.buffer.sampleRate
        //}).clear();

        //var res = recorder.record([resource.buffer.buffer.getChannelData(0), resource.buffer.buffer.getChannelData(1)])
        //.exportWAV('audio/wav');
        if (!resource || !resource.buffer || !resource.buffer.buffer)
            return;
        var audio = new MEPH.audio.Audio();
        var newSource = audio.createContext().createBufferSource();
        newSource.buffer = resource.buffer.buffer;
        
        var path = MEPH.getClassPath('MEPH.audio.RecorderWorker') + '.js';
        var recorder = new _Recorder(newSource, { workerPath: path });
        recorder.recordBuffer([resource.buffer.buffer.getChannelData(0), resource.buffer.buffer.getChannelData(1)]);
        recorder.exportWAV(function (res) {
            MEPH.publish(MEPH.audio.Constants.RECORDING_COMPLETE, res);
        });

    },
    record: function (inputBuffer) {
        var me = this;

        me.recBuffersL.push(inputBuffer[0]);
        me.recBuffersR.push(inputBuffer[1]);
        me.recLength += inputBuffer[0].length;
        return me;
    },

    exportWAV: function (type) {
        var me = this;
        var bufferL = me.mergeBuffers(me.recBuffersL, me.recLength);
        var bufferR = me.mergeBuffers(me.recBuffersR, me.recLength);
        var interleaved = me.interleave(bufferL, bufferR);
        var dataview = me.encodeWAV(interleaved);
        var audioBlob = new Blob([dataview], { type: type });

        return (audioBlob);

    },

    getBuffer: function () {
        var buffers = [];
        var me = this;
        buffers.push(me.mergeBuffers(me.recBuffersL, me.recLength));
        buffers.push(me.mergeBuffers(me.recBuffersR, me.recLength));
    },

    clear: function () {
        var me = this;
        me.recLength = 0;
        me.recBuffersL = [];
        me.recBuffersR = [];
        return me;
    },

    mergeBuffers: function (recBuffers, recLength) {
        var result = new Float32Array(recLength);
        var offset = 0;
        for (var i = 0; i < recBuffers.length; i++) {
            result.set(recBuffers[i], offset);
            offset += recBuffers[i].length;
        }
        return result;
    },

    interleave: function (inputL, inputR) {
        var length = inputL.length + inputR.length;
        var result = new Float32Array(length);

        var index = 0,
          inputIndex = 0;

        while (index < length) {
            result[index++] = inputL[inputIndex];
            result[index++] = inputR[inputIndex];
            inputIndex++;
        }
        return result;
    },

    floatTo16BitPCM: function (output, offset, input) {
        for (var i = 0; i < input.length; i++, offset += 2) {
            var s = Math.max(-1, Math.min(1, input[i]));
            output.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true);
        }
    },

    writeString: function (view, offset, string) {
        for (var i = 0; i < string.length; i++) {
            view.setUint8(offset + i, string.charCodeAt(i));
        }
    },

    encodeWAV: function (samples) {
        var buffer = new ArrayBuffer(44 + samples.length * 2);
        var view = new DataView(buffer);
        var me = this;
        /* RIFF identifier */
        me.writeString(view, 0, 'RIFF');
        /* RIFF chunk length */
        view.setUint32(4, 36 + samples.length * 2, true);
        /* RIFF type */
        me.writeString(view, 8, 'WAVE');
        /* format chunk identifier */
        me.writeString(view, 12, 'fmt ');
        /* format chunk length */
        view.setUint32(16, 16, true);
        /* sample format (raw) */
        view.setUint16(20, 1, true);
        /* channel count */
        view.setUint16(22, 2, true);
        /* sample rate */
        view.setUint32(24, me.sampleRate, true);
        /* byte rate (sample rate * block align) */
        view.setUint32(28, me.sampleRate * 4, true);
        /* block align (channel count * bytes per sample) */
        view.setUint16(32, 4, true);
        /* bits per sample */
        view.setUint16(34, 16, true);
        /* data chunk identifier */
        me.writeString(view, 36, 'data');
        /* data chunk length */
        view.setUint32(40, samples.length * 2, true);

        me.floatTo16BitPCM(view, 44, samples);

        return view;
    }
}).then(function () {
    (function (window) {

        var WORKER_PATH = 'recorderWorker.js';

        var Recorder = function (source, cfg) {
            var config = cfg || {};
            var bufferLen = config.bufferLen || 4096;
            this.context = source.context;
            this.node = (this.context.createScriptProcessor ||
                         this.context.createJavaScriptNode).call(this.context,
                                                                 bufferLen, 2, 2);
            var worker = new Worker(config.workerPath || WORKER_PATH);
            worker.postMessage({
                command: 'init',
                config: {
                    sampleRate: this.context.sampleRate
                }
            });
            var recording = false,
              currCallback;

            this.node.onaudioprocess = function (e) {
                if (!recording) return;
                worker.postMessage({
                    command: 'record',
                    buffer: [
                      e.inputBuffer.getChannelData(0),
                      e.inputBuffer.getChannelData(1)
                    ]
                });
            }
            this.recordBuffer = function (e) {
                worker.postMessage({
                    command: 'record',
                    buffer: [
                      e[0],
                      e[1]
                    ]
                });
            }
            this.configure = function (cfg) {
                for (var prop in cfg) {
                    if (cfg.hasOwnProperty(prop)) {
                        config[prop] = cfg[prop];
                    }
                }
            }

            this.record = function () {
                recording = true;
            }

            this.stop = function () {
                recording = false;
            }

            this.clear = function () {
                worker.postMessage({ command: 'clear' });
            }

            this.getBuffer = function (cb) {
                currCallback = cb || config.callback;
                worker.postMessage({ command: 'getBuffer' })
            }

            this.exportWAV = function (cb, type) {
                currCallback = cb || config.callback;
                type = type || config.type || 'audio/wav';
                if (!currCallback) throw new Error('Callback not set');
                worker.postMessage({
                    command: 'exportWAV',
                    type: type
                });
            }

            worker.onmessage = function (e) {
                var blob = e.data;
                currCallback(blob);
            }

            source.connect(this.node);
            this.node.connect(this.context.destination);    //this should not be necessary
        };

        Recorder.forceDownload = function (blob, filename) {
            var url = (window.URL || window.webkitURL).createObjectURL(blob);
            var link = window.document.createElement('a');
            link.href = url;
            link.download = filename || 'output.wav';
            var click = document.createEvent("Event");
            click.initEvent("click", true, true);
            link.dispatchEvent(click);
        }

        window._Recorder = Recorder;

    })(window);
})﻿describe("MEPH/audio/Recorder.spec.js", 'MEPH.audio.Recorder', function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create a recorder', function () {
        var recorder = new MEPH.audio.Recorder();

        expect(recorder).toBeTruthy();
    });

    it('can record an audiobuffer ', function (done) {

        var audiofile = '../specs/data/The_Creek.mp3', audiofiletyp = 'mp3';

        var audio = new MEPH.audio.Audio();

        audio.load(audiofile, audiofiletyp).then(function (resource) {
            var recorder = new MEPH.audio.Recorder();
            recorder.setup({
                type: 'audio/wav',
                sampleRate: resource.buffer.buffer.sampleRate
            }).clear();

            var res = recorder.record([resource.buffer.buffer.getChannelData(0), resource.buffer.buffer.getChannelData(1)])
            .exportWAV({
                type: 'audio/wav'
            });
            
            expect(res).toBeTruthy();
        }).catch(function (e) {
            expect(e).caught();
        }).then(done);
    });

    it('can listen to request for recordings', function () {
        var called,
            recorder = new MEPH.audio.Recorder();
        
        recorder.requestRecording = function () {
            called = true;
        }
        MEPH.publish(MEPH.audio.Constants.REQUEST_RECORDING, {});

        expect(called).toBeTruthy();
    })
});﻿/**
 * @class MEPH.audio.AudioResources
 * Audio resources are tracked from this service.
 **/
MEPH.define('MEPH.audio.AudioResources', {
    requires: ['MEPH.audio.Constants',
                'MEPH.audio.Audio',
                'MEPH.graph.Graph',
                'MEPH.audio.music.instrument.SoundFontInstrument',
                'MEPH.audio.graph.AudioGraphReader'],
    statics: {
        RESOURCE_MANAGER_UPDATE: 'RESOURCE_MANAGER_UPDATE'
    },
    properties: {
        sequences: null,
        resources: null,
        graphs: null
    },
    initialize: function () {
        var me = this,
            Audio = MEPH.audio.Audio;
        me.graphReader = new MEPH.audio.graph.AudioGraphReader();
        me.resources = [];
        me.graphs = [];
        me.sequences = [];
        me.soundfonts = [];
        MEPH.subscribe(MEPH.audio.Audio.CHANGED_BUFFER_SOURCE, me.onResourcesChanged.bind(me));

        MEPH.subscribe(MEPH.audio.Constants.AUDIO_GRAPH_SAVED, me.onAudioGraphSaved.bind(me));

        if (Audio.GetSourceBuffer()) {
            Audio.GetSourceBuffer().foreach(function (t) { me.resources.push(t); })
            MEPH.publish(MEPH.audio.AudioResources.RESOURCE_MANAGER_UPDATE, {});
        }

        MEPH.subscribe(MEPH.audio.Constants.CREATE_GRAPH, function (type, id, name) {
            var graph = me.createGraph(id, name);
            MEPH.publish(MEPH.audio.Constants.AUDIO_GRAPH_SAVED, graph);
        });
    },
    addResources: function (resources) {
        var me = this, promise = Promise.resolve();


        resources.foreach(function (resource) {
            if (resource.file && resource.file.name.indexOf('.sf2') !== -1) {


                var soundfontInstrument = new MEPH.audio.music.instrument.SoundFontInstrument();
                var id = MEPH.GUID();
                soundfontInstrument.addResource(resource.file.name, '.sf2', resource.res, id);
                soundfontInstrument.setFontFile(resource.file.name);
                soundfontInstrument.samplerate();
                soundfontInstrument.prepare(resource.file.name);
                me.soundfonts.push({
                    resource: resource,
                    type: 'soundfont',
                    id: id,
                    soundfontInstrument: soundfontInstrument
                });
            }
            else if (resource.file && (resource.file.type === "audio/wav" || resource.file.type === "audio/mp3")) {
                promise = promise.then(function () {
                    var audio = new MEPH.audio.Audio();
                    return audio.loadByteArray(resource.res, null, resource.file.name, resource.file.type).then(function (buffer) {

                        var graph = me.createGraph(buffer.id, buffer.file);
                        MEPH.publish(MEPH.audio.Constants.AUDIO_GRAPH_SAVED, graph);

                    }.bind(me));
                });
            }
        });

        return promise;
    },
    createGraph: function (id, name) {
        var graph = new MEPH.graph.Graph(),
          node,
          audiobuffer = new MEPH.audio.graph.node.AudioBufferSourceNode();

        node = new MEPH.graph.Node();
        node.setId(MEPH.GUID());
        audiobuffer.id = MEPH.GUID();
        audiobuffer.setNodeInputDefaultValue('source', id)
        node.appendData(audiobuffer);
        node.data = audiobuffer;
        graph.addNode(node);
        var result = graph.saveGraph();
        result.id = result.id || MEPH.GUID();
        result.name = name;
        result.file = name;
        audiobuffer.destroy();
        return result;
    },
    collectProject: function () {
        var me = this,
            audio = new MEPH.audio.Audio(),
            result = {};
        result.graphs = me.getGraphs();
        result.resources = me.resources.select(function (x) { return audio.serializeBuffer(x); });
        result.sequences = me.sequences.select(function (x) { return JSON.stringify(x.toJSON()); });
        return result;
    },
    onAudioGraphSaved: function (type, graph) {
        var me = this;
        me.graphs.push(graph);
        MEPH.publish(MEPH.audio.AudioResources.RESOURCE_MANAGER_UPDATE, {});
    },
    onResourcesChanged: function (type, options, resources) {
        var me = this, newresources;
        newresources = (resources || []).where(function (x) {
            return !me.resources.some(function (t) {
                return t === x;
            });
        });
        me.resources.push.apply(me.resources, newresources);
        MEPH.publish(MEPH.audio.AudioResources.RESOURCE_MANAGER_UPDATE, {});
    },
    getDuration: function (id) {
        var me = this;
        debugger
        var resource = me.getResourceById(id);
        if (resource) {
            if (resource.nodes) {

                var devalue = resource.nodes.first(function (x) {
                    return x.data.type === "MEPH.audio.graph.node.AudioBufferSourceNode";
                })
                if (devalue && devalue.data && devalue.data.nodeInputs) {
                    devalue = devalue.data.nodeInputs.first(function (x) {
                        return x.title === 'source';
                    });
                    if (devalue) {
                        var bufferid = devalue.defaultValue;
                    }
                }
            }
        }

    },
    getGraphs: function () {
        var me = this;
        return me.graphs.select();
    },
    getFontGraphInstance: function (process, graphextension) {
        var me = this;
        var audio = new MEPH.audio.Audio();
        audio.processor({
            size: 1024,
            process: process
        });
        return audio;
    },
    getGraphInstance: function (id, graphextension) {
        var me = this,
            graphRecipe = me.getGraphs().first(function (x) { return x.id === id; });
        graphextension = graphextension || [];
        if (graphRecipe) {
            me.graphReader.setGraph(MEPH.audio.graph.AudioGraphReader.cloneUnique(graphRecipe));
            graphextension.foreach(function (extension) {
                me.graphReader.connectGraph(extension);
            });
            try {
                return me.graphReader.createAudio();
            }
            catch (e) {
                MEPH.Log(e);
            }
        }

        return null;
    },
    getSequenceInstance: function (id) {
        var me = this;
        return me.sequences.first(function (x) { return x.id === id; })
    },
    getSoundFontInstance: function (id) {
        var me = this;
        return id.sid + '/' + id.id;
    },
    getSoundFontAudioInstance: function (info, graphExtensions) {
        var me = this,
            id = me.getSoundFontInstance(info),
            data = me.getSoundFont(info);
        data.cache = data.cache || {};
        //if (!data.cache[id]) {

        //var buffer = { buffer: data.soundfontInstrument.note(info.id, 30) };
        var bufferid = MEPH.GUID();
        //var graph = data.soundfontInstrument.createNoteGraph(bufferid, data.resource.file.name)
        var processornode = data.soundfontInstrument.nodeprocessor(info.id, 30, true);
        data.cache[id] = {
            graphid: bufferid,
            sid: info.sid,
            id: bufferid,
            process: processornode
        }
        //me.graphs.push(graph);
        //var audio = new MEPH.audio.Audio();
        //audio.addBufferSource({
        //    sid: info.sid,
        //    id: bufferid,
        //    buffer: buffer
        //})
        //}
        return me.getFontGraphInstance(data.cache[id].process, graphExtensions);
    },
    getSoundFont: function (info) {
        var me = this;
        return me.soundfonts.first(function (x) {
            return x.id === info.sid;
        })
    },
    addSequence: function (sequence) {
        var me = this;
        if (sequence.title)
            if (me.sequences.indexOf(sequence) === -1)
                me.sequences.push(sequence);
    },
    getSequences: function () {
        var me = this;
        return me.sequences.select();
    },
    getResources: function (audioresources) {
        var me = this;
        if (audioresources) {
            return me.resources.select();
        }
        return me.graphs.select().concat(me.soundfonts.select());
    },
    getResourceById: function (id) {
        var me = this;
        var resource = me.getResources().first(function (x) {
            return x.id === id;
        });

        return resource;
    },
    clearResources: function () {
        var me = this;
        me.graphs.clear();
        me.soundfonts.clear();
    }
}).then(function () {
    return MEPH.requires('MEPH.audio.graph.node.AudioBufferSourceNode')
})﻿describe("MEPH/audio/AudioResources.spec.js", 'MEPH.audio.AudioResources', function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create an audioresources', function () {
        var audioresources = new MEPH.audio.AudioResources();

        expect(audioresources).toBeTruthy();
    });

    it('can collect everything that needs to save into a string', function () {
        var audioresources = new MEPH.audio.AudioResources();
        var res = audioresources.collectProject();

        expect(res).toBeTruthy();
    });
});﻿/**
 * @class MEPH.audio.Audio
 * Defines a base class for Audio.
 **/
MEPH.define('MEPH.audio.Audio', {
    requires: ['MEPH.util.Dom', 'MEPH.util.Observable'],
    statics: {
        /**
         * Audio context.
         */
        audioCtx: null,
        OfflineMode: false,
        sourcebuffer: null,
        CHANGED_BUFFER_SOURCE: 'CHANGED_BUFFER_SOURCE',
        nodeTypes: {
            oscillator: 'oscillator',
            gain: 'gain',
            convolver: 'convolver',
            delay: 'delay',
            audioElement: 'audioElement',
            dynamicsCompressor: 'dynamicsCompressor',
            mediastream: 'mediastream',
            waveShaper: 'waveShaper',
            analyser: 'analyser',
            splitter: 'splitter',
            processor: 'processor',
            merger: 'merger',
            periodicWave: 'periodicWave',
            panner: 'panner',
            buffer: 'buffer ',
            biquadFilter: 'biquadFilter'
        },
        GetSourceBuffer: function () {
            MEPH.audio.Audio.$sourcebuffer = MEPH.audio.Audio.$sourcebuffer || [];
            return MEPH.audio.Audio.$sourcebuffer;
        },
        GetContext: function (options) {
            var audio = new MEPH.audio.Audio();
            return audio.createContext(options);
        },
        /**
         * Does a quick analysis of resource.
         **/
        quickAnalysis: function (resource, start, end, frames) {
            var result = [];

            start = start || 0;
            end = end || resource.buffer.buffer.duration;

            var sampleRate = resource.buffer.buffer.sampleRate;
            var startframe = sampleRate * start;
            var endFrame = sampleRate * end;
            var frameCount = endFrame - startframe;
            frames = frames || 2000;
            frames = Math.min(frames, 2000);
            frames = Math.round(Math.max(1, frameCount / frames));
            for (var i = 0 ; i < resource.buffer.channelCount; i++) {
                var channeldata = resource.buffer.buffer.getChannelData(i);
                var subres = channeldata.skipEveryFromTo(Math.round(frames), Math.round(startframe), Math.round(endFrame), function (x) {
                    return x;
                });
                result.push({ channel: i, data: subres });
            }
            return result;
        },

        copy: function (resource, options) {
            var audio = new MEPH.audio.Audio();
            return audio.copyToBuffer(resource, 0, resource.buffer.buffer.duration, options);

        },

        noteFromPitch: function (frequency) {
            var noteNum = 12 * (Math.log(frequency / 440) / Math.log(2));
            return Math.round(noteNum) + 69;
        },

        frequencyFromNoteNumber: function (note) {
            return 440 * Math.pow(2, (note - 69) / 12);
        },

        centsOffFromPitch: function (frequency, note) {
            var AAudio = MEPH.audio.Audio;
            return Math.floor(1200 * Math.log(frequency / AAudio.frequencyFromNoteNumber(note)) / Math.log(2));
        },
        autoCorrelate: function (buf, sampleRate) {

            var SIZE = buf.length;
            var MIN_SAMPLES = 0;  // will be initialized when AudioContext is created.
            var MAX_SAMPLES = Math.floor(SIZE / 2);
            var best_offset = -1;
            var best_correlation = 0;
            var rms = 0;
            var foundGoodCorrelation = false;
            var correlations = new Array(MAX_SAMPLES);

            var rafID = null;
            var tracks = null;
            //var buflen = 1024;
            //var buf = new Float32Array(buflen);


            for (var i = 0; i < SIZE; i++) {
                var val = buf[i];
                rms += val * val;
            }
            rms = Math.sqrt(rms / SIZE);
            if (rms < 0.01) // not enough signal
                return -1;

            var lastCorrelation = 1;
            for (var offset = MIN_SAMPLES; offset < MAX_SAMPLES; offset++) {
                var correlation = 0;

                for (var i = 0; i < MAX_SAMPLES; i++) {
                    correlation += Math.abs((buf[i]) - (buf[i + offset]));
                }
                correlation = 1 - (correlation / MAX_SAMPLES);
                correlations[offset] = correlation; // store it, for the tweaking we need to do below.
                if ((correlation > 0.9) && (correlation > lastCorrelation)) {
                    foundGoodCorrelation = true;
                    if (correlation > best_correlation) {
                        best_correlation = correlation;
                        best_offset = offset;
                    }
                } else if (foundGoodCorrelation) {
                    // short-circuit - we found a good correlation, then a bad one, so we'd just be seeing copies from here.
                    // Now we need to tweak the offset - by interpolating between the values to the left and right of the
                    // best offset, and shifting it a bit.  This is complex, and HACKY in this code (happy to take PRs!) -
                    // we need to do a curve fit on correlations[] around best_offset in order to better determine precise
                    // (anti-aliased) offset.

                    // we know best_offset >=1, 
                    // since foundGoodCorrelation cannot go to true until the second pass (offset=1), and 
                    // we can't drop into this clause until the following pass (else if).
                    var shift = (correlations[best_offset + 1] - correlations[best_offset - 1]) / correlations[best_offset];
                    return sampleRate / (best_offset + (8 * shift));
                }
                lastCorrelation = correlation;
            }
            if (best_correlation > 0.01) {
                // console.log("f = " + sampleRate/best_offset + "Hz (rms: " + rms + " confidence: " + best_correlation + ")")
                return sampleRate / best_offset;
            }
            return -1;
            //	var best_frequency = sampleRate/best_offset;
        },
        bpm: function (buffer) {
            return new Promise(function (r) {
                var audio = new MEPH.audio.Audio();
                var context = MEPH.audio.Audio.OfflineAudioContext = new OfflineAudioContext(1, buffer.buffer.length, buffer.buffer.sampleRate);;
                audio.buffer(buffer.buffer, { name: 'buffer' }).biquadFilter({ type: 'lowpass' }).complete({
                    channels: 1,
                    length: buffer.buffer.length,
                    sampleRate: buffer.buffer.sampleRate
                });
                var oncompleted = function (e) {

                    // Filtered buffer!
                    var filteredBuffer = e.renderedBuffer;

                    var peaks,
                        initialThresold = 0.9,
                        thresold = initialThresold,
                        minThresold = 0.1,
                        minPeaks = 30;

                    do {
                        peaks = MEPH.audio.Audio.getPeaksAtThreshold(e.renderedBuffer.getChannelData(0), thresold);
                        thresold -= 0.05;
                    } while (peaks.length < minPeaks && thresold >= minThresold);


                    var intervals = MEPH.audio.Audio.countIntervalsBetweenNearbyPeaks(peaks);

                    var groups = MEPH.audio.Audio.groupNeighborsByTempo(intervals, filteredBuffer.sampleRate);

                    context.removeEventListener(oncompleted);
                    r(groups.where(function (x) {
                        return !isNaN(x.tempo);
                    }).orderBy(function (x, y) {
                        return y.count - x.count;
                    }));
                }

                var node = audio.get({ name: 'buffer' }).first();
                node.node.start(context.currentTime);

                context.startRendering();
                context.addEventListener('complete', oncompleted);
            });

        },
        /**
         * Detects silence in a ArrayBuffer
         * @param {Number} silenceLevel
         * @param {Number} fuzzyarea
         * @param {Number} jump
         * @return {Array}
         ***/
        detectSilence: function (buf, silenceLevel, fuzzyarea, jump) {
            var result = [];
            jump = jump || 1;
            fuzzyarea = fuzzyarea || 10;
            silenceLevel = silenceLevel || 0;

            var sections = Math.ceil(buf.length / fuzzyarea);
            [].interpolate(0, sections, function (sectionIndex) {

                var subset = buf.subset(sectionIndex * fuzzyarea, (sectionIndex + 1) * fuzzyarea);
                var m = subset.maximum(function (x) { return Math.abs(x); });
                var last = result.last();
                if (silenceLevel >= (m)) {

                    if (!last) {
                        result.push({
                            section: sectionIndex,
                            start: sectionIndex
                        });
                    }
                    else {
                        if (last.section >= sectionIndex - jump && last.end === undefined) { // If its the next section 
                            //combine them in to a single.
                            last.section = sectionIndex;

                        }
                        else {
                            result.push({
                                section: sectionIndex,
                                start: sectionIndex
                            });
                        }
                    }
                }
                else {
                    if (last && last.end === undefined) {
                        last.end = sectionIndex - 1;
                    }
                }
            })
            return result.select(function (x) {
                return {
                    start: x.start * fuzzyarea,
                    end: (x.end + 1) * fuzzyarea
                }
            });
        },

        /**
         * Detects pitches in a ArrayBuffer
         * @param {Number} sampleRate
         * @param {Number} fuzzyarea
         * @param {Number} jump
         * @return {Array}
         ***/
        detectPitches: function (buf, sampleRate, fuzzyarea, jump) {
            var AAudio = MEPH.audio.Audio,
                result = [];
            jump = jump || 1;
            fuzzyarea = fuzzyarea || buf.length / 2;

            var sections = Math.ceil(buf.length / fuzzyarea);
            [].interpolate(0, sections, function (sectionIndex) {

                var subset = buf.subset(sectionIndex * fuzzyarea, (sectionIndex + 1) * fuzzyarea);
                var m = AAudio.updatePitch(subset, sampleRate);
                //subset.maximum(function (x) { return Math.abs(x); });
                var last = result.last();
                if (m) {

                    if (!last) {
                        result.push({
                            section: sectionIndex,
                            start: sectionIndex,
                            key: m
                        });
                    }
                    else {
                        if (last.key.note === m.note && last.section >= sectionIndex - jump && last.end === undefined) { // If its the next section 
                            //combine them in to a single.
                            last.section = sectionIndex;

                        }
                        else {
                            if (last.key.note !== m.note && last.end === undefined) {
                                last.end = sectionIndex - 1;
                            }
                            result.push({
                                section: sectionIndex,
                                start: sectionIndex,
                                key: m
                            });
                        }
                    }
                }
                else {
                    if (last && last.end === undefined) {
                        last.end = sectionIndex - 1;
                    }
                }
            })
            return result.select(function (x) {
                return {
                    start: x.start * fuzzyarea,
                    end: (x.end + 1) * fuzzyarea,
                    key: x.key
                }
            });
        },
        updatePitch: function (buf, sampleRate) {
            var AAudio = MEPH.audio.Audio,
                pitch;

            var ac = AAudio.autoCorrelate(buf, sampleRate);
            var result = {};
            var noteStrings = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"];
            if (ac == -1) {
                result = null;
            } else {
                pitch = ac;
                var note = AAudio.noteFromPitch(pitch);
                var notestr = noteStrings[note % 12];
                var detune = AAudio.centsOffFromPitch(pitch, note);

                result.pitch = Math.round(pitch * 100) / 100;
                result.note = notestr;

                if (detune == 0) {
                } else {
                    if (detune < 0)
                        result.detune = "flat";
                    else
                        result.detune = "sharp";
                }
            }
            return result;

        },
        // https://github.com/JMPerez/beats-audio-api/blob/gh-pages/script.js
        // Function used to return a histogram of peak intervals
        countIntervalsBetweenNearbyPeaks: function (peaks) {
            var intervalCounts = [];
            peaks.foreach(function (peak, index) {
                for (var i = 0; i < 10; i++) {
                    var interval = peaks[index + i] - peak;
                    var foundInterval = intervalCounts.some(function (intervalCount) {
                        if (intervalCount.interval === interval)
                            return intervalCount.count++;
                    });
                    if (!foundInterval) {
                        intervalCounts.push({
                            interval: interval,
                            count: 1
                        });
                    }
                }
            });
            return intervalCounts;
        },
        // https://github.com/JMPerez/beats-audio-api/blob/gh-pages/script.js
        // Function used to return a histogram of tempo candidates.
        groupNeighborsByTempo: function (intervalCounts, sampleRate) {
            var tempoCounts = [];
            intervalCounts.foreach(function (intervalCount, i) {
                if (intervalCount.interval !== 0) {
                    // Convert an interval to tempo
                    var theoreticalTempo = 60 / (intervalCount.interval / sampleRate);

                    // Adjust the tempo to fit within the 90-180 BPM range
                    while (theoreticalTempo < 90) theoreticalTempo *= 2;
                    while (theoreticalTempo > 180) theoreticalTempo /= 2;

                    theoreticalTempo = Math.round(theoreticalTempo);
                    var foundTempo = tempoCounts.some(function (tempoCount) {
                        if (tempoCount.tempo === theoreticalTempo)
                            return tempoCount.count += intervalCount.count;
                    });
                    if (!foundTempo) {
                        tempoCounts.push({
                            tempo: theoreticalTempo,
                            count: intervalCount.count
                        });
                    }
                }
            });
            return tempoCounts;
        },
        // https://github.com/JMPerez/beats-audio-api/blob/gh-pages/script.js
        // Function to identify peaks
        getPeaksAtThreshold: function (data, threshold) {
            var peaksArray = [];
            var length = data.length;
            for (var i = 0; i < length;) {
                if (data[i] > threshold) {
                    peaksArray.push(i);
                    // Skip forward ~ 1/4s to get past this peak.
                    i += 10000;
                }
                i++;
            }
            return peaksArray;
        },
        analyze: function (audiofile, audiofiletyp, resolution) {
            var audio = new MEPH.audio.Audio(),
                func = function (result) {
                    if (resolution === undefined) {
                        resolution = Math.max(1, Math.round((result.buffer.buffer.duration * result.buffer.buffer.sampleRate) / 5760));
                    }
                    audio.buffer(result.buffer).volume({ name: 'volume', resolution: resolution }).gain({ name: 'gain', volume: 0 }).complete();
                    return new Promise(function (r) {

                        result.buffer.onended = function () {
                            var volume = audio.get({ name: 'volume' }).first();
                            audio.disconnect();
                            result.buffer.stop();
                            r(volume);
                        }
                        result.buffer.start();

                    });
                };
            if (arguments.length === 2) {
                return audio.load(audiofile, audiofiletyp).then(function (resource) {

                    var result = audio.copyToBuffer(resource, 0, resource.buffer.buffer.duration);
                    return func(result)
                })
            }
            else if (arguments.length === 1) {
                return func({ buffer: audiofile });
            }
        },
        /**
         * Extracts a clip from a resoure
         * @param {Object} resource
         * @param {Number} from
         * @param {Number} to
         ***/
        clip: function (resource, from, to, options) {

            var audio = new MEPH.audio.Audio();


            return audio.copyToBuffer(resource, from, to, options);
        },

        /**
         * Extracts a clip from a resoure
         * @param {Object} resource
         * @param {Number} from, frame index
         * @param {Number} to, frame index
         ***/
        clipBuffer: function (resource, from, to, options, windowing) {
            var audio = new MEPH.audio.Audio();

            return audio.copyBuffer(resource, from, to, options, null, windowing);
        },
        stretch: function (resource, by) {
            var audio = new MEPH.audio.Audio();
            var stretch = Math.round(resource.buffer.buffer.sampleRate * by);
            var intermediate = audio.copyBuffer(resource, 0, 0, null, stretch);
            return audio.copyBuffer(intermediate, 0, 0, null, resource.buffer.buffer.sampleRate);
        },
        /**
         * Creates a new resource with a section gone from a resource.
         * @param {Object} resource
         * @param {Number} from
         * @param {Number} to
         * @param {Object} options
         * @param {Object}
         ***/
        cutOutSection: function (resource, from, to, options) {
            var audio = new MEPH.audio.Audio();

            return audio.cutOutSection(resource, from, to, options);
        }
    },
    properties: {
        /**
         * Audio context.
         */
        audioCtx: null,
        nodes: null,
        sourcebuffer: null,
        $destination: null,
        title: 'Untitled',
        id: null,
        offlineContext: false
    },
    initialize: function (injections) {
        var me = this;
        MEPH.applyIf(injections, me);
        me.nodes = [];
        me.id = MEPH.GUID();
        me.sourcebuffer = [];
    },
    /**
     * Loads a resouce.
     **/
    load: function (file, type, options) {
        var me = this,
            result = me.getBufferSources().first(function (x) {
                return x.file === file && x.type === type;
            });
        if (result) {
            return Promise.resolve().then(function () {
                return result;
            });
        }
        return MEPH.loadJSCssFile(file, type).then(function (result) {
            return me.loadByteArray(result.response, options, file, type);
        })
    },
    /**
     * Loads a byte array.
     * @param {ByteArray} bytearray
     * @return {Promise}
     ***/
    loadByteArray: function (bytearray, options, file, type) {
        var me = this, toresolve, tofail,
            result = me.getBufferSources().first(function (x) {
                return x.file === file && x.type === type;
            });
        var promise = new Promise(function (r, s) {
            toresolve = r;
            tofail = s;
        });
        if (result) {

            toresolve(result);
            return promise;
        }
        var context = me.createContext(options);

        context.decodeAudioData(
          bytearray,
          function (buffer) {
              var sbuffer = me.buffersource();
              sbuffer.buffer = buffer;

              me.addBufferSource({
                  buffer: sbuffer,
                  file: file,
                  type: type
              });

              toresolve(me.getBufferSources().last());
          },
          function (e) {
              tofail(e);
          });
        return promise;
    },
    /**
     * Copies a section of a buffer to a new buffer,
     * @param {Object} resource
     * @param {Number} start
     * @param {Number} end
     **/
    copyToBuffer: function (resource, start, end, options) {
        var me = this;
        var buffer = resource.buffer;
        var rate = buffer.buffer.sampleRate;
        var channels = buffer.channelCount;
        var duration = (end - start);
        var rate = buffer.buffer.sampleRate;
        var frame_start = Math.round(start * rate);
        var frame_end = Math.round(end * rate);
        var frameCount = frame_end - frame_start;
        frameCount = Math.round(frameCount);
        return me.copyBuffer(resource, frame_start, frame_end, options);
    },
    copyBuffer: function (resource, frame_start, frame_end, options, sampleRate, windowing) {
        var me = this;
        frame_end = Math.round(frame_end) || resource.buffer.buffer.length;
        frame_start = Math.round(frame_start) || 0;
        var buffer = resource.buffer;
        var rate = buffer.buffer.sampleRate;
        var channels = buffer.channelCount;
        var frameCount = frame_end - frame_start;
        frameCount = Math.round(frameCount);
        var audioCtx = me.createContext(options);
        var myArrayBuffer = audioCtx.createBuffer(channels, frameCount, Math.min(192000, Math.max(3000, sampleRate || audioCtx.sampleRate)));

        // Fill the buffer with white noise;
        // just random values between -1.0 and 1.0
        for (var channel = 0; channel < channels; channel++) {
            // This gives us the actual array that contains the data
            var nowBuffering = myArrayBuffer.getChannelData(channel);
            var bufferdata = buffer.buffer.getChannelData(Math.min(buffer.buffer.numberOfChannels - 1, channel));
            for (var i = 0; i < frameCount; i++) {
                // Math.random() is in [0; 1.0]
                // audio needs to be in [-1.0; 1.0]
                if (windowing) {
                    nowBuffering[i] = bufferdata[i + frame_start] * (windowing[i] !== undefined ? windowing[i] : 1);
                }
                else
                    nowBuffering[i] = bufferdata[i + frame_start];
            }
        }
        var source = audioCtx.createBufferSource();

        // set the buffer in the AudioBufferSourceNode
        source.buffer = myArrayBuffer;
        return { name: MEPH.GUID(), buffer: source, type: '' };

    },
    /**
     * @private
     **/
    cutOutSection: function (resource, frame_start, frame_end, options) {
        var me = this;
        frame_end = Math.round(frame_end);
        frame_start = Math.round(frame_start);
        var buffer = resource.buffer;
        var rate = buffer.buffer.sampleRate;
        var channels = buffer.channelCount;
        var frameCount = frame_end - frame_start;
        var bufferCount = buffer.buffer.duration * rate;
        frameCount = Math.round(frameCount);
        bufferCount -= frameCount;
        frameCount = bufferCount
        var audioCtx = me.createContext(options);
        var myArrayBuffer = audioCtx.createBuffer(channels, frameCount, audioCtx.sampleRate);

        // Fill the buffer with white noise;
        // just random values between -1.0 and 1.0
        for (var channel = 0; channel < channels; channel++) {
            // This gives us the actual array that contains the data
            var nowBuffering = myArrayBuffer.getChannelData(channel);
            var bufferdata = buffer.buffer.getChannelData(channel);
            for (var i = 0; i < frameCount; i++) {
                // Math.random() is in [0; 1.0]
                // audio needs to be in [-1.0; 1.0]
                if (i < frame_start) {
                    nowBuffering[i] = bufferdata[i];
                }
                else {

                    nowBuffering[i] = bufferdata[i + frame_end];
                }
            }
        }
        var source = audioCtx.createBufferSource();

        // set the buffer in the AudioBufferSourceNode
        source.buffer = myArrayBuffer;
        return { name: MEPH.GUID(), buffer: source, type: '' };
    },
    createBuffer: function (channels, frameCount, sampleRate, options) {//2, frameCount, audioCtx.sampleRate
        var me = this;
        var audioCtx = me.createContext(options);
        return audioCtx.createBuffer(channels, frameCount, sampleRate);
    },
    /**
     * Serializes a buffer object in to a string.
     * @param {Object} bufferObject
     **/
    serializeBuffer: function (bufferObject) {
        var me = this, res = {};
        res.name = bufferObject.name;
        res.type = bufferObject.type;
        var bufer = [].interpolate(0, bufferObject.buffer.numberOfChannels, function (channel) {
            var data = bufferObject.buffer.getChannelData(channel);
            return {
                channel: channel,
                data: [].interpolate(0, data.length, function (x) { return data[x]; })
            }
        });
        res.sampleRate = bufferObject.buffer.sampleRate;
        res.buffer = bufer;
        res.id = bufferObject.id;
        return btoa(JSON.stringify(res));
    },
    /**
     * Deserializes a string in to a buffer.
     **/
    deserializeBuffer: function (bufferString) {
        var me = this;
        var jsonstring = atob(bufferString);
        var obj = JSON.parse(jsonstring);
        var channels = obj.buffer.length;
        var frameCount = obj.buffer.first().data.length;
        var source = me.createContext().createBuffer(channels, frameCount, obj.sampleRate);
        obj.buffer.foreach(function (channelData, i) {
            var data = source.getChannelData(channelData.channel);
            channelData.data.foreach(function (t, y) {
                data[y] = t;
            });
        });
        return {
            name: obj.name,
            type: obj.type,
            buffer: source,
            id: obj.id
        }
    },
    /**
     * Sets the duration to be played.
     **/
    duration: function (time) {
        var me = this;
        if (time !== undefined) {
            this.$duration = time;
        }
        return this.$duration;
    },
    getSourceDuration: function () {
        var me = this;
        var duration = me.nodes.where(function (x) {
            return x.type === MEPH.audio.Audio.nodeTypes.buffer;
        }).maximum(function (node) {
            return node.buffer.duration;
        })
        return duration || 0;
    },
    getBufferSources: function () {
        var me = this, Audio = MEPH.audio.Audio;
        Audio.$sourcebuffer = Audio.$sourcebuffer || [];
        return MEPH.audio.Audio.$sourcebuffer.select();
    },

    /**
     * Gets the array buffer by id.
     * @param {String} id
     * @return {ArrayBuffer}
     **/
    getBuffer: function (id) {
        var me = this;
        var buffer = me.getBufferSources().first(function (x) { return x.id === id; });
        if (buffer && buffer.buffer && buffer.buffer.buffer) {
            return buffer.buffer.buffer;
        }
        else if (buffer && buffer.buffer) {
            return buffer.buffer;
        }
    },
    /**
     * Adds a buffer source.
     * @param {Object} options
     * @return {Array}
     ***/
    addBufferSource: function (options) {
        var me = this, Audio = MEPH.audio.Audio;

        Audio.$sourcebuffer = Audio.$sourcebuffer || ([]);//MEPH.util.Observable.observable
        options.id = options.id || MEPH.GUID();
        Audio.$sourcebuffer.push(options);
        MEPH.publish(MEPH.audio.Audio.CHANGED_BUFFER_SOURCE, options, Audio.$sourcebuffer);
        return options;
    },
    /**
     * Remove buffer source by id.
     * @param {String} id
     * @return {Array}
     ***/
    removeBufferSource: function (id) {
        var Audio = MEPH.audio.Audio;
        if (Audio.$sourcebuffer) {
            MEPH.publish(MEPH.audio.Audio.CHANGED_BUFFER_SOURCE, Audio.$sourcebuffer);
            return Audio.$sourcebuffer.removeWhere(function (t) { return t.id === id; });
        }
        return null;
    },
    clearContext: function () {
        var me = this;
        me.audioCtx = null;
        me.offlineAudioCtx = null;
        //MEPH.audio.Audio.OfflineAudioContext = null;
        //MEPH.audio.Audio.AudioContext = null;
        return me;
    },
    createContext: function (options) {
        var me = this;
        if (options || me.offlineMode || MEPH.audio.Audio.OfflineMode) {
            me.offlineMode = true;
            options = options || {};
            var audioCtx = MEPH.audio.Audio.OfflineAudioContext || me.offlineAudioCtx ||
                new (window.OfflineAudioContext)(options.channels || 32, options.length || 10000, options.sampleRate || 44100);
            if (options) {
                audioCtx.addEventListener('complete', options.oncomplete);
            }
            MEPH.audio.Audio.OfflineAudioContext = audioCtx;
            //MEPH.audio.Audio.AudioContext = me.audioCtx;
            me.currentContext = audioCtx;
            return audioCtx;
        }
        else {
            me.audioCtx = MEPH.audio.Audio.AudioContext || me.audioCtx || new (window.AudioContext || window.webkitAudioContext)();
            MEPH.audio.Audio.AudioContext = me.audioCtx;

            me.currentContext = audioCtx;
            return me.audioCtx;
        }
    },
    getContext: function () {
        var me = this;
        return me.currentContext;
    },
    getAudioContext: function () {
        var me = this;
        return me.audioCtx;
    },
    buffersource: function (options) {
        var me = this;
        var context = me.createContext(options);
        return context.createBufferSource();
    },
    buffer: function (buffer, options) {
        var me = this;
        options = options || { name: 'buffer' };

        if (!buffer && options.source) {
            var res = MEPH.audio.Audio.$sourcebuffer.first(function (x) { return x.id === options.source; })
            if (res) {
                buffer = res.buffer.buffer;
            }
        }
        if (!buffer && MEPH.audio.Audio.$sourcebuffer) {
            var res = MEPH.audio.Audio.$sourcebuffer.first(function (x) { return x; })
            if (res) {
                buffer = res.buffer.buffer;
            }
        }
        options.buffer = buffer instanceof AudioBufferSourceNode ? buffer.buffer : buffer;
        options.noinputs = true;
        me.nodes.push({ options: options, buffer: buffer, type: MEPH.audio.Audio.nodeTypes.buffer })
        return me;
    },
    /**
     * Analyses the volume. This doesnt really work at all.
     * @param {Object} options
     * @param {Number} options.resolution
     **/
    volume: function (options) {
        var me = this;
        var context = me.createContext();

        // Create a ScriptProcessorNode with a bufferSize of 4096 and a single input and output channel
        var scriptNode = context.createScriptProcessor(4096, 1, 1);

        var nodecontext = { options: options || null, node: scriptNode };
        me.nodes.push(nodecontext);
        nodecontext.data = [];
        // Give the node a function to process audio events
        scriptNode.onaudioprocess = function (nodecontext, audioProcessingEvent) {
            // The input buffer is the song we loaded earlier
            var inputBuffer = audioProcessingEvent.inputBuffer;

            // The output buffer contains the samples that will be modified and played
            var outputBuffer = audioProcessingEvent.outputBuffer;
            // Loop through the output channels (in this case there is only one)
            for (var channel = 0; channel < outputBuffer.numberOfChannels; channel++) {
                var inputData = inputBuffer.getChannelData(channel);
                var outputData = outputBuffer.getChannelData(channel);

                // Loop through the 4096 samples
                for (var sample = 0; sample < inputBuffer.length; sample++) {
                    // make output equal to the same as the input
                    outputData[sample] = inputData[sample];
                    var data = {};
                    if (sample % (options.resolution || 32) === 0) {
                        data[channel] = { amplitude: 0, num: 0 };
                        data[channel].amplitude += Math.pow((inputData[sample]), 2);
                        data[channel].num++;
                        nodecontext.data.push({ channels: data });
                    }
                }
            }
        }.bind(me, nodecontext);
        return me;
    },
    /**
     * Processor node.
     * @param {Object} options
     * @param {Number} options.resolution
     **/
    processor: function (options) {
        var me = this;
        var context = me.createContext();
        if (!options || !options.process) {
            throw new Error('Processor requires a process function.')
        }
        // Create a ScriptProcessorNode with a bufferSize of 4096 and a single input and output channel
        //        var scriptNode = context.createScriptProcessor(options.size || 1024, 1, 1);

        var nodecontext = {
            options: options || null,
            //   node: scriptNode,
            processor: options.process,
            type: MEPH.audio.Audio.nodeTypes.processor
        };
        me.nodes.push(nodecontext);
        nodecontext.data = [];
        // Give the node a function to process audio events
        //    scriptNode.onaudioprocess = options.process;

        return me;
    },
    /**
     * Creates an oscillator node
     **/
    oscillator: function (options) {
        var me = this,
            params = me.createK().concat(me.createA('frequency', 'detune')).concat(me.createS('type'));
        options = options || {};
        options.noinputs = true;
        me.createNode(options, function () {
            return MEPH.audio.Audio.nodeTypes.oscillator;
        }, params)
        return me;
    },
    mediastream: function (options) {
        var me = this,
            params = [];

        options = options || {};
        if (!options.stream) {
            MEPH.util.Dom.getUserMedia({
                audio: true
            }).then(function (stream) {
                options.stream = stream;
            }).then(function () {
                if (options.callback)
                    options.callback(options.stream);
            })
        }

        me.createNode(options, function () {
            return MEPH.audio.Audio.nodeTypes.mediastream;
        }, params)
        return me;
    },
    /**
     * The ConvolverNode interface is an AudioNode that performs a Linear Convolution on a given AudioBuffer, often used to achieve a reverb effect. A ConvolverNode always has exactly one input and one output.
     * @param {Object} options
     * @return {MEPH.audio.Audio}
     **/
    convolver: function (options) {
        var me = this, params = me.createK().concat(me.createA()).concat(me.createParams('boolean', 'normalize'));
        var convobuffer = me.createParams('buffer', 'convobuffer').first();
        convobuffer.alias = 'buffer';
        params.push(convobuffer);

        me.createNode(options, function () { return MEPH.audio.Audio.nodeTypes.convolver }, params)
        return me;
    },
    delay: function (options) {
        var me = this, params = me.createK().concat(me.createA('delayTime'));

        me.createNode(options, function () { return MEPH.audio.Audio.nodeTypes.delay }, params)
        return me;
    },
    dynamicsCompressor: function (options) {
        var me = this, params = me.createK('attack', 'knee', 'ratio', 'reduction', 'release', 'threshold').concat(me.createA());

        me.createNode(options, function () {
            return MEPH.audio.Audio.nodeTypes.dynamicsCompressor
        }, params)
        return me;

    },
    waveShaper: function (options) {
        var me = this, params = me.createS('oversample').concat(me.createParams('float32array', 'curve'));

        me.createNode(options || null, function () { return MEPH.audio.Audio.nodeTypes.waveShaper; }, params)
        return me;

    },
    audioelement: function (node, options) {
        var me = this;
        options = options || {};
        options.node = node;

        me.createNode(options || null, function () {
            return MEPH.audio.Audio.nodeTypes.audioElement;
        });

        return me;
    },
    analyser: function (options) {
        var me = this, params = me.createS().concat(me.createParams('plainNumber', 'fftSize', 'frequencyBinCount', 'maxDecibels', 'minDecibels', 'smoothingTimeConstant'));

        me.createNode(options || null, function () { return MEPH.audio.Audio.nodeTypes.analyser; }, params)
        return me;
    },
    splitter: function (options) {
        var me = this;
        options = options || {};
        options.splitIndex = 0;
        me.setChannels(options);
        me.createNode(options || null, function () { return MEPH.audio.Audio.nodeTypes.splitter; })
        return me;
    },
    merger: function (options) {
        var me = this;
        options = options || {};
        options.mergeIndex = 0;
        me.setChannels(options);
        me.createNode(options, function () { return MEPH.audio.Audio.nodeTypes.merger; })
        return me;
    },
    setChannels: function (options) {
        var me = this;
        if (options && options.buffer && options.buffer.id) {

            var count = me.nodes.count(function (node) {
                if (node && node.options && node.options.node && node.options.node.data && node.options.node.data.nodeOutputs)
                    return node.options.node.data.nodeOutputs.some(function (y) {
                        return y.id === options.buffer.id;
                    });
                return false;
            });
            if (count > 2) {
                options.channels = count;
            }
        }
    },
    periodicWave: function (options) {
        var me = this;

        me.createNode(options, function () { return MEPH.audio.Audio.nodeTypes.periodicWave; })
        return me;

    },
    panner: function (options) {
        var me = this;
        var context = me.createContext(),
            params = me.createParams('valueType', 'coneOuterAngle', 'coneInnerAngle', 'coneOuterGain', 'refDistance', 'maxDistance', 'rolloffFactor', 'panningModel');

        me.createNode(options, function () {
            return MEPH.audio.Audio.nodeTypes.panner
        }, params);
        return me;

    },
    createNode: function (options, func, params) {
        var me = this;
        var context = me.createContext();

        var node = func();

        me.nodes.push({ params: params, options: options || null, type: node });

        return me;
    },
    createK: function () {
        var me = this, args = MEPH.Array(arguments);
        return me.createParams.apply(me, ['k'].concat(args.select()))
    },
    createA: function () {
        var me = this, args = MEPH.Array(arguments);
        return me.createParams.apply(me, ['a'].concat(args.select()));
    },
    createS: function () {
        var me = this, args = MEPH.Array(arguments);
        return me.createParams.apply(me, (['S'].concat(args.select())));
    },
    createParams: function () {
        var me = this, args = MEPH.Array(arguments);
        var type = args.first();
        return args.subset(1).select(function (name) {
            return {
                type: type,
                name: name
            }
        });
    },
    biquadFilter: function (options) {
        var me = this, params = me.createK('Q', 'frequency', 'gain').concat(me.createA('detune')).concat(me.createS('type'));

        me.nodes.push({ params: params, options: options || null, type: MEPH.audio.Audio.nodeTypes.biquadFilter });

        return me;

    },
    play: function (delay) {
        var me = this;
        delay = delay || 0;
        me.nodes.where(function (x) {
            return x.type === MEPH.audio.Audio.nodeTypes.oscillator || x.type === MEPH.audio.Audio.nodeTypes.buffer
            || x.type === MEPH.audio.Audio.nodeTypes.processor;
        }).foreach(function (node) {
            if (node.node.played) {

            }
            if (node.type === MEPH.audio.Audio.nodeTypes.processor) {
                if (node.processor.context)
                    node.processor.context(me.createContext(), MEPH.audio.Audio.OfflineMode);

                if (node.processor.start)
                    node.processor.start(delay);
            }
            if (node.node.start)
                node.node.start(delay);
            node.node.played = true;
        })
    },
    stop: function (delay) {
        var me = this;
        delay = delay || 0;
        me.nodes.where(function (x) {
            return x.type === MEPH.audio.Audio.nodeTypes.oscillator || x.type === MEPH.audio.Audio.nodeTypes.buffer
            || x.type === MEPH.audio.Audio.nodeTypes.processor;
        }).foreach(function (node) {
            if (node && node.processor && node.processor.stop)
                node.processor.stop(delay, function () {
                    me.disconnect();
                });

            if (node.node.stop)
                node.node.stop(delay);

        });
    },
    disconnect: function () {
        var me = this,
            last,
            context = me.createContext();
        if (!me.completed) {
            return;
        }
        me.nodes.foreach(function (x, i) {
            if (x.node)
                x.node.disconnect();
            x.node = null;
        });
        //last.disconnect(context.destination);
        me.completed = false;
    },
    gain: function (options) {
        var me = this, params = me.createK().concat(me.createA('gain')).concat(me.createS());

        me.nodes.push({ params: params, options: options || null, type: MEPH.audio.Audio.nodeTypes.gain });

        return me;
    },
    /**
     * Creates an audio node based on the type.
     * @param {String} type
     * @return {Audio}
     */
    createAudioNode: function (type, options, nodeoptions) {
        var A = MEPH.audio.Audio;
        nodeoptions = nodeoptions || {};
        var me = this;
        var real = new Float32Array(2);
        var imag = new Float32Array(2);

        real[0] = 0;
        imag[0] = 0;
        real[1] = 1;
        imag[1] = 0;
        var nodel
        switch (type) {
            case A.nodeTypes.oscillator:
                return me.createContext(options).createOscillator();
            case A.nodeTypes.gain:
                node = me.createContext(options).createGain();
                node.gain.value = nodeoptions.volume === undefined || nodeoptions.volume === null ? 1 : nodeoptions.volume;
                return node;
            case A.nodeTypes.panner:
                return me.createContext(options).createPanner();

            case A.nodeTypes.convolver:
                return me.createContext(options).createConvolver();

            case A.nodeTypes.delay:
                return me.createContext(options).createDelay();
            case A.nodeTypes.dynamicsCompressor:
                return me.createContext(options).createDynamicsCompressor();
            case MEPH.audio.Audio.nodeTypes.audioElement:
                return me.createContext(options).createMediaElementSource(nodeoptions.node);
            case A.nodeTypes.waveShaper:
                return me.createContext(options).createWaveShaper();
            case A.nodeTypes.analyser:
                return me.createContext(options).createAnalyser();
            case A.nodeTypes.splitter:
                return me.createContext(options).createChannelSplitter(nodeoptions.channels || 2);
            case A.nodeTypes.merger:
                return me.createContext(options).createChannelMerger(nodeoptions.channels || 2);
            case A.nodeTypes.periodicWave:
                return me.createContext(options).createPeriodicWave(nodeoptions.real || real, nodeoptions.imaginary || imag);
            case A.nodeTypes.biquadFilter:
                return me.createContext(options).createBiquadFilter();
            case A.nodeTypes.buffer:
                var bs = me.createContext(options).createBufferSource();
                bs.buffer = nodeoptions.buffer;
                return bs;
            case A.nodeTypes.bufferSource:
                return me.createContext(options).createBufferSource();
            case A.nodeTypes.mediastream:
                var node = me.createContext(options).createMediaStreamSource(nodeoptions.stream);
                return node;
            case A.nodeTypes.processor:
                var context = me.createContext(options)
                var res = context.createScriptProcessor(nodeoptions.size || 1024, 1, 1);
                res.onaudioprocess = nodeoptions.process;
                return res;
            default:
                throw new Error('unhandled case: createAudioNode. : ' + type)

        }
    },
    get: function (query) {
        var me = this;

        return me.nodes.where(function (x) {
            for (var i in query) {
                return (x.options && x.options[i] === query[i]);
            }
            return false;
        });
    },
    /**
     * Connects a audio to the end of this audio.
     **/
    connect: function (audio) {
        var me = this;
        if (me !== audio && !me.contains(audio) &&
            !audio.contains(me)) {
            me.nodes.push({ type: 'Audio', options: { audio: audio } });
            return me;
        }
        throw new Error('adding node will create a circular loop.')
    },
    /**
     * Returns true if node is found in descendants.
     **/
    contains: function (audioNode) {
        var me = this;
        return !!me.getAudioNodes().first(function (x) { return x.options.audio === audioNode })
    },

    getAudioNodes: function () {
        var me = this;
        var nodes = me.nodes.where(function (x) {
            return x.type === 'Audio';
        }).concatFluent(function (x) {
            return [x].concat(x.options.audio.getAudioNodes());
        });
        return nodes;
    },
    /**
     * Gets all the descendant nodes connected to it.
     * @return {Array}
     **/
    getNodes: function () {
        var me = this;
        var nodes = me.nodes.concatFluent(function (x) {
            if (x.type === 'Audio') {
                return x.options.audio.getNodes();
            }
            else {
                return [x];
            }
        });
        return nodes;
    },
    playbuffer: function () {
        var audio = this, node;
        node = audio.get({ name: 'buffer' }).first()
        if (node)
            node.node.start();
    },
    complete: function (options) {
        var me = this, last, targetnode,
            nodes = me.getNodes();
        if (me.completed) {
            me.disconnect();
        }
        me.completed = true;
        nodes.foreach(function (x, index) {
            if (!x.node) {
                x.node = me.createAudioNode(x.type, options, x.options);
            }
            if (index) {
                if (x.options && x.options.buffer && x.options.buffer.id) {//If point to a specific node, find it in the previous partss.
                    me.completeTargetNodes(nodes, x);
                }
                else if (x.options && x.options.noinputs) {
                    //do nothin.
                }
                else {
                    last.connect(x.node);
                }


            }
            if (x.params) {
                x.params.foreach(function (param) {
                    if (x.options && x.options[param.name] && typeof x.options[param.name] === 'object') {
                        me.connectTargetToNode(nodes, x, param);
                    }
                    else if (x.node[param.name] !== undefined && x.options && x.options[param.name] !== null && x.options[param.name] !== undefined) {
                        if (typeof x.node[param.name] === 'object' && x.node[param.name]) {
                            x.node[param.name].value = x.options[param.name];
                        }
                        else {
                            x.node[param.name] = x.options[param.name];
                        }
                    }
                    else if (param.alias) {
                        switch (param.type) {
                            case 'buffer':
                                x.node[param.alias] = me.getBuffer(x.options[param.name]);
                                break;
                        }
                    }
                })
            }
            last = x.node;
        });

        me.connectToDestination(last, options);
        // last.connect(me.createContext(options).destination);
        return me;
    },
    connectToDestination: function (lastnode, options) {
        var me = this, destinationNode = me.getDestination();
        if (destinationNode) {
            var dNode = destinationNode.getNodeToConnectTo();
            if (!dNode) {
                MEPH.Log('Audio.js : No node to connect to.')
            }
            lastnode.connect(dNode);
        }
        else {
            var context = me.createContext(options);
            var dest = context.destination;
            lastnode.connect(dest);
        }
    },
    getNodeToConnectTo: function () {
        var me = this;
        var node = me.nodes.first();

        if (node) {
            if (!me.completed) {
                me.complete();
            }
            return node.node;
        }
        return null;
    },
    getDestination: function () {
        var me = this;
        return me.$destination || null;
    },
    /**
     * Sets the destination the Audio object will attach.
     * @param {MEPH.audio.Audio} destination
     **/
    setDestination: function (destination) {
        var me = this;
        me.$destination = destination;
    },
    getBufferIndex: function (x) {
        if (x.type === MEPH.audio.Audio.nodeTypes.merger)
            switch (x.options.buffer.name) {
                case 'buffer':
                    return 0;
                case 'buffer2':
                    return 1;
                case 'buffer3':
                    return 2;
                case 'buffer4':
                    return 3;
            }
    },
    connectTargetToNode: function (nodes, x, param) {
        var targetnode,
            me = this;

        targetnode = nodes.first(function (node) {
            return node.options.node.data.nodeOutputs.some(function (y) {
                return y.id === x.options[param.name].id;
            });
        });

        switch (targetnode.type) {
            case 'splitter':
                x.options.splitIndex = x.options.splitIndex || -1;
                x.options.splitIndex++;

                targetnode.node.connect(x.node[param.name], 0, x.options.splitIndex);

                break;
            default:
                if (x.type === MEPH.audio.Audio.nodeTypes.merger) {
                    x.options.mergedIndex = x.options.mergedIndex || -1;
                    x.options.mergedIndex++;
                    targetnode = nodes.first(function (node) {
                        return node.options.node.data.nodeOutputs.some(function (y) { return y.id === x.options.buffer.id; });
                    });

                    targetnode.node.connect(x.node[param.name], 0, x.options.mergedIndex);

                }
                else
                    targetnode.node.connect(x.node[param.name]);
                break;
        }
    },
    completeTargetNodes: function (nodes, x) {
        var targetnode,
            me = this;

        targetnode = nodes.first(function (node) {
            return node.options.node.data.nodeOutputs.some(function (y) { return y.id === x.options.buffer.id; });
        });

        switch (targetnode.type) {
            case 'splitter':
                x.options.splitIndex = x.options.splitIndex || -1;
                x.options.splitIndex++;

                targetnode.node.connect(x.node, 0, x.options.splitIndex);

                break;
            default:
                if (x.type === MEPH.audio.Audio.nodeTypes.merger) {
                    x.options.mergedIndex = x.options.mergedIndex || -1;
                    x.options.mergedIndex++;

                    var options = [].interpolate(0, 4, function (i) {
                        if (i) {
                            return 'buffer' + (i + 1)
                        }
                        return 'buffer';
                    });

                    options.where(function (t) {
                        return x.options[t];
                    }).foreach(function (op) {
                        targetnode = nodes.first(function (node) {
                            return node.options.node.data.nodeOutputs.some(function (y) {
                                return y.id === x.options[op].id;
                            });
                        });
                        if (targetnode)
                            targetnode.node.connect(x.node, 0, x.options.mergedIndex);
                    })
                }
                else
                    targetnode.node.connect(x.node);
                break;
        }

    }
});﻿describe("MEPH/audio/Audio.spec.js", 'MEPH.audio.Audio', function () {
    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it('can create an audio', function () {
        var audio = new MEPH.audio.Audio();

        expect(audio).toBeTruthy();
    });

    it('an audio object has an id', function () {
        var audio = new MEPH.audio.Audio({ id: MEPH.GUID() });

        expect(audio.id).toBeTruthy();
    })

    it('can create an audio context', function () {
        var audio = new MEPH.audio.Audio();

        var context = audio.createContext();

        expect(context).toBeTruthy();
    });

    it('can create an audio context, and returns the same context the second time unless otherwise specified.', function () {
        var audio = new MEPH.audio.Audio();

        var context = audio.createContext();

        expect(context === audio.createContext()).toBeTruthy();
    })
    it('it can create oscillator node and a gainnode, and link to the context fluently', function () {
        var audio = new MEPH.audio.Audio();

        var result = audio.oscillator().gain().complete();
    });

    it('can name nodes', function () {
        var audio = new MEPH.audio.Audio();

        var result = audio.oscillator({ name: 'oc' }).gain().complete();

        var oscillatornode = audio.get({ name: 'oc' }).first();

        expect(oscillatornode).toBeTruthy();
    });

    it('can set the oscillator node to on ', function (done) {
        var audio = new MEPH.audio.Audio();

        var result = audio.oscillator({ name: 'oc' }).gain({ name: 'gain' }).complete();

        var gainnode = audio.get({ name: 'gain' }).first();

        var gainNode = gainnode.node;
        gainNode.gain.value = .01;

        var oscillatornode = audio.get({ name: 'oc' }).first();
        var oscillator = oscillatornode.node;
        var initialFreq = 3000;
        oscillator.type = 0; // sine wave
        oscillator.frequency.value = initialFreq; // value in hertz
        oscillator.start();
        expect(oscillatornode).toBeTruthy();
        setTimeout(function () {
            audio.disconnect();
            done();
        }, 10);
    });

    it('it can create biquad filter', function () {
        var audio = new MEPH.audio.Audio();

        var result = audio.biquadFilter();
        expect(result).toBeTruthy();
    });

    it('it can create convolverfilter', function () {
        var audio = new MEPH.audio.Audio();

        var result = audio.convolver();
        expect(result).toBeTruthy();
    });

    it('it can create delay', function () {
        var audio = new MEPH.audio.Audio();

        var result = audio.delay();
        expect(result).toBeTruthy();
    });

    it('it can create dynamicscompressornode', function () {
        var audio = new MEPH.audio.Audio();

        var result = audio.dynamicsCompressor();
        expect(result).toBeTruthy();
    });
    it('it can create wave shaper', function () {
        var audio = new MEPH.audio.Audio();

        var result = audio.waveShaper();
        expect(result).toBeTruthy();
    });
    it('it can create analyser', function () {
        var audio = new MEPH.audio.Audio();

        var result = audio.analyser();
        expect(result).toBeTruthy();
    });
    it('it can create periodic  Wave', function () {
        var audio = new MEPH.audio.Audio();
        var real = new Float32Array(2);
        var imag = new Float32Array(2);
        var result = audio.periodicWave({ name: 'period', real: real, imaginary: imag });
        expect(result).toBeTruthy();
    });

    it('channel splitter node', function () {
        var audio = new MEPH.audio.Audio();
        var result = audio.splitter({ name: 'channelsplitter' });
        expect(result).toBeTruthy();

    })
    it('channel splitter node', function () {
        var audio = new MEPH.audio.Audio();
        var result = audio.merger();
        expect(result).toBeTruthy();

    })
    it('channel panner node', function () {
        var audio = new MEPH.audio.Audio();
        var result = audio.panner();
        expect(result).toBeTruthy();

    })

    it('can load an mp3 resource ', function (done) {
        var audio = new MEPH.audio.Audio();

        audio.load('../specs/data/The_Creek.mp3', 'mp3').then(function (resource) {

            expect(resource.buffer).toBeTruthy();
            done();
        });
    });

    it('loaded resources are cached globally.', function (done) {
        var audio = new MEPH.audio.Audio();

        audio.load('../specs/data/The_Creek.mp3', 'mp3').then(function (resource) {
            expect(resource.buffer).toBeTruthy();

        }).then(function () {
            expect((new MEPH.audio.Audio()).getBufferSources().length).toBeTruthy();
            done();
        });
    });
    var audiofile = '../specs/data/The_Creek.mp3', audiofiletyp = 'mp3';

    it('can play a buffer source ', function (done) {
        var audio = new MEPH.audio.Audio();
        audio.load(audiofile, audiofiletyp).then(function (resource) {
            audio.buffer(resource.buffer).complete();

            // start the source playing
            //resource.buffer.start();
            setTimeout(function () {
                audio.disconnect();
                done();

            }, 2000)
        });
    });

    it('can detect pitch', function () {
        var frameCount = 44100;
        var audio = new MEPH.audio.Audio();
        var audioCtx = audio.createContext();
        var myArrayBuffer = audioCtx.createBuffer(2, frameCount / 2, frameCount);
        for (var channel = 0 ; channel < 2 ; channel++) {
            var buf = myArrayBuffer.getChannelData(channel);
            for (var i = 0; i < frameCount / 2; i++) {
                buf[i] = Math.sin(i / frameCount * 420);
            }
        }


        var res = MEPH.audio.Audio.updatePitch(myArrayBuffer.getChannelData(0), frameCount);

        expect(res).toBeTruthy();
    });

    it('can detect pitches ', function () {
        var frameCount = 44100;
        var audio = new MEPH.audio.Audio();
        var audioCtx = audio.createContext();
        var myArrayBuffer = audioCtx.createBuffer(2, frameCount, frameCount);
        for (var channel = 0 ; channel < 2 ; channel++) {
            var buf = myArrayBuffer.getChannelData(channel);
            for (var i = 0; i < frameCount  ; i++) {
                if (i > frameCount / 2)
                    buf[i] = Math.sin(i / frameCount * 440 * Math.PI);
                else
                    buf[i] = Math.sin(i / frameCount * 1320 * Math.PI);
            }
        }


        var res = MEPH.audio.Audio.detectPitches(myArrayBuffer.getChannelData(0), frameCount, 1000);

        expect(res).toBeTruthy();
    })

    it('can detect silence', function () {
        var frameCount = 44100;
        var audio = new MEPH.audio.Audio();
        var audioCtx = audio.createContext();
        var myArrayBuffer = audioCtx.createBuffer(2, frameCount, frameCount);
        for (var channel = 0 ; channel < 2 ; channel++) {
            var buf = myArrayBuffer.getChannelData(channel);
            for (var i = 0; i < frameCount ; i++) {
                if (i > frameCount / 2 && i < (frameCount / 2 + (frameCount / 8)))
                    buf[i] = Math.sin(i / frameCount * 420);
            }
        }


        var buff = myArrayBuffer.getChannelData(0);
        var res = MEPH.audio.Audio.detectSilence(buff);

        expect(res).toBeTruthy();
        expect(res.length).toBe(2);
    })

    it('can detect silence (with level considered silent)', function () {
        var frameCount = 44100;
        var audio = new MEPH.audio.Audio();
        var audioCtx = audio.createContext();
        var myArrayBuffer = audioCtx.createBuffer(2, frameCount, frameCount);
        for (var channel = 0 ; channel < 2 ; channel++) {
            var buf = myArrayBuffer.getChannelData(channel);
            for (var i = 0; i < frameCount ; i++) {
                if (i > frameCount / 2 && i < (frameCount / 2 + (frameCount / 8)))
                    buf[i] = Math.sin(i / frameCount * 420);
            }
        }


        var buff = myArrayBuffer.getChannelData(0);
        var res = MEPH.audio.Audio.detectSilence(buff, .001, 1000);

        expect(res).toBeTruthy();
        expect(res.length).toBeTruthy();
    });



    it('can detect pitch', function (done) {
        var audio = new MEPH.audio.Audio();

        audio.load('../specs/data/C4.mp3', 'mp3').then(function (resource) {
            expect(resource.buffer.buffer).toBeTruthy();

            var res = MEPH.audio.Audio.updatePitch(resource.buffer.buffer.getChannelData(0), resource.buffer.buffer.sampleRate);

            expect(res).toBeTruthy();

        }).then(function () {
            expect((new MEPH.audio.Audio()).getBufferSources().length).toBeTruthy();
            done();
        });
    })

    it('can detect the bpm ', function (done) {
        var audio = new MEPH.audio.Audio();

        audio.load(audiofile, audiofiletyp).then(function (resource) {
            return MEPH.audio.Audio.bpm(resource.buffer).then(function (res) {

                expect(res).toBeTruthy();

            })
        }).catch(function (e) {
            expect(e).caught();
        }).then(done);
    });

    it('can serialize a audiobuffer object to a string', function () {
        var audio = new MEPH.audio.Audio(), channels = 1, frameCount = 1000;

        var source = audio.createContext().createBuffer(channels, frameCount, 44000);
        var nowBuffering = source.getChannelData(0);
        for (var i = 0; i < frameCount; i++) {
            nowBuffering[i] = Math.sin(i / 100);
        }
        var res = audio.serializeBuffer({ name: MEPH.GUID(), buffer: source, type: '' });

        expect(res).toBeTruthy();
    });

    it('can deserialize a audiobufferstring to a working audiobuffer', function () {
        var audio = new MEPH.audio.Audio(), channels = 1, frameCount = 1000;

        var source = audio.createContext().createBuffer(channels, frameCount, 44000);
        var nowBuffering = source.getChannelData(0);
        for (var i = 0; i < frameCount; i++) {
            nowBuffering[i] = Math.sin(i / 100);
        }
        var guid = MEPH.GUID();
        var res = audio.serializeBuffer({ name: guid, buffer: source, type: 'type', id: 'id' });

        var result = audio.deserializeBuffer(res);
        expect(res).toBeTruthy();
        expect(result.type === 'type').toBeTruthy();
        expect(result.name === guid).toBeTruthy();
        expect(result.buffer.numberOfChannels === 1).toBeTruthy();
        expect(result.id === 'id').toBeTruthy();
    })

    it('can copy a clip of sound ', function (done) {
        var audio = new MEPH.audio.Audio();

        audio.load(audiofile, audiofiletyp).then(function (resource) {

            var result = audio.copyToBuffer(resource, 50, 52);

            audio.buffer(result.buffer).complete();

            // start the source playing
            // result.buffer.start();
            setTimeout(function () {
                audio.disconnect();
                done();
            }, 2000)

        })

    });

    it('can extract a part of a sound  ', function (done) {
        var audio = new MEPH.audio.Audio();

        audio.load(audiofile, audiofiletyp).then(function (resource) {

            var result = MEPH.audio.Audio.clip(resource, 40, 41);
            expect(result).toBeTruthy();

        }).catch(function (e) {
            expect(e).caught();
        }).then(done);
    });

    it('adding buffer source to audio will publish a CHANGED_BUFFER_SOURCE event', function () {
        var audio = new MEPH.audio.Audio(),
            called, buffersource;
        MEPH.subscribe(MEPH.audio.Audio.CHANGED_BUFFER_SOURCE, function (type, added, buffer) {
            called = true;
        })

        buffersource = audio.addBufferSource({});

        expect(called).toBeTruthy();
        audio.removeBufferSource(buffersource.id);
    })

    it('can render offline', function (done) {
        var audio = new MEPH.audio.Audio();

        audio.load(audiofile, audiofiletyp, {}).then(function (resource) {

            var result = audio.copyToBuffer(resource, 50, 50.1, {});
            MEPH.audio.Audio.OfflineMode = true;
            MEPH.audio.Audio.OfflineAudioContext = new (window.OfflineAudioContext)(32, 10000, 44100)
            audio.buffer(result.buffer).clearContext().complete({
                length: 2,
                numOfChannels: resource.buffer.channelCount,
                sampleRate: resource.buffer.buffer.sampleRate,
                oncomplete: function (res) {
                    audio.disconnect();
                    done();
                },
                start: true
            });

            // start the source playing
            result.buffer.start();
            MEPH.audio.Audio.OfflineAudioContext.startRendering();
            MEPH.audio.Audio.OfflineMode = false;
        });
    });

    it('can create an audio tag based on type', function () {
        var audio = new Audio();

        expect(audio.createAudioNode(Audio.nodeTypes.oscillator)).toBeTruthy();
        expect(audio.createAudioNode(Audio.nodeTypes.gain)).toBeTruthy();
        expect(audio.createAudioNode(Audio.nodeTypes.convolver)).toBeTruthy();
        expect(audio.createAudioNode(Audio.nodeTypes.delay)).toBeTruthy();
        expect(audio.createAudioNode(Audio.nodeTypes.dynamicsCompressor)).toBeTruthy();
        expect(audio.createAudioNode(Audio.nodeTypes.waveShaper)).toBeTruthy();
        expect(audio.createAudioNode(Audio.nodeTypes.analyser)).toBeTruthy();
        expect(audio.createAudioNode(Audio.nodeTypes.splitter)).toBeTruthy();
        expect(audio.createAudioNode(Audio.nodeTypes.merger)).toBeTruthy();
        expect(audio.createAudioNode(Audio.nodeTypes.periodicWave)).toBeTruthy();
        expect(audio.createAudioNode(Audio.nodeTypes.panner)).toBeTruthy();
        expect(audio.createAudioNode(Audio.nodeTypes.biquadFilter)).toBeTruthy();
    })

    var Audio = MEPH.audio.Audio;
    it('can analyse the volume of sounds ', function (done) {
        var audio = new Audio();

        audio.load(audiofile, audiofiletyp).then(function (resource) {

            var result = audio.copyToBuffer(resource, 40, 40.3);

            audio.buffer(result.buffer).volume({ name: 'volume' }).gain({ name: 'gain', volume: 0 }).complete();
            result.buffer.start();
            return new Promise(function (r) {
                setTimeout(function () {
                    var volume = audio.get({ name: 'volume' }).first();
                    expect(volume.data).toBeTruthy();
                    audio.disconnect();
                    r();
                }, 1000)
            })
        }).catch(function (e) {
            expect(e).caught();
        }).then(function () {
            done();
        });
    });

    it('can do a quick analysis from the raw data ', function (done) {
        var audio = new Audio();

        audio.load(audiofile, audiofiletyp).then(function (resource) {

            var result = audio.copyToBuffer(resource, 40, 40.3);

            var res = Audio.quickAnalysis(result);
            expect(res).toBeTruthy();
        }).catch(function (e) {
            expect(e).caught();
        }).then(function () {
            done();
        });
    });

    //it('can analyse the volume of sounds silently', function (done) {
    //    Audio.analyze(audiofile, audiofiletyp).then(function (res) {
    //        expect(res).toBeTruthy();
    //    }).catch(function (e) {
    //        expect(e).caught();
    //    }).then(done);
    //});

    it('can analyze the volume of sounds from a buffer ', function (done) {
        var audio = new Audio();

        audio.load(audiofile, audiofiletyp).then(function (resource) {

            var result = audio.copyToBuffer(resource, 40, 40.2);

            var res = Audio.quickAnalysis(result);
            expect(res).toBeTruthy();

        }).catch(function (e) {
            expect(e).caught();
        }).then(function () {
            done();
        });
    });

    it('can connect an audio to another audio instance ', function () {
        var audio = new Audio();
        var another = new Audio();

        audio.gain({ name: 1 }).biquadFilter({ node: 2 });
        another.gain({ name: 3 }).panner({ node: 4 });
        audio.connect(another);

        expect(audio.getNodes().length).toBe(4);


    })



    it('cant connect an audio to another audio instance if it will make a circular looop', function () {
        var audio = new Audio();
        var another = new Audio();
        var third = new Audio();
        var thrown;

        audio.gain({ name: 1 }).biquadFilter({ node: 2 });
        another.gain({ name: 3 }).panner({ node: 4 });
        third.gain({ name: 3 }).panner({ node: 4 });
        audio.connect(another);
        another.connect(third);

        try {
            third.connect(audio);
        }
        catch (e) {
            thrown = true
        }
        expect(thrown).toBeTruthy();
    });

    it('can not connect to itself', function () {
        var audio = new Audio();
        var thrown;
        try {
            audio.connect(audio);
        }
        catch (e) {
            thrown = true;
        }
        expect(thrown).toBeTruthy();
    })

    it('an audio node will have a defined listi of parameters which i can use for connecting and etc.', function () {
        var audio = new Audio();

        audio.biquadFilter({ node: 'node' });
        var params = audio.get({ node: 'node' }).first().params;
        expect(params).toBeTruthy();
        var krateParam = params.first(function (x) { return x.type === 'k' });
        expect(krateParam).toBeTruthy();
    })


    it('an oscillator node will have a defined listi of parameters which i can use for connecting and etc.', function () {
        var audio = new Audio();

        audio.oscillator({ node: 'node' });
        var params = audio.get({ node: 'node' }).first().params;
        expect(params).toBeTruthy();
        var krateParam = params.first(function (x) { return x.type === 'a' });
        expect(krateParam).toBeTruthy();
    });


    it('an convolver node will have a defined listi of parameters which i can use for connecting and etc.', function () {
        var audio = new Audio();

        audio.convolver({ node: 'node' });
        var params = audio.get({ node: 'node' }).first().params;
        expect(params).toBeTruthy();
        var krateParam = params.first(function (x) { return x.type === 'boolean' });
        expect(krateParam).toBeTruthy();
    });

    it('an delay node will have a defined listi of parameters which i can use for connecting and etc.', function () {
        var audio = new Audio();

        audio.delay({ node: 'node' });
        var params = audio.get({ node: 'node' }).first().params;
        expect(params).toBeTruthy();
        var krateParam = params.first(function (x) { return x.type === 'a' });
        expect(krateParam).toBeTruthy();
    });


    it('an dynamicsCompressor node will have a defined listi of parameters which i can use for connecting and etc.', function () {
        var audio = new Audio();

        audio.dynamicsCompressor({ node: 'node' });
        var params = audio.get({ node: 'node' }).first().params;
        expect(params).toBeTruthy();
        var krateParam = params.first(function (x) { return x.type === 'k' });
        expect(krateParam).toBeTruthy();
    });

    it('an gain node will have a defined listi of parameters which i can use for connecting and etc.', function () {
        var audio = new Audio();

        audio.gain({ node: 'node' });
        var params = audio.get({ node: 'node' }).first().params;
        expect(params).toBeTruthy();
        var krateParam = params.first(function (x) { return x.type === 'a' });
        expect(krateParam).toBeTruthy();
    });

    it('an waveShaper node will have a defined listi of parameters which i can use for connecting and etc.', function () {
        var audio = new Audio();

        audio.waveShaper({ node: 'node' });
        var params = audio.get({ node: 'node' }).first().params;
        expect(params).toBeTruthy();
        var krateParam = params.first(function (x) { return x.type === 'float32array' });
        expect(krateParam).toBeTruthy();
    });

    it('an analyser node will have a defined listi of parameters which i can use for connecting and etc.', function () {
        var audio = new Audio();

        audio.analyser({ node: 'node' });
        var params = audio.get({ node: 'node' }).first().params;
        expect(params).toBeTruthy();
        var krateParam = params.first(function (x) { return x.type === 'plainNumber' });
        expect(krateParam).toBeTruthy();
    });

    xit('can create a mediastream node', function (done) {
        var audio = new Audio();

        audio.mediastream({
            callback: function () {
                done();
            }
        });
    });

    xit('can create a mediastream node', function (done) {
        var audio = new Audio();
        MEPH.audio.Audio.OfflineMode = true;
        MEPH.audio.Audio.OfflineAudioContext = new (window.OfflineAudioContext)(32, 5 * 44100, 44100)

        audio.mediastream({
            callback: function (stream) {
                var video = document.createElement('video');
                document.body.appendChild(video);
                video.src = (window.URL && window.URL.createObjectURL(stream)) || stream;;
                video.autoPlay = true;
                video.onloadedmetadata = function (e) {
                    video.play();
                    video.muted = 'true';
                    MEPH.audio.Audio.OfflineAudioContext.startRendering();

                };
                audio.complete({
                    oncomplete: function (res) {


                        audio.disconnect();
                        done();
                    },
                });

            }
        })

    })
});﻿/**
 * @class
 * Defines a base class for all controls and views.
 **/
MEPH.define('MEPH.util.Observable', {
    statics: {

        propKeyToArray: function (obj) {
            var props = [];
            for (var i in obj) {
                props.push(i);
            }
            return props;
        },
        isObservable: function (obj) {
            if (!obj) {
                return false;
            }
            if (Array.isArray(obj)) {
                return obj.isObservable && true;
            }
            return obj[MEPH.isObservablePropertyKey] ? true : false;
        },
        sweep: function ($obj) {
            var props = [],
                hasNewProp = false;
            MEPH.util.Observable.propKeyToArray($obj)
                .where(function (x) {
                    return !$obj[MEPH.isObservablePropertyKey].properties.some(function (y) { return y === x; });
                })
                .foreach(function (x) {
                    props.push(x);
                    hasNewProp = true;
                });
            if (hasNewProp) {
                MEPH.util.Observable.observable($obj, props, true);
            }
        },
        defineDependentProperty: function (newproperty, object, properties, caculationFunction) {
            Object.defineProperty(object, newproperty, {
                configurable: true,
                get: function (props) {
                    return caculationFunction.apply(this, props);
                }.bind(object, MEPH.Array(properties))
            });
            MEPH.Array(properties).foreach(function (propName) {
                object.on('change_' + propName, function (propName) {
                    this.fire('change_' + newproperty, {
                        old: undefined,
                        'new': this[newproperty],
                        property: newproperty
                    });
                    this.fire('changed', {
                        old: undefined,
                        'new': this[newproperty],
                        property: propName
                    });
                    this.fire('altered', {
                        references: MEPH.Array([this]),
                        path: newproperty,
                        old: undefined,
                        'value': this[newproperty],
                        property: propName
                    });
                }.bind(object, propName))
            });
        },
        canObserve: function (object) {
            var AudioBuffer = AudioBuffer || null;
            var Float32Array = Float32Array || null;
            var ArrayBuffer = ArrayBuffer || null;
            var AudioContext = AudioContext || null;
            return ![Float32Array, AudioBuffer, AudioContext, ArrayBuffer].where().some(function (x) { return object instanceof x; });
        },
        /**
         * Makes the passed object observable.
         * @param {Object} object
         * @param {Array} properties
         * @param {Boolean} overried
         */
        observable: function (object, properties, override) {
            MEPH.Observable = MEPH.util.Observable;
            if (Array.isArray(object)) {
                MEPH.util.Observable.observableArray(object);
            }
            else {
                if (MEPH.util.Observable.canObserve(object)) {

                    (function (properties, override) {

                        var obj = this,
                            nonEnumerablePropertyPrefix = MEPH.nonEnumerablePropertyPrefix;

                        if (obj[MEPH.isObservablePropertyKey] && !override) {
                            return obj;
                        }

                        MEPH.Events(obj);

                        properties = properties || MEPH.util.Observable.propKeyToArray(obj);

                        properties = MEPH.Array(properties);

                        if (getObservable(obj) === undefined) {

                            Object.defineProperty(obj, MEPH.isObservablePropertyKey, {
                                value: {
                                    properties: []
                                },
                                enumerable: false,
                                writable: false,
                                configurable: false
                            });

                        }

                        function isObservable(obj) {
                            return obj[MEPH.isObservablePropertyKey] ? true : false;
                        }

                        function getObservable(obj) {
                            return obj[MEPH.isObservablePropertyKey];
                        }

                        function getObservableProperties(obj) {
                            return getObservable(obj).properties;
                        }

                        function removeAlteredListeners(old, sThis) {
                            if (MEPH.IsObject(old) && MEPH.util.Observable.canObserve(old)) {
                                //MEPH.Observable.observable(old);
                                if (old.un) {
                                    old.un('altered', sThis);
                                }
                            }
                        }

                        function attachAlteredListeners(value, sThis, propName) {
                            if (MEPH.IsObject(value) && MEPH.util.Observable.canObserve(value)) {
                                MEPH.Observable.observable(value);
                                if (!value.hasOn('altered', sThis)) {
                                    value.on('altered', function (propName, type, options) {
                                        var obj = this,
                                            alteredOptions,
                                            path = options.path.split(MEPH.pathDelimiter),
                                            references;
                                        options.references = options.references || [];
                                        path.unshift(propName);
                                        if (!options.references.contains(function (x) { return x === obj; })) {
                                            references = MEPH.Array([this].concat(options.references));
                                            alteredOptions = {
                                                references: references,
                                                path: path.join(MEPH.pathDelimiter)
                                            };
                                            MEPH.applyIf(options, alteredOptions);
                                            this.fire('altered', alteredOptions);
                                        }
                                    }.bind(sThis, propName), sThis);
                                }
                            }
                        }

                        properties = properties.where(function (x) {
                            if (isObservable(obj) && MEPH.util.Observable.canObserve(obj)) {
                                return !getObservableProperties(obj).contains(function (y) {
                                    return y === x;
                                });;
                            }
                            return true;
                        });

                        var funcpre = '$';
                        if (false) {
                            Object.observe(obj, function (changes) {
                                changes.foreach(function (change) {
                                    var propName = change.name;
                                    var old = change.oldValue;
                                    var value = obj[change.name];

                                    this.fire('beforeset' + propName, { old: old, new: value });

                                    removeAlteredListeners(old, this);
                                    attachAlteredListeners(value, this, propName);

                                    //this[nonEnumerablePropertyPrefix + propName] = value;
                                    //this.fire('afterset' + propName, { old: old, new: value });

                                    if (!this.is_paused || !this.is_paused()) {
                                        this.fire('set' + propName, { old: old, 'new': value, property: propName });
                                        if (old !== value) {
                                            this.fire('change_' + propName, { old: old, 'new': value, property: propName });
                                            this.fire('changed', { old: old, 'new': value, property: propName });
                                            this.fire('altered', {
                                                references: MEPH.Array([this]),
                                                path: propName,
                                                old: old,
                                                'value': value,
                                                property: propName
                                            });
                                        }
                                    }
                                }.bind(this))
                                return true;
                            }.bind(obj))
                        }
                        else
                            for (var i = properties.length ; i--;) {
                                var propName = properties[i],
                                    oldvalue = obj[propName];
                                if (typeof (oldvalue) === 'function') {
                                    continue;
                                }
                                Object.defineProperty(obj, propName, {
                                    enumerable: true,
                                    get: function (propName) {
                                        return this[nonEnumerablePropertyPrefix + propName];
                                    }.bind(obj, propName),
                                    set: function (propName, value) {
                                        var old = this[nonEnumerablePropertyPrefix + propName];

                                        this.fire('beforeset' + propName, { old: old, new: value });

                                        removeAlteredListeners(old, this);
                                        attachAlteredListeners(value, this, propName);

                                        this[nonEnumerablePropertyPrefix + propName] = value;
                                        //this.fire('afterset' + propName, { old: old, new: value });

                                        if (!this.is_paused || !this.is_paused()) {
                                            this.fire('set' + propName, { old: old, 'new': value, property: propName });
                                            if (old !== value) {
                                                this.fire('change_' + propName, { old: old, 'new': value, property: propName });
                                                this.fire('changed', { old: old, 'new': value, property: propName });
                                                this.fire('altered', {
                                                    references: MEPH.Array([this]),
                                                    path: propName,
                                                    old: old,
                                                    'value': value,
                                                    property: propName
                                                });
                                            }
                                        }
                                        return true;
                                    }.bind(obj, propName)
                                });

                                Object.defineProperty(obj, nonEnumerablePropertyPrefix + propName, {
                                    enumerable: false,
                                    writable: true,
                                    configurable: false,
                                    value: null
                                });

                                obj[nonEnumerablePropertyPrefix + propName] = oldvalue;
                                if (MEPH.IsObject(oldvalue) && !isObservable(oldvalue)) {
                                    removeAlteredListeners(oldvalue, obj);
                                    //MEPH.Observable.observable(oldvalue);
                                    attachAlteredListeners(oldvalue, obj, propName);
                                }
                            }

                        properties.foreach(function (x) {
                            if (!obj[MEPH.isObservablePropertyKey].properties.contains(function (y) { return x === y; })) {
                                obj[MEPH.isObservablePropertyKey].properties.push(x);
                            }
                        });

                        return this;
                    }).bind(object, properties || null, override || null)();
                }
                else {

                    debugger

                }
            }
            return object;
        },
        observableArray: function (array) {

            if (!array.observable) {
                (function (collection) {

                    if (collection.isObservable) {
                        return collection;
                    }
                    var ConvertToList = MEPH.util.Array.convert;

                    MEPH.Events(collection);

                    Object.defineProperty(collection, "isObservable", {
                        value: true,
                        enumerable: false,
                        configurable: false,
                        writeable: false
                    });

                    Object.defineProperty(collection, "isObservableCollection", {
                        value: true,
                        enumerable: false,
                        configurable: false,
                        writeable: false
                    });

                    var pushFunc = collection.push;
                    Object.defineProperty(collection, 'push', {
                        enumerable: false,
                        configurable: true,
                        writable: true,
                        value: function () {
                            this.fire('beforepush', {
                                added: ConvertToList(arguments),
                                removed: [],
                            });
                            pushFunc.apply(this, arguments);
                            this.fire('afterpush', {
                                removed: MEPH.Array([]),
                                added: ConvertToList(arguments)
                            });
                            //this.fire.apply(this, MEPH.Array(['onpush'].concat(ConvertToList(arguments))));
                            this.fire('onpush', {
                                removed: [],
                                added: ConvertToList(arguments)
                            });
                            this.fire('changed', {
                                added: ConvertToList(arguments),
                                removed: []
                            });
                            this.fire('pushed', {
                                added: (ConvertToList(arguments)),
                                removed: []
                            });
                        }.bind(collection)
                    });

                    var popFunc = collection.pop;
                    Object.defineProperty(collection, 'pop', {
                        enumerable: false,
                        configurable: true,
                        writable: true,
                        value: function () {
                            this.fire.apply(this, MEPH.Array(['beforepop'].concat(ConvertToList(arguments))));
                            var result = MEPH.Array([popFunc.apply(this, arguments)]);
                            this.fire('afterpop', { removed: result, added: MEPH.Array([]) });
                            this.fire.apply(this, MEPH.Array(['onpop'].concat(ConvertToList(arguments))));
                            this.fire('changed', { removed: result, added: MEPH.Array([]) });
                            this.fire('popped', result);
                            //result.where(function (x) {
                            //    return x;
                            //}).foreach(function (x, index) {
                            //    if (x.isObservable) {
                            //        x.clearListeners();
                            //    }
                            //});
                            return result[0];
                        }.bind(collection)
                    });

                    var unshiftFunc = collection.unshift;
                    Object.defineProperty(collection, 'unshift', {
                        enumerable: false,
                        configurable: true,
                        writable: true,
                        value: function () {
                            this.fire('beforeunshift', {
                                added: ConvertToList(arguments),
                                removed: []
                            });
                            var result = unshiftFunc.apply(this, arguments);
                            this.fire('afterunshift', {
                                removed: MEPH.Array([]),
                                added: ConvertToList(arguments)
                            });
                            this.fire('onunshift', arguments);
                            this.fire('changed', {
                                removed: MEPH.Array([]),
                                added: ConvertToList(arguments)
                            });
                            this.fire('unshifted', ConvertToList(arguments));
                            return result;
                        }.bind(collection)
                    });

                    var shiftFunc = collection.shift;
                    Object.defineProperty(collection, 'shift', {
                        enumerable: false,
                        configurable: true,
                        writable: true,
                        value: function () {
                            this.fire.apply(this, MEPH.Array(['beforeshift'].concat(ConvertToList(arguments))));
                            var result = shiftFunc.apply(this, arguments);
                            this.fire('aftershift', {
                                removed: MEPH.Array([result]),
                                added: MEPH.Array([])
                            });
                            this.fire.apply(this, MEPH.Array(['onshift'].concat(ConvertToList(arguments))));
                            this.fire('changed', {
                                removed: MEPH.Array([result]),
                                added: MEPH.Array([])
                            });
                            this.fire('shifted', MEPH.Array([result]));
                        }.bind(collection)
                    });

                    var spliceFunc = collection.splice;
                    Object.defineProperty(collection, 'splice', {
                        enumerable: false,
                        configurable: true,
                        writable: true,
                        value: function () {
                            this.fire.apply(this, MEPH.Array(['beforesplice'].concat(ConvertToList(arguments))));
                            var result = MEPH.Array(spliceFunc.apply(this, arguments));

                            var convertedArgs = ConvertToList(arguments);
                            var added = convertedArgs.subset(2, convertedArgs.length);
                            this.fire('aftersplice', { removed: result, added: added, arguments: convertedArgs.subset(0, 2) });
                            this.fire('onremove', result);
                            this.fire('changed', { removed: result, added: added });
                            this.fire('spliced', { removed: result, added: added });
                            //result.foreach(function (x, index) {
                            //    if (x.isObservable) {
                            //        x.clearListeners();
                            //    }
                            //});
                            return result;
                        }.bind(collection)
                    });

                    var concatFunc = collection.concat;
                    Object.defineProperty(collection, 'concat', {
                        enumerable: false,
                        configurable: true,
                        writable: true,
                        value: function () {
                            this.fire(this, MEPH.Array(['beforeconcat'].concat(ConvertToList(arguments))));
                            var result = concatFunc.apply(this, arguments);
                            this.fire('afterconcat', result);
                            this.fire('onconcat', result);
                            this.fire('concatted', result);
                        }.bind(collection)
                    });
                    return this;
                })(array);
            }
        }
    }
}).then(function (result) {
    MEPH.Observable = MEPH.util.Observable;
    return result;
});﻿MEPH.define('MEPH.util.Template', {
    statics: {
        commentType: 8,
        getComments: function (element) {
            var result = [],
                dom = MEPH.util.Dom;
            if (!element) {
                return result;
            }
            if (element.nodeType === dom.commentType) {
                result.push(element);
            }
            for (i = 0; i < element.childNodes.length ; i++) {
                result = result.concat(dom.getComments(element.childNodes[i]));
            }
            return result;
        }
    }
});﻿MEPH.define('MEPH.util.Style', {
    alternateNames: 'Style',
    statics: {
        translate: function (dom, x, y) {
            if (dom.style.webkitTransform.toString() !== "translate(" + (x) + "px, " + (y) + "px)") {
                dom.style.webkitTransform = "translate(" + (x) + "px," + (y) + "px)";
                dom.style.transform = "translate(" + (x) + "px," + (y) + "px)";
            }
        },
        setPosition: function (dom, x, y) {
            Style.left(dom, x);
            Style.top(dom, y);
        },
        height: function (dom, height) {
            dom.style.height = parseFloat(height) + 'px';
            dom.height = parseFloat(height);
        },
        hide: function (dom) {
            if (dom.style) dom.style.display = 'none';
        },
        show: function (dom) {
            if (dom.style)
                dom.style.display = '';
        },
        clear: function (dom, prop) {
            dom.style.removeProperty(prop);
            dom[prop] = '';
        },
        width: function (dom, width) {
            dom.style.width = parseFloat(width) + 'px';
            dom.width = parseFloat(width);
        },
        top: function (dom, top) {
            dom.style.top = parseFloat(top) + 'px';
        },
        left: function (dom, left) {
            dom.style.left = parseFloat(left) + 'px';
        },
        right: function (dom, right) {
            dom.style.right = parseFloat(right) + 'px';
        },
        getOffset: function (dom, to) {
            var helper = function (_dom) {
                var result = { x: _dom.offsetLeft, y: _dom.offsetTop };
                if (_dom.offsetParent) {
                    var tempresult = helper(_dom.offsetParent);
                    result.x += tempresult.x;
                    result.y += tempresult.y;
                }
                return result;
            }
            return helper(dom);
        },
        backgroundColor: function (dom, color) {
            dom.style.backgroundColor = color;
        },
        absolute: function (dom) {
            Style.position(dom, 'absolute');
        },
        position: function (dom, position) {
            dom.style.position = position;
        },
        zIndex: function (dom, zIndex) {
            dom.style.zIndex = zIndex;
        },
        cursor: function (dom, type) {
            dom.style.cursor = type;
        },
        windowSize: function () {
            var w = window,
        d = document,
        e = d.documentElement,
        g = d.getElementsByTagName('body')[0],
        x = w.innerWidth || e.clientWidth || g.clientWidth,
        y = w.innerHeight || e.clientHeight || g.clientHeight;
            return {
                width: x,
                height: y
            }
        },
        size: function (dom) {
            return {
                width: dom.clientWidth,
                height: dom.clientHeight
            }
        },
        circleCurve: function (r, x, a, b) {
            //        (x−a)2+(y−b)2=r2
            //          r2 - (x-a)2 = (y-b)2
            //          sqrt(r2 - (x-a)2)+ b = y;
            var result = (Math.pow(r, 2) - Math.pow((x - a), 2))

            return Math.sqrt(Math.abs(result)) + b;
        },
        animate: function (config) {
            var one = false,
                i = config.i;
            if (!config.pausing) {
                //config.dom.style.backgroundPositionX = (-i * config.width) + 'px';
                for (var style in config.animProperties) {

                    for (var styleProp in config.animProperties[style]) {
                        var settingsarray = config.animProperties[style][styleProp];
                        if (!Array.isArray(settingsarray)) {
                            settingsarray = [settingsarray];
                        }
                        settingsarray.foreach(function (settings) {
                            if (i < settings.frameEnd && i >= settings.frameStart) {
                                if (settings.step) {
                                    config.dom[style][styleProp] = ((i - settings.frameStart) * settings.step) + (settings.postFix || '');
                                }
                                else {
                                    var percentage = (i - settings.frameStart) / (settings.frameEnd - settings.frameStart);
                                    config.dom[style][styleProp] = pgx.Vector.Lerp(settings.start, settings.stop, percentage) + (settings.postFix || '');
                                }
                            }
                            else if (settingsarray.length === 1) {
                                config.dom[style][styleProp] = pgx.Vector.Lerp(settings.start, settings.stop, 0) + (settings.postFix || '');
                            }
                        })
                    }
                }
                if (config.direction) {
                    i = (i + 1) % config.count;
                }
                else {
                    i = (i - 1);
                    if (i < 0) {
                        i = config.count - 1;
                    }
                }
                //if (i === 0) {
                config.i = i;
                done = config.callback(i, config)//  node.raise('deathanimationcomplete', {});
                //}
            }
            config.pausing = (config.pausing + 1) % config.pause;
            if (!done) {
                requestAnimationFrame(Style.animate.bind(null, config));
            }
        }
    }
});﻿/**
* @class MEPH.util.Dom
* A utility class for the manipulation of the DOM.
*/
Promise.resolve().then(function () {
    var RTCPeerConnection = null;
    var attachMediaStream = null;
    var reattachMediaStream = null;
    var webrtcDetectedBrowser = null;

    function trace(text) {
        console.log((performance.now() / 1000).toFixed(3) + ": " + text);
    }
    if (MEPH.workerthread) return;

    if (navigator.mozGetUserMedia) {

        webrtcDetectedBrowser = "firefox";
        MEPH.browser = 'firefox';

        window.RTCPeerConnection = mozRTCPeerConnection;
        window.RTCSessionDescription = mozRTCSessionDescription;
        window.RTCIceCandidate = mozRTCIceCandidate;
        navigator.getUserMedia = navigator.mozGetUserMedia;

        window.attachMediaStream = function (element, stream) {
            console.log("Attaching media stream");
            element.mozSrcObject = stream;
            element.play();
        };

        window.reattachMediaStream = function (to, from) {
            console.log("Reattaching media stream");
            to.mozSrcObject = from.mozSrcObject;
            to.play();
        };

        // Fake get{Video,Audio}Tracks
        MediaStream.prototype.getVideoTracks = function () {
            return [];
        };

        MediaStream.prototype.getAudioTracks = function () {
            return [];
        };
    } else if (navigator.webkitGetUserMedia) {
        webrtcDetectedBrowser = "chrome";
        MEPH.browser = 'chrome';
        window.RTCPeerConnection = webkitRTCPeerConnection;
        navigator.getUserMedia = navigator.webkitGetUserMedia;

        window.attachMediaStream = function (element, stream) {
            element.src = window.URL.createObjectURL(stream);
        };

        window.reattachMediaStream = function (to, from) {
            to.src = from.src;
        };

        // The representation of tracks in a stream is changed in M26
        // Unify them for earlier Chrome versions in the coexisting period
        if (!webkitMediaStream.prototype.getVideoTracks) {
            webkitMediaStream.prototype.getVideoTracks = function () {
                return this.videoTracks;
            };
            webkitMediaStream.prototype.getAudioTracks = function () {
                return this.audioTracks;
            };
        }

        // New syntax of getXXXStreams method in M26
        if (!webkitRTCPeerConnection.prototype.getLocalStreams) {
            webkitRTCPeerConnection.prototype.getLocalStreams = function () {
                return this.localStreams;
            };
            webkitRTCPeerConnection.prototype.getRemoteStreams = function () {
                return this.remoteStreams;
            };
        }
    } else {
        console.log("Browser does not appear to be WebRTC-capable");
    }

}).then(function () {
    return MEPH.define('MEPH.util.Dom', {
        requires: ['MEPH.util.Style'],
        statics: {
            commentType: 8,
            textType: 3,
            elementType: 1,
            usermedia: null,
            /**
             * Insert newobject before the dom.
             * @param {Object} referenceNode
             * @param {Object} newNode
             */
            insertBefore: function (referenceNode, newNode) {
                referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling);
            },
            /**
             * Insert newobject after the dom.
             * @param {Object} referenceNode
             * @param {Object} newNode
             */
            insertAfter: function (referenceNode, newNode) {
                referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling);
            },
            /**
             * Removes a dom object from its tree.
             * @param {Object} domNode
             **/
            removeFromDom: function (domNode) {
                if (domNode.parentNode) {
                    domNode.parentNode.removeChild(domNode);
                }
            },

            getUserMedia: function (constraints) {
                var toresolve, tofail, result = new Promise(function (resolve, fail) {
                    toresolve = resolve;
                    tofail = fail;
                });

                constraints = constraints || {
                    audio: true,
                    video: true
                };

                if (MEPH.util.Dom.usermedia) {
                    toresolve(MEPH.util.Dom.usermedia);
                }
                else {
                    // Normalize the various vendor prefixed versions of getUserMedia.
                    navigator.getUserMedia = (navigator.getUserMedia ||
                                              navigator.webkitGetUserMedia ||
                                              navigator.mozGetUserMedia ||
                                              navigator.msGetUserMedia);
                    if (navigator.getUserMedia) {
                        navigator.getUserMedia(constraints,
                            function (stream) {
                                MEPH.util.Dom.usermedia = stream;
                                toresolve(stream);
                            },
                            function (error) {
                                tofail(error);
                            });
                    }
                    else {
                        tofail(new Error('Browser does not support user media'));
                    }
                }
                return result;
            },
            supportsUserMedia: function () {
                navigator.getUserMedia = (navigator.getUserMedia ||
                                          navigator.webkitGetUserMedia ||
                                          navigator.mozGetUserMedia ||
                                          navigator.msGetUserMedia);
                return navigator.getUserMedia && true;
            },
            /**
             * Dom element is anscenstor a descendent of descendent.
             * @param {Object} ancestor
             * @param {Object} descendant
             * @returns {Boolean}
             **/
            isDomDescendant: function (ancestor, descendant) {
                var result;
                /*jshint bitwise: false*/
                result = ancestor.compareDocumentPosition(descendant) & Node.DOCUMENT_POSITION_CONTAINS;
                /*jshint bitwise: true*/
                return result;
            },
            /**
             * Gets comments from a dom element.
             * @param {Object} element
             **/
            getComments: function (element) {
                var result = [],
                    i,
                    dom = MEPH.util.Dom
                if (Array.isArray(element)) {
                    return MEPH.Array(element).concatFluentReverse(function (x) {
                        return dom.getComments(x);
                    });
                }
                if (!element) {
                    return result;
                }
                if (MEPH.util.Dom.isComment(element)) {
                    result.push(element);
                }
                for (i = 0; i < element.childNodes.length ; i++) {
                    result = result.concat(dom.getComments(element.childNodes[i]));
                }
                return result;
            },
            /**
             * Returns true if the dom element is a comment node.
             * @param {Object} element
             * @returns {Boolean}
             */
            isComment: function (element) {
                var dom = MEPH.util.Dom;
                return element.nodeType === dom.commentType;
            },
            isElement: function (element) {
                var dom = MEPH.util.Dom;
                return element.nodeType === dom.elementType;
            },
            /**
             * Gets the window screen size
             * @returns {Object}
             **/
            getWindowSize: function () {
                return { width: window.innerWidth, height: window.innerHeight };
            },
            /**
             * Set the size of the dom object.
             * @param {Object} dom
             * @param {Object} size
             * @param {Number/String} size.height
             * @param {Number/String} size.width
             * @param {Boolean} setatt
             **/
            setSize: function (dom, size, setatt) {
                dom.style.height = parseFloat(size.height || 0) + 'px';
                dom.style.width = parseFloat(size.width || 0) + 'px';
                if (setatt) {
                    dom.height = parseFloat(size.height);
                    dom.width = parseFloat(size.width);
                }
            },
            /**
             * Parses the inner content of a comment node to JSON.
             * @param {Object} element
             * @returns {Object/Boolean}
             **/
            tryParse: function (element) {
                var dom = MEPH.util.Dom;
                if (dom.isComment(element)) {
                    try {
                        return dom.tryParseAttributeJson(element.data);
                    }
                    catch (e) {
                        return false;
                    }
                }
                return false;
            },
            getCharCode: function (e) {
                var charCode = (typeof e.which == "number") ? e.which : e.keyCode;
                return charCode;
            },
            /**
             * @method getEventSource
             * Gets the event source from an event.
             * @param {Event} evnt
             * @return {Object}
             **/
            getEventSource: function (evnt) {
                return evnt.target || evnt.srcElement;;
            },
            getPosition: function (element) {
                var xPosition = 0;
                var yPosition = 0;

                while (element) {
                    xPosition += (element.offsetLeft - element.scrollLeft + element.clientLeft);
                    yPosition += (element.offsetTop - element.scrollTop + element.clientTop);
                    element = element.offsetParent;
                }
                return { x: xPosition, y: yPosition };
            },
            /**
             * Gets the relative position of a svg to another svg.
             * @param {Object} element
             * @param {Object} parent
             * @param {String} position 
             * @return {Object}
             **/
            getRelativeSvgPosition: function (element, parent, position) {
                var cb = parent.getBoundingClientRect();
                var tb = element.getBoundingClientRect();
                //var pos = t.zone.$node.$data.getAbsElPosition(t.zone.$dom);
                if (position === 'center') {
                    var pos = {
                        x: (tb.left + tb.right) / 2 - cb.left,
                        y: (tb.bottom + tb.top) / 2 - cb.top
                    };
                    return pos;
                }
                var pos = {
                    x: tb.left - cb.left,
                    y: tb.top - cb.top
                };
                return pos;
            },
            getRelativePosition: function (element, parent) {
                var xPosition = 0;
                var yPosition = 0;

                while (element && element !== parent) {
                    xPosition += (element.offsetLeft - element.scrollLeft + element.clientLeft);
                    yPosition += (element.offsetTop - element.scrollTop + element.clientTop);
                    element = element.offsetParent;
                }
                return { x: xPosition, y: yPosition };
            },
            getEventPositions: function (evt, element) {
                var positions = [];
                if (evt.changedTouches) {
                    var pos = MEPH.util.Dom.getPosition(element);
                    for (i = evt.changedTouches.length; i--;) {
                        touch = evt.changedTouches[i];
                        positions.push({ x: touch.pageX - pos.x, y: touch.pageY - pos.y, identifier: touch.identifier });
                    }
                }
                else {
                    positions.push({ x: evt.offsetX || evt.pageX, y: evt.offsetY || evt.pageY });
                }
                return positions;
            },
            getScreenPosition: function (element) {
                var rect = element.getBoundingClientRect();
                return rect;
            },
            createCenteredElement: function (type) {
                var sp = {
                    top: document.body.clientHeight / 2,
                    left: document.body.clientWidth / 2
                };
                var element = document.createElement(type || 'div');
                Style.position(element, 'absolute');
                Style.zIndex(element, 100000);
                Style.top(element, sp.top);
                Style.left(element, sp.left);
                document.body.appendChild(element);

                return element;
            },
            centerElement: function (element) {
                var rect = element.getBoundingClientRect();
                var sp = {
                    top: document.body.clientHeight / 2 - (rect.height / 2),
                    left: document.body.clientWidth / 2 - (rect.width / 2)
                };
                Style.top(element, sp.top);
                Style.left(element, sp.left);
            },
            createInputElementOverSvg: function (svg, type, element) {

                var sp = MEPH.util.Dom.getScreenPosition(svg);
                element = element || document.createElement(type || 'input');
                if (element.classList && element.classList.add) {
                    element.classList.add('dataentry');
                    element.classList.add('form-control');
                }
                Style.width(element, sp.width);
                Style.height(element, sp.height);
                Style.position(element, 'absolute');
                Style.zIndex(element, 100000);
                Style.top(element, sp.top);
                Style.left(element, sp.left);
                document.body.appendChild(element);

                return element;
            },
            createInputElementOverSvgWithDisplay: function (svg) {
                var input1 = MEPH.util.Dom.createInputElementOverSvg(svg);
                var sp = Dom.getScreenPosition(svg);
                var input2 = MEPH.util.Dom.createInputElementOverSvg(svg);
                Style.left(input2, sp.left + sp.width);
                Style.width(input2, 80);
                return {
                    input: input1,
                    value: input2
                }
            },
            addOption: function (name, value, element) {
                var option = document.createElement("option");
                option.text = name;
                option.value = value;
                element.add(option);
            },
            clearSelect: function (select) {
                while (select.length) {
                    select.remove(0);
                }
            },
            createSimpleSelectData: function (me, el, setfunc, initval, options) {
                var element = MEPH.util.Dom.createInputElementOverSvg(el, 'select');
                options.unshift('');
                (options || []).select(function (x) {
                    return x;
                }).foreach(function (x) {
                    var option = document.createElement("option");
                    if (typeof x === 'object') {
                        option.text = x.title;
                        option.value = x.value;
                    }
                    else {
                        option.text = x;
                        option.value = x;
                    }
                    element.add(option);
                });

                me.don('blur', element, function (x) {
                    setfunc(element.value);

                    setTimeout(function () {
                        if (element !== document.activeElement) {
                            if (element.parentNode)
                                element.parentNode.removeChild(element);

                            me.dun(element);
                        }
                    }, 400)
                }, element);

            },
            createSimpleDataEntry: function (me, el, type, setfunc, initval) {
                var res = Dom.createInputElementOverSvgWithDisplay(el);
                var element = res.input;
                element.type = type || 'range';
                element.classList.add('dataentry')
                element.max = me.maxvalue || 10;
                element.classList.add('form-control');
                res.value.classList.add('form-control');
                element.min = me.minvalue || 0;
                me.don('blur', [res.value, element], function (x) {
                    setfunc(element.value);
                    setTimeout(function () {
                        if (element !== document.activeElement && res.value !== document.activeElement) {
                            if (element.parentNode)
                                element.parentNode.removeChild(element);

                            if (res.value.parentNode)
                                res.value.parentNode.removeChild(res.value);

                            me.dun(element);
                        }
                    }, 400)
                }, element);

                me.don('change', element, function (x) {
                    setfunc(element.value);
                    res.value.value = element.value;
                }, element);

                me.don('change', res.value, function (x) {
                    setfunc(res.value.value);
                    element.value = res.value.value;
                }, element);
                if (initval !== undefined && initval !== null) {
                    element.value = initval;
                    res.value.value = initval;
                }
                return element;
            },
            /**
             * Adds simple data entry to disposable elements
             * @param {Object} me
             * The data context.
             * @param {Array} elements
             **/
            addSimpleDataEntryToElments: function (me, elements, rootel, destroyCallback) {
                var blur = function (elements, close) {
                    elements.foreach(function (elset) {
                        elset.setFunc(elset.element.value);
                    });
                    //setfunc(element.value);
                    setTimeout(function () {
                        if (close || !MEPH.util.Dom.isDomDescendant(document.activeElement, rootel)) {
                            if (rootel.parentNode)
                                rootel.parentNode.removeChild(rootel);

                            me.dun(elements);
                            if (destroyCallback) {
                                destroyCallback();
                            }
                        }
                    }, 40)
                }.bind(me, elements);
                me.don('blur', elements.select(function (x) { return x.element; }), blur, elements);
                elements.foreach(function (elset) {
                    var element = elset.element;
                    me.don('change', element, function (x) {
                        elset.setFunc(element.value);
                    }, element);
                });
                return blur;
            },
            getScreenEventPositions: function (evt, element) {
                var positions = [];
                if (evt.changedTouches) {
                    var pos = element ? MEPH.util.Dom.getPosition(element) : { x: 0, y: 0 };
                    for (i = evt.changedTouches.length; i--;) {
                        touch = evt.changedTouches[i];
                        positions.push({ x: touch.pageX - pos.x, y: touch.pageY - pos.y, identifier: touch.identifier });
                    }
                }
                else {
                    positions.push({ x: evt.screenX || evt.pageX, y: evt.screenY || evt.pageY });
                }
                return positions;
            },
            tryParseAttributeJson: function (str) {
                try {
                    return JSON.parse('{' + str + '}');
                }
                catch (e) {
                    return false;
                }
            }
        }
    })
});﻿describe("MEPH", function () {

    beforeEach(function () {
        jasmine.addMatchers(MEPH.customMatchers);
    });

    it("calling namespace with a period delimited string will create a namespace", function () {
        //Arrange

        //Act
        MEPH.namespace('fake.name.space');

        //Assert
        expect(fake.name.space).toBeTruthy();
        fake = null;
    });

    it('can et ther required files for meph.js', function () {
        mephFrameWork('tEMP', '../src');

        expect(tEMP.requiredFiles.length).toBeTruthy();
    });

    it('mephFrameWork create a frame work', function () {
        //Arrange

        //Act
        mephFrameWork('FakeFramework', '../src');

        //Assert
        expect(FakeFramework.loadScript).toBeTruthy();
        expect(FakeFramework.Array).toBeTruthy();
    });

    it('can get source ', function (done) {

        MEPH.getSource('MEPHTests.helper.viewmodel.HelperViewModel', '.js').then(function (result) {
            expect(result).toBeTruthy();
        }).catch(function (er) {
            expect(er).caught();
        }).then(function () {
            done();
        });
    })
    it('define a class', function (done) {
        //Arrange
        var className = 'Fake.Class',
            config = {
                statics: {
                    staticProp: true
                },
                properties: {
                    prop: true
                },
                func: function () {
                }
            }
        //Act
        MEPH.define(className, config).then(function () {
            expect(Fake.Class).toBeTruthy();
            Fake = null;
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });

        //Assert
    });

    it('can set a authorization token to be used as default in all ajax calles', function () {

        MEPH.setAuthorizationToken('token');
        expect(MEPH.getAuthorizationToken() === 'token');

    });
    it('a class can have an alternate name', function (done) {
        var classNAME = 'Alternate.Fake.Class',
            config = {
                alternateNames: 'Alternate.Class'
            }
        MEPH.define(classNAME, config).then(function () {
            expect(Alternate.Fake.Class).toBeTruthy();
            expect(Alternate.Class).toBeTruthy();

            MEPH.undefine(classNAME);
            MEPH.undefine(config.alternateNames.first());

        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });
    it('when a class has dependencies they will be retrieved', function (done) {
        //Arrange
        var className = 'Fake.Class',
          config = {
              requires: ['MEPHTests.helper.Helper'],
              statics: {
                  staticProp: true
              },
              properties: {
                  prop: true
              },
              func: function () {
              }
          }
        //Act
        MEPH.define(className, config).then(function () {

            //Assert
            expect(Fake.Class).toBeTruthy();
            expect(MEPHTests.helper.Helper);
            Fake = null;
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });

    });

    it('when a class extends from a class it will be retrieved', function (done) {
        //Arrange
        var className = 'Fake.Class',
            config = {
                extend: 'Fake.Base.Class'
            },
            baseClassName = 'Fake.Base.Class',
            baseConfig = {
            };
        //Act
        MEPH.define(baseClassName, baseConfig).then(function () {
            return MEPH.define(className, config).then(function () {
                //Assert
                expect(Fake.Class).toBeTruthy();
                expect(Fake.Base.Class);
                MEPH.undefine(baseClassName);
                MEPH.undefine(className)

            });
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });


    it('When a class is already defined and retrieveRequiredClass is called it will return the class', function (done) {
        //Arrange
        var className = 'Fake.Class',
           config = {
               statics: {
                   staticProp: true
               },
               properties: {
                   prop: true
               },
               func: function () {
               }
           }
        //Act

        MEPH.define(className, config).then(function () {
            expect(Fake.Class).toBeTruthy();
            return MEPH.retrieveRequiredClass({ path: className, classifiedName: className }).then(function () {
                reached = true;
                expect(reached).toBeTruthy();
                MEPH.undefine('Fake.Class');
            });
        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
        //Assert

    });

    it('when a class has a mixins they will be added to the instance of  ', function (done) {
        //Arrange
        var
            fakeMixinName = 'Fake.Mixin',
            className = 'Fake.Class',
            config = {
                requires: [fakeMixinName],
                mixins: {
                    fake: fakeMixinName
                }
            },
            mixinConfig = {
                func: function () { return 'success'; }
            }
        MEPH.define(fakeMixinName, mixinConfig).then(function () {
            return MEPH.define(className, config);
        }).then(function ($class) {
            var fake = new $class();

            expect(fake.mixins.fake.func).toBeTruthy();
            expect(fake.mixins.fake.func() === 'success').theTruth('Fake mixin func didnt return success, it returned ' + fake.mixins.fake.func());

        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it('when a class has a mixin as an array, functions will be applied directly to the instance', function (done) {
        //Arrange
        var
           fakeMixinName = 'Fake.Mixin',
           className = 'New.Fake.Class',
           config = {
               requires: [fakeMixinName],
               mixins: [fakeMixinName]
           },
           mixinConfig = {
               func: function () { return 'success'; }
           }

        MEPH.define(fakeMixinName, mixinConfig).then(function () {
            return MEPH.define(className, config);
        }).then(function ($class) {
            var fake = new $class();

            expect(fake.func).toBeTruthy();
            expect(fake.func() === 'success').theTruth('Fake mixin func didnt return success, it returned ');

        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it('Can load a html template ', function (done) {
        //Arrange
        var path = MEPH.getClassPath('MEPHTests.helper.HelperControl2') + MEPH.prefixes.templatePostFix;

        //Act
        MEPH.retrieveRequiredClass({
            type: 'tpl',
            path: path,
            classifiedName: 'MEPHTests.helper.HelperControl2'
        }).then(function (result) {

            //Assert
            expect(result.result).toBeTruthy();
            expect(result.details).toBeTruthy();

        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });

    });

    it('Can get all aliases ', function () {
        expect(MEPH.getAllAliases()).toBeTruthy();
    });

    it('Can define a class and then undefine a class', function (done) {
        //Arrange
        MEPH.define('Temp.Class', {
        }).then(function () {
            expect(Temp.Class).toBeTruthy();
            MEPH.undefine('Temp.Class');
            expect(window.Temp.Class === undefined).toBeTruthy();

        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });
    it('Can find a template by alias', function (done) {
        //Arrange
        MEPH.create('MEPH.input.Input').then(function ($class) {
            var result = new $class(),
                templateInfo;
            templateInfo = MEPH.getTemplate(result.alias);
            expect(templateInfo).toBeTruthy();

        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });
    });

    it('create an instance of a class', function (done) {
        //Arrange

        //Act   
        MEPH.create('MEPH.control.Control').then(function () {
            var control = new MEPH.control.Control();
            expect(control).toBeTruthy();

        }).catch(function (error) {
            expect(error).caught();
        }).then(function () {
            done();
        });

    });

    it('add event listeners', function () {
        //Arrange
        var $classInstance = new Class();
        MEPH.Events($classInstance);
        //Act
        $classInstance.on('event', function () { });

        //Assert
        expect($classInstance[MEPH.listenersPropertyKey].length).toBeTruthy();
    });

    it('listen to event and fire event', function () {
        //Arrange
        var $classInstance = new Class(),
            called;
        MEPH.Events($classInstance);
        $classInstance.on('event', function () { called = true; });

        //Act
        $classInstance.fire('event', 1, 2, 3, 4);

        //Assert
        expect(called).toBeTruthy();
    });

    it('listeners can be removed', function () {
        //Arrange
        var $classInstance = new Class(),
            scope = {};
        MEPH.Events($classInstance);
        $classInstance.on('event', function () { }, scope);

        //Act
        $classInstance.un('event');

        //ASSERT
        expect($classInstance[MEPH.listenersPropertyKey].length === 0).toBeTruthy();
    });

    it('listeners can be removed by reference', function () {
        //Arrange
        var $classInstance = new Class(),
            scope = {};
        MEPH.Events($classInstance);
        $classInstance.on('e1', function () { }, scope);
        $classInstance.on('e2', function () { }, scope);

        //Act
        $classInstance.un(null, scope);

        //Assert
        expect($classInstance[MEPH.listenersPropertyKey].length === 0).toBeTruthy();
    });


    it('listeners can be removed by type', function () {
        //Arrange
        var $classInstance = new Class(),
            scope = {};
        MEPH.Events($classInstance);
        $classInstance.on('e1', function () { }, scope);
        $classInstance.on('e2', function () { }, scope);

        //Act
        $classInstance.un('e1');

        //Assert
        expect($classInstance[MEPH.listenersPropertyKey].length === 1).toBeTruthy();
    });

    it('can add a data-bind prefix', function () {
        //Arrange
        //There is a default prefix data-bind, it can not be removed.

        //Act
        MEPH.addDataBindPrefix('db');

        //Assert
        expect(MEPH.getDataBindPrefixes().length === 2);
        MEPH.removeDataBindPrefix('db');
    });

    it('can add a reverse data-bind-prefix', function () {
        //Arrange

        //Act
        MEPH.addReverseDataBindPrefx('rev-db');

        //Assert
        expect(MEPH.getReverseDataBindingPrefixes().length === 2);
        MEPH.addReverseDataBindPrefx('rev-db');
    });

    it('can add a event data-bind prefix', function () {
        //Arrange

        //Act
        MEPH.addEventDataBindingPrefixes('de-event');

        //Assert
        expect(MEPH.getEventDataBindingPrefixes().length === 2);
        MEPH.removeEventDataBindingPrefix('de-event');
    });


    it('can add a bind prefix shortcut', function () {
        //Arrange

        //Act
        MEPH.addBindPrefixShortCuts('c$', 'control');

        //Assert
        var controlPrefix = MEPH.getBindPrefixShortCuts().first(function (x) {
            return x.type === 'control';
        });
        expect(controlPrefix.prefix === 'c$').toBeTruthy();
    });

    it('can set the value at the end of a path', function () {
        //Arrange 
        var object = {
            prop: {
                prop1: null
            }
        }, result;

        //Act
        result = MEPH.setPathValue(object, 'prop.prop1', true);

        //Assert
        expect(result).toBeTruthy();
        expect(object.prop.prop1 === true).toBeTruthy();
    });


    it('will not set a prop if it doesnt exist', function () {
        //Arrange 
        var object = {
            prop: {
                prop1: null
            }
        }, result;

        //Act
        result = MEPH.setPathValue(object, 'prop.prop2.deep', true);

        //Assert
        expect(result === false).toBeTruthy();
    });

    it('an object can add a dom event listener ', function () {
        //Arrange
        var object = {},
            called,
            dom = document.createElement('div');
        MEPH.Events(object);

        //Act
        object.don('click', dom, function () { called = true; });
        dom.dispatchEvent(MEPH.createEvent('click', {}));

        //Assert
        expect(called).theTruth('The don function didnt put the event listener on correctly');

    });


    it('an object can REMOVE a dom event listener ', function () {
        //Arrange
        var object = {},
            called = false,
            dom = document.createElement('div');
        MEPH.Events(object);
        
        //Act
        object.don('click', dom, function () { called = true; });
        
        object.dun(object);
        dom.dispatchEvent(MEPH.createEvent('click', {}));

        //Assert
        expect(called == false).theTruth('The dun function didnt remove the event listener on correctly');

    });

    it(' objects can subscribe, publish, events', function () {
        //Arrange
        var called;

        //Act
        var id = MEPH.subscribe('subscribedevent', function () {
            called = true;
        }.bind({ scope: 'scope' }));
        MEPH.publish('subscribedevent', {});

        MEPH.unsubscribe(id);

        //Assert
        expect(called).theTruth('The subscribed event was not called');
    });
});
﻿var $array = Array
/**
 * @class MEPH.util.Array
 * A static class used to add extra functions to arrays.
 **/
MEPH.define('MEPH.util.Array', {
    alternateNames: ['MEPHArray'],
    statics: {
        isArray: function () {
            $array.isArray.apply(null, arguments);
        },
        $create: function (array, length) {
            if (array instanceof Float32Array) {
                return new Float32Array(length);
            }
            if (array instanceof Float64Array) {
                return new Float64Array(length);
            }
            return [];
        },
        /**
         * Adds extension function to an array.
         **/
        create: function (array, neveragain) {
            array = array || [];
            if (window.appliedToAllArrays && Array.isArray(array)) {
                return array;
            }
            if (!array.where) {
                Object.defineProperty(array, 'where', {
                    enumerable: false,
                    writable: true,
                    configurable: true,
                    value: function (func) {
                        var result = MEPH.util.Array.create();
                        var collection = this;
                        if (func === undefined) {
                            func = function (x) { return x }
                        }
                        for (var i = 0 ; i < collection.length ; i++) {
                            if (func(collection[i], i)) {
                                result.push(collection[i]);
                            }
                        }
                        return result;
                    }
                });
            }


            //if (!array.observable) {
            //    object.defineproperty(array, 'observable', {
            //        enumerable: false,
            //        writable: true,
            //        configurable: true,
            //        value: function () {
            //            var collection = this;
            //            return meph.util.observable.observable(collection);
            //        }
            //    });
            //}

            if (!array.orderBy) {
                Object.defineProperty(array, 'orderBy', {
                    enumerable: false,
                    writable: true,
                    configurable: true,
                    value: function (func) {
                        var collection = this.select(function (x) { return x; });
                        return collection.sort(func);
                    }
                });
            };

            if (!array.argsort) {
                Object.defineProperty(array, 'argsort', {
                    enumerable: false,
                    writable: true,
                    configurable: true,
                    value: function (func) {
                        var collection = this.select(function (x) {
                            return { d: x };
                        });
                        var sorted = collection.sort(function (x, y) {
                            return func(x.d, y.d);
                        });

                        return sorted.select(function (t) {
                            return collection.indexOf(t);
                        })
                    }
                });
            }

            if (!array.maxSelection) {
                Object.defineProperty(array, 'maxSelection', {
                    enumerable: false,
                    writable: true,
                    configurable: true,
                    value: function (func) {
                        var result = null;
                        var _result = null;
                        var collection = this;
                        for (var i = 0 ; i < collection.length; i++) {
                            if (result == null || func(collection[i]) > result) {
                                result = func(collection[i]);
                                _result = collection[i];
                            }
                        }
                        return _result;
                    }
                });
            }
            if (!array.zeroes) {
                Object.defineProperty(array, 'zeroes', {
                    enumerable: false,
                    writable: true,
                    configurable: true,
                    value: function (count) {
                        return [].interpolate(0, count, function () { return 0; })
                    }
                });
            }

            if (!array.maximum) {
                Object.defineProperty(array, 'maximum', {
                    enumerable: false,
                    writable: true,
                    configurable: true,
                    value: function (func) {
                        var result = null;
                        var _result = null;
                        var collection = this;
                        func = func || function (x) { return x; };
                        for (var i = 0 ; i < collection.length; i++) {
                            if (result == null || func(collection[i]) > result) {
                                result = func(collection[i]);
                                _result = collection[i];
                            }
                        }
                        return result;
                    }
                });
            }
            if (!array.intersection) {
                Object.defineProperty(array, 'intersection', {
                    enumerable: false,
                    writable: true,
                    configurable: true,
                    value: function (othercollection, func) {
                        var collection = this;
                        var result = [];
                        func = func || function (x, y) { return x === y; };
                        for (var i = collection.length; i--;/**/) {
                            for (var j = othercollection.length; j--;/**/) {
                                if ((func(othercollection[j], collection[i]))) {
                                    result.push(collection[i]);
                                    break;
                                }
                            }
                        }
                        return result;
                    }
                });
            }
            if (!array.intersectFluent) {
                Object.defineProperty(array, 'intersectFluent', {
                    enumerable: false,
                    writable: true,
                    configurable: true,
                    value: function (func) {
                        var collection = this;
                        var result = [];
                        func = func || function (x, y) { return x === y; };
                        result.push.apply(result, collection[0]);
                        collection = collection.subset(1);
                        collection.foreach(function (x) {
                            result = result.intersection(x, func);
                        });
                        return result;
                    }
                });
            }
            if (!array.count) {
                Object.defineProperty(array, 'count', {
                    enumerable: false,
                    writable: true,
                    configurable: true,
                    value: function (func) {
                        func = func || function () { return true; };
                        return this.where(func).length;
                    }
                });
            }

            if (!array.trim) {
                Object.defineProperty(array, 'trim', {
                    enumerable: false,
                    writable: true,
                    configurable: true,
                    value: function () {
                        var result = [];
                        var collection = this;
                        for (var i = 0 ; i < collection.length; i++) {
                            result.push(collection[i].trim());
                        }
                        return result;
                    }
                });
            }

            if (!array.indexWhere) {
                Object.defineProperty(array, 'indexWhere', {
                    enumerable: false,
                    writable: true,
                    configurable: true,
                    value: function (func) {
                        var result = [];
                        var collection = this;
                        for (var i = 0 ; i < collection.length ; i++) {
                            if (func(collection[i], i)) {
                                result.push(i);
                            }
                        }
                        return result;
                    }
                });
            }

            if (!array.relativeCompliment) {
                var extrasection_relativeCompliment = {
                    enumerable: false,
                    writable: true,
                    configurable: true,
                    value: function (othercollection, func) {
                        var collection = this;
                        var result = [];
                        func = func || function (x, y) { return x === y; };
                        for (var i = collection.length; i--;/**/) {//function (x) { return x == collection[i]; }
                            if (othercollection.count(func.bind(window, collection[i])) == 0) {
                                result.push(collection[i]);
                            }
                        }
                        return result;
                    }
                }
                if (!array.relativeCompliment) {
                    Object.defineProperty(array, 'relativeCompliment', extrasection_relativeCompliment);
                }
            }
            if (!array.random) {
                Object.defineProperty(array, 'random', {
                    enumerable: false,
                    writable: true,
                    configurable: true,
                    value: function () {
                        var result = [];
                        var collection = this;
                        for (var i = 0 ; i < collection.length; i++) {
                            result.splice(Math.floor(Math.random(0) * result.length), 0, (collection[i]));
                        }
                        return result;
                    }
                });
            }


            if (!array.all) {
                Object.defineProperty(array, 'all', {
                    enumerable: false,
                    writable: true,
                    configurable: true,
                    value: function (func) {
                        var collection = this;
                        for (var i = 0 ; i < collection.length ; i++) {
                            if (!func(collection[i], i)) {
                                return false;
                            }
                        }
                        return true;
                    }
                });
            }
            if (!array.removeWhere) {
                Object.defineProperty(array, 'removeWhere', {
                    enumerable: false,
                    writable: true,
                    configurable: true,
                    value: function (func) {
                        var collection = this;
                        func = func || function () { return true; }
                        var result = collection.where(func);
                        for (var i = 0 ; i < result.length; i++) {
                            collection.splice(collection.indexOf(result[i]), 1);
                        }
                        return result;
                    }
                });
            }
            if (!array.clear) {
                Object.defineProperty(array, 'clear', {
                    enumerable: false,
                    writable: true,
                    configurable: true,
                    value: function (func) {
                        var collection = this;
                        return collection.removeWhere(function (x) { return true; });
                    }
                });
            }
            if (!array.removeFirstWhere) {
                Object.defineProperty(array, 'removeFirstWhere', {
                    enumerable: false,
                    writable: true,
                    configurable: true,
                    value: function (func) {
                        var collection = this;
                        var result = collection.where(func);
                        for (var i = 0 ; i < Math.min(result.length, 1) ; i++) {
                            collection.splice(collection.indexOf(result[i]), 1);
                        }
                        return result;
                    }
                });
            }
            if (!array.remove) {
                Object.defineProperty(array, 'remove', {
                    enumerable: false,
                    writable: true,
                    configurable: true,
                    value: function (from, to) {
                        var collection = this,
                            rest = collection.slice((to || from) + 1 || collection.length);
                        collection.length = from < 0 ? collection.length + from : from;
                        return collection.push.apply(collection, rest);
                    }
                });
            }

            if (!array.removeIndices) {
                //removeIndices
                Object.defineProperty(array, 'removeIndices', {
                    enumerable: false,
                    writable: true,
                    configurable: true,
                    value: function (indices) {
                        indices = indices.orderBy(function (x, y) { return y - x; });
                        var collection = this;
                        indices.foreach(function (index) {
                            collection.splice(index, 1);
                        });

                        return collection;
                    }
                });
            }

            if (!array.max) {
                Object.defineProperty(array, 'max', {
                    enumerable: false,
                    writable: true,
                    configurable: true,
                    value: function (func) {
                        var result = null,
                            resultValue = null;
                        func = func || function (x) { return x; }
                        var collection = this;
                        for (var i = 0 ; i < collection.length; i++) {
                            if (resultValue == null || func(collection[i]) > resultValue) {
                                result = (collection[i]);
                                resultValue = func(collection[i]);
                            }
                        }
                        return result;
                    }
                });
            }
            if (!array.foreach) {
                Object.defineProperty(array, 'foreach', {
                    enumerable: false,
                    writable: true,
                    configurable: true,
                    value: function (func) {
                        var collection = this;
                        for (var i = 0; i < collection.length; i++) {
                            func(collection[i], i);
                        }
                        return this;
                    }
                });
            }

            if (!array.select) {
                Object.defineProperty(array, 'select', {
                    enumerable: false,
                    writable: true,
                    configurable: true,
                    value: function (func) {
                        var result = MEPH.util.Array.$create(this, this.length);
                        func = func || function (x) { return x; };
                        var collection = this;
                        for (var i = 0 ; i < collection.length ; i++) {
                            if (this instanceof Float32Array) {
                                result[i] = func(collection[i], i);
                            }
                            else {
                                result.push(func(collection[i], i));
                            }
                        }
                        return result;
                    }
                });
            }

            if (!array.contains) {
                Object.defineProperty(array, 'contains', {
                    enumerable: false,
                    writable: true,
                    configurable: true,
                    value: function (func) {
                        return this.first(func) != null;
                    }
                });
            }


            if (!array.first) {
                Object.defineProperty(array, 'first', {
                    enumerable: false,
                    writable: true,
                    configurable: true,
                    value: function (func) {
                        var collection = this.select(function (x) { return x });
                        func = func || function () { return true; };
                        if (typeof (func) !== 'function') {
                            var temp = func;
                            func = function (x) {
                                return temp === x;
                            }
                        }
                        for (var i = 0 ; i < collection.length ; i++) {
                            if (func(collection[i], i)) {
                                return (collection[i]);
                            }
                        }
                        return null;
                    }
                });
            }
            if (!array.any) {
                Object.defineProperty(array, 'any', {
                    enumerable: false,
                    writable: true,
                    configurable: true,
                    value: function (func) {
                        return this.select(function (x) { return x }).first(func) !== null
                    }
                })
            }

            if (!array.firstIndex) {
                Object.defineProperty(array, 'firstIndex', {
                    enumerable: false,
                    writable: true,
                    configurable: true,
                    value: function (func) {
                        var collection = this.select(function (x) { return x });
                        func = func || function () { return true; };
                        if (typeof (func) !== 'function') {
                            var temp = func;
                            func = function (x) {
                                return temp === x;
                            }
                        }
                        for (var i = 0 ; i < collection.length ; i++) {
                            if (func(collection[i], i)) {
                                return i;
                            }
                        }
                        return -1;
                    }
                });
            }
            if (!array.lastIndex) {
                Object.defineProperty(array, 'lastIndex', {
                    enumerable: false,
                    writable: true,
                    configurable: true,
                    value: function (func) {
                        var collection = this.select(function (x) { return x });
                        func = func || function () { return true; };
                        if (typeof (func) !== 'function') {
                            var temp = func;
                            func = function (x) {
                                return temp === x;
                            }
                        }
                        for (var i = collection.length; i--  ;) {
                            if (func(collection[i], i)) {
                                return i;
                            }
                        }
                        return -1;
                    }
                });
            }

            if (!array.selectFirst) {
                Object.defineProperty(array, 'selectFirst', {
                    enumerable: false,
                    writable: true,
                    configurable: true,
                    value: function (func) {
                        var collection = this.select(function (x) { return x });
                        func = func || function () { return true; };
                        if (typeof (func) !== 'function') {
                            var temp = func;
                            func = function (x) {
                                return temp === x;
                            }
                        }
                        for (var i = 0 ; i < collection.length ; i++) {
                            if (func(collection[i])) {
                                return func(collection[i]);
                            }
                        }
                        return null;
                    }
                });
            }

            if (!array.last) {
                Object.defineProperty(array, 'last', {
                    enumerable: false,
                    writable: true,
                    configurable: true,
                    value: function (func) {
                        func = func || function () { return true; };
                        if (typeof (func) !== 'function') {
                            var temp = func;
                            func = function (x) {
                                return temp === x;
                            }
                        }
                        var collection = MEPH.Array(this.select(function (x) {
                            return x
                        }).reverse());
                        for (var i = 0 ; i < collection.length ; i++) {
                            if (func(collection[i])) {
                                var result = (collection[i])
                                return result;
                            }
                        }
                        return null;
                    }
                });
            }
            if (!array.skipEvery) {
                Object.defineProperty(array, 'skipEvery', {
                    enumerable: false,
                    writable: true,
                    configurable: true,
                    value: function (skip, func) {
                        var collection = this;
                        var res = this instanceof Float32Array ? new Float32Array(Math.ceil(collection.length / skip)) : [];
                        skip = Math.abs(skip);
                        var c = 0;
                        func = func || function (x) { return x; };
                        for (var i = 0; i < collection.length; i = i + skip) {
                            if (res instanceof Float32Array) {
                                res[c] = collection[i]
                            }
                            else {
                                res.push(collection[i]);
                            }
                            c++;
                        }
                        return res;
                    }
                });
            }
            if (!array.step) {
                Object.defineProperty(array, 'step', {
                    enumerable: false,
                    writable: true,
                    configurable: true,
                    value: function (skip, func) {
                        var collection = this;
                        skip = Math.abs(skip);
                        func = func || function (x) { return x; };
                        for (var i = 0; i < collection.length; i = i + skip) {
                            func(collection[i], i);
                        }
                        return this;
                    }
                });
            }
            if (!array.skipEveryFromTo) {
                Object.defineProperty(array, 'skipEveryFromTo', {
                    enumerable: false,
                    writable: true,
                    configurable: true,
                    value: function (skip, start, stop, func) {
                        var collection = this;

                        var count = Math.ceil((stop - start) / skip);
                        var res = this instanceof Float32Array ? new Float32Array(Math.max(0, Math.ceil(count))) : [];
                        skip = Math.abs(skip);
                        var c = 0;
                        func = func || function (x) { return x; };
                        for (var i = start; i < stop; i = i + skip) {
                            if (res instanceof Float32Array) {
                                res[c] = collection[i]
                            }
                            else {
                                res.push(collection[i]);
                            }
                            c++;
                        }
                        return res;
                    }
                });
            }
            if (!array.normalize) {
                Object.defineProperty(array, 'normalize', {
                    enumerable: false,
                    writable: true,
                    configurable: true,
                    value: function () {
                        var w = this;
                        var wt = w.summation(function (r, t) { return r + t; });
                        w = w.select(function (t) { return t / wt; });
                        return w;
                    }
                })
            }
            if (!array.fftshift) {
                Object.defineProperty(array, 'fftshift', {
                    enumerable: false,
                    writable: true,
                    configurable: true,
                    value: function () {
                        var collection = this;
                        var res = MEPHArray.$create(collection, collection.length);
                        var half = Math.floor((collection.length + 1) / 2);
                        var half2 = Math.floor(collection.length / 2);
                        for (var i = 0 ; i < half; i++) {
                            res[i] = collection[i + half2];
                        }
                        for (var i = 0 ; i < half2 ; i++) {
                            res[i + half] = collection[i];
                        }
                        return res;
                    }
                })
            }
            if (!array.interpolate) {
                Object.defineProperty(array, 'interpolate', {
                    enumerable: false,
                    writable: true,
                    configurable: true,
                    value: function (start, stop, func) {
                        var collection = this;
                        func = func || function (x) { return x; };
                        for (var i = start; i < stop ; i++) {
                            if (collection instanceof Float32Array) {
                                collection[i - start] = (func(i));
                            }
                            else
                                collection.push(func(i, i - start));
                        }
                        return collection;
                    }
                });
            }
            if (!array.groupBy) {
                Object.defineProperty(array, 'groupBy', {
                    enumerable: false,
                    writable: true,
                    configurable: true,
                    value: function (func) {
                        var collection = this;
                        var result = {};
                        for (var i = 0 ; i < collection.length ; i++) {
                            var t = func(collection[i]);
                            result[t] = result[t] || [];
                            result[t].push(collection[i]);
                        }
                        return result;
                    }
                });
            }

            if (!array.mostcommon) {
                Object.defineProperty(array, 'mostcommon', {
                    enumerable: false,
                    writable: true,
                    configurable: true,
                    value: function (func) {
                        var collection = this;
                        var res = collection.groupBy(func);
                        var most;

                        for (var i in res) {
                            if (most === undefined) {
                                most = i;
                            }
                            else if (res[most].length < res[i].length) {
                                most = i;
                            }
                        }
                        return most
                    }
                })
            }

            if (!array.second) {
                Object.defineProperty(array, 'second', {
                    enumerable: false,
                    writable: true,
                    configurable: true,
                    value: function (func) {
                        var collection = this.select(function (x) { return x });
                        var metcriteria = 0;
                        func = func || function () { return true; };
                        for (var i = 0 ; i < collection.length ; i++) {
                            if (func(collection[i])) {
                                metcriteria++;
                            }
                            if (metcriteria == 2) {
                                return (collection[i]);
                            }
                        }
                        return null;
                    }
                });
            }

            if (!array.min) {
                Object.defineProperty(array, 'min', {
                    enumerable: false,
                    writable: true,
                    configurable: true,
                    value: function (func) {
                        var result = null;
                        var collection = this;
                        func = func || function (x) { return x; }
                        for (var i = 0 ; i < collection.length; i++) {
                            if (result == null || func(collection[i]) < result) {
                                result = func(collection[i]);
                            }
                        }
                        return result;
                    }
                });
            }

            if (!array.closestAbs) {
                Object.defineProperty(array, 'closestAbs', {
                    enumerable: false,
                    writable: true,
                    configurable: true,
                    value: function (val, func) {
                        var result = null;
                        var resdiff = null;
                        var collection = this;
                        func = func || function (x) { return x; }
                        for (var i = 0 ; i < collection.length; i++) {
                            var x = func(collection[i]);
                            var dif;
                            if (Math.abs(val) > Math.abs(x)) {
                                dif = Math.abs(val) - Math.abs(x)
                            }
                            else {
                                dif = Math.abs(x) - Math.abs(val)
                            }
                            if (result === null) {
                                resdiff = dif;
                                result = i;
                            }

                            if (resdiff === 0) {
                                return i;
                            }
                            else if (resdiff > dif) {
                                resdiff = dif;
                                result = i;
                            }
                        }
                        return result
                    }
                })
            }

            if (!array.nth) {
                Object.defineProperty(array, 'nth', {
                    enumerable: false,
                    writable: true,
                    configurable: true,
                    value: function (nth, func) {
                        var collection = this.select(function (x) { return x });
                        var metcriteria = 0;
                        func = func || function () { return true; };
                        for (var i = 0 ; i < collection.length ; i++) {
                            if (func(collection[i])) {
                                metcriteria++;
                            }
                            if (metcriteria == nth) {
                                return (collection[i]);
                            }
                        }
                        return null;
                    }
                });
            }

            if (!array.unique) {
                Object.defineProperty(array, 'unique', {
                    enumerable: false,
                    writable: true,
                    configurable: true,
                    value: function (func) {
                        var result = MEPH.util.Array.create();
                        var finalresult = MEPH.util.Array.create();
                        func = func || function (x) { return x; };
                        var collection = this;
                        for (var i = 0 ; i < collection.length ; i++) {
                            //if (func(collection[i])) {
                            if (result.indexOf(func(collection[i])) === -1) {
                                result.push(func(collection[i]));
                                finalresult.push(collection[i]);
                            }
                            //}
                        }
                        return finalresult;
                        //return result;
                    }
                });
            }
            if (!array.summation) {
                Object.defineProperty(array, 'summation', {
                    enumerable: false,
                    writable: true,
                    configurable: true,
                    value: function (func) {
                        var result = 0;
                        var collection = this;
                        for (var i = 0; i < collection.length ; i++) {
                            result = func(collection[i], result, i);
                        }
                        return result;
                    }
                });
            }
            if (!array.addition) {
                Object.defineProperty(array, 'addition', {
                    enumerable: false,
                    writable: true,
                    configurable: true,
                    value: function (func) {
                        var result = 0;
                        var collection = this;
                        func = func || function (x) { return x; }
                        for (var i = 0; i < collection.length ; i++) {
                            result += func(collection[i], i);
                        }
                        return result;
                    }
                });
            }
            var pushArray = function (array, value, i) {
                if (array instanceof Float32Array || array instanceof Float64Array) {
                    array[i] = value;
                }
                else {
                    array.push(value);
                }
            }
            if (!array.cumsum) {
                Object.defineProperty(array, 'cumsum', {
                    enumerable: false,
                    writable: true,
                    configurable: true,
                    value: function (func) {
                        var result = MEPHArray.$create(this, this.length);
                        var total = 0;
                        func = func || function (x) { return x; };
                        var collection = this;
                        for (var i = 0; i < collection.length ; i++) {
                            total += func(collection[i]);
                            pushArray(result, total, i);
                        }
                        return result;
                    }
                });
            }

            if (!array.sum) {
                Object.defineProperty(array, 'sum', {
                    enumerable: false,
                    writable: true,
                    configurable: true,
                    value: function (func) {
                        var result = 0;
                        var collection = this;
                        for (var i = 0 ; i < collection.length; i++) {
                            result += func(collection[i], i);
                        }
                        return result;
                    }
                });
            }

            if (!array.minSelect) {
                Object.defineProperty(array, 'minSelect', {
                    enumerable: false,
                    writable: true,
                    configurable: true,
                    value: function (func) {
                        var result = null;
                        var selection = null
                        var collection = this;
                        func = func || function (x) { return x; }
                        for (var i = 0 ; i < collection.length; i++) {
                            if (result == null || func(collection[i]) < result) {
                                result = func(collection[i]);
                                selection = collection[i];
                            }
                        }
                        return selection;
                    }
                });
            }

            if (!array.minSelectIndex) {
                Object.defineProperty(array, 'minSelectIndex', {
                    enumerable: false,
                    writable: true,
                    configurable: true,
                    value: function (func) {
                        var result = null;
                        var selection = null
                        var collection = this;
                        func = func || function (x) { return x; }
                        for (var i = 0 ; i < collection.length; i++) {
                            if (result == null || func(collection[i]) < result) {
                                result = func(collection[i]);
                                selection = i;
                            }
                        }
                        return selection;
                    }
                });
            }

            if (!array.concatFluentReverse) {
                Object.defineProperty(array, 'concatFluentReverse', {
                    enumerable: false,
                    writable: true,
                    configurable: true,
                    value: function (func) {
                        var collection = this;
                        var result = MEPH.util.Array.create();
                        for (var i = collection.length; i--;/**/) {
                            result = MEPH.util.Array.create(result.concat(func(collection[i], i)));
                        }
                        return result;
                    }
                });
            }

            if (!array.concatFluent) {
                Object.defineProperty(array, 'concatFluent', {
                    enumerable: false,
                    writable: true,
                    configurable: true,
                    value: function (func) {
                        var collection = this, count = 0;

                        collection.foreach(function (t) {
                            count += t.length;
                        });

                        var result = this instanceof Float32Array ? new Float32Array(count) : [];

                        if (this instanceof Float32Array) {
                            var len = collection.length;
                            for (var i = 0; i < collection.length ; i++) {
                                var res = func(collection[i], i);
                                for (var j = 0 ; j < collection[i].length; i++) {
                                    result[i * len + j] = collection[i][j];
                                }
                            }
                        }
                        else {
                            for (var i = 0; i < collection.length ; i++) {
                                result = MEPH.util.Array.create(result.concat(func(collection[i], i)));
                            }
                        }
                        return result;
                    }
                });
            }

            if (!array.subset) {
                Object.defineProperty(array, 'subset', {
                    enumerable: false,
                    writable: true,
                    configurable: true,
                    value: function (start, stop) {
                        var collection = this;
                        stop = Math.min(collection.length, stop === undefined || stop === null ? collection.length : stop);
                        start = Math.min(collection.length, start === undefined || start === null ? collection.length : start);
                        start = start < 0 ? 0 : start;
                        stop = stop < 0 ? 0 : stop;
                        var result = this instanceof Float32Array ? new Float32Array(stop - start) : [];
                        for (var i = start ; i < stop ; i++) {
                            if (this instanceof Float32Array) {
                                result[i - start] = collection[i];
                            }
                            else {
                                result.push(collection[i]);
                            }

                        }
                        return MEPH.util.Array.create(result);
                    }
                });
            }

            if (!array.subeach) {
                Object.defineProperty(array, 'subeach', {
                    enumerable: false,
                    writable: true,
                    configurable: true,
                    value: function (start, stop, func) {
                        var collection = this;
                        stop = Math.min(collection.length, stop === undefined || stop === null ? collection.length : stop);
                        start = Math.min(collection.length, start === undefined || start === null ? collection.length : start);
                        start = start < 0 ? 0 : start;
                        stop = stop < 0 ? 0 : stop;
                        for (var i = start ; i < stop ; i++) {
                            func(collection[i]);
                        }
                        return collection;
                    }
                });
            }

            if (!array.window) {
                Object.defineProperty(array, 'window', {
                    enumerable: false,
                    writable: true,
                    configurable: true,
                    value: function (start, stop, windowFunc) {
                        var collection = this;
                        stop = Math.min(collection.length, stop === undefined || stop === null ? collection.length : stop);
                        var result = this instanceof Float32Array ? new Float32Array(stop - start) : [];
                        for (var i = start ; i < stop ; i++) {
                            pushArray(result, collection[i] * windowFunc(i - start, stop), i - start)
                        }
                        return MEPH.util.Array.create(result);
                    }
                })
            }

            if (neveragain) {
                window.appliedToAllArrays = true;
            }
            return array;
        },
        convert: function (obj) {
            var array = MEPH.util.Array.create(),
                i;
            for (i = 0 ; i < obj.length ; i++) {
                array.push(obj[i]);
            }
            return array;
        },
        /**
         * Converts the object into an array.
         * @param {Object} obj;
         **/
        convertObject: function (obj) {
            var i, result = [];
            if (Array.isArray(obj)) {
                return MEPH.Array(obj);
            }
            for (i in obj) {
                result.push(obj[i]);
            }
            return result;
        }
    }
}).then(function () {
    MEPH.util.Array.create(Array.prototype, true);
    if (Float32Array)
        MEPH.util.Array.create(Float32Array.prototype, true);
    if (Float64Array)
        MEPH.util.Array.create(Float64Array.prototype, true);
})﻿
/**
 * @class MEPH.util.String
 * String
 */

/**
 * @method capitaliseFirstLetter
 * Capitalises the first character of a string.
 **/
if (!String.prototype.capitaliseFirstLetter) {
    Object.defineProperty(String.prototype, 'capitaliseFirstLetter', {
        enumerable: false,
        writable: true,
        configurable: true,
        value: function () {
            var string = this;
            return string.charAt(0).toUpperCase() + string.slice(1);
        }
    });
}

/**
 * @method startsWith
 * @returns {Boolean} true if string starts with false if otherwise.
 **/
if (!String.prototype.startsWith) {
    Object.defineProperty(String.prototype, 'startsWith', {
        enumerable: false,
        writable: true,
        configurable: true,
        value: function (suffix) {
            return this.indexOf(suffix, 0) === 0;
        }
    });
}

if (!String.prototype.trim)
    String.prototype.trim = function () { return this.replace(/^\s\s*/, '').replace(/\s\s*$/, ''); };

if (!String.prototype.ltrim)
    String.prototype.ltrim = function () { return this.replace(/^\s+/, ''); };

if (!String.prototype.rtrim)
    String.prototype.rtrim = function () { return this.replace(/\s+$/, ''); };

if (!String.prototype.fulltrim)
    String.prototype.fulltrim = function () { return this.replace(/(?:(?:^|\n)\s+|\s+(?:$|\n))/g, '').replace(/\s+/g, ' '); };

/**
 * @method after
 * @param {String} suffix
 * @returns {String} gets the string after the first instance of the suffix or null.
 **/
if (!String.prototype.after) {
    Object.defineProperty(String.prototype, 'after', {
        enumerable: false,
        writable: true,
        configurable: true,
        value: function (suffix) {
            var start = this.indexOf(suffix, 0);
            if (start !== -1) {
                return this.substr(start + suffix.length, this.length - (start + suffix.length));
            }
            return null;
        }
    });
}
/**
 * @method nodename
 * @returns {String} returns a string appropriate for a node.
 **/
if (!String.prototype.nodename) {
    Object.defineProperty(String.prototype, 'nodename', {
        enumerable: false,
        writable: true,
        configurable: true,
        value: function (suffix) {
            return this.split(' ').join('_').replace(new RegExp("-", 'g'), '_');
        }
    });
}


if (!Array.prototype.parseInt)
    Array.prototype.parseInt = function (base) {
        var result = [];
        for (var i = 0; i < this.length; i++) {
            result.push(parseInt(this[i], base));
        }
        return result;
    }
if (!Array.prototype.chordInversion)
    Array.prototype.chordInversion = function (shiftamount) {
        var result = [];
        for (var i = 0; i < this.length; i++) {
            result.push(this[i]);
        }
        for (var i = 0 ; i < shiftamount ; i++) {
            var value = result.shift();
            result.push(value);
        }
        return result;

    }
if (!Array.prototype.chordNormalize)
    Array.prototype.chordNormalize = function (base) {
        var changeamount = this[0];
        var result = [];
        for (var i = 0 ; i < this.length; i++) {
            var _i = (this[i] - changeamount);
            if (_i < 0) {
                _i += base;
            }
            while (result[result.length - 1] > _i) {
                _i += base;
            }
            result.push(_i);
        }

        return result;
    }
if (!Array.prototype.isVoiceInScale)
    Array.prototype.isVoiceInScale = function (array) {
        for (var i = 0 ; i < this.length; i++) {
            if (array.indexOf(parseInt(this[i]) % 12) == -1) {
                return false;
            }
        }
        return true;
    }
if (!Array.prototype.convertToVVoice) {
    Array.prototype.convertToVVoice = function () {
        var result = "V";
        for (var i = 0 ; i < this.length; i++) {
            result += this[i].toString(12);
        }
        return result.toUpperCase();
    }
}
if (!Array.prototype.indexOf) {
    Array.prototype.indexOf = function (searchElement /*, fromIndex */) {
        "use strict";
        if (this == null) {
            throw new TypeError();
        }
        var t = Object(this);
        var len = t.length >>> 0;
        if (len === 0) {
            return -1;
        }
        var n = 0;
        if (arguments.length > 1) {
            n = Number(arguments[1]);
            if (n != n) { // shortcut for verifying if it's NaN
                n = 0;
            } else if (n != 0 && n != Infinity && n != -Infinity) {
                n = (n > 0 || -1) * Math.floor(Math.abs(n));
            }
        }
        if (n >= len) {
            return -1;
        }
        var k = n >= 0 ? n : Math.max(len - Math.abs(n), 0);
        for (; k < len; k++) {
            if (k in t && t[k] === searchElement) {
                return k;
            }
        }
        return -1;
    }
}

if (!String.prototype.splice)
    String.prototype.splice = function (index, howManyToDelete, stringToInsert /* [, ... N-1, N] */) {
        var characterArray = this.split("");
        Array.prototype.splice.apply(
        characterArray,
        arguments
        );
        return (
        characterArray.join("")
        );

    };

if (!String.prototype.parseAndSlice)
    String.prototype.parseAndSlice = function () {
        return this.split("").parseInt(12);
    }
if (!String.prototype.parseAndSliceDouble)
    String.prototype.parseAndSliceDouble = function () {
        var spit = this.trim().split("");
        spit.shift();
        var result = [];
        for (var i = 0 ; i < spit.length; i = i + 2) {
            result.push((spit[i] + "" + spit[i + 1]));
        }
        return result;
    }
if (!String.prototype.nth)
    String.prototype.nth = function (j) {
        if (j == 1) {
            return "1st";
        }
        if (j == 2)
            return "2nd";
        if (j == 3)
            return "3rd";
        if (j == 0)
            return "";
        return j + "th";
    }﻿/**
 * @class Promise
 * built in  Promise.
 */
/**
 * @class MEPH
 * MEPH is the framework.
 */
var window = window || self;
// run this in global scope of window or worker. since window.self = window, we're ok
if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
    // huzzah! a worker!
    var workerthread = true;
} else {
    // I'm a window... sad trombone.
}

var mephFrameWork = (function ($meph, $frameWorkPath, $promise, $offset) {

    if ($promise) {
        Promise = $promise;
    }
    var createClassPath = function (_class, offset) {
        var namespaceSplit = _class.split(".");
        offset = offset || window;
        var previous = null;
        for (var i = 0 ; i < namespaceSplit.length ; i++) {
            if (!offset[namespaceSplit[i]]) {
                previous = offset;
                offset[namespaceSplit[i]] = {};
                offset = offset[namespaceSplit[i]];
            }
            else {
                previous = offset;
                offset = offset[namespaceSplit[i]];
            }
        }
        return { previous: previous, name: namespaceSplit[i - 1] };
    }
    var meph;
    if (typeof $meph === 'string') {
        meph = createClassPath($meph, $offset);
        meph = meph.previous[meph.name];
    }
    meph.DebugMode = true;
    /**
     * Defines a class.
     * @param {String} className
     * @param {Object} config
     */
    meph.define = function (className, config) {
        var definedClass = getDefinedClass(className),
            undefinedClasses = [],
            undefinedTemplates = [],
            undefinedRequirements,
            requirements = [],
            requiredClasses;
        if (!definedClass) {
            requiredClasses = getRequiredClasses(config);
            requiredTemplates = getRequiredTemplates(config, className);
            if (requiredClasses.length > 0) {
                undefinedClasses = requiredClasses.where(function (x) {
                    return getDefinedClass(x) === null;
                }).select(function (x) {
                    return {
                        classifiedName: x,
                        path: getClassPath(x) + jsPostFix,
                        type: javascriptType
                    }
                });
            }
            if (requiredTemplates.length > 0) {
                undefinedTemplates = requiredTemplates.where(function (x) {
                    return getDefinedTemplate(x) === null;
                }).select(function (x) {
                    return {
                        classifiedName: x,
                        path: getClassPath(x) + templatePostFix,
                        type: templateType
                    }
                });
            }
            undefinedRequirements = undefinedClasses.concat(undefinedTemplates);
            if (undefinedRequirements.length > 0) {
                requirements = meph.Array(undefinedRequirements)
                                    .select(function (details) {
                                        return retrieveRequiredClass(details);
                                    });;
            }
            if (requirements.length === 0) {
                requirements.push(Promise.resolve());
            }

            return Promise.all(requirements).then(function (results) {
                return meph.beforeResourceDefined(className, results)
            }).then(function (results) {
                var addNoTemplateInfo = false;
                if (results.results && results.results[0]) {
                    meph.Array(results.results)
                        .where(function (x) {
                            if (!x || !x.details) {
                                addNoTemplateInfo = true;
                            }
                            return x && x.details;
                        })
                        .select(function (x) {
                            x.details.template = x.result;
                            x.details.alias = config.alias.toLowerCase();

                            return x.details;
                        })
                        .foreach(function (templateInfo) {
                            addTemplateInformation(templateInfo);
                            meph.fire(meph.events.definedClass + templateInfo.classifiedName + templateInfo.type, templateInfo);
                        });
                }
                else if (results.results && results.results[0] === undefined) {
                    addNoTemplateInfo = true;
                }

                if (config.alias && addNoTemplateInfo) {
                    addTemplateInformation({
                        template: null,
                        alias: config.alias,
                        classifiedName: className
                    });
                }



                var superclass = getExtendingClass(config);
                var nameAndSpace = createClassPath(className);
                nameAndSpace.previous[nameAndSpace.name] = superclass.extend(className, config);
                meph.fire(meph.events.definedClass, className);
                meph.fire(meph.events.definedClass + className + javascriptType, className);
                config.alternateNames = config.alternateNames && Array.isArray(config.alternateNames) ? config.alternateNames : (config.alternateNames ? [config.alternateNames] : []);
                addDefinedClassInformation({
                    alias: config.alias ? config.alias.toLowerCase() : className,
                    alternateNames: config.alternateNames,
                    classifiedName: className,
                    config: config
                });

                return getDefinedClass(className);
            });
        }
        return Promise.resolve().then(function () {
            return definedClass;
        });
    }
    /**
    * @method undefine
    * Removes the definition of the class
    * @param {String} className
    */
    meph.undefine = function (className) {
        var definedClass = getDefinedClass(className),
            result;
        if (definedClass) {
            result = createClassPath(className);
            result.previous[result.name] = undefined;
        }
    }

    var pubsubevents = [];
    /**
     * @method subscribe
     * Subscibe to an event.
     * @param {String} event
     * @param {Function} func
     **/
    meph.subscribe = function (events, func) {
        var guid = meph.GUID();
        if (!Array.isArray(events)) {
            events = [events];
        }
        events.foreach(function (event) {
            pubsubevents.push({ event: event, func: func, reference: guid });
        })
        return guid;
    }
    meph.Log = function (error) {
        //log stuff.
        console.log(error);

    };
    /**
     * @method createClass
     * Creates a class
     **/
    meph.createClass = function (namespace, alias, extend, templates, functions) {
        var $class = meph.getDefinedClass(namespace),
            config,
            templates = templates || false;
        if ($class) {
            return Promise.resolve().then(function () {
                return $class;
            });
        }
        else {
            config = {
                alias: alias,
                templates: templates,
                extend: extend
            }
            meph.applyIf(functions, config);
            return meph.define(namespace, config);
        }
    }
    //(namespace.join('.'), MEPH.GUID(), 'MEPH.control.Control');

    /**
     * @method unsubscribe
     * Unsubscribe.
     * @param {Array/string} ids
     */
    meph.unsubscribe = function (ids) {
        ids = Array.isArray(ids) ? ids : [ids];
        meph.Array(ids).foreach(function (id) {
            meph.Array(pubsubevents).removeWhere(function (x) { return x === id || (x && x.reference === id); });
        });
    }

    /**
     * @method publish
     * Publish an event.
     * @param {String} event
     **/
    meph.publish = function (event) {
        var args = arguments;
        meph.Array(pubsubevents).where(function (x) {
            return x.event === event;
        }).foreach(function (x) {
            try {
                x.func.apply(null, args);
            }
            catch (e) {
                meph.Log(e);
            }
        });
    }

    /**
     * @method create
     * Create an instance of the classname.
     */
    meph.create = function (className) {
        var definedClass = getDefinedClass(className);
        if (definedClass) {
            return Promise.resolve().then(function () { return definedClass; });
        }
        else {
            return meph.retrieveRequiredClass({
                classifiedName: className,
                path: getClassPath(className) + jsPostFix,
                type: javascriptType
            }).then(function () {
                nodejs.log('wait for class to define ' + definedClass);
                definedClass = getDefinedClass(className);
                if (definedClass) {
                    nodejs.log('returning defined class ' + definedClass);
                    return definedClass;
                }
                var eventResolve,
                    listenForClassDefining = function (className, name) {
                        if (className === name) {
                            definedClass = getDefinedClass(className);
                            eventResolve(definedClass);
                            meph.removeListeners(meph.events.definedClass, listenForClassDefining);
                        }
                    }.bind(meph, className),
                    promise = new Promise(function (resolve, result) {
                        eventResolve = resolve;
                    });
                meph.on(meph.events.definedClass, listenForClassDefining, listenForClassDefining);
                return promise;
            });
        }
    }
    /**
     * @method requires
     * Gets the required classes.
     * @returns {Promise}
     */
    meph.requires = function () {
        var args = meph.Array();
        for (i = 0 ; i < arguments.length ; i++) {
            args.push(arguments[i]);
        }
        return Promise.all(args.select(function (x) {
            return meph.create(x);
        }));
    }

    /**
     * @method beforeResourceDefined
     * Executes before resources are defined
     */
    meph.beforeResourceDefined = function (resourceName, results) {
        return {
            resourceName: resourceName,
            results: results
        };
    }
    /**
     * @method get
     * Makes a request via the url
     * @param {String} url
     * @param {Object} options
     */
    meph.get = function (url, options) {
        // Return a new promise.
        return new Promise(function (resolve, reject) {
            // Do the usual XHR stuff
            var req = new XMLHttpRequest();


            req.open('GET', url);

            req.onload = function () {
                // This is called even on 404 etc
                // so check the status
                if (req.status == 200) {
                    // Resolve the promise with the response text
                    resolve(req.response);
                }
                else {
                    // Otherwise reject with the status text
                    // which will hopefully be a meaningful error
                    reject(Error(req.statusText));
                }
            };

            // Handle network errors
            req.onerror = function () {
                reject(Error("Network Error"));
            };

            // Make the request
            req.send();
        });
    }

    /**
     * @method getExtendingClass
     * Gets the extending class, based on the configuration.
     * @param {Object} config
     * @returns {Object}
     */
    var getExtendingClass = function (config) {
        if (config.extend) {
            return getDefinedClass(config.extend) || Class;
        }
        return Class;
    }

    /**
     * @method namespace
     * Creates a namespace.
     * @param {String} namespace A period delimited string.
     */
    meph.namespace = function (namespace) {
        createClassPath(namespace);
    }
    /**
     * @method retrieveRequiredClass
     * Retrieves the required class or file using the provided details.
     * @param {Object} details
     * @param {String} details.path
     * @param {String} details.type
     **/
    meph.retrieveRequiredClass = function (details) {
        var promise,
            resolutionReached,
            retrieving = meph.Array(listeners).contains(function (x) {
                return x.type === meph.events.definedClass + details.classifiedName + details.type
            }),
            definedClass;

        if (templateType === details.type) {
            definedClass = getDefinedTemplate(details.classifiedName);
        }
        else {
            definedClass = getDefinedClass(details.classifiedName);
        }

        promise = new Promise(function (resolve, reject) {
            resolutionReached = resolve;
        });

        if (definedClass) {
            resolutionReached();
            return promise.then(function () { return definedClass; });
        }
        else if (retrieving) {
            meph.on(meph.events.definedClass + details.classifiedName + details.type, function () {
                meph.un(meph.events.definedClass + details.classifiedName + details.type, details);
                resolutionReached.apply(details, arguments);
            }, details);
            return promise;
        }
        else {
            if (details.type === javascriptType) {
                meph.on(meph.events.definedClass + details.classifiedName + details.type, function () {
                    meph.un(meph.events.definedClass + details.classifiedName + details.type, details);
                    resolutionReached.apply(details, arguments);
                }, details);
                meph.loadJSCssFile(details.path, javascriptType, function () {
                    nodejs.log('loaded class ');

                }).then(function () {
                    nodejs.log('fire class retrieval event');

                    meph.fire(retrievalEventPrefix + details.path, {});
                });
                return promise;
            }
            else {
                return meph.get(details.path).then(function (result) {
                    return {
                        result: result,
                        details: details
                    };
                });
            }
        }
    }


    var retrieveRequiredClass = meph.retrieveRequiredClass;
    /**
     * Gets the classes path.
     * @param {String} path
     **/
    meph.getClassPath = function (path) {
        var closestMatch = paths.max(function (x) {
            if (path.startsWith(x.prefix)) {
                return x.prefix.length;
            }
            return -1;
        }),
        offset;
        offset = closestMatch.prefix.length + classPathSepartor.length;
        classPath = path.substring(offset, path.length).split('.').join(folderPathSeparator);
        return closestMatch.path + folderPathSeparator + classPath;
    }

    meph.getSource = function (name, extension) {
        var path = meph.getClassPath(name);
        return meph.get(path + extension);
    }

    meph.emptyFunction = function () { };
    meph.ajax = function (path, configure) {
        var promiseResolution,
            failureResolution,
            promise = new Promise(function (resolve, failure) {
                promiseResolution = resolve;
                failureResolution = failure;
            });
        configure = configure || {};
        configure = meph.applyIf({
            method: 'GET',
            async: true,
            requestHeaders: []
        }, configure);
        var xmlhttp = new XMLHttpRequest();


        configure.requestHeaders.push({ header: "Cache-Control", value: "no-cache" })
        if (!configure.requestHeaders.some(function (x) { return x.header === 'Authorization'; }) && meph.getAuthorizationToken()) {
            configure.requestHeaders.push({ header: 'Authorization', value: 'Bearer ' + meph.getAuthorizationToken() });
        }
        xmlhttp.onreadystatechange = function () {
            if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {

                promiseResolution({
                    responseText: xmlhttp.responseText
                });
            } else if (xmlhttp.readyState == 4) {

                switch (status) {
                    default:
                        failureResolution({ status: status, path: path, configuration: configure });
                        break;
                }
            }
        }
        xmlhttp.onerror = function () {
            debugger
        }
        xmlhttp.addEventListener("error", function () {
            debugger
        }, false);
        xmlhttp.open(configure.method, path, configure.async);
        meph.Array(configure.requestHeaders).foreach(function (x) {
            xmlhttp.setRequestHeader(x.header, x.value);
        });
        xmlhttp.send();
        return promise;
    };
    //function sendFoodRequest() {
    //    var xhr = new XMLHttpRequest();

    //    xhr.open("POST", 'http://localhost:7777/services/rest/foods/2013/06/25', true);

    //    var boundary = '---------------------------';
    //    boundary += Math.floor(Math.random() * 32768);
    //    boundary += Math.floor(Math.random() * 32768);
    //    boundary += Math.floor(Math.random() * 32768);
    //    xhr.setRequestHeader("Content-Type", 'multipart/mixed; boundary=' + boundary);
    //    var body = '';
    //    body += '--' + boundary + '\r\n' + 'Content-Disposition: form-data; name="foodList"' + '\r\n';
    //    body += "Content-Type: application/json\r\n\r\n";
    //    body += '[   {"id":null,"name":"Spinach","recipe":null}   ]';
    //    body += '\r\n'
    //    body += '--' + boundary + '--';
    //    xhr.setRequestHeader('Content-length', body.length);
    //    xhr.onload = function () { }
    //    xhr.send(body);
    //}
    var authtoken;
    meph.setAuthorizationToken = function (token) {
        authtoken = token;
    }
    meph.getAuthorizationToken = function () {
        return authtoken;
    }

    meph.requestAuthentication = function (path, clientId, returnUri, scope, token, state, client_secret) {
        path = path || 'http://localhost:52154/OAuth/Authorize';
        scope = scope || 'agresso';
        client_secret = client_secret || 'secret';
        token = token || 'token';
        state = state || 'state';
        clientId = clientId || 'AgressoMobile';
        var configure = {};
        configure.method = 'OPTIONS'
        var uri = meph.addQueryString(path + '', {
            'client_id': clientId ? clientId : 'Demo',
            'redirect_uri': returnUri,
            'state': state,
            'scope': scope,
            'client_secret': client_secret,
            'response_type': token,
        });

        var toresolve,
            promise = new Promise(function (resolve, failure) {
                toresolve = resolve;
                tofail = failure;
            });

        try {
            var iframe = meph.createIframe(uri);
        }
        catch (error) {
            alert(error);
            if (error && error.message) {
                alert(error.message)
            }
        }

        var interval = setInterval(function () {
            try {
                if (iframe && iframe.contentWindow.location) {
                    var options = {},
                        hash = iframe.contentWindow.location.hash,
                        args = MEPH.Array(hash.split('&')).select(function (x) {
                            return {
                                key: x.split('=')[0],
                                value: x.split('=')[1]
                            }
                        }).foreach(function (x) {
                            options[x.key.replace('#', '')] = x.value;
                        });
                    if (options.access_token) {
                        toresolve(options);
                        iframe.parentNode.removeChild(iframe);
                        clearInterval(interval);
                    }
                }
            } catch (e) {
            }
        }, 100);

        return promise;
    }
    meph.createIframe = function (uri) {
        var iframe = document.createElement('iframe');

        iframe.setAttribute('src', uri);
        iframe.classList.add('u4-iframe');
        document.body.appendChild(iframe);
        return iframe;
    }

    meph.createWindow = function (uri) {
        var myWindow = window.open(uri || '', '_blank', 'location=yes');
        alert('myWindow ' + myWindow);
        myWindow.document.write("<p>This window's name is: " + myWindow.name + "</p>");
        return myWindow;
    }

    meph.addQueryString = function (uri, parameters) {
        var delimiter = (uri.indexOf('?') == -1) ? '?' : '&';
        for (var parameterName in parameters) {
            var parameterValue = parameters[parameterName];
            uri += delimiter + encodeURIComponent(parameterName) + '=' + encodeURIComponent(parameterValue);
            delimiter = '&';
        }
        return uri;
    }

    meph.IsEventable = function (object) {
        if (object && object[privateVariablePrefix + 'listeners']) {
            return true;
        }
        return false
    }

    meph.preflight = function (path, configure) {
        configure = configure || {};
        configure.method = 'OPTIONS'
        //configure.requestHeaders = configure.requestHeaders || [];
        //configure.requestHeaders.push({
        //    header: 'Origin',
        //    value: window.location.origin
        //})
        //configure.requestHeaders.push({ header: 'Access-Control-Request-Method', value: 'PUT' });
        //configure.requestHeaders.push({ header: 'Access-Control-Request-Headers', value: 'X-Custom-Header' });
        return meph.ajax(path, configure);
    }
    meph.ajaxJSON = function (path, configure) {
        return meph.ajax(path, configure).then(function (response) {
            try {
                var responseJSON = JSON.parse(response.responseText);
                response.responseJSON = responseJSON;
                return response;
            }
            catch (error) {
                response.responseText = response.responseText.replace(/\"/g, "'");
                response.responseText = response.responseText.replace(/'/g, "\"");
                response.responseJSON = JSON.parse(response.responseText);
                return response;
            }
        });
    }
    /**
     * @method loadJSCssFile
     * Loads a javascript or css file.
     * @param {String} filename
     * @param {String} filetype
     * @param {Function} callback
     **/
    meph.loadJSCssFile = function (filename, filetype, callback, attributes, innerHTML) {
        callback = callback || meph.emptyFunction;
        var toResolve,
            toReject,
            promise = new Promise(function (resolve, reject) {
                toReject = reject;
                toResolve = resolve;
            });
        if (filetype == javascriptType) {
            if ((!document) || ((document) && !document.getElementsByTagName)) {

                importScripts(filename);
                setTimeout(function () {
                    try {
                        callback();
                        toResolve();
                    }
                    catch (error) {
                        console.log('something went wrong')
                    }
                }, 1);
            }
            else {
                var head = document.getElementsByTagName('head')[0];
                var script = document.createElement('script');
                script.type = 'text/javascript';
                script.onreadystatechange = function () {
                    if (this.readyState == 'complete') callback();
                }
                if (attributes) {
                    for (var i in attributes) {
                        script.setAttribute(i, attributes[i] || '');
                    }
                }
                if (innerHTML){
                    script.innerHTML = innerHTML;
                }
                script.onload = callback;
                script.src = filename// 'helper.js';
                head.appendChild(script);
            }
            toResolve(filename, filetype);
        }
        else if (filetype === 'mp3' || filetype === 'audio') {

            var XHR = new XMLHttpRequest();
            XHR.open('GET', filename, true);
            XHR.responseType = 'arraybuffer';
            XHR.onload = function () {

                toResolve({ response: XHR.response })
            };

            XHR.onerror = function () {
                toFail({ error: new Error('AudioSampleLoader: XMLHttpRequest called onerror') })
            };
            XHR.send();

        }
        else if (filetype == "css") { //if filename is an external CSS file
            var fileref = document.createElement("link")
            fileref.setAttribute("rel", "stylesheet")
            fileref.setAttribute("type", "text/css")
            fileref.setAttribute("href", filename)
        }
        if (typeof fileref != "undefined") {
            document.getElementsByTagName("head")[0].appendChild(fileref);
        }
        return promise;
    }

    /**
     * @method loadScript
     * Loads a script.
     * @param {Array} scripts
     * @return {Promise}
     */
    meph.loadScript = function (file) {
        var toresolve;
        var promise = new Promise(function (resolve, fail) {
            toresolve = resolve;
        });
        meph.loadJSCssFile(file, javascriptType, function () {
            toresolve.apply(this, arguments);
        });
        return promise;
    }

    /**
     * @method loadScripts
     * Loads scripts.
     * @param {Array} scripts
     * @return {Promise}
     */
    meph.loadScripts = function (scripts) {
        var i = 0;
        var promise = Promise.resolve();
        for (i = 0; i < scripts.length ; i++) {
            promise = promise.then(function () {
                return meph.loadScript(scripts[this]);
            }.bind(i))
        }
        return promise;
    }

    meph.namespace('MEPH.Loader');
    MEPH.Loader.loadScript = meph.loadScript;
    MEPH.Loader.loadScripts = meph.loadScripts;
    var bindPrefixShortCuts = [],
        classPathSepartor = '.',
        retrievalEventPrefix = 'onRetrival',
        folderPathSeparator = '/',
        templatePostFix = '.html',
        jsPostFix = '.js',
        getClassPath = meph.getClassPath,
        templateType = '.html.template',
        javascriptType = '.js',
        paths = [],
        nonEnumerablePropertyPrefix = ' ',
        jsync = nonEnumerablePropertyPrefix + 'j',
        dataBindPrefixes = [],
        reverseBindingPrefixes = [],
        eventDataBindingPrefixes = [],
        defaultBindPrefix = 'data-bind',
        defaultReversePrefix = 'data-push',
        defaultEventPrefix = 'data-events',
        listenersPropertyKey = nonEnumerablePropertyPrefix + 'listeners',
        domListenersPropertyKey = nonEnumerablePropertyPrefix + 'domlisteners',
        dataObjectReferenceAttribute = 'data-reference',
        privatePropertyPrefix = '$',
        privateClassPrefix = '$',
        bindPrefixDelimiter = '-',
        pipeString = '|',
        pathDelimiter = '.',
        isObservablePropertyKey = nonEnumerablePropertyPrefix + 'isObservable',
        isValidatablePropertyKey = nonEnumerablePropertyPrefix + 'isValidatable',
        connectableTypes = [
            { type: 'control', shortCut: 'c$' },
            { type: 'control', shortCut: 'control' },
            { type: 'view', shortCut: 'v$' },
            { type: 'view', shortCut: 'view' },
            { type: 'subcontrol', shortCut: 's$' },
            { type: 'parentcontrol', shortCut: 'pc$' },
            { type: 'html', shortCut: 'html' },
            { type: 'presenter', shortCut: 'p$' },
            { type: 'presenter', shortCut: 'presenter' },
            { type: 'viewmodel', shortCut: 'vm$' },
            { type: 'viewmodel', shortCut: 'viewmodel' },
            { type: 'model', shortCut: 'm$' },
            { type: 'model', shortCut: 'model' },
            { type: 'controller', shortCut: 'controller' },
            { type: 'self', shortCut: 'self' },
            { type: 'controller', shortCut: 'ct$' }
        ];
    meph.patternTypes = ['presenter', 'controller', 'view', 'model', 'viewmodel'];
    meph.templateType = templateType;
    meph.folderPathSeparator = folderPathSeparator;
    meph.privatePropertyPrefix = privatePropertyPrefix;
    meph.defaultEventPrefix = defaultEventPrefix;
    meph.listenersPropertyKey = listenersPropertyKey;
    meph.nonEnumerablePropertyPrefix = nonEnumerablePropertyPrefix;
    meph.isObservablePropertyKey = isObservablePropertyKey;
    meph.isValidatablePropertyKey = isValidatablePropertyKey;
    meph.connectableTypes = connectableTypes;
    meph.dataObjectReferenceAttribute = dataObjectReferenceAttribute;
    meph.bindPrefixDelimiter = bindPrefixDelimiter;
    meph.defaultDataBindString = defaultBindPrefix;
    meph.defaultReversePrefix = defaultReversePrefix;
    meph.pathDelimiter = pathDelimiter;
    meph.pipeString = pipeString;
    meph.MaxTransitionTime = 500;
    meph.ParameterDelimiter = ',';
    meph.jsync = jsync;
    meph.prefixes = {
        retrievalEventPrefix: retrievalEventPrefix,
        templatePostFix: templatePostFix
    };
    meph.paths = paths;
    /**
     * @method setPath
     * Set the path that corresponds to the prefix.
     * @param {String} path
     * @param {String} prefix
     **/
    meph.setPath = function (path, prefix) {
        meph.Array(meph.paths);
        if (meph.paths.length > 0) {
            meph.paths.removeWhere(function (x) { return x.prefix === prefix; });
        }
        meph.paths.push({
            path: path,
            prefix: prefix
        });
    };
    meph.setInterval = function () {
        return setInterval.apply(null, arguments);
    }
    /**
     * @method getPath
     * Get the path.
     * @param {String} path
     **/
    meph.getPath = function (prefix) {
        meph.Array(paths);
        var path = paths.first(function (x) { return x.prefix === prefix; });
        if (path) {
            return path.path;
        }
        return null;
    }
    /**
     * @method addBindPrefixShortCuts
     * Adds binding prefixes to the library.
     * @param {String} prefix
     * @param {String} type
     **/
    meph.addBindPrefixShortCuts = function addBindPrefixShortCuts(prefix, type) {
        var has = bindPrefixShortCuts.some(function (x) {
            return x.prefix === prefix;
        });
        if (!has) {
            bindPrefixShortCuts.push({ prefix: prefix, type: type });
        }
    };

    /**
     * @method getBindPrefixShortCuts
     * Gets the binding prefixes.
     * @returns {Array}
     **/
    meph.getBindPrefixShortCuts = function () {
        return meph.Array(bindPrefixShortCuts);
    }

    /**
     * @method getBindPrefixShortCut
     * Gets a prefix short cut
     * @param {String} prefix
     * @returns {Object}
     */
    meph.getBindPrefixShortCut = function (prefix) {
        return meph.getBindPrefixShortCuts().first(function (x) { return x.prefix === prefix; });
    }

    /**
     * @method addDataBindPrefix
     * Adds a data-bind prefix.
     * @param {String} prefix
     */
    meph.addDataBindPrefix = function (prefix) {
        var has = meph.Array(dataBindPrefixes).some(function (x) { return x === prefix; });
        if (!has) {
            dataBindPrefixes.push(prefix);
        }
    }
    /**
     * @method removeDataBindPrefix
     * Removes the data bind prefix.
     * @param {String} prefix
     **/
    meph.removeDataBindPrefix = function (prefix) {
        return meph.Array(dataBindPrefixes).removeWhere(function (x) { return x === prefix; });
    }

    /**
     * @method addReverseDataBindPrefx
     * Adds a data-bind prefix for reverse binding.
     * @param {String} prefix
     **/
    meph.addReverseDataBindPrefx = function (prefix) {
        var has = reverseBindingPrefixes.some(function (x) { return x === prefix; });

        if (!has) {
            reverseBindingPrefixes.push(prefix);
        }
    }

    /**
     * @method addEventDataBindingPrefixes
     * Adds a data-bind prefix for event binding.
     * @param {String} prefix
     **/
    meph.addEventDataBindingPrefixes = function (prefix) {
        var has = eventDataBindingPrefixes.some(function (x) { return x === prefix; });
        if (!has) {
            eventDataBindingPrefixes.push(prefix);
        }
    }

    /**
     * @method getEventDataBindingPrefixes
     * Gets Event databinding prefixes;
     **/
    meph.getEventDataBindingPrefixes = function () {
        return meph.Array(eventDataBindingPrefixes.concat([defaultEventPrefix]));
    }

    /**
     * @method removeEventDataBindingPrefix
     * Remove event data-binding prefix.
     * @param {String} prefix;
     **/
    meph.removeEventDataBindingPrefix = function (prefix) {
        var has = eventDataBindingPrefixes.some(function (x) { return x === prefix; });
        if (has) {
            eventDataBindingPrefixes.removeWhere(function (x) { return x === prefix; });
        }
    }
    /**
     * @method removeReverseDataBindPrefix
     * Removes the reverse data bind prefix.
     * @param {String} prefix
     **/
    meph.removeReverseDataBindPrefix = function (prefix) {
        return meph.Array(reverseBindingPrefixes).removeWhere(function (x) { return x === prefix; });
    }

    /**
     * @method getReverseDataBindingPrefixes
     * Gets Reverse databinding prefixes;
     **/
    meph.getReverseDataBindingPrefixes = function () {
        return meph.Array(reverseBindingPrefixes.concat([defaultReversePrefix]));
    }
    /**
     * @method getDataBindPrefixes
     * Gets the data-bind prefixes.
     * @returns {Array}
     */
    meph.getDataBindPrefixes = function () {
        return meph.Array(dataBindPrefixes.concat([defaultBindPrefix]));
    }
    /**
     * Checks surface equality between to objects.
     * @param {Object} i
     * @param {Object} j
     ***/
    meph.equals = function equals(i, g) {
        for (var t in i) {
            if (i[t] !== g[t])
                return false;
        }
        for (var t in g) {
            if (i[t] !== g[t])
                return false;
        }
        return true;
    },
    /**
     * @method createEvent
     * Creates a DOM Event.
     * @param {String} type
     * @param {Object} config
     **/
    meph.createEvent = function createEvent(type, config) {
        var evnt,
            i;
        if (document.createEvent) {
            evnt = document.createEvent('Event');
            evnt.initEvent(type, true, true);

            for (i in config) {
                if (config.hasOwnProperty(i)) {
                    evnt[i] = config[i];
                }
            }
        }
        else {
            evnt = new Event(type);
            for (i in config) {
                if (config.hasOwnProperty(i)) {
                    evnt[i] = config[i];
                }
            }
        }
        return evnt;
    };

    /**
     * Gets the required classe paths
     * @param {Object} config
     * @param {String} config.extend
     * @param {Array} config.requires
     */
    meph.getRequiredClasses = function (config) {
        if (config.extend || (config.requires)) {
            var t = meph.Array(((config.extend ? [config.extend] : [])
                                .concat(config.requires || [])));
            var res = [];
            for (var i = 0 ; i < t.length ; i++) {
                if (t[i]) {
                    res.push(t[i]);
                }
            }
            return res;
        }
        return [];
    }
    var getRequiredClasses = meph.getRequiredClasses;

    /**
     * Gets the required template paths.
     * @param {Object} config
     * @param {String} config.extend
     * @param {Array} config.requires
     */
    meph.getRequiredTemplates = function (config, className) {
        var result;
        if ((config.templates && config.templates.length > 0)) {
            result = meph.Array(config.templates)
                        .where(function (x) { return x; });
        }
        else if (config.templates === true) {
            result = meph.Array([className]);
        }
        else
            result = [];
        if (config.scripts && config.scripts.length) {
            config.scripts.foreach(function (x) {
                result.push(x);
            })
        }
        return result;
    }
    var getRequiredTemplates = meph.getRequiredTemplates;
    /**
     * @method Array
     * Adds additional functionality to an array.
     * @param {Array} array
     * @return {Array}
     */
    meph.Array = function (array) {
        array = array || [];
        if (MEPH && MEPH.util && MEPH.util.Array) {
            MEPH.util.Array.create(array);
        }
        return array;
    }
    /**
     * @method createTemplateNode
     * Creates a template node.
     * @param {String} classifiedName
     * @returns {Object}
     */
    meph.createTemplateNode = function (classifiedName) {
        var templateinfo = getTemplate(classifiedName);
        return {
            alias: templateinfo.alias,
            node: document.createElement(templateinfo.alias)
        }
    }
    /**
     * @method Convert
     * Converts an object into an array.
     **/
    meph.Convert = function (arrayLike) {
        if (MEPH && MEPH.util && MEPH.util.Array) {
            return MEPH.util.Array.convert(arrayLike);
        }
        return arrayLike;
    }
    //var Array;
    meph.IsObject = function (object) {
        if ((typeof object === "object") && (object !== null) && !Array.isArray(object) &&
    !(isNode(object) || isElement(object))) {
            return true;
        }
        return false;
    }
    //Returns true if it is a DOM node
    function isNode(o) {
        return (
          typeof Node === "object" ? o instanceof Node :
          o && typeof o === "object" && typeof o.nodeType === "number" && typeof o.nodeName === "string"
        );
    }

    //Returns true if it is a DOM element    
    function isElement(o) {
        return (
          typeof HTMLElement === "object" ? o instanceof HTMLElement : //DOM2
          o && typeof o === "object" && o !== null && o.nodeType === 1 && typeof o.nodeName === "string"
      );
    }
    /**
    * Gets a defined class
    * @param {String} _class The requested class path.
    * @param {Object} offset An optional parameter.
    * @return {Object}
    */
    meph.getDefinedClass = function (_class, offset) {
        var namespaceSplit = _class.split(".");

        var offset = offset || window;
        for (var i = 0; i < namespaceSplit.length; i++) {
            if (offset[namespaceSplit[i]] === null || offset[namespaceSplit[i]] === undefined) {
                return null;
            }
            else {
                offset = offset[namespaceSplit[i]];
            }
        }
        return offset;
    };

    /**
     * @method getPathValue
     * Gets the value from the object
     * @param {String} path
     * @param {Object} object
     */
    meph.getPathValue = meph.getDefinedClass;

    /**
     * @method setPathValue
     * Sets the value on the path.
     * @param {Object} offset
     * @param {String} path
     * @param {Object} value
     * @returns {Boolean}
     **/
    meph.setPathValue = function (offset, path, value) {
        var pathSplit = path.split(".");
        var previous = null;
        for (var i = 0 ; i < pathSplit.length ; i++) {
            if (!offset || !meph.mephHasOwnProperty(offset, pathSplit[i]) && (pathSplit.length - 1 > i)) {
                return false;
            }
            else {
                previous = offset;
                offset = offset[pathSplit[i]];
            }
        }
        if (previous) {
            previous[pathSplit[i - 1]] = value;
        }
        return true;
    }
    /**
     * @method mephHasOwnProperty
     **/
    meph.mephHasOwnProperty = function (obj, property) {
        var i;
        if (obj.hasOwnProperty(property)) {
            return true;
        }

        for (i in obj) {
            if (property === i) {
                return true;
            }
        }
        return false;
    }

    /**
     * @method apply
     * Applies the properties of object1 on to object2.
     * @param {Object} object1
     * @param {Object} object2
     **/
    meph.apply = function (object1, object2) {
        var i;
        for (i in object1) {
            if (meph.mephHasOwnProperty(object1, i)) {
                object2[i] = object1[i];
            }
        }
        return object2;
    }

    /**
     * @method applyIf
     * Applies the properties of object1 on to object2.
     * @param {Object} object1
     * @param {Object} object2
     **/
    meph.applyIf = function (object1, object2) {
        var i;
        for (i in object1) {
            if (meph.mephHasOwnProperty(object1, i) && !meph.mephHasOwnProperty(object2, i)) {
                object2[i] = object1[i];
            }
        }
        return object2;
    }

    var templates = [];
    /**
     * Gets a defined template
     * @param {String} templateNameSpace The requested template path.
     * @return {Object}
     **/
    meph.getDefinedTemplate = function (templateNameSpace) {
        return meph.Array(templates).first(function (x) { return x.classifiedName === templateNameSpace; });
    }

    meph.getTemplates = function () {
        return templates.select();
    }

    /**
     * @method getTemplateByAlias
     * Gets template information by alias.
     * @param {String} name
     * @returns {Object}
     */
    meph.getTemplateByAlias = function (alias) {
        return meph.Array(templates).first(function (x) { return x.alias === alias; });
    }

    /**
     * @method getAllAliases
     * Gets all the alias names registerd in the framework.
     * @returns {Array}
     */
    meph.getAllAliases = function (alias) {
        return meph.Array(templates).select(function (x) { return x.alias; }).where(function (x) { return x; });
    }

    /**
     * @method getTemplateByNode
     * Gets the template information based on the node name.
     * @param {Object} node
     * @returns {Object}
     */
    meph.getTemplateByNode = function (node) {
        var nodename = node.nodeName.toLowerCase();
        return getTemplateByAlias(nodename);
    }

    var getTemplateByAlias = meph.getTemplateByAlias;
    var getDefinedTemplate = meph.getDefinedTemplate;
    /**
     * Gets template information by classified name or by alias.
     * @param {String} name
     */
    meph.getTemplate = function (name) {
        return getDefinedTemplate(name) || getTemplateByAlias(name);
    }
    var getTemplate = meph.getTemplate;
    /**
     * Adds template information to the global collection.
     * @param {Object} templateInfo
     */
    meph.addTemplateInformation = function (templateInfo) {
        var definedTemplate = getDefinedTemplate(templateInfo.classifiedName);
        if (!definedTemplate) {
            var alias = meph.getTemplateByAlias(templateInfo.alias);
            if (alias) {
                templateInfo.alias = null;

            }

            templates.push(templateInfo);
            meph.fire(meph.events.definedTemplate, templateInfo);
        }
    }
    var addTemplateInformation = meph.addTemplateInformation;

    var classes = [];
    /**
     * @method addDefinedClassInformation
     * Adds defined class information
     **/
    meph.addDefinedClassInformation = function (classInformation) {
        var info = getDefinedClassInformation(classInformation.alias);
        if (!info) {
            meph.Array(classInformation.alternateNames).foreach(function (name) {
                var info = createClassPath(name);
                info.previous[info.name] = getDefinedClass(classInformation.classifiedName);
            });
            classes.push(classInformation);
        }
    }
    var addDefinedClassInformation = meph.addDefinedClassInformation;
    /**
     * @method getDefinedClasses
     * Get defined classes.
     **/
    meph.getDefinedClasses = function () {
        return classes.select(function (x) { return x; });
    }

    /**
     * @method cancelBubble
     * Cancels and stops the bubbling of an event.
     **/
    meph.cancelBubble = function (e) {
        var evt = e ? e : window.event;
        if (evt.stopPropagation) evt.stopPropagation();
        if (evt.cancelBubble != null) evt.cancelBubble = true;
    }

    /**
     * @method getDefinedClassInformation
     * Get defined class information.
     * @param {String} alias
     * @returns {Object}
     **/
    meph.getDefinedClassInformation = function (alias) {
        return meph.Array(classes).first(function (x) {
            return x.alias === alias || x.classifiedName === alias || x.alternateNames.some(function (x) { return x === alias; });
        });
    }

    meph.generateCustomVisualStudioTags = function () {
        var newline = '\r\n';
        var result = '<xsd:group name="flowContent">' + newline + '\t\t<xsd:choice>' + newline;
        meph.Array(classes).where(function (x) { return x.alias; }).select(function (x) {
            if (x.alias.indexOf('.') === -1 && x.alias.indexOf('-') === -1) {
                result += '\t\t\t<xsd:element ref="' + x.alias + '" />' + newline;
            }
        });
        result += '\t\t</xsd:choice>' + newline;
        result += '</xsd:group>' + newline;

        meph.Array(classes).where(function (x) { return x.alias; }).select(function (x) {
            if (x.alias.indexOf('.') === -1 && x.alias.indexOf('-') === -1) {
                result += '\t\t\t<xsd:element name="' + x.alias + '" type="simpleFlowContentElement" />' + newline;
            }
        });
        return result;
    }
    var getDefinedClassInformation = meph.getDefinedClassInformation;

    /**
     * Removes the template information.
     * @param {String} templateAlias
     * @returns {Array}
     */
    meph.removeTemplateInformation = function (templateAlias) {
        var definedTemplate = getTemplate(templateAlias);
        return meph.Array(templates).removeWhere(function (x) { return x === definedTemplate; });
    }
    var removeTemplateInformation = meph.removeTemplateInformation;
    /**
     * Creates a deep clone of an object.
     * @param {Object} obj
     * @return {Object}
     */
    meph.clone = function (obj, skip) {
        skip = skip || [];
        // Handle the 3 simple types, and null or undefined
        if (null == obj || "object" != typeof obj) return obj;

        // Handle Date
        if (obj instanceof Date) {
            var copy = new Date();
            copy.setTime(obj.getTime());
            return copy;
        }
        if (obj instanceof String) {
            return obj;
        }
        if (obj instanceof Number) {
            return obj;
        }
        // Handle Array
        if (obj instanceof Array) {
            var copy = [];
            for (var i = 0, len = obj.length; i < len; i++) {
                copy[i] = clone(obj[i]);
            }
            return copy;
        }

        // Handle Object
        if (obj instanceof Object) {
            var copy = {};
            for (var attr in obj) {
                if (!skip.some(function (x) { return x === attr; })) {
                    if (obj.hasOwnProperty(attr)) copy[attr] = clone(obj[attr]);
                }
            }
            return copy;
        }

        throw new Error("Unable to copy obj! Its type isn't supported.");
    };
    var clone = meph.clone;

    /**
     * @method
     * Generates a globally unique identifier.
     **/
    meph.GUID = function () {
        var guid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
        return guid;
    }

    meph.Events = function (object) {
        if (object[privateVariablePrefix + 'listeners']) {
            return;
        }
        Object.defineProperty(object, listenersPropertyKey, {
            enumerable: false,
            configurable: false,
            writeable: true,
            get: function () {
                return this[privateVariablePrefix + 'listeners'];
            }.bind(object)
        });
        Object.defineProperty(object, domListenersPropertyKey, {
            enumerable: false,
            configurable: false,
            writeable: true,
            get: function () {
                return this[privateVariablePrefix + 'domlisteners'];
            }.bind(object)
        });

        Object.defineProperty(object, privateVariablePrefix + 'listeners', {
            enumerable: false,
            configurable: false,
            writeable: true,
            value: []
        });

        Object.defineProperty(object, privateVariablePrefix + 'domlisteners', {
            enumerable: false,
            configurable: false,
            writeable: true,
            value: []
        });

        Object.defineProperty(object, privateVariablePrefix + 'setProperty', {
            enumerable: false,
            writable: false,
            configurable: false,
            value: function (propName, value) {
                this[privateVariablePrefix + propName] = value;
            }
        });

        Object.defineProperty(object, '_pause', {
            enumerable: false,
            writable: false,
            configurable: false,
            value: function (context) {
                if (context) {
                    var pauseContext = this[privateVariablePrefix + 'context_paused'].first(function (x) {
                        return x.context === context;
                    });
                    if (!pauseContext) {
                        pauseContext = { context: context, paused: 0 };
                        this[privateVariablePrefix + 'context_paused'].push(pauseContext);
                    }
                    pauseContext.paused++;
                }
                else {
                    this[privateVariablePrefix + "paused"]++;
                }
            }
        });

        Object.defineProperty(object, 'is_paused', {
            enumerable: false,
            writable: false,
            configurable: false,
            value: function (context) {
                if (context) {
                    var pausecontext = this[privateVariablePrefix + 'context_paused'].first(function (x) {
                        return x.context === context;
                    });
                    if (pausecontext) {
                        return pausecontext.paused;
                    }
                    else {
                        return false;
                    }
                }
                return this[privateVariablePrefix + 'paused'];
            }
        });

        Object.defineProperty(object, privateVariablePrefix + 'paused', {
            enumerable: false,
            writable: true,
            configurable: false,
            value: 0
        });

        Object.defineProperty(object, '_start', {
            enumerable: false,
            writable: false,
            configurable: false,
            value: function (context) {
                if (context) {
                    var pauseContext = this[privateVariablePrefix + 'context_paused'].first(function (x) {
                        return x.context === context;
                    });
                    if (!pauseContext) {
                        pauseContext = { context: context, paused: 0 };
                        this[privateVariablePrefix + 'context_paused'].push(pauseContext);
                    }
                    pauseContext.paused--;
                    if (pauseContext.paused < 0) {
                        pauseContext.paused = 0;
                    }
                }
                else {
                    this[privateVariablePrefix + 'paused']--;
                    if (this[privateVariablePrefix + 'paused'] < 0) {
                        this[privateVariablePrefix + 'paused'] = 0;
                    }
                }
            }
        });

        Object.defineProperty(object, privateVariablePrefix + 'context_paused', {
            enumerable: false,
            writable: true,
            configurable: false,
            value: []
        });

        Object.defineProperty(object, 'don', {
            enumerable: false,
            configurable: true,
            writeable: true,
            value: function (type, dom, func, reference, capture) {
                var $dom;
                if (!Array.isArray(dom)) {
                    $dom = [dom];
                }
                else {
                    $dom = dom;
                }
                var me = this;
                $dom.foreach(function (dom) {
                    dom.addEventListener(type, func);
                    meph.Array(me[domListenersPropertyKey]).push({
                        type: type,
                        dom: dom,
                        func: func,
                        reference: reference || me,
                        capture: capture || false
                    });
                })
            }.bind(object)
        });

        Object.defineProperty(object, 'dun', {
            enumerable: false,
            configurable: true,
            writeable: true,
            value: function (reference, type, dom, func) {
                if (arguments.length === 0) {
                    reference = this;
                }
                meph.Array(this[domListenersPropertyKey]).removeWhere(function (x) {
                    if (func && type) {
                        return x.func = func && type === x.type;
                    }
                    else if (func) {
                        return x.func = func;
                    }
                    else if (reference && type) {
                        return x.type === type && reference === x.reference;
                    }
                    else if (type) {
                        return x.type === type;
                    }
                    else if (reference) {
                        return x.reference === reference;
                    }
                    return true;
                }).foreach(function (ops) {
                    ops.dom.removeEventListener(ops.type, ops.func, ops.capture);
                })
            }.bind(object)
        });


        Object.defineProperty(object, 'on', {
            enumerable: false,
            configurable: true,
            writeable: true,
            value: function (type, func, reference, pausekey) {
                meph.Array(this[listenersPropertyKey]).push({
                    type: type,
                    func: func,
                    pausekey: pausekey || null,
                    reference: reference || this
                })
                return this;
            }.bind(object)
        });
        Object.defineProperty(object, 'hasOn', {
            enumerable: false,
            configurable: true,
            writeable: true,
            value: function (type, reference) {
                return meph.Array(this[listenersPropertyKey]).contains(function (x) {
                    if (reference && type) {
                        return x.type === type && reference === x.reference;
                    }
                    else if (type) {
                        return x.type === type;
                    }
                    else if (reference) {
                        return x.reference === reference;
                    }
                    return true;
                });
            }.bind(object)
        });
        Object.defineProperty(object, 'onIf', {
            enumerable: false,
            configurable: true,
            writeable: true,
            value: function (type, reference) {
                if (!this.hasOn(type, reference)) {
                    this.on(type, reference);
                }
            }
        });
        Object.defineProperty(object, 'un', {
            enumerable: false,
            configurable: true,
            writeable: true,
            value: function (type, reference) {
                meph.Array(this[listenersPropertyKey]).removeWhere(function (x) {
                    if (reference && type) {
                        return x.type === type && reference === x.reference;
                    }
                    else if (type) {
                        return x.type === type;
                    }
                    else if (reference) {
                        return x.reference === reference;
                    }
                    return true;
                });
            }.bind(object)
        });

        Object.defineProperty(object, 'fire', {
            enumerable: false,
            configurable: false,
            writable: true,
            value: function (type) {
                var args = meph.Convert(arguments);
                if (this.is_paused()) {
                    return this;
                }
                meph.Array(this[listenersPropertyKey]).where(function (x) {
                    return x.type === type;
                }).where(function (x) {
                    if (x.reference && x.reference.is_paused && x.pausekey) {
                        return !x.reference.is_paused(x.pausekey);
                    }
                    return true;
                }).foreach(function (x) {
                    try {
                        x.func.apply(x.reference || null, args);
                    }
                    catch (e) { meph.Log(e) }
                })
                return this;
            }.bind(object)
        });
        return object;
    }
    var clone = meph.clone;
    var getDefinedClass = meph.getDefinedClass;
    var privateVariablePrefix = ' $ ';
    (function () {
        var initializing = false,
            fnTest = /xyz/.test(function () {
                xyz;
            }) ? /\b_super\b/ : /.*/;

        // The base Class implementation (does nothing)
        this.Class = function () {
        };
        var extractPropsAndFunc = function (definedMixin) {
            var funcs = {};
            for (var f in definedMixin.prototype) {
                if (definedMixin.prototype.hasOwnProperty(f)) {
                    funcs[f] = definedMixin.prototype[f];
                }
            }
            return funcs;
        }
        // Create a new Class that inherits from this class
        Class.extend = function (type, prop) {
            var _super = this.prototype;

            // Instantiate a base class (but only create the instance,
            // don't run the init constructor)
            initializing = true;
            var prototype = new this();
            initializing = false;
            var mixins = {};

            prototype.mixins = prototype.mixins || _super.mixins || {};
            if (prop.mixins && !Array.isArray(prop.mixins)) {
                for (var mixin in prop.mixins) {
                    if (prop.mixins.hasOwnProperty(mixin)) {
                        mixins[mixin] = prop.mixins[mixin];
                    }
                }
            }
            else if (prop.mixins && Array.isArray(prop.mixins)) {
                meph.Array(prop.mixins);
                prop.mixins.foreach(function (mixin) {
                    var definedMixin = getDefinedClass(mixin);
                    if (definedMixin) {
                        var funcs = extractPropsAndFunc(definedMixin);
                        for (var name in funcs) {
                            if (name === 'requires' ||
                                   name === 'statics' ||
                                    name === 'constructor' ||
                                   name === 'extend' ||
                                   name === 'templates' ||
                                   name === 'scripts' ||
                                   name === 'mixins' ||
                                   name === 'observable' ||
                                   name === 'properties')
                                continue;
                            prototype[name] = funcs[name];
                        }
                    }
                });
            }


            for (var mixin in mixins) {
                var definedMixin = getDefinedClass(mixins[mixin]);
                if (definedMixin && definedMixin.prototype) {
                    var funcs = extractPropsAndFunc(definedMixin);
                    prototype.mixins[mixin] = funcs;
                }
            }
            // Copy the properties over onto the new prototype
            for (var name in prop) {
                if (name === 'requires' ||
                    name === 'statics' ||
                    name === 'extend' ||
                    name === 'templates' ||
                    name === 'mixins' ||
                    name === 'scripts' ||
                    name === 'observable' ||
                    name === 'properties')
                    continue;
                // Check if we're overwriting an existing function
                prototype[name] = typeof prop[name] == "function" &&
                typeof _super[name] == "function" && fnTest.test(prop[name]) ?
                (function (name, fn) {
                    return function () {
                        var tmp = this.callParent;

                        // Add a new ._super() method that is the same method
                        // but on the super-class
                        this.callParent = _super[name];

                        // The method only need to be bound temporarily, so we
                        // remove it when we're done executing
                        var ret = fn.apply(this, arguments);
                        this.callParent = tmp;

                        return ret;
                    };
                })(name, prop[name]) :
                prop[name];
                if (typeof prototype[name] == "function") {
                    var _addsuper = typeof prop[name] === "function" &&
                    typeof _super[name] === "function";
                    // 'script.soundfont.chunks.SoundFontChunk'
                    var nooverrides = false;
                    if (!_addsuper) {

                        if ((prop.requires || []).all(function (x) {

                            //    var re = new RegExp("\b" + x.split('.').last() + "\b/ : /.*");
                            //    var $fnTest = /xyz/.test(function () {
                            //        xyz;
                            //}) ? re : /.*/;
                            return new RegExp(x.split('.').last()).test(prop[name])
                        })) {
                            nooverrides = true;
                        }
                    }
                    if (!nooverrides) {
                        prototype[name] = (function (name, fn, requires, addsuper, _extends) {
                            return function () {
                                var t = 1;
                                var temp = {};
                                var longtemp = {};
                                var tempclassnames = requires.slice().concat(_extends.slice()).concat(type.slice());
                                if (addsuper) {
                                    var tmp = this.callParent;
                                    // Add a new ._super() method that is the same method
                                    // but on the super-class
                                    this.callParent = _super[name];
                                    var theargs = arguments;
                                    this.super = function () {
                                        return _super[name].apply(this, theargs);

                                    }
                                }
                                //for (var i = 0; i < tempclassnames.length; i++) {
                                MEPH.Array(tempclassnames).foreach(function (t, i) {
                                    var c = getDefinedClass(tempclassnames[i]);
                                    var namespaceSplit = tempclassnames[i].split(".");
                                    var cname = namespaceSplit[namespaceSplit.length - 1];
                                    temp[cname] = window[cname];
                                    longtemp[tempclassnames[i]] = window[tempclassnames[i]];
                                    window[cname] = c;
                                    window[tempclassnames[i]] = c; // longtemp[tempclassnames[i]] =
                                });
                                try {
                                    var ret = fn.apply(this, arguments);
                                }
                                catch (ee) {
                                    var error = ee;
                                    if (!(ee instanceof Error)) {
                                        ee = new Error(ee);
                                    }
                                    if (meph.DebugMode) {
                                        console.log(ee.stack);
                                    }
                                    throw error;
                                }
                                finally {
                                    for (var i in temp) {
                                        window[i] = temp[i];
                                    }
                                    for (var i in longtemp) {
                                        window[i] = longtemp[i];
                                    }
                                    if (addsuper) {
                                        this.callParent = tmp;
                                    }

                                }
                                return ret;
                            }
                        })(name, prop[name], prop.requires || [], _addsuper, prop['extend'] || []);
                    }
                    else {
                        prototype[name] = prop[name];
                    }
                }
            }
            if (prop.templates) {
                var templates = prop.templates === true ? [type] : prop.templates;
                prototype.templates = _super.templates ? _super.templates.concat(templates) : templates;

            }
            if (prop.injections) {
                var injections = prop.injections ? prop.injections : [];
                prototype.injections = _super.injections ? _super.injections.concat(injections) : injections;
            }

            if (prop.scripts) {
                var scripts = prop.scripts === true ? [type] : prop.scripts;
                prototype.scripts = _super.scripts ? _super.scripts.concat(scripts) : scripts;

            }

            if (prop.properties) {
                prop.properties.____type = type;
            }

            if (prop.properties) {
                for (var i in prop.properties) {
                    prototype[i] = clone(prop.properties[i]);
                }
            }

            if (prop.observable) {
                var observables = [];
                for (var i in prop.observable) {
                    prototype[i] = clone(prop.observable[i]);
                    observables.push(i);
                }
                prototype.$__observables = prototype.$__observables || [];
                observables.foreach(function (x) {
                    if (!prototype.$__observables.contains(function (y) {
                        return x == y;
                    })) {
                        prototype.$__observables.push(x);
                    }
                });
            }
            // The dummy class constructor
            function Class() {

                if (!this.$window) {
                    Object.defineProperty(this, '$window', {
                        enumerable: false,
                        writeable: true,
                        configurable: true,
                        get: function () {
                            return window;
                        }
                    })
                }
                this.____type = type;
                // All construction is actually done in the init method
                if (!initializing && this.initialize)
                    this.initialize.apply(this, arguments);
            }

            // Populate our constructed prototype object
            Class.prototype = prototype;

            // Enforce the constructor to be what we expect
            Class.prototype.constructor = Class;

            // And make this class extendable
            Class.extend = arguments.callee;

            if (prop.statics) {
                for (var i in prop.statics) {
                    Class[i] = prop.statics[i];
                }
            }

            return Class;
        };
    })();

    meph.events = {
        frameworkReady: 'frameworkReady',
        definedClass: 'definedClass',
        definedTemplate: 'definedTemplate'
    }
    meph.listeners = meph.listeners || [];

    var listeners = meph.listeners;

    meph.on = function (type, func, scope) {
        meph.listeners.push({
            type: type,
            func: func,
            scope: scope
        });
    }
    meph.fire = function (type, args) {
        meph.Array(meph.listeners).filter(function (listener) {

            return listener.type === type;
        }).forEach(function (listener) {


            listener.func.apply(listener.scope, meph.Array([args]));
        });
    }
    meph.removeListeners = function (type, reference) {
        meph.listeners.removeWhere(function (listeners) {
            if (type && reference) {
                return listeners.type == type && listeners.scope === reference;
            }
            else if (reference) {
                return listeners.scope === reference;
            }
            else if (type) {
                return listeners.type == type;
            }
            return true;
        });
    }
    meph.un = meph.removeListeners;

    var frameworkReady;
    var frameworkPromise;
    meph.ready = function () {
        if (frameworkPromise) {
            return frameworkPromise;
        }
        frameworkPromise = new Promise(function (resolve, failed) {
            frameworkReady = resolve;
        }).then(function () {
            meph.Array(meph.connectableTypes).foreach(function (x) {
                meph.addBindPrefixShortCuts(x.shortCut, x.type);
            });
        }).then(function () {
            try {
                meph.mouse = meph.mouse || { position: { x: 0, y: 0 } }
                meph.workerthread = workerthread;
                if (!workerthread) {
                    document.body.addEventListener('mousemove', function (e) {
                        if (MEPH.util && MEPH.util.Dom)
                            meph.mouse.position = MEPH.util.Dom.getScreenEventPositions(e).first();
                    });
                }
            } catch (e) { }
        });
        return frameworkPromise;
    }
    meph.on(meph.events.definedClass, function (className) {
        if (getDefinedClass('util.Array', meph)) {
            meph.fire(meph.events.frameworkReady);
            meph.removeListeners(meph.events.definedClass, meph);
        }
    }, meph);
    meph.on(meph.events.frameworkReady, function () {
        frameworkReady();
    });
    var loadpromise = null;
    if (getDefinedClass('util.Array', meph)) {
        meph.fire(meph.events.frameworkReady);

    }
    else {
        meph.requiredFiles = [
                $frameWorkPath + '/util/String.js',
                $frameWorkPath + '/util/Array.js',
                $frameWorkPath + '/util/Dom.js',
                $frameWorkPath + '/util/Template.js',
                $frameWorkPath + '/util/Observable.js'];
        loadpromise = meph.loadScripts(meph.requiredFiles);
    }

    meph.frameWorkPath = $frameWorkPath;
    meph.frameWorkPathSource = $frameWorkPath + '/meph.js';


    ///////////////// Standard prefixes.
    meph.addEventDataBindingPrefixes('meph-event');
    meph.addDataBindPrefix('meph-data');


    return { framework: meph, promise: loadpromise };
});
if (self) {
    self.onmessage = function (oEvent) {

        switch (oEvent.data.func) {
            case 'start':
                eval(oEvent.data.src);
                break;
            case 'import':
                importScripts(oEvent.data.src);
                postMessage({ "success": true });
                break;
            case 'load':
                self[oEvent.data.framework].requires(oEvent.data.script).then(function () {
                    postMessage({ "success": true });
                });
                break;
            case 'exec':
                Promise.resolve().then(function () {
                    eval('var work = ' + oEvent.data.work);
                    return work.apply(null, oEvent.data.args || []);
                }).then(function (result) {
                    postMessage(result);
                });
                break;
        }

    };
    //if (self === window)
    //    postMessage({ "success": true });
}

var exports = exports || null;
var nodejs = {
    log: function () {
    }
}
if (exports) {

    var vm = require("vm");
    window = global;
    var document = null;
    nodejs.log = function () {
        console.log(arguments);
    }

    exports.mephFrameWork = mephFrameWork;
}﻿if (!window.Promise) { !function () { var a, b, c, d; !function () { var e = {}, f = {}; a = function (a, b, c) { e[a] = { deps: b, callback: c } }, d = c = b = function (a) { function c(b) { if ("." !== b.charAt(0)) return b; for (var c = b.split("/"), d = a.split("/").slice(0, -1), e = 0, f = c.length; f > e; e++) { var g = c[e]; if (".." === g) d.pop(); else { if ("." === g) continue; d.push(g) } } return d.join("/") } if (d._eak_seen = e, f[a]) return f[a]; if (f[a] = {}, !e[a]) throw new Error("Could not find module " + a); for (var g, h = e[a], i = h.deps, j = h.callback, k = [], l = 0, m = i.length; m > l; l++) "exports" === i[l] ? k.push(g = {}) : k.push(b(c(i[l]))); var n = j.apply(this, k); return f[a] = g || n } }(), a("promise/all", ["./utils", "exports"], function (a, b) { "use strict"; function c(a) { var b = this; if (!d(a)) throw new TypeError("You must pass an array to all."); return new b(function (b, c) { function d(a) { return function (b) { f(a, b) } } function f(a, c) { h[a] = c, 0 === --i && b(h) } var g, h = [], i = a.length; 0 === i && b([]); for (var j = 0; j < a.length; j++) g = a[j], g && e(g.then) ? g.then(d(j), c) : f(j, g) }) } var d = a.isArray, e = a.isFunction; b.all = c }), a("promise/asap", ["exports"], function (a) { "use strict"; function b() { return function () { process.nextTick(e) } } function c() { var a = 0, b = new i(e), c = document.createTextNode(""); return b.observe(c, { characterData: !0 }), function () { c.data = a = ++a % 2 } } function d() { return function () { j.setTimeout(e, 1) } } function e() { for (var a = 0; a < k.length; a++) { var b = k[a], c = b[0], d = b[1]; c(d) } k = [] } function f(a, b) { var c = k.push([a, b]); 1 === c && g() } var g, h = "undefined" != typeof window ? window : {}, i = h.MutationObserver || h.WebKitMutationObserver, j = "undefined" != typeof global ? global : this, k = []; g = "undefined" != typeof process && "[object process]" === {}.toString.call(process) ? b() : i ? c() : d(), a.asap = f }), a("promise/cast", ["exports"], function (a) { "use strict"; function b(a) { if (a && "object" == typeof a && a.constructor === this) return a; var b = this; return new b(function (b) { b(a) }) } a.cast = b }), a("promise/config", ["exports"], function (a) { "use strict"; function b(a, b) { return 2 !== arguments.length ? c[a] : (c[a] = b, void 0) } var c = { instrument: !1 }; a.config = c, a.configure = b }), a("promise/polyfill", ["./promise", "./utils", "exports"], function (a, b, c) { "use strict"; function d() { var a = "Promise" in window && "cast" in window.Promise && "resolve" in window.Promise && "reject" in window.Promise && "all" in window.Promise && "race" in window.Promise && function () { var a; return new window.Promise(function (b) { a = b }), f(a) }(); a || (window.Promise = e) } var e = a.Promise, f = b.isFunction; c.polyfill = d }), a("promise/promise", ["./config", "./utils", "./cast", "./all", "./race", "./resolve", "./reject", "./asap", "exports"], function (a, b, c, d, e, f, g, h, i) { "use strict"; function j(a) { if (!w(a)) throw new TypeError("You must pass a resolver function as the first argument to the promise constructor"); if (!(this instanceof j)) throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function."); this._subscribers = [], k(a, this) } function k(a, b) { function c(a) { p(b, a) } function d(a) { r(b, a) } try { a(c, d) } catch (e) { d(e) } } function l(a, b, c, d) { var e, f, g, h, i = w(c); if (i) try { e = c(d), g = !0 } catch (j) { h = !0, f = j } else e = d, g = !0; o(b, e) || (i && g ? p(b, e) : h ? r(b, f) : a === F ? p(b, e) : a === G && r(b, e)) } function m(a, b, c, d) { var e = a._subscribers, f = e.length; e[f] = b, e[f + F] = c, e[f + G] = d } function n(a, b) { for (var c, d, e = a._subscribers, f = a._detail, g = 0; g < e.length; g += 3) c = e[g], d = e[g + b], l(b, c, d, f); a._subscribers = null } function o(a, b) { var c, d = null; try { if (a === b) throw new TypeError("A promises callback cannot return that same promise."); if (v(b) && (d = b.then, w(d))) return d.call(b, function (d) { return c ? !0 : (c = !0, b !== d ? p(a, d) : q(a, d), void 0) }, function (b) { return c ? !0 : (c = !0, r(a, b), void 0) }), !0 } catch (e) { return c ? !0 : (r(a, e), !0) } return !1 } function p(a, b) { a === b ? q(a, b) : o(a, b) || q(a, b) } function q(a, b) { a._state === D && (a._state = E, a._detail = b, u.async(s, a)) } function r(a, b) { a._state === D && (a._state = E, a._detail = b, u.async(t, a)) } function s(a) { n(a, a._state = F) } function t(a) { n(a, a._state = G) } var u = a.config, v = (a.configure, b.objectOrFunction), w = b.isFunction, x = (b.now, c.cast), y = d.all, z = e.race, A = f.resolve, B = g.reject, C = h.asap; u.async = C; var D = void 0, E = 0, F = 1, G = 2; j.prototype = { constructor: j, _state: void 0, _detail: void 0, _subscribers: void 0, then: function (a, b) { var c = this, d = new this.constructor(function () { }); if (this._state) { var e = arguments; u.async(function () { l(c._state, d, e[c._state - 1], c._detail) }) } else m(this, d, a, b); return d }, "catch": function (a) { return this.then(null, a) } }, j.all = y, j.cast = x, j.race = z, j.resolve = A, j.reject = B, i.Promise = j }), a("promise/race", ["./utils", "exports"], function (a, b) { "use strict"; function c(a) { var b = this; if (!d(a)) throw new TypeError("You must pass an array to race."); return new b(function (b, c) { for (var d, e = 0; e < a.length; e++) d = a[e], d && "function" == typeof d.then ? d.then(b, c) : b(d) }) } var d = a.isArray; b.race = c }), a("promise/reject", ["exports"], function (a) { "use strict"; function b(a) { var b = this; return new b(function (b, c) { c(a) }) } a.reject = b }), a("promise/resolve", ["exports"], function (a) { "use strict"; function b(a) { var b = this; return new b(function (b) { b(a) }) } a.resolve = b }), a("promise/utils", ["exports"], function (a) { "use strict"; function b(a) { return c(a) || "object" == typeof a && null !== a } function c(a) { return "function" == typeof a } function d(a) { return "[object Array]" === Object.prototype.toString.call(a) } var e = Date.now || function () { return (new Date).getTime() }; a.objectOrFunction = b, a.isFunction = c, a.isArray = d, a.now = e }), b("promise/polyfill").polyfill() }(); }